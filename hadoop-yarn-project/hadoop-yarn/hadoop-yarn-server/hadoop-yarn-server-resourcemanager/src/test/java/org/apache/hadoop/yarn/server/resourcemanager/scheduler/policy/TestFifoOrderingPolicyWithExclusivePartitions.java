begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.policy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests {@link FifoOrderingPolicyWithExclusivePartitions} ordering policy.  */
end_comment

begin_class
DECL|class|TestFifoOrderingPolicyWithExclusivePartitions
specifier|public
class|class
name|TestFifoOrderingPolicyWithExclusivePartitions
block|{
DECL|field|PARTITION
specifier|private
specifier|static
specifier|final
name|String
name|PARTITION
init|=
literal|"test"
decl_stmt|;
DECL|field|PARTITION2
specifier|private
specifier|static
specifier|final
name|String
name|PARTITION2
init|=
literal|"test2"
decl_stmt|;
annotation|@
name|Test
DECL|method|testNoConfiguredExclusiveEnforcedPartitions ()
specifier|public
name|void
name|testNoConfiguredExclusiveEnforcedPartitions
parameter_list|()
block|{
name|FifoOrderingPolicyWithExclusivePartitions
argument_list|<
name|MockSchedulableEntity
argument_list|>
name|policy
init|=
operator|new
name|FifoOrderingPolicyWithExclusivePartitions
argument_list|<>
argument_list|()
decl_stmt|;
name|policy
operator|.
name|configure
argument_list|(
name|Collections
operator|.
name|EMPTY_MAP
argument_list|)
expr_stmt|;
name|MockSchedulableEntity
name|p1
init|=
operator|new
name|MockSchedulableEntity
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|p1
operator|.
name|setPartition
argument_list|(
name|PARTITION
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setId
argument_list|(
literal|"p1"
argument_list|)
expr_stmt|;
name|MockSchedulableEntity
name|p2
init|=
operator|new
name|MockSchedulableEntity
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|p2
operator|.
name|setPartition
argument_list|(
name|PARTITION
argument_list|)
expr_stmt|;
name|p2
operator|.
name|setId
argument_list|(
literal|"p2"
argument_list|)
expr_stmt|;
name|MockSchedulableEntity
name|r1
init|=
operator|new
name|MockSchedulableEntity
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|r1
operator|.
name|setId
argument_list|(
literal|"r1"
argument_list|)
expr_stmt|;
name|MockSchedulableEntity
name|r2
init|=
operator|new
name|MockSchedulableEntity
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|r2
operator|.
name|setId
argument_list|(
literal|"r2"
argument_list|)
expr_stmt|;
name|policy
operator|.
name|addSchedulableEntity
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|policy
operator|.
name|addAllSchedulableEntities
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|p2
argument_list|,
name|r1
argument_list|,
name|r2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|policy
operator|.
name|getNumSchedulableEntities
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|policy
operator|.
name|getSchedulableEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|IteratorSelector
name|sel
init|=
operator|new
name|IteratorSelector
argument_list|()
decl_stmt|;
comment|// Should behave like FifoOrderingPolicy, regardless of partition
name|verifyAssignmentIteratorOrder
argument_list|(
name|policy
argument_list|,
name|IteratorSelector
operator|.
name|EMPTY_ITERATOR_SELECTOR
argument_list|,
literal|"p2"
argument_list|,
literal|"r2"
argument_list|,
literal|"r1"
argument_list|,
literal|"p1"
argument_list|)
expr_stmt|;
name|verifyPreemptionIteratorOrder
argument_list|(
name|policy
argument_list|,
literal|"p1"
argument_list|,
literal|"r1"
argument_list|,
literal|"r2"
argument_list|,
literal|"p2"
argument_list|)
expr_stmt|;
name|sel
operator|.
name|setPartition
argument_list|(
name|PARTITION
argument_list|)
expr_stmt|;
name|verifyAssignmentIteratorOrder
argument_list|(
name|policy
argument_list|,
name|sel
argument_list|,
literal|"p2"
argument_list|,
literal|"r2"
argument_list|,
literal|"r1"
argument_list|,
literal|"p1"
argument_list|)
expr_stmt|;
name|verifyPreemptionIteratorOrder
argument_list|(
name|policy
argument_list|,
literal|"p1"
argument_list|,
literal|"r1"
argument_list|,
literal|"r2"
argument_list|,
literal|"p2"
argument_list|)
expr_stmt|;
name|policy
operator|.
name|removeSchedulableEntity
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|policy
operator|.
name|removeSchedulableEntity
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|policy
operator|.
name|getNumSchedulableEntities
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|policy
operator|.
name|getSchedulableEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyAssignmentIteratorOrder
argument_list|(
name|policy
argument_list|,
name|IteratorSelector
operator|.
name|EMPTY_ITERATOR_SELECTOR
argument_list|,
literal|"r1"
argument_list|,
literal|"p1"
argument_list|)
expr_stmt|;
name|verifyPreemptionIteratorOrder
argument_list|(
name|policy
argument_list|,
literal|"p1"
argument_list|,
literal|"r1"
argument_list|)
expr_stmt|;
name|sel
operator|.
name|setPartition
argument_list|(
name|PARTITION
argument_list|)
expr_stmt|;
name|verifyAssignmentIteratorOrder
argument_list|(
name|policy
argument_list|,
name|sel
argument_list|,
literal|"r1"
argument_list|,
literal|"p1"
argument_list|)
expr_stmt|;
name|verifyPreemptionIteratorOrder
argument_list|(
name|policy
argument_list|,
literal|"p1"
argument_list|,
literal|"r1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleExclusiveEnforcedPartition ()
specifier|public
name|void
name|testSingleExclusiveEnforcedPartition
parameter_list|()
block|{
name|FifoOrderingPolicyWithExclusivePartitions
argument_list|<
name|MockSchedulableEntity
argument_list|>
name|policy
init|=
operator|new
name|FifoOrderingPolicyWithExclusivePartitions
argument_list|<>
argument_list|()
decl_stmt|;
name|policy
operator|.
name|configure
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|YarnConfiguration
operator|.
name|EXCLUSIVE_ENFORCED_PARTITIONS_SUFFIX
argument_list|,
name|PARTITION
argument_list|)
argument_list|)
expr_stmt|;
comment|// PARTITION iterator should return p2, p1, p3
name|MockSchedulableEntity
name|p1
init|=
operator|new
name|MockSchedulableEntity
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|p1
operator|.
name|setPartition
argument_list|(
name|PARTITION
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setId
argument_list|(
literal|"p1"
argument_list|)
expr_stmt|;
name|MockSchedulableEntity
name|p2
init|=
operator|new
name|MockSchedulableEntity
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|p2
operator|.
name|setPartition
argument_list|(
name|PARTITION
argument_list|)
expr_stmt|;
name|p2
operator|.
name|setId
argument_list|(
literal|"p2"
argument_list|)
expr_stmt|;
name|MockSchedulableEntity
name|p3
init|=
operator|new
name|MockSchedulableEntity
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|p3
operator|.
name|setPartition
argument_list|(
name|PARTITION
argument_list|)
expr_stmt|;
name|p3
operator|.
name|setId
argument_list|(
literal|"p3"
argument_list|)
expr_stmt|;
comment|// non-PARTITION iterator should return r3, r2, r1
name|MockSchedulableEntity
name|r1
init|=
operator|new
name|MockSchedulableEntity
argument_list|(
literal|6
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|r1
operator|.
name|setId
argument_list|(
literal|"r1"
argument_list|)
expr_stmt|;
name|MockSchedulableEntity
name|r2
init|=
operator|new
name|MockSchedulableEntity
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|r2
operator|.
name|setId
argument_list|(
literal|"r2"
argument_list|)
expr_stmt|;
name|MockSchedulableEntity
name|r3
init|=
operator|new
name|MockSchedulableEntity
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|r3
operator|.
name|setId
argument_list|(
literal|"r3"
argument_list|)
expr_stmt|;
name|policy
operator|.
name|addSchedulableEntity
argument_list|(
name|r1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policy
operator|.
name|getNumSchedulableEntities
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"r1"
argument_list|,
name|policy
operator|.
name|getSchedulableEntities
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|verifyAssignmentIteratorOrder
argument_list|(
name|policy
argument_list|,
name|IteratorSelector
operator|.
name|EMPTY_ITERATOR_SELECTOR
argument_list|,
literal|"r1"
argument_list|)
expr_stmt|;
name|verifyPreemptionIteratorOrder
argument_list|(
name|policy
argument_list|,
literal|"r1"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MockSchedulableEntity
argument_list|>
name|entities
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|r2
argument_list|,
name|r3
argument_list|,
name|p1
argument_list|,
name|p2
argument_list|)
decl_stmt|;
name|policy
operator|.
name|addAllSchedulableEntities
argument_list|(
name|entities
argument_list|)
expr_stmt|;
name|policy
operator|.
name|addSchedulableEntity
argument_list|(
name|p3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|policy
operator|.
name|getNumSchedulableEntities
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|policy
operator|.
name|getSchedulableEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assignment iterator should return non-PARTITION entities,
comment|// in order based on FifoOrderingPolicy
name|verifyAssignmentIteratorOrder
argument_list|(
name|policy
argument_list|,
name|IteratorSelector
operator|.
name|EMPTY_ITERATOR_SELECTOR
argument_list|,
literal|"r3"
argument_list|,
literal|"r2"
argument_list|,
literal|"r1"
argument_list|)
expr_stmt|;
comment|// Preemption iterator should return all entities, in global order
name|verifyPreemptionIteratorOrder
argument_list|(
name|policy
argument_list|,
literal|"r1"
argument_list|,
literal|"r2"
argument_list|,
literal|"p3"
argument_list|,
literal|"p1"
argument_list|,
literal|"p2"
argument_list|,
literal|"r3"
argument_list|)
expr_stmt|;
comment|// Same thing as above, but with a non-empty partition
name|IteratorSelector
name|sel
init|=
operator|new
name|IteratorSelector
argument_list|()
decl_stmt|;
name|sel
operator|.
name|setPartition
argument_list|(
literal|"dummy"
argument_list|)
expr_stmt|;
name|verifyAssignmentIteratorOrder
argument_list|(
name|policy
argument_list|,
name|sel
argument_list|,
literal|"r3"
argument_list|,
literal|"r2"
argument_list|,
literal|"r1"
argument_list|)
expr_stmt|;
name|verifyPreemptionIteratorOrder
argument_list|(
name|policy
argument_list|,
literal|"r1"
argument_list|,
literal|"r2"
argument_list|,
literal|"p3"
argument_list|,
literal|"p1"
argument_list|,
literal|"p2"
argument_list|,
literal|"r3"
argument_list|)
expr_stmt|;
comment|// Should return PARTITION entities, in order based on FifoOrderingPolicy
name|sel
operator|.
name|setPartition
argument_list|(
name|PARTITION
argument_list|)
expr_stmt|;
name|verifyAssignmentIteratorOrder
argument_list|(
name|policy
argument_list|,
name|sel
argument_list|,
literal|"p2"
argument_list|,
literal|"p1"
argument_list|,
literal|"p3"
argument_list|)
expr_stmt|;
name|verifyPreemptionIteratorOrder
argument_list|(
name|policy
argument_list|,
literal|"r1"
argument_list|,
literal|"r2"
argument_list|,
literal|"p3"
argument_list|,
literal|"p1"
argument_list|,
literal|"p2"
argument_list|,
literal|"r3"
argument_list|)
expr_stmt|;
name|policy
operator|.
name|removeSchedulableEntity
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|policy
operator|.
name|removeSchedulableEntity
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|policy
operator|.
name|getNumSchedulableEntities
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|policy
operator|.
name|getSchedulableEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyAssignmentIteratorOrder
argument_list|(
name|policy
argument_list|,
name|IteratorSelector
operator|.
name|EMPTY_ITERATOR_SELECTOR
argument_list|,
literal|"r3"
argument_list|,
literal|"r1"
argument_list|)
expr_stmt|;
name|verifyPreemptionIteratorOrder
argument_list|(
name|policy
argument_list|,
literal|"r1"
argument_list|,
literal|"p3"
argument_list|,
literal|"p1"
argument_list|,
literal|"r3"
argument_list|)
expr_stmt|;
name|sel
operator|.
name|setPartition
argument_list|(
name|PARTITION
argument_list|)
expr_stmt|;
name|verifyAssignmentIteratorOrder
argument_list|(
name|policy
argument_list|,
name|sel
argument_list|,
literal|"p1"
argument_list|,
literal|"p3"
argument_list|)
expr_stmt|;
name|verifyPreemptionIteratorOrder
argument_list|(
name|policy
argument_list|,
literal|"r1"
argument_list|,
literal|"p3"
argument_list|,
literal|"p1"
argument_list|,
literal|"r3"
argument_list|)
expr_stmt|;
name|policy
operator|.
name|removeSchedulableEntity
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|policy
operator|.
name|removeSchedulableEntity
argument_list|(
name|p3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|policy
operator|.
name|getNumSchedulableEntities
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|policy
operator|.
name|getSchedulableEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyAssignmentIteratorOrder
argument_list|(
name|policy
argument_list|,
name|IteratorSelector
operator|.
name|EMPTY_ITERATOR_SELECTOR
argument_list|,
literal|"r3"
argument_list|,
literal|"r1"
argument_list|)
expr_stmt|;
name|verifyPreemptionIteratorOrder
argument_list|(
name|policy
argument_list|,
literal|"r1"
argument_list|,
literal|"r3"
argument_list|)
expr_stmt|;
name|sel
operator|.
name|setPartition
argument_list|(
name|PARTITION
argument_list|)
expr_stmt|;
name|verifyAssignmentIteratorOrder
argument_list|(
name|policy
argument_list|,
name|sel
argument_list|)
expr_stmt|;
name|verifyPreemptionIteratorOrder
argument_list|(
name|policy
argument_list|,
literal|"r1"
argument_list|,
literal|"r3"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleExclusiveEnforcedPartitions ()
specifier|public
name|void
name|testMultipleExclusiveEnforcedPartitions
parameter_list|()
block|{
name|FifoOrderingPolicyWithExclusivePartitions
argument_list|<
name|MockSchedulableEntity
argument_list|>
name|policy
init|=
operator|new
name|FifoOrderingPolicyWithExclusivePartitions
argument_list|<>
argument_list|()
decl_stmt|;
name|policy
operator|.
name|configure
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|YarnConfiguration
operator|.
name|EXCLUSIVE_ENFORCED_PARTITIONS_SUFFIX
argument_list|,
name|PARTITION
operator|+
literal|","
operator|+
name|PARTITION2
argument_list|)
argument_list|)
expr_stmt|;
comment|// PARTITION iterator should return p2, p1
name|MockSchedulableEntity
name|p1
init|=
operator|new
name|MockSchedulableEntity
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|p1
operator|.
name|setPartition
argument_list|(
name|PARTITION
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setId
argument_list|(
literal|"p1"
argument_list|)
expr_stmt|;
name|MockSchedulableEntity
name|p2
init|=
operator|new
name|MockSchedulableEntity
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|p2
operator|.
name|setPartition
argument_list|(
name|PARTITION
argument_list|)
expr_stmt|;
name|p2
operator|.
name|setId
argument_list|(
literal|"p2"
argument_list|)
expr_stmt|;
comment|// PARTITION2 iterator should return r1, r2
name|MockSchedulableEntity
name|r1
init|=
operator|new
name|MockSchedulableEntity
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|r1
operator|.
name|setPartition
argument_list|(
name|PARTITION2
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setId
argument_list|(
literal|"r1"
argument_list|)
expr_stmt|;
name|MockSchedulableEntity
name|r2
init|=
operator|new
name|MockSchedulableEntity
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|r2
operator|.
name|setPartition
argument_list|(
name|PARTITION2
argument_list|)
expr_stmt|;
name|r2
operator|.
name|setId
argument_list|(
literal|"r2"
argument_list|)
expr_stmt|;
comment|// default iterator should return s2, s1
name|MockSchedulableEntity
name|s1
init|=
operator|new
name|MockSchedulableEntity
argument_list|(
literal|6
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|s1
operator|.
name|setId
argument_list|(
literal|"s1"
argument_list|)
expr_stmt|;
name|MockSchedulableEntity
name|s2
init|=
operator|new
name|MockSchedulableEntity
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|s2
operator|.
name|setId
argument_list|(
literal|"s2"
argument_list|)
expr_stmt|;
name|policy
operator|.
name|addAllSchedulableEntities
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|,
name|r1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|policy
operator|.
name|getNumSchedulableEntities
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|policy
operator|.
name|getSchedulableEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|IteratorSelector
name|sel
init|=
operator|new
name|IteratorSelector
argument_list|()
decl_stmt|;
comment|// assignment iterator returns only default (non-partitioned) entities
name|verifyAssignmentIteratorOrder
argument_list|(
name|policy
argument_list|,
name|IteratorSelector
operator|.
name|EMPTY_ITERATOR_SELECTOR
argument_list|,
literal|"s2"
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|verifyPreemptionIteratorOrder
argument_list|(
name|policy
argument_list|,
literal|"s1"
argument_list|,
literal|"r1"
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|sel
operator|.
name|setPartition
argument_list|(
name|PARTITION2
argument_list|)
expr_stmt|;
name|verifyAssignmentIteratorOrder
argument_list|(
name|policy
argument_list|,
name|sel
argument_list|,
literal|"r1"
argument_list|)
expr_stmt|;
name|policy
operator|.
name|addAllSchedulableEntities
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|r2
argument_list|,
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|policy
operator|.
name|getNumSchedulableEntities
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|policy
operator|.
name|getSchedulableEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyAssignmentIteratorOrder
argument_list|(
name|policy
argument_list|,
name|IteratorSelector
operator|.
name|EMPTY_ITERATOR_SELECTOR
argument_list|,
literal|"s2"
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|sel
operator|.
name|setPartition
argument_list|(
name|PARTITION
argument_list|)
expr_stmt|;
name|verifyAssignmentIteratorOrder
argument_list|(
name|policy
argument_list|,
name|sel
argument_list|,
literal|"p2"
argument_list|,
literal|"p1"
argument_list|)
expr_stmt|;
name|sel
operator|.
name|setPartition
argument_list|(
name|PARTITION2
argument_list|)
expr_stmt|;
name|verifyAssignmentIteratorOrder
argument_list|(
name|policy
argument_list|,
name|sel
argument_list|,
literal|"r1"
argument_list|,
literal|"r2"
argument_list|)
expr_stmt|;
name|verifyPreemptionIteratorOrder
argument_list|(
name|policy
argument_list|,
literal|"s1"
argument_list|,
literal|"r2"
argument_list|,
literal|"r1"
argument_list|,
literal|"s2"
argument_list|,
literal|"p1"
argument_list|,
literal|"p2"
argument_list|)
expr_stmt|;
name|policy
operator|.
name|removeSchedulableEntity
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|policy
operator|.
name|removeSchedulableEntity
argument_list|(
name|r1
argument_list|)
expr_stmt|;
name|policy
operator|.
name|removeSchedulableEntity
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|policy
operator|.
name|getNumSchedulableEntities
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|policy
operator|.
name|getSchedulableEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyAssignmentIteratorOrder
argument_list|(
name|policy
argument_list|,
name|IteratorSelector
operator|.
name|EMPTY_ITERATOR_SELECTOR
argument_list|,
literal|"s2"
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|sel
operator|.
name|setPartition
argument_list|(
name|PARTITION
argument_list|)
expr_stmt|;
name|verifyAssignmentIteratorOrder
argument_list|(
name|policy
argument_list|,
name|sel
argument_list|,
literal|"p1"
argument_list|)
expr_stmt|;
name|sel
operator|.
name|setPartition
argument_list|(
name|PARTITION2
argument_list|)
expr_stmt|;
name|verifyAssignmentIteratorOrder
argument_list|(
name|policy
argument_list|,
name|sel
argument_list|)
expr_stmt|;
name|verifyPreemptionIteratorOrder
argument_list|(
name|policy
argument_list|,
literal|"s1"
argument_list|,
literal|"s2"
argument_list|,
literal|"p1"
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyAssignmentIteratorOrder ( FifoOrderingPolicyWithExclusivePartitions<MockSchedulableEntity> policy, IteratorSelector sel, String... ids)
specifier|private
name|void
name|verifyAssignmentIteratorOrder
parameter_list|(
name|FifoOrderingPolicyWithExclusivePartitions
argument_list|<
name|MockSchedulableEntity
argument_list|>
name|policy
parameter_list|,
name|IteratorSelector
name|sel
parameter_list|,
name|String
modifier|...
name|ids
parameter_list|)
block|{
name|verifyIteratorOrder
argument_list|(
name|policy
operator|.
name|getAssignmentIterator
argument_list|(
name|sel
argument_list|)
argument_list|,
name|ids
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyPreemptionIteratorOrder ( FifoOrderingPolicyWithExclusivePartitions<MockSchedulableEntity> policy, String... ids)
specifier|private
name|void
name|verifyPreemptionIteratorOrder
parameter_list|(
name|FifoOrderingPolicyWithExclusivePartitions
argument_list|<
name|MockSchedulableEntity
argument_list|>
name|policy
parameter_list|,
name|String
modifier|...
name|ids
parameter_list|)
block|{
name|verifyIteratorOrder
argument_list|(
name|policy
operator|.
name|getPreemptionIterator
argument_list|()
argument_list|,
name|ids
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyIteratorOrder (Iterator<MockSchedulableEntity> itr, String... ids)
specifier|private
name|void
name|verifyIteratorOrder
parameter_list|(
name|Iterator
argument_list|<
name|MockSchedulableEntity
argument_list|>
name|itr
parameter_list|,
name|String
modifier|...
name|ids
parameter_list|)
block|{
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|id
argument_list|,
name|itr
operator|.
name|next
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

