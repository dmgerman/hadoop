begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|FairSchedulerWithMockPreemption
specifier|public
class|class
name|FairSchedulerWithMockPreemption
extends|extends
name|FairScheduler
block|{
annotation|@
name|Override
DECL|method|createPreemptionThread ()
specifier|protected
name|void
name|createPreemptionThread
parameter_list|()
block|{
name|preemptionThread
operator|=
operator|new
name|MockPreemptionThread
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|class|MockPreemptionThread
specifier|static
class|class
name|MockPreemptionThread
extends|extends
name|FSPreemptionThread
block|{
DECL|field|appsAdded
specifier|private
name|Set
argument_list|<
name|FSAppAttempt
argument_list|>
name|appsAdded
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|totalAppsAdded
specifier|private
name|int
name|totalAppsAdded
init|=
literal|0
decl_stmt|;
DECL|method|MockPreemptionThread (FairScheduler scheduler)
name|MockPreemptionThread
parameter_list|(
name|FairScheduler
name|scheduler
parameter_list|)
block|{
name|super
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|Thread
operator|.
name|interrupted
argument_list|()
condition|)
block|{
try|try
block|{
name|FSAppAttempt
name|app
init|=
name|context
operator|.
name|getStarvedApps
argument_list|()
operator|.
name|take
argument_list|()
decl_stmt|;
name|appsAdded
operator|.
name|add
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|totalAppsAdded
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return;
block|}
block|}
block|}
DECL|method|uniqueAppsAdded ()
name|int
name|uniqueAppsAdded
parameter_list|()
block|{
return|return
name|appsAdded
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|totalAppsAdded ()
name|int
name|totalAppsAdded
parameter_list|()
block|{
return|return
name|totalAppsAdded
return|;
block|}
block|}
block|}
end_class

end_unit

