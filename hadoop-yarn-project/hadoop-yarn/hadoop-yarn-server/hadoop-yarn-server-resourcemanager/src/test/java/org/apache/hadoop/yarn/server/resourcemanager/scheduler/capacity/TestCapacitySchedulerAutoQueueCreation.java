begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|ApplicationPlacementContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|UserGroupMappingPlacementRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ContainerUpdates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerDynamicEditException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|QueueEntitlement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAttemptAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|ClientToAMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|NMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|UserGroupMappingPlacementRule
operator|.
name|CURRENT_USER_MAPPING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CSQueueUtils
operator|.
name|EPSILON
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
operator|.
name|DOT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Tests for creation and reinitilization of auto created leaf queues  * under a ManagedParentQueue.  */
end_comment

begin_class
DECL|class|TestCapacitySchedulerAutoQueueCreation
specifier|public
class|class
name|TestCapacitySchedulerAutoQueueCreation
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestCapacityScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|GB
specifier|private
specifier|final
name|int
name|GB
init|=
literal|1024
decl_stmt|;
DECL|field|NULL_UPDATE_REQUESTS
specifier|private
specifier|final
specifier|static
name|ContainerUpdates
name|NULL_UPDATE_REQUESTS
init|=
operator|new
name|ContainerUpdates
argument_list|()
decl_stmt|;
DECL|field|A
specifier|private
specifier|static
specifier|final
name|String
name|A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
decl_stmt|;
DECL|field|B
specifier|private
specifier|static
specifier|final
name|String
name|B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".b"
decl_stmt|;
DECL|field|C
specifier|private
specifier|static
specifier|final
name|String
name|C
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".c"
decl_stmt|;
DECL|field|D
specifier|private
specifier|static
specifier|final
name|String
name|D
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".d"
decl_stmt|;
DECL|field|A1
specifier|private
specifier|static
specifier|final
name|String
name|A1
init|=
name|A
operator|+
literal|".a1"
decl_stmt|;
DECL|field|A2
specifier|private
specifier|static
specifier|final
name|String
name|A2
init|=
name|A
operator|+
literal|".a2"
decl_stmt|;
DECL|field|B1
specifier|private
specifier|static
specifier|final
name|String
name|B1
init|=
name|B
operator|+
literal|".b1"
decl_stmt|;
DECL|field|B2
specifier|private
specifier|static
specifier|final
name|String
name|B2
init|=
name|B
operator|+
literal|".b2"
decl_stmt|;
DECL|field|B3
specifier|private
specifier|static
specifier|final
name|String
name|B3
init|=
name|B
operator|+
literal|".b3"
decl_stmt|;
DECL|field|C1
specifier|private
specifier|static
specifier|final
name|String
name|C1
init|=
name|C
operator|+
literal|".c1"
decl_stmt|;
DECL|field|C2
specifier|private
specifier|static
specifier|final
name|String
name|C2
init|=
name|C
operator|+
literal|".c2"
decl_stmt|;
DECL|field|C3
specifier|private
specifier|static
specifier|final
name|String
name|C3
init|=
name|C
operator|+
literal|".c3"
decl_stmt|;
DECL|field|A_CAPACITY
specifier|private
specifier|static
name|float
name|A_CAPACITY
init|=
literal|20f
decl_stmt|;
DECL|field|B_CAPACITY
specifier|private
specifier|static
name|float
name|B_CAPACITY
init|=
literal|40f
decl_stmt|;
DECL|field|C_CAPACITY
specifier|private
specifier|static
name|float
name|C_CAPACITY
init|=
literal|20f
decl_stmt|;
DECL|field|D_CAPACITY
specifier|private
specifier|static
name|float
name|D_CAPACITY
init|=
literal|20f
decl_stmt|;
DECL|field|A1_CAPACITY
specifier|private
specifier|static
name|float
name|A1_CAPACITY
init|=
literal|30
decl_stmt|;
DECL|field|A2_CAPACITY
specifier|private
specifier|static
name|float
name|A2_CAPACITY
init|=
literal|70
decl_stmt|;
DECL|field|B1_CAPACITY
specifier|private
specifier|static
name|float
name|B1_CAPACITY
init|=
literal|60f
decl_stmt|;
DECL|field|B2_CAPACITY
specifier|private
specifier|static
name|float
name|B2_CAPACITY
init|=
literal|20f
decl_stmt|;
DECL|field|B3_CAPACITY
specifier|private
specifier|static
name|float
name|B3_CAPACITY
init|=
literal|20f
decl_stmt|;
DECL|field|C1_CAPACITY
specifier|private
specifier|static
name|float
name|C1_CAPACITY
init|=
literal|20f
decl_stmt|;
DECL|field|C2_CAPACITY
specifier|private
specifier|static
name|float
name|C2_CAPACITY
init|=
literal|20f
decl_stmt|;
DECL|field|USER
specifier|private
specifier|static
name|String
name|USER
init|=
literal|"user_"
decl_stmt|;
DECL|field|USER0
specifier|private
specifier|static
name|String
name|USER0
init|=
name|USER
operator|+
literal|0
decl_stmt|;
DECL|field|USER2
specifier|private
specifier|static
name|String
name|USER2
init|=
name|USER
operator|+
literal|2
decl_stmt|;
DECL|field|PARENT_QUEUE
specifier|private
specifier|static
name|String
name|PARENT_QUEUE
init|=
literal|"c"
decl_stmt|;
DECL|field|mockRM
specifier|private
name|MockRM
name|mockRM
init|=
literal|null
decl_stmt|;
DECL|field|cs
specifier|private
name|CapacityScheduler
name|cs
decl_stmt|;
DECL|field|tcs
specifier|private
specifier|final
name|TestCapacityScheduler
name|tcs
init|=
operator|new
name|TestCapacityScheduler
argument_list|()
decl_stmt|;
DECL|field|dispatcher
specifier|private
specifier|static
name|SpyDispatcher
name|dispatcher
decl_stmt|;
DECL|field|rmAppEventEventHandler
specifier|private
specifier|static
name|EventHandler
argument_list|<
name|Event
argument_list|>
name|rmAppEventEventHandler
decl_stmt|;
DECL|class|SpyDispatcher
specifier|private
specifier|static
class|class
name|SpyDispatcher
extends|extends
name|AsyncDispatcher
block|{
DECL|field|eventQueue
specifier|private
specifier|static
name|BlockingQueue
argument_list|<
name|Event
argument_list|>
name|eventQueue
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|()
decl_stmt|;
DECL|class|SpyRMAppEventHandler
specifier|private
specifier|static
class|class
name|SpyRMAppEventHandler
implements|implements
name|EventHandler
argument_list|<
name|Event
argument_list|>
block|{
DECL|method|handle (Event event)
specifier|public
name|void
name|handle
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
name|eventQueue
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|dispatch (Event event)
specifier|protected
name|void
name|dispatch
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
name|eventQueue
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEventHandler ()
specifier|public
name|EventHandler
argument_list|<
name|Event
argument_list|>
name|getEventHandler
parameter_list|()
block|{
return|return
name|rmAppEventEventHandler
return|;
block|}
DECL|method|spyOnNextEvent (Event expectedEvent, long timeout)
name|void
name|spyOnNextEvent
parameter_list|(
name|Event
name|expectedEvent
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|Event
name|event
init|=
name|eventQueue
operator|.
name|poll
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedEvent
operator|.
name|getType
argument_list|()
argument_list|,
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedEvent
operator|.
name|getClass
argument_list|()
argument_list|,
name|event
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|queuePlacementRules
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|queuePlacementRules
operator|.
name|add
argument_list|(
name|YarnConfiguration
operator|.
name|USER_GROUP_PLACEMENT_RULE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQueuePlacementRules
argument_list|(
name|queuePlacementRules
argument_list|)
expr_stmt|;
name|setupQueueMappings
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|mockRM
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cs
operator|=
operator|(
name|CapacityScheduler
operator|)
name|mockRM
operator|.
name|getResourceScheduler
argument_list|()
expr_stmt|;
name|dispatcher
operator|=
operator|new
name|SpyDispatcher
argument_list|()
expr_stmt|;
name|rmAppEventEventHandler
operator|=
operator|new
name|SpyDispatcher
operator|.
name|SpyRMAppEventHandler
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|RMAppEventType
operator|.
name|class
argument_list|,
name|rmAppEventEventHandler
argument_list|)
expr_stmt|;
name|cs
operator|.
name|updatePlacementRules
argument_list|()
expr_stmt|;
name|mockRM
operator|.
name|start
argument_list|()
expr_stmt|;
name|cs
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|setupQueueMappings ( CapacitySchedulerConfiguration conf)
specifier|private
name|CapacitySchedulerConfiguration
name|setupQueueMappings
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|)
block|{
comment|//set queue mapping
name|List
argument_list|<
name|UserGroupMappingPlacementRule
operator|.
name|QueueMapping
argument_list|>
name|queueMappings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|3
condition|;
name|i
operator|++
control|)
block|{
comment|//Set C as parent queue name for auto queue creation
name|UserGroupMappingPlacementRule
operator|.
name|QueueMapping
name|userQueueMapping
init|=
operator|new
name|UserGroupMappingPlacementRule
operator|.
name|QueueMapping
argument_list|(
name|UserGroupMappingPlacementRule
operator|.
name|QueueMapping
operator|.
name|MappingType
operator|.
name|USER
argument_list|,
name|USER
operator|+
name|i
argument_list|,
name|getQueueMapping
argument_list|(
name|PARENT_QUEUE
argument_list|,
name|USER
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|queueMappings
operator|.
name|add
argument_list|(
name|userQueueMapping
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setQueueMappings
argument_list|(
name|queueMappings
argument_list|)
expr_stmt|;
comment|//override with queue mappings
name|conf
operator|.
name|setOverrideWithQueueMappings
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * @param conf, to be modified    * @return, CS configuration which has C    * as an auto creation enabled parent queue    *<p>    * root    * /     \      \       \    * a        b      c    d    * / \    /  |  \    * a1  a2 b1  b2  b3    */
DECL|method|setupQueueConfiguration ( CapacitySchedulerConfiguration conf)
specifier|private
name|CapacitySchedulerConfiguration
name|setupQueueConfiguration
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|)
block|{
comment|//setup new queues with one of them auto enabled
comment|// Define top-level queues
comment|// Set childQueue for root
name|conf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|,
literal|"d"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A
argument_list|,
name|A_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B
argument_list|,
name|B_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|C
argument_list|,
name|C_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|D
argument_list|,
name|D_CAPACITY
argument_list|)
expr_stmt|;
comment|// Define 2nd-level queues
name|conf
operator|.
name|setQueues
argument_list|(
name|A
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"a2"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A1
argument_list|,
name|A1_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
name|A1
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A2
argument_list|,
name|A2_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
name|A2
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|B
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"b1"
block|,
literal|"b2"
block|,
literal|"b3"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B1
argument_list|,
name|B1_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
name|B1
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B2
argument_list|,
name|B2_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
name|B2
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B3
argument_list|,
name|B3_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
name|B3
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
name|C
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreateChildQueueEnabled
argument_list|(
name|C
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//Setup leaf queue template configs
name|conf
operator|.
name|setAutoCreatedLeafQueueTemplateCapacity
argument_list|(
name|C
argument_list|,
literal|50.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreatedLeafQueueTemplateMaxCapacity
argument_list|(
name|C
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setup "
operator|+
name|C
operator|+
literal|" as an auto leaf creation enabled parent queue"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
name|D
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreateChildQueueEnabled
argument_list|(
name|D
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//Setup leaf queue template configs
name|conf
operator|.
name|setAutoCreatedLeafQueueTemplateCapacity
argument_list|(
name|D
argument_list|,
literal|10.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreatedLeafQueueTemplateMaxCapacity
argument_list|(
name|D
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setup "
operator|+
name|D
operator|+
literal|" as an auto leaf creation enabled parent queue"
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|mockRM
operator|!=
literal|null
condition|)
block|{
name|mockRM
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAutoCreateLeafQueueCreation ()
specifier|public
name|void
name|testAutoCreateLeafQueueCreation
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
comment|// submit an app
name|submitApp
argument_list|(
name|cs
argument_list|,
name|USER0
argument_list|,
name|USER0
argument_list|,
name|PARENT_QUEUE
argument_list|)
expr_stmt|;
comment|// check preconditions
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInC
init|=
name|cs
operator|.
name|getAppsInQueue
argument_list|(
name|PARENT_QUEUE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInC
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
name|USER0
argument_list|)
argument_list|)
expr_stmt|;
name|AutoCreatedLeafQueue
name|autoCreatedLeafQueue
init|=
operator|(
name|AutoCreatedLeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
name|USER0
argument_list|)
decl_stmt|;
name|ManagedParentQueue
name|parentQueue
init|=
operator|(
name|ManagedParentQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
name|PARENT_QUEUE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|parentQueue
argument_list|,
name|autoCreatedLeafQueue
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|validateCapacities
argument_list|(
name|autoCreatedLeafQueue
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupQueue
argument_list|(
name|USER0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testReinitializeStoppedAutoCreatedLeafQueue ()
specifier|public
name|void
name|testReinitializeStoppedAutoCreatedLeafQueue
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|host
init|=
literal|"127.0.0.1"
decl_stmt|;
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|0
argument_list|,
name|MockNodes
operator|.
name|newResource
argument_list|(
literal|4
operator|*
name|GB
argument_list|)
argument_list|,
literal|1
argument_list|,
name|host
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
comment|// submit an app
name|RMApp
name|app
init|=
name|mockRM
operator|.
name|submitApp
argument_list|(
name|GB
argument_list|,
literal|"test-auto-queue-creation-1"
argument_list|,
name|USER0
argument_list|,
literal|null
argument_list|,
name|USER0
argument_list|)
decl_stmt|;
comment|// check preconditions
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInC
init|=
name|cs
operator|.
name|getAppsInQueue
argument_list|(
name|PARENT_QUEUE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInC
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
name|USER0
argument_list|)
argument_list|)
expr_stmt|;
name|AutoCreatedLeafQueue
name|autoCreatedLeafQueue
init|=
operator|(
name|AutoCreatedLeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
name|USER0
argument_list|)
decl_stmt|;
name|ManagedParentQueue
name|parentQueue
init|=
operator|(
name|ManagedParentQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
name|PARENT_QUEUE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|parentQueue
argument_list|,
name|autoCreatedLeafQueue
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|validateCapacities
argument_list|(
name|autoCreatedLeafQueue
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|appsInC
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Priority
name|priority
init|=
name|TestUtils
operator|.
name|createMockPriority
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|ResourceRequest
name|r1
init|=
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
decl_stmt|;
name|cs
operator|.
name|allocate
argument_list|(
name|appAttemptId
argument_list|,
name|Collections
operator|.
expr|<
name|ResourceRequest
operator|>
name|singletonList
argument_list|(
name|r1
argument_list|)
argument_list|,
name|Collections
operator|.
expr|<
name|ContainerId
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|host
argument_list|)
argument_list|,
literal|null
argument_list|,
name|NULL_UPDATE_REQUESTS
argument_list|)
expr_stmt|;
comment|//And this will result in container assignment for app1
name|CapacityScheduler
operator|.
name|schedule
argument_list|(
name|cs
argument_list|)
expr_stmt|;
comment|//change state to draining
name|autoCreatedLeafQueue
operator|.
name|stopQueue
argument_list|()
expr_stmt|;
name|cs
operator|.
name|killAllAppsInQueue
argument_list|(
name|USER0
argument_list|)
expr_stmt|;
name|mockRM
operator|.
name|waitForState
argument_list|(
name|appAttemptId
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|mockRM
operator|.
name|waitForState
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
comment|//change state to stopped
name|autoCreatedLeafQueue
operator|.
name|stopQueue
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|STOPPED
argument_list|,
name|autoCreatedLeafQueue
operator|.
name|getQueueInfo
argument_list|()
operator|.
name|getQueueState
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|cs
operator|.
name|getConf
argument_list|()
argument_list|,
name|mockRM
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|AutoCreatedLeafQueue
name|leafQueue
init|=
operator|(
name|AutoCreatedLeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
name|USER0
argument_list|)
decl_stmt|;
name|validateCapacities
argument_list|(
name|leafQueue
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupQueue
argument_list|(
name|USER0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRefreshQueuesWithAutoCreatedLeafQueues ()
specifier|public
name|void
name|testRefreshQueuesWithAutoCreatedLeafQueues
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|newMockRM
init|=
name|setupSchedulerInstance
argument_list|()
decl_stmt|;
try|try
block|{
name|CapacityScheduler
name|newCS
init|=
operator|(
name|CapacityScheduler
operator|)
name|newMockRM
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|CapacitySchedulerConfiguration
name|conf
init|=
name|newCS
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// Test add one auto created queue dynamically and manually modify
comment|// capacity
name|ManagedParentQueue
name|parentQueue
init|=
operator|(
name|ManagedParentQueue
operator|)
name|newCS
operator|.
name|getQueue
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|AutoCreatedLeafQueue
name|c1
init|=
operator|new
name|AutoCreatedLeafQueue
argument_list|(
name|newCS
argument_list|,
literal|"c1"
argument_list|,
name|parentQueue
argument_list|)
decl_stmt|;
name|newCS
operator|.
name|addQueue
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|c1
operator|.
name|setEntitlement
argument_list|(
operator|new
name|QueueEntitlement
argument_list|(
name|C1_CAPACITY
operator|/
literal|100
argument_list|,
literal|1f
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test add another auto created queue and use setEntitlement to modify
comment|// capacity
name|AutoCreatedLeafQueue
name|c2
init|=
operator|new
name|AutoCreatedLeafQueue
argument_list|(
name|newCS
argument_list|,
literal|"c2"
argument_list|,
operator|(
name|ManagedParentQueue
operator|)
name|newCS
operator|.
name|getQueue
argument_list|(
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
name|newCS
operator|.
name|addQueue
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|setEntitlement
argument_list|(
literal|"c2"
argument_list|,
operator|new
name|QueueEntitlement
argument_list|(
name|C2_CAPACITY
operator|/
literal|100
argument_list|,
literal|1f
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify all allocations match
name|checkQueueCapacities
argument_list|(
name|newCS
argument_list|,
name|C_CAPACITY
argument_list|,
name|D_CAPACITY
argument_list|)
expr_stmt|;
comment|// Reinitialize and verify all dynamic queued survived
name|conf
operator|.
name|setCapacity
argument_list|(
name|A
argument_list|,
literal|20f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B
argument_list|,
literal|20f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|C
argument_list|,
literal|40f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|D
argument_list|,
literal|20f
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|newMockRM
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|checkQueueCapacities
argument_list|(
name|newCS
argument_list|,
literal|40f
argument_list|,
literal|20f
argument_list|)
expr_stmt|;
comment|//chnage parent template configs and reinitialize
name|conf
operator|.
name|setAutoCreatedLeafQueueTemplateCapacity
argument_list|(
name|C
argument_list|,
literal|30.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreatedLeafQueueTemplateMaxCapacity
argument_list|(
name|C
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|newMockRM
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|ManagedParentQueue
name|c
init|=
operator|(
name|ManagedParentQueue
operator|)
name|newCS
operator|.
name|getQueue
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|AutoCreatedLeafQueue
name|c3
init|=
operator|new
name|AutoCreatedLeafQueue
argument_list|(
name|newCS
argument_list|,
literal|"c3"
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|newCS
operator|.
name|addQueue
argument_list|(
name|c3
argument_list|)
expr_stmt|;
name|AbstractManagedParentQueue
operator|.
name|AutoCreatedLeafQueueTemplate
name|leafQueueTemplate
init|=
name|parentQueue
operator|.
name|getLeafQueueTemplate
argument_list|()
decl_stmt|;
name|QueueCapacities
name|cap
init|=
name|leafQueueTemplate
operator|.
name|getQueueCapacities
argument_list|()
decl_stmt|;
name|c3
operator|.
name|setEntitlement
argument_list|(
operator|new
name|QueueEntitlement
argument_list|(
name|cap
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|cap
operator|.
name|getMaximumCapacity
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|newMockRM
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|checkQueueCapacities
argument_list|(
name|newCS
argument_list|,
literal|40f
argument_list|,
literal|20f
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|newMockRM
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|CapacityScheduler
operator|)
name|newMockRM
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|newMockRM
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testConvertAutoCreateDisabledOnManagedParentQueueFails ()
specifier|public
name|void
name|testConvertAutoCreateDisabledOnManagedParentQueueFails
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacityScheduler
name|newCS
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
try|try
block|{
name|CapacitySchedulerConfiguration
name|newConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|newConf
argument_list|)
expr_stmt|;
name|newConf
operator|.
name|setAutoCreateChildQueueEnabled
argument_list|(
name|C
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|setConf
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|setRMContext
argument_list|(
name|mockRM
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|init
argument_list|(
name|cs
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|start
argument_list|()
expr_stmt|;
name|newCS
operator|.
name|reinitialize
argument_list|(
name|newConf
argument_list|,
operator|new
name|RMContextImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|newConf
argument_list|)
argument_list|,
operator|new
name|NMTokenSecretManagerInRM
argument_list|(
name|newConf
argument_list|)
argument_list|,
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//expected exception
block|}
finally|finally
block|{
name|newCS
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testConvertLeafQueueToParentQueueWithAutoCreate ()
specifier|public
name|void
name|testConvertLeafQueueToParentQueueWithAutoCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacityScheduler
name|newCS
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
try|try
block|{
name|CapacitySchedulerConfiguration
name|newConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|newConf
argument_list|)
expr_stmt|;
name|newConf
operator|.
name|setAutoCreatedLeafQueueTemplateCapacity
argument_list|(
name|A1
argument_list|,
name|A1_CAPACITY
operator|/
literal|10
argument_list|)
expr_stmt|;
name|newConf
operator|.
name|setAutoCreateChildQueueEnabled
argument_list|(
name|A1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|setConf
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|setRMContext
argument_list|(
name|mockRM
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|init
argument_list|(
name|cs
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|LeafQueue
name|a1Queue
init|=
operator|(
name|LeafQueue
operator|)
name|newCS
operator|.
name|getQueue
argument_list|(
literal|"a1"
argument_list|)
decl_stmt|;
name|a1Queue
operator|.
name|stopQueue
argument_list|()
expr_stmt|;
name|newCS
operator|.
name|reinitialize
argument_list|(
name|newConf
argument_list|,
operator|new
name|RMContextImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|newConf
argument_list|)
argument_list|,
operator|new
name|NMTokenSecretManagerInRM
argument_list|(
name|newConf
argument_list|)
argument_list|,
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|newCS
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testConvertFailsFromParentQueueToManagedParentQueue ()
specifier|public
name|void
name|testConvertFailsFromParentQueueToManagedParentQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacityScheduler
name|newCS
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
try|try
block|{
name|CapacitySchedulerConfiguration
name|newConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|newConf
argument_list|)
expr_stmt|;
name|newConf
operator|.
name|setAutoCreatedLeafQueueTemplateCapacity
argument_list|(
name|A
argument_list|,
name|A_CAPACITY
operator|/
literal|10
argument_list|)
expr_stmt|;
name|newConf
operator|.
name|setAutoCreateChildQueueEnabled
argument_list|(
name|A
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|setConf
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|setRMContext
argument_list|(
name|mockRM
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|init
argument_list|(
name|cs
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|ParentQueue
name|a1Queue
init|=
operator|(
name|ParentQueue
operator|)
name|newCS
operator|.
name|getQueue
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|a1Queue
operator|.
name|stopQueue
argument_list|()
expr_stmt|;
name|newCS
operator|.
name|reinitialize
argument_list|(
name|newConf
argument_list|,
operator|new
name|RMContextImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|newConf
argument_list|)
argument_list|,
operator|new
name|NMTokenSecretManagerInRM
argument_list|(
name|newConf
argument_list|)
argument_list|,
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception while converting a parent queue to"
operator|+
literal|" an auto create enabled parent queue"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//expected exception
block|}
finally|finally
block|{
name|newCS
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAutoCreateLeafQueueFailsWithNoQueueMapping ()
specifier|public
name|void
name|testAutoCreateLeafQueueFailsWithNoQueueMapping
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|INVALID_USER
init|=
literal|"invalid_user"
decl_stmt|;
comment|// submit an app under a different queue name which does not exist
comment|// and queue mapping does not exist for this user
name|RMApp
name|app
init|=
name|mockRM
operator|.
name|submitApp
argument_list|(
name|GB
argument_list|,
literal|"app"
argument_list|,
name|INVALID_USER
argument_list|,
literal|null
argument_list|,
name|INVALID_USER
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|mockRM
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|mockRM
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppState
operator|.
name|FAILED
argument_list|,
name|app
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|validateCapacities (AutoCreatedLeafQueue autoCreatedLeafQueue)
specifier|private
name|void
name|validateCapacities
parameter_list|(
name|AutoCreatedLeafQueue
name|autoCreatedLeafQueue
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|autoCreatedLeafQueue
operator|.
name|getCapacity
argument_list|()
argument_list|,
literal|0.0f
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|autoCreatedLeafQueue
operator|.
name|getAbsoluteCapacity
argument_list|()
argument_list|,
literal|0.0f
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|autoCreatedLeafQueue
operator|.
name|getMaximumCapacity
argument_list|()
argument_list|,
literal|0.0f
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|autoCreatedLeafQueue
operator|.
name|getAbsoluteMaximumCapacity
argument_list|()
argument_list|,
literal|0.0f
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|int
name|maxAppsForAutoCreatedQueues
init|=
call|(
name|int
call|)
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|DEFAULT_MAXIMUM_SYSTEM_APPLICATIIONS
operator|*
name|autoCreatedLeafQueue
operator|.
name|getParent
argument_list|()
operator|.
name|getAbsoluteCapacity
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|autoCreatedLeafQueue
operator|.
name|getMaxApplicationsPerUser
argument_list|()
argument_list|,
name|maxAppsForAutoCreatedQueues
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|autoCreatedLeafQueue
operator|.
name|getMaxApplicationsPerUser
argument_list|()
argument_list|,
call|(
name|int
call|)
argument_list|(
name|maxAppsForAutoCreatedQueues
operator|*
operator|(
name|cs
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getUserLimitFactor
argument_list|(
name|autoCreatedLeafQueue
operator|.
name|getParent
argument_list|()
operator|.
name|getQueuePath
argument_list|()
argument_list|)
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|cleanupQueue (String queueName)
specifier|private
name|void
name|cleanupQueue
parameter_list|(
name|String
name|queueName
parameter_list|)
throws|throws
name|YarnException
block|{
name|AutoCreatedLeafQueue
name|queue
init|=
operator|(
name|AutoCreatedLeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|!=
literal|null
condition|)
block|{
name|queue
operator|.
name|setEntitlement
argument_list|(
operator|new
name|QueueEntitlement
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ManagedParentQueue
operator|)
name|queue
operator|.
name|getParent
argument_list|()
operator|)
operator|.
name|removeChildQueue
argument_list|(
name|queue
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|getCapacitySchedulerQueueManager
argument_list|()
operator|.
name|removeQueue
argument_list|(
name|queue
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Queue does not exist "
operator|+
name|queueName
argument_list|)
throw|;
block|}
block|}
DECL|method|getQueueMapping (String parentQueue, String leafQueue)
name|String
name|getQueueMapping
parameter_list|(
name|String
name|parentQueue
parameter_list|,
name|String
name|leafQueue
parameter_list|)
block|{
return|return
name|parentQueue
operator|+
name|DOT
operator|+
name|leafQueue
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testQueueMappingValidationFailsWithInvalidParentQueueInMapping ()
specifier|public
name|void
name|testQueueMappingValidationFailsWithInvalidParentQueueInMapping
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|newMockRM
init|=
name|setupSchedulerInstance
argument_list|()
decl_stmt|;
try|try
block|{
name|CapacityScheduler
name|newCS
init|=
operator|(
name|CapacityScheduler
operator|)
name|newMockRM
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|//"a" is not auto create enabled
comment|//dynamic queue mapping
try|try
block|{
name|setupQueueMapping
argument_list|(
name|newCS
argument_list|,
name|CURRENT_USER_MAPPING
argument_list|,
literal|"a"
argument_list|,
name|CURRENT_USER_MAPPING
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|updatePlacementRules
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected invalid parent queue mapping failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//expected exception
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"invalid parent queue which does not have auto creation of leaf "
operator|+
literal|"queues enabled ["
operator|+
literal|"a"
operator|+
literal|"]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//"a" is not auto create enabled and app_user does not exist as a leaf
comment|// queue
comment|//static queue mapping
try|try
block|{
name|setupQueueMapping
argument_list|(
name|newCS
argument_list|,
literal|"app_user"
argument_list|,
literal|"INVALID_PARENT_QUEUE"
argument_list|,
literal|"app_user"
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|updatePlacementRules
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected invalid parent queue mapping failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//expected exception
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"invalid parent queue ["
operator|+
literal|"INVALID_PARENT_QUEUE"
operator|+
literal|"]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|newMockRM
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|CapacityScheduler
operator|)
name|newMockRM
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|newMockRM
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testQueueMappingUpdatesFailsOnRemovalOfParentQueueInMapping ()
specifier|public
name|void
name|testQueueMappingUpdatesFailsOnRemovalOfParentQueueInMapping
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|newMockRM
init|=
name|setupSchedulerInstance
argument_list|()
decl_stmt|;
try|try
block|{
name|CapacityScheduler
name|newCS
init|=
operator|(
name|CapacityScheduler
operator|)
name|newMockRM
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|setupQueueMapping
argument_list|(
name|newCS
argument_list|,
name|CURRENT_USER_MAPPING
argument_list|,
literal|"c"
argument_list|,
name|CURRENT_USER_MAPPING
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|updatePlacementRules
argument_list|()
expr_stmt|;
try|try
block|{
name|setupQueueMapping
argument_list|(
name|newCS
argument_list|,
name|CURRENT_USER_MAPPING
argument_list|,
literal|""
argument_list|,
name|CURRENT_USER_MAPPING
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|updatePlacementRules
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected invalid parent queue mapping failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//expected exception
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"invalid parent queue []"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|newMockRM
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|CapacityScheduler
operator|)
name|newMockRM
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|newMockRM
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testParentQueueUpdateInQueueMappingFailsAfterAutoCreation ()
specifier|public
name|void
name|testParentQueueUpdateInQueueMappingFailsAfterAutoCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|newMockRM
init|=
name|setupSchedulerInstance
argument_list|()
decl_stmt|;
name|CapacityScheduler
name|newCS
init|=
operator|(
name|CapacityScheduler
operator|)
name|newMockRM
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
try|try
block|{
name|newMockRM
operator|.
name|start
argument_list|()
expr_stmt|;
name|newCS
operator|.
name|start
argument_list|()
expr_stmt|;
name|submitApp
argument_list|(
name|newCS
argument_list|,
name|USER0
argument_list|,
name|USER0
argument_list|,
name|PARENT_QUEUE
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|newCS
operator|.
name|getQueue
argument_list|(
name|USER0
argument_list|)
argument_list|)
expr_stmt|;
name|setupQueueMapping
argument_list|(
name|newCS
argument_list|,
name|USER0
argument_list|,
literal|"d"
argument_list|,
name|USER0
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|updatePlacementRules
argument_list|()
expr_stmt|;
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getDispatcher
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|setRMContext
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SchedulerEvent
name|addAppEvent
init|=
operator|new
name|AppAddedSchedulerEvent
argument_list|(
name|appId
argument_list|,
name|USER0
argument_list|,
name|USER0
argument_list|,
operator|new
name|ApplicationPlacementContext
argument_list|(
name|USER0
argument_list|,
literal|"d"
argument_list|)
argument_list|)
decl_stmt|;
name|newCS
operator|.
name|handle
argument_list|(
name|addAppEvent
argument_list|)
expr_stmt|;
name|RMAppEvent
name|event
init|=
operator|new
name|RMAppEvent
argument_list|(
name|appId
argument_list|,
name|RMAppEventType
operator|.
name|APP_REJECTED
argument_list|,
literal|"error"
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|spyOnNextEvent
argument_list|(
name|event
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|newMockRM
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|CapacityScheduler
operator|)
name|newMockRM
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|newMockRM
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testAutoCreationFailsWhenParentCapacityExceeded ()
specifier|public
name|void
name|testAutoCreationFailsWhenParentCapacityExceeded
parameter_list|()
throws|throws
name|IOException
throws|,
name|SchedulerDynamicEditException
block|{
name|MockRM
name|newMockRM
init|=
name|setupSchedulerInstance
argument_list|()
decl_stmt|;
name|CapacityScheduler
name|newCS
init|=
operator|(
name|CapacityScheduler
operator|)
name|newMockRM
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
try|try
block|{
name|CapacitySchedulerConfiguration
name|conf
init|=
name|newCS
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setShouldFailAutoQueueCreationWhenGuaranteedCapacityExceeded
argument_list|(
name|C
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|newMockRM
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test add one auto created queue dynamically and manually modify
comment|// capacity
name|ManagedParentQueue
name|parentQueue
init|=
operator|(
name|ManagedParentQueue
operator|)
name|newCS
operator|.
name|getQueue
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|AutoCreatedLeafQueue
name|c1
init|=
operator|new
name|AutoCreatedLeafQueue
argument_list|(
name|newCS
argument_list|,
literal|"c1"
argument_list|,
name|parentQueue
argument_list|)
decl_stmt|;
name|newCS
operator|.
name|addQueue
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|c1
operator|.
name|setEntitlement
argument_list|(
operator|new
name|QueueEntitlement
argument_list|(
literal|0.5f
argument_list|,
literal|1f
argument_list|)
argument_list|)
expr_stmt|;
name|AutoCreatedLeafQueue
name|c2
init|=
operator|new
name|AutoCreatedLeafQueue
argument_list|(
name|newCS
argument_list|,
literal|"c2"
argument_list|,
name|parentQueue
argument_list|)
decl_stmt|;
name|newCS
operator|.
name|addQueue
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|c2
operator|.
name|setEntitlement
argument_list|(
operator|new
name|QueueEntitlement
argument_list|(
literal|0.5f
argument_list|,
literal|1f
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|AutoCreatedLeafQueue
name|c3
init|=
operator|new
name|AutoCreatedLeafQueue
argument_list|(
name|newCS
argument_list|,
literal|"c3"
argument_list|,
name|parentQueue
argument_list|)
decl_stmt|;
name|newCS
operator|.
name|addQueue
argument_list|(
name|c3
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception for auto queue creation failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SchedulerDynamicEditException
name|e
parameter_list|)
block|{
comment|//expected exception
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|newMockRM
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|CapacityScheduler
operator|)
name|newMockRM
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|newMockRM
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|setupQueueMapping ( CapacityScheduler newCS, String user, String parentQueue, String queue)
specifier|private
name|List
argument_list|<
name|UserGroupMappingPlacementRule
operator|.
name|QueueMapping
argument_list|>
name|setupQueueMapping
parameter_list|(
name|CapacityScheduler
name|newCS
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|parentQueue
parameter_list|,
name|String
name|queue
parameter_list|)
block|{
name|List
argument_list|<
name|UserGroupMappingPlacementRule
operator|.
name|QueueMapping
argument_list|>
name|queueMappings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|queueMappings
operator|.
name|add
argument_list|(
operator|new
name|UserGroupMappingPlacementRule
operator|.
name|QueueMapping
argument_list|(
name|UserGroupMappingPlacementRule
operator|.
name|QueueMapping
operator|.
name|MappingType
operator|.
name|USER
argument_list|,
name|user
argument_list|,
name|getQueueMapping
argument_list|(
name|parentQueue
argument_list|,
name|queue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setQueueMappings
argument_list|(
name|queueMappings
argument_list|)
expr_stmt|;
return|return
name|queueMappings
return|;
block|}
DECL|method|setupSchedulerInstance ()
specifier|private
name|MockRM
name|setupSchedulerInstance
parameter_list|()
block|{
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|queuePlacementRules
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|queuePlacementRules
operator|.
name|add
argument_list|(
name|YarnConfiguration
operator|.
name|USER_GROUP_PLACEMENT_RULE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQueuePlacementRules
argument_list|(
name|queuePlacementRules
argument_list|)
expr_stmt|;
name|setupQueueMappings
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MockRM
name|newMockRM
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|newMockRM
return|;
block|}
DECL|method|checkQueueCapacities (CapacityScheduler newCS, float capacityC, float capacityD)
name|void
name|checkQueueCapacities
parameter_list|(
name|CapacityScheduler
name|newCS
parameter_list|,
name|float
name|capacityC
parameter_list|,
name|float
name|capacityD
parameter_list|)
block|{
name|CSQueue
name|rootQueue
init|=
name|newCS
operator|.
name|getRootQueue
argument_list|()
decl_stmt|;
name|CSQueue
name|queueC
init|=
name|tcs
operator|.
name|findQueue
argument_list|(
name|rootQueue
argument_list|,
name|C
argument_list|)
decl_stmt|;
name|CSQueue
name|queueD
init|=
name|tcs
operator|.
name|findQueue
argument_list|(
name|rootQueue
argument_list|,
name|D
argument_list|)
decl_stmt|;
name|CSQueue
name|queueC1
init|=
name|tcs
operator|.
name|findQueue
argument_list|(
name|queueC
argument_list|,
name|C1
argument_list|)
decl_stmt|;
name|CSQueue
name|queueC2
init|=
name|tcs
operator|.
name|findQueue
argument_list|(
name|queueC
argument_list|,
name|C2
argument_list|)
decl_stmt|;
name|CSQueue
name|queueC3
init|=
name|tcs
operator|.
name|findQueue
argument_list|(
name|queueC
argument_list|,
name|C3
argument_list|)
decl_stmt|;
name|float
name|capC
init|=
name|capacityC
operator|/
literal|100.0f
decl_stmt|;
name|float
name|capD
init|=
name|capacityD
operator|/
literal|100.0f
decl_stmt|;
name|tcs
operator|.
name|checkQueueCapacity
argument_list|(
name|queueC
argument_list|,
name|capC
argument_list|,
name|capC
argument_list|,
literal|1.0f
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|tcs
operator|.
name|checkQueueCapacity
argument_list|(
name|queueD
argument_list|,
name|capD
argument_list|,
name|capD
argument_list|,
literal|1.0f
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|tcs
operator|.
name|checkQueueCapacity
argument_list|(
name|queueC1
argument_list|,
name|C1_CAPACITY
operator|/
literal|100.0f
argument_list|,
operator|(
name|C1_CAPACITY
operator|/
literal|100.0f
operator|)
operator|*
name|capC
argument_list|,
literal|1.0f
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|tcs
operator|.
name|checkQueueCapacity
argument_list|(
name|queueC2
argument_list|,
name|C2_CAPACITY
operator|/
literal|100.0f
argument_list|,
operator|(
name|C2_CAPACITY
operator|/
literal|100.0f
operator|)
operator|*
name|capC
argument_list|,
literal|1.0f
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
if|if
condition|(
name|queueC3
operator|!=
literal|null
condition|)
block|{
name|ManagedParentQueue
name|parentQueue
init|=
operator|(
name|ManagedParentQueue
operator|)
name|queueC
decl_stmt|;
name|QueueCapacities
name|cap
init|=
name|parentQueue
operator|.
name|getLeafQueueTemplate
argument_list|()
operator|.
name|getQueueCapacities
argument_list|()
decl_stmt|;
name|tcs
operator|.
name|checkQueueCapacity
argument_list|(
name|queueC3
argument_list|,
name|cap
operator|.
name|getCapacity
argument_list|()
argument_list|,
operator|(
name|cap
operator|.
name|getCapacity
argument_list|()
operator|)
operator|*
name|capC
argument_list|,
literal|1.0f
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|submitApp (CapacityScheduler newCS, String user, String queue, String parentQueue)
name|ApplicationAttemptId
name|submitApp
parameter_list|(
name|CapacityScheduler
name|newCS
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|queue
parameter_list|,
name|String
name|parentQueue
parameter_list|)
block|{
name|ApplicationId
name|appId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SchedulerEvent
name|addAppEvent
init|=
operator|new
name|AppAddedSchedulerEvent
argument_list|(
name|appId
argument_list|,
name|queue
argument_list|,
name|user
argument_list|,
operator|new
name|ApplicationPlacementContext
argument_list|(
name|queue
argument_list|,
name|parentQueue
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SchedulerEvent
name|addAttemptEvent
init|=
operator|new
name|AppAttemptAddedSchedulerEvent
argument_list|(
name|appAttemptId
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|newCS
operator|.
name|handle
argument_list|(
name|addAppEvent
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|handle
argument_list|(
name|addAttemptEvent
argument_list|)
expr_stmt|;
return|return
name|appAttemptId
return|;
block|}
block|}
end_class

end_unit

