begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|ApplicationPlacementContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerDynamicEditException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|queuemanagement
operator|.
name|GuaranteedOrZeroCapacityOverTimePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|QueueEntitlement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|policy
operator|.
name|FairOrderingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|ClientToAMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|NMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|CommonNodeLabelsManager
operator|.
name|NO_LABEL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|UserGroupMappingPlacementRule
operator|.
name|CURRENT_USER_MAPPING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CSQueueUtils
operator|.
name|EPSILON
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Tests for creation and reinitialization of auto created leaf queues  * and capacity management under a ManagedParentQueue.  */
end_comment

begin_class
DECL|class|TestCapacitySchedulerAutoQueueCreation
specifier|public
class|class
name|TestCapacitySchedulerAutoQueueCreation
extends|extends
name|TestCapacitySchedulerAutoCreatedQueueBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestCapacitySchedulerAutoQueueCreation
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TEMPLATE_MAX_RES
specifier|private
specifier|static
specifier|final
name|Resource
name|TEMPLATE_MAX_RES
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|16
operator|*
name|GB
argument_list|,
literal|48
argument_list|)
decl_stmt|;
DECL|field|TEMPLATE_MIN_RES
specifier|private
specifier|static
specifier|final
name|Resource
name|TEMPLATE_MIN_RES
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1638
argument_list|,
literal|4
argument_list|)
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testAutoCreateLeafQueueCreation ()
specifier|public
name|void
name|testAutoCreateLeafQueueCreation
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
comment|// submit an app
name|submitApp
argument_list|(
name|mockRM
argument_list|,
name|cs
operator|.
name|getQueue
argument_list|(
name|PARENT_QUEUE
argument_list|)
argument_list|,
name|USER0
argument_list|,
name|USER0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// check preconditions
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInC
init|=
name|cs
operator|.
name|getAppsInQueue
argument_list|(
name|PARENT_QUEUE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInC
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
name|USER0
argument_list|)
argument_list|)
expr_stmt|;
name|AutoCreatedLeafQueue
name|autoCreatedLeafQueue
init|=
operator|(
name|AutoCreatedLeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
name|USER0
argument_list|)
decl_stmt|;
name|ManagedParentQueue
name|parentQueue
init|=
operator|(
name|ManagedParentQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
name|PARENT_QUEUE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|parentQueue
argument_list|,
name|autoCreatedLeafQueue
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|expectedChildQueueAbsCapacity
init|=
name|populateExpectedAbsCapacityByLabelForParentQueue
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|validateInitialQueueEntitlement
argument_list|(
name|parentQueue
argument_list|,
name|USER0
argument_list|,
name|expectedChildQueueAbsCapacity
argument_list|,
name|accessibleNodeLabelsOnC
argument_list|)
expr_stmt|;
name|validateUserAndAppLimits
argument_list|(
name|autoCreatedLeafQueue
argument_list|,
literal|1000
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|autoCreatedLeafQueue
operator|.
name|getOrderingPolicy
argument_list|()
operator|instanceof
name|FairOrderingPolicy
argument_list|)
expr_stmt|;
name|setupGroupQueueMappings
argument_list|(
literal|"d"
argument_list|,
name|cs
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"%user"
argument_list|)
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|cs
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|mockRM
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|submitApp
argument_list|(
name|mockRM
argument_list|,
name|cs
operator|.
name|getQueue
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|TEST_GROUPUSER
argument_list|,
name|TEST_GROUPUSER
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|autoCreatedLeafQueue
operator|=
operator|(
name|AutoCreatedLeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
name|TEST_GROUPUSER
argument_list|)
expr_stmt|;
name|parentQueue
operator|=
operator|(
name|ManagedParentQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parentQueue
argument_list|,
name|autoCreatedLeafQueue
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|expectedChildQueueAbsCapacity
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
name|NO_LABEL
argument_list|,
literal|0.02f
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|validateInitialQueueEntitlement
argument_list|(
name|parentQueue
argument_list|,
name|TEST_GROUPUSER
argument_list|,
name|expectedChildQueueAbsCapacity
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
block|{
name|add
parameter_list|(
name|NO_LABEL
parameter_list|)
constructor_decl|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupQueue
argument_list|(
name|USER0
argument_list|)
expr_stmt|;
name|cleanupQueue
argument_list|(
name|TEST_GROUPUSER
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testReinitializeStoppedAutoCreatedLeafQueue ()
specifier|public
name|void
name|testReinitializeStoppedAutoCreatedLeafQueue
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|host
init|=
literal|"127.0.0.1"
decl_stmt|;
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|0
argument_list|,
name|MockNodes
operator|.
name|newResource
argument_list|(
literal|4
operator|*
name|GB
argument_list|)
argument_list|,
literal|1
argument_list|,
name|host
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
comment|// submit an app
name|RMApp
name|app1
init|=
name|mockRM
operator|.
name|submitApp
argument_list|(
name|GB
argument_list|,
literal|"test-auto-queue-creation-1"
argument_list|,
name|USER0
argument_list|,
literal|null
argument_list|,
name|USER0
argument_list|)
decl_stmt|;
name|RMApp
name|app2
init|=
name|mockRM
operator|.
name|submitApp
argument_list|(
name|GB
argument_list|,
literal|"test-auto-queue-creation-2"
argument_list|,
name|USER1
argument_list|,
literal|null
argument_list|,
name|USER1
argument_list|)
decl_stmt|;
comment|// check preconditions
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInC
init|=
name|cs
operator|.
name|getAppsInQueue
argument_list|(
name|PARENT_QUEUE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|appsInC
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
name|USER0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
name|USER1
argument_list|)
argument_list|)
expr_stmt|;
name|AutoCreatedLeafQueue
name|user0Queue
init|=
operator|(
name|AutoCreatedLeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
name|USER0
argument_list|)
decl_stmt|;
name|AutoCreatedLeafQueue
name|user1Queue
init|=
operator|(
name|AutoCreatedLeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
name|USER0
argument_list|)
decl_stmt|;
name|ManagedParentQueue
name|parentQueue
init|=
operator|(
name|ManagedParentQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
name|PARENT_QUEUE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|parentQueue
argument_list|,
name|user0Queue
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parentQueue
argument_list|,
name|user1Queue
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|expectedAbsChildQueueCapacity
init|=
name|populateExpectedAbsCapacityByLabelForParentQueue
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|validateInitialQueueEntitlement
argument_list|(
name|parentQueue
argument_list|,
name|USER0
argument_list|,
name|expectedAbsChildQueueCapacity
argument_list|,
name|accessibleNodeLabelsOnC
argument_list|)
expr_stmt|;
name|validateInitialQueueEntitlement
argument_list|(
name|parentQueue
argument_list|,
name|USER1
argument_list|,
name|expectedAbsChildQueueCapacity
argument_list|,
name|accessibleNodeLabelsOnC
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|appsInC
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Priority
name|priority
init|=
name|TestUtils
operator|.
name|createMockPriority
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|ResourceRequest
name|r1
init|=
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
decl_stmt|;
name|cs
operator|.
name|allocate
argument_list|(
name|appAttemptId
argument_list|,
name|Collections
operator|.
expr|<
name|ResourceRequest
operator|>
name|singletonList
argument_list|(
name|r1
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|ContainerId
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|host
argument_list|)
argument_list|,
literal|null
argument_list|,
name|NULL_UPDATE_REQUESTS
argument_list|)
expr_stmt|;
comment|//And this will result in container assignment for app1
name|CapacityScheduler
operator|.
name|schedule
argument_list|(
name|cs
argument_list|)
expr_stmt|;
comment|//change state to draining
name|user0Queue
operator|.
name|stopQueue
argument_list|()
expr_stmt|;
name|cs
operator|.
name|killAllAppsInQueue
argument_list|(
name|USER0
argument_list|)
expr_stmt|;
name|mockRM
operator|.
name|waitForState
argument_list|(
name|appAttemptId
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|mockRM
operator|.
name|waitForState
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
comment|//change state to stopped
name|user0Queue
operator|.
name|stopQueue
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|STOPPED
argument_list|,
name|user0Queue
operator|.
name|getQueueInfo
argument_list|()
operator|.
name|getQueueState
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|cs
operator|.
name|getConf
argument_list|()
argument_list|,
name|mockRM
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|AutoCreatedLeafQueue
name|user0QueueReinited
init|=
operator|(
name|AutoCreatedLeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
name|USER0
argument_list|)
decl_stmt|;
name|validateCapacities
argument_list|(
name|user0QueueReinited
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|1.0f
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|AutoCreatedLeafQueue
name|leafQueue
init|=
operator|(
name|AutoCreatedLeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
name|USER1
argument_list|)
decl_stmt|;
name|expectedAbsChildQueueCapacity
operator|=
name|populateExpectedAbsCapacityByLabelForParentQueue
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|validateInitialQueueEntitlement
argument_list|(
name|parentQueue
argument_list|,
name|leafQueue
operator|.
name|getQueueName
argument_list|()
argument_list|,
name|expectedAbsChildQueueCapacity
argument_list|,
name|accessibleNodeLabelsOnC
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupQueue
argument_list|(
name|USER0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testConvertAutoCreateDisabledOnManagedParentQueueFails ()
specifier|public
name|void
name|testConvertAutoCreateDisabledOnManagedParentQueueFails
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacityScheduler
name|newCS
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
try|try
block|{
name|CapacitySchedulerConfiguration
name|newConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|newConf
argument_list|)
expr_stmt|;
name|newConf
operator|.
name|setAutoCreateChildQueueEnabled
argument_list|(
name|C
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|setConf
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|setRMContext
argument_list|(
name|mockRM
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|init
argument_list|(
name|cs
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|start
argument_list|()
expr_stmt|;
name|newCS
operator|.
name|reinitialize
argument_list|(
name|newConf
argument_list|,
operator|new
name|RMContextImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|newConf
argument_list|)
argument_list|,
operator|new
name|NMTokenSecretManagerInRM
argument_list|(
name|newConf
argument_list|)
argument_list|,
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//expected exception
block|}
finally|finally
block|{
name|newCS
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testConvertLeafQueueToParentQueueWithAutoCreate ()
specifier|public
name|void
name|testConvertLeafQueueToParentQueueWithAutoCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacityScheduler
name|newCS
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
try|try
block|{
name|CapacitySchedulerConfiguration
name|newConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|newConf
argument_list|)
expr_stmt|;
name|newConf
operator|.
name|setAutoCreatedLeafQueueConfigCapacity
argument_list|(
name|A1
argument_list|,
name|A1_CAPACITY
operator|/
literal|10
argument_list|)
expr_stmt|;
name|newConf
operator|.
name|setAutoCreateChildQueueEnabled
argument_list|(
name|A1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|setConf
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|setRMContext
argument_list|(
name|mockRM
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|init
argument_list|(
name|cs
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|LeafQueue
name|a1Queue
init|=
operator|(
name|LeafQueue
operator|)
name|newCS
operator|.
name|getQueue
argument_list|(
literal|"a1"
argument_list|)
decl_stmt|;
name|a1Queue
operator|.
name|stopQueue
argument_list|()
expr_stmt|;
name|newCS
operator|.
name|reinitialize
argument_list|(
name|newConf
argument_list|,
operator|new
name|RMContextImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|newConf
argument_list|)
argument_list|,
operator|new
name|NMTokenSecretManagerInRM
argument_list|(
name|newConf
argument_list|)
argument_list|,
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|newCS
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testConvertFailsFromParentQueueToManagedParentQueue ()
specifier|public
name|void
name|testConvertFailsFromParentQueueToManagedParentQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacityScheduler
name|newCS
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
try|try
block|{
name|CapacitySchedulerConfiguration
name|newConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|newConf
argument_list|)
expr_stmt|;
name|newConf
operator|.
name|setAutoCreatedLeafQueueConfigCapacity
argument_list|(
name|A
argument_list|,
name|A_CAPACITY
operator|/
literal|10
argument_list|)
expr_stmt|;
name|newConf
operator|.
name|setAutoCreateChildQueueEnabled
argument_list|(
name|A
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|setConf
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|setRMContext
argument_list|(
name|mockRM
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|init
argument_list|(
name|cs
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|ParentQueue
name|a1Queue
init|=
operator|(
name|ParentQueue
operator|)
name|newCS
operator|.
name|getQueue
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|a1Queue
operator|.
name|stopQueue
argument_list|()
expr_stmt|;
name|newCS
operator|.
name|reinitialize
argument_list|(
name|newConf
argument_list|,
operator|new
name|RMContextImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|newConf
argument_list|)
argument_list|,
operator|new
name|NMTokenSecretManagerInRM
argument_list|(
name|newConf
argument_list|)
argument_list|,
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception while converting a parent queue to"
operator|+
literal|" an auto create enabled parent queue"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//expected exception
block|}
finally|finally
block|{
name|newCS
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAutoCreateLeafQueueFailsWithNoQueueMapping ()
specifier|public
name|void
name|testAutoCreateLeafQueueFailsWithNoQueueMapping
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|INVALID_USER
init|=
literal|"invalid_user"
decl_stmt|;
comment|// submit an app under a different queue name which does not exist
comment|// and queue mapping does not exist for this user
name|RMApp
name|app
init|=
name|mockRM
operator|.
name|submitApp
argument_list|(
name|GB
argument_list|,
literal|"app"
argument_list|,
name|INVALID_USER
argument_list|,
literal|null
argument_list|,
name|INVALID_USER
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|mockRM
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|mockRM
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppState
operator|.
name|FAILED
argument_list|,
name|app
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testQueueMappingValidationFailsWithInvalidParentQueueInMapping ()
specifier|public
name|void
name|testQueueMappingValidationFailsWithInvalidParentQueueInMapping
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|newMockRM
init|=
name|setupSchedulerInstance
argument_list|()
decl_stmt|;
try|try
block|{
name|CapacityScheduler
name|newCS
init|=
operator|(
name|CapacityScheduler
operator|)
name|newMockRM
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|//"a" is not auto create enabled
comment|//dynamic queue mapping
try|try
block|{
name|setupQueueMapping
argument_list|(
name|newCS
argument_list|,
name|CURRENT_USER_MAPPING
argument_list|,
literal|"a"
argument_list|,
name|CURRENT_USER_MAPPING
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|updatePlacementRules
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected invalid parent queue mapping failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//expected exception
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"invalid parent queue which does not have auto creation of leaf "
operator|+
literal|"queues enabled ["
operator|+
literal|"a"
operator|+
literal|"]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//"a" is not auto create enabled and app_user does not exist as a leaf
comment|// queue
comment|//static queue mapping
try|try
block|{
name|setupQueueMapping
argument_list|(
name|newCS
argument_list|,
literal|"app_user"
argument_list|,
literal|"INVALID_PARENT_QUEUE"
argument_list|,
literal|"app_user"
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|updatePlacementRules
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected invalid parent queue mapping failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//expected exception
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"invalid parent queue ["
operator|+
literal|"INVALID_PARENT_QUEUE"
operator|+
literal|"]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|newMockRM
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|CapacityScheduler
operator|)
name|newMockRM
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|newMockRM
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testQueueMappingUpdatesFailsOnRemovalOfParentQueueInMapping ()
specifier|public
name|void
name|testQueueMappingUpdatesFailsOnRemovalOfParentQueueInMapping
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|newMockRM
init|=
name|setupSchedulerInstance
argument_list|()
decl_stmt|;
try|try
block|{
name|CapacityScheduler
name|newCS
init|=
operator|(
name|CapacityScheduler
operator|)
name|newMockRM
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|setupQueueMapping
argument_list|(
name|newCS
argument_list|,
name|CURRENT_USER_MAPPING
argument_list|,
literal|"c"
argument_list|,
name|CURRENT_USER_MAPPING
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|updatePlacementRules
argument_list|()
expr_stmt|;
try|try
block|{
name|setupQueueMapping
argument_list|(
name|newCS
argument_list|,
name|CURRENT_USER_MAPPING
argument_list|,
literal|""
argument_list|,
name|CURRENT_USER_MAPPING
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|updatePlacementRules
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected invalid parent queue mapping failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//expected exception
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"invalid parent queue []"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|newMockRM
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|CapacityScheduler
operator|)
name|newMockRM
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|newMockRM
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testParentQueueUpdateInQueueMappingFailsAfterAutoCreation ()
specifier|public
name|void
name|testParentQueueUpdateInQueueMappingFailsAfterAutoCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|newMockRM
init|=
name|setupSchedulerInstance
argument_list|()
decl_stmt|;
name|CapacityScheduler
name|newCS
init|=
operator|(
name|CapacityScheduler
operator|)
name|newMockRM
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
try|try
block|{
name|submitApp
argument_list|(
name|newCS
argument_list|,
name|USER0
argument_list|,
name|USER0
argument_list|,
name|PARENT_QUEUE
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|newCS
operator|.
name|getQueue
argument_list|(
name|USER0
argument_list|)
argument_list|)
expr_stmt|;
name|setupQueueMapping
argument_list|(
name|newCS
argument_list|,
name|USER0
argument_list|,
literal|"d"
argument_list|,
name|USER0
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|updatePlacementRules
argument_list|()
expr_stmt|;
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getDispatcher
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|setRMContext
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SchedulerEvent
name|addAppEvent
init|=
operator|new
name|AppAddedSchedulerEvent
argument_list|(
name|appId
argument_list|,
name|USER0
argument_list|,
name|USER0
argument_list|,
operator|new
name|ApplicationPlacementContext
argument_list|(
name|USER0
argument_list|,
literal|"d"
argument_list|)
argument_list|)
decl_stmt|;
name|newCS
operator|.
name|handle
argument_list|(
name|addAppEvent
argument_list|)
expr_stmt|;
name|RMAppEvent
name|event
init|=
operator|new
name|RMAppEvent
argument_list|(
name|appId
argument_list|,
name|RMAppEventType
operator|.
name|APP_REJECTED
argument_list|,
literal|"error"
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|spyOnNextEvent
argument_list|(
name|event
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|newMockRM
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|CapacityScheduler
operator|)
name|newMockRM
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|newMockRM
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testAutoCreationFailsWhenParentCapacityExceeded ()
specifier|public
name|void
name|testAutoCreationFailsWhenParentCapacityExceeded
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|newMockRM
init|=
name|setupSchedulerInstance
argument_list|()
decl_stmt|;
name|CapacityScheduler
name|newCS
init|=
operator|(
name|CapacityScheduler
operator|)
name|newMockRM
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
try|try
block|{
name|CapacitySchedulerConfiguration
name|conf
init|=
name|newCS
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setShouldFailAutoQueueCreationWhenGuaranteedCapacityExceeded
argument_list|(
name|C
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|newMockRM
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test add one auto created queue dynamically and manually modify
comment|// capacity
name|ManagedParentQueue
name|parentQueue
init|=
operator|(
name|ManagedParentQueue
operator|)
name|newCS
operator|.
name|getQueue
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|AutoCreatedLeafQueue
name|c1
init|=
operator|new
name|AutoCreatedLeafQueue
argument_list|(
name|newCS
argument_list|,
literal|"c1"
argument_list|,
name|parentQueue
argument_list|)
decl_stmt|;
name|newCS
operator|.
name|addQueue
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|c1
operator|.
name|setCapacity
argument_list|(
literal|0.5f
argument_list|)
expr_stmt|;
name|c1
operator|.
name|setAbsoluteCapacity
argument_list|(
name|c1
operator|.
name|getParent
argument_list|()
operator|.
name|getAbsoluteCapacity
argument_list|()
operator|*
literal|1f
argument_list|)
expr_stmt|;
name|c1
operator|.
name|setMaxCapacity
argument_list|(
literal|1f
argument_list|)
expr_stmt|;
name|setEntitlement
argument_list|(
name|c1
argument_list|,
operator|new
name|QueueEntitlement
argument_list|(
literal|0.5f
argument_list|,
literal|1f
argument_list|)
argument_list|)
expr_stmt|;
name|AutoCreatedLeafQueue
name|c2
init|=
operator|new
name|AutoCreatedLeafQueue
argument_list|(
name|newCS
argument_list|,
literal|"c2"
argument_list|,
name|parentQueue
argument_list|)
decl_stmt|;
name|newCS
operator|.
name|addQueue
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|setEntitlement
argument_list|(
name|c2
argument_list|,
operator|new
name|QueueEntitlement
argument_list|(
literal|0.5f
argument_list|,
literal|1f
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|AutoCreatedLeafQueue
name|c3
init|=
operator|new
name|AutoCreatedLeafQueue
argument_list|(
name|newCS
argument_list|,
literal|"c3"
argument_list|,
name|parentQueue
argument_list|)
decl_stmt|;
name|newCS
operator|.
name|addQueue
argument_list|(
name|c3
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception for auto queue creation failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SchedulerDynamicEditException
name|e
parameter_list|)
block|{
comment|//expected exception
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|newMockRM
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|CapacityScheduler
operator|)
name|newMockRM
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|newMockRM
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testAutoCreatedQueueActivationDeactivation ()
specifier|public
name|void
name|testAutoCreatedQueueActivationDeactivation
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|CSQueue
name|parentQueue
init|=
name|cs
operator|.
name|getQueue
argument_list|(
name|PARENT_QUEUE
argument_list|)
decl_stmt|;
comment|//submit app1 as USER1
name|ApplicationId
name|user1AppId
init|=
name|submitApp
argument_list|(
name|mockRM
argument_list|,
name|parentQueue
argument_list|,
name|USER1
argument_list|,
name|USER1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|expectedAbsChildQueueCapacity
init|=
name|populateExpectedAbsCapacityByLabelForParentQueue
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|validateInitialQueueEntitlement
argument_list|(
name|parentQueue
argument_list|,
name|USER1
argument_list|,
name|expectedAbsChildQueueCapacity
argument_list|,
name|accessibleNodeLabelsOnC
argument_list|)
expr_stmt|;
comment|//submit another app2 as USER2
name|ApplicationId
name|user2AppId
init|=
name|submitApp
argument_list|(
name|mockRM
argument_list|,
name|parentQueue
argument_list|,
name|USER2
argument_list|,
name|USER2
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expectedAbsChildQueueCapacity
operator|=
name|populateExpectedAbsCapacityByLabelForParentQueue
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|validateInitialQueueEntitlement
argument_list|(
name|parentQueue
argument_list|,
name|USER2
argument_list|,
name|expectedAbsChildQueueCapacity
argument_list|,
name|accessibleNodeLabelsOnC
argument_list|)
expr_stmt|;
comment|//submit another app3 as USER1
name|submitApp
argument_list|(
name|mockRM
argument_list|,
name|parentQueue
argument_list|,
name|USER1
argument_list|,
name|USER1
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|//validate total activated abs capacity remains the same
name|GuaranteedOrZeroCapacityOverTimePolicy
name|autoCreatedQueueManagementPolicy
init|=
call|(
name|GuaranteedOrZeroCapacityOverTimePolicy
call|)
argument_list|(
operator|(
name|ManagedParentQueue
operator|)
name|parentQueue
argument_list|)
operator|.
name|getAutoCreatedQueueManagementPolicy
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|nodeLabel
range|:
name|accessibleNodeLabelsOnC
control|)
block|{
name|assertEquals
argument_list|(
name|expectedAbsChildQueueCapacity
operator|.
name|get
argument_list|(
name|nodeLabel
argument_list|)
argument_list|,
name|autoCreatedQueueManagementPolicy
operator|.
name|getAbsoluteActivatedChildQueueCapacity
argument_list|(
name|nodeLabel
argument_list|)
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
block|}
comment|//submit user_3 app. This cant be allocated since there is no capacity
comment|// in NO_LABEL, SSD but can be in GPU label
name|submitApp
argument_list|(
name|mockRM
argument_list|,
name|parentQueue
argument_list|,
name|USER3
argument_list|,
name|USER3
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|CSQueue
name|user3LeafQueue
init|=
name|cs
operator|.
name|getQueue
argument_list|(
name|USER3
argument_list|)
decl_stmt|;
name|validateCapacities
argument_list|(
operator|(
name|AutoCreatedLeafQueue
operator|)
name|user3LeafQueue
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|1.0f
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|validateCapacitiesByLabel
argument_list|(
operator|(
name|ManagedParentQueue
operator|)
name|parentQueue
argument_list|,
operator|(
name|AutoCreatedLeafQueue
operator|)
name|user3LeafQueue
argument_list|,
name|NODEL_LABEL_GPU
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.2f
argument_list|,
name|autoCreatedQueueManagementPolicy
operator|.
name|getAbsoluteActivatedChildQueueCapacity
argument_list|(
name|NO_LABEL
argument_list|)
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.9f
argument_list|,
name|autoCreatedQueueManagementPolicy
operator|.
name|getAbsoluteActivatedChildQueueCapacity
argument_list|(
name|NODEL_LABEL_GPU
argument_list|)
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
comment|//Verify that AMs can be allocated
comment|//Node 1 has SSD and default node label expression on C is SSD.
comment|//This validates that the default node label expression with SSD is set
comment|// on the AM attempt
comment|// and app attempt reaches ALLOCATED state for a dynamic queue 'USER1'
name|mockRM
operator|.
name|launchAM
argument_list|(
name|mockRM
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|user1AppId
argument_list|)
argument_list|,
name|mockRM
argument_list|,
name|nm1
argument_list|)
expr_stmt|;
comment|//      //deactivate USER2 queue
name|cs
operator|.
name|killAllAppsInQueue
argument_list|(
name|USER2
argument_list|)
expr_stmt|;
name|mockRM
operator|.
name|waitForState
argument_list|(
name|user2AppId
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
comment|//Verify if USER_2 can be deactivated since it has no pending apps
name|List
argument_list|<
name|QueueManagementChange
argument_list|>
name|queueManagementChanges
init|=
name|autoCreatedQueueManagementPolicy
operator|.
name|computeQueueManagementChanges
argument_list|()
decl_stmt|;
name|ManagedParentQueue
name|managedParentQueue
init|=
operator|(
name|ManagedParentQueue
operator|)
name|parentQueue
decl_stmt|;
name|managedParentQueue
operator|.
name|validateAndApplyQueueManagementChanges
argument_list|(
name|queueManagementChanges
argument_list|)
expr_stmt|;
name|validateDeactivatedQueueEntitlement
argument_list|(
name|parentQueue
argument_list|,
name|USER2
argument_list|,
name|expectedAbsChildQueueCapacity
argument_list|,
name|queueManagementChanges
argument_list|)
expr_stmt|;
comment|//USER_3 should now get activated for SSD, NO_LABEL
name|Set
argument_list|<
name|String
argument_list|>
name|expectedNodeLabelsUpdated
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedNodeLabelsUpdated
operator|.
name|add
argument_list|(
name|NO_LABEL
argument_list|)
expr_stmt|;
name|expectedNodeLabelsUpdated
operator|.
name|add
argument_list|(
name|NODEL_LABEL_SSD
argument_list|)
expr_stmt|;
name|validateActivatedQueueEntitlement
argument_list|(
name|parentQueue
argument_list|,
name|USER3
argument_list|,
name|expectedAbsChildQueueCapacity
argument_list|,
name|queueManagementChanges
argument_list|,
name|expectedNodeLabelsUpdated
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupQueue
argument_list|(
name|USER1
argument_list|)
expr_stmt|;
name|cleanupQueue
argument_list|(
name|USER2
argument_list|)
expr_stmt|;
name|cleanupQueue
argument_list|(
name|USER3
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testClusterResourceUpdationOnAutoCreatedLeafQueues ()
specifier|public
name|void
name|testClusterResourceUpdationOnAutoCreatedLeafQueues
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|newMockRM
init|=
name|setupSchedulerInstance
argument_list|()
decl_stmt|;
try|try
block|{
name|CapacityScheduler
name|newCS
init|=
operator|(
name|CapacityScheduler
operator|)
name|newMockRM
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|CSQueue
name|parentQueue
init|=
name|newCS
operator|.
name|getQueue
argument_list|(
name|PARENT_QUEUE
argument_list|)
decl_stmt|;
comment|//submit app1 as USER1
name|submitApp
argument_list|(
name|newMockRM
argument_list|,
name|parentQueue
argument_list|,
name|USER1
argument_list|,
name|USER1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|expectedAbsChildQueueCapacity
init|=
name|populateExpectedAbsCapacityByLabelForParentQueue
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|validateInitialQueueEntitlement
argument_list|(
name|newCS
argument_list|,
name|parentQueue
argument_list|,
name|USER1
argument_list|,
name|expectedAbsChildQueueCapacity
argument_list|,
name|accessibleNodeLabelsOnC
argument_list|)
expr_stmt|;
comment|//submit another app2 as USER2
name|ApplicationId
name|user2AppId
init|=
name|submitApp
argument_list|(
name|newMockRM
argument_list|,
name|parentQueue
argument_list|,
name|USER2
argument_list|,
name|USER2
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expectedAbsChildQueueCapacity
operator|=
name|populateExpectedAbsCapacityByLabelForParentQueue
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|validateInitialQueueEntitlement
argument_list|(
name|newCS
argument_list|,
name|parentQueue
argument_list|,
name|USER2
argument_list|,
name|expectedAbsChildQueueCapacity
argument_list|,
name|accessibleNodeLabelsOnC
argument_list|)
expr_stmt|;
comment|//validate total activated abs capacity remains the same
name|GuaranteedOrZeroCapacityOverTimePolicy
name|autoCreatedQueueManagementPolicy
init|=
call|(
name|GuaranteedOrZeroCapacityOverTimePolicy
call|)
argument_list|(
operator|(
name|ManagedParentQueue
operator|)
name|parentQueue
argument_list|)
operator|.
name|getAutoCreatedQueueManagementPolicy
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|autoCreatedQueueManagementPolicy
operator|.
name|getAbsoluteActivatedChildQueueCapacity
argument_list|(
name|NO_LABEL
argument_list|)
argument_list|,
literal|0.2f
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
comment|//submit user_3 app. This cant be scheduled since there is no capacity
name|submitApp
argument_list|(
name|newMockRM
argument_list|,
name|parentQueue
argument_list|,
name|USER3
argument_list|,
name|USER3
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|CSQueue
name|user3LeafQueue
init|=
name|newCS
operator|.
name|getQueue
argument_list|(
name|USER3
argument_list|)
decl_stmt|;
name|validateCapacities
argument_list|(
operator|(
name|AutoCreatedLeafQueue
operator|)
name|user3LeafQueue
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|1.0f
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|autoCreatedQueueManagementPolicy
operator|.
name|getAbsoluteActivatedChildQueueCapacity
argument_list|(
name|NO_LABEL
argument_list|)
argument_list|,
literal|0.2f
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
comment|// add new NM.
name|newMockRM
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.3:1234"
argument_list|,
literal|125
operator|*
name|GB
argument_list|,
literal|20
argument_list|)
expr_stmt|;
comment|// There will be change in effective resource when nodes are added
comment|// since we deal with percentages
name|Resource
name|MAX_RES
init|=
name|Resources
operator|.
name|addTo
argument_list|(
name|TEMPLATE_MAX_RES
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|125
operator|*
name|GB
argument_list|,
literal|20
argument_list|)
argument_list|)
decl_stmt|;
name|Resource
name|MIN_RES
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|14438
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Effective Min resource for USER3 is not correct"
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|user3LeafQueue
operator|.
name|getQueueResourceQuotas
argument_list|()
operator|.
name|getEffectiveMinResource
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Effective Max resource for USER3 is not correct"
argument_list|,
name|MAX_RES
argument_list|,
name|user3LeafQueue
operator|.
name|getQueueResourceQuotas
argument_list|()
operator|.
name|getEffectiveMaxResource
argument_list|()
argument_list|)
expr_stmt|;
name|CSQueue
name|user1LeafQueue
init|=
name|newCS
operator|.
name|getQueue
argument_list|(
name|USER1
argument_list|)
decl_stmt|;
name|CSQueue
name|user2LeafQueue
init|=
name|newCS
operator|.
name|getQueue
argument_list|(
name|USER2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Effective Min resource for USER2 is not correct"
argument_list|,
name|MIN_RES
argument_list|,
name|user1LeafQueue
operator|.
name|getQueueResourceQuotas
argument_list|()
operator|.
name|getEffectiveMinResource
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Effective Max resource for USER2 is not correct"
argument_list|,
name|MAX_RES
argument_list|,
name|user1LeafQueue
operator|.
name|getQueueResourceQuotas
argument_list|()
operator|.
name|getEffectiveMaxResource
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Effective Min resource for USER1 is not correct"
argument_list|,
name|MIN_RES
argument_list|,
name|user2LeafQueue
operator|.
name|getQueueResourceQuotas
argument_list|()
operator|.
name|getEffectiveMinResource
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Effective Max resource for USER1 is not correct"
argument_list|,
name|MAX_RES
argument_list|,
name|user2LeafQueue
operator|.
name|getQueueResourceQuotas
argument_list|()
operator|.
name|getEffectiveMaxResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// unregister one NM.
name|newMockRM
operator|.
name|unRegisterNode
argument_list|(
name|nm3
argument_list|)
expr_stmt|;
name|Resource
name|MIN_RES_UPDATED
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|12800
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Resource
name|MAX_RES_UPDATED
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|128000
argument_list|,
literal|20
argument_list|)
decl_stmt|;
comment|// After loosing one NM, resources will reduce
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Effective Min resource for USER2 is not correct"
argument_list|,
name|MIN_RES_UPDATED
argument_list|,
name|user1LeafQueue
operator|.
name|getQueueResourceQuotas
argument_list|()
operator|.
name|getEffectiveMinResource
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Effective Max resource for USER2 is not correct"
argument_list|,
name|MAX_RES_UPDATED
argument_list|,
name|user2LeafQueue
operator|.
name|getQueueResourceQuotas
argument_list|()
operator|.
name|getEffectiveMaxResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupQueue
argument_list|(
name|USER1
argument_list|)
expr_stmt|;
name|cleanupQueue
argument_list|(
name|USER2
argument_list|)
expr_stmt|;
name|cleanupQueue
argument_list|(
name|USER3
argument_list|)
expr_stmt|;
if|if
condition|(
name|newMockRM
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|CapacityScheduler
operator|)
name|newMockRM
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|newMockRM
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testReinitializeQueuesWithAutoCreatedLeafQueues ()
specifier|public
name|void
name|testReinitializeQueuesWithAutoCreatedLeafQueues
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|newMockRM
init|=
name|setupSchedulerInstance
argument_list|()
decl_stmt|;
try|try
block|{
name|CapacityScheduler
name|newCS
init|=
operator|(
name|CapacityScheduler
operator|)
name|newMockRM
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|CapacitySchedulerConfiguration
name|conf
init|=
name|newCS
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|CSQueue
name|parentQueue
init|=
name|newCS
operator|.
name|getQueue
argument_list|(
name|PARENT_QUEUE
argument_list|)
decl_stmt|;
comment|//submit app1 as USER1
name|submitApp
argument_list|(
name|newMockRM
argument_list|,
name|parentQueue
argument_list|,
name|USER1
argument_list|,
name|USER1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|expectedChildQueueAbsCapacity
init|=
name|populateExpectedAbsCapacityByLabelForParentQueue
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|validateInitialQueueEntitlement
argument_list|(
name|newCS
argument_list|,
name|parentQueue
argument_list|,
name|USER1
argument_list|,
name|expectedChildQueueAbsCapacity
argument_list|,
name|accessibleNodeLabelsOnC
argument_list|)
expr_stmt|;
comment|//submit another app2 as USER2
name|ApplicationId
name|user2AppId
init|=
name|submitApp
argument_list|(
name|newMockRM
argument_list|,
name|parentQueue
argument_list|,
name|USER2
argument_list|,
name|USER2
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|expectedChildQueueAbsCapacity
operator|=
name|populateExpectedAbsCapacityByLabelForParentQueue
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|validateInitialQueueEntitlement
argument_list|(
name|newCS
argument_list|,
name|parentQueue
argument_list|,
name|USER2
argument_list|,
name|expectedChildQueueAbsCapacity
argument_list|,
name|accessibleNodeLabelsOnC
argument_list|)
expr_stmt|;
comment|//update parent queue capacity
name|conf
operator|.
name|setCapacity
argument_list|(
name|C
argument_list|,
literal|30f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|D
argument_list|,
literal|10f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|C
argument_list|,
literal|50f
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|newMockRM
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// validate that leaf queues abs capacity is now changed
name|AutoCreatedLeafQueue
name|user0Queue
init|=
operator|(
name|AutoCreatedLeafQueue
operator|)
name|newCS
operator|.
name|getQueue
argument_list|(
name|USER1
argument_list|)
decl_stmt|;
name|validateCapacities
argument_list|(
name|user0Queue
argument_list|,
literal|0.5f
argument_list|,
literal|0.15f
argument_list|,
literal|1.0f
argument_list|,
literal|0.5f
argument_list|)
expr_stmt|;
name|validateUserAndAppLimits
argument_list|(
name|user0Queue
argument_list|,
literal|1500
argument_list|,
literal|1500
argument_list|)
expr_stmt|;
comment|//update leaf queue template capacities
name|conf
operator|.
name|setAutoCreatedLeafQueueConfigCapacity
argument_list|(
name|C
argument_list|,
literal|30f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreatedLeafQueueConfigMaxCapacity
argument_list|(
name|C
argument_list|,
literal|40f
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|newMockRM
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|validateCapacities
argument_list|(
name|user0Queue
argument_list|,
literal|0.3f
argument_list|,
literal|0.09f
argument_list|,
literal|0.4f
argument_list|,
literal|0.2f
argument_list|)
expr_stmt|;
name|validateUserAndAppLimits
argument_list|(
name|user0Queue
argument_list|,
literal|900
argument_list|,
literal|900
argument_list|)
expr_stmt|;
comment|//submit app1 as USER3
name|submitApp
argument_list|(
name|newMockRM
argument_list|,
name|parentQueue
argument_list|,
name|USER3
argument_list|,
name|USER3
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|AutoCreatedLeafQueue
name|user3Queue
init|=
operator|(
name|AutoCreatedLeafQueue
operator|)
name|newCS
operator|.
name|getQueue
argument_list|(
name|USER1
argument_list|)
decl_stmt|;
name|validateCapacities
argument_list|(
name|user3Queue
argument_list|,
literal|0.3f
argument_list|,
literal|0.09f
argument_list|,
literal|0.4f
argument_list|,
literal|0.2f
argument_list|)
expr_stmt|;
name|validateUserAndAppLimits
argument_list|(
name|user3Queue
argument_list|,
literal|900
argument_list|,
literal|900
argument_list|)
expr_stmt|;
comment|//submit app1 as USER1 - is already activated. there should be no diff
comment|// in capacities
name|submitApp
argument_list|(
name|newMockRM
argument_list|,
name|parentQueue
argument_list|,
name|USER3
argument_list|,
name|USER3
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|validateCapacities
argument_list|(
name|user3Queue
argument_list|,
literal|0.3f
argument_list|,
literal|0.09f
argument_list|,
literal|0.4f
argument_list|,
literal|0.2f
argument_list|)
expr_stmt|;
name|validateUserAndAppLimits
argument_list|(
name|user3Queue
argument_list|,
literal|900
argument_list|,
literal|900
argument_list|)
expr_stmt|;
name|GuaranteedOrZeroCapacityOverTimePolicy
name|autoCreatedQueueManagementPolicy
init|=
call|(
name|GuaranteedOrZeroCapacityOverTimePolicy
call|)
argument_list|(
operator|(
name|ManagedParentQueue
operator|)
name|parentQueue
argument_list|)
operator|.
name|getAutoCreatedQueueManagementPolicy
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0.27f
argument_list|,
name|autoCreatedQueueManagementPolicy
operator|.
name|getAbsoluteActivatedChildQueueCapacity
argument_list|(
name|NO_LABEL
argument_list|)
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupQueue
argument_list|(
name|USER1
argument_list|)
expr_stmt|;
name|cleanupQueue
argument_list|(
name|USER2
argument_list|)
expr_stmt|;
if|if
condition|(
name|newMockRM
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|CapacityScheduler
operator|)
name|newMockRM
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|newMockRM
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

