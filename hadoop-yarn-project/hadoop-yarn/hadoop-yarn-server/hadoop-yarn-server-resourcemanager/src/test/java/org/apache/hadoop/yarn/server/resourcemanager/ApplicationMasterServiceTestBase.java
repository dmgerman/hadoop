begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|DrainDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|AllocateRequestPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ApplicationMasterNotRegisteredException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidContainerReleaseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidResourceRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServiceProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|TestResourceProfiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fifo
operator|.
name|FifoScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DominantResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|sleep
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Base class for Application Master test classes.  * Some implementors are for testing CS and FS.  */
end_comment

begin_class
DECL|class|ApplicationMasterServiceTestBase
specifier|public
specifier|abstract
class|class
name|ApplicationMasterServiceTestBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ApplicationMasterServiceTestBase
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|GB
specifier|static
specifier|final
name|int
name|GB
init|=
literal|1024
decl_stmt|;
DECL|field|CUSTOM_RES
specifier|static
specifier|final
name|String
name|CUSTOM_RES
init|=
literal|"res_1"
decl_stmt|;
DECL|field|DEFAULT_HOST
specifier|static
specifier|final
name|String
name|DEFAULT_HOST
init|=
literal|"127.0.0.1"
decl_stmt|;
DECL|field|DEFAULT_PORT
specifier|static
specifier|final
name|String
name|DEFAULT_PORT
init|=
literal|"1234"
decl_stmt|;
DECL|field|conf
specifier|protected
specifier|static
name|YarnConfiguration
name|conf
decl_stmt|;
DECL|method|createYarnConfig ()
specifier|protected
specifier|abstract
name|YarnConfiguration
name|createYarnConfig
parameter_list|()
function_decl|;
DECL|method|getResourceUsageForQueue (ResourceManager rm, String queue)
specifier|protected
specifier|abstract
name|Resource
name|getResourceUsageForQueue
parameter_list|(
name|ResourceManager
name|rm
parameter_list|,
name|String
name|queue
parameter_list|)
function_decl|;
DECL|method|getDefaultQueueName ()
specifier|protected
specifier|abstract
name|String
name|getDefaultQueueName
parameter_list|()
function_decl|;
DECL|method|initializeMandatoryResources ()
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|initializeMandatoryResources
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|riMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|ResourceInformation
name|memory
init|=
name|ResourceInformation
operator|.
name|newInstance
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getName
argument_list|()
argument_list|,
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getUnits
argument_list|()
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|)
decl_stmt|;
name|ResourceInformation
name|vcores
init|=
name|ResourceInformation
operator|.
name|newInstance
argument_list|(
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getName
argument_list|()
argument_list|,
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getUnits
argument_list|()
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|,
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
name|riMap
operator|.
name|put
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_URI
argument_list|,
name|memory
argument_list|)
expr_stmt|;
name|riMap
operator|.
name|put
argument_list|(
name|ResourceInformation
operator|.
name|VCORES_URI
argument_list|,
name|vcores
argument_list|)
expr_stmt|;
return|return
name|riMap
return|;
block|}
DECL|method|requestResources (MockAM am, long memory, int vCores, Map<String, Integer> customResources)
specifier|private
name|void
name|requestResources
parameter_list|(
name|MockAM
name|am
parameter_list|,
name|long
name|memory
parameter_list|,
name|int
name|vCores
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|customResources
parameter_list|)
throws|throws
name|Exception
block|{
name|am
operator|.
name|allocate
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|ResourceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|capability
argument_list|(
name|TestUtils
operator|.
name|createResource
argument_list|(
name|memory
argument_list|,
name|vCores
argument_list|,
name|customResources
argument_list|)
argument_list|)
operator|.
name|numContainers
argument_list|(
literal|1
argument_list|)
operator|.
name|resourceName
argument_list|(
literal|"*"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|FifoScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|3000000
argument_list|)
DECL|method|testRMIdentifierOnContainerAllocation ()
specifier|public
name|void
name|testRMIdentifierOnContainerAllocation
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Register node1
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
name|DEFAULT_HOST
operator|+
literal|":"
operator|+
name|DEFAULT_PORT
argument_list|,
literal|6
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// Submit an application
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|2048
argument_list|)
decl_stmt|;
comment|// kick the scheduling
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt1
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am1
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|am1
operator|.
name|addRequests
argument_list|(
operator|new
name|String
index|[]
block|{
name|DEFAULT_HOST
block|}
argument_list|,
name|GB
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|AllocateResponse
name|alloc1Response
init|=
name|am1
operator|.
name|schedule
argument_list|()
decl_stmt|;
comment|// send the request
comment|// kick the scheduler
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
while|while
condition|(
name|alloc1Response
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for containers to be created for app 1..."
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|alloc1Response
operator|=
name|am1
operator|.
name|schedule
argument_list|()
expr_stmt|;
block|}
comment|// assert RMIdentifier is set properly in allocated containers
name|Container
name|allocatedContainer
init|=
name|alloc1Response
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ContainerTokenIdentifier
name|tokenId
init|=
name|BuilderUtils
operator|.
name|newContainerTokenIdentifier
argument_list|(
name|allocatedContainer
operator|.
name|getContainerToken
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|MockRM
operator|.
name|getClusterTimeStamp
argument_list|()
argument_list|,
name|tokenId
operator|.
name|getRMIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|3000000
argument_list|)
DECL|method|testAllocateResponseIdOverflow ()
specifier|public
name|void
name|testAllocateResponseIdOverflow
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Register node1
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
name|DEFAULT_HOST
operator|+
literal|":"
operator|+
name|DEFAULT_PORT
argument_list|,
literal|6
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// Submit an application
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|2048
argument_list|)
decl_stmt|;
comment|// kick off the scheduling
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt1
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am1
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
comment|// Set the last responseId to be Integer.MAX_VALUE
name|Assert
operator|.
name|assertTrue
argument_list|(
name|am1
operator|.
name|setApplicationLastResponseId
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Both allocate should succeed
name|am1
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// send allocate with responseId = Integer.MAX_VALUE
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|am1
operator|.
name|getResponseId
argument_list|()
argument_list|)
expr_stmt|;
name|am1
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// send allocate with responseId = 0
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|am1
operator|.
name|getResponseId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|600000
argument_list|)
DECL|method|testInvalidContainerReleaseRequest ()
specifier|public
name|void
name|testInvalidContainerReleaseRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Register node1
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
name|DEFAULT_HOST
operator|+
literal|":"
operator|+
name|DEFAULT_PORT
argument_list|,
literal|6
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// Submit an application
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
comment|// kick the scheduling
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt1
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am1
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|am1
operator|.
name|addRequests
argument_list|(
operator|new
name|String
index|[]
block|{
name|DEFAULT_HOST
block|}
argument_list|,
name|GB
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|AllocateResponse
name|alloc1Response
init|=
name|am1
operator|.
name|schedule
argument_list|()
decl_stmt|;
comment|// send the request
comment|// kick the scheduler
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
while|while
condition|(
name|alloc1Response
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for containers to be created for app 1..."
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|alloc1Response
operator|=
name|am1
operator|.
name|schedule
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|alloc1Response
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|RMApp
name|app2
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt2
init|=
name|app2
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am2
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt2
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am2
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
comment|// Now trying to release container allocated for app1 -> appAttempt1.
name|ContainerId
name|cId
init|=
name|alloc1Response
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
decl_stmt|;
name|am2
operator|.
name|addContainerToBeReleased
argument_list|(
name|cId
argument_list|)
expr_stmt|;
try|try
block|{
name|am2
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Exception was expected!!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidContainerReleaseException
name|e
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Cannot release container : "
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|cId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" not belonging to this application attempt : "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|attempt2
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1200000
argument_list|)
DECL|method|testProgressFilter ()
specifier|public
name|void
name|testProgressFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Register node1
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
name|DEFAULT_HOST
operator|+
literal|":"
operator|+
name|DEFAULT_PORT
argument_list|,
literal|6
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// Submit an application
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|2048
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt1
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am1
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|AllocateRequestPBImpl
name|allocateRequest
init|=
operator|new
name|AllocateRequestPBImpl
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|release
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|allocateRequest
operator|.
name|setReleaseList
argument_list|(
name|release
argument_list|)
expr_stmt|;
name|allocateRequest
operator|.
name|setAskList
argument_list|(
name|ask
argument_list|)
expr_stmt|;
name|allocateRequest
operator|.
name|setProgress
argument_list|(
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
expr_stmt|;
while|while
condition|(
name|attempt1
operator|.
name|getProgress
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for allocate event to be handled ..."
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|allocateRequest
operator|.
name|setProgress
argument_list|(
name|Float
operator|.
name|NaN
argument_list|)
expr_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
expr_stmt|;
while|while
condition|(
name|attempt1
operator|.
name|getProgress
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for allocate event to be handled ..."
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|allocateRequest
operator|.
name|setProgress
argument_list|(
operator|(
name|float
operator|)
literal|9
argument_list|)
expr_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
expr_stmt|;
while|while
condition|(
name|attempt1
operator|.
name|getProgress
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for allocate event to be handled ..."
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|allocateRequest
operator|.
name|setProgress
argument_list|(
name|Float
operator|.
name|NEGATIVE_INFINITY
argument_list|)
expr_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
expr_stmt|;
while|while
condition|(
name|attempt1
operator|.
name|getProgress
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for allocate event to be handled ..."
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|allocateRequest
operator|.
name|setProgress
argument_list|(
operator|(
name|float
operator|)
literal|0.5
argument_list|)
expr_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
expr_stmt|;
while|while
condition|(
name|attempt1
operator|.
name|getProgress
argument_list|()
operator|!=
literal|0.5
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for allocate event to be handled ..."
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|allocateRequest
operator|.
name|setProgress
argument_list|(
operator|(
name|float
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
expr_stmt|;
while|while
condition|(
name|attempt1
operator|.
name|getProgress
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for allocate event to be handled ..."
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1200000
argument_list|)
DECL|method|testFinishApplicationMasterBeforeRegistering ()
specifier|public
name|void
name|testFinishApplicationMasterBeforeRegistering
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Register node1
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
name|DEFAULT_HOST
operator|+
literal|":"
operator|+
name|DEFAULT_PORT
argument_list|,
literal|6
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// Submit an application
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|2048
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|FinishApplicationMasterRequest
name|req
init|=
name|FinishApplicationMasterRequest
operator|.
name|newInstance
argument_list|(
name|FinalApplicationStatus
operator|.
name|FAILED
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
try|try
block|{
name|am1
operator|.
name|unregisterAppAttempt
argument_list|(
name|req
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"ApplicationMasterNotRegisteredException should be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ApplicationMasterNotRegisteredException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Application Master is trying to unregister before registering for:"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"ApplicationMasterNotRegisteredException should be thrown"
argument_list|)
expr_stmt|;
block|}
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|am1
operator|.
name|unregisterAppAttempt
argument_list|(
name|req
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHING
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1200000
argument_list|)
DECL|method|testRepeatedFinishApplicationMaster ()
specifier|public
name|void
name|testRepeatedFinishApplicationMaster
parameter_list|()
throws|throws
name|Exception
block|{
name|CountingDispatcher
name|dispatcher
init|=
operator|new
name|CountingDispatcher
argument_list|()
decl_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Dispatcher
name|createDispatcher
parameter_list|()
block|{
return|return
name|dispatcher
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Register node1
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
name|DEFAULT_HOST
operator|+
literal|":"
operator|+
name|DEFAULT_PORT
argument_list|,
literal|6
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// Submit an application
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|2048
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|FinishApplicationMasterRequest
name|req
init|=
name|FinishApplicationMasterRequest
operator|.
name|newInstance
argument_list|(
name|FinalApplicationStatus
operator|.
name|FAILED
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|am1
operator|.
name|unregisterAppAttempt
argument_list|(
name|req
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expecting only one event"
argument_list|,
literal|1
argument_list|,
name|dispatcher
operator|.
name|getEventCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|CountingDispatcher
specifier|static
class|class
name|CountingDispatcher
extends|extends
name|DrainDispatcher
block|{
DECL|field|eventreceived
specifier|private
name|int
name|eventreceived
init|=
literal|0
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Override
DECL|method|dispatch (Event event)
specifier|protected
name|void
name|dispatch
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|RMAppAttemptEventType
operator|.
name|UNREGISTERED
condition|)
block|{
name|eventreceived
operator|++
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|dispatch
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getEventCount ()
specifier|public
name|int
name|getEventCount
parameter_list|()
block|{
return|return
name|eventreceived
return|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|3000000
argument_list|)
DECL|method|testResourceTypes ()
specifier|public
name|void
name|testResourceTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|HashMap
argument_list|<
name|YarnConfiguration
argument_list|,
name|EnumSet
argument_list|<
name|YarnServiceProtos
operator|.
name|SchedulerResourceTypes
argument_list|>
argument_list|>
name|driver
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|CapacitySchedulerConfiguration
name|csconf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|csconf
operator|.
name|setResourceComparator
argument_list|(
name|DominantResourceCalculator
operator|.
name|class
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|testCapacityDRConf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|csconf
argument_list|)
decl_stmt|;
name|testCapacityDRConf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|testCapacityDefConf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|testCapacityDefConf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|testFairDefConf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|testFairDefConf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|FairScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|driver
operator|.
name|put
argument_list|(
name|conf
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|YarnServiceProtos
operator|.
name|SchedulerResourceTypes
operator|.
name|MEMORY
argument_list|)
argument_list|)
expr_stmt|;
name|driver
operator|.
name|put
argument_list|(
name|testCapacityDRConf
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|YarnServiceProtos
operator|.
name|SchedulerResourceTypes
operator|.
name|CPU
argument_list|,
name|YarnServiceProtos
operator|.
name|SchedulerResourceTypes
operator|.
name|MEMORY
argument_list|)
argument_list|)
expr_stmt|;
name|driver
operator|.
name|put
argument_list|(
name|testCapacityDefConf
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|YarnServiceProtos
operator|.
name|SchedulerResourceTypes
operator|.
name|MEMORY
argument_list|)
argument_list|)
expr_stmt|;
name|driver
operator|.
name|put
argument_list|(
name|testFairDefConf
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|YarnServiceProtos
operator|.
name|SchedulerResourceTypes
operator|.
name|MEMORY
argument_list|,
name|YarnServiceProtos
operator|.
name|SchedulerResourceTypes
operator|.
name|CPU
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|YarnConfiguration
argument_list|,
name|EnumSet
argument_list|<
name|YarnServiceProtos
operator|.
name|SchedulerResourceTypes
argument_list|>
argument_list|>
name|entry
range|:
name|driver
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|EnumSet
argument_list|<
name|YarnServiceProtos
operator|.
name|SchedulerResourceTypes
argument_list|>
name|expectedValue
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
name|DEFAULT_HOST
operator|+
literal|":"
operator|+
name|DEFAULT_PORT
argument_list|,
literal|6
operator|*
name|GB
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|2048
argument_list|)
decl_stmt|;
comment|//Wait to make sure the attempt has the right state
comment|//TODO explore a better way than sleeping for a while (YARN-4929)
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt1
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am1
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|RegisterApplicationMasterResponse
name|resp
init|=
name|am1
operator|.
name|registerAppAttempt
argument_list|()
decl_stmt|;
name|EnumSet
argument_list|<
name|YarnServiceProtos
operator|.
name|SchedulerResourceTypes
argument_list|>
name|types
init|=
name|resp
operator|.
name|getSchedulerResourceTypes
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"types = "
operator|+
name|types
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedValue
argument_list|,
name|types
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1200000
argument_list|)
DECL|method|testAllocateAfterUnregister ()
specifier|public
name|void
name|testAllocateAfterUnregister
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Register node1
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
name|DEFAULT_HOST
operator|+
literal|":"
operator|+
name|DEFAULT_PORT
argument_list|,
literal|6
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// Submit an application
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|2048
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt1
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am1
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
comment|// unregister app attempt
name|FinishApplicationMasterRequest
name|req
init|=
name|FinishApplicationMasterRequest
operator|.
name|newInstance
argument_list|(
name|FinalApplicationStatus
operator|.
name|KILLED
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|am1
operator|.
name|unregisterAppAttempt
argument_list|(
name|req
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// request container after unregister
name|am1
operator|.
name|addRequests
argument_list|(
operator|new
name|String
index|[]
block|{
name|DEFAULT_HOST
block|}
argument_list|,
name|GB
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|AllocateResponse
name|alloc1Response
init|=
name|am1
operator|.
name|schedule
argument_list|()
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|alloc1Response
operator|=
name|am1
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|alloc1Response
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testUpdateTrackingUrl ()
specifier|public
name|void
name|testUpdateTrackingUrl
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Register node1
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
name|DEFAULT_HOST
operator|+
literal|":"
operator|+
name|DEFAULT_PORT
argument_list|,
literal|6
operator|*
name|GB
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|2048
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt1
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am1
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"N/A"
argument_list|,
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getOriginalTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|AllocateRequestPBImpl
name|allocateRequest
init|=
operator|new
name|AllocateRequestPBImpl
argument_list|()
decl_stmt|;
name|String
name|newTrackingUrl
init|=
literal|"hadoop.apache.org"
decl_stmt|;
name|allocateRequest
operator|.
name|setTrackingUrl
argument_list|(
name|newTrackingUrl
argument_list|)
expr_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
expr_stmt|;
comment|// wait until RMAppAttemptEventType.STATUS_UPDATE is handled
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newTrackingUrl
argument_list|,
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getOriginalTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
comment|// Send it again
name|am1
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newTrackingUrl
argument_list|,
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getOriginalTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testValidateRequestCapacityAgainstMinMaxAllocation ()
specifier|public
name|void
name|testValidateRequestCapacityAgainstMinMaxAllocation
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|riMap
init|=
name|initializeMandatoryResources
argument_list|()
decl_stmt|;
name|ResourceUtils
operator|.
name|initializeResourcesFromResourceInformationMap
argument_list|(
name|riMap
argument_list|)
expr_stmt|;
specifier|final
name|YarnConfiguration
name|yarnConf
init|=
name|createYarnConfig
argument_list|()
decl_stmt|;
comment|// Don't reset resource types since we have already configured resource
comment|// types
name|yarnConf
operator|.
name|setBoolean
argument_list|(
name|TestResourceProfiles
operator|.
name|TEST_CONF_RESET_RESOURCE_TYPES
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|yarnConf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_RESOURCE_PROFILES_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|yarnConf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"199.99.99.1:"
operator|+
name|DEFAULT_PORT
argument_list|,
name|TestUtils
operator|.
name|createResource
argument_list|(
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
name|getDefaultQueueName
argument_list|()
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// Now request resource, memory> allowed
name|boolean
name|exception
init|=
literal|false
decl_stmt|;
try|try
block|{
name|am1
operator|.
name|allocate
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|ResourceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|capability
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|9
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|numContainers
argument_list|(
literal|1
argument_list|)
operator|.
name|resourceName
argument_list|(
literal|"*"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{
name|exception
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|false
expr_stmt|;
try|try
block|{
comment|// Now request resource, vcores> allowed
name|am1
operator|.
name|allocate
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|ResourceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|capability
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|8
operator|*
name|GB
argument_list|,
literal|18
argument_list|)
argument_list|)
operator|.
name|numContainers
argument_list|(
literal|1
argument_list|)
operator|.
name|resourceName
argument_list|(
literal|"*"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{
name|exception
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testRequestCapacityMinMaxAllocationForResourceTypes ()
specifier|public
name|void
name|testRequestCapacityMinMaxAllocationForResourceTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|riMap
init|=
name|initializeMandatoryResources
argument_list|()
decl_stmt|;
name|ResourceInformation
name|res1
init|=
name|ResourceInformation
operator|.
name|newInstance
argument_list|(
name|CUSTOM_RES
argument_list|,
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getUnits
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|riMap
operator|.
name|put
argument_list|(
name|CUSTOM_RES
argument_list|,
name|res1
argument_list|)
expr_stmt|;
name|ResourceUtils
operator|.
name|initializeResourcesFromResourceInformationMap
argument_list|(
name|riMap
argument_list|)
expr_stmt|;
specifier|final
name|YarnConfiguration
name|yarnConf
init|=
name|createYarnConfig
argument_list|()
decl_stmt|;
comment|// Don't reset resource types since we have already configured resource
comment|// types
name|yarnConf
operator|.
name|setBoolean
argument_list|(
name|TestResourceProfiles
operator|.
name|TEST_CONF_RESET_RESOURCE_TYPES
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|yarnConf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_RESOURCE_PROFILES_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|yarnConf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"199.99.99.1:"
operator|+
name|DEFAULT_PORT
argument_list|,
name|TestUtils
operator|.
name|createResource
argument_list|(
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|CUSTOM_RES
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
name|getDefaultQueueName
argument_list|()
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|,
name|getResourceUsageForQueue
argument_list|(
name|rm
argument_list|,
name|getDefaultQueueName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Request memory> allowed
try|try
block|{
name|requestResources
argument_list|(
name|am1
argument_list|,
literal|9
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should throw InvalidResourceRequestException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|ignored
parameter_list|)
block|{}
try|try
block|{
comment|// Request vcores> allowed
name|requestResources
argument_list|(
name|am1
argument_list|,
name|GB
argument_list|,
literal|18
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should throw InvalidResourceRequestException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|ignored
parameter_list|)
block|{}
try|try
block|{
comment|// Request custom resource 'res_1'> allowed
name|requestResources
argument_list|(
name|am1
argument_list|,
name|GB
argument_list|,
literal|2
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|CUSTOM_RES
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should throw InvalidResourceRequestException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|ignored
parameter_list|)
block|{}
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

