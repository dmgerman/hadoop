begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.blacklist
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|blacklist
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|TestBlacklistManager
specifier|public
class|class
name|TestBlacklistManager
block|{
annotation|@
name|Test
DECL|method|testSimpleBlacklistBelowFailureThreshold ()
specifier|public
name|void
name|testSimpleBlacklistBelowFailureThreshold
parameter_list|()
block|{
specifier|final
name|int
name|numberOfNodeManagerHosts
init|=
literal|3
decl_stmt|;
specifier|final
name|double
name|blacklistDisableFailureThreshold
init|=
literal|0.8
decl_stmt|;
name|BlacklistManager
name|manager
init|=
operator|new
name|SimpleBlacklistManager
argument_list|(
name|numberOfNodeManagerHosts
argument_list|,
name|blacklistDisableFailureThreshold
argument_list|)
decl_stmt|;
name|String
name|anyNode
init|=
literal|"foo"
decl_stmt|;
name|String
name|anyNode2
init|=
literal|"bar"
decl_stmt|;
name|manager
operator|.
name|addNode
argument_list|(
name|anyNode
argument_list|)
expr_stmt|;
name|manager
operator|.
name|addNode
argument_list|(
name|anyNode2
argument_list|)
expr_stmt|;
name|BlacklistUpdates
name|blacklist
init|=
name|manager
operator|.
name|getBlacklistUpdates
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
init|=
name|blacklist
operator|.
name|getAdditions
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|blacklistAdditions
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|blacklistRemovals
init|=
name|blacklist
operator|.
name|getRemovals
argument_list|()
decl_stmt|;
name|String
index|[]
name|expectedBlacklistAdditions
init|=
operator|new
name|String
index|[]
block|{
name|anyNode2
block|,
name|anyNode
block|}
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
literal|"Blacklist additions was not as expected"
argument_list|,
name|expectedBlacklistAdditions
argument_list|,
name|blacklistAdditions
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Blacklist removals should be empty but was "
operator|+
name|blacklistRemovals
argument_list|,
name|blacklistRemovals
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleBlacklistAboveFailureThreshold ()
specifier|public
name|void
name|testSimpleBlacklistAboveFailureThreshold
parameter_list|()
block|{
comment|// Create a threshold of 0.5 * 3 i.e at 1.5 node failures.
name|BlacklistManager
name|manager
init|=
operator|new
name|SimpleBlacklistManager
argument_list|(
literal|3
argument_list|,
literal|0.5
argument_list|)
decl_stmt|;
name|String
name|anyNode
init|=
literal|"foo"
decl_stmt|;
name|String
name|anyNode2
init|=
literal|"bar"
decl_stmt|;
name|manager
operator|.
name|addNode
argument_list|(
name|anyNode
argument_list|)
expr_stmt|;
name|BlacklistUpdates
name|blacklist
init|=
name|manager
operator|.
name|getBlacklistUpdates
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
init|=
name|blacklist
operator|.
name|getAdditions
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|blacklistAdditions
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|blacklistRemovals
init|=
name|blacklist
operator|.
name|getRemovals
argument_list|()
decl_stmt|;
name|String
index|[]
name|expectedBlacklistAdditions
init|=
operator|new
name|String
index|[]
block|{
name|anyNode
block|}
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
literal|"Blacklist additions was not as expected"
argument_list|,
name|expectedBlacklistAdditions
argument_list|,
name|blacklistAdditions
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Blacklist removals should be empty but was "
operator|+
name|blacklistRemovals
argument_list|,
name|blacklistRemovals
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|addNode
argument_list|(
name|anyNode2
argument_list|)
expr_stmt|;
name|blacklist
operator|=
name|manager
operator|.
name|getBlacklistUpdates
argument_list|()
expr_stmt|;
name|blacklistAdditions
operator|=
name|blacklist
operator|.
name|getAdditions
argument_list|()
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|blacklistAdditions
argument_list|)
expr_stmt|;
name|blacklistRemovals
operator|=
name|blacklist
operator|.
name|getRemovals
argument_list|()
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|blacklistRemovals
argument_list|)
expr_stmt|;
name|String
index|[]
name|expectedBlacklistRemovals
init|=
operator|new
name|String
index|[]
block|{
name|anyNode2
block|,
name|anyNode
block|}
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Blacklist additions should be empty but was "
operator|+
name|blacklistAdditions
argument_list|,
name|blacklistAdditions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
literal|"Blacklist removals was not as expected"
argument_list|,
name|expectedBlacklistRemovals
argument_list|,
name|blacklistRemovals
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDisabledBlacklist ()
specifier|public
name|void
name|testDisabledBlacklist
parameter_list|()
block|{
name|BlacklistManager
name|disabled
init|=
operator|new
name|DisabledBlacklistManager
argument_list|()
decl_stmt|;
name|String
name|anyNode
init|=
literal|"foo"
decl_stmt|;
name|disabled
operator|.
name|addNode
argument_list|(
name|anyNode
argument_list|)
expr_stmt|;
name|BlacklistUpdates
name|blacklist
init|=
name|disabled
operator|.
name|getBlacklistUpdates
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
init|=
name|blacklist
operator|.
name|getAdditions
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|blacklistRemovals
init|=
name|blacklist
operator|.
name|getRemovals
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Blacklist additions should be empty but was "
operator|+
name|blacklistAdditions
argument_list|,
name|blacklistAdditions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Blacklist removals should be empty but was "
operator|+
name|blacklistRemovals
argument_list|,
name|blacklistRemovals
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

