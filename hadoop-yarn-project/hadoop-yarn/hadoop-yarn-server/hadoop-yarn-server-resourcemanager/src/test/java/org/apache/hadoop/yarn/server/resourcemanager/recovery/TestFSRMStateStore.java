begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.recovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|records
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|VersionPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|ApplicationStateData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestFSRMStateStore
specifier|public
class|class
name|TestFSRMStateStore
extends|extends
name|RMStateStoreTestBase
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestFSRMStateStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|fsTester
specifier|private
name|TestFSRMStateStoreTester
name|fsTester
decl_stmt|;
DECL|class|TestFSRMStateStoreTester
class|class
name|TestFSRMStateStoreTester
implements|implements
name|RMStateStoreHelper
block|{
DECL|field|workingDirPathURI
name|Path
name|workingDirPathURI
decl_stmt|;
DECL|field|store
name|TestFileSystemRMStore
name|store
decl_stmt|;
DECL|field|cluster
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|adminCheckEnable
name|boolean
name|adminCheckEnable
decl_stmt|;
DECL|class|TestFileSystemRMStore
class|class
name|TestFileSystemRMStore
extends|extends
name|FileSystemRMStateStore
block|{
DECL|method|TestFileSystemRMStore (Configuration conf)
name|TestFileSystemRMStore
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|workingDirPathURI
operator|.
name|equals
argument_list|(
name|fsWorkingPath
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|disableExitOnDispatchException
argument_list|()
expr_stmt|;
name|start
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
DECL|method|getVersionNode ()
specifier|public
name|Path
name|getVersionNode
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|workingDirPathURI
argument_list|,
name|ROOT_DIR_NAME
argument_list|)
argument_list|,
name|VERSION_NODE
argument_list|)
return|;
block|}
DECL|method|getCurrentVersion ()
specifier|public
name|Version
name|getCurrentVersion
parameter_list|()
block|{
return|return
name|CURRENT_VERSION_INFO
return|;
block|}
DECL|method|getAppDir (String appId)
specifier|public
name|Path
name|getAppDir
parameter_list|(
name|String
name|appId
parameter_list|)
block|{
name|Path
name|rootDir
init|=
operator|new
name|Path
argument_list|(
name|workingDirPathURI
argument_list|,
name|ROOT_DIR_NAME
argument_list|)
decl_stmt|;
name|Path
name|appRootDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|RM_APP_ROOT
argument_list|)
decl_stmt|;
name|Path
name|appDir
init|=
operator|new
name|Path
argument_list|(
name|appRootDir
argument_list|,
name|appId
argument_list|)
decl_stmt|;
return|return
name|appDir
return|;
block|}
DECL|method|getAttemptDir (String appId, String attemptId)
specifier|public
name|Path
name|getAttemptDir
parameter_list|(
name|String
name|appId
parameter_list|,
name|String
name|attemptId
parameter_list|)
block|{
name|Path
name|appDir
init|=
name|getAppDir
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|Path
name|attemptDir
init|=
operator|new
name|Path
argument_list|(
name|appDir
argument_list|,
name|attemptId
argument_list|)
decl_stmt|;
return|return
name|attemptDir
return|;
block|}
block|}
DECL|method|TestFSRMStateStoreTester (MiniDFSCluster cluster, boolean adminCheckEnable)
specifier|public
name|TestFSRMStateStoreTester
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|boolean
name|adminCheckEnable
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|workingDirPath
init|=
operator|new
name|Path
argument_list|(
literal|"/yarn/Test"
argument_list|)
decl_stmt|;
name|this
operator|.
name|adminCheckEnable
operator|=
name|adminCheckEnable
expr_stmt|;
name|this
operator|.
name|cluster
operator|=
name|cluster
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|workingDirPath
argument_list|)
expr_stmt|;
name|Path
name|clusterURI
init|=
operator|new
name|Path
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|()
argument_list|)
decl_stmt|;
name|workingDirPathURI
operator|=
operator|new
name|Path
argument_list|(
name|clusterURI
argument_list|,
name|workingDirPath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRMStateStore ()
specifier|public
name|RMStateStore
name|getRMStateStore
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|FS_RM_STATE_STORE_URI
argument_list|,
name|workingDirPathURI
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|FS_RM_STATE_STORE_NUM_RETRIES
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|FS_RM_STATE_STORE_RETRY_INTERVAL_MS
argument_list|,
literal|900L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_EPOCH
argument_list|,
name|epoch
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_EPOCH_RANGE
argument_list|,
name|getEpochRange
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|adminCheckEnable
condition|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_INTERMEDIATE_DATA_ENCRYPTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|store
operator|=
operator|new
name|TestFileSystemRMStore
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|store
operator|.
name|getNumRetries
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|store
operator|.
name|getRetryInterval
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|900L
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|store
operator|.
name|fs
operator|.
name|getConf
argument_list|()
operator|==
name|store
operator|.
name|fsConf
argument_list|)
expr_stmt|;
name|FileSystem
name|previousFs
init|=
name|store
operator|.
name|fs
decl_stmt|;
name|store
operator|.
name|startInternal
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|store
operator|.
name|fs
operator|!=
name|previousFs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|store
operator|.
name|fs
operator|.
name|getConf
argument_list|()
operator|==
name|store
operator|.
name|fsConf
argument_list|)
expr_stmt|;
return|return
name|store
return|;
block|}
annotation|@
name|Override
DECL|method|isFinalStateValid ()
specifier|public
name|boolean
name|isFinalStateValid
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|workingDirPathURI
argument_list|)
decl_stmt|;
return|return
name|files
operator|.
name|length
operator|==
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|writeVersion (Version version)
specifier|public
name|void
name|writeVersion
parameter_list|(
name|Version
name|version
parameter_list|)
throws|throws
name|Exception
block|{
name|store
operator|.
name|updateFile
argument_list|(
name|store
operator|.
name|getVersionNode
argument_list|()
argument_list|,
operator|(
operator|(
name|VersionPBImpl
operator|)
name|version
operator|)
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCurrentVersion ()
specifier|public
name|Version
name|getCurrentVersion
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|store
operator|.
name|getCurrentVersion
argument_list|()
return|;
block|}
DECL|method|appExists (RMApp app)
specifier|public
name|boolean
name|appExists
parameter_list|(
name|RMApp
name|app
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|nodePath
init|=
name|store
operator|.
name|getAppDir
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|fs
operator|.
name|exists
argument_list|(
name|nodePath
argument_list|)
return|;
block|}
DECL|method|attemptExists (RMAppAttempt attempt)
specifier|public
name|boolean
name|attemptExists
parameter_list|(
name|RMAppAttempt
name|attempt
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|Path
name|nodePath
init|=
name|store
operator|.
name|getAttemptDir
argument_list|(
name|attemptId
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|attemptId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|fs
operator|.
name|exists
argument_list|(
name|nodePath
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testFSRMStateStore ()
specifier|public
name|void
name|testFSRMStateStore
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|fsTester
operator|=
operator|new
name|TestFSRMStateStoreTester
argument_list|(
name|cluster
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// If the state store is FileSystemRMStateStore then add corrupted entry.
comment|// It should discard the entry and remove it from file system.
name|FSDataOutputStream
name|fsOut
init|=
literal|null
decl_stmt|;
name|FileSystemRMStateStore
name|fileSystemRMStateStore
init|=
operator|(
name|FileSystemRMStateStore
operator|)
name|fsTester
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|String
name|appAttemptIdStr3
init|=
literal|"appattempt_1352994193343_0001_000003"
decl_stmt|;
name|ApplicationAttemptId
name|attemptId3
init|=
name|ApplicationAttemptId
operator|.
name|fromString
argument_list|(
name|appAttemptIdStr3
argument_list|)
decl_stmt|;
name|Path
name|appDir
init|=
name|fsTester
operator|.
name|store
operator|.
name|getAppDir
argument_list|(
name|attemptId3
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|tempAppAttemptFile
init|=
operator|new
name|Path
argument_list|(
name|appDir
argument_list|,
name|attemptId3
operator|.
name|toString
argument_list|()
operator|+
literal|".tmp"
argument_list|)
decl_stmt|;
name|fsOut
operator|=
name|fileSystemRMStateStore
operator|.
name|fs
operator|.
name|create
argument_list|(
name|tempAppAttemptFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fsOut
operator|.
name|write
argument_list|(
literal|"Some random data "
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|fsOut
operator|.
name|close
argument_list|()
expr_stmt|;
name|testRMAppStateStore
argument_list|(
name|fsTester
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fsTester
operator|.
name|workingDirPathURI
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|exists
argument_list|(
name|tempAppAttemptFile
argument_list|)
argument_list|)
expr_stmt|;
name|testRMDTSecretManagerStateStore
argument_list|(
name|fsTester
argument_list|)
expr_stmt|;
name|testCheckVersion
argument_list|(
name|fsTester
argument_list|)
expr_stmt|;
name|testEpoch
argument_list|(
name|fsTester
argument_list|)
expr_stmt|;
name|testAppDeletion
argument_list|(
name|fsTester
argument_list|)
expr_stmt|;
name|testDeleteStore
argument_list|(
name|fsTester
argument_list|)
expr_stmt|;
name|testRemoveApplication
argument_list|(
name|fsTester
argument_list|)
expr_stmt|;
name|testRemoveAttempt
argument_list|(
name|fsTester
argument_list|)
expr_stmt|;
name|testAMRMTokenSecretManagerStateStore
argument_list|(
name|fsTester
argument_list|)
expr_stmt|;
name|testReservationStateStore
argument_list|(
name|fsTester
argument_list|)
expr_stmt|;
name|testProxyCA
argument_list|(
name|fsTester
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testHDFSRMStateStore ()
specifier|public
name|void
name|testHDFSRMStateStore
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|yarnAdmin
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"yarn"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"admin"
block|}
argument_list|)
decl_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/yarn"
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|valueOf
argument_list|(
literal|"-rwxrwxrwx"
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|setOwner
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/yarn"
argument_list|)
argument_list|,
literal|"yarn"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
specifier|final
name|UserGroupInformation
name|hdfsAdmin
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
specifier|final
name|StoreStateVerifier
name|verifier
init|=
operator|new
name|StoreStateVerifier
argument_list|()
block|{
annotation|@
name|Override
name|void
name|afterStoreApp
parameter_list|(
specifier|final
name|RMStateStore
name|store
parameter_list|,
specifier|final
name|ApplicationId
name|appId
parameter_list|)
block|{
try|try
block|{
comment|// Wait for things to settle
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|hdfsAdmin
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyFilesUnreadablebyHDFS
argument_list|(
name|cluster
argument_list|,
operator|(
operator|(
name|FileSystemRMStateStore
operator|)
name|store
operator|)
operator|.
name|getAppDir
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|afterStoreAppAttempt
parameter_list|(
specifier|final
name|RMStateStore
name|store
parameter_list|,
specifier|final
name|ApplicationAttemptId
name|appAttId
parameter_list|)
block|{
try|try
block|{
comment|// Wait for things to settle
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|hdfsAdmin
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyFilesUnreadablebyHDFS
argument_list|(
name|cluster
argument_list|,
operator|(
operator|(
name|FileSystemRMStateStore
operator|)
name|store
operator|)
operator|.
name|getAppAttemptDir
argument_list|(
name|appAttId
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
try|try
block|{
name|yarnAdmin
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|fsTester
operator|=
operator|new
name|TestFSRMStateStoreTester
argument_list|(
name|cluster
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testRMAppStateStore
argument_list|(
name|fsTester
argument_list|,
name|verifier
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|verifyFilesUnreadablebyHDFS (MiniDFSCluster cluster, Path root)
specifier|private
name|void
name|verifyFilesUnreadablebyHDFS
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|Path
name|root
parameter_list|)
throws|throws
name|Exception
block|{
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Queue
argument_list|<
name|Path
argument_list|>
name|paths
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|root
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|paths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Path
name|p
init|=
name|paths
operator|.
name|poll
argument_list|()
decl_stmt|;
name|FileStatus
name|stat
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|stat
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"\n\n ##Testing path ["
operator|+
name|p
operator|+
literal|"]\n\n"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Super user should not be able to read ["
operator|+
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|+
literal|"] ["
operator|+
name|p
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"superuser is not allowed to perform this operation"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should get an AccessControlException here"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|stat
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|FileStatus
index|[]
name|ls
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|f
range|:
name|ls
control|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|f
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testCheckMajorVersionChange ()
specifier|public
name|void
name|testCheckMajorVersionChange
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|fsTester
operator|=
operator|new
name|TestFSRMStateStoreTester
argument_list|(
name|cluster
argument_list|,
literal|false
argument_list|)
block|{
name|Version
name|VERSION_INFO
init|=
name|Version
operator|.
name|newInstance
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Version
name|getCurrentVersion
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|VERSION_INFO
return|;
block|}
annotation|@
name|Override
specifier|public
name|RMStateStore
name|getRMStateStore
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|FS_RM_STATE_STORE_URI
argument_list|,
name|workingDirPathURI
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|=
operator|new
name|TestFileSystemRMStore
argument_list|(
name|conf
argument_list|)
block|{
name|Version
name|storedVersion
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Version
name|getCurrentVersion
parameter_list|()
block|{
return|return
name|VERSION_INFO
return|;
block|}
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|Version
name|loadVersion
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|storedVersion
return|;
block|}
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|void
name|storeVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|storedVersion
operator|=
name|VERSION_INFO
expr_stmt|;
block|}
block|}
expr_stmt|;
return|return
name|store
return|;
block|}
block|}
expr_stmt|;
comment|// default version
name|RMStateStore
name|store
init|=
name|fsTester
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|Version
name|defaultVersion
init|=
name|fsTester
operator|.
name|getCurrentVersion
argument_list|()
decl_stmt|;
name|store
operator|.
name|checkVersion
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|defaultVersion
argument_list|,
name|store
operator|.
name|loadVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|modifyAppState ()
specifier|protected
name|void
name|modifyAppState
parameter_list|()
throws|throws
name|Exception
block|{
comment|// imitate appAttemptFile1 is still .new, but old one is deleted
name|String
name|appAttemptIdStr1
init|=
literal|"appattempt_1352994193343_0001_000001"
decl_stmt|;
name|ApplicationAttemptId
name|attemptId1
init|=
name|ApplicationAttemptId
operator|.
name|fromString
argument_list|(
name|appAttemptIdStr1
argument_list|)
decl_stmt|;
name|Path
name|appDir
init|=
name|fsTester
operator|.
name|store
operator|.
name|getAppDir
argument_list|(
name|attemptId1
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|appAttemptFile1
init|=
operator|new
name|Path
argument_list|(
name|appDir
argument_list|,
name|attemptId1
operator|.
name|toString
argument_list|()
operator|+
literal|".new"
argument_list|)
decl_stmt|;
name|FileSystemRMStateStore
name|fileSystemRMStateStore
init|=
operator|(
name|FileSystemRMStateStore
operator|)
name|fsTester
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|fileSystemRMStateStore
operator|.
name|renameFile
argument_list|(
name|appAttemptFile1
argument_list|,
operator|new
name|Path
argument_list|(
name|appAttemptFile1
operator|.
name|getParent
argument_list|()
argument_list|,
name|appAttemptFile1
operator|.
name|getName
argument_list|()
operator|+
literal|".new"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|modifyRMDelegationTokenState ()
specifier|protected
name|void
name|modifyRMDelegationTokenState
parameter_list|()
throws|throws
name|Exception
block|{
comment|// imitate dt file is still .new, but old one is deleted
name|Path
name|nodeCreatePath
init|=
name|fsTester
operator|.
name|store
operator|.
name|getNodePath
argument_list|(
name|fsTester
operator|.
name|store
operator|.
name|rmDTSecretManagerRoot
argument_list|,
name|FileSystemRMStateStore
operator|.
name|DELEGATION_TOKEN_PREFIX
operator|+
literal|0
argument_list|)
decl_stmt|;
name|FileSystemRMStateStore
name|fileSystemRMStateStore
init|=
operator|(
name|FileSystemRMStateStore
operator|)
name|fsTester
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|fileSystemRMStateStore
operator|.
name|renameFile
argument_list|(
name|nodeCreatePath
argument_list|,
operator|new
name|Path
argument_list|(
name|nodeCreatePath
operator|.
name|getParent
argument_list|()
argument_list|,
name|nodeCreatePath
operator|.
name|getName
argument_list|()
operator|+
literal|".new"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testFSRMStateStoreClientRetry ()
specifier|public
name|void
name|testFSRMStateStoreClientRetry
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
try|try
block|{
name|TestFSRMStateStoreTester
name|fsTester
init|=
operator|new
name|TestFSRMStateStoreTester
argument_list|(
name|cluster
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|RMStateStore
name|store
init|=
name|fsTester
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|store
operator|.
name|setRMDispatcher
argument_list|(
operator|new
name|TestDispatcher
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|AtomicBoolean
name|assertionFailedInThread
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|shutdownNameNodes
argument_list|()
expr_stmt|;
name|Thread
name|clientThread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|store
operator|.
name|storeApplicationStateInternal
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|100L
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ApplicationStateData
operator|.
name|newInstance
argument_list|(
literal|111
argument_list|,
literal|111
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|,
literal|"diagnostics"
argument_list|,
literal|222
argument_list|,
literal|333
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertionFailedInThread
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|clientThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|()
expr_stmt|;
name|clientThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|assertionFailedInThread
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

