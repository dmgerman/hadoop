begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|argThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doNothing
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NMToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AbstractEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|QueueMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|NMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatcher
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|class|TestRM
specifier|public
class|class
name|TestRM
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestRM
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Milliseconds to sleep for when waiting for something to happen
DECL|field|WAIT_SLEEP_MS
specifier|private
specifier|final
specifier|static
name|int
name|WAIT_SLEEP_MS
init|=
literal|100
decl_stmt|;
annotation|@
name|Test
DECL|method|testGetNewAppId ()
specifier|public
name|void
name|testGetNewAppId
parameter_list|()
throws|throws
name|Exception
block|{
name|Logger
name|rootLogger
init|=
name|LogManager
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|rootLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|()
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|GetNewApplicationResponse
name|resp
init|=
name|rm
operator|.
name|getNewAppId
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|resp
operator|.
name|getApplicationId
argument_list|()
operator|.
name|getId
argument_list|()
operator|!=
literal|0
operator|)
assert|;
assert|assert
operator|(
name|resp
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
operator|>
literal|0
operator|)
assert|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAppWithNoContainers ()
specifier|public
name|void
name|testAppWithNoContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|Logger
name|rootLogger
init|=
name|LogManager
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|rootLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|()
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
comment|//kick the scheduling
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|am
operator|.
name|unregisterAppAttempt
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|am
operator|.
name|waitForState
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAppOnMultiNode ()
specifier|public
name|void
name|testAppOnMultiNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Logger
name|rootLogger
init|=
name|LogManager
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|rootLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.scheduler.capacity.node-locality-delay"
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:5678"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
comment|//kick the scheduling
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
comment|//request for containers
name|int
name|request
init|=
literal|13
decl_stmt|;
name|am
operator|.
name|allocate
argument_list|(
literal|"h1"
argument_list|,
literal|1000
argument_list|,
name|request
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|//kick the scheduler
name|List
argument_list|<
name|Container
argument_list|>
name|conts
init|=
name|am
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
decl_stmt|;
name|int
name|contReceived
init|=
name|conts
operator|.
name|size
argument_list|()
decl_stmt|;
while|while
condition|(
name|contReceived
operator|<
literal|3
condition|)
block|{
comment|//only 3 containers are available on node1
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conts
operator|.
name|addAll
argument_list|(
name|am
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|contReceived
operator|=
name|conts
operator|.
name|size
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got "
operator|+
name|contReceived
operator|+
literal|" containers. Waiting to get "
operator|+
literal|3
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|WAIT_SLEEP_MS
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|conts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//send node2 heartbeat
name|conts
operator|=
name|am
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
expr_stmt|;
name|contReceived
operator|=
name|conts
operator|.
name|size
argument_list|()
expr_stmt|;
while|while
condition|(
name|contReceived
operator|<
literal|10
condition|)
block|{
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conts
operator|.
name|addAll
argument_list|(
name|am
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|contReceived
operator|=
name|conts
operator|.
name|size
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got "
operator|+
name|contReceived
operator|+
literal|" containers. Waiting to get "
operator|+
literal|10
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|WAIT_SLEEP_MS
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|conts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|am
operator|.
name|unregisterAppAttempt
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|am
operator|.
name|waitForState
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|// Test even if AM container is allocated with containerId not equal to 1, the
comment|// following allocate requests from AM should be able to retrieve the
comment|// corresponding NM Token.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testNMTokenSentForNormalContainer ()
specifier|public
name|void
name|testNMTokenSentForNormalContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
name|RMAppAttempt
name|attempt
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
comment|// Call getNewContainerId to increase container Id so that the AM container
comment|// Id doesn't equal to one.
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
operator|.
name|getNewContainerId
argument_list|()
expr_stmt|;
comment|// kick the scheduling
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MockAM
name|am
init|=
name|MockRM
operator|.
name|launchAM
argument_list|(
name|app
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// am container Id not equal to 1.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|attempt
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|getId
argument_list|()
operator|!=
literal|1
argument_list|)
expr_stmt|;
comment|// NMSecretManager doesn't record the node on which the am is allocated.
name|Assert
operator|.
name|assertFalse
argument_list|(
name|rm
operator|.
name|getRMNMTokenSecretManager
argument_list|()
operator|.
name|isApplicationAttemptNMTokenPresent
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|am
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|int
name|NUM_CONTAINERS
init|=
literal|1
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|()
decl_stmt|;
comment|// nmTokens keeps track of all the nmTokens issued in the allocate call.
name|List
argument_list|<
name|NMToken
argument_list|>
name|expectedNMTokens
init|=
operator|new
name|ArrayList
argument_list|<
name|NMToken
argument_list|>
argument_list|()
decl_stmt|;
comment|// am1 allocate 1 container on nm1.
while|while
condition|(
literal|true
condition|)
block|{
name|AllocateResponse
name|response
init|=
name|am
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|2000
argument_list|,
name|NUM_CONTAINERS
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|containers
operator|.
name|addAll
argument_list|(
name|response
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|expectedNMTokens
operator|.
name|addAll
argument_list|(
name|response
operator|.
name|getNMTokens
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|containers
operator|.
name|size
argument_list|()
operator|==
name|NUM_CONTAINERS
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Waiting for container to be allocated."
argument_list|)
expr_stmt|;
block|}
name|NodeId
name|nodeId
init|=
name|expectedNMTokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
comment|// NMToken is sent for the allocated container.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|40000
argument_list|)
DECL|method|testNMToken ()
specifier|public
name|void
name|testNMToken
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|()
decl_stmt|;
try|try
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|NMTokenSecretManagerInRM
name|nmTokenSecretManager
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNMTokenSecretManager
argument_list|()
decl_stmt|;
comment|// submitting new application
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
comment|// start scheduling.
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Starting application attempt and launching
comment|// It should get registered with NMTokenSecretManager.
name|RMAppAttempt
name|attempt
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nmTokenSecretManager
operator|.
name|isApplicationAttemptRegistered
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// This will register application master.
name|am
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|ArrayList
argument_list|<
name|Container
argument_list|>
name|containersReceivedForNM1
init|=
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|releaseContainerList
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Token
argument_list|>
name|nmTokens
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Token
argument_list|>
argument_list|()
decl_stmt|;
comment|// initially requesting 2 containers.
name|AllocateResponse
name|response
init|=
name|am
operator|.
name|allocate
argument_list|(
literal|"h1"
argument_list|,
literal|1000
argument_list|,
literal|2
argument_list|,
name|releaseContainerList
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|allocateContainersAndValidateNMTokens
argument_list|(
name|am
argument_list|,
name|containersReceivedForNM1
argument_list|,
literal|2
argument_list|,
name|nmTokens
argument_list|,
name|nm1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nmTokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// requesting 2 more containers.
name|response
operator|=
name|am
operator|.
name|allocate
argument_list|(
literal|"h1"
argument_list|,
literal|1000
argument_list|,
literal|2
argument_list|,
name|releaseContainerList
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|allocateContainersAndValidateNMTokens
argument_list|(
name|am
argument_list|,
name|containersReceivedForNM1
argument_list|,
literal|4
argument_list|,
name|nmTokens
argument_list|,
name|nm1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nmTokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// We will be simulating NM restart so restarting newly added h2:1234
comment|// NM 2 now registers.
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Container
argument_list|>
name|containersReceivedForNM2
init|=
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|()
decl_stmt|;
name|response
operator|=
name|am
operator|.
name|allocate
argument_list|(
literal|"h2"
argument_list|,
literal|1000
argument_list|,
literal|2
argument_list|,
name|releaseContainerList
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|allocateContainersAndValidateNMTokens
argument_list|(
name|am
argument_list|,
name|containersReceivedForNM2
argument_list|,
literal|2
argument_list|,
name|nmTokens
argument_list|,
name|nm2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nmTokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Simulating NM-2 restart.
name|nm2
operator|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
comment|// Wait for reconnect to make it through the RM and create a new RMNode
name|Map
argument_list|<
name|NodeId
argument_list|,
name|RMNode
argument_list|>
name|nodes
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
decl_stmt|;
while|while
condition|(
name|nodes
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getLastNodeHeartBeatResponse
argument_list|()
operator|.
name|getResponseId
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|WAIT_SLEEP_MS
argument_list|)
expr_stmt|;
block|}
name|int
name|interval
init|=
literal|40
decl_stmt|;
comment|// Wait for nm Token to be cleared.
while|while
condition|(
name|nmTokenSecretManager
operator|.
name|isApplicationAttemptNMTokenPresent
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|&&
name|interval
operator|--
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"waiting for nmToken to be cleared for : "
operator|+
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|WAIT_SLEEP_MS
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nmTokenSecretManager
operator|.
name|isApplicationAttemptRegistered
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// removing NMToken for h2:1234
name|nmTokens
operator|.
name|remove
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nmTokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// We should again receive the NMToken.
name|response
operator|=
name|am
operator|.
name|allocate
argument_list|(
literal|"h2"
argument_list|,
literal|1000
argument_list|,
literal|2
argument_list|,
name|releaseContainerList
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|allocateContainersAndValidateNMTokens
argument_list|(
name|am
argument_list|,
name|containersReceivedForNM2
argument_list|,
literal|4
argument_list|,
name|nmTokens
argument_list|,
name|nm2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nmTokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now rolling over NMToken masterKey. it should resend the NMToken in
comment|// next allocate call.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nmTokenSecretManager
operator|.
name|isApplicationAttemptNMTokenPresent
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nmTokenSecretManager
operator|.
name|isApplicationAttemptNMTokenPresent
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nmTokenSecretManager
operator|.
name|rollMasterKey
argument_list|()
expr_stmt|;
name|nmTokenSecretManager
operator|.
name|activateNextMasterKey
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|nmTokenSecretManager
operator|.
name|isApplicationAttemptNMTokenPresent
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|nmTokenSecretManager
operator|.
name|isApplicationAttemptNMTokenPresent
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// It should not remove application attempt entry.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nmTokenSecretManager
operator|.
name|isApplicationAttemptRegistered
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nmTokens
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nmTokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// We should again receive the NMToken.
name|response
operator|=
name|am
operator|.
name|allocate
argument_list|(
literal|"h2"
argument_list|,
literal|1000
argument_list|,
literal|1
argument_list|,
name|releaseContainerList
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|allocateContainersAndValidateNMTokens
argument_list|(
name|am
argument_list|,
name|containersReceivedForNM2
argument_list|,
literal|5
argument_list|,
name|nmTokens
argument_list|,
name|nm2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nmTokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nmTokenSecretManager
operator|.
name|isApplicationAttemptNMTokenPresent
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// After AM is finished making sure that nmtoken entry for app
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nmTokenSecretManager
operator|.
name|isApplicationAttemptRegistered
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|am
operator|.
name|unregisterAppAttempt
argument_list|()
expr_stmt|;
comment|// marking all the containers as finished.
for|for
control|(
name|Container
name|container
range|:
name|containersReceivedForNM1
control|)
block|{
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|container
operator|.
name|getId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Container
name|container
range|:
name|containersReceivedForNM2
control|)
block|{
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|container
operator|.
name|getId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
block|}
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|am
operator|.
name|waitForState
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|nmTokenSecretManager
operator|.
name|isApplicationAttemptRegistered
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|allocateContainersAndValidateNMTokens (MockAM am, ArrayList<Container> containersReceived, int totalContainerRequested, HashMap<String, Token> nmTokens, MockNM nm)
specifier|protected
name|void
name|allocateContainersAndValidateNMTokens
parameter_list|(
name|MockAM
name|am
parameter_list|,
name|ArrayList
argument_list|<
name|Container
argument_list|>
name|containersReceived
parameter_list|,
name|int
name|totalContainerRequested
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Token
argument_list|>
name|nmTokens
parameter_list|,
name|MockNM
name|nm
parameter_list|)
throws|throws
name|Exception
throws|,
name|InterruptedException
block|{
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
name|releaseContainerList
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
name|AllocateResponse
name|response
decl_stmt|;
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
name|resourceRequest
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|containersReceived
operator|.
name|size
argument_list|()
operator|<
name|totalContainerRequested
condition|)
block|{
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"requesting containers.."
argument_list|)
expr_stmt|;
name|response
operator|=
name|am
operator|.
name|allocate
argument_list|(
name|resourceRequest
argument_list|,
name|releaseContainerList
argument_list|)
expr_stmt|;
name|containersReceived
operator|.
name|addAll
argument_list|(
name|response
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|response
operator|.
name|getNMTokens
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|NMToken
name|nmToken
range|:
name|response
operator|.
name|getNMTokens
argument_list|()
control|)
block|{
name|String
name|nodeId
init|=
name|nmToken
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|nmTokens
operator|.
name|containsKey
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Duplicate NMToken received for : "
operator|+
name|nodeId
argument_list|)
expr_stmt|;
block|}
name|nmTokens
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|nmToken
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Got "
operator|+
name|containersReceived
operator|.
name|size
argument_list|()
operator|+
literal|" containers. Waiting to get "
operator|+
name|totalContainerRequested
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|WAIT_SLEEP_MS
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testActivatingApplicationAfterAddingNM ()
specifier|public
name|void
name|testActivatingApplicationAfterAddingNM
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// start like normal because state is empty
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// app that gets launched
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
comment|// app that does not get launched
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
comment|// app1 and app2 should be scheduled, but because no resource is available,
comment|// they are not activated.
name|RMAppAttempt
name|attempt1
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|attemptId1
init|=
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|attemptId1
argument_list|,
name|RMAppAttemptState
operator|.
name|SCHEDULED
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt2
init|=
name|app2
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|attemptId2
init|=
name|attempt2
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|attemptId2
argument_list|,
name|RMAppAttemptState
operator|.
name|SCHEDULED
argument_list|)
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"h1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
operator|new
name|MockNM
argument_list|(
literal|"h2:5678"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm2
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|//kick the scheduling
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// app1 should be allocated now
name|rm1
operator|.
name|waitForState
argument_list|(
name|attemptId1
argument_list|,
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|attemptId2
argument_list|,
name|RMAppAttemptState
operator|.
name|SCHEDULED
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// app2 should be allocated now
name|rm1
operator|.
name|waitForState
argument_list|(
name|attemptId1
argument_list|,
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|attemptId2
argument_list|,
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|// This is to test AM Host and rpc port are invalidated after the am attempt
comment|// is killed or failed, so that client doesn't get the wrong information.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|80000
argument_list|)
DECL|method|testInvalidateAMHostPortWhenAMFailedOrKilled ()
specifier|public
name|void
name|testInvalidateAMHostPortWhenAMFailedOrKilled
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// a succeeded app
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|MockRM
operator|.
name|finishAMAndVerifyAppState
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|,
name|am1
argument_list|)
expr_stmt|;
comment|// a failed app
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|am2
operator|.
name|waitForState
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
comment|// a killed app
name|RMApp
name|app3
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am3
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app3
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|killApp
argument_list|(
name|app3
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|app3
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am3
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|GetApplicationsRequest
name|request1
init|=
name|GetApplicationsRequest
operator|.
name|newInstance
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
name|YarnApplicationState
operator|.
name|KILLED
argument_list|,
name|YarnApplicationState
operator|.
name|FAILED
argument_list|)
argument_list|)
decl_stmt|;
name|GetApplicationsResponse
name|response1
init|=
name|rm1
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getApplications
argument_list|(
name|request1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|appList1
init|=
name|response1
operator|.
name|getApplicationList
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|appList1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ApplicationReport
name|report
range|:
name|appList1
control|)
block|{
comment|// killed/failed apps host and rpc port are invalidated.
if|if
condition|(
name|report
operator|.
name|getApplicationId
argument_list|()
operator|.
name|equals
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|||
name|report
operator|.
name|getApplicationId
argument_list|()
operator|.
name|equals
argument_list|(
name|app3
operator|.
name|getApplicationId
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"N/A"
argument_list|,
name|report
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|report
operator|.
name|getRpcPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// succeeded app's host and rpc port is not invalidated
if|if
condition|(
name|report
operator|.
name|getApplicationId
argument_list|()
operator|.
name|equals
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|report
operator|.
name|getHost
argument_list|()
operator|.
name|equals
argument_list|(
literal|"N/A"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|report
operator|.
name|getRpcPort
argument_list|()
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testInvalidatedAMHostPortOnAMRestart ()
specifier|public
name|void
name|testInvalidatedAMHostPortOnAMRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// a failed app
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|am2
operator|.
name|waitForState
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
comment|// before new attempt is launched, the app report returns the invalid AM
comment|// host and port.
name|GetApplicationReportRequest
name|request1
init|=
name|GetApplicationReportRequest
operator|.
name|newInstance
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|ApplicationReport
name|report1
init|=
name|rm1
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getApplicationReport
argument_list|(
name|request1
argument_list|)
operator|.
name|getApplicationReport
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"N/A"
argument_list|,
name|report1
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|report1
operator|.
name|getRpcPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validate killing an application when it is at accepted state.    * @throws Exception exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testApplicationKillAtAcceptedState ()
specifier|public
name|void
name|testApplicationKillAtAcceptedState
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|Dispatcher
name|dispatcher
init|=
operator|new
name|AsyncDispatcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|EventHandler
name|getEventHandler
parameter_list|()
block|{
class|class
name|EventArgMatcher
extends|extends
name|ArgumentMatcher
argument_list|<
name|AbstractEvent
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|argument
parameter_list|)
block|{
if|if
condition|(
name|argument
operator|instanceof
name|RMAppAttemptEvent
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|RMAppAttemptEvent
operator|)
name|argument
operator|)
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
name|EventHandler
name|handler
init|=
name|spy
argument_list|(
name|super
operator|.
name|getEventHandler
argument_list|()
argument_list|)
decl_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|handler
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|EventArgMatcher
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|handler
return|;
block|}
block|}
decl_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Dispatcher
name|createDispatcher
parameter_list|()
block|{
return|return
name|dispatcher
return|;
block|}
block|}
decl_stmt|;
comment|// test metrics
name|QueueMetrics
name|metrics
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getRootQueueMetrics
argument_list|()
decl_stmt|;
name|int
name|appsKilled
init|=
name|metrics
operator|.
name|getAppsKilled
argument_list|()
decl_stmt|;
name|int
name|appsSubmitted
init|=
name|metrics
operator|.
name|getAppsSubmitted
argument_list|()
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// a failed app
name|RMApp
name|application
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am
init|=
name|MockRM
operator|.
name|launchAM
argument_list|(
name|application
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|am
operator|.
name|waitForState
argument_list|(
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
comment|// Now kill the application before new attempt is launched, the app report
comment|// returns the invalid AM host and port.
name|KillApplicationRequest
name|request
init|=
name|KillApplicationRequest
operator|.
name|newInstance
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|forceKillApplication
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// Specific test for YARN-1689 follows
comment|// Now let's say a race causes AM to register now. This should not crash RM.
name|am
operator|.
name|registerAppAttempt
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// We explicitly intercepted the kill-event to RMAppAttempt, so app should
comment|// still be in KILLING state.
name|rm
operator|.
name|waitForState
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLING
argument_list|)
expr_stmt|;
comment|// AM should now be in running
name|rm
operator|.
name|waitForState
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// Simulate that appAttempt is killed.
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_KILLED
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
comment|// test metrics
name|metrics
operator|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getRootQueueMetrics
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appsKilled
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getAppsKilled
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appsSubmitted
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getAppsSubmitted
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|TestRM
name|t
init|=
operator|new
name|TestRM
argument_list|()
decl_stmt|;
name|t
operator|.
name|testGetNewAppId
argument_list|()
expr_stmt|;
name|t
operator|.
name|testAppWithNoContainers
argument_list|()
expr_stmt|;
name|t
operator|.
name|testAppOnMultiNode
argument_list|()
expr_stmt|;
name|t
operator|.
name|testNMToken
argument_list|()
expr_stmt|;
name|t
operator|.
name|testActivatingApplicationAfterAddingNM
argument_list|()
expr_stmt|;
name|t
operator|.
name|testInvalidateAMHostPortWhenAMFailedOrKilled
argument_list|()
expr_stmt|;
name|t
operator|.
name|testInvalidatedAMHostPortOnAMRestart
argument_list|()
expr_stmt|;
name|t
operator|.
name|testApplicationKillAtAcceptedState
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

