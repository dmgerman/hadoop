begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFramework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|test
operator|.
name|TestingServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|TestZKRMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|ZKRMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestRMStoreCommands
specifier|public
class|class
name|TestRMStoreCommands
block|{
annotation|@
name|Test
DECL|method|testFormatStateStoreCmdForZK ()
specifier|public
name|void
name|testFormatStateStoreCmdForZK
parameter_list|()
throws|throws
name|Exception
block|{
name|StateChangeRequestInfo
name|req
init|=
operator|new
name|StateChangeRequestInfo
argument_list|(
name|HAServiceProtocol
operator|.
name|RequestSource
operator|.
name|REQUEST_BY_USER
argument_list|)
decl_stmt|;
try|try
init|(
name|TestingServer
name|curatorTestingServer
init|=
name|TestZKRMStateStore
operator|.
name|setupCuratorServer
argument_list|()
init|;
name|CuratorFramework
name|curatorFramework
operator|=
name|TestZKRMStateStore
operator|.
name|setupCuratorFramework
argument_list|(
name|curatorTestingServer
argument_list|)
init|)
block|{
name|Configuration
name|conf
init|=
name|TestZKRMStateStore
operator|.
name|createHARMConf
argument_list|(
literal|"rm1,rm2"
argument_list|,
literal|"rm1"
argument_list|,
literal|1234
argument_list|,
literal|false
argument_list|,
name|curatorTestingServer
argument_list|)
decl_stmt|;
name|ResourceManager
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|transitionToActive
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|String
name|zkStateRoot
init|=
name|ZKRMStateStore
operator|.
name|ROOT_ZNODE_NAME
decl_stmt|;
name|assertEquals
argument_list|(
literal|"RM State store parent path should have a child node "
operator|+
name|zkStateRoot
argument_list|,
name|zkStateRoot
argument_list|,
name|curatorFramework
operator|.
name|getChildren
argument_list|()
operator|.
name|forPath
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_ZK_RM_STATE_STORE_PARENT_PATH
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|ResourceManager
operator|.
name|deleteRMStateStore
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Exception should not be thrown during format rm state store"
operator|+
literal|" operation."
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"After store format parent path should have no child nodes"
argument_list|,
name|curatorFramework
operator|.
name|getChildren
argument_list|()
operator|.
name|forPath
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_ZK_RM_STATE_STORE_PARENT_PATH
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFormatConfStoreCmdForZK ()
specifier|public
name|void
name|testFormatConfStoreCmdForZK
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|TestingServer
name|curatorTestingServer
init|=
name|TestZKRMStateStore
operator|.
name|setupCuratorServer
argument_list|()
init|;
name|CuratorFramework
name|curatorFramework
operator|=
name|TestZKRMStateStore
operator|.
name|setupCuratorFramework
argument_list|(
name|curatorTestingServer
argument_list|)
init|)
block|{
name|Configuration
name|conf
init|=
name|TestZKRMStateStore
operator|.
name|createHARMConf
argument_list|(
literal|"rm1,rm2"
argument_list|,
literal|"rm1"
argument_list|,
literal|1234
argument_list|,
literal|false
argument_list|,
name|curatorTestingServer
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|SCHEDULER_CONFIGURATION_STORE_CLASS
argument_list|,
name|YarnConfiguration
operator|.
name|ZK_CONFIGURATION_STORE
argument_list|)
expr_stmt|;
name|ResourceManager
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|confStorePath
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDCONF_STORE_ZK_PARENT_PATH
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDCONF_STORE_ZK_PARENT_PATH
argument_list|)
operator|+
literal|"/CONF_STORE"
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Failed to initialize ZKConfigurationStore"
argument_list|,
name|curatorFramework
operator|.
name|checkExists
argument_list|()
operator|.
name|forPath
argument_list|(
name|confStorePath
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|ResourceManager
operator|.
name|deleteRMConfStore
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Exception should not be thrown during format rm conf store"
operator|+
literal|" operation."
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
literal|"Failed to format ZKConfigurationStore"
argument_list|,
name|curatorFramework
operator|.
name|checkExists
argument_list|()
operator|.
name|forPath
argument_list|(
name|confStorePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRemoveApplicationFromStateStoreCmdForZK ()
specifier|public
name|void
name|testRemoveApplicationFromStateStoreCmdForZK
parameter_list|()
throws|throws
name|Exception
block|{
name|StateChangeRequestInfo
name|req
init|=
operator|new
name|StateChangeRequestInfo
argument_list|(
name|HAServiceProtocol
operator|.
name|RequestSource
operator|.
name|REQUEST_BY_USER
argument_list|)
decl_stmt|;
try|try
init|(
name|TestingServer
name|curatorTestingServer
init|=
name|TestZKRMStateStore
operator|.
name|setupCuratorServer
argument_list|()
init|;
name|CuratorFramework
name|curatorFramework
operator|=
name|TestZKRMStateStore
operator|.
name|setupCuratorFramework
argument_list|(
name|curatorTestingServer
argument_list|)
init|)
block|{
name|Configuration
name|conf
init|=
name|TestZKRMStateStore
operator|.
name|createHARMConf
argument_list|(
literal|"rm1,rm2"
argument_list|,
literal|"rm1"
argument_list|,
literal|1234
argument_list|,
literal|false
argument_list|,
name|curatorTestingServer
argument_list|)
decl_stmt|;
name|ResourceManager
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|transitionToActive
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|appRootPath
init|=
name|YarnConfiguration
operator|.
name|DEFAULT_ZK_RM_STATE_STORE_PARENT_PATH
operator|+
literal|"/"
operator|+
name|ZKRMStateStore
operator|.
name|ROOT_ZNODE_NAME
operator|+
literal|"/"
operator|+
name|RMStateStore
operator|.
name|RM_APP_ROOT
decl_stmt|;
name|String
name|appIdPath
init|=
name|appRootPath
operator|+
literal|"/"
operator|+
name|appId
decl_stmt|;
name|curatorFramework
operator|.
name|create
argument_list|()
operator|.
name|forPath
argument_list|(
name|appIdPath
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|path
range|:
name|curatorFramework
operator|.
name|getChildren
argument_list|()
operator|.
name|forPath
argument_list|(
name|appRootPath
argument_list|)
control|)
block|{
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
name|ZKRMStateStore
operator|.
name|RM_APP_ROOT_HIERARCHIES
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|assertEquals
argument_list|(
literal|"Application node for "
operator|+
name|appId
operator|+
literal|" should exist"
argument_list|,
name|appId
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ResourceManager
operator|.
name|removeApplication
argument_list|(
name|conf
argument_list|,
name|appId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Exception should not be thrown while removing app from "
operator|+
literal|"rm state store."
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"After remove app from store there should be no child nodes"
operator|+
literal|" for application in app root path"
argument_list|,
name|curatorFramework
operator|.
name|getChildren
argument_list|()
operator|.
name|forPath
argument_list|(
name|appRootPath
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|curatorFramework
operator|.
name|getChildren
argument_list|()
operator|.
name|forPath
argument_list|(
name|appRootPath
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|ZKRMStateStore
operator|.
name|RM_APP_ROOT_HIERARCHIES
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

