begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*******************************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *   or more contributor license agreements.  See the NOTICE file  *   distributed with this work for additional information  *   regarding copyright ownership.  The ASF licenses this file  *   to you under the Apache License, Version 2.0 (the  *   "License"); you may not use this file except in compliance  *   with the License.  You may obtain a copy of the License at  *    *       http://www.apache.org/licenses/LICENSE-2.0  *    *   Unless required by applicable law or agreed to in writing, software  *   distributed under the License is distributed on an "AS IS" BASIS,  *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *   See the License for the specific language governing permissions and  *   limitations under the License.  *******************************************************************************/
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.reservation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|TestRLESparseResourceAllocation
specifier|public
class|class
name|TestRLESparseResourceAllocation
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRLESparseResourceAllocation
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testBlocks ()
specifier|public
name|void
name|testBlocks
parameter_list|()
block|{
name|ResourceCalculator
name|resCalc
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
name|Resource
name|minAlloc
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|RLESparseResourceAllocation
name|rleSparseVector
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|resCalc
argument_list|,
name|minAlloc
argument_list|)
decl_stmt|;
name|int
index|[]
name|alloc
init|=
block|{
literal|10
block|,
literal|10
block|,
literal|10
block|,
literal|10
block|,
literal|10
block|,
literal|10
block|}
decl_stmt|;
name|int
name|start
init|=
literal|100
decl_stmt|;
name|Set
argument_list|<
name|Entry
argument_list|<
name|ReservationInterval
argument_list|,
name|ReservationRequest
argument_list|>
argument_list|>
name|inputs
init|=
name|generateAllocation
argument_list|(
name|start
argument_list|,
name|alloc
argument_list|,
literal|false
argument_list|)
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ReservationInterval
argument_list|,
name|ReservationRequest
argument_list|>
name|ip
range|:
name|inputs
control|)
block|{
name|rleSparseVector
operator|.
name|addInterval
argument_list|(
name|ip
operator|.
name|getKey
argument_list|()
argument_list|,
name|ip
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|rleSparseVector
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|rleSparseVector
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
literal|99
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
name|start
operator|+
name|alloc
operator|.
name|length
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|alloc
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
operator|*
operator|(
name|alloc
index|[
name|i
index|]
operator|)
argument_list|,
operator|(
name|alloc
index|[
name|i
index|]
operator|)
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
name|start
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
name|start
operator|+
name|alloc
operator|.
name|length
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ReservationInterval
argument_list|,
name|ReservationRequest
argument_list|>
name|ip
range|:
name|inputs
control|)
block|{
name|rleSparseVector
operator|.
name|removeInterval
argument_list|(
name|ip
operator|.
name|getKey
argument_list|()
argument_list|,
name|ip
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|rleSparseVector
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|alloc
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
name|start
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rleSparseVector
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSteps ()
specifier|public
name|void
name|testSteps
parameter_list|()
block|{
name|ResourceCalculator
name|resCalc
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
name|Resource
name|minAlloc
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|RLESparseResourceAllocation
name|rleSparseVector
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|resCalc
argument_list|,
name|minAlloc
argument_list|)
decl_stmt|;
name|int
index|[]
name|alloc
init|=
block|{
literal|10
block|,
literal|10
block|,
literal|10
block|,
literal|10
block|,
literal|10
block|,
literal|10
block|}
decl_stmt|;
name|int
name|start
init|=
literal|100
decl_stmt|;
name|Set
argument_list|<
name|Entry
argument_list|<
name|ReservationInterval
argument_list|,
name|ReservationRequest
argument_list|>
argument_list|>
name|inputs
init|=
name|generateAllocation
argument_list|(
name|start
argument_list|,
name|alloc
argument_list|,
literal|true
argument_list|)
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ReservationInterval
argument_list|,
name|ReservationRequest
argument_list|>
name|ip
range|:
name|inputs
control|)
block|{
name|rleSparseVector
operator|.
name|addInterval
argument_list|(
name|ip
operator|.
name|getKey
argument_list|()
argument_list|,
name|ip
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|rleSparseVector
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|rleSparseVector
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
literal|99
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
name|start
operator|+
name|alloc
operator|.
name|length
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|alloc
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
operator|*
operator|(
name|alloc
index|[
name|i
index|]
operator|+
name|i
operator|)
argument_list|,
operator|(
name|alloc
index|[
name|i
index|]
operator|+
name|i
operator|)
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
name|start
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
name|start
operator|+
name|alloc
operator|.
name|length
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ReservationInterval
argument_list|,
name|ReservationRequest
argument_list|>
name|ip
range|:
name|inputs
control|)
block|{
name|rleSparseVector
operator|.
name|removeInterval
argument_list|(
name|ip
operator|.
name|getKey
argument_list|()
argument_list|,
name|ip
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|rleSparseVector
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|alloc
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
name|start
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rleSparseVector
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSkyline ()
specifier|public
name|void
name|testSkyline
parameter_list|()
block|{
name|ResourceCalculator
name|resCalc
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
name|Resource
name|minAlloc
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|RLESparseResourceAllocation
name|rleSparseVector
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|resCalc
argument_list|,
name|minAlloc
argument_list|)
decl_stmt|;
name|int
index|[]
name|alloc
init|=
block|{
literal|0
block|,
literal|5
block|,
literal|10
block|,
literal|10
block|,
literal|5
block|,
literal|0
block|}
decl_stmt|;
name|int
name|start
init|=
literal|100
decl_stmt|;
name|Set
argument_list|<
name|Entry
argument_list|<
name|ReservationInterval
argument_list|,
name|ReservationRequest
argument_list|>
argument_list|>
name|inputs
init|=
name|generateAllocation
argument_list|(
name|start
argument_list|,
name|alloc
argument_list|,
literal|true
argument_list|)
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ReservationInterval
argument_list|,
name|ReservationRequest
argument_list|>
name|ip
range|:
name|inputs
control|)
block|{
name|rleSparseVector
operator|.
name|addInterval
argument_list|(
name|ip
operator|.
name|getKey
argument_list|()
argument_list|,
name|ip
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|rleSparseVector
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|rleSparseVector
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
literal|99
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
name|start
operator|+
name|alloc
operator|.
name|length
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|alloc
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
operator|*
operator|(
name|alloc
index|[
name|i
index|]
operator|+
name|i
operator|)
argument_list|,
operator|(
name|alloc
index|[
name|i
index|]
operator|+
name|i
operator|)
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
name|start
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
name|start
operator|+
name|alloc
operator|.
name|length
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ReservationInterval
argument_list|,
name|ReservationRequest
argument_list|>
name|ip
range|:
name|inputs
control|)
block|{
name|rleSparseVector
operator|.
name|removeInterval
argument_list|(
name|ip
operator|.
name|getKey
argument_list|()
argument_list|,
name|ip
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|rleSparseVector
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|alloc
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
name|start
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rleSparseVector
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testZeroAlloaction ()
specifier|public
name|void
name|testZeroAlloaction
parameter_list|()
block|{
name|ResourceCalculator
name|resCalc
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
name|Resource
name|minAlloc
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|RLESparseResourceAllocation
name|rleSparseVector
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|resCalc
argument_list|,
name|minAlloc
argument_list|)
decl_stmt|;
name|rleSparseVector
operator|.
name|addInterval
argument_list|(
operator|new
name|ReservationInterval
argument_list|(
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|(
literal|0
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|rleSparseVector
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
operator|new
name|Random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rleSparseVector
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|generateAllocation ( int startTime, int[] alloc, boolean isStep)
specifier|private
name|Map
argument_list|<
name|ReservationInterval
argument_list|,
name|ReservationRequest
argument_list|>
name|generateAllocation
parameter_list|(
name|int
name|startTime
parameter_list|,
name|int
index|[]
name|alloc
parameter_list|,
name|boolean
name|isStep
parameter_list|)
block|{
name|Map
argument_list|<
name|ReservationInterval
argument_list|,
name|ReservationRequest
argument_list|>
name|req
init|=
operator|new
name|HashMap
argument_list|<
name|ReservationInterval
argument_list|,
name|ReservationRequest
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|numContainers
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|alloc
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isStep
condition|)
block|{
name|numContainers
operator|=
name|alloc
index|[
name|i
index|]
operator|+
name|i
expr_stmt|;
block|}
else|else
block|{
name|numContainers
operator|=
name|alloc
index|[
name|i
index|]
expr_stmt|;
block|}
name|req
operator|.
name|put
argument_list|(
operator|new
name|ReservationInterval
argument_list|(
name|startTime
operator|+
name|i
argument_list|,
name|startTime
operator|+
name|i
operator|+
literal|1
argument_list|)
argument_list|,
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|(
name|numContainers
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|req
return|;
block|}
block|}
end_class

end_unit

