begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*******************************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *   or more contributor license agreements.  See the NOTICE file  *   distributed with this work for additional information  *   regarding copyright ownership.  The ASF licenses this file  *   to you under the Apache License, Version 2.0 (the  *   "License"); you may not use this file except in compliance  *   with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *   Unless required by applicable law or agreed to in writing, software  *   distributed under the License is distributed on an "AS IS" BASIS,  *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *   See the License for the specific language governing permissions and  *   limitations under the License.  *******************************************************************************/
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.reservation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|RLESparseResourceAllocation
operator|.
name|RLEOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|exceptions
operator|.
name|PlanningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|TestRLESparseResourceAllocation
specifier|public
class|class
name|TestRLESparseResourceAllocation
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRLESparseResourceAllocation
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testMergeAdd ()
specifier|public
name|void
name|testMergeAdd
parameter_list|()
throws|throws
name|PlanningException
block|{
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Resource
argument_list|>
name|a
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Resource
argument_list|>
name|b
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|setupArrays
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|RLESparseResourceAllocation
name|rleA
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|a
argument_list|,
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
decl_stmt|;
name|RLESparseResourceAllocation
name|rleB
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|b
argument_list|,
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
decl_stmt|;
name|RLESparseResourceAllocation
name|out
init|=
name|RLESparseResourceAllocation
operator|.
name|merge
argument_list|(
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|100
operator|*
literal|128
operator|*
literal|1024
argument_list|,
literal|100
operator|*
literal|32
argument_list|)
argument_list|,
name|rleA
argument_list|,
name|rleB
argument_list|,
name|RLEOperator
operator|.
name|add
argument_list|,
literal|18
argument_list|,
literal|45
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|long
index|[]
name|time
init|=
block|{
literal|18
block|,
literal|20
block|,
literal|22
block|,
literal|30
block|,
literal|33
block|,
literal|40
block|,
literal|43
block|,
literal|45
block|}
decl_stmt|;
name|int
index|[]
name|alloc
init|=
block|{
literal|10
block|,
literal|15
block|,
literal|20
block|,
literal|25
block|,
literal|30
block|,
literal|40
block|,
literal|30
block|}
decl_stmt|;
name|validate
argument_list|(
name|out
argument_list|,
name|time
argument_list|,
name|alloc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMergeMin ()
specifier|public
name|void
name|testMergeMin
parameter_list|()
throws|throws
name|PlanningException
block|{
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Resource
argument_list|>
name|a
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Resource
argument_list|>
name|b
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|setupArrays
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|RLESparseResourceAllocation
name|rleA
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|a
argument_list|,
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
decl_stmt|;
name|RLESparseResourceAllocation
name|rleB
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|b
argument_list|,
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
decl_stmt|;
name|RLESparseResourceAllocation
name|out
init|=
name|RLESparseResourceAllocation
operator|.
name|merge
argument_list|(
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|100
operator|*
literal|128
operator|*
literal|1024
argument_list|,
literal|100
operator|*
literal|32
argument_list|)
argument_list|,
name|rleA
argument_list|,
name|rleB
argument_list|,
name|RLEOperator
operator|.
name|min
argument_list|,
literal|0
argument_list|,
literal|60
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|long
index|[]
name|time
init|=
block|{
literal|10
block|,
literal|22
block|,
literal|33
block|,
literal|40
block|,
literal|43
block|,
literal|50
block|,
literal|60
block|}
decl_stmt|;
name|int
index|[]
name|alloc
init|=
block|{
literal|5
block|,
literal|10
block|,
literal|15
block|,
literal|20
block|,
literal|10
block|,
literal|0
block|}
decl_stmt|;
name|validate
argument_list|(
name|out
argument_list|,
name|time
argument_list|,
name|alloc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMergeMax ()
specifier|public
name|void
name|testMergeMax
parameter_list|()
throws|throws
name|PlanningException
block|{
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Resource
argument_list|>
name|a
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Resource
argument_list|>
name|b
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|setupArrays
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|RLESparseResourceAllocation
name|rleA
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|a
argument_list|,
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
decl_stmt|;
name|RLESparseResourceAllocation
name|rleB
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|b
argument_list|,
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
decl_stmt|;
name|RLESparseResourceAllocation
name|out
init|=
name|RLESparseResourceAllocation
operator|.
name|merge
argument_list|(
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|100
operator|*
literal|128
operator|*
literal|1024
argument_list|,
literal|100
operator|*
literal|32
argument_list|)
argument_list|,
name|rleA
argument_list|,
name|rleB
argument_list|,
name|RLEOperator
operator|.
name|max
argument_list|,
literal|0
argument_list|,
literal|60
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|long
index|[]
name|time
init|=
block|{
literal|10
block|,
literal|20
block|,
literal|30
block|,
literal|40
block|,
literal|50
block|,
literal|60
block|}
decl_stmt|;
name|int
index|[]
name|alloc
init|=
block|{
literal|5
block|,
literal|10
block|,
literal|15
block|,
literal|20
block|,
literal|10
block|}
decl_stmt|;
name|validate
argument_list|(
name|out
argument_list|,
name|time
argument_list|,
name|alloc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMergeSubtract ()
specifier|public
name|void
name|testMergeSubtract
parameter_list|()
throws|throws
name|PlanningException
block|{
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Resource
argument_list|>
name|a
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Resource
argument_list|>
name|b
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|setupArrays
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|RLESparseResourceAllocation
name|rleA
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|a
argument_list|,
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
decl_stmt|;
name|RLESparseResourceAllocation
name|rleB
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|b
argument_list|,
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
decl_stmt|;
name|RLESparseResourceAllocation
name|out
init|=
name|RLESparseResourceAllocation
operator|.
name|merge
argument_list|(
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|100
operator|*
literal|128
operator|*
literal|1024
argument_list|,
literal|100
operator|*
literal|32
argument_list|)
argument_list|,
name|rleA
argument_list|,
name|rleB
argument_list|,
name|RLEOperator
operator|.
name|subtract
argument_list|,
literal|0
argument_list|,
literal|60
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|long
index|[]
name|time
init|=
block|{
literal|10
block|,
literal|11
block|,
literal|20
block|,
literal|22
block|,
literal|30
block|,
literal|33
block|,
literal|43
block|,
literal|50
block|,
literal|60
block|}
decl_stmt|;
name|int
index|[]
name|alloc
init|=
block|{
literal|5
block|,
literal|0
block|,
literal|5
block|,
literal|0
block|,
literal|5
block|,
literal|0
block|,
literal|10
block|,
operator|-
literal|10
block|}
decl_stmt|;
name|validate
argument_list|(
name|out
argument_list|,
name|time
argument_list|,
name|alloc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMergesubtractTestNonNegative ()
specifier|public
name|void
name|testMergesubtractTestNonNegative
parameter_list|()
throws|throws
name|PlanningException
block|{
comment|// starting with default array example
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Resource
argument_list|>
name|a
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Resource
argument_list|>
name|b
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|setupArrays
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|RLESparseResourceAllocation
name|rleA
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|a
argument_list|,
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
decl_stmt|;
name|RLESparseResourceAllocation
name|rleB
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|b
argument_list|,
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|RLESparseResourceAllocation
name|out
init|=
name|RLESparseResourceAllocation
operator|.
name|merge
argument_list|(
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|100
operator|*
literal|128
operator|*
literal|1024
argument_list|,
literal|100
operator|*
literal|32
argument_list|)
argument_list|,
name|rleA
argument_list|,
name|rleB
argument_list|,
name|RLEOperator
operator|.
name|subtractTestNonNegative
argument_list|,
literal|0
argument_list|,
literal|60
argument_list|)
decl_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PlanningException
name|pe
parameter_list|)
block|{
comment|// Expected!
block|}
comment|// NOTE a is empty!! so the subtraction is implicitly considered negative
comment|// and the test should fail
name|a
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
expr_stmt|;
name|b
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
literal|11L
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|rleA
operator|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|a
argument_list|,
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
expr_stmt|;
name|rleB
operator|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|b
argument_list|,
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|RLESparseResourceAllocation
name|out
init|=
name|RLESparseResourceAllocation
operator|.
name|merge
argument_list|(
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|100
operator|*
literal|128
operator|*
literal|1024
argument_list|,
literal|100
operator|*
literal|32
argument_list|)
argument_list|,
name|rleA
argument_list|,
name|rleB
argument_list|,
name|RLEOperator
operator|.
name|subtractTestNonNegative
argument_list|,
literal|0
argument_list|,
literal|60
argument_list|)
decl_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PlanningException
name|pe
parameter_list|)
block|{
comment|// Expected!
block|}
comment|// Testing that the subtractTestNonNegative detects problems even if only one
comment|// of the resource dimensions is "<0"
name|a
operator|.
name|put
argument_list|(
literal|10L
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
literal|11L
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|rleA
operator|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|a
argument_list|,
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
expr_stmt|;
name|rleB
operator|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|b
argument_list|,
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|RLESparseResourceAllocation
name|out
init|=
name|RLESparseResourceAllocation
operator|.
name|merge
argument_list|(
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|100
operator|*
literal|128
operator|*
literal|1024
argument_list|,
literal|100
operator|*
literal|32
argument_list|)
argument_list|,
name|rleA
argument_list|,
name|rleB
argument_list|,
name|RLEOperator
operator|.
name|subtractTestNonNegative
argument_list|,
literal|0
argument_list|,
literal|60
argument_list|)
decl_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PlanningException
name|pe
parameter_list|)
block|{
comment|// Expected!
block|}
comment|// try with reverse setting
name|a
operator|.
name|put
argument_list|(
literal|10L
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
literal|11L
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|6
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|rleA
operator|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|a
argument_list|,
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
expr_stmt|;
name|rleB
operator|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|b
argument_list|,
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|RLESparseResourceAllocation
name|out
init|=
name|RLESparseResourceAllocation
operator|.
name|merge
argument_list|(
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|100
operator|*
literal|128
operator|*
literal|1024
argument_list|,
literal|100
operator|*
literal|32
argument_list|)
argument_list|,
name|rleA
argument_list|,
name|rleB
argument_list|,
name|RLEOperator
operator|.
name|subtractTestNonNegative
argument_list|,
literal|0
argument_list|,
literal|60
argument_list|)
decl_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PlanningException
name|pe
parameter_list|)
block|{
comment|// Expected!
block|}
comment|// trying a case that should work
name|a
operator|.
name|put
argument_list|(
literal|10L
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
literal|11L
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|rleA
operator|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|a
argument_list|,
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
expr_stmt|;
name|rleB
operator|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|b
argument_list|,
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
expr_stmt|;
name|RLESparseResourceAllocation
name|out
init|=
name|RLESparseResourceAllocation
operator|.
name|merge
argument_list|(
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|100
operator|*
literal|128
operator|*
literal|1024
argument_list|,
literal|100
operator|*
literal|32
argument_list|)
argument_list|,
name|rleA
argument_list|,
name|rleB
argument_list|,
name|RLEOperator
operator|.
name|subtractTestNonNegative
argument_list|,
literal|0
argument_list|,
literal|60
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
DECL|method|testMergeSpeed ()
specifier|public
name|void
name|testMergeSpeed
parameter_list|()
throws|throws
name|PlanningException
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
name|j
operator|++
control|)
block|{
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Resource
argument_list|>
name|a
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Resource
argument_list|>
name|b
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|startA
init|=
literal|0
decl_stmt|;
name|long
name|startB
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
literal|9000
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|startA
operator|+=
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|startB
operator|+=
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|a
operator|.
name|put
argument_list|(
name|startA
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|10240
argument_list|)
argument_list|,
name|rand
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
name|startB
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|10240
argument_list|)
argument_list|,
name|rand
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RLESparseResourceAllocation
name|rleA
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|a
argument_list|,
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
decl_stmt|;
name|RLESparseResourceAllocation
name|rleB
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|b
argument_list|,
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|RLESparseResourceAllocation
name|out
init|=
name|RLESparseResourceAllocation
operator|.
name|merge
argument_list|(
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|100
operator|*
literal|128
operator|*
literal|1024
argument_list|,
literal|100
operator|*
literal|32
argument_list|)
argument_list|,
name|rleA
argument_list|,
name|rleB
argument_list|,
name|RLEOperator
operator|.
name|add
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" Took: "
operator|+
operator|(
name|end
operator|-
name|start
operator|)
operator|+
literal|"ms "
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRangeOverlapping ()
specifier|public
name|void
name|testRangeOverlapping
parameter_list|()
block|{
name|ResourceCalculator
name|resCalc
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
name|RLESparseResourceAllocation
name|r
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|resCalc
argument_list|)
decl_stmt|;
name|int
index|[]
name|alloc
init|=
block|{
literal|10
block|,
literal|10
block|,
literal|10
block|,
literal|10
block|,
literal|10
block|,
literal|10
block|}
decl_stmt|;
name|int
name|start
init|=
literal|100
decl_stmt|;
name|Set
argument_list|<
name|Entry
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
argument_list|>
name|inputs
init|=
name|generateAllocation
argument_list|(
name|start
argument_list|,
name|alloc
argument_list|,
literal|false
argument_list|)
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
name|ip
range|:
name|inputs
control|)
block|{
name|r
operator|.
name|addInterval
argument_list|(
name|ip
operator|.
name|getKey
argument_list|()
argument_list|,
name|ip
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|s
init|=
name|r
operator|.
name|getEarliestStartTime
argument_list|()
decl_stmt|;
name|long
name|d
init|=
name|r
operator|.
name|getLatestNonNullTime
argument_list|()
decl_stmt|;
comment|// tries to trigger "out-of-range" bug
name|r
operator|=
name|r
operator|.
name|getRangeOverlapping
argument_list|(
name|s
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|r
operator|=
name|r
operator|.
name|getRangeOverlapping
argument_list|(
name|s
operator|-
literal|1
argument_list|,
name|d
operator|-
literal|1
argument_list|)
expr_stmt|;
name|r
operator|=
name|r
operator|.
name|getRangeOverlapping
argument_list|(
name|s
operator|+
literal|1
argument_list|,
name|d
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlocks ()
specifier|public
name|void
name|testBlocks
parameter_list|()
block|{
name|ResourceCalculator
name|resCalc
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
name|RLESparseResourceAllocation
name|rleSparseVector
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|resCalc
argument_list|)
decl_stmt|;
name|int
index|[]
name|alloc
init|=
block|{
literal|10
block|,
literal|10
block|,
literal|10
block|,
literal|10
block|,
literal|10
block|,
literal|10
block|}
decl_stmt|;
name|int
name|start
init|=
literal|100
decl_stmt|;
name|Set
argument_list|<
name|Entry
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
argument_list|>
name|inputs
init|=
name|generateAllocation
argument_list|(
name|start
argument_list|,
name|alloc
argument_list|,
literal|false
argument_list|)
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
name|ip
range|:
name|inputs
control|)
block|{
name|rleSparseVector
operator|.
name|addInterval
argument_list|(
name|ip
operator|.
name|getKey
argument_list|()
argument_list|,
name|ip
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|rleSparseVector
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|rleSparseVector
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
literal|99
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
name|start
operator|+
name|alloc
operator|.
name|length
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|alloc
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
operator|*
operator|(
name|alloc
index|[
name|i
index|]
operator|)
argument_list|,
operator|(
name|alloc
index|[
name|i
index|]
operator|)
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
name|start
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
name|start
operator|+
name|alloc
operator|.
name|length
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
name|ip
range|:
name|inputs
control|)
block|{
name|rleSparseVector
operator|.
name|removeInterval
argument_list|(
name|ip
operator|.
name|getKey
argument_list|()
argument_list|,
name|ip
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|rleSparseVector
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|alloc
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
name|start
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rleSparseVector
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPartialRemoval ()
specifier|public
name|void
name|testPartialRemoval
parameter_list|()
block|{
name|ResourceCalculator
name|resCalc
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
name|RLESparseResourceAllocation
name|rleSparseVector
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|resCalc
argument_list|)
decl_stmt|;
name|ReservationInterval
name|riAdd
init|=
operator|new
name|ReservationInterval
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|Resource
name|rr
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
operator|*
literal|100
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|ReservationInterval
name|riAdd2
init|=
operator|new
name|ReservationInterval
argument_list|(
literal|20
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|Resource
name|rr2
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
operator|*
literal|200
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|ReservationInterval
name|riRemove
init|=
operator|new
name|ReservationInterval
argument_list|(
literal|12
argument_list|,
literal|25
argument_list|)
decl_stmt|;
comment|// same if we use this
comment|// ReservationRequest rrRemove =
comment|// ReservationRequest.newInstance(Resource.newInstance(1024, 1), 100, 1,6);
name|LOG
operator|.
name|info
argument_list|(
name|rleSparseVector
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|rleSparseVector
operator|.
name|addInterval
argument_list|(
name|riAdd
argument_list|,
name|rr
argument_list|)
expr_stmt|;
name|rleSparseVector
operator|.
name|addInterval
argument_list|(
name|riAdd2
argument_list|,
name|rr2
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|rleSparseVector
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|rleSparseVector
operator|.
name|removeInterval
argument_list|(
name|riRemove
argument_list|,
name|rr
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|rleSparseVector
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Current bug prevents this to pass. The RLESparseResourceAllocation
comment|// does not handle removal of "partial"
comment|// allocations correctly.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|102400
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
literal|10
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
literal|13
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
literal|19
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|102400
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
literal|21
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
operator|*
literal|102400
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
literal|26
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|ReservationInterval
name|riRemove2
init|=
operator|new
name|ReservationInterval
argument_list|(
literal|9
argument_list|,
literal|13
argument_list|)
decl_stmt|;
name|rleSparseVector
operator|.
name|removeInterval
argument_list|(
name|riRemove2
argument_list|,
name|rr
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|rleSparseVector
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
literal|11
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|102400
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
literal|9
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
literal|13
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|102400
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
literal|20
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSteps ()
specifier|public
name|void
name|testSteps
parameter_list|()
block|{
name|ResourceCalculator
name|resCalc
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
name|RLESparseResourceAllocation
name|rleSparseVector
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|resCalc
argument_list|)
decl_stmt|;
name|int
index|[]
name|alloc
init|=
block|{
literal|10
block|,
literal|10
block|,
literal|10
block|,
literal|10
block|,
literal|10
block|,
literal|10
block|}
decl_stmt|;
name|int
name|start
init|=
literal|100
decl_stmt|;
name|Set
argument_list|<
name|Entry
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
argument_list|>
name|inputs
init|=
name|generateAllocation
argument_list|(
name|start
argument_list|,
name|alloc
argument_list|,
literal|true
argument_list|)
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
name|ip
range|:
name|inputs
control|)
block|{
name|rleSparseVector
operator|.
name|addInterval
argument_list|(
name|ip
operator|.
name|getKey
argument_list|()
argument_list|,
name|ip
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|rleSparseVector
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|rleSparseVector
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
literal|99
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
name|start
operator|+
name|alloc
operator|.
name|length
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|alloc
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
operator|*
operator|(
name|alloc
index|[
name|i
index|]
operator|+
name|i
operator|)
argument_list|,
operator|(
name|alloc
index|[
name|i
index|]
operator|+
name|i
operator|)
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
name|start
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
name|start
operator|+
name|alloc
operator|.
name|length
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
name|ip
range|:
name|inputs
control|)
block|{
name|rleSparseVector
operator|.
name|removeInterval
argument_list|(
name|ip
operator|.
name|getKey
argument_list|()
argument_list|,
name|ip
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|rleSparseVector
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|alloc
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
name|start
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rleSparseVector
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSkyline ()
specifier|public
name|void
name|testSkyline
parameter_list|()
block|{
name|ResourceCalculator
name|resCalc
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
name|RLESparseResourceAllocation
name|rleSparseVector
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|resCalc
argument_list|)
decl_stmt|;
name|int
index|[]
name|alloc
init|=
block|{
literal|0
block|,
literal|5
block|,
literal|10
block|,
literal|10
block|,
literal|5
block|,
literal|0
block|}
decl_stmt|;
name|int
name|start
init|=
literal|100
decl_stmt|;
name|Set
argument_list|<
name|Entry
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
argument_list|>
name|inputs
init|=
name|generateAllocation
argument_list|(
name|start
argument_list|,
name|alloc
argument_list|,
literal|true
argument_list|)
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
name|ip
range|:
name|inputs
control|)
block|{
name|rleSparseVector
operator|.
name|addInterval
argument_list|(
name|ip
operator|.
name|getKey
argument_list|()
argument_list|,
name|ip
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|rleSparseVector
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|rleSparseVector
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
literal|99
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
name|start
operator|+
name|alloc
operator|.
name|length
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|alloc
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
operator|*
operator|(
name|alloc
index|[
name|i
index|]
operator|+
name|i
operator|)
argument_list|,
operator|(
name|alloc
index|[
name|i
index|]
operator|+
name|i
operator|)
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
name|start
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
name|start
operator|+
name|alloc
operator|.
name|length
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
name|ip
range|:
name|inputs
control|)
block|{
name|rleSparseVector
operator|.
name|removeInterval
argument_list|(
name|ip
operator|.
name|getKey
argument_list|()
argument_list|,
name|ip
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|rleSparseVector
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|alloc
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
name|start
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rleSparseVector
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testZeroAllocation ()
specifier|public
name|void
name|testZeroAllocation
parameter_list|()
block|{
name|ResourceCalculator
name|resCalc
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
name|RLESparseResourceAllocation
name|rleSparseVector
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|resCalc
argument_list|)
decl_stmt|;
name|rleSparseVector
operator|.
name|addInterval
argument_list|(
operator|new
name|ReservationInterval
argument_list|(
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|rleSparseVector
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rleSparseVector
operator|.
name|getCapacityAtTime
argument_list|(
operator|new
name|Random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rleSparseVector
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testToIntervalMap ()
specifier|public
name|void
name|testToIntervalMap
parameter_list|()
block|{
name|ResourceCalculator
name|resCalc
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
name|RLESparseResourceAllocation
name|rleSparseVector
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|resCalc
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
name|mapAllocations
decl_stmt|;
comment|// Check empty
name|mapAllocations
operator|=
name|rleSparseVector
operator|.
name|toIntervalMap
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mapAllocations
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check full
name|int
index|[]
name|alloc
init|=
block|{
literal|0
block|,
literal|5
block|,
literal|10
block|,
literal|10
block|,
literal|5
block|,
literal|0
block|,
literal|5
block|,
literal|0
block|}
decl_stmt|;
name|int
name|start
init|=
literal|100
decl_stmt|;
name|Set
argument_list|<
name|Entry
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
argument_list|>
name|inputs
init|=
name|generateAllocation
argument_list|(
name|start
argument_list|,
name|alloc
argument_list|,
literal|false
argument_list|)
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
name|ip
range|:
name|inputs
control|)
block|{
name|rleSparseVector
operator|.
name|addInterval
argument_list|(
name|ip
operator|.
name|getKey
argument_list|()
argument_list|,
name|ip
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mapAllocations
operator|=
name|rleSparseVector
operator|.
name|toIntervalMap
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mapAllocations
operator|.
name|size
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
name|entry
range|:
name|mapAllocations
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ReservationInterval
name|interval
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Resource
name|resource
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|interval
operator|.
name|getStartTime
argument_list|()
operator|==
literal|101L
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|interval
operator|.
name|getEndTime
argument_list|()
operator|==
literal|102L
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resource
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|5
operator|*
literal|1024
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|interval
operator|.
name|getStartTime
argument_list|()
operator|==
literal|102L
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|interval
operator|.
name|getEndTime
argument_list|()
operator|==
literal|104L
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resource
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|interval
operator|.
name|getStartTime
argument_list|()
operator|==
literal|104L
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|interval
operator|.
name|getEndTime
argument_list|()
operator|==
literal|105L
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resource
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|5
operator|*
literal|1024
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|interval
operator|.
name|getStartTime
argument_list|()
operator|==
literal|105L
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|interval
operator|.
name|getEndTime
argument_list|()
operator|==
literal|106L
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resource
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
operator|*
literal|1024
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|interval
operator|.
name|getStartTime
argument_list|()
operator|==
literal|106L
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|interval
operator|.
name|getEndTime
argument_list|()
operator|==
literal|107L
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resource
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|5
operator|*
literal|1024
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testMaxPeriodicCapacity ()
specifier|public
name|void
name|testMaxPeriodicCapacity
parameter_list|()
block|{
name|long
index|[]
name|timeSteps
init|=
block|{
literal|0L
block|,
literal|1L
block|,
literal|2L
block|,
literal|3L
block|,
literal|4L
block|,
literal|5L
block|,
literal|6L
block|,
literal|7L
block|}
decl_stmt|;
name|int
index|[]
name|alloc
init|=
block|{
literal|2
block|,
literal|5
block|,
literal|7
block|,
literal|10
block|,
literal|3
block|,
literal|4
block|,
literal|6
block|,
literal|8
block|}
decl_stmt|;
name|RLESparseResourceAllocation
name|rleSparseVector
init|=
name|ReservationSystemTestUtil
operator|.
name|generateRLESparseResourceAllocation
argument_list|(
name|alloc
argument_list|,
name|timeSteps
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|rleSparseVector
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rleSparseVector
operator|.
name|getMaximumPeriodicCapacity
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rleSparseVector
operator|.
name|getMaximumPeriodicCapacity
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|7
argument_list|,
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rleSparseVector
operator|.
name|getMaximumPeriodicCapacity
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rleSparseVector
operator|.
name|getMaximumPeriodicCapacity
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rleSparseVector
operator|.
name|getMaximumPeriodicCapacity
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rleSparseVector
operator|.
name|getMaximumPeriodicCapacity
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rleSparseVector
operator|.
name|getMaximumPeriodicCapacity
argument_list|(
literal|7
argument_list|,
literal|5
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rleSparseVector
operator|.
name|getMaximumPeriodicCapacity
argument_list|(
literal|10
argument_list|,
literal|3
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetMinimumCapacityInInterval ()
specifier|public
name|void
name|testGetMinimumCapacityInInterval
parameter_list|()
block|{
name|long
index|[]
name|timeSteps
init|=
block|{
literal|0L
block|,
literal|1L
block|,
literal|2L
block|,
literal|3L
block|,
literal|4L
block|,
literal|5L
block|,
literal|6L
block|,
literal|7L
block|}
decl_stmt|;
name|int
index|[]
name|alloc
init|=
block|{
literal|2
block|,
literal|5
block|,
literal|7
block|,
literal|10
block|,
literal|3
block|,
literal|4
block|,
literal|0
block|,
literal|8
block|}
decl_stmt|;
name|RLESparseResourceAllocation
name|rleSparseVector
init|=
name|ReservationSystemTestUtil
operator|.
name|generateRLESparseResourceAllocation
argument_list|(
name|alloc
argument_list|,
name|timeSteps
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|rleSparseVector
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rleSparseVector
operator|.
name|getMinimumCapacityInInterval
argument_list|(
operator|new
name|ReservationInterval
argument_list|(
literal|1L
argument_list|,
literal|3L
argument_list|)
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rleSparseVector
operator|.
name|getMinimumCapacityInInterval
argument_list|(
operator|new
name|ReservationInterval
argument_list|(
literal|2L
argument_list|,
literal|5L
argument_list|)
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rleSparseVector
operator|.
name|getMinimumCapacityInInterval
argument_list|(
operator|new
name|ReservationInterval
argument_list|(
literal|1L
argument_list|,
literal|7L
argument_list|)
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setupArrays ( TreeMap<Long, Resource> a, TreeMap<Long, Resource> b)
specifier|private
name|void
name|setupArrays
parameter_list|(
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Resource
argument_list|>
name|a
parameter_list|,
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Resource
argument_list|>
name|b
parameter_list|)
block|{
name|a
operator|.
name|put
argument_list|(
literal|10L
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|20L
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|30L
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|15
argument_list|,
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|40L
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|20
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|put
argument_list|(
literal|50L
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
literal|11L
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
literal|22L
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
literal|33L
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|15
argument_list|,
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
literal|40L
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|20
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
literal|42L
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|20
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
literal|43L
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|validate (RLESparseResourceAllocation out, long[] time, int[] alloc)
specifier|private
name|void
name|validate
parameter_list|(
name|RLESparseResourceAllocation
name|out
parameter_list|,
name|long
index|[]
name|time
parameter_list|,
name|int
index|[]
name|alloc
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Long
argument_list|,
name|Resource
argument_list|>
name|res
range|:
name|out
operator|.
name|getCumulative
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|time
index|[
name|i
index|]
argument_list|,
operator|(
operator|(
name|long
operator|)
name|res
operator|.
name|getKey
argument_list|()
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>
name|alloc
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|assertNull
argument_list|(
name|res
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|alloc
index|[
name|i
index|]
argument_list|,
name|res
operator|.
name|getValue
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|time
operator|.
name|length
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
DECL|method|generateAllocation (int startTime, int[] alloc, boolean isStep)
specifier|private
name|Map
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
name|generateAllocation
parameter_list|(
name|int
name|startTime
parameter_list|,
name|int
index|[]
name|alloc
parameter_list|,
name|boolean
name|isStep
parameter_list|)
block|{
name|Map
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
name|req
init|=
operator|new
name|HashMap
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|numContainers
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|alloc
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isStep
condition|)
block|{
name|numContainers
operator|=
name|alloc
index|[
name|i
index|]
operator|+
name|i
expr_stmt|;
block|}
else|else
block|{
name|numContainers
operator|=
name|alloc
index|[
name|i
index|]
expr_stmt|;
block|}
name|req
operator|.
name|put
argument_list|(
operator|new
name|ReservationInterval
argument_list|(
name|startTime
operator|+
name|i
argument_list|,
name|startTime
operator|+
name|i
operator|+
literal|1
argument_list|)
argument_list|,
name|ReservationSystemUtil
operator|.
name|toResource
argument_list|(
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|(
name|numContainers
operator|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|req
return|;
block|}
block|}
end_class

end_unit

