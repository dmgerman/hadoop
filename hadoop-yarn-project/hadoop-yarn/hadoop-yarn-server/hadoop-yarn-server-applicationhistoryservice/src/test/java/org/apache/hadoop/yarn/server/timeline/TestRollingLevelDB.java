begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timeline
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/** Test class for verification of RollingLevelDB. */
end_comment

begin_class
DECL|class|TestRollingLevelDB
specifier|public
class|class
name|TestRollingLevelDB
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
DECL|field|lfs
specifier|private
name|FileSystem
name|lfs
decl_stmt|;
DECL|field|rollingLevelDB
specifier|private
name|MyRollingLevelDB
name|rollingLevelDB
decl_stmt|;
comment|/** RollingLevelDB for testing that has a setting current time. */
DECL|class|MyRollingLevelDB
specifier|public
specifier|static
class|class
name|MyRollingLevelDB
extends|extends
name|RollingLevelDB
block|{
DECL|field|currentTimeMillis
specifier|private
name|long
name|currentTimeMillis
decl_stmt|;
DECL|method|MyRollingLevelDB ()
name|MyRollingLevelDB
parameter_list|()
block|{
name|super
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentTimeMillis
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|currentTimeMillis ()
specifier|protected
name|long
name|currentTimeMillis
parameter_list|()
block|{
return|return
name|currentTimeMillis
return|;
block|}
DECL|method|setCurrentTimeMillis (long time)
specifier|public
name|void
name|setCurrentTimeMillis
parameter_list|(
name|long
name|time
parameter_list|)
block|{
name|this
operator|.
name|currentTimeMillis
operator|=
name|time
expr_stmt|;
block|}
block|}
empty_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|lfs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|File
name|fsPath
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"-tmpDir"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_LEVELDB_PATH
argument_list|,
name|fsPath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|fsPath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rollingLevelDB
operator|=
operator|new
name|MyRollingLevelDB
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInsertAfterRollPeriodRollsDB ()
specifier|public
name|void
name|testInsertAfterRollPeriodRollsDB
parameter_list|()
throws|throws
name|Exception
block|{
name|rollingLevelDB
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|long
name|now
init|=
name|rollingLevelDB
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|DB
name|db
init|=
name|rollingLevelDB
operator|.
name|getDBForStartTime
argument_list|(
name|now
argument_list|)
decl_stmt|;
name|long
name|startTime
init|=
name|rollingLevelDB
operator|.
name|getStartTimeFor
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Received level db for incorrect start time"
argument_list|,
name|rollingLevelDB
operator|.
name|computeCurrentCheckMillis
argument_list|(
name|now
argument_list|)
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
name|now
operator|=
name|rollingLevelDB
operator|.
name|getNextRollingTimeMillis
argument_list|()
expr_stmt|;
name|rollingLevelDB
operator|.
name|setCurrentTimeMillis
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|db
operator|=
name|rollingLevelDB
operator|.
name|getDBForStartTime
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|startTime
operator|=
name|rollingLevelDB
operator|.
name|getStartTimeFor
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Received level db for incorrect start time"
argument_list|,
name|rollingLevelDB
operator|.
name|computeCurrentCheckMillis
argument_list|(
name|now
argument_list|)
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInsertForPreviousPeriodAfterRollPeriodRollsDB ()
specifier|public
name|void
name|testInsertForPreviousPeriodAfterRollPeriodRollsDB
parameter_list|()
throws|throws
name|Exception
block|{
name|rollingLevelDB
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|long
name|now
init|=
name|rollingLevelDB
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|now
operator|=
name|rollingLevelDB
operator|.
name|computeCurrentCheckMillis
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|rollingLevelDB
operator|.
name|setCurrentTimeMillis
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|DB
name|db
init|=
name|rollingLevelDB
operator|.
name|getDBForStartTime
argument_list|(
name|now
operator|-
literal|1
argument_list|)
decl_stmt|;
name|long
name|startTime
init|=
name|rollingLevelDB
operator|.
name|getStartTimeFor
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Received level db for incorrect start time"
argument_list|,
name|rollingLevelDB
operator|.
name|computeCurrentCheckMillis
argument_list|(
name|now
operator|-
literal|1
argument_list|)
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

