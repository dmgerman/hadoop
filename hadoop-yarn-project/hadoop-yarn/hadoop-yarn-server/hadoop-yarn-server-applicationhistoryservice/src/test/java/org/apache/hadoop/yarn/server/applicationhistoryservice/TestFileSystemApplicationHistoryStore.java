begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.applicationhistoryservice
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RawLocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
operator|.
name|ApplicationAttemptHistoryData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
operator|.
name|ApplicationHistoryData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
operator|.
name|ContainerHistoryData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestFileSystemApplicationHistoryStore
specifier|public
class|class
name|TestFileSystemApplicationHistoryStore
extends|extends
name|ApplicationHistoryStoreTestUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestFileSystemApplicationHistoryStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|fsWorkingPath
specifier|private
name|Path
name|fsWorkingPath
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|=
operator|new
name|RawLocalFileSystem
argument_list|()
expr_stmt|;
name|initStore
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
DECL|method|initStore (final FileSystem fs)
specifier|private
name|void
name|initStore
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
operator|new
name|URI
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fsWorkingPath
operator|=
operator|new
name|Path
argument_list|(
literal|"target"
argument_list|,
name|TestFileSystemApplicationHistoryStore
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|fsWorkingPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|FS_APPLICATION_HISTORY_STORE_URI
argument_list|,
name|fsWorkingPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|=
operator|new
name|FileSystemApplicationHistoryStore
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|FileSystem
name|getFileSystem
parameter_list|(
name|Path
name|path
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|fs
return|;
block|}
block|}
expr_stmt|;
name|store
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|store
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|store
operator|.
name|stop
argument_list|()
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|fsWorkingPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadWriteHistoryData ()
specifier|public
name|void
name|testReadWriteHistoryData
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testReadWriteHistoryData"
argument_list|)
expr_stmt|;
name|testWriteHistoryData
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|testReadHistoryData
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
DECL|method|testWriteHistoryData (int num)
specifier|private
name|void
name|testWriteHistoryData
parameter_list|(
name|int
name|num
parameter_list|)
throws|throws
name|IOException
block|{
name|testWriteHistoryData
argument_list|(
name|num
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testWriteHistoryData ( int num, boolean missingContainer, boolean missingApplicationAttempt)
specifier|private
name|void
name|testWriteHistoryData
parameter_list|(
name|int
name|num
parameter_list|,
name|boolean
name|missingContainer
parameter_list|,
name|boolean
name|missingApplicationAttempt
parameter_list|)
throws|throws
name|IOException
block|{
comment|// write application history data
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|num
condition|;
operator|++
name|i
control|)
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|writeApplicationStartData
argument_list|(
name|appId
argument_list|)
expr_stmt|;
comment|// write application attempt history data
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|num
condition|;
operator|++
name|j
control|)
block|{
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|j
argument_list|)
decl_stmt|;
name|writeApplicationAttemptStartData
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
if|if
condition|(
name|missingApplicationAttempt
operator|&&
name|j
operator|==
name|num
condition|)
block|{
continue|continue;
block|}
comment|// write container history data
for|for
control|(
name|int
name|k
init|=
literal|1
init|;
name|k
operator|<=
name|num
condition|;
operator|++
name|k
control|)
block|{
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newInstance
argument_list|(
name|appAttemptId
argument_list|,
name|k
argument_list|)
decl_stmt|;
name|writeContainerStartData
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
if|if
condition|(
name|missingContainer
operator|&&
name|k
operator|==
name|num
condition|)
block|{
continue|continue;
block|}
name|writeContainerFinishData
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
name|writeApplicationAttemptFinishData
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
block|}
name|writeApplicationFinishData
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testReadHistoryData (int num)
specifier|private
name|void
name|testReadHistoryData
parameter_list|(
name|int
name|num
parameter_list|)
throws|throws
name|IOException
block|{
name|testReadHistoryData
argument_list|(
name|num
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testReadHistoryData ( int num, boolean missingContainer, boolean missingApplicationAttempt)
specifier|private
name|void
name|testReadHistoryData
parameter_list|(
name|int
name|num
parameter_list|,
name|boolean
name|missingContainer
parameter_list|,
name|boolean
name|missingApplicationAttempt
parameter_list|)
throws|throws
name|IOException
block|{
comment|// read application history data
name|Assert
operator|.
name|assertEquals
argument_list|(
name|num
argument_list|,
name|store
operator|.
name|getAllApplications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|num
condition|;
operator|++
name|i
control|)
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|ApplicationHistoryData
name|appData
init|=
name|store
operator|.
name|getApplication
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appData
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appId
operator|.
name|toString
argument_list|()
argument_list|,
name|appData
operator|.
name|getApplicationName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appId
operator|.
name|toString
argument_list|()
argument_list|,
name|appData
operator|.
name|getDiagnosticsInfo
argument_list|()
argument_list|)
expr_stmt|;
comment|// read application attempt history data
name|Assert
operator|.
name|assertEquals
argument_list|(
name|num
argument_list|,
name|store
operator|.
name|getApplicationAttempts
argument_list|(
name|appId
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|num
condition|;
operator|++
name|j
control|)
block|{
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|j
argument_list|)
decl_stmt|;
name|ApplicationAttemptHistoryData
name|attemptData
init|=
name|store
operator|.
name|getApplicationAttempt
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|attemptData
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|,
name|attemptData
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|missingApplicationAttempt
operator|&&
name|j
operator|==
name|num
condition|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|attemptData
operator|.
name|getDiagnosticsInfo
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|,
name|attemptData
operator|.
name|getDiagnosticsInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// read container history data
name|Assert
operator|.
name|assertEquals
argument_list|(
name|num
argument_list|,
name|store
operator|.
name|getContainers
argument_list|(
name|appAttemptId
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|1
init|;
name|k
operator|<=
name|num
condition|;
operator|++
name|k
control|)
block|{
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newInstance
argument_list|(
name|appAttemptId
argument_list|,
name|k
argument_list|)
decl_stmt|;
name|ContainerHistoryData
name|containerData
init|=
name|store
operator|.
name|getContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|containerData
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
name|containerId
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|containerData
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|missingContainer
operator|&&
name|k
operator|==
name|num
condition|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|containerData
operator|.
name|getDiagnosticsInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|,
name|containerData
operator|.
name|getDiagnosticsInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|ContainerHistoryData
name|masterContainer
init|=
name|store
operator|.
name|getAMContainer
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|masterContainer
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerId
operator|.
name|newInstance
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|)
argument_list|,
name|masterContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testWriteAfterApplicationFinish ()
specifier|public
name|void
name|testWriteAfterApplicationFinish
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testWriteAfterApplicationFinish"
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|writeApplicationStartData
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|writeApplicationFinishData
argument_list|(
name|appId
argument_list|)
expr_stmt|;
comment|// write application attempt history data
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|writeApplicationAttemptStartData
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"is not opened"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|writeApplicationAttemptFinishData
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"is not opened"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// write container history data
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newInstance
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|writeContainerStartData
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"is not opened"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|writeContainerFinishData
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"is not opened"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMassiveWriteContainerHistoryData ()
specifier|public
name|void
name|testMassiveWriteContainerHistoryData
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testMassiveWriteContainerHistoryData"
argument_list|)
expr_stmt|;
name|long
name|mb
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
name|long
name|usedDiskBefore
init|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|fsWorkingPath
argument_list|)
operator|.
name|getLength
argument_list|()
operator|/
name|mb
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|writeApplicationStartData
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|100000
condition|;
operator|++
name|i
control|)
block|{
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newInstance
argument_list|(
name|appAttemptId
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|writeContainerStartData
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|writeContainerFinishData
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
name|writeApplicationFinishData
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|long
name|usedDiskAfter
init|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|fsWorkingPath
argument_list|)
operator|.
name|getLength
argument_list|()
operator|/
name|mb
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
name|usedDiskAfter
operator|-
name|usedDiskBefore
operator|)
operator|<
literal|20
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMissingContainerHistoryData ()
specifier|public
name|void
name|testMissingContainerHistoryData
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testMissingContainerHistoryData"
argument_list|)
expr_stmt|;
name|testWriteHistoryData
argument_list|(
literal|3
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testReadHistoryData
argument_list|(
literal|3
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMissingApplicationAttemptHistoryData ()
specifier|public
name|void
name|testMissingApplicationAttemptHistoryData
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testMissingApplicationAttemptHistoryData"
argument_list|)
expr_stmt|;
name|testWriteHistoryData
argument_list|(
literal|3
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testReadHistoryData
argument_list|(
literal|3
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInitExistingWorkingDirectoryInSafeMode ()
specifier|public
name|void
name|testInitExistingWorkingDirectoryInSafeMode
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testInitExistingWorkingDirectoryInSafeMode"
argument_list|)
expr_stmt|;
name|tearDown
argument_list|()
expr_stmt|;
comment|// Setup file system to inject startup conditions
name|FileSystem
name|fs
init|=
name|spy
argument_list|(
operator|new
name|RawLocalFileSystem
argument_list|()
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|fs
argument_list|)
operator|.
name|isDirectory
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|initStore
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception should not be thrown: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Make sure that directory creation was not attempted
name|verify
argument_list|(
name|fs
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|isDirectory
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|mkdirs
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInitNonExistingWorkingDirectoryInSafeMode ()
specifier|public
name|void
name|testInitNonExistingWorkingDirectoryInSafeMode
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testInitNonExistingWorkingDirectoryInSafeMode"
argument_list|)
expr_stmt|;
name|tearDown
argument_list|()
expr_stmt|;
comment|// Setup file system to inject startup conditions
name|FileSystem
name|fs
init|=
name|spy
argument_list|(
operator|new
name|RawLocalFileSystem
argument_list|()
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|when
argument_list|(
name|fs
argument_list|)
operator|.
name|isDirectory
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|fs
argument_list|)
operator|.
name|mkdirs
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|initStore
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception should have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Expected failure
block|}
comment|// Make sure that directory creation was attempted
name|verify
argument_list|(
name|fs
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|isDirectory
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|mkdirs
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

