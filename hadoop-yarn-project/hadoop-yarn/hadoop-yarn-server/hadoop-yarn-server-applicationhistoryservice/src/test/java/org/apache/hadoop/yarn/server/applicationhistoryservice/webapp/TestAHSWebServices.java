begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.applicationhistoryservice.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|PseudoAuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationBaseProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|ApplicationHistoryClientService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|ApplicationHistoryManagerOnTimelineStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|TestApplicationHistoryManagerOnTimelineStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|TimelineDataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|TimelineStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|security
operator|.
name|TimelineACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineAbout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|timeline
operator|.
name|TimelineUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|GenericExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|JerseyTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebServicesTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|util
operator|.
name|WebAppUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceServletContextListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|ServletModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|UniformInterfaceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|guice
operator|.
name|spi
operator|.
name|container
operator|.
name|servlet
operator|.
name|GuiceContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|test
operator|.
name|framework
operator|.
name|WebAppDescriptor
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestAHSWebServices
specifier|public
class|class
name|TestAHSWebServices
extends|extends
name|JerseyTestBase
block|{
DECL|field|historyClientService
specifier|private
specifier|static
name|ApplicationHistoryClientService
name|historyClientService
decl_stmt|;
DECL|field|USERS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|USERS
init|=
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"bar"
block|}
decl_stmt|;
DECL|field|MAX_APPS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_APPS
init|=
literal|5
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupClass ()
specifier|public
specifier|static
name|void
name|setupClass
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|TimelineStore
name|store
init|=
name|TestApplicationHistoryManagerOnTimelineStore
operator|.
name|createStore
argument_list|(
name|MAX_APPS
argument_list|)
decl_stmt|;
name|TimelineACLsManager
name|aclsManager
init|=
operator|new
name|TimelineACLsManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|aclsManager
operator|.
name|setTimelineStore
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|TimelineDataManager
name|dataManager
init|=
operator|new
name|TimelineDataManager
argument_list|(
name|store
argument_list|,
name|aclsManager
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|dataManager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ApplicationACLsManager
name|appAclsManager
init|=
operator|new
name|ApplicationACLsManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ApplicationHistoryManagerOnTimelineStore
name|historyManager
init|=
operator|new
name|ApplicationHistoryManagerOnTimelineStore
argument_list|(
name|dataManager
argument_list|,
name|appAclsManager
argument_list|)
decl_stmt|;
name|historyManager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|historyClientService
operator|=
operator|new
name|ApplicationHistoryClientService
argument_list|(
name|historyManager
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Do Nothing
block|}
block|}
expr_stmt|;
name|historyClientService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|historyClientService
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDownClass ()
specifier|public
specifier|static
name|void
name|tearDownClass
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|historyClientService
operator|!=
literal|null
condition|)
block|{
name|historyClientService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Parameterized
operator|.
name|Parameters
DECL|method|rounds ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|rounds
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|0
block|}
block|,
block|{
literal|1
block|}
block|}
argument_list|)
return|;
block|}
DECL|field|injector
specifier|private
name|Injector
name|injector
init|=
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|ServletModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configureServlets
parameter_list|()
block|{
name|bind
argument_list|(
name|JAXBContextResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|AHSWebServices
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|GenericExceptionHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|ApplicationBaseProtocol
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|historyClientService
argument_list|)
expr_stmt|;
name|serve
argument_list|(
literal|"/*"
argument_list|)
operator|.
name|with
argument_list|(
name|GuiceContainer
operator|.
name|class
argument_list|)
expr_stmt|;
name|filter
argument_list|(
literal|"/*"
argument_list|)
operator|.
name|through
argument_list|(
name|TestSimpleAuthFilter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
annotation|@
name|Singleton
DECL|class|TestSimpleAuthFilter
specifier|public
specifier|static
class|class
name|TestSimpleAuthFilter
extends|extends
name|AuthenticationFilter
block|{
annotation|@
name|Override
DECL|method|getConfiguration (String configPrefix, FilterConfig filterConfig)
specifier|protected
name|Properties
name|getConfiguration
parameter_list|(
name|String
name|configPrefix
parameter_list|,
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{
name|Properties
name|properties
init|=
name|super
operator|.
name|getConfiguration
argument_list|(
name|configPrefix
argument_list|,
name|filterConfig
argument_list|)
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|PseudoAuthenticationHandler
operator|.
name|ANONYMOUS_ALLOWED
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
return|return
name|properties
return|;
block|}
block|}
DECL|class|GuiceServletConfig
specifier|public
class|class
name|GuiceServletConfig
extends|extends
name|GuiceServletContextListener
block|{
annotation|@
name|Override
DECL|method|getInjector ()
specifier|protected
name|Injector
name|getInjector
parameter_list|()
block|{
return|return
name|injector
return|;
block|}
block|}
DECL|field|round
specifier|private
name|int
name|round
decl_stmt|;
DECL|method|TestAHSWebServices (int round)
specifier|public
name|TestAHSWebServices
parameter_list|(
name|int
name|round
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|WebAppDescriptor
operator|.
name|Builder
argument_list|(
literal|"org.apache.hadoop.yarn.server.applicationhistoryservice.webapp"
argument_list|)
operator|.
name|contextListenerClass
argument_list|(
name|GuiceServletConfig
operator|.
name|class
argument_list|)
operator|.
name|filterClass
argument_list|(
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceFilter
operator|.
name|class
argument_list|)
operator|.
name|contextPath
argument_list|(
literal|"jersey-guice-filter"
argument_list|)
operator|.
name|servletPath
argument_list|(
literal|"/"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|round
operator|=
name|round
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidApp ()
specifier|public
name|void
name|testInvalidApp
parameter_list|()
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|MAX_APPS
operator|+
literal|1
argument_list|)
decl_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"applicationhistory"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|path
argument_list|(
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"user.name"
argument_list|,
name|USERS
index|[
name|round
index|]
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"404 not found expected"
argument_list|,
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidAttempt ()
specifier|public
name|void
name|testInvalidAttempt
parameter_list|()
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|MAX_APPS
operator|+
literal|1
argument_list|)
decl_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"applicationhistory"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|path
argument_list|(
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|path
argument_list|(
literal|"appattempts"
argument_list|)
operator|.
name|path
argument_list|(
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"user.name"
argument_list|,
name|USERS
index|[
name|round
index|]
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|round
operator|==
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertEquals
argument_list|(
literal|"404 not found expected"
argument_list|,
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidContainer ()
specifier|public
name|void
name|testInvalidContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
name|MAX_APPS
operator|+
literal|1
argument_list|)
decl_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"applicationhistory"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|path
argument_list|(
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|path
argument_list|(
literal|"appattempts"
argument_list|)
operator|.
name|path
argument_list|(
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|path
argument_list|(
literal|"containers"
argument_list|)
operator|.
name|path
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"user.name"
argument_list|,
name|USERS
index|[
name|round
index|]
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|round
operator|==
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertEquals
argument_list|(
literal|"404 not found expected"
argument_list|,
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidUri ()
specifier|public
name|void
name|testInvalidUri
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|String
name|responseStr
init|=
literal|""
decl_stmt|;
try|try
block|{
name|responseStr
operator|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"applicationhistory"
argument_list|)
operator|.
name|path
argument_list|(
literal|"bogus"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"user.name"
argument_list|,
name|USERS
index|[
name|round
index|]
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid uri"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"error string exists and shouldn't"
argument_list|,
literal|""
argument_list|,
name|responseStr
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInvalidUri2 ()
specifier|public
name|void
name|testInvalidUri2
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|String
name|responseStr
init|=
literal|""
decl_stmt|;
try|try
block|{
name|responseStr
operator|=
name|r
operator|.
name|queryParam
argument_list|(
literal|"user.name"
argument_list|,
name|USERS
index|[
name|round
index|]
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid uri"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"error string exists and shouldn't"
argument_list|,
literal|""
argument_list|,
name|responseStr
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInvalidAccept ()
specifier|public
name|void
name|testInvalidAccept
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|String
name|responseStr
init|=
literal|""
decl_stmt|;
try|try
block|{
name|responseStr
operator|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"applicationhistory"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"user.name"
argument_list|,
name|USERS
index|[
name|round
index|]
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid uri"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"error string exists and shouldn't"
argument_list|,
literal|""
argument_list|,
name|responseStr
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAbout ()
specifier|public
name|void
name|testAbout
parameter_list|()
throws|throws
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"applicationhistory"
argument_list|)
operator|.
name|path
argument_list|(
literal|"about"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"user.name"
argument_list|,
name|USERS
index|[
name|round
index|]
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|TimelineAbout
name|actualAbout
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|TimelineAbout
operator|.
name|class
argument_list|)
decl_stmt|;
name|TimelineAbout
name|expectedAbout
init|=
name|TimelineUtils
operator|.
name|createTimelineAbout
argument_list|(
literal|"Generic History Service API"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Timeline service about response is null"
argument_list|,
name|actualAbout
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedAbout
operator|.
name|getAbout
argument_list|()
argument_list|,
name|actualAbout
operator|.
name|getAbout
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedAbout
operator|.
name|getTimelineServiceVersion
argument_list|()
argument_list|,
name|actualAbout
operator|.
name|getTimelineServiceVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedAbout
operator|.
name|getTimelineServiceBuildVersion
argument_list|()
argument_list|,
name|actualAbout
operator|.
name|getTimelineServiceBuildVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedAbout
operator|.
name|getTimelineServiceVersionBuiltOn
argument_list|()
argument_list|,
name|actualAbout
operator|.
name|getTimelineServiceVersionBuiltOn
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedAbout
operator|.
name|getHadoopVersion
argument_list|()
argument_list|,
name|actualAbout
operator|.
name|getHadoopVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedAbout
operator|.
name|getHadoopBuildVersion
argument_list|()
argument_list|,
name|actualAbout
operator|.
name|getHadoopBuildVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedAbout
operator|.
name|getHadoopVersionBuiltOn
argument_list|()
argument_list|,
name|actualAbout
operator|.
name|getHadoopVersionBuiltOn
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQuery ()
specifier|public
name|void
name|testAppsQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"applicationhistory"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"state"
argument_list|,
name|YarnApplicationState
operator|.
name|FINISHED
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"user.name"
argument_list|,
name|USERS
index|[
name|round
index|]
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|apps
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|array
init|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|5
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleApp ()
specifier|public
name|void
name|testSingleApp
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"applicationhistory"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|path
argument_list|(
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"user.name"
argument_list|,
name|USERS
index|[
name|round
index|]
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|app
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|appId
operator|.
name|toString
argument_list|()
argument_list|,
name|app
operator|.
name|getString
argument_list|(
literal|"appId"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test app"
argument_list|,
name|app
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|round
operator|==
literal|0
condition|?
literal|"test diagnostics info"
else|:
literal|""
argument_list|,
name|app
operator|.
name|get
argument_list|(
literal|"diagnosticsInfo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test queue"
argument_list|,
name|app
operator|.
name|get
argument_list|(
literal|"queue"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"user1"
argument_list|,
name|app
operator|.
name|get
argument_list|(
literal|"user"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test app type"
argument_list|,
name|app
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FinalApplicationStatus
operator|.
name|UNDEFINED
operator|.
name|toString
argument_list|()
argument_list|,
name|app
operator|.
name|get
argument_list|(
literal|"finalAppStatus"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
operator|.
name|toString
argument_list|()
argument_list|,
name|app
operator|.
name|get
argument_list|(
literal|"appState"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleAttempts ()
specifier|public
name|void
name|testMultipleAttempts
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"applicationhistory"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|path
argument_list|(
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|path
argument_list|(
literal|"appattempts"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"user.name"
argument_list|,
name|USERS
index|[
name|round
index|]
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|round
operator|==
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|appAttempts
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"appAttempts"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|appAttempts
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|array
init|=
name|appAttempts
operator|.
name|getJSONArray
argument_list|(
literal|"appAttempt"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|5
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleAttempt ()
specifier|public
name|void
name|testSingleAttempt
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"applicationhistory"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|path
argument_list|(
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|path
argument_list|(
literal|"appattempts"
argument_list|)
operator|.
name|path
argument_list|(
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"user.name"
argument_list|,
name|USERS
index|[
name|round
index|]
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|round
operator|==
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|appAttempt
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"appAttempt"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|,
name|appAttempt
operator|.
name|getString
argument_list|(
literal|"appAttemptId"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test host"
argument_list|,
name|appAttempt
operator|.
name|getString
argument_list|(
literal|"host"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test diagnostics info"
argument_list|,
name|appAttempt
operator|.
name|getString
argument_list|(
literal|"diagnosticsInfo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test tracking url"
argument_list|,
name|appAttempt
operator|.
name|getString
argument_list|(
literal|"trackingUrl"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|YarnApplicationAttemptState
operator|.
name|FINISHED
operator|.
name|toString
argument_list|()
argument_list|,
name|appAttempt
operator|.
name|get
argument_list|(
literal|"appAttemptState"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleContainers ()
specifier|public
name|void
name|testMultipleContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"applicationhistory"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|path
argument_list|(
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|path
argument_list|(
literal|"appattempts"
argument_list|)
operator|.
name|path
argument_list|(
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|path
argument_list|(
literal|"containers"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"user.name"
argument_list|,
name|USERS
index|[
name|round
index|]
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|round
operator|==
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|containers
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"containers"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|containers
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|array
init|=
name|containers
operator|.
name|getJSONArray
argument_list|(
literal|"container"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|5
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleContainer ()
specifier|public
name|void
name|testSingleContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"applicationhistory"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|path
argument_list|(
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|path
argument_list|(
literal|"appattempts"
argument_list|)
operator|.
name|path
argument_list|(
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|path
argument_list|(
literal|"containers"
argument_list|)
operator|.
name|path
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"user.name"
argument_list|,
name|USERS
index|[
name|round
index|]
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|round
operator|==
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|container
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"container"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|,
name|container
operator|.
name|getString
argument_list|(
literal|"containerId"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test diagnostics info"
argument_list|,
name|container
operator|.
name|getString
argument_list|(
literal|"diagnosticsInfo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-1"
argument_list|,
name|container
operator|.
name|getString
argument_list|(
literal|"allocatedMB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-1"
argument_list|,
name|container
operator|.
name|getString
argument_list|(
literal|"allocatedVCores"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"test host"
argument_list|,
literal|100
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|container
operator|.
name|getString
argument_list|(
literal|"assignedNodeId"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-1"
argument_list|,
name|container
operator|.
name|getString
argument_list|(
literal|"priority"
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|WebAppUtils
operator|.
name|getHttpSchemePrefix
argument_list|(
name|conf
argument_list|)
operator|+
name|WebAppUtils
operator|.
name|getAHSWebAppURLWithoutScheme
argument_list|(
name|conf
argument_list|)
operator|+
literal|"/applicationhistory/logs/test host:100/container_0_0001_01_000001/"
operator|+
literal|"container_0_0001_01_000001/user1"
argument_list|,
name|container
operator|.
name|getString
argument_list|(
literal|"logUrl"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|COMPLETE
operator|.
name|toString
argument_list|()
argument_list|,
name|container
operator|.
name|getString
argument_list|(
literal|"containerState"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

