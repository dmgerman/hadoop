begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.applicationhistoryservice
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
operator|.
name|TFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|ApplicationHistoryServerProtos
operator|.
name|ApplicationAttemptFinishDataProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|ApplicationHistoryServerProtos
operator|.
name|ApplicationAttemptStartDataProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|ApplicationHistoryServerProtos
operator|.
name|ApplicationFinishDataProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|ApplicationHistoryServerProtos
operator|.
name|ApplicationStartDataProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|ApplicationHistoryServerProtos
operator|.
name|ContainerFinishDataProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|ApplicationHistoryServerProtos
operator|.
name|ContainerStartDataProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
operator|.
name|ApplicationAttemptFinishData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
operator|.
name|ApplicationAttemptHistoryData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
operator|.
name|ApplicationAttemptStartData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
operator|.
name|ApplicationFinishData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
operator|.
name|ApplicationHistoryData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
operator|.
name|ApplicationStartData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
operator|.
name|ContainerFinishData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
operator|.
name|ContainerHistoryData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
operator|.
name|ContainerStartData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationAttemptFinishDataPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationAttemptStartDataPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationFinishDataPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationStartDataPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ContainerFinishDataPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ContainerStartDataPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * File system implementation of {@link ApplicationHistoryStore}. In this  * implementation, one application will have just one file in the file system,  * which contains all the history data of one application, and its attempts and  * containers. {@link #applicationStarted(ApplicationStartData)} is supposed to  * be invoked first when writing any history data of one application and it will  * open a file, while {@link #applicationFinished(ApplicationFinishData)} is  * supposed to be last writing operation and will close the file.  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Unstable
DECL|class|FileSystemApplicationHistoryStore
specifier|public
class|class
name|FileSystemApplicationHistoryStore
extends|extends
name|AbstractService
implements|implements
name|ApplicationHistoryStore
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FileSystemApplicationHistoryStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ROOT_DIR_NAME
specifier|private
specifier|static
specifier|final
name|String
name|ROOT_DIR_NAME
init|=
literal|"ApplicationHistoryDataRoot"
decl_stmt|;
DECL|field|MIN_BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|MIN_BLOCK_SIZE
init|=
literal|256
operator|*
literal|1024
decl_stmt|;
DECL|field|START_DATA_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|START_DATA_SUFFIX
init|=
literal|"_start"
decl_stmt|;
DECL|field|FINISH_DATA_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|FINISH_DATA_SUFFIX
init|=
literal|"_finish"
decl_stmt|;
DECL|field|ROOT_DIR_UMASK
specifier|private
specifier|static
specifier|final
name|FsPermission
name|ROOT_DIR_UMASK
init|=
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0740
argument_list|)
decl_stmt|;
DECL|field|HISTORY_FILE_UMASK
specifier|private
specifier|static
specifier|final
name|FsPermission
name|HISTORY_FILE_UMASK
init|=
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0640
argument_list|)
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|rootDirPath
specifier|private
name|Path
name|rootDirPath
decl_stmt|;
DECL|field|outstandingWriters
specifier|private
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|HistoryFileWriter
argument_list|>
name|outstandingWriters
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|HistoryFileWriter
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|FileSystemApplicationHistoryStore ()
specifier|public
name|FileSystemApplicationHistoryStore
parameter_list|()
block|{
name|super
argument_list|(
name|FileSystemApplicationHistoryStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getFileSystem (Path path, Configuration conf)
specifier|protected
name|FileSystem
name|getFileSystem
parameter_list|(
name|Path
name|path
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|public
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|Path
name|fsWorkingPath
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|FS_APPLICATION_HISTORY_STORE_URI
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"hadoop.tmp.dir"
argument_list|)
operator|+
literal|"/yarn/timeline/generic-history"
argument_list|)
argument_list|)
decl_stmt|;
name|rootDirPath
operator|=
operator|new
name|Path
argument_list|(
name|fsWorkingPath
argument_list|,
name|ROOT_DIR_NAME
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|=
name|getFileSystem
argument_list|(
name|fsWorkingPath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|rootDirPath
argument_list|,
name|ROOT_DIR_UMASK
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error when initializing FileSystemHistoryStorage"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|public
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
for|for
control|(
name|Entry
argument_list|<
name|ApplicationId
argument_list|,
name|HistoryFileWriter
argument_list|>
name|entry
range|:
name|outstandingWriters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|outstandingWriters
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getApplication (ApplicationId appId)
specifier|public
name|ApplicationHistoryData
name|getApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|IOException
block|{
name|HistoryFileReader
name|hfReader
init|=
name|getHistoryFileReader
argument_list|(
name|appId
argument_list|)
decl_stmt|;
try|try
block|{
name|boolean
name|readStartData
init|=
literal|false
decl_stmt|;
name|boolean
name|readFinishData
init|=
literal|false
decl_stmt|;
name|ApplicationHistoryData
name|historyData
init|=
name|ApplicationHistoryData
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
name|FinalApplicationStatus
operator|.
name|UNDEFINED
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
operator|!
name|readStartData
operator|||
operator|!
name|readFinishData
operator|)
operator|&&
name|hfReader
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|HistoryFileReader
operator|.
name|Entry
name|entry
init|=
name|hfReader
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|key
operator|.
name|id
operator|.
name|equals
argument_list|(
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|key
operator|.
name|suffix
operator|.
name|equals
argument_list|(
name|START_DATA_SUFFIX
argument_list|)
condition|)
block|{
name|ApplicationStartData
name|startData
init|=
name|parseApplicationStartData
argument_list|(
name|entry
operator|.
name|value
argument_list|)
decl_stmt|;
name|mergeApplicationHistoryData
argument_list|(
name|historyData
argument_list|,
name|startData
argument_list|)
expr_stmt|;
name|readStartData
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|key
operator|.
name|suffix
operator|.
name|equals
argument_list|(
name|FINISH_DATA_SUFFIX
argument_list|)
condition|)
block|{
name|ApplicationFinishData
name|finishData
init|=
name|parseApplicationFinishData
argument_list|(
name|entry
operator|.
name|value
argument_list|)
decl_stmt|;
name|mergeApplicationHistoryData
argument_list|(
name|historyData
argument_list|,
name|finishData
argument_list|)
expr_stmt|;
name|readFinishData
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|readStartData
operator|&&
operator|!
name|readFinishData
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|readStartData
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Start information is missing for application "
operator|+
name|appId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|readFinishData
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Finish information is missing for application "
operator|+
name|appId
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Completed reading history information of application "
operator|+
name|appId
argument_list|)
expr_stmt|;
return|return
name|historyData
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error when reading history file of application "
operator|+
name|appId
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|hfReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getAllApplications ()
specifier|public
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationHistoryData
argument_list|>
name|getAllApplications
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationHistoryData
argument_list|>
name|historyDataMap
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationHistoryData
argument_list|>
argument_list|()
decl_stmt|;
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|rootDirPath
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|files
control|)
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|ApplicationHistoryData
name|historyData
init|=
name|getApplication
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|historyData
operator|!=
literal|null
condition|)
block|{
name|historyDataMap
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|historyData
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Eat the exception not to disturb the getting the next
comment|// ApplicationHistoryData
name|LOG
operator|.
name|error
argument_list|(
literal|"History information of application "
operator|+
name|appId
operator|+
literal|" is not included into the result due to the exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|historyDataMap
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|ApplicationAttemptHistoryData
argument_list|>
DECL|method|getApplicationAttempts (ApplicationId appId)
name|getApplicationAttempts
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|ApplicationAttemptHistoryData
argument_list|>
name|historyDataMap
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|ApplicationAttemptHistoryData
argument_list|>
argument_list|()
decl_stmt|;
name|HistoryFileReader
name|hfReader
init|=
name|getHistoryFileReader
argument_list|(
name|appId
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
name|hfReader
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|HistoryFileReader
operator|.
name|Entry
name|entry
init|=
name|hfReader
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|key
operator|.
name|id
operator|.
name|startsWith
argument_list|(
name|ConverterUtils
operator|.
name|APPLICATION_ATTEMPT_PREFIX
argument_list|)
condition|)
block|{
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|fromString
argument_list|(
name|entry
operator|.
name|key
operator|.
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
operator|.
name|equals
argument_list|(
name|appId
argument_list|)
condition|)
block|{
name|ApplicationAttemptHistoryData
name|historyData
init|=
name|historyDataMap
operator|.
name|get
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|historyData
operator|==
literal|null
condition|)
block|{
name|historyData
operator|=
name|ApplicationAttemptHistoryData
operator|.
name|newInstance
argument_list|(
name|appAttemptId
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|FinalApplicationStatus
operator|.
name|UNDEFINED
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|historyDataMap
operator|.
name|put
argument_list|(
name|appAttemptId
argument_list|,
name|historyData
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|key
operator|.
name|suffix
operator|.
name|equals
argument_list|(
name|START_DATA_SUFFIX
argument_list|)
condition|)
block|{
name|mergeApplicationAttemptHistoryData
argument_list|(
name|historyData
argument_list|,
name|parseApplicationAttemptStartData
argument_list|(
name|entry
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|key
operator|.
name|suffix
operator|.
name|equals
argument_list|(
name|FINISH_DATA_SUFFIX
argument_list|)
condition|)
block|{
name|mergeApplicationAttemptHistoryData
argument_list|(
name|historyData
argument_list|,
name|parseApplicationAttemptFinishData
argument_list|(
name|entry
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Completed reading history information of all application"
operator|+
literal|" attempts of application "
operator|+
name|appId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error when reading history information of some application"
operator|+
literal|" attempts of application "
operator|+
name|appId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|hfReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|historyDataMap
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationAttempt ( ApplicationAttemptId appAttemptId)
specifier|public
name|ApplicationAttemptHistoryData
name|getApplicationAttempt
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
throws|throws
name|IOException
block|{
name|HistoryFileReader
name|hfReader
init|=
name|getHistoryFileReader
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|boolean
name|readStartData
init|=
literal|false
decl_stmt|;
name|boolean
name|readFinishData
init|=
literal|false
decl_stmt|;
name|ApplicationAttemptHistoryData
name|historyData
init|=
name|ApplicationAttemptHistoryData
operator|.
name|newInstance
argument_list|(
name|appAttemptId
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|FinalApplicationStatus
operator|.
name|UNDEFINED
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
operator|!
name|readStartData
operator|||
operator|!
name|readFinishData
operator|)
operator|&&
name|hfReader
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|HistoryFileReader
operator|.
name|Entry
name|entry
init|=
name|hfReader
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|key
operator|.
name|id
operator|.
name|equals
argument_list|(
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|key
operator|.
name|suffix
operator|.
name|equals
argument_list|(
name|START_DATA_SUFFIX
argument_list|)
condition|)
block|{
name|ApplicationAttemptStartData
name|startData
init|=
name|parseApplicationAttemptStartData
argument_list|(
name|entry
operator|.
name|value
argument_list|)
decl_stmt|;
name|mergeApplicationAttemptHistoryData
argument_list|(
name|historyData
argument_list|,
name|startData
argument_list|)
expr_stmt|;
name|readStartData
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|key
operator|.
name|suffix
operator|.
name|equals
argument_list|(
name|FINISH_DATA_SUFFIX
argument_list|)
condition|)
block|{
name|ApplicationAttemptFinishData
name|finishData
init|=
name|parseApplicationAttemptFinishData
argument_list|(
name|entry
operator|.
name|value
argument_list|)
decl_stmt|;
name|mergeApplicationAttemptHistoryData
argument_list|(
name|historyData
argument_list|,
name|finishData
argument_list|)
expr_stmt|;
name|readFinishData
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|readStartData
operator|&&
operator|!
name|readFinishData
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|readStartData
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Start information is missing for application attempt "
operator|+
name|appAttemptId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|readFinishData
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Finish information is missing for application attempt "
operator|+
name|appAttemptId
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Completed reading history information of application attempt "
operator|+
name|appAttemptId
argument_list|)
expr_stmt|;
return|return
name|historyData
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error when reading history file of application attempt"
operator|+
name|appAttemptId
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|hfReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getContainer (ContainerId containerId)
specifier|public
name|ContainerHistoryData
name|getContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|IOException
block|{
name|HistoryFileReader
name|hfReader
init|=
name|getHistoryFileReader
argument_list|(
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|boolean
name|readStartData
init|=
literal|false
decl_stmt|;
name|boolean
name|readFinishData
init|=
literal|false
decl_stmt|;
name|ContainerHistoryData
name|historyData
init|=
name|ContainerHistoryData
operator|.
name|newInstance
argument_list|(
name|containerId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
operator|!
name|readStartData
operator|||
operator|!
name|readFinishData
operator|)
operator|&&
name|hfReader
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|HistoryFileReader
operator|.
name|Entry
name|entry
init|=
name|hfReader
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|key
operator|.
name|id
operator|.
name|equals
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|key
operator|.
name|suffix
operator|.
name|equals
argument_list|(
name|START_DATA_SUFFIX
argument_list|)
condition|)
block|{
name|ContainerStartData
name|startData
init|=
name|parseContainerStartData
argument_list|(
name|entry
operator|.
name|value
argument_list|)
decl_stmt|;
name|mergeContainerHistoryData
argument_list|(
name|historyData
argument_list|,
name|startData
argument_list|)
expr_stmt|;
name|readStartData
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|key
operator|.
name|suffix
operator|.
name|equals
argument_list|(
name|FINISH_DATA_SUFFIX
argument_list|)
condition|)
block|{
name|ContainerFinishData
name|finishData
init|=
name|parseContainerFinishData
argument_list|(
name|entry
operator|.
name|value
argument_list|)
decl_stmt|;
name|mergeContainerHistoryData
argument_list|(
name|historyData
argument_list|,
name|finishData
argument_list|)
expr_stmt|;
name|readFinishData
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|readStartData
operator|&&
operator|!
name|readFinishData
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|readStartData
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Start information is missing for container "
operator|+
name|containerId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|readFinishData
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Finish information is missing for container "
operator|+
name|containerId
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Completed reading history information of container "
operator|+
name|containerId
argument_list|)
expr_stmt|;
return|return
name|historyData
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error when reading history file of container "
operator|+
name|containerId
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|hfReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getAMContainer (ApplicationAttemptId appAttemptId)
specifier|public
name|ContainerHistoryData
name|getAMContainer
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
throws|throws
name|IOException
block|{
name|ApplicationAttemptHistoryData
name|attemptHistoryData
init|=
name|getApplicationAttempt
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|attemptHistoryData
operator|==
literal|null
operator|||
name|attemptHistoryData
operator|.
name|getMasterContainerId
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getContainer
argument_list|(
name|attemptHistoryData
operator|.
name|getMasterContainerId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getContainers ( ApplicationAttemptId appAttemptId)
specifier|public
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|ContainerHistoryData
argument_list|>
name|getContainers
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|ContainerHistoryData
argument_list|>
name|historyDataMap
init|=
operator|new
name|HashMap
argument_list|<
name|ContainerId
argument_list|,
name|ContainerHistoryData
argument_list|>
argument_list|()
decl_stmt|;
name|HistoryFileReader
name|hfReader
init|=
name|getHistoryFileReader
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
name|hfReader
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|HistoryFileReader
operator|.
name|Entry
name|entry
init|=
name|hfReader
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|key
operator|.
name|id
operator|.
name|startsWith
argument_list|(
name|ConverterUtils
operator|.
name|CONTAINER_PREFIX
argument_list|)
condition|)
block|{
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|fromString
argument_list|(
name|entry
operator|.
name|key
operator|.
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|equals
argument_list|(
name|appAttemptId
argument_list|)
condition|)
block|{
name|ContainerHistoryData
name|historyData
init|=
name|historyDataMap
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|historyData
operator|==
literal|null
condition|)
block|{
name|historyData
operator|=
name|ContainerHistoryData
operator|.
name|newInstance
argument_list|(
name|containerId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|historyDataMap
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|historyData
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|key
operator|.
name|suffix
operator|.
name|equals
argument_list|(
name|START_DATA_SUFFIX
argument_list|)
condition|)
block|{
name|mergeContainerHistoryData
argument_list|(
name|historyData
argument_list|,
name|parseContainerStartData
argument_list|(
name|entry
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|key
operator|.
name|suffix
operator|.
name|equals
argument_list|(
name|FINISH_DATA_SUFFIX
argument_list|)
condition|)
block|{
name|mergeContainerHistoryData
argument_list|(
name|historyData
argument_list|,
name|parseContainerFinishData
argument_list|(
name|entry
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Completed reading history information of all containers"
operator|+
literal|" of application attempt "
operator|+
name|appAttemptId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error when reading history information of some containers"
operator|+
literal|" of application attempt "
operator|+
name|appAttemptId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|hfReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|historyDataMap
return|;
block|}
annotation|@
name|Override
DECL|method|applicationStarted (ApplicationStartData appStart)
specifier|public
name|void
name|applicationStarted
parameter_list|(
name|ApplicationStartData
name|appStart
parameter_list|)
throws|throws
name|IOException
block|{
name|HistoryFileWriter
name|hfWriter
init|=
name|outstandingWriters
operator|.
name|get
argument_list|(
name|appStart
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|hfWriter
operator|==
literal|null
condition|)
block|{
name|Path
name|applicationHistoryFile
init|=
operator|new
name|Path
argument_list|(
name|rootDirPath
argument_list|,
name|appStart
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|hfWriter
operator|=
operator|new
name|HistoryFileWriter
argument_list|(
name|applicationHistoryFile
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Opened history file of application "
operator|+
name|appStart
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error when openning history file of application "
operator|+
name|appStart
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|outstandingWriters
operator|.
name|put
argument_list|(
name|appStart
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|hfWriter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"History file of application "
operator|+
name|appStart
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" is already opened"
argument_list|)
throw|;
block|}
assert|assert
name|appStart
operator|instanceof
name|ApplicationStartDataPBImpl
assert|;
try|try
block|{
name|hfWriter
operator|.
name|writeHistoryData
argument_list|(
operator|new
name|HistoryDataKey
argument_list|(
name|appStart
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|START_DATA_SUFFIX
argument_list|)
argument_list|,
operator|(
operator|(
name|ApplicationStartDataPBImpl
operator|)
name|appStart
operator|)
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Start information of application "
operator|+
name|appStart
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" is written"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error when writing start information of application "
operator|+
name|appStart
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|applicationFinished (ApplicationFinishData appFinish)
specifier|public
name|void
name|applicationFinished
parameter_list|(
name|ApplicationFinishData
name|appFinish
parameter_list|)
throws|throws
name|IOException
block|{
name|HistoryFileWriter
name|hfWriter
init|=
name|getHistoryFileWriter
argument_list|(
name|appFinish
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|appFinish
operator|instanceof
name|ApplicationFinishDataPBImpl
assert|;
try|try
block|{
name|hfWriter
operator|.
name|writeHistoryData
argument_list|(
operator|new
name|HistoryDataKey
argument_list|(
name|appFinish
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|FINISH_DATA_SUFFIX
argument_list|)
argument_list|,
operator|(
operator|(
name|ApplicationFinishDataPBImpl
operator|)
name|appFinish
operator|)
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finish information of application "
operator|+
name|appFinish
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" is written"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error when writing finish information of application "
operator|+
name|appFinish
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|hfWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|outstandingWriters
operator|.
name|remove
argument_list|(
name|appFinish
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|applicationAttemptStarted ( ApplicationAttemptStartData appAttemptStart)
specifier|public
name|void
name|applicationAttemptStarted
parameter_list|(
name|ApplicationAttemptStartData
name|appAttemptStart
parameter_list|)
throws|throws
name|IOException
block|{
name|HistoryFileWriter
name|hfWriter
init|=
name|getHistoryFileWriter
argument_list|(
name|appAttemptStart
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|appAttemptStart
operator|instanceof
name|ApplicationAttemptStartDataPBImpl
assert|;
try|try
block|{
name|hfWriter
operator|.
name|writeHistoryData
argument_list|(
operator|new
name|HistoryDataKey
argument_list|(
name|appAttemptStart
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|START_DATA_SUFFIX
argument_list|)
argument_list|,
operator|(
operator|(
name|ApplicationAttemptStartDataPBImpl
operator|)
name|appAttemptStart
operator|)
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Start information of application attempt "
operator|+
name|appAttemptStart
operator|.
name|getApplicationAttemptId
argument_list|()
operator|+
literal|" is written"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error when writing start information of application attempt "
operator|+
name|appAttemptStart
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|applicationAttemptFinished ( ApplicationAttemptFinishData appAttemptFinish)
specifier|public
name|void
name|applicationAttemptFinished
parameter_list|(
name|ApplicationAttemptFinishData
name|appAttemptFinish
parameter_list|)
throws|throws
name|IOException
block|{
name|HistoryFileWriter
name|hfWriter
init|=
name|getHistoryFileWriter
argument_list|(
name|appAttemptFinish
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|appAttemptFinish
operator|instanceof
name|ApplicationAttemptFinishDataPBImpl
assert|;
try|try
block|{
name|hfWriter
operator|.
name|writeHistoryData
argument_list|(
operator|new
name|HistoryDataKey
argument_list|(
name|appAttemptFinish
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|FINISH_DATA_SUFFIX
argument_list|)
argument_list|,
operator|(
operator|(
name|ApplicationAttemptFinishDataPBImpl
operator|)
name|appAttemptFinish
operator|)
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finish information of application attempt "
operator|+
name|appAttemptFinish
operator|.
name|getApplicationAttemptId
argument_list|()
operator|+
literal|" is written"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error when writing finish information of application attempt "
operator|+
name|appAttemptFinish
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|containerStarted (ContainerStartData containerStart)
specifier|public
name|void
name|containerStarted
parameter_list|(
name|ContainerStartData
name|containerStart
parameter_list|)
throws|throws
name|IOException
block|{
name|HistoryFileWriter
name|hfWriter
init|=
name|getHistoryFileWriter
argument_list|(
name|containerStart
operator|.
name|getContainerId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|containerStart
operator|instanceof
name|ContainerStartDataPBImpl
assert|;
try|try
block|{
name|hfWriter
operator|.
name|writeHistoryData
argument_list|(
operator|new
name|HistoryDataKey
argument_list|(
name|containerStart
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|START_DATA_SUFFIX
argument_list|)
argument_list|,
operator|(
operator|(
name|ContainerStartDataPBImpl
operator|)
name|containerStart
operator|)
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Start information of container "
operator|+
name|containerStart
operator|.
name|getContainerId
argument_list|()
operator|+
literal|" is written"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error when writing start information of container "
operator|+
name|containerStart
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|containerFinished (ContainerFinishData containerFinish)
specifier|public
name|void
name|containerFinished
parameter_list|(
name|ContainerFinishData
name|containerFinish
parameter_list|)
throws|throws
name|IOException
block|{
name|HistoryFileWriter
name|hfWriter
init|=
name|getHistoryFileWriter
argument_list|(
name|containerFinish
operator|.
name|getContainerId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|containerFinish
operator|instanceof
name|ContainerFinishDataPBImpl
assert|;
try|try
block|{
name|hfWriter
operator|.
name|writeHistoryData
argument_list|(
operator|new
name|HistoryDataKey
argument_list|(
name|containerFinish
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|FINISH_DATA_SUFFIX
argument_list|)
argument_list|,
operator|(
operator|(
name|ContainerFinishDataPBImpl
operator|)
name|containerFinish
operator|)
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finish information of container "
operator|+
name|containerFinish
operator|.
name|getContainerId
argument_list|()
operator|+
literal|" is written"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error when writing finish information of container "
operator|+
name|containerFinish
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseApplicationStartData (byte[] value)
specifier|private
specifier|static
name|ApplicationStartData
name|parseApplicationStartData
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
operator|new
name|ApplicationStartDataPBImpl
argument_list|(
name|ApplicationStartDataProto
operator|.
name|parseFrom
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
DECL|method|parseApplicationFinishData (byte[] value)
specifier|private
specifier|static
name|ApplicationFinishData
name|parseApplicationFinishData
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
operator|new
name|ApplicationFinishDataPBImpl
argument_list|(
name|ApplicationFinishDataProto
operator|.
name|parseFrom
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
DECL|method|parseApplicationAttemptStartData ( byte[] value)
specifier|private
specifier|static
name|ApplicationAttemptStartData
name|parseApplicationAttemptStartData
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
operator|new
name|ApplicationAttemptStartDataPBImpl
argument_list|(
name|ApplicationAttemptStartDataProto
operator|.
name|parseFrom
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ApplicationAttemptFinishData
DECL|method|parseApplicationAttemptFinishData (byte[] value)
name|parseApplicationAttemptFinishData
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
operator|new
name|ApplicationAttemptFinishDataPBImpl
argument_list|(
name|ApplicationAttemptFinishDataProto
operator|.
name|parseFrom
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
DECL|method|parseContainerStartData (byte[] value)
specifier|private
specifier|static
name|ContainerStartData
name|parseContainerStartData
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
operator|new
name|ContainerStartDataPBImpl
argument_list|(
name|ContainerStartDataProto
operator|.
name|parseFrom
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
DECL|method|parseContainerFinishData (byte[] value)
specifier|private
specifier|static
name|ContainerFinishData
name|parseContainerFinishData
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
operator|new
name|ContainerFinishDataPBImpl
argument_list|(
name|ContainerFinishDataProto
operator|.
name|parseFrom
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
DECL|method|mergeApplicationHistoryData ( ApplicationHistoryData historyData, ApplicationStartData startData)
specifier|private
specifier|static
name|void
name|mergeApplicationHistoryData
parameter_list|(
name|ApplicationHistoryData
name|historyData
parameter_list|,
name|ApplicationStartData
name|startData
parameter_list|)
block|{
name|historyData
operator|.
name|setApplicationName
argument_list|(
name|startData
operator|.
name|getApplicationName
argument_list|()
argument_list|)
expr_stmt|;
name|historyData
operator|.
name|setApplicationType
argument_list|(
name|startData
operator|.
name|getApplicationType
argument_list|()
argument_list|)
expr_stmt|;
name|historyData
operator|.
name|setQueue
argument_list|(
name|startData
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|historyData
operator|.
name|setUser
argument_list|(
name|startData
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|historyData
operator|.
name|setSubmitTime
argument_list|(
name|startData
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
expr_stmt|;
name|historyData
operator|.
name|setStartTime
argument_list|(
name|startData
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|mergeApplicationHistoryData ( ApplicationHistoryData historyData, ApplicationFinishData finishData)
specifier|private
specifier|static
name|void
name|mergeApplicationHistoryData
parameter_list|(
name|ApplicationHistoryData
name|historyData
parameter_list|,
name|ApplicationFinishData
name|finishData
parameter_list|)
block|{
name|historyData
operator|.
name|setFinishTime
argument_list|(
name|finishData
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|historyData
operator|.
name|setDiagnosticsInfo
argument_list|(
name|finishData
operator|.
name|getDiagnosticsInfo
argument_list|()
argument_list|)
expr_stmt|;
name|historyData
operator|.
name|setFinalApplicationStatus
argument_list|(
name|finishData
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|historyData
operator|.
name|setYarnApplicationState
argument_list|(
name|finishData
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|mergeApplicationAttemptHistoryData ( ApplicationAttemptHistoryData historyData, ApplicationAttemptStartData startData)
specifier|private
specifier|static
name|void
name|mergeApplicationAttemptHistoryData
parameter_list|(
name|ApplicationAttemptHistoryData
name|historyData
parameter_list|,
name|ApplicationAttemptStartData
name|startData
parameter_list|)
block|{
name|historyData
operator|.
name|setHost
argument_list|(
name|startData
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|historyData
operator|.
name|setRPCPort
argument_list|(
name|startData
operator|.
name|getRPCPort
argument_list|()
argument_list|)
expr_stmt|;
name|historyData
operator|.
name|setMasterContainerId
argument_list|(
name|startData
operator|.
name|getMasterContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|mergeApplicationAttemptHistoryData ( ApplicationAttemptHistoryData historyData, ApplicationAttemptFinishData finishData)
specifier|private
specifier|static
name|void
name|mergeApplicationAttemptHistoryData
parameter_list|(
name|ApplicationAttemptHistoryData
name|historyData
parameter_list|,
name|ApplicationAttemptFinishData
name|finishData
parameter_list|)
block|{
name|historyData
operator|.
name|setDiagnosticsInfo
argument_list|(
name|finishData
operator|.
name|getDiagnosticsInfo
argument_list|()
argument_list|)
expr_stmt|;
name|historyData
operator|.
name|setTrackingURL
argument_list|(
name|finishData
operator|.
name|getTrackingURL
argument_list|()
argument_list|)
expr_stmt|;
name|historyData
operator|.
name|setFinalApplicationStatus
argument_list|(
name|finishData
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|historyData
operator|.
name|setYarnApplicationAttemptState
argument_list|(
name|finishData
operator|.
name|getYarnApplicationAttemptState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|mergeContainerHistoryData ( ContainerHistoryData historyData, ContainerStartData startData)
specifier|private
specifier|static
name|void
name|mergeContainerHistoryData
parameter_list|(
name|ContainerHistoryData
name|historyData
parameter_list|,
name|ContainerStartData
name|startData
parameter_list|)
block|{
name|historyData
operator|.
name|setAllocatedResource
argument_list|(
name|startData
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
name|historyData
operator|.
name|setAssignedNode
argument_list|(
name|startData
operator|.
name|getAssignedNode
argument_list|()
argument_list|)
expr_stmt|;
name|historyData
operator|.
name|setPriority
argument_list|(
name|startData
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|historyData
operator|.
name|setStartTime
argument_list|(
name|startData
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|mergeContainerHistoryData ( ContainerHistoryData historyData, ContainerFinishData finishData)
specifier|private
specifier|static
name|void
name|mergeContainerHistoryData
parameter_list|(
name|ContainerHistoryData
name|historyData
parameter_list|,
name|ContainerFinishData
name|finishData
parameter_list|)
block|{
name|historyData
operator|.
name|setFinishTime
argument_list|(
name|finishData
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|historyData
operator|.
name|setDiagnosticsInfo
argument_list|(
name|finishData
operator|.
name|getDiagnosticsInfo
argument_list|()
argument_list|)
expr_stmt|;
name|historyData
operator|.
name|setContainerExitStatus
argument_list|(
name|finishData
operator|.
name|getContainerExitStatus
argument_list|()
argument_list|)
expr_stmt|;
name|historyData
operator|.
name|setContainerState
argument_list|(
name|finishData
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getHistoryFileWriter (ApplicationId appId)
specifier|private
name|HistoryFileWriter
name|getHistoryFileWriter
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|IOException
block|{
name|HistoryFileWriter
name|hfWriter
init|=
name|outstandingWriters
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|hfWriter
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"History file of application "
operator|+
name|appId
operator|+
literal|" is not opened"
argument_list|)
throw|;
block|}
return|return
name|hfWriter
return|;
block|}
DECL|method|getHistoryFileReader (ApplicationId appId)
specifier|private
name|HistoryFileReader
name|getHistoryFileReader
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|applicationHistoryFile
init|=
operator|new
name|Path
argument_list|(
name|rootDirPath
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|getFileStatus
argument_list|(
name|applicationHistoryFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|FileNotFoundException
operator|)
operator|new
name|FileNotFoundException
argument_list|(
literal|"History file for"
operator|+
literal|" application "
operator|+
name|appId
operator|+
literal|" is not found: "
operator|+
name|e
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// The history file is still under writing
if|if
condition|(
name|outstandingWriters
operator|.
name|containsKey
argument_list|(
name|appId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"History file for application "
operator|+
name|appId
operator|+
literal|" is under writing"
argument_list|)
throw|;
block|}
return|return
operator|new
name|HistoryFileReader
argument_list|(
name|applicationHistoryFile
argument_list|)
return|;
block|}
DECL|class|HistoryFileReader
specifier|private
class|class
name|HistoryFileReader
block|{
DECL|class|Entry
specifier|private
class|class
name|Entry
block|{
DECL|field|key
specifier|private
name|HistoryDataKey
name|key
decl_stmt|;
DECL|field|value
specifier|private
name|byte
index|[]
name|value
decl_stmt|;
DECL|method|Entry (HistoryDataKey key, byte[] value)
specifier|public
name|Entry
parameter_list|(
name|HistoryDataKey
name|key
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
block|}
DECL|field|reader
specifier|private
name|TFile
operator|.
name|Reader
name|reader
decl_stmt|;
DECL|field|scanner
specifier|private
name|TFile
operator|.
name|Reader
operator|.
name|Scanner
name|scanner
decl_stmt|;
DECL|field|fsdis
name|FSDataInputStream
name|fsdis
decl_stmt|;
DECL|method|HistoryFileReader (Path historyFile)
specifier|public
name|HistoryFileReader
parameter_list|(
name|Path
name|historyFile
parameter_list|)
throws|throws
name|IOException
block|{
name|fsdis
operator|=
name|fs
operator|.
name|open
argument_list|(
name|historyFile
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|TFile
operator|.
name|Reader
argument_list|(
name|fsdis
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|historyFile
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
operator|!
name|scanner
operator|.
name|atEnd
argument_list|()
return|;
block|}
DECL|method|next ()
specifier|public
name|Entry
name|next
parameter_list|()
throws|throws
name|IOException
block|{
name|TFile
operator|.
name|Reader
operator|.
name|Scanner
operator|.
name|Entry
name|entry
init|=
name|scanner
operator|.
name|entry
argument_list|()
decl_stmt|;
name|DataInputStream
name|dis
init|=
name|entry
operator|.
name|getKeyStream
argument_list|()
decl_stmt|;
name|HistoryDataKey
name|key
init|=
operator|new
name|HistoryDataKey
argument_list|()
decl_stmt|;
name|key
operator|.
name|readFields
argument_list|(
name|dis
argument_list|)
expr_stmt|;
name|dis
operator|=
name|entry
operator|.
name|getValueStream
argument_list|()
expr_stmt|;
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
name|entry
operator|.
name|getValueLength
argument_list|()
index|]
decl_stmt|;
name|dis
operator|.
name|read
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|advance
argument_list|()
expr_stmt|;
return|return
operator|new
name|Entry
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|scanner
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|reader
operator|.
name|createScanner
argument_list|()
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|scanner
argument_list|,
name|reader
argument_list|,
name|fsdis
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|HistoryFileWriter
specifier|private
class|class
name|HistoryFileWriter
block|{
DECL|field|fsdos
specifier|private
name|FSDataOutputStream
name|fsdos
decl_stmt|;
DECL|field|writer
specifier|private
name|TFile
operator|.
name|Writer
name|writer
decl_stmt|;
DECL|method|HistoryFileWriter (Path historyFile)
specifier|public
name|HistoryFileWriter
parameter_list|(
name|Path
name|historyFile
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|historyFile
argument_list|)
condition|)
block|{
name|fsdos
operator|=
name|fs
operator|.
name|append
argument_list|(
name|historyFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fsdos
operator|=
name|fs
operator|.
name|create
argument_list|(
name|historyFile
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|fs
operator|.
name|setPermission
argument_list|(
name|historyFile
argument_list|,
name|HISTORY_FILE_UMASK
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|TFile
operator|.
name|Writer
argument_list|(
name|fsdos
argument_list|,
name|MIN_BLOCK_SIZE
argument_list|,
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|FS_APPLICATION_HISTORY_STORE_COMPRESSION_TYPE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_FS_APPLICATION_HISTORY_STORE_COMPRESSION_TYPE
argument_list|)
argument_list|,
literal|null
argument_list|,
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|fsdos
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|writer
argument_list|,
name|fsdos
argument_list|)
expr_stmt|;
block|}
DECL|method|writeHistoryData (HistoryDataKey key, byte[] value)
specifier|public
specifier|synchronized
name|void
name|writeHistoryData
parameter_list|(
name|HistoryDataKey
name|key
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|DataOutputStream
name|dos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|dos
operator|=
name|writer
operator|.
name|prepareAppendKey
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|key
operator|.
name|write
argument_list|(
name|dos
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|dos
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dos
operator|=
name|writer
operator|.
name|prepareAppendValue
argument_list|(
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
name|dos
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|dos
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|HistoryDataKey
specifier|private
specifier|static
class|class
name|HistoryDataKey
implements|implements
name|Writable
block|{
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
DECL|field|suffix
specifier|private
name|String
name|suffix
decl_stmt|;
DECL|method|HistoryDataKey ()
specifier|public
name|HistoryDataKey
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|HistoryDataKey (String id, String suffix)
specifier|public
name|HistoryDataKey
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|suffix
operator|=
name|suffix
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|id
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|suffix
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

