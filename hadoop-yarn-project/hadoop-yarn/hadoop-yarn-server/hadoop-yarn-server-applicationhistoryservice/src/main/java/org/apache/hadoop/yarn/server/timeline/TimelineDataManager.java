begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timeline
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEvents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineDomains
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelinePutResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|TimelineReader
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|security
operator|.
name|TimelineACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * The class wrap over the timeline store and the ACLs manager. It does some non  * trivial manipulation of the timeline data before putting or after getting it  * from the timeline store, and checks the user's access to it.  *  */
end_comment

begin_class
DECL|class|TimelineDataManager
specifier|public
class|class
name|TimelineDataManager
extends|extends
name|AbstractService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TimelineDataManager
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|DEFAULT_DOMAIN_ID
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_DOMAIN_ID
init|=
literal|"DEFAULT"
decl_stmt|;
DECL|field|metrics
specifier|private
name|TimelineDataManagerMetrics
name|metrics
decl_stmt|;
DECL|field|store
specifier|private
name|TimelineStore
name|store
decl_stmt|;
DECL|field|timelineACLsManager
specifier|private
name|TimelineACLsManager
name|timelineACLsManager
decl_stmt|;
DECL|method|TimelineDataManager (TimelineStore store, TimelineACLsManager timelineACLsManager)
specifier|public
name|TimelineDataManager
parameter_list|(
name|TimelineStore
name|store
parameter_list|,
name|TimelineACLsManager
name|timelineACLsManager
parameter_list|)
block|{
name|super
argument_list|(
name|TimelineDataManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|timelineACLsManager
operator|=
name|timelineACLsManager
expr_stmt|;
name|timelineACLsManager
operator|.
name|setTimelineStore
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|metrics
operator|=
name|TimelineDataManagerMetrics
operator|.
name|create
argument_list|()
expr_stmt|;
name|TimelineDomain
name|domain
init|=
name|store
operator|.
name|getDomain
argument_list|(
literal|"DEFAULT"
argument_list|)
decl_stmt|;
comment|// it is okay to reuse an existing domain even if it was created by another
comment|// user of the timeline server before, because it allows everybody to access.
if|if
condition|(
name|domain
operator|==
literal|null
condition|)
block|{
comment|// create a default domain, which allows everybody to access and modify
comment|// the entities in it.
name|domain
operator|=
operator|new
name|TimelineDomain
argument_list|()
expr_stmt|;
name|domain
operator|.
name|setId
argument_list|(
name|DEFAULT_DOMAIN_ID
argument_list|)
expr_stmt|;
name|domain
operator|.
name|setDescription
argument_list|(
literal|"System Default Domain"
argument_list|)
expr_stmt|;
name|domain
operator|.
name|setOwner
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
name|domain
operator|.
name|setReaders
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|domain
operator|.
name|setWriters
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|store
operator|.
name|put
argument_list|(
name|domain
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|interface|CheckAcl
specifier|public
interface|interface
name|CheckAcl
block|{
DECL|method|check (TimelineEntity entity)
name|boolean
name|check
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|class|CheckAclImpl
class|class
name|CheckAclImpl
implements|implements
name|CheckAcl
block|{
DECL|field|ugi
specifier|final
name|UserGroupInformation
name|ugi
decl_stmt|;
DECL|method|CheckAclImpl (UserGroupInformation callerUGI)
specifier|public
name|CheckAclImpl
parameter_list|(
name|UserGroupInformation
name|callerUGI
parameter_list|)
block|{
name|ugi
operator|=
name|callerUGI
expr_stmt|;
block|}
DECL|method|check (TimelineEntity entity)
specifier|public
name|boolean
name|check
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|timelineACLsManager
operator|.
name|checkAccess
argument_list|(
name|ugi
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|entity
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error when verifying access for user "
operator|+
name|ugi
operator|+
literal|" on the events of the timeline entity "
operator|+
operator|new
name|EntityIdentifier
argument_list|(
name|entity
operator|.
name|getEntityId
argument_list|()
argument_list|,
name|entity
operator|.
name|getEntityType
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
comment|/**    * Get the timeline entities that the given user have access to. The meaning    * of each argument has been documented with    * {@link TimelineReader#getEntities}.    *    * @see TimelineReader#getEntities    */
DECL|method|getEntities ( String entityType, NameValuePair primaryFilter, Collection<NameValuePair> secondaryFilter, Long windowStart, Long windowEnd, String fromId, Long fromTs, Long limit, EnumSet<Field> fields, UserGroupInformation callerUGI)
specifier|public
name|TimelineEntities
name|getEntities
parameter_list|(
name|String
name|entityType
parameter_list|,
name|NameValuePair
name|primaryFilter
parameter_list|,
name|Collection
argument_list|<
name|NameValuePair
argument_list|>
name|secondaryFilter
parameter_list|,
name|Long
name|windowStart
parameter_list|,
name|Long
name|windowEnd
parameter_list|,
name|String
name|fromId
parameter_list|,
name|Long
name|fromTs
parameter_list|,
name|Long
name|limit
parameter_list|,
name|EnumSet
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|,
name|UserGroupInformation
name|callerUGI
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|incrGetEntitiesOps
argument_list|()
expr_stmt|;
try|try
block|{
name|TimelineEntities
name|entities
init|=
name|doGetEntities
argument_list|(
name|entityType
argument_list|,
name|primaryFilter
argument_list|,
name|secondaryFilter
argument_list|,
name|windowStart
argument_list|,
name|windowEnd
argument_list|,
name|fromId
argument_list|,
name|fromTs
argument_list|,
name|limit
argument_list|,
name|fields
argument_list|,
name|callerUGI
argument_list|)
decl_stmt|;
name|metrics
operator|.
name|incrGetEntitiesTotal
argument_list|(
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|entities
return|;
block|}
finally|finally
block|{
name|metrics
operator|.
name|addGetEntitiesTime
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doGetEntities ( String entityType, NameValuePair primaryFilter, Collection<NameValuePair> secondaryFilter, Long windowStart, Long windowEnd, String fromId, Long fromTs, Long limit, EnumSet<Field> fields, UserGroupInformation callerUGI)
specifier|private
name|TimelineEntities
name|doGetEntities
parameter_list|(
name|String
name|entityType
parameter_list|,
name|NameValuePair
name|primaryFilter
parameter_list|,
name|Collection
argument_list|<
name|NameValuePair
argument_list|>
name|secondaryFilter
parameter_list|,
name|Long
name|windowStart
parameter_list|,
name|Long
name|windowEnd
parameter_list|,
name|String
name|fromId
parameter_list|,
name|Long
name|fromTs
parameter_list|,
name|Long
name|limit
parameter_list|,
name|EnumSet
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|,
name|UserGroupInformation
name|callerUGI
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|TimelineEntities
name|entities
init|=
literal|null
decl_stmt|;
name|entities
operator|=
name|store
operator|.
name|getEntities
argument_list|(
name|entityType
argument_list|,
name|limit
argument_list|,
name|windowStart
argument_list|,
name|windowEnd
argument_list|,
name|fromId
argument_list|,
name|fromTs
argument_list|,
name|primaryFilter
argument_list|,
name|secondaryFilter
argument_list|,
name|fields
argument_list|,
operator|new
name|CheckAclImpl
argument_list|(
name|callerUGI
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|entities
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TimelineEntities
argument_list|()
return|;
block|}
return|return
name|entities
return|;
block|}
comment|/**    * Get the single timeline entity that the given user has access to. The    * meaning of each argument has been documented with    * {@link TimelineReader#getEntity}.    *    * @see TimelineReader#getEntity    */
DECL|method|getEntity ( String entityType, String entityId, EnumSet<Field> fields, UserGroupInformation callerUGI)
specifier|public
name|TimelineEntity
name|getEntity
parameter_list|(
name|String
name|entityType
parameter_list|,
name|String
name|entityId
parameter_list|,
name|EnumSet
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|,
name|UserGroupInformation
name|callerUGI
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|incrGetEntityOps
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|doGetEntity
argument_list|(
name|entityType
argument_list|,
name|entityId
argument_list|,
name|fields
argument_list|,
name|callerUGI
argument_list|)
return|;
block|}
finally|finally
block|{
name|metrics
operator|.
name|addGetEntityTime
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doGetEntity ( String entityType, String entityId, EnumSet<Field> fields, UserGroupInformation callerUGI)
specifier|private
name|TimelineEntity
name|doGetEntity
parameter_list|(
name|String
name|entityType
parameter_list|,
name|String
name|entityId
parameter_list|,
name|EnumSet
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|,
name|UserGroupInformation
name|callerUGI
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|TimelineEntity
name|entity
init|=
literal|null
decl_stmt|;
name|entity
operator|=
name|store
operator|.
name|getEntity
argument_list|(
name|entityId
argument_list|,
name|entityType
argument_list|,
name|fields
argument_list|)
expr_stmt|;
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|addDefaultDomainIdIfAbsent
argument_list|(
name|entity
argument_list|)
expr_stmt|;
comment|// check ACLs
if|if
condition|(
operator|!
name|timelineACLsManager
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|entity
argument_list|)
condition|)
block|{
name|entity
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|entity
return|;
block|}
comment|/**    * Get the events whose entities the given user has access to. The meaning of    * each argument has been documented with    * {@link TimelineReader#getEntityTimelines}.    *    * @see TimelineReader#getEntityTimelines    */
DECL|method|getEvents ( String entityType, SortedSet<String> entityIds, SortedSet<String> eventTypes, Long windowStart, Long windowEnd, Long limit, UserGroupInformation callerUGI)
specifier|public
name|TimelineEvents
name|getEvents
parameter_list|(
name|String
name|entityType
parameter_list|,
name|SortedSet
argument_list|<
name|String
argument_list|>
name|entityIds
parameter_list|,
name|SortedSet
argument_list|<
name|String
argument_list|>
name|eventTypes
parameter_list|,
name|Long
name|windowStart
parameter_list|,
name|Long
name|windowEnd
parameter_list|,
name|Long
name|limit
parameter_list|,
name|UserGroupInformation
name|callerUGI
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|incrGetEventsOps
argument_list|()
expr_stmt|;
try|try
block|{
name|TimelineEvents
name|events
init|=
name|doGetEvents
argument_list|(
name|entityType
argument_list|,
name|entityIds
argument_list|,
name|eventTypes
argument_list|,
name|windowStart
argument_list|,
name|windowEnd
argument_list|,
name|limit
argument_list|,
name|callerUGI
argument_list|)
decl_stmt|;
name|metrics
operator|.
name|incrGetEventsTotal
argument_list|(
name|events
operator|.
name|getAllEvents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|events
return|;
block|}
finally|finally
block|{
name|metrics
operator|.
name|addGetEventsTime
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doGetEvents ( String entityType, SortedSet<String> entityIds, SortedSet<String> eventTypes, Long windowStart, Long windowEnd, Long limit, UserGroupInformation callerUGI)
specifier|private
name|TimelineEvents
name|doGetEvents
parameter_list|(
name|String
name|entityType
parameter_list|,
name|SortedSet
argument_list|<
name|String
argument_list|>
name|entityIds
parameter_list|,
name|SortedSet
argument_list|<
name|String
argument_list|>
name|eventTypes
parameter_list|,
name|Long
name|windowStart
parameter_list|,
name|Long
name|windowEnd
parameter_list|,
name|Long
name|limit
parameter_list|,
name|UserGroupInformation
name|callerUGI
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|TimelineEvents
name|events
init|=
literal|null
decl_stmt|;
name|events
operator|=
name|store
operator|.
name|getEntityTimelines
argument_list|(
name|entityType
argument_list|,
name|entityIds
argument_list|,
name|limit
argument_list|,
name|windowStart
argument_list|,
name|windowEnd
argument_list|,
name|eventTypes
argument_list|)
expr_stmt|;
if|if
condition|(
name|events
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|TimelineEvents
operator|.
name|EventsOfOneEntity
argument_list|>
name|eventsItr
init|=
name|events
operator|.
name|getAllEvents
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|eventsItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|TimelineEvents
operator|.
name|EventsOfOneEntity
name|eventsOfOneEntity
init|=
name|eventsItr
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|TimelineEntity
name|entity
init|=
name|store
operator|.
name|getEntity
argument_list|(
name|eventsOfOneEntity
operator|.
name|getEntityId
argument_list|()
argument_list|,
name|eventsOfOneEntity
operator|.
name|getEntityType
argument_list|()
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|Field
operator|.
name|PRIMARY_FILTERS
argument_list|)
argument_list|)
decl_stmt|;
name|addDefaultDomainIdIfAbsent
argument_list|(
name|entity
argument_list|)
expr_stmt|;
comment|// check ACLs
if|if
condition|(
operator|!
name|timelineACLsManager
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|entity
argument_list|)
condition|)
block|{
name|eventsItr
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error when verifying access for user "
operator|+
name|callerUGI
operator|+
literal|" on the events of the timeline entity "
operator|+
operator|new
name|EntityIdentifier
argument_list|(
name|eventsOfOneEntity
operator|.
name|getEntityId
argument_list|()
argument_list|,
name|eventsOfOneEntity
operator|.
name|getEntityType
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|eventsItr
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|events
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TimelineEvents
argument_list|()
return|;
block|}
return|return
name|events
return|;
block|}
comment|/**    * Store the timeline entities into the store and set the owner of them to the    * given user.    */
DECL|method|postEntities ( TimelineEntities entities, UserGroupInformation callerUGI)
specifier|public
name|TimelinePutResponse
name|postEntities
parameter_list|(
name|TimelineEntities
name|entities
parameter_list|,
name|UserGroupInformation
name|callerUGI
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|incrPostEntitiesOps
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|doPostEntities
argument_list|(
name|entities
argument_list|,
name|callerUGI
argument_list|)
return|;
block|}
finally|finally
block|{
name|metrics
operator|.
name|addPostEntitiesTime
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doPostEntities ( TimelineEntities entities, UserGroupInformation callerUGI)
specifier|private
name|TimelinePutResponse
name|doPostEntities
parameter_list|(
name|TimelineEntities
name|entities
parameter_list|,
name|UserGroupInformation
name|callerUGI
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
if|if
condition|(
name|entities
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TimelinePutResponse
argument_list|()
return|;
block|}
name|metrics
operator|.
name|incrPostEntitiesTotal
argument_list|(
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TimelineEntities
name|entitiesToPut
init|=
operator|new
name|TimelineEntities
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TimelinePutResponse
operator|.
name|TimelinePutError
argument_list|>
name|errors
init|=
operator|new
name|ArrayList
argument_list|<
name|TimelinePutResponse
operator|.
name|TimelinePutError
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TimelineEntity
name|entity
range|:
name|entities
operator|.
name|getEntities
argument_list|()
control|)
block|{
comment|// if the domain id is not specified, the entity will be put into
comment|// the default domain
if|if
condition|(
name|entity
operator|.
name|getDomainId
argument_list|()
operator|==
literal|null
operator|||
name|entity
operator|.
name|getDomainId
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|entity
operator|.
name|setDomainId
argument_list|(
name|DEFAULT_DOMAIN_ID
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entity
operator|.
name|getEntityId
argument_list|()
operator|==
literal|null
operator|||
name|entity
operator|.
name|getEntityType
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Incomplete entity without entity"
operator|+
literal|" id/type"
argument_list|)
throw|;
block|}
comment|// check if there is existing entity
name|TimelineEntity
name|existingEntity
init|=
literal|null
decl_stmt|;
try|try
block|{
name|existingEntity
operator|=
name|store
operator|.
name|getEntity
argument_list|(
name|entity
operator|.
name|getEntityId
argument_list|()
argument_list|,
name|entity
operator|.
name|getEntityType
argument_list|()
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|Field
operator|.
name|PRIMARY_FILTERS
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|existingEntity
operator|!=
literal|null
condition|)
block|{
name|addDefaultDomainIdIfAbsent
argument_list|(
name|existingEntity
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|existingEntity
operator|.
name|getDomainId
argument_list|()
operator|.
name|equals
argument_list|(
name|entity
operator|.
name|getDomainId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"The domain of the timeline entity "
operator|+
literal|"{ id: "
operator|+
name|entity
operator|.
name|getEntityId
argument_list|()
operator|+
literal|", type: "
operator|+
name|entity
operator|.
name|getEntityType
argument_list|()
operator|+
literal|" } is not allowed to be changed from "
operator|+
name|existingEntity
operator|.
name|getDomainId
argument_list|()
operator|+
literal|" to "
operator|+
name|entity
operator|.
name|getDomainId
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|timelineACLsManager
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
name|entity
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|callerUGI
operator|+
literal|" is not allowed to put the timeline entity "
operator|+
literal|"{ id: "
operator|+
name|entity
operator|.
name|getEntityId
argument_list|()
operator|+
literal|", type: "
operator|+
name|entity
operator|.
name|getEntityType
argument_list|()
operator|+
literal|" } into the domain "
operator|+
name|entity
operator|.
name|getDomainId
argument_list|()
operator|+
literal|"."
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Skip the entity which already exists and was put by others
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skip the timeline entity: { id: "
operator|+
name|entity
operator|.
name|getEntityId
argument_list|()
operator|+
literal|", type: "
operator|+
name|entity
operator|.
name|getEntityType
argument_list|()
operator|+
literal|" }"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|TimelinePutResponse
operator|.
name|TimelinePutError
name|error
init|=
operator|new
name|TimelinePutResponse
operator|.
name|TimelinePutError
argument_list|()
decl_stmt|;
name|error
operator|.
name|setEntityId
argument_list|(
name|entity
operator|.
name|getEntityId
argument_list|()
argument_list|)
expr_stmt|;
name|error
operator|.
name|setEntityType
argument_list|(
name|entity
operator|.
name|getEntityType
argument_list|()
argument_list|)
expr_stmt|;
name|error
operator|.
name|setErrorCode
argument_list|(
name|TimelinePutResponse
operator|.
name|TimelinePutError
operator|.
name|ACCESS_DENIED
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
name|error
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|entitiesToPut
operator|.
name|addEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
name|TimelinePutResponse
name|response
init|=
name|store
operator|.
name|put
argument_list|(
name|entitiesToPut
argument_list|)
decl_stmt|;
comment|// add the errors of timeline system filter key conflict
name|response
operator|.
name|addErrors
argument_list|(
name|errors
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
comment|/**    * Add or update an domain. If the domain already exists, only the owner    * and the admin can update it.    */
DECL|method|putDomain (TimelineDomain domain, UserGroupInformation callerUGI)
specifier|public
name|void
name|putDomain
parameter_list|(
name|TimelineDomain
name|domain
parameter_list|,
name|UserGroupInformation
name|callerUGI
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|incrPutDomainOps
argument_list|()
expr_stmt|;
try|try
block|{
name|doPutDomain
argument_list|(
name|domain
argument_list|,
name|callerUGI
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|metrics
operator|.
name|addPutDomainTime
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doPutDomain (TimelineDomain domain, UserGroupInformation callerUGI)
specifier|private
name|void
name|doPutDomain
parameter_list|(
name|TimelineDomain
name|domain
parameter_list|,
name|UserGroupInformation
name|callerUGI
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|TimelineDomain
name|existingDomain
init|=
name|store
operator|.
name|getDomain
argument_list|(
name|domain
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingDomain
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|timelineACLsManager
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|existingDomain
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|" is not allowed to override an existing domain "
operator|+
name|existingDomain
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
comment|// Set it again in case ACLs are not enabled: The domain can be
comment|// modified by every body, but the owner is not changed.
name|domain
operator|.
name|setOwner
argument_list|(
name|existingDomain
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|put
argument_list|(
name|domain
argument_list|)
expr_stmt|;
comment|// If the domain exists already, it is likely to be in the cache.
comment|// We need to invalidate it.
if|if
condition|(
name|existingDomain
operator|!=
literal|null
condition|)
block|{
name|timelineACLsManager
operator|.
name|replaceIfExist
argument_list|(
name|domain
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get a single domain of the particular ID. If callerUGI is not the owner    * or the admin of the domain, null will be returned.    */
DECL|method|getDomain (String domainId, UserGroupInformation callerUGI)
specifier|public
name|TimelineDomain
name|getDomain
parameter_list|(
name|String
name|domainId
parameter_list|,
name|UserGroupInformation
name|callerUGI
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|incrGetDomainOps
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|doGetDomain
argument_list|(
name|domainId
argument_list|,
name|callerUGI
argument_list|)
return|;
block|}
finally|finally
block|{
name|metrics
operator|.
name|addGetDomainTime
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doGetDomain (String domainId, UserGroupInformation callerUGI)
specifier|private
name|TimelineDomain
name|doGetDomain
parameter_list|(
name|String
name|domainId
parameter_list|,
name|UserGroupInformation
name|callerUGI
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|TimelineDomain
name|domain
init|=
name|store
operator|.
name|getDomain
argument_list|(
name|domainId
argument_list|)
decl_stmt|;
if|if
condition|(
name|domain
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|timelineACLsManager
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|domain
argument_list|)
condition|)
block|{
return|return
name|domain
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Get all the domains that belong to the given owner. If callerUGI is not    * the owner or the admin of the domain, empty list is going to be returned.    */
DECL|method|getDomains (String owner, UserGroupInformation callerUGI)
specifier|public
name|TimelineDomains
name|getDomains
parameter_list|(
name|String
name|owner
parameter_list|,
name|UserGroupInformation
name|callerUGI
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|incrGetDomainsOps
argument_list|()
expr_stmt|;
try|try
block|{
name|TimelineDomains
name|domains
init|=
name|doGetDomains
argument_list|(
name|owner
argument_list|,
name|callerUGI
argument_list|)
decl_stmt|;
name|metrics
operator|.
name|incrGetDomainsTotal
argument_list|(
name|domains
operator|.
name|getDomains
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|domains
return|;
block|}
finally|finally
block|{
name|metrics
operator|.
name|addGetDomainsTime
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doGetDomains (String owner, UserGroupInformation callerUGI)
specifier|private
name|TimelineDomains
name|doGetDomains
parameter_list|(
name|String
name|owner
parameter_list|,
name|UserGroupInformation
name|callerUGI
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|TimelineDomains
name|domains
init|=
name|store
operator|.
name|getDomains
argument_list|(
name|owner
argument_list|)
decl_stmt|;
name|boolean
name|hasAccess
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|domains
operator|.
name|getDomains
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// The owner for each domain is the same, just need to check one
name|hasAccess
operator|=
name|timelineACLsManager
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|domains
operator|.
name|getDomains
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasAccess
condition|)
block|{
return|return
name|domains
return|;
block|}
else|else
block|{
return|return
operator|new
name|TimelineDomains
argument_list|()
return|;
block|}
block|}
DECL|method|addDefaultDomainIdIfAbsent (TimelineEntity entity)
specifier|private
specifier|static
name|void
name|addDefaultDomainIdIfAbsent
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|)
block|{
comment|// be compatible with the timeline data created before 2.6
if|if
condition|(
name|entity
operator|.
name|getDomainId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|entity
operator|.
name|setDomainId
argument_list|(
name|DEFAULT_DOMAIN_ID
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

