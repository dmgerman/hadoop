begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timeline
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|time
operator|.
name|FastDateFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|leveldbjni
operator|.
name|JniDBFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|WriteBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Contains the logic to lookup a leveldb by timestamp so that multiple smaller  * databases can roll according to the configured period and evicted efficiently  * via operating system directory removal.  */
end_comment

begin_class
DECL|class|RollingLevelDB
class|class
name|RollingLevelDB
block|{
comment|/** Logger for this class. */
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RollingLevelDB
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Factory to open and create new leveldb instances. */
DECL|field|factory
specifier|private
specifier|static
name|JniDBFactory
name|factory
init|=
operator|new
name|JniDBFactory
argument_list|()
decl_stmt|;
comment|/** Thread safe date formatter. */
DECL|field|fdf
specifier|private
name|FastDateFormat
name|fdf
decl_stmt|;
comment|/** Date parser. */
DECL|field|sdf
specifier|private
name|SimpleDateFormat
name|sdf
decl_stmt|;
comment|/** Calendar to calculate the current and next rolling period. */
DECL|field|cal
specifier|private
name|GregorianCalendar
name|cal
init|=
operator|new
name|GregorianCalendar
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"GMT"
argument_list|)
argument_list|)
decl_stmt|;
comment|/** Collection of all active rolling leveldb instances. */
DECL|field|rollingdbs
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|DB
argument_list|>
name|rollingdbs
decl_stmt|;
comment|/** Collection of all rolling leveldb instances to evict. */
DECL|field|rollingdbsToEvict
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|DB
argument_list|>
name|rollingdbsToEvict
decl_stmt|;
comment|/** Name of this rolling level db. */
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
comment|/** Calculated timestamp of when to roll a new leveldb instance. */
DECL|field|nextRollingCheckMillis
specifier|private
specifier|volatile
name|long
name|nextRollingCheckMillis
init|=
literal|0
decl_stmt|;
comment|/** File system instance to find and create new leveldb instances. */
DECL|field|lfs
specifier|private
name|FileSystem
name|lfs
init|=
literal|null
decl_stmt|;
comment|/** Directory to store rolling leveldb instances. */
DECL|field|rollingDBPath
specifier|private
name|Path
name|rollingDBPath
decl_stmt|;
comment|/** Configuration for this object. */
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
comment|/** Rolling period. */
DECL|field|rollingPeriod
specifier|private
name|RollingPeriod
name|rollingPeriod
decl_stmt|;
comment|/**    * Rolling leveldb instances are evicted when their endtime is earlier than    * the current time minus the time to live value.    */
DECL|field|ttl
specifier|private
name|long
name|ttl
decl_stmt|;
comment|/** Whether time to live is enabled. */
DECL|field|ttlEnabled
specifier|private
name|boolean
name|ttlEnabled
decl_stmt|;
comment|/** Encapsulates the rolling period to date format lookup. */
DECL|enum|RollingPeriod
enum|enum
name|RollingPeriod
block|{
DECL|enumConstant|DAILY
name|DAILY
block|{
annotation|@
name|Override
specifier|public
name|String
name|dateFormat
parameter_list|()
block|{
return|return
literal|"yyyy-MM-dd"
return|;
block|}
block|}
block|,
DECL|enumConstant|HALF_DAILY
name|HALF_DAILY
block|{
annotation|@
name|Override
specifier|public
name|String
name|dateFormat
parameter_list|()
block|{
return|return
literal|"yyyy-MM-dd-HH"
return|;
block|}
block|}
block|,
DECL|enumConstant|QUARTER_DAILY
name|QUARTER_DAILY
block|{
annotation|@
name|Override
specifier|public
name|String
name|dateFormat
parameter_list|()
block|{
return|return
literal|"yyyy-MM-dd-HH"
return|;
block|}
block|}
block|,
DECL|enumConstant|HOURLY
name|HOURLY
block|{
annotation|@
name|Override
specifier|public
name|String
name|dateFormat
parameter_list|()
block|{
return|return
literal|"yyyy-MM-dd-HH"
return|;
block|}
block|}
block|,
DECL|enumConstant|MINUTELY
name|MINUTELY
block|{
annotation|@
name|Override
specifier|public
name|String
name|dateFormat
parameter_list|()
block|{
return|return
literal|"yyyy-MM-dd-HH-mm"
return|;
block|}
block|}
block|;
DECL|method|dateFormat ()
specifier|public
specifier|abstract
name|String
name|dateFormat
parameter_list|()
function_decl|;
block|}
comment|/**    * Convenience class for associating a write batch with its rolling leveldb    * instance.    */
DECL|class|RollingWriteBatch
specifier|public
specifier|static
class|class
name|RollingWriteBatch
block|{
comment|/** Leveldb object. */
DECL|field|db
specifier|private
specifier|final
name|DB
name|db
decl_stmt|;
comment|/** Write batch for the db object. */
DECL|field|writeBatch
specifier|private
specifier|final
name|WriteBatch
name|writeBatch
decl_stmt|;
DECL|method|RollingWriteBatch (final DB db, final WriteBatch writeBatch)
specifier|public
name|RollingWriteBatch
parameter_list|(
specifier|final
name|DB
name|db
parameter_list|,
specifier|final
name|WriteBatch
name|writeBatch
parameter_list|)
block|{
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|writeBatch
operator|=
name|writeBatch
expr_stmt|;
block|}
DECL|method|getDB ()
specifier|public
name|DB
name|getDB
parameter_list|()
block|{
return|return
name|db
return|;
block|}
DECL|method|getWriteBatch ()
specifier|public
name|WriteBatch
name|getWriteBatch
parameter_list|()
block|{
return|return
name|writeBatch
return|;
block|}
DECL|method|write ()
specifier|public
name|void
name|write
parameter_list|()
block|{
name|db
operator|.
name|write
argument_list|(
name|writeBatch
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|writeBatch
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|RollingLevelDB (String name)
name|RollingLevelDB
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|rollingdbs
operator|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|DB
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|rollingdbsToEvict
operator|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|DB
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|getName ()
specifier|protected
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|currentTimeMillis ()
specifier|protected
name|long
name|currentTimeMillis
parameter_list|()
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
DECL|method|getNextRollingTimeMillis ()
specifier|public
name|long
name|getNextRollingTimeMillis
parameter_list|()
block|{
return|return
name|nextRollingCheckMillis
return|;
block|}
DECL|method|getTimeToLive ()
specifier|public
name|long
name|getTimeToLive
parameter_list|()
block|{
return|return
name|ttl
return|;
block|}
DECL|method|getTimeToLiveEnabled ()
specifier|public
name|boolean
name|getTimeToLiveEnabled
parameter_list|()
block|{
return|return
name|ttlEnabled
return|;
block|}
DECL|method|setNextRollingTimeMillis (final long timestamp)
specifier|protected
name|void
name|setNextRollingTimeMillis
parameter_list|(
specifier|final
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|nextRollingCheckMillis
operator|=
name|timestamp
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Next rolling time for "
operator|+
name|getName
argument_list|()
operator|+
literal|" is "
operator|+
name|fdf
operator|.
name|format
argument_list|(
name|nextRollingCheckMillis
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|init (final Configuration config)
specifier|public
name|void
name|init
parameter_list|(
specifier|final
name|Configuration
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing RollingLevelDB for "
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|ttl
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_TTL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_TIMELINE_SERVICE_TTL_MS
argument_list|)
expr_stmt|;
name|this
operator|.
name|ttlEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_TTL_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|rollingDBPath
operator|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_LEVELDB_PATH
argument_list|)
argument_list|,
name|RollingLevelDBTimelineStore
operator|.
name|FILENAME
argument_list|)
expr_stmt|;
name|initFileSystem
argument_list|()
expr_stmt|;
name|initRollingPeriod
argument_list|()
expr_stmt|;
name|initHistoricalDBs
argument_list|()
expr_stmt|;
block|}
DECL|method|initFileSystem ()
specifier|protected
name|void
name|initFileSystem
parameter_list|()
throws|throws
name|IOException
block|{
name|lfs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|lfs
operator|.
name|mkdirs
argument_list|(
name|rollingDBPath
argument_list|,
name|RollingLevelDBTimelineStore
operator|.
name|LEVELDB_DIR_UMASK
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create leveldb root directory "
operator|+
name|rollingDBPath
argument_list|)
throw|;
block|}
block|}
DECL|method|initRollingPeriod ()
specifier|protected
specifier|synchronized
name|void
name|initRollingPeriod
parameter_list|()
block|{
specifier|final
name|String
name|lcRollingPeriod
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ROLLING_PERIOD
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_TIMELINE_SERVICE_ROLLING_PERIOD
argument_list|)
decl_stmt|;
name|this
operator|.
name|rollingPeriod
operator|=
name|RollingPeriod
operator|.
name|valueOf
argument_list|(
name|lcRollingPeriod
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
expr_stmt|;
name|fdf
operator|=
name|FastDateFormat
operator|.
name|getInstance
argument_list|(
name|rollingPeriod
operator|.
name|dateFormat
argument_list|()
argument_list|,
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"GMT"
argument_list|)
argument_list|)
expr_stmt|;
name|sdf
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
name|rollingPeriod
operator|.
name|dateFormat
argument_list|()
argument_list|)
expr_stmt|;
name|sdf
operator|.
name|setTimeZone
argument_list|(
name|fdf
operator|.
name|getTimeZone
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|initHistoricalDBs ()
specifier|protected
specifier|synchronized
name|void
name|initHistoricalDBs
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|rollingDBGlobPath
init|=
operator|new
name|Path
argument_list|(
name|rollingDBPath
argument_list|,
name|getName
argument_list|()
operator|+
literal|".*"
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|statuses
init|=
name|lfs
operator|.
name|globStatus
argument_list|(
name|rollingDBGlobPath
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|status
range|:
name|statuses
control|)
block|{
name|String
name|dbName
init|=
name|FilenameUtils
operator|.
name|getExtension
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|Long
name|dbStartTime
init|=
name|sdf
operator|.
name|parse
argument_list|(
name|dbName
argument_list|)
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|initRollingLevelDB
argument_list|(
name|dbStartTime
argument_list|,
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to initialize rolling leveldb "
operator|+
name|dbName
operator|+
literal|" for "
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|initRollingLevelDB (Long dbStartTime, Path rollingInstanceDBPath)
specifier|private
name|void
name|initRollingLevelDB
parameter_list|(
name|Long
name|dbStartTime
parameter_list|,
name|Path
name|rollingInstanceDBPath
parameter_list|)
block|{
if|if
condition|(
name|rollingdbs
operator|.
name|containsKey
argument_list|(
name|dbStartTime
argument_list|)
condition|)
block|{
return|return;
block|}
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|createIfMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|options
operator|.
name|cacheSize
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|maxOpenFiles
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_LEVELDB_MAX_OPEN_FILES
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_TIMELINE_SERVICE_LEVELDB_MAX_OPEN_FILES
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|writeBufferSize
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_LEVELDB_WRITE_BUFFER_SIZE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_TIMELINE_SERVICE_LEVELDB_WRITE_BUFFER_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing rolling leveldb instance :"
operator|+
name|rollingInstanceDBPath
operator|+
literal|" for start time: "
operator|+
name|dbStartTime
argument_list|)
expr_stmt|;
name|DB
name|db
init|=
literal|null
decl_stmt|;
try|try
block|{
name|db
operator|=
name|factory
operator|.
name|open
argument_list|(
operator|new
name|File
argument_list|(
name|rollingInstanceDBPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|rollingdbs
operator|.
name|put
argument_list|(
name|dbStartTime
argument_list|,
name|db
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
name|fdf
operator|.
name|format
argument_list|(
name|dbStartTime
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added rolling leveldb instance "
operator|+
name|dbName
operator|+
literal|" to "
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to open rolling leveldb instance :"
operator|+
operator|new
name|File
argument_list|(
name|rollingInstanceDBPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPreviousDB (DB db)
specifier|synchronized
name|DB
name|getPreviousDB
parameter_list|(
name|DB
name|db
parameter_list|)
block|{
name|Iterator
argument_list|<
name|DB
argument_list|>
name|iterator
init|=
name|rollingdbs
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|DB
name|prev
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DB
name|cur
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cur
operator|==
name|db
condition|)
block|{
break|break;
block|}
name|prev
operator|=
name|cur
expr_stmt|;
block|}
return|return
name|prev
return|;
block|}
DECL|method|getStartTimeFor (DB db)
specifier|synchronized
name|long
name|getStartTimeFor
parameter_list|(
name|DB
name|db
parameter_list|)
block|{
name|long
name|startTime
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|DB
argument_list|>
name|entry
range|:
name|rollingdbs
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|==
name|db
condition|)
block|{
name|startTime
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|startTime
return|;
block|}
DECL|method|getDBForStartTime (long startTime)
specifier|public
specifier|synchronized
name|DB
name|getDBForStartTime
parameter_list|(
name|long
name|startTime
parameter_list|)
block|{
comment|// make sure we sanitize this input
name|startTime
operator|=
name|Math
operator|.
name|min
argument_list|(
name|startTime
argument_list|,
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|startTime
operator|>=
name|getNextRollingTimeMillis
argument_list|()
condition|)
block|{
name|roll
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
block|}
name|Entry
argument_list|<
name|Long
argument_list|,
name|DB
argument_list|>
name|entry
init|=
name|rollingdbs
operator|.
name|floorEntry
argument_list|(
name|startTime
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|entry
operator|.
name|getValue
argument_list|()
return|;
block|}
DECL|method|roll (long startTime)
specifier|private
name|void
name|roll
parameter_list|(
name|long
name|startTime
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Rolling new DB instance for "
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|currentStartTime
init|=
name|computeCurrentCheckMillis
argument_list|(
name|startTime
argument_list|)
decl_stmt|;
name|setNextRollingTimeMillis
argument_list|(
name|computeNextCheckMillis
argument_list|(
name|currentStartTime
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|currentRollingDBInstance
init|=
name|fdf
operator|.
name|format
argument_list|(
name|currentStartTime
argument_list|)
decl_stmt|;
name|String
name|currentRollingDBName
init|=
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|currentRollingDBInstance
decl_stmt|;
name|Path
name|currentRollingDBPath
init|=
operator|new
name|Path
argument_list|(
name|rollingDBPath
argument_list|,
name|currentRollingDBName
argument_list|)
decl_stmt|;
if|if
condition|(
name|getTimeToLiveEnabled
argument_list|()
condition|)
block|{
name|scheduleOldDBsForEviction
argument_list|()
expr_stmt|;
block|}
name|initRollingLevelDB
argument_list|(
name|currentStartTime
argument_list|,
name|currentRollingDBPath
argument_list|)
expr_stmt|;
block|}
DECL|method|scheduleOldDBsForEviction ()
specifier|private
specifier|synchronized
name|void
name|scheduleOldDBsForEviction
parameter_list|()
block|{
comment|// keep at least time to live amount of data
name|long
name|evictionThreshold
init|=
name|computeCurrentCheckMillis
argument_list|(
name|currentTimeMillis
argument_list|()
operator|-
name|getTimeToLive
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Scheduling "
operator|+
name|getName
argument_list|()
operator|+
literal|" DBs older than "
operator|+
name|fdf
operator|.
name|format
argument_list|(
name|evictionThreshold
argument_list|)
operator|+
literal|" for eviction"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|DB
argument_list|>
argument_list|>
name|iterator
init|=
name|rollingdbs
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|Long
argument_list|,
name|DB
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// parse this in gmt time
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|<
name|evictionThreshold
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Scheduling "
operator|+
name|getName
argument_list|()
operator|+
literal|" eviction for "
operator|+
name|fdf
operator|.
name|format
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|rollingdbsToEvict
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|evictOldDBs ()
specifier|public
specifier|synchronized
name|void
name|evictOldDBs
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Evicting "
operator|+
name|getName
argument_list|()
operator|+
literal|" DBs scheduled for eviction"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|DB
argument_list|>
argument_list|>
name|iterator
init|=
name|rollingdbsToEvict
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|Long
argument_list|,
name|DB
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
name|fdf
operator|.
name|format
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|rollingDBPath
argument_list|,
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|dbName
argument_list|)
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing old db directory contents in "
operator|+
name|path
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to evict old db "
operator|+
name|path
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|DB
name|db
range|:
name|rollingdbs
operator|.
name|values
argument_list|()
control|)
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|lfs
argument_list|)
expr_stmt|;
block|}
DECL|method|computeNextCheckMillis (long now)
specifier|private
name|long
name|computeNextCheckMillis
parameter_list|(
name|long
name|now
parameter_list|)
block|{
return|return
name|computeCheckMillis
argument_list|(
name|now
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|computeCurrentCheckMillis (long now)
specifier|public
name|long
name|computeCurrentCheckMillis
parameter_list|(
name|long
name|now
parameter_list|)
block|{
return|return
name|computeCheckMillis
argument_list|(
name|now
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|computeCheckMillis (long now, boolean next)
specifier|private
specifier|synchronized
name|long
name|computeCheckMillis
parameter_list|(
name|long
name|now
parameter_list|,
name|boolean
name|next
parameter_list|)
block|{
comment|// needs to be called synchronously due to shared Calendar
name|cal
operator|.
name|setTimeInMillis
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|rollingPeriod
operator|==
name|RollingPeriod
operator|.
name|DAILY
condition|)
block|{
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
condition|)
block|{
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DATE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|rollingPeriod
operator|==
name|RollingPeriod
operator|.
name|HALF_DAILY
condition|)
block|{
comment|// round down to 12 hour interval
name|int
name|hour
init|=
operator|(
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR
argument_list|)
operator|/
literal|12
operator|)
operator|*
literal|12
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR
argument_list|,
name|hour
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
condition|)
block|{
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|12
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|rollingPeriod
operator|==
name|RollingPeriod
operator|.
name|QUARTER_DAILY
condition|)
block|{
comment|// round down to 6 hour interval
name|int
name|hour
init|=
operator|(
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR
argument_list|)
operator|/
literal|6
operator|)
operator|*
literal|6
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR
argument_list|,
name|hour
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
condition|)
block|{
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|rollingPeriod
operator|==
name|RollingPeriod
operator|.
name|HOURLY
condition|)
block|{
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
condition|)
block|{
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|rollingPeriod
operator|==
name|RollingPeriod
operator|.
name|MINUTELY
condition|)
block|{
comment|// round down to 5 minute interval
name|int
name|minute
init|=
operator|(
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
operator|/
literal|5
operator|)
operator|*
literal|5
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|minute
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
condition|)
block|{
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cal
operator|.
name|getTimeInMillis
argument_list|()
return|;
block|}
block|}
end_class

end_unit

