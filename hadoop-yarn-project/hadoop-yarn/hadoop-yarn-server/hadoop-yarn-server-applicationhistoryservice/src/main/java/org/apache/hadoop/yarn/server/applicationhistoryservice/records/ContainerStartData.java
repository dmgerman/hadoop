begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.applicationhistoryservice.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_comment
comment|/**  * The class contains the fields that can be determined when  *<code>RMContainer</code> starts, and that need to be stored persistently.  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Unstable
DECL|class|ContainerStartData
specifier|public
specifier|abstract
class|class
name|ContainerStartData
block|{
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|newInstance (ContainerId containerId, Resource allocatedResource, NodeId assignedNode, Priority priority, long startTime)
specifier|public
specifier|static
name|ContainerStartData
name|newInstance
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Resource
name|allocatedResource
parameter_list|,
name|NodeId
name|assignedNode
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|long
name|startTime
parameter_list|)
block|{
name|ContainerStartData
name|containerSD
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ContainerStartData
operator|.
name|class
argument_list|)
decl_stmt|;
name|containerSD
operator|.
name|setContainerId
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|containerSD
operator|.
name|setAllocatedResource
argument_list|(
name|allocatedResource
argument_list|)
expr_stmt|;
name|containerSD
operator|.
name|setAssignedNode
argument_list|(
name|assignedNode
argument_list|)
expr_stmt|;
name|containerSD
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|containerSD
operator|.
name|setStartTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
return|return
name|containerSD
return|;
block|}
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getContainerId ()
specifier|public
specifier|abstract
name|ContainerId
name|getContainerId
parameter_list|()
function_decl|;
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|setContainerId (ContainerId containerId)
specifier|public
specifier|abstract
name|void
name|setContainerId
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
function_decl|;
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getAllocatedResource ()
specifier|public
specifier|abstract
name|Resource
name|getAllocatedResource
parameter_list|()
function_decl|;
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|setAllocatedResource (Resource resource)
specifier|public
specifier|abstract
name|void
name|setAllocatedResource
parameter_list|(
name|Resource
name|resource
parameter_list|)
function_decl|;
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getAssignedNode ()
specifier|public
specifier|abstract
name|NodeId
name|getAssignedNode
parameter_list|()
function_decl|;
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|setAssignedNode (NodeId nodeId)
specifier|public
specifier|abstract
name|void
name|setAssignedNode
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
function_decl|;
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getPriority ()
specifier|public
specifier|abstract
name|Priority
name|getPriority
parameter_list|()
function_decl|;
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|setPriority (Priority priority)
specifier|public
specifier|abstract
name|void
name|setPriority
parameter_list|(
name|Priority
name|priority
parameter_list|)
function_decl|;
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getStartTime ()
specifier|public
specifier|abstract
name|long
name|getStartTime
parameter_list|()
function_decl|;
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|setStartTime (long startTime)
specifier|public
specifier|abstract
name|void
name|setStartTime
parameter_list|(
name|long
name|startTime
parameter_list|)
function_decl|;
block|}
end_class

end_unit

