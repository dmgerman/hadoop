begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timeline
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectWriter
import|;
end_import

begin_comment
comment|/**  * A utility class providing methods for serializing and deserializing  * objects. The {@link #write(Object)} and {@link #read(byte[])} methods are  * used by the {@link LeveldbTimelineStore} to store and retrieve arbitrary  * JSON, while the {@link #writeReverseOrderedLong} and {@link  * #readReverseOrderedLong} methods are used to sort entities in descending  * start time order.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|GenericObjectMapper
specifier|public
class|class
name|GenericObjectMapper
block|{
DECL|field|EMPTY_BYTES
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_BYTES
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
DECL|field|OBJECT_READER
specifier|public
specifier|static
specifier|final
name|ObjectReader
name|OBJECT_READER
decl_stmt|;
DECL|field|OBJECT_WRITER
specifier|public
specifier|static
specifier|final
name|ObjectWriter
name|OBJECT_WRITER
decl_stmt|;
static|static
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|OBJECT_READER
operator|=
name|mapper
operator|.
name|reader
argument_list|(
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|OBJECT_WRITER
operator|=
name|mapper
operator|.
name|writer
argument_list|()
expr_stmt|;
block|}
comment|/**    * Serializes an Object into a byte array. Along with {@link #read(byte[])},    * can be used to serialize an Object and deserialize it into an Object of    * the same type without needing to specify the Object's type,    * as long as it is one of the JSON-compatible objects understood by    * ObjectMapper.    *    * @param o An Object    * @return A byte array representation of the Object    * @throws IOException if there is a write error    */
DECL|method|write (Object o)
specifier|public
specifier|static
name|byte
index|[]
name|write
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
name|EMPTY_BYTES
return|;
block|}
return|return
name|OBJECT_WRITER
operator|.
name|writeValueAsBytes
argument_list|(
name|o
argument_list|)
return|;
block|}
comment|/**    * Deserializes an Object from a byte array created with    * {@link #write(Object)}.    *    * @param b A byte array    * @return An Object    * @throws IOException if there is a read error    */
DECL|method|read (byte[] b)
specifier|public
specifier|static
name|Object
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**    * Deserializes an Object from a byte array at a specified offset, assuming    * the bytes were created with {@link #write(Object)}.    *    * @param b A byte array    * @param offset Offset into the array    * @return An Object    * @throws IOException if there is a read error    */
DECL|method|read (byte[] b, int offset)
specifier|public
specifier|static
name|Object
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|b
operator|==
literal|null
operator|||
name|b
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|OBJECT_READER
operator|.
name|readValue
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|b
operator|.
name|length
operator|-
name|offset
argument_list|)
return|;
block|}
comment|/**    * Converts a long to a 8-byte array so that lexicographic ordering of the    * produced byte arrays sort the longs in descending order.    *    * @param l A long    * @return A byte array    */
DECL|method|writeReverseOrderedLong (long l)
specifier|public
specifier|static
name|byte
index|[]
name|writeReverseOrderedLong
parameter_list|(
name|long
name|l
parameter_list|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
return|return
name|writeReverseOrderedLong
argument_list|(
name|l
argument_list|,
name|b
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|writeReverseOrderedLong (long l, byte[] b, int offset)
specifier|public
specifier|static
name|byte
index|[]
name|writeReverseOrderedLong
parameter_list|(
name|long
name|l
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|b
index|[
name|offset
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0x7f
operator|^
operator|(
operator|(
name|l
operator|>>
literal|56
operator|)
operator|&
literal|0xff
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
operator|+
literal|1
init|;
name|i
operator|<
name|offset
operator|+
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|b
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0xff
operator|^
operator|(
operator|(
name|l
operator|>>
literal|8
operator|*
operator|(
literal|7
operator|-
name|i
operator|)
operator|)
operator|&
literal|0xff
operator|)
argument_list|)
expr_stmt|;
block|}
name|b
index|[
name|offset
operator|+
literal|7
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0xff
operator|^
operator|(
name|l
operator|&
literal|0xff
operator|)
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
comment|/**    * Reads 8 bytes from an array starting at the specified offset and    * converts them to a long.  The bytes are assumed to have been created    * with {@link #writeReverseOrderedLong}.    *    * @param b A byte array    * @param offset An offset into the byte array    * @return A long    */
DECL|method|readReverseOrderedLong (byte[] b, int offset)
specifier|public
specifier|static
name|long
name|readReverseOrderedLong
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|long
name|l
init|=
name|b
index|[
name|offset
index|]
operator|&
literal|0xff
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|8
condition|;
name|i
operator|++
control|)
block|{
name|l
operator|=
name|l
operator|<<
literal|8
expr_stmt|;
name|l
operator|=
name|l
operator||
operator|(
name|b
index|[
name|offset
operator|+
name|i
index|]
operator|&
literal|0xff
operator|)
expr_stmt|;
block|}
return|return
name|l
operator|^
literal|0x7fffffffffffffffl
return|;
block|}
block|}
end_class

end_unit

