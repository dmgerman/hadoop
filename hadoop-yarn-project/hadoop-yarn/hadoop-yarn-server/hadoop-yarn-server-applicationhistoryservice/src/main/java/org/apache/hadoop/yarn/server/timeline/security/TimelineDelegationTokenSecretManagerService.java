begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timeline.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|AbstractDelegationTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|TimelineDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|timeline
operator|.
name|TimelineUtils
import|;
end_import

begin_comment
comment|/**  * The service wrapper of {@link TimelineDelegationTokenSecretManager}  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|TimelineDelegationTokenSecretManagerService
specifier|public
class|class
name|TimelineDelegationTokenSecretManagerService
extends|extends
name|AbstractService
block|{
DECL|field|secretManager
specifier|private
name|TimelineDelegationTokenSecretManager
name|secretManager
init|=
literal|null
decl_stmt|;
DECL|field|serviceAddr
specifier|private
name|InetSocketAddress
name|serviceAddr
init|=
literal|null
decl_stmt|;
DECL|method|TimelineDelegationTokenSecretManagerService ()
specifier|public
name|TimelineDelegationTokenSecretManagerService
parameter_list|()
block|{
name|super
argument_list|(
name|TimelineDelegationTokenSecretManagerService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|secretKeyInterval
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|DELEGATION_KEY_UPDATE_INTERVAL_KEY
argument_list|,
name|YarnConfiguration
operator|.
name|DELEGATION_KEY_UPDATE_INTERVAL_DEFAULT
argument_list|)
decl_stmt|;
name|long
name|tokenMaxLifetime
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|DELEGATION_TOKEN_MAX_LIFETIME_KEY
argument_list|,
name|YarnConfiguration
operator|.
name|DELEGATION_TOKEN_MAX_LIFETIME_DEFAULT
argument_list|)
decl_stmt|;
name|long
name|tokenRenewInterval
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|DELEGATION_TOKEN_RENEW_INTERVAL_KEY
argument_list|,
name|YarnConfiguration
operator|.
name|DELEGATION_TOKEN_RENEW_INTERVAL_DEFAULT
argument_list|)
decl_stmt|;
name|secretManager
operator|=
operator|new
name|TimelineDelegationTokenSecretManager
argument_list|(
name|secretKeyInterval
argument_list|,
name|tokenMaxLifetime
argument_list|,
name|tokenRenewInterval
argument_list|,
literal|3600000
argument_list|)
expr_stmt|;
name|secretManager
operator|.
name|startThreads
argument_list|()
expr_stmt|;
name|serviceAddr
operator|=
name|TimelineUtils
operator|.
name|getTimelineTokenServiceAddress
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|secretManager
operator|.
name|stopThreads
argument_list|()
expr_stmt|;
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**    * Ge the instance of {link #TimelineDelegationTokenSecretManager}    * @return the instance of {link #TimelineDelegationTokenSecretManager}    */
DECL|method|getTimelineDelegationTokenSecretManager ()
specifier|public
name|TimelineDelegationTokenSecretManager
name|getTimelineDelegationTokenSecretManager
parameter_list|()
block|{
return|return
name|secretManager
return|;
block|}
comment|/**    * Create a timeline secret manager    *     * @param delegationKeyUpdateInterval    *          the number of seconds for rolling new secret keys.    * @param delegationTokenMaxLifetime    *          the maximum lifetime of the delegation tokens    * @param delegationTokenRenewInterval    *          how often the tokens must be renewed    * @param delegationTokenRemoverScanInterval    *          how often the tokens are scanned for expired tokens    */
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|TimelineDelegationTokenSecretManager
specifier|public
specifier|static
class|class
name|TimelineDelegationTokenSecretManager
extends|extends
name|AbstractDelegationTokenSecretManager
argument_list|<
name|TimelineDelegationTokenIdentifier
argument_list|>
block|{
DECL|method|TimelineDelegationTokenSecretManager (long delegationKeyUpdateInterval, long delegationTokenMaxLifetime, long delegationTokenRenewInterval, long delegationTokenRemoverScanInterval)
specifier|public
name|TimelineDelegationTokenSecretManager
parameter_list|(
name|long
name|delegationKeyUpdateInterval
parameter_list|,
name|long
name|delegationTokenMaxLifetime
parameter_list|,
name|long
name|delegationTokenRenewInterval
parameter_list|,
name|long
name|delegationTokenRemoverScanInterval
parameter_list|)
block|{
name|super
argument_list|(
name|delegationKeyUpdateInterval
argument_list|,
name|delegationTokenMaxLifetime
argument_list|,
name|delegationTokenRenewInterval
argument_list|,
name|delegationTokenRemoverScanInterval
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createIdentifier ()
specifier|public
name|TimelineDelegationTokenIdentifier
name|createIdentifier
parameter_list|()
block|{
return|return
operator|new
name|TimelineDelegationTokenIdentifier
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

