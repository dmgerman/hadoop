begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.applicationhistoryservice
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationResourceUsageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ApplicationAttemptNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ApplicationNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ContainerNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|metrics
operator|.
name|AppAttemptMetricsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|metrics
operator|.
name|ApplicationMetricsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|metrics
operator|.
name|ContainerMetricsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|NameValuePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|TimelineDataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|TimelineReader
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|util
operator|.
name|WebAppUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
DECL|class|ApplicationHistoryManagerOnTimelineStore
specifier|public
class|class
name|ApplicationHistoryManagerOnTimelineStore
extends|extends
name|AbstractService
implements|implements
name|ApplicationHistoryManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ApplicationHistoryManagerOnTimelineStore
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|UNAVAILABLE
specifier|static
specifier|final
name|String
name|UNAVAILABLE
init|=
literal|"N/A"
decl_stmt|;
DECL|field|timelineDataManager
specifier|private
name|TimelineDataManager
name|timelineDataManager
decl_stmt|;
DECL|field|aclsManager
specifier|private
name|ApplicationACLsManager
name|aclsManager
decl_stmt|;
DECL|field|serverHttpAddress
specifier|private
name|String
name|serverHttpAddress
decl_stmt|;
DECL|field|maxLoadedApplications
specifier|private
name|long
name|maxLoadedApplications
decl_stmt|;
DECL|method|ApplicationHistoryManagerOnTimelineStore ( TimelineDataManager timelineDataManager, ApplicationACLsManager aclsManager)
specifier|public
name|ApplicationHistoryManagerOnTimelineStore
parameter_list|(
name|TimelineDataManager
name|timelineDataManager
parameter_list|,
name|ApplicationACLsManager
name|aclsManager
parameter_list|)
block|{
name|super
argument_list|(
name|ApplicationHistoryManagerOnTimelineStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|timelineDataManager
operator|=
name|timelineDataManager
expr_stmt|;
name|this
operator|.
name|aclsManager
operator|=
name|aclsManager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|serverHttpAddress
operator|=
name|WebAppUtils
operator|.
name|getHttpSchemePrefix
argument_list|(
name|conf
argument_list|)
operator|+
name|WebAppUtils
operator|.
name|getAHSWebAppURLWithoutScheme
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|maxLoadedApplications
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|APPLICATION_HISTORY_MAX_APPS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_APPLICATION_HISTORY_MAX_APPS
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getApplication (ApplicationId appId)
specifier|public
name|ApplicationReport
name|getApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|getApplication
argument_list|(
name|appId
argument_list|,
name|ApplicationReportField
operator|.
name|ALL
argument_list|)
operator|.
name|appReport
return|;
block|}
annotation|@
name|Override
DECL|method|getApplications (long appsNum, long appStartedTimeBegin, long appStartedTimeEnd)
specifier|public
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationReport
argument_list|>
name|getApplications
parameter_list|(
name|long
name|appsNum
parameter_list|,
name|long
name|appStartedTimeBegin
parameter_list|,
name|long
name|appStartedTimeEnd
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|TimelineEntities
name|entities
init|=
name|timelineDataManager
operator|.
name|getEntities
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|ENTITY_TYPE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|appStartedTimeBegin
argument_list|,
name|appStartedTimeEnd
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|appsNum
operator|==
name|Long
operator|.
name|MAX_VALUE
condition|?
name|this
operator|.
name|maxLoadedApplications
else|:
name|appsNum
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Field
operator|.
name|class
argument_list|)
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationReport
argument_list|>
name|apps
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationReport
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|entities
operator|!=
literal|null
operator|&&
name|entities
operator|.
name|getEntities
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TimelineEntity
name|entity
range|:
name|entities
operator|.
name|getEntities
argument_list|()
control|)
block|{
try|try
block|{
name|ApplicationReportExt
name|app
init|=
name|generateApplicationReport
argument_list|(
name|entity
argument_list|,
name|ApplicationReportField
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|apps
operator|.
name|put
argument_list|(
name|app
operator|.
name|appReport
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app
operator|.
name|appReport
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error on generating application report for "
operator|+
name|entity
operator|.
name|getEntityId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|apps
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|ApplicationAttemptReport
argument_list|>
DECL|method|getApplicationAttempts (ApplicationId appId)
name|getApplicationAttempts
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ApplicationReportExt
name|app
init|=
name|getApplication
argument_list|(
name|appId
argument_list|,
name|ApplicationReportField
operator|.
name|USER_AND_ACLS
argument_list|)
decl_stmt|;
name|checkAccess
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|TimelineEntities
name|entities
init|=
name|timelineDataManager
operator|.
name|getEntities
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|ENTITY_TYPE
argument_list|,
operator|new
name|NameValuePair
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|PARENT_PRIMARY_FILTER
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Field
operator|.
name|class
argument_list|)
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|ApplicationAttemptReport
argument_list|>
name|appAttempts
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|ApplicationAttemptReport
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TimelineEntity
name|entity
range|:
name|entities
operator|.
name|getEntities
argument_list|()
control|)
block|{
name|ApplicationAttemptReport
name|appAttempt
init|=
name|convertToApplicationAttemptReport
argument_list|(
name|entity
argument_list|)
decl_stmt|;
name|appAttempts
operator|.
name|put
argument_list|(
name|appAttempt
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|appAttempt
argument_list|)
expr_stmt|;
block|}
return|return
name|appAttempts
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationAttempt ( ApplicationAttemptId appAttemptId)
specifier|public
name|ApplicationAttemptReport
name|getApplicationAttempt
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|getApplicationAttempt
argument_list|(
name|appAttemptId
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|getApplicationAttempt ( ApplicationAttemptId appAttemptId, boolean checkACLs)
specifier|private
name|ApplicationAttemptReport
name|getApplicationAttempt
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|boolean
name|checkACLs
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
if|if
condition|(
name|checkACLs
condition|)
block|{
name|ApplicationReportExt
name|app
init|=
name|getApplication
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|ApplicationReportField
operator|.
name|USER_AND_ACLS
argument_list|)
decl_stmt|;
name|checkAccess
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
name|TimelineEntity
name|entity
init|=
name|timelineDataManager
operator|.
name|getEntity
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|ENTITY_TYPE
argument_list|,
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Field
operator|.
name|class
argument_list|)
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ApplicationAttemptNotFoundException
argument_list|(
literal|"The entity for application attempt "
operator|+
name|appAttemptId
operator|+
literal|" doesn't exist in the timeline store"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|convertToApplicationAttemptReport
argument_list|(
name|entity
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getContainer (ContainerId containerId)
specifier|public
name|ContainerReport
name|getContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ApplicationReportExt
name|app
init|=
name|getApplication
argument_list|(
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|ApplicationReportField
operator|.
name|USER_AND_ACLS
argument_list|)
decl_stmt|;
name|checkAccess
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|TimelineEntity
name|entity
init|=
name|timelineDataManager
operator|.
name|getEntity
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ENTITY_TYPE
argument_list|,
name|containerId
operator|.
name|toString
argument_list|()
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Field
operator|.
name|class
argument_list|)
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ContainerNotFoundException
argument_list|(
literal|"The entity for container "
operator|+
name|containerId
operator|+
literal|" doesn't exist in the timeline store"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|convertToContainerReport
argument_list|(
name|entity
argument_list|,
name|serverHttpAddress
argument_list|,
name|app
operator|.
name|appReport
operator|.
name|getUser
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getAMContainer (ApplicationAttemptId appAttemptId)
specifier|public
name|ContainerReport
name|getAMContainer
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ApplicationAttemptReport
name|appAttempt
init|=
name|getApplicationAttempt
argument_list|(
name|appAttemptId
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|getContainer
argument_list|(
name|appAttempt
operator|.
name|getAMContainerId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getContainers ( ApplicationAttemptId appAttemptId)
specifier|public
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|ContainerReport
argument_list|>
name|getContainers
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ApplicationReportExt
name|app
init|=
name|getApplication
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|ApplicationReportField
operator|.
name|USER_AND_ACLS
argument_list|)
decl_stmt|;
name|checkAccess
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|TimelineEntities
name|entities
init|=
name|timelineDataManager
operator|.
name|getEntities
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ENTITY_TYPE
argument_list|,
operator|new
name|NameValuePair
argument_list|(
name|ContainerMetricsConstants
operator|.
name|PARENT_PRIMARIY_FILTER
argument_list|,
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Field
operator|.
name|class
argument_list|)
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|ContainerReport
argument_list|>
name|containers
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|ContainerId
argument_list|,
name|ContainerReport
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|entities
operator|!=
literal|null
operator|&&
name|entities
operator|.
name|getEntities
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TimelineEntity
name|entity
range|:
name|entities
operator|.
name|getEntities
argument_list|()
control|)
block|{
name|ContainerReport
name|container
init|=
name|convertToContainerReport
argument_list|(
name|entity
argument_list|,
name|serverHttpAddress
argument_list|,
name|app
operator|.
name|appReport
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|containers
operator|.
name|put
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|containers
return|;
block|}
DECL|method|convertToApplicationReport ( TimelineEntity entity, ApplicationReportField field)
specifier|private
specifier|static
name|ApplicationReportExt
name|convertToApplicationReport
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|ApplicationReportField
name|field
parameter_list|)
block|{
name|String
name|user
init|=
literal|null
decl_stmt|;
name|String
name|queue
init|=
literal|null
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
name|String
name|type
init|=
literal|null
decl_stmt|;
name|boolean
name|unmanagedApplication
init|=
literal|false
decl_stmt|;
name|long
name|createdTime
init|=
literal|0
decl_stmt|;
name|long
name|finishedTime
init|=
literal|0
decl_stmt|;
name|float
name|progress
init|=
literal|0.0f
decl_stmt|;
name|int
name|applicationPriority
init|=
literal|0
decl_stmt|;
name|ApplicationAttemptId
name|latestApplicationAttemptId
init|=
literal|null
decl_stmt|;
name|String
name|diagnosticsInfo
init|=
literal|null
decl_stmt|;
name|FinalApplicationStatus
name|finalStatus
init|=
name|FinalApplicationStatus
operator|.
name|UNDEFINED
decl_stmt|;
name|YarnApplicationState
name|state
init|=
name|YarnApplicationState
operator|.
name|ACCEPTED
decl_stmt|;
name|ApplicationResourceUsageReport
name|appResources
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|appTags
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|appViewACLs
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|appNodeLabelExpression
init|=
literal|null
decl_stmt|;
name|String
name|amNodeLabelExpression
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entityInfo
init|=
name|entity
operator|.
name|getOtherInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|entityInfo
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|USER_ENTITY_INFO
argument_list|)
condition|)
block|{
name|user
operator|=
name|entityInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|USER_ENTITY_INFO
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APP_VIEW_ACLS_ENTITY_INFO
argument_list|)
condition|)
block|{
name|String
name|appViewACLsStr
init|=
name|entityInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APP_VIEW_ACLS_ENTITY_INFO
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|appViewACLsStr
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|appViewACLs
operator|.
name|put
argument_list|(
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|appViewACLsStr
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|field
operator|==
name|ApplicationReportField
operator|.
name|USER_AND_ACLS
condition|)
block|{
return|return
operator|new
name|ApplicationReportExt
argument_list|(
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
name|entity
operator|.
name|getEntityId
argument_list|()
argument_list|)
argument_list|,
name|latestApplicationAttemptId
argument_list|,
name|user
argument_list|,
name|queue
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
name|state
argument_list|,
name|diagnosticsInfo
argument_list|,
literal|null
argument_list|,
name|createdTime
argument_list|,
name|finishedTime
argument_list|,
name|finalStatus
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|progress
argument_list|,
name|type
argument_list|,
literal|null
argument_list|,
name|appTags
argument_list|,
name|unmanagedApplication
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
name|applicationPriority
argument_list|)
argument_list|,
name|appNodeLabelExpression
argument_list|,
name|amNodeLabelExpression
argument_list|)
argument_list|,
name|appViewACLs
argument_list|)
return|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|QUEUE_ENTITY_INFO
argument_list|)
condition|)
block|{
name|queue
operator|=
name|entityInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|QUEUE_ENTITY_INFO
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|NAME_ENTITY_INFO
argument_list|)
condition|)
block|{
name|name
operator|=
name|entityInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|NAME_ENTITY_INFO
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|TYPE_ENTITY_INFO
argument_list|)
condition|)
block|{
name|type
operator|=
name|entityInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|TYPE_ENTITY_INFO
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|TYPE_ENTITY_INFO
argument_list|)
condition|)
block|{
name|type
operator|=
name|entityInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|TYPE_ENTITY_INFO
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|UNMANAGED_APPLICATION_ENTITY_INFO
argument_list|)
condition|)
block|{
name|unmanagedApplication
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|entityInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|UNMANAGED_APPLICATION_ENTITY_INFO
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APPLICATION_PRIORITY_INFO
argument_list|)
condition|)
block|{
name|applicationPriority
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|entityInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APPLICATION_PRIORITY_INFO
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APP_NODE_LABEL_EXPRESSION
argument_list|)
condition|)
block|{
name|appNodeLabelExpression
operator|=
name|entityInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APP_NODE_LABEL_EXPRESSION
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|AM_NODE_LABEL_EXPRESSION
argument_list|)
condition|)
block|{
name|amNodeLabelExpression
operator|=
name|entityInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|AM_NODE_LABEL_EXPRESSION
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APP_CPU_METRICS
argument_list|)
condition|)
block|{
name|long
name|vcoreSeconds
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|entityInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APP_CPU_METRICS
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|memorySeconds
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|entityInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APP_MEM_METRICS
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|appResources
operator|=
name|ApplicationResourceUsageReport
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|memorySeconds
argument_list|,
name|vcoreSeconds
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APP_TAGS_INFO
argument_list|)
condition|)
block|{
name|appTags
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|Object
name|obj
init|=
name|entityInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APP_TAGS_INFO
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
operator|&&
name|obj
operator|instanceof
name|Collection
argument_list|<
name|?
argument_list|>
condition|)
block|{
for|for
control|(
name|Object
name|o
else|:
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|obj
block|)
block|{
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|appTags
operator|.
name|add
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

begin_expr_stmt
unit|}     List
operator|<
name|TimelineEvent
operator|>
name|events
operator|=
name|entity
operator|.
name|getEvents
argument_list|()
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|events
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TimelineEvent
name|event
range|:
name|events
control|)
block|{
if|if
condition|(
name|event
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|CREATED_EVENT_TYPE
argument_list|)
condition|)
block|{
name|createdTime
operator|=
name|event
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|UPDATED_EVENT_TYPE
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|eventInfo
init|=
name|event
operator|.
name|getEventInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|eventInfo
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|applicationPriority
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|eventInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APPLICATION_PRIORITY_INFO
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|=
name|eventInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|QUEUE_ENTITY_INFO
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|FINISHED_EVENT_TYPE
argument_list|)
condition|)
block|{
name|progress
operator|=
literal|1.0F
expr_stmt|;
name|finishedTime
operator|=
name|event
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|eventInfo
init|=
name|event
operator|.
name|getEventInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|eventInfo
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|eventInfo
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|LATEST_APP_ATTEMPT_EVENT_INFO
argument_list|)
condition|)
block|{
name|latestApplicationAttemptId
operator|=
name|ConverterUtils
operator|.
name|toApplicationAttemptId
argument_list|(
name|eventInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|LATEST_APP_ATTEMPT_EVENT_INFO
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|eventInfo
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|DIAGNOSTICS_INFO_EVENT_INFO
argument_list|)
condition|)
block|{
name|diagnosticsInfo
operator|=
name|eventInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|DIAGNOSTICS_INFO_EVENT_INFO
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|eventInfo
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|FINAL_STATUS_EVENT_INFO
argument_list|)
condition|)
block|{
name|finalStatus
operator|=
name|FinalApplicationStatus
operator|.
name|valueOf
argument_list|(
name|eventInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|FINAL_STATUS_EVENT_INFO
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|eventInfo
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|STATE_EVENT_INFO
argument_list|)
condition|)
block|{
name|state
operator|=
name|YarnApplicationState
operator|.
name|valueOf
argument_list|(
name|eventInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|STATE_EVENT_INFO
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_if

begin_return
return|return
operator|new
name|ApplicationReportExt
argument_list|(
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
name|entity
operator|.
name|getEntityId
argument_list|()
argument_list|)
argument_list|,
name|latestApplicationAttemptId
argument_list|,
name|user
argument_list|,
name|queue
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
name|state
argument_list|,
name|diagnosticsInfo
argument_list|,
literal|null
argument_list|,
name|createdTime
argument_list|,
name|finishedTime
argument_list|,
name|finalStatus
argument_list|,
name|appResources
argument_list|,
literal|null
argument_list|,
name|progress
argument_list|,
name|type
argument_list|,
literal|null
argument_list|,
name|appTags
argument_list|,
name|unmanagedApplication
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
name|applicationPriority
argument_list|)
argument_list|,
name|appNodeLabelExpression
argument_list|,
name|amNodeLabelExpression
argument_list|)
argument_list|,
name|appViewACLs
argument_list|)
return|;
end_return

begin_function
unit|}    private
DECL|method|convertToApplicationAttemptReport ( TimelineEntity entity)
specifier|static
name|ApplicationAttemptReport
name|convertToApplicationAttemptReport
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|)
block|{
name|String
name|host
init|=
literal|null
decl_stmt|;
name|int
name|rpcPort
init|=
operator|-
literal|1
decl_stmt|;
name|ContainerId
name|amContainerId
init|=
literal|null
decl_stmt|;
name|String
name|trackingUrl
init|=
literal|null
decl_stmt|;
name|String
name|originalTrackingUrl
init|=
literal|null
decl_stmt|;
name|String
name|diagnosticsInfo
init|=
literal|null
decl_stmt|;
name|YarnApplicationAttemptState
name|state
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|TimelineEvent
argument_list|>
name|events
init|=
name|entity
operator|.
name|getEvents
argument_list|()
decl_stmt|;
if|if
condition|(
name|events
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TimelineEvent
name|event
range|:
name|events
control|)
block|{
if|if
condition|(
name|event
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|REGISTERED_EVENT_TYPE
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|eventInfo
init|=
name|event
operator|.
name|getEventInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|eventInfo
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|eventInfo
operator|.
name|containsKey
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|HOST_EVENT_INFO
argument_list|)
condition|)
block|{
name|host
operator|=
name|eventInfo
operator|.
name|get
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|HOST_EVENT_INFO
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|eventInfo
operator|.
name|containsKey
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|RPC_PORT_EVENT_INFO
argument_list|)
condition|)
block|{
name|rpcPort
operator|=
operator|(
name|Integer
operator|)
name|eventInfo
operator|.
name|get
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|RPC_PORT_EVENT_INFO
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|eventInfo
operator|.
name|containsKey
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|MASTER_CONTAINER_EVENT_INFO
argument_list|)
condition|)
block|{
name|amContainerId
operator|=
name|ConverterUtils
operator|.
name|toContainerId
argument_list|(
name|eventInfo
operator|.
name|get
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|MASTER_CONTAINER_EVENT_INFO
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|FINISHED_EVENT_TYPE
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|eventInfo
init|=
name|event
operator|.
name|getEventInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|eventInfo
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|eventInfo
operator|.
name|containsKey
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|TRACKING_URL_EVENT_INFO
argument_list|)
condition|)
block|{
name|trackingUrl
operator|=
name|eventInfo
operator|.
name|get
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|TRACKING_URL_EVENT_INFO
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|eventInfo
operator|.
name|containsKey
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|ORIGINAL_TRACKING_URL_EVENT_INFO
argument_list|)
condition|)
block|{
name|originalTrackingUrl
operator|=
name|eventInfo
operator|.
name|get
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|ORIGINAL_TRACKING_URL_EVENT_INFO
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|eventInfo
operator|.
name|containsKey
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|DIAGNOSTICS_INFO_EVENT_INFO
argument_list|)
condition|)
block|{
name|diagnosticsInfo
operator|=
name|eventInfo
operator|.
name|get
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|DIAGNOSTICS_INFO_EVENT_INFO
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|eventInfo
operator|.
name|containsKey
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|STATE_EVENT_INFO
argument_list|)
condition|)
block|{
name|state
operator|=
name|YarnApplicationAttemptState
operator|.
name|valueOf
argument_list|(
name|eventInfo
operator|.
name|get
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|STATE_EVENT_INFO
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|ApplicationAttemptReport
operator|.
name|newInstance
argument_list|(
name|ConverterUtils
operator|.
name|toApplicationAttemptId
argument_list|(
name|entity
operator|.
name|getEntityId
argument_list|()
argument_list|)
argument_list|,
name|host
argument_list|,
name|rpcPort
argument_list|,
name|trackingUrl
argument_list|,
name|originalTrackingUrl
argument_list|,
name|diagnosticsInfo
argument_list|,
name|state
argument_list|,
name|amContainerId
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|convertToContainerReport ( TimelineEntity entity, String serverHttpAddress, String user)
specifier|private
specifier|static
name|ContainerReport
name|convertToContainerReport
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|String
name|serverHttpAddress
parameter_list|,
name|String
name|user
parameter_list|)
block|{
name|int
name|allocatedMem
init|=
literal|0
decl_stmt|;
name|int
name|allocatedVcore
init|=
literal|0
decl_stmt|;
name|String
name|allocatedHost
init|=
literal|null
decl_stmt|;
name|int
name|allocatedPort
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|allocatedPriority
init|=
literal|0
decl_stmt|;
name|long
name|createdTime
init|=
literal|0
decl_stmt|;
name|long
name|finishedTime
init|=
literal|0
decl_stmt|;
name|String
name|diagnosticsInfo
init|=
literal|null
decl_stmt|;
name|int
name|exitStatus
init|=
name|ContainerExitStatus
operator|.
name|INVALID
decl_stmt|;
name|ContainerState
name|state
init|=
literal|null
decl_stmt|;
name|String
name|nodeHttpAddress
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entityInfo
init|=
name|entity
operator|.
name|getOtherInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|entityInfo
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_MEMORY_ENTITY_INFO
argument_list|)
condition|)
block|{
name|allocatedMem
operator|=
operator|(
name|Integer
operator|)
name|entityInfo
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_MEMORY_ENTITY_INFO
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_VCORE_ENTITY_INFO
argument_list|)
condition|)
block|{
name|allocatedVcore
operator|=
operator|(
name|Integer
operator|)
name|entityInfo
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_VCORE_ENTITY_INFO
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_HOST_ENTITY_INFO
argument_list|)
condition|)
block|{
name|allocatedHost
operator|=
name|entityInfo
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_HOST_ENTITY_INFO
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_PORT_ENTITY_INFO
argument_list|)
condition|)
block|{
name|allocatedPort
operator|=
operator|(
name|Integer
operator|)
name|entityInfo
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_PORT_ENTITY_INFO
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_PRIORITY_ENTITY_INFO
argument_list|)
condition|)
block|{
name|allocatedPriority
operator|=
operator|(
name|Integer
operator|)
name|entityInfo
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_PRIORITY_ENTITY_INFO
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_HOST_HTTP_ADDRESS_ENTITY_INFO
argument_list|)
condition|)
block|{
name|nodeHttpAddress
operator|=
operator|(
name|String
operator|)
name|entityInfo
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_HOST_HTTP_ADDRESS_ENTITY_INFO
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|TimelineEvent
argument_list|>
name|events
init|=
name|entity
operator|.
name|getEvents
argument_list|()
decl_stmt|;
if|if
condition|(
name|events
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TimelineEvent
name|event
range|:
name|events
control|)
block|{
if|if
condition|(
name|event
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|ContainerMetricsConstants
operator|.
name|CREATED_EVENT_TYPE
argument_list|)
condition|)
block|{
name|createdTime
operator|=
name|event
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|ContainerMetricsConstants
operator|.
name|FINISHED_EVENT_TYPE
argument_list|)
condition|)
block|{
name|finishedTime
operator|=
name|event
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|eventInfo
init|=
name|event
operator|.
name|getEventInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|eventInfo
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|eventInfo
operator|.
name|containsKey
argument_list|(
name|ContainerMetricsConstants
operator|.
name|DIAGNOSTICS_INFO_EVENT_INFO
argument_list|)
condition|)
block|{
name|diagnosticsInfo
operator|=
name|eventInfo
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|DIAGNOSTICS_INFO_EVENT_INFO
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|eventInfo
operator|.
name|containsKey
argument_list|(
name|ContainerMetricsConstants
operator|.
name|EXIT_STATUS_EVENT_INFO
argument_list|)
condition|)
block|{
name|exitStatus
operator|=
operator|(
name|Integer
operator|)
name|eventInfo
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|EXIT_STATUS_EVENT_INFO
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|eventInfo
operator|.
name|containsKey
argument_list|(
name|ContainerMetricsConstants
operator|.
name|STATE_EVENT_INFO
argument_list|)
condition|)
block|{
name|state
operator|=
name|ContainerState
operator|.
name|valueOf
argument_list|(
name|eventInfo
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|STATE_EVENT_INFO
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|NodeId
name|allocatedNode
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
name|allocatedHost
argument_list|,
name|allocatedPort
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ConverterUtils
operator|.
name|toContainerId
argument_list|(
name|entity
operator|.
name|getEntityId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|logUrl
init|=
name|WebAppUtils
operator|.
name|getAggregatedLogURL
argument_list|(
name|serverHttpAddress
argument_list|,
name|allocatedNode
operator|.
name|toString
argument_list|()
argument_list|,
name|containerId
operator|.
name|toString
argument_list|()
argument_list|,
name|containerId
operator|.
name|toString
argument_list|()
argument_list|,
name|user
argument_list|)
decl_stmt|;
return|return
name|ContainerReport
operator|.
name|newInstance
argument_list|(
name|ConverterUtils
operator|.
name|toContainerId
argument_list|(
name|entity
operator|.
name|getEntityId
argument_list|()
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
name|allocatedMem
argument_list|,
name|allocatedVcore
argument_list|)
argument_list|,
name|NodeId
operator|.
name|newInstance
argument_list|(
name|allocatedHost
argument_list|,
name|allocatedPort
argument_list|)
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
name|allocatedPriority
argument_list|)
argument_list|,
name|createdTime
argument_list|,
name|finishedTime
argument_list|,
name|diagnosticsInfo
argument_list|,
name|logUrl
argument_list|,
name|exitStatus
argument_list|,
name|state
argument_list|,
name|nodeHttpAddress
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|generateApplicationReport (TimelineEntity entity, ApplicationReportField field)
specifier|private
name|ApplicationReportExt
name|generateApplicationReport
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|ApplicationReportField
name|field
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ApplicationReportExt
name|app
init|=
name|convertToApplicationReport
argument_list|(
name|entity
argument_list|,
name|field
argument_list|)
decl_stmt|;
comment|// If only user and acls are pulled to check attempt(s)/container(s) access
comment|// control, we can return immediately
if|if
condition|(
name|field
operator|==
name|ApplicationReportField
operator|.
name|USER_AND_ACLS
condition|)
block|{
return|return
name|app
return|;
block|}
try|try
block|{
name|checkAccess
argument_list|(
name|app
argument_list|)
expr_stmt|;
if|if
condition|(
name|app
operator|.
name|appReport
operator|.
name|getCurrentApplicationAttemptId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ApplicationAttemptReport
name|appAttempt
init|=
name|getApplicationAttempt
argument_list|(
name|app
operator|.
name|appReport
operator|.
name|getCurrentApplicationAttemptId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|app
operator|.
name|appReport
operator|.
name|setHost
argument_list|(
name|appAttempt
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|app
operator|.
name|appReport
operator|.
name|setRpcPort
argument_list|(
name|appAttempt
operator|.
name|getRpcPort
argument_list|()
argument_list|)
expr_stmt|;
name|app
operator|.
name|appReport
operator|.
name|setTrackingUrl
argument_list|(
name|appAttempt
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|app
operator|.
name|appReport
operator|.
name|setOriginalTrackingUrl
argument_list|(
name|appAttempt
operator|.
name|getOriginalTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AuthorizationException
decl||
name|ApplicationAttemptNotFoundException
name|e
parameter_list|)
block|{
comment|// AuthorizationException is thrown because the user doesn't have access
comment|// It's possible that the app is finished before the first attempt is created.
name|app
operator|.
name|appReport
operator|.
name|setDiagnostics
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|app
operator|.
name|appReport
operator|.
name|setCurrentApplicationAttemptId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|app
operator|.
name|appReport
operator|.
name|getCurrentApplicationAttemptId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|app
operator|.
name|appReport
operator|.
name|setCurrentApplicationAttemptId
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|app
operator|.
name|appReport
operator|.
name|getApplicationId
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|app
operator|.
name|appReport
operator|.
name|getHost
argument_list|()
operator|==
literal|null
condition|)
block|{
name|app
operator|.
name|appReport
operator|.
name|setHost
argument_list|(
name|UNAVAILABLE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|app
operator|.
name|appReport
operator|.
name|getRpcPort
argument_list|()
operator|<
literal|0
condition|)
block|{
name|app
operator|.
name|appReport
operator|.
name|setRpcPort
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|app
operator|.
name|appReport
operator|.
name|getTrackingUrl
argument_list|()
operator|==
literal|null
condition|)
block|{
name|app
operator|.
name|appReport
operator|.
name|setTrackingUrl
argument_list|(
name|UNAVAILABLE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|app
operator|.
name|appReport
operator|.
name|getOriginalTrackingUrl
argument_list|()
operator|==
literal|null
condition|)
block|{
name|app
operator|.
name|appReport
operator|.
name|setOriginalTrackingUrl
argument_list|(
name|UNAVAILABLE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|app
operator|.
name|appReport
operator|.
name|getDiagnostics
argument_list|()
operator|==
literal|null
condition|)
block|{
name|app
operator|.
name|appReport
operator|.
name|setDiagnostics
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|app
return|;
block|}
end_function

begin_function
DECL|method|getApplication (ApplicationId appId, ApplicationReportField field)
specifier|private
name|ApplicationReportExt
name|getApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|ApplicationReportField
name|field
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|TimelineEntity
name|entity
init|=
name|timelineDataManager
operator|.
name|getEntity
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|ENTITY_TYPE
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Field
operator|.
name|class
argument_list|)
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ApplicationNotFoundException
argument_list|(
literal|"The entity for application "
operator|+
name|appId
operator|+
literal|" doesn't exist in the timeline store"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|generateApplicationReport
argument_list|(
name|entity
argument_list|,
name|field
argument_list|)
return|;
block|}
block|}
end_function

begin_function
DECL|method|checkAccess (ApplicationReportExt app)
specifier|private
name|void
name|checkAccess
parameter_list|(
name|ApplicationReportExt
name|app
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
if|if
condition|(
name|app
operator|.
name|appViewACLs
operator|!=
literal|null
condition|)
block|{
name|aclsManager
operator|.
name|addApplication
argument_list|(
name|app
operator|.
name|appReport
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app
operator|.
name|appViewACLs
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|aclsManager
operator|.
name|checkAccess
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|app
operator|.
name|appReport
operator|.
name|getUser
argument_list|()
argument_list|,
name|app
operator|.
name|appReport
operator|.
name|getApplicationId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AuthorizationException
argument_list|(
literal|"User "
operator|+
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|" does not have privilage to see this application "
operator|+
name|app
operator|.
name|appReport
operator|.
name|getApplicationId
argument_list|()
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|aclsManager
operator|.
name|removeApplication
argument_list|(
name|app
operator|.
name|appReport
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_enum
DECL|enum|ApplicationReportField
specifier|private
specifier|static
enum|enum
name|ApplicationReportField
block|{
DECL|enumConstant|ALL
name|ALL
block|,
comment|// retrieve all the fields
DECL|enumConstant|USER_AND_ACLS
name|USER_AND_ACLS
comment|// retrieve user and ACLs info only
block|}
end_enum

begin_class
DECL|class|ApplicationReportExt
specifier|private
specifier|static
class|class
name|ApplicationReportExt
block|{
DECL|field|appReport
specifier|private
name|ApplicationReport
name|appReport
decl_stmt|;
DECL|field|appViewACLs
specifier|private
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|appViewACLs
decl_stmt|;
DECL|method|ApplicationReportExt ( ApplicationReport appReport, Map<ApplicationAccessType, String> appViewACLs)
specifier|public
name|ApplicationReportExt
parameter_list|(
name|ApplicationReport
name|appReport
parameter_list|,
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|appViewACLs
parameter_list|)
block|{
name|this
operator|.
name|appReport
operator|=
name|appReport
expr_stmt|;
name|this
operator|.
name|appViewACLs
operator|=
name|appViewACLs
expr_stmt|;
block|}
block|}
end_class

unit|}
end_unit

