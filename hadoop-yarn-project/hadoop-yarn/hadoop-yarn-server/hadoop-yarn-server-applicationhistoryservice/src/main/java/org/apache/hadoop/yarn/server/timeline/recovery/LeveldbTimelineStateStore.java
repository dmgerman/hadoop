begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timeline.recovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|recovery
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|util
operator|.
name|LeveldbUtils
operator|.
name|prefixMatches
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerCommonProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|TimelineDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|records
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|VersionPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|recovery
operator|.
name|records
operator|.
name|TimelineDelegationTokenIdentifierData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|util
operator|.
name|LeveldbUtils
operator|.
name|KeyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|LeveldbIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|leveldbjni
operator|.
name|JniDBFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|leveldbjni
operator|.
name|internal
operator|.
name|NativeDB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|WriteBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|fusesource
operator|.
name|leveldbjni
operator|.
name|JniDBFactory
operator|.
name|bytes
import|;
end_import

begin_comment
comment|/**  * A timeline service state storage implementation that supports any persistent  * storage that adheres to the LevelDB interface.  */
end_comment

begin_class
DECL|class|LeveldbTimelineStateStore
specifier|public
class|class
name|LeveldbTimelineStateStore
extends|extends
name|TimelineStateStore
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LeveldbTimelineStateStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DB_NAME
specifier|private
specifier|static
specifier|final
name|String
name|DB_NAME
init|=
literal|"timeline-state-store.ldb"
decl_stmt|;
DECL|field|LEVELDB_DIR_UMASK
specifier|private
specifier|static
specifier|final
name|FsPermission
name|LEVELDB_DIR_UMASK
init|=
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
decl_stmt|;
DECL|field|TOKEN_ENTRY_PREFIX
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TOKEN_ENTRY_PREFIX
init|=
name|bytes
argument_list|(
literal|"t"
argument_list|)
decl_stmt|;
DECL|field|TOKEN_MASTER_KEY_ENTRY_PREFIX
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TOKEN_MASTER_KEY_ENTRY_PREFIX
init|=
name|bytes
argument_list|(
literal|"k"
argument_list|)
decl_stmt|;
DECL|field|LATEST_SEQUENCE_NUMBER_KEY
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|LATEST_SEQUENCE_NUMBER_KEY
init|=
name|bytes
argument_list|(
literal|"s"
argument_list|)
decl_stmt|;
DECL|field|CURRENT_VERSION_INFO
specifier|private
specifier|static
specifier|final
name|Version
name|CURRENT_VERSION_INFO
init|=
name|Version
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|TIMELINE_STATE_STORE_VERSION_KEY
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TIMELINE_STATE_STORE_VERSION_KEY
init|=
name|bytes
argument_list|(
literal|"v"
argument_list|)
decl_stmt|;
DECL|field|db
specifier|private
name|DB
name|db
decl_stmt|;
DECL|method|LeveldbTimelineStateStore ()
specifier|public
name|LeveldbTimelineStateStore
parameter_list|()
block|{
name|super
argument_list|(
name|LeveldbTimelineStateStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initStorage (Configuration conf)
specifier|protected
name|void
name|initStorage
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
DECL|method|startStorage ()
specifier|protected
name|void
name|startStorage
parameter_list|()
throws|throws
name|IOException
block|{
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|Path
name|dbPath
init|=
operator|new
name|Path
argument_list|(
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_LEVELDB_STATE_STORE_PATH
argument_list|)
argument_list|,
name|DB_NAME
argument_list|)
decl_stmt|;
name|FileSystem
name|localFS
init|=
literal|null
decl_stmt|;
try|try
block|{
name|localFS
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|localFS
operator|.
name|exists
argument_list|(
name|dbPath
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|localFS
operator|.
name|mkdirs
argument_list|(
name|dbPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't create directory for leveldb "
operator|+
literal|"timeline store "
operator|+
name|dbPath
argument_list|)
throw|;
block|}
name|localFS
operator|.
name|setPermission
argument_list|(
name|dbPath
argument_list|,
name|LEVELDB_DIR_UMASK
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|localFS
argument_list|)
expr_stmt|;
block|}
name|JniDBFactory
name|factory
init|=
operator|new
name|JniDBFactory
argument_list|()
decl_stmt|;
try|try
block|{
name|options
operator|.
name|createIfMissing
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|db
operator|=
name|factory
operator|.
name|open
argument_list|(
operator|new
name|File
argument_list|(
name|dbPath
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Loading the existing database at th path: "
operator|+
name|dbPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|checkVersion
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NativeDB
operator|.
name|DBException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isNotFound
argument_list|()
operator|||
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|" does not exist "
argument_list|)
condition|)
block|{
try|try
block|{
name|options
operator|.
name|createIfMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|db
operator|=
name|factory
operator|.
name|open
argument_list|(
operator|new
name|File
argument_list|(
name|dbPath
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating a new database at th path: "
operator|+
name|dbPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|storeVersion
argument_list|(
name|CURRENT_VERSION_INFO
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|closeStorage ()
specifier|protected
name|void
name|closeStorage
parameter_list|()
throws|throws
name|IOException
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|loadState ()
specifier|public
name|TimelineServiceState
name|loadState
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Loading timeline service state from leveldb"
argument_list|)
expr_stmt|;
name|TimelineServiceState
name|state
init|=
operator|new
name|TimelineServiceState
argument_list|()
decl_stmt|;
name|int
name|numKeys
init|=
name|loadTokenMasterKeys
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|int
name|numTokens
init|=
name|loadTokens
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|loadLatestSequenceNumber
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Loaded "
operator|+
name|numKeys
operator|+
literal|" master keys and "
operator|+
name|numTokens
operator|+
literal|" tokens from leveldb, and latest sequence number is "
operator|+
name|state
operator|.
name|getLatestSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|state
return|;
block|}
annotation|@
name|Override
DECL|method|storeToken (TimelineDelegationTokenIdentifier tokenId, Long renewDate)
specifier|public
name|void
name|storeToken
parameter_list|(
name|TimelineDelegationTokenIdentifier
name|tokenId
parameter_list|,
name|Long
name|renewDate
parameter_list|)
throws|throws
name|IOException
block|{
name|DataOutputStream
name|ds
init|=
literal|null
decl_stmt|;
name|WriteBatch
name|batch
init|=
literal|null
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|k
init|=
name|createTokenEntryKey
argument_list|(
name|tokenId
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|db
operator|.
name|get
argument_list|(
name|k
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|tokenId
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|v
init|=
name|buildTokenData
argument_list|(
name|tokenId
argument_list|,
name|renewDate
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bs
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ds
operator|=
operator|new
name|DataOutputStream
argument_list|(
name|bs
argument_list|)
expr_stmt|;
name|ds
operator|.
name|writeInt
argument_list|(
name|tokenId
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
name|batch
operator|=
name|db
operator|.
name|createWriteBatch
argument_list|()
expr_stmt|;
name|batch
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|batch
operator|.
name|put
argument_list|(
name|LATEST_SEQUENCE_NUMBER_KEY
argument_list|,
name|bs
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|write
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|ds
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|updateToken (TimelineDelegationTokenIdentifier tokenId, Long renewDate)
specifier|public
name|void
name|updateToken
parameter_list|(
name|TimelineDelegationTokenIdentifier
name|tokenId
parameter_list|,
name|Long
name|renewDate
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|byte
index|[]
name|k
init|=
name|createTokenEntryKey
argument_list|(
name|tokenId
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|db
operator|.
name|get
argument_list|(
name|k
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|tokenId
operator|+
literal|" doesn't exist"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|v
init|=
name|buildTokenData
argument_list|(
name|tokenId
argument_list|,
name|renewDate
argument_list|)
decl_stmt|;
name|db
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeToken (TimelineDelegationTokenIdentifier tokenId)
specifier|public
name|void
name|removeToken
parameter_list|(
name|TimelineDelegationTokenIdentifier
name|tokenId
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|byte
index|[]
name|key
init|=
name|createTokenEntryKey
argument_list|(
name|tokenId
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
decl_stmt|;
name|db
operator|.
name|delete
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeTokenMasterKey (DelegationKey key)
specifier|public
name|void
name|storeTokenMasterKey
parameter_list|(
name|DelegationKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|byte
index|[]
name|k
init|=
name|createTokenMasterKeyEntryKey
argument_list|(
name|key
operator|.
name|getKeyId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|db
operator|.
name|get
argument_list|(
name|k
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|key
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|v
init|=
name|buildTokenMasterKeyData
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|db
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeTokenMasterKey (DelegationKey key)
specifier|public
name|void
name|removeTokenMasterKey
parameter_list|(
name|DelegationKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|byte
index|[]
name|k
init|=
name|createTokenMasterKeyEntryKey
argument_list|(
name|key
operator|.
name|getKeyId
argument_list|()
argument_list|)
decl_stmt|;
name|db
operator|.
name|delete
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|buildTokenData ( TimelineDelegationTokenIdentifier tokenId, Long renewDate)
specifier|private
specifier|static
name|byte
index|[]
name|buildTokenData
parameter_list|(
name|TimelineDelegationTokenIdentifier
name|tokenId
parameter_list|,
name|Long
name|renewDate
parameter_list|)
throws|throws
name|IOException
block|{
name|TimelineDelegationTokenIdentifierData
name|data
init|=
operator|new
name|TimelineDelegationTokenIdentifierData
argument_list|(
name|tokenId
argument_list|,
name|renewDate
argument_list|)
decl_stmt|;
return|return
name|data
operator|.
name|toByteArray
argument_list|()
return|;
block|}
DECL|method|buildTokenMasterKeyData (DelegationKey key)
specifier|private
specifier|static
name|byte
index|[]
name|buildTokenMasterKeyData
parameter_list|(
name|DelegationKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|memStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dataStream
init|=
operator|new
name|DataOutputStream
argument_list|(
name|memStream
argument_list|)
decl_stmt|;
try|try
block|{
name|key
operator|.
name|write
argument_list|(
name|dataStream
argument_list|)
expr_stmt|;
name|dataStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|dataStream
argument_list|)
expr_stmt|;
block|}
return|return
name|memStream
operator|.
name|toByteArray
argument_list|()
return|;
block|}
DECL|method|loadTokenMasterKeyData (TimelineServiceState state, byte[] keyData)
specifier|private
specifier|static
name|void
name|loadTokenMasterKeyData
parameter_list|(
name|TimelineServiceState
name|state
parameter_list|,
name|byte
index|[]
name|keyData
parameter_list|)
throws|throws
name|IOException
block|{
name|DelegationKey
name|key
init|=
operator|new
name|DelegationKey
argument_list|()
decl_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|keyData
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|key
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|tokenMasterKeyState
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
DECL|method|loadTokenData (TimelineServiceState state, byte[] tokenData)
specifier|private
specifier|static
name|void
name|loadTokenData
parameter_list|(
name|TimelineServiceState
name|state
parameter_list|,
name|byte
index|[]
name|tokenData
parameter_list|)
throws|throws
name|IOException
block|{
name|TimelineDelegationTokenIdentifierData
name|data
init|=
operator|new
name|TimelineDelegationTokenIdentifierData
argument_list|()
decl_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|tokenData
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|data
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|tokenState
operator|.
name|put
argument_list|(
name|data
operator|.
name|getTokenIdentifier
argument_list|()
argument_list|,
name|data
operator|.
name|getRenewDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|loadTokenMasterKeys (TimelineServiceState state)
specifier|private
name|int
name|loadTokenMasterKeys
parameter_list|(
name|TimelineServiceState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|base
init|=
name|KeyBuilder
operator|.
name|newInstance
argument_list|()
operator|.
name|add
argument_list|(
name|TOKEN_MASTER_KEY_ENTRY_PREFIX
argument_list|)
operator|.
name|getBytesForLookup
argument_list|()
decl_stmt|;
name|int
name|numKeys
init|=
literal|0
decl_stmt|;
name|LeveldbIterator
name|iterator
init|=
literal|null
decl_stmt|;
try|try
block|{
for|for
control|(
name|iterator
operator|=
operator|new
name|LeveldbIterator
argument_list|(
name|db
argument_list|)
operator|,
name|iterator
operator|.
name|seek
argument_list|(
name|base
argument_list|)
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
name|iterator
operator|.
name|next
argument_list|()
control|)
block|{
name|byte
index|[]
name|k
init|=
name|iterator
operator|.
name|peekNext
argument_list|()
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|prefixMatches
argument_list|(
name|base
argument_list|,
name|base
operator|.
name|length
argument_list|,
name|k
argument_list|)
condition|)
block|{
break|break;
block|}
name|byte
index|[]
name|v
init|=
name|iterator
operator|.
name|peekNext
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|loadTokenMasterKeyData
argument_list|(
name|state
argument_list|,
name|v
argument_list|)
expr_stmt|;
operator|++
name|numKeys
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|iterator
argument_list|)
expr_stmt|;
block|}
return|return
name|numKeys
return|;
block|}
DECL|method|loadTokens (TimelineServiceState state)
specifier|private
name|int
name|loadTokens
parameter_list|(
name|TimelineServiceState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|base
init|=
name|KeyBuilder
operator|.
name|newInstance
argument_list|()
operator|.
name|add
argument_list|(
name|TOKEN_ENTRY_PREFIX
argument_list|)
operator|.
name|getBytesForLookup
argument_list|()
decl_stmt|;
name|int
name|numTokens
init|=
literal|0
decl_stmt|;
name|LeveldbIterator
name|iterator
init|=
literal|null
decl_stmt|;
try|try
block|{
for|for
control|(
name|iterator
operator|=
operator|new
name|LeveldbIterator
argument_list|(
name|db
argument_list|)
operator|,
name|iterator
operator|.
name|seek
argument_list|(
name|base
argument_list|)
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
name|iterator
operator|.
name|next
argument_list|()
control|)
block|{
name|byte
index|[]
name|k
init|=
name|iterator
operator|.
name|peekNext
argument_list|()
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|prefixMatches
argument_list|(
name|base
argument_list|,
name|base
operator|.
name|length
argument_list|,
name|k
argument_list|)
condition|)
block|{
break|break;
block|}
name|byte
index|[]
name|v
init|=
name|iterator
operator|.
name|peekNext
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|loadTokenData
argument_list|(
name|state
argument_list|,
name|v
argument_list|)
expr_stmt|;
operator|++
name|numTokens
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|iterator
argument_list|)
expr_stmt|;
block|}
return|return
name|numTokens
return|;
block|}
DECL|method|loadLatestSequenceNumber (TimelineServiceState state)
specifier|private
name|void
name|loadLatestSequenceNumber
parameter_list|(
name|TimelineServiceState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
literal|null
decl_stmt|;
try|try
block|{
name|data
operator|=
name|db
operator|.
name|get
argument_list|(
name|LATEST_SEQUENCE_NUMBER_KEY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|state
operator|.
name|latestSequenceNumber
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Creates a domain entity key with column name suffix, of the form    * TOKEN_ENTRY_PREFIX + sequence number.    */
DECL|method|createTokenEntryKey (int seqNum)
specifier|private
specifier|static
name|byte
index|[]
name|createTokenEntryKey
parameter_list|(
name|int
name|seqNum
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|KeyBuilder
operator|.
name|newInstance
argument_list|()
operator|.
name|add
argument_list|(
name|TOKEN_ENTRY_PREFIX
argument_list|)
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|seqNum
argument_list|)
argument_list|)
operator|.
name|getBytes
argument_list|()
return|;
block|}
comment|/**    * Creates a domain entity key with column name suffix, of the form    * TOKEN_MASTER_KEY_ENTRY_PREFIX + sequence number.    */
DECL|method|createTokenMasterKeyEntryKey (int keyId)
specifier|private
specifier|static
name|byte
index|[]
name|createTokenMasterKeyEntryKey
parameter_list|(
name|int
name|keyId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|KeyBuilder
operator|.
name|newInstance
argument_list|()
operator|.
name|add
argument_list|(
name|TOKEN_MASTER_KEY_ENTRY_PREFIX
argument_list|)
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|keyId
argument_list|)
argument_list|)
operator|.
name|getBytes
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|loadVersion ()
name|Version
name|loadVersion
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|byte
index|[]
name|data
init|=
name|db
operator|.
name|get
argument_list|(
name|TIMELINE_STATE_STORE_VERSION_KEY
argument_list|)
decl_stmt|;
comment|// if version is not stored previously, treat it as CURRENT_VERSION_INFO.
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|data
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|getCurrentVersion
argument_list|()
return|;
block|}
name|Version
name|version
init|=
operator|new
name|VersionPBImpl
argument_list|(
name|YarnServerCommonProtos
operator|.
name|VersionProto
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|version
return|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|storeVersion (Version state)
name|void
name|storeVersion
parameter_list|(
name|Version
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
operator|(
operator|(
name|VersionPBImpl
operator|)
name|state
operator|)
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|TIMELINE_STATE_STORE_VERSION_KEY
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getCurrentVersion ()
name|Version
name|getCurrentVersion
parameter_list|()
block|{
return|return
name|CURRENT_VERSION_INFO
return|;
block|}
comment|/**    * 1) Versioning timeline state store:    * major.minor. For e.g. 1.0, 1.1, 1.2...1.25, 2.0 etc.    * 2) Any incompatible change of TS-store is a major upgrade, and any    * compatible change of TS-store is a minor upgrade.    * 3) Within a minor upgrade, say 1.1 to 1.2:    * overwrite the version info and proceed as normal.    * 4) Within a major upgrade, say 1.2 to 2.0:    * throw exception and indicate user to use a separate upgrade tool to    * upgrade timeline store or remove incompatible old state.    */
DECL|method|checkVersion ()
specifier|private
name|void
name|checkVersion
parameter_list|()
throws|throws
name|IOException
block|{
name|Version
name|loadedVersion
init|=
name|loadVersion
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Loaded timeline state store version info "
operator|+
name|loadedVersion
argument_list|)
expr_stmt|;
if|if
condition|(
name|loadedVersion
operator|.
name|equals
argument_list|(
name|getCurrentVersion
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|loadedVersion
operator|.
name|isCompatibleTo
argument_list|(
name|getCurrentVersion
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Storing timeline state store version info "
operator|+
name|getCurrentVersion
argument_list|()
argument_list|)
expr_stmt|;
name|storeVersion
argument_list|(
name|CURRENT_VERSION_INFO
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|incompatibleMessage
init|=
literal|"Incompatible version for timeline state store: expecting version "
operator|+
name|getCurrentVersion
argument_list|()
operator|+
literal|", but loading version "
operator|+
name|loadedVersion
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|incompatibleMessage
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|incompatibleMessage
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

