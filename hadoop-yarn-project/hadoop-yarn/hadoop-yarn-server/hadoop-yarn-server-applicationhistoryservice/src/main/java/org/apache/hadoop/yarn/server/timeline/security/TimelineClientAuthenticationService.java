begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timeline.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|KerberosAuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineDelegationTokenResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|TimelineDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|TimelineDelegationTokenOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|TimelineAuthenticationConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|webapp
operator|.
name|AHSWebApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|YarnJacksonJaxbJsonProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_comment
comment|/**  * Server side<code>AuthenticationHandler</code> that authenticates requests  * using the incoming delegation token as a 'delegation' query string parameter.  *<p/>  * If not delegation token is present in the request it delegates to the  * {@link KerberosAuthenticationHandler}  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|TimelineClientAuthenticationService
specifier|public
class|class
name|TimelineClientAuthenticationService
extends|extends
name|KerberosAuthenticationHandler
block|{
DECL|field|TYPE
specifier|public
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"kerberos-dt"
decl_stmt|;
DECL|field|DELEGATION_TOKEN_OPS
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|DELEGATION_TOKEN_OPS
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|OP_PARAM
specifier|private
specifier|static
specifier|final
name|String
name|OP_PARAM
init|=
literal|"op"
decl_stmt|;
DECL|field|ENTER
specifier|private
specifier|static
specifier|final
name|String
name|ENTER
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
DECL|field|mapper
specifier|private
name|ObjectMapper
name|mapper
decl_stmt|;
static|static
block|{
name|DELEGATION_TOKEN_OPS
operator|.
name|add
argument_list|(
name|TimelineDelegationTokenOperation
operator|.
name|GETDELEGATIONTOKEN
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|DELEGATION_TOKEN_OPS
operator|.
name|add
argument_list|(
name|TimelineDelegationTokenOperation
operator|.
name|RENEWDELEGATIONTOKEN
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|DELEGATION_TOKEN_OPS
operator|.
name|add
argument_list|(
name|TimelineDelegationTokenOperation
operator|.
name|CANCELDELEGATIONTOKEN
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|TimelineClientAuthenticationService ()
specifier|public
name|TimelineClientAuthenticationService
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|mapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
expr_stmt|;
name|YarnJacksonJaxbJsonProvider
operator|.
name|configObjectMapper
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns authentication type of the handler.    *     * @return<code>delegationtoken-kerberos</code>    */
annotation|@
name|Override
DECL|method|getType ()
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|TYPE
return|;
block|}
annotation|@
name|Override
DECL|method|managementOperation (AuthenticationToken token, HttpServletRequest request, HttpServletResponse response)
specifier|public
name|boolean
name|managementOperation
parameter_list|(
name|AuthenticationToken
name|token
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
name|boolean
name|requestContinues
init|=
literal|true
decl_stmt|;
name|String
name|op
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|OP_PARAM
argument_list|)
decl_stmt|;
name|op
operator|=
operator|(
name|op
operator|!=
literal|null
operator|)
condition|?
name|op
operator|.
name|toUpperCase
argument_list|()
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|DELEGATION_TOKEN_OPS
operator|.
name|contains
argument_list|(
name|op
argument_list|)
operator|&&
operator|!
name|request
operator|.
name|getMethod
argument_list|()
operator|.
name|equals
argument_list|(
literal|"OPTIONS"
argument_list|)
condition|)
block|{
name|TimelineDelegationTokenOperation
name|dtOp
init|=
name|TimelineDelegationTokenOperation
operator|.
name|valueOf
argument_list|(
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|dtOp
operator|.
name|getHttpMethod
argument_list|()
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|dtOp
operator|.
name|requiresKerberosCredentials
argument_list|()
operator|&&
name|token
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Operation [{0}] requires SPNEGO authentication established"
argument_list|,
name|dtOp
argument_list|)
argument_list|)
expr_stmt|;
name|requestContinues
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|TimelineDelegationTokenSecretManagerService
name|secretManager
init|=
name|AHSWebApp
operator|.
name|getInstance
argument_list|()
operator|.
name|getTimelineDelegationTokenSecretManagerService
argument_list|()
decl_stmt|;
try|try
block|{
name|TimelineDelegationTokenResponse
name|res
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|dtOp
condition|)
block|{
case|case
name|GETDELEGATIONTOKEN
case|:
name|UserGroupInformation
name|ownerUGI
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|token
operator|.
name|getUserName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|renewerParam
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|TimelineAuthenticationConsts
operator|.
name|RENEWER_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|renewerParam
operator|==
literal|null
condition|)
block|{
name|renewerParam
operator|=
name|token
operator|.
name|getUserName
argument_list|()
expr_stmt|;
block|}
name|Token
argument_list|<
name|?
argument_list|>
name|dToken
init|=
name|secretManager
operator|.
name|createToken
argument_list|(
name|ownerUGI
argument_list|,
name|renewerParam
argument_list|)
decl_stmt|;
name|res
operator|=
operator|new
name|TimelineDelegationTokenResponse
argument_list|()
expr_stmt|;
name|res
operator|.
name|setType
argument_list|(
name|TimelineAuthenticationConsts
operator|.
name|DELEGATION_TOKEN_URL
argument_list|)
expr_stmt|;
name|res
operator|.
name|setContent
argument_list|(
name|dToken
operator|.
name|encodeToUrlString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|RENEWDELEGATIONTOKEN
case|:
case|case
name|CANCELDELEGATIONTOKEN
case|:
name|String
name|tokenParam
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|TimelineAuthenticationConsts
operator|.
name|TOKEN_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenParam
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Operation [{0}] requires the parameter [{1}]"
argument_list|,
name|dtOp
argument_list|,
name|TimelineAuthenticationConsts
operator|.
name|TOKEN_PARAM
argument_list|)
argument_list|)
expr_stmt|;
name|requestContinues
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|dtOp
operator|==
name|TimelineDelegationTokenOperation
operator|.
name|CANCELDELEGATIONTOKEN
condition|)
block|{
name|Token
argument_list|<
name|TimelineDelegationTokenIdentifier
argument_list|>
name|dt
init|=
operator|new
name|Token
argument_list|<
name|TimelineDelegationTokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
name|dt
operator|.
name|decodeFromUrlString
argument_list|(
name|tokenParam
argument_list|)
expr_stmt|;
name|secretManager
operator|.
name|cancelToken
argument_list|(
name|dt
argument_list|,
name|token
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Token
argument_list|<
name|TimelineDelegationTokenIdentifier
argument_list|>
name|dt
init|=
operator|new
name|Token
argument_list|<
name|TimelineDelegationTokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
name|dt
operator|.
name|decodeFromUrlString
argument_list|(
name|tokenParam
argument_list|)
expr_stmt|;
name|long
name|expirationTime
init|=
name|secretManager
operator|.
name|renewToken
argument_list|(
name|dt
argument_list|,
name|token
operator|.
name|getUserName
argument_list|()
argument_list|)
decl_stmt|;
name|res
operator|=
operator|new
name|TimelineDelegationTokenResponse
argument_list|()
expr_stmt|;
name|res
operator|.
name|setType
argument_list|(
name|TimelineAuthenticationConsts
operator|.
name|DELEGATION_TOKEN_EXPIRATION_TIME
argument_list|)
expr_stmt|;
name|res
operator|.
name|setContent
argument_list|(
name|expirationTime
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
if|if
condition|(
name|requestContinues
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
block|{
name|response
operator|.
name|setContentType
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
name|response
operator|.
name|getWriter
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|writeValue
argument_list|(
name|writer
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|ENTER
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|requestContinues
operator|=
literal|false
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Wrong HTTP method [{0}] for operation [{1}], it should be [{2}]"
argument_list|,
name|request
operator|.
name|getMethod
argument_list|()
argument_list|,
name|dtOp
argument_list|,
name|dtOp
operator|.
name|getHttpMethod
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|requestContinues
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|requestContinues
return|;
block|}
comment|/**    * Authenticates a request looking for the<code>delegation</code>    * query-string parameter and verifying it is a valid token. If there is not    *<code>delegation</code> query-string parameter, it delegates the    * authentication to the {@link KerberosAuthenticationHandler} unless it is    * disabled.    *     * @param request    *          the HTTP client request.    * @param response    *          the HTTP client response.    *     * @return the authentication token for the authenticated request.    * @throws IOException    *           thrown if an IO error occurred.    * @throws AuthenticationException    *           thrown if the authentication failed.    */
annotation|@
name|Override
DECL|method|authenticate (HttpServletRequest request, HttpServletResponse response)
specifier|public
name|AuthenticationToken
name|authenticate
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
name|AuthenticationToken
name|token
decl_stmt|;
name|String
name|delegationParam
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|TimelineAuthenticationConsts
operator|.
name|DELEGATION_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|delegationParam
operator|!=
literal|null
condition|)
block|{
name|Token
argument_list|<
name|TimelineDelegationTokenIdentifier
argument_list|>
name|dt
init|=
operator|new
name|Token
argument_list|<
name|TimelineDelegationTokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
name|dt
operator|.
name|decodeFromUrlString
argument_list|(
name|delegationParam
argument_list|)
expr_stmt|;
name|TimelineDelegationTokenSecretManagerService
name|secretManager
init|=
name|AHSWebApp
operator|.
name|getInstance
argument_list|()
operator|.
name|getTimelineDelegationTokenSecretManagerService
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|secretManager
operator|.
name|verifyToken
argument_list|(
name|dt
argument_list|)
decl_stmt|;
specifier|final
name|String
name|shortName
init|=
name|ugi
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
comment|// creating a ephemeral token
name|token
operator|=
operator|new
name|AuthenticationToken
argument_list|(
name|shortName
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|,
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|.
name|setExpires
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|token
operator|=
name|super
operator|.
name|authenticate
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
return|return
name|token
return|;
block|}
block|}
end_class

end_unit

