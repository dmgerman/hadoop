begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timeline
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEvents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEvents
operator|.
name|EventsOfOneEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineDomains
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelinePutResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelinePutResponse
operator|.
name|TimelinePutError
import|;
end_import

begin_comment
comment|/**  * In-memory implementation of {@link TimelineStore}. This  * implementation is for test purpose only. If users improperly instantiate it,  * they may encounter reading and writing history data in different memory  * store.  *   * The methods are synchronized to avoid concurrent modification on the memory.  *   */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|MemoryTimelineStore
specifier|public
class|class
name|MemoryTimelineStore
extends|extends
name|AbstractService
implements|implements
name|TimelineStore
block|{
DECL|field|entities
specifier|private
name|Map
argument_list|<
name|EntityIdentifier
argument_list|,
name|TimelineEntity
argument_list|>
name|entities
init|=
operator|new
name|HashMap
argument_list|<
name|EntityIdentifier
argument_list|,
name|TimelineEntity
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|entityInsertTimes
specifier|private
name|Map
argument_list|<
name|EntityIdentifier
argument_list|,
name|Long
argument_list|>
name|entityInsertTimes
init|=
operator|new
name|HashMap
argument_list|<
name|EntityIdentifier
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|domainsById
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|TimelineDomain
argument_list|>
name|domainsById
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TimelineDomain
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|domainsByOwner
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|TimelineDomain
argument_list|>
argument_list|>
name|domainsByOwner
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|TimelineDomain
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|MemoryTimelineStore ()
specifier|public
name|MemoryTimelineStore
parameter_list|()
block|{
name|super
argument_list|(
name|MemoryTimelineStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEntities (String entityType, Long limit, Long windowStart, Long windowEnd, String fromId, Long fromTs, NameValuePair primaryFilter, Collection<NameValuePair> secondaryFilters, EnumSet<Field> fields)
specifier|public
specifier|synchronized
name|TimelineEntities
name|getEntities
parameter_list|(
name|String
name|entityType
parameter_list|,
name|Long
name|limit
parameter_list|,
name|Long
name|windowStart
parameter_list|,
name|Long
name|windowEnd
parameter_list|,
name|String
name|fromId
parameter_list|,
name|Long
name|fromTs
parameter_list|,
name|NameValuePair
name|primaryFilter
parameter_list|,
name|Collection
argument_list|<
name|NameValuePair
argument_list|>
name|secondaryFilters
parameter_list|,
name|EnumSet
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|)
block|{
if|if
condition|(
name|limit
operator|==
literal|null
condition|)
block|{
name|limit
operator|=
name|DEFAULT_LIMIT
expr_stmt|;
block|}
if|if
condition|(
name|windowStart
operator|==
literal|null
condition|)
block|{
name|windowStart
operator|=
name|Long
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
if|if
condition|(
name|windowEnd
operator|==
literal|null
condition|)
block|{
name|windowEnd
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
name|fields
operator|=
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Field
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|TimelineEntity
argument_list|>
name|entityIterator
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fromId
operator|!=
literal|null
condition|)
block|{
name|TimelineEntity
name|firstEntity
init|=
name|entities
operator|.
name|get
argument_list|(
operator|new
name|EntityIdentifier
argument_list|(
name|fromId
argument_list|,
name|entityType
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstEntity
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TimelineEntities
argument_list|()
return|;
block|}
else|else
block|{
name|entityIterator
operator|=
operator|new
name|TreeSet
argument_list|<
name|TimelineEntity
argument_list|>
argument_list|(
name|entities
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|tailSet
argument_list|(
name|firstEntity
argument_list|,
literal|true
argument_list|)
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entityIterator
operator|==
literal|null
condition|)
block|{
name|entityIterator
operator|=
operator|new
name|PriorityQueue
argument_list|<
name|TimelineEntity
argument_list|>
argument_list|(
name|entities
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|TimelineEntity
argument_list|>
name|entitiesSelected
init|=
operator|new
name|ArrayList
argument_list|<
name|TimelineEntity
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|entityIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|TimelineEntity
name|entity
init|=
name|entityIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entitiesSelected
operator|.
name|size
argument_list|()
operator|>=
name|limit
condition|)
block|{
break|break;
block|}
if|if
condition|(
operator|!
name|entity
operator|.
name|getEntityType
argument_list|()
operator|.
name|equals
argument_list|(
name|entityType
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|entity
operator|.
name|getStartTime
argument_list|()
operator|<=
name|windowStart
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|entity
operator|.
name|getStartTime
argument_list|()
operator|>
name|windowEnd
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|fromTs
operator|!=
literal|null
operator|&&
name|entityInsertTimes
operator|.
name|get
argument_list|(
operator|new
name|EntityIdentifier
argument_list|(
name|entity
operator|.
name|getEntityId
argument_list|()
argument_list|,
name|entity
operator|.
name|getEntityType
argument_list|()
argument_list|)
argument_list|)
operator|>
name|fromTs
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|primaryFilter
operator|!=
literal|null
operator|&&
operator|!
name|matchPrimaryFilter
argument_list|(
name|entity
operator|.
name|getPrimaryFilters
argument_list|()
argument_list|,
name|primaryFilter
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|secondaryFilters
operator|!=
literal|null
condition|)
block|{
comment|// AND logic
name|boolean
name|flag
init|=
literal|true
decl_stmt|;
for|for
control|(
name|NameValuePair
name|secondaryFilter
range|:
name|secondaryFilters
control|)
block|{
if|if
condition|(
name|secondaryFilter
operator|!=
literal|null
operator|&&
operator|!
name|matchPrimaryFilter
argument_list|(
name|entity
operator|.
name|getPrimaryFilters
argument_list|()
argument_list|,
name|secondaryFilter
argument_list|)
operator|&&
operator|!
name|matchFilter
argument_list|(
name|entity
operator|.
name|getOtherInfo
argument_list|()
argument_list|,
name|secondaryFilter
argument_list|)
condition|)
block|{
name|flag
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|flag
condition|)
block|{
continue|continue;
block|}
block|}
name|entitiesSelected
operator|.
name|add
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|TimelineEntity
argument_list|>
name|entitiesToReturn
init|=
operator|new
name|ArrayList
argument_list|<
name|TimelineEntity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TimelineEntity
name|entitySelected
range|:
name|entitiesSelected
control|)
block|{
name|entitiesToReturn
operator|.
name|add
argument_list|(
name|maskFields
argument_list|(
name|entitySelected
argument_list|,
name|fields
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|entitiesToReturn
argument_list|)
expr_stmt|;
name|TimelineEntities
name|entitiesWrapper
init|=
operator|new
name|TimelineEntities
argument_list|()
decl_stmt|;
name|entitiesWrapper
operator|.
name|setEntities
argument_list|(
name|entitiesToReturn
argument_list|)
expr_stmt|;
return|return
name|entitiesWrapper
return|;
block|}
annotation|@
name|Override
DECL|method|getEntity (String entityId, String entityType, EnumSet<Field> fieldsToRetrieve)
specifier|public
specifier|synchronized
name|TimelineEntity
name|getEntity
parameter_list|(
name|String
name|entityId
parameter_list|,
name|String
name|entityType
parameter_list|,
name|EnumSet
argument_list|<
name|Field
argument_list|>
name|fieldsToRetrieve
parameter_list|)
block|{
if|if
condition|(
name|fieldsToRetrieve
operator|==
literal|null
condition|)
block|{
name|fieldsToRetrieve
operator|=
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Field
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|TimelineEntity
name|entity
init|=
name|entities
operator|.
name|get
argument_list|(
operator|new
name|EntityIdentifier
argument_list|(
name|entityId
argument_list|,
name|entityType
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|maskFields
argument_list|(
name|entity
argument_list|,
name|fieldsToRetrieve
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getEntityTimelines (String entityType, SortedSet<String> entityIds, Long limit, Long windowStart, Long windowEnd, Set<String> eventTypes)
specifier|public
specifier|synchronized
name|TimelineEvents
name|getEntityTimelines
parameter_list|(
name|String
name|entityType
parameter_list|,
name|SortedSet
argument_list|<
name|String
argument_list|>
name|entityIds
parameter_list|,
name|Long
name|limit
parameter_list|,
name|Long
name|windowStart
parameter_list|,
name|Long
name|windowEnd
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|eventTypes
parameter_list|)
block|{
name|TimelineEvents
name|allEvents
init|=
operator|new
name|TimelineEvents
argument_list|()
decl_stmt|;
if|if
condition|(
name|entityIds
operator|==
literal|null
condition|)
block|{
return|return
name|allEvents
return|;
block|}
if|if
condition|(
name|limit
operator|==
literal|null
condition|)
block|{
name|limit
operator|=
name|DEFAULT_LIMIT
expr_stmt|;
block|}
if|if
condition|(
name|windowStart
operator|==
literal|null
condition|)
block|{
name|windowStart
operator|=
name|Long
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
if|if
condition|(
name|windowEnd
operator|==
literal|null
condition|)
block|{
name|windowEnd
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
for|for
control|(
name|String
name|entityId
range|:
name|entityIds
control|)
block|{
name|EntityIdentifier
name|entityID
init|=
operator|new
name|EntityIdentifier
argument_list|(
name|entityId
argument_list|,
name|entityType
argument_list|)
decl_stmt|;
name|TimelineEntity
name|entity
init|=
name|entities
operator|.
name|get
argument_list|(
name|entityID
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|EventsOfOneEntity
name|events
init|=
operator|new
name|EventsOfOneEntity
argument_list|()
decl_stmt|;
name|events
operator|.
name|setEntityId
argument_list|(
name|entityId
argument_list|)
expr_stmt|;
name|events
operator|.
name|setEntityType
argument_list|(
name|entityType
argument_list|)
expr_stmt|;
for|for
control|(
name|TimelineEvent
name|event
range|:
name|entity
operator|.
name|getEvents
argument_list|()
control|)
block|{
if|if
condition|(
name|events
operator|.
name|getEvents
argument_list|()
operator|.
name|size
argument_list|()
operator|>=
name|limit
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|event
operator|.
name|getTimestamp
argument_list|()
operator|<=
name|windowStart
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|event
operator|.
name|getTimestamp
argument_list|()
operator|>
name|windowEnd
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|eventTypes
operator|!=
literal|null
operator|&&
operator|!
name|eventTypes
operator|.
name|contains
argument_list|(
name|event
operator|.
name|getEventType
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|events
operator|.
name|addEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
name|allEvents
operator|.
name|addEvent
argument_list|(
name|events
argument_list|)
expr_stmt|;
block|}
return|return
name|allEvents
return|;
block|}
annotation|@
name|Override
DECL|method|getDomain (String domainId)
specifier|public
name|TimelineDomain
name|getDomain
parameter_list|(
name|String
name|domainId
parameter_list|)
throws|throws
name|IOException
block|{
name|TimelineDomain
name|domain
init|=
name|domainsById
operator|.
name|get
argument_list|(
name|domainId
argument_list|)
decl_stmt|;
if|if
condition|(
name|domain
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|createTimelineDomain
argument_list|(
name|domain
operator|.
name|getId
argument_list|()
argument_list|,
name|domain
operator|.
name|getDescription
argument_list|()
argument_list|,
name|domain
operator|.
name|getOwner
argument_list|()
argument_list|,
name|domain
operator|.
name|getReaders
argument_list|()
argument_list|,
name|domain
operator|.
name|getWriters
argument_list|()
argument_list|,
name|domain
operator|.
name|getCreatedTime
argument_list|()
argument_list|,
name|domain
operator|.
name|getModifiedTime
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDomains (String owner)
specifier|public
name|TimelineDomains
name|getDomains
parameter_list|(
name|String
name|owner
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|TimelineDomain
argument_list|>
name|domains
init|=
operator|new
name|ArrayList
argument_list|<
name|TimelineDomain
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TimelineDomain
argument_list|>
name|domainsOfOneOwner
init|=
name|domainsByOwner
operator|.
name|get
argument_list|(
name|owner
argument_list|)
decl_stmt|;
if|if
condition|(
name|domainsOfOneOwner
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TimelineDomains
argument_list|()
return|;
block|}
for|for
control|(
name|TimelineDomain
name|domain
range|:
name|domainsByOwner
operator|.
name|get
argument_list|(
name|owner
argument_list|)
control|)
block|{
name|TimelineDomain
name|domainToReturn
init|=
name|createTimelineDomain
argument_list|(
name|domain
operator|.
name|getId
argument_list|()
argument_list|,
name|domain
operator|.
name|getDescription
argument_list|()
argument_list|,
name|domain
operator|.
name|getOwner
argument_list|()
argument_list|,
name|domain
operator|.
name|getReaders
argument_list|()
argument_list|,
name|domain
operator|.
name|getWriters
argument_list|()
argument_list|,
name|domain
operator|.
name|getCreatedTime
argument_list|()
argument_list|,
name|domain
operator|.
name|getModifiedTime
argument_list|()
argument_list|)
decl_stmt|;
name|domains
operator|.
name|add
argument_list|(
name|domainToReturn
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|domains
argument_list|,
operator|new
name|Comparator
argument_list|<
name|TimelineDomain
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|TimelineDomain
name|domain1
parameter_list|,
name|TimelineDomain
name|domain2
parameter_list|)
block|{
name|int
name|result
init|=
name|domain2
operator|.
name|getCreatedTime
argument_list|()
operator|.
name|compareTo
argument_list|(
name|domain1
operator|.
name|getCreatedTime
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
return|return
name|domain2
operator|.
name|getModifiedTime
argument_list|()
operator|.
name|compareTo
argument_list|(
name|domain1
operator|.
name|getModifiedTime
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|result
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|TimelineDomains
name|domainsToReturn
init|=
operator|new
name|TimelineDomains
argument_list|()
decl_stmt|;
name|domainsToReturn
operator|.
name|addDomains
argument_list|(
name|domains
argument_list|)
expr_stmt|;
return|return
name|domainsToReturn
return|;
block|}
annotation|@
name|Override
DECL|method|put (TimelineEntities data)
specifier|public
specifier|synchronized
name|TimelinePutResponse
name|put
parameter_list|(
name|TimelineEntities
name|data
parameter_list|)
block|{
name|TimelinePutResponse
name|response
init|=
operator|new
name|TimelinePutResponse
argument_list|()
decl_stmt|;
for|for
control|(
name|TimelineEntity
name|entity
range|:
name|data
operator|.
name|getEntities
argument_list|()
control|)
block|{
name|EntityIdentifier
name|entityId
init|=
operator|new
name|EntityIdentifier
argument_list|(
name|entity
operator|.
name|getEntityId
argument_list|()
argument_list|,
name|entity
operator|.
name|getEntityType
argument_list|()
argument_list|)
decl_stmt|;
comment|// store entity info in memory
name|TimelineEntity
name|existingEntity
init|=
name|entities
operator|.
name|get
argument_list|(
name|entityId
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingEntity
operator|==
literal|null
condition|)
block|{
name|existingEntity
operator|=
operator|new
name|TimelineEntity
argument_list|()
expr_stmt|;
name|existingEntity
operator|.
name|setEntityId
argument_list|(
name|entity
operator|.
name|getEntityId
argument_list|()
argument_list|)
expr_stmt|;
name|existingEntity
operator|.
name|setEntityType
argument_list|(
name|entity
operator|.
name|getEntityType
argument_list|()
argument_list|)
expr_stmt|;
name|existingEntity
operator|.
name|setStartTime
argument_list|(
name|entity
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|entity
operator|.
name|getDomainId
argument_list|()
operator|==
literal|null
operator|||
name|entity
operator|.
name|getDomainId
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|TimelinePutError
name|error
init|=
operator|new
name|TimelinePutError
argument_list|()
decl_stmt|;
name|error
operator|.
name|setEntityId
argument_list|(
name|entityId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|error
operator|.
name|setEntityType
argument_list|(
name|entityId
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|error
operator|.
name|setErrorCode
argument_list|(
name|TimelinePutError
operator|.
name|NO_DOMAIN
argument_list|)
expr_stmt|;
name|response
operator|.
name|addError
argument_list|(
name|error
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|existingEntity
operator|.
name|setDomainId
argument_list|(
name|entity
operator|.
name|getDomainId
argument_list|()
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
name|entityId
argument_list|,
name|existingEntity
argument_list|)
expr_stmt|;
name|entityInsertTimes
operator|.
name|put
argument_list|(
name|entityId
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entity
operator|.
name|getEvents
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|existingEntity
operator|.
name|getEvents
argument_list|()
operator|==
literal|null
condition|)
block|{
name|existingEntity
operator|.
name|setEvents
argument_list|(
name|entity
operator|.
name|getEvents
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|existingEntity
operator|.
name|addEvents
argument_list|(
name|entity
operator|.
name|getEvents
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|existingEntity
operator|.
name|getEvents
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check startTime
if|if
condition|(
name|existingEntity
operator|.
name|getStartTime
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|existingEntity
operator|.
name|getEvents
argument_list|()
operator|==
literal|null
operator|||
name|existingEntity
operator|.
name|getEvents
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TimelinePutError
name|error
init|=
operator|new
name|TimelinePutError
argument_list|()
decl_stmt|;
name|error
operator|.
name|setEntityId
argument_list|(
name|entityId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|error
operator|.
name|setEntityType
argument_list|(
name|entityId
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|error
operator|.
name|setErrorCode
argument_list|(
name|TimelinePutError
operator|.
name|NO_START_TIME
argument_list|)
expr_stmt|;
name|response
operator|.
name|addError
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|entities
operator|.
name|remove
argument_list|(
name|entityId
argument_list|)
expr_stmt|;
name|entityInsertTimes
operator|.
name|remove
argument_list|(
name|entityId
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
name|Long
name|min
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|TimelineEvent
name|e
range|:
name|entity
operator|.
name|getEvents
argument_list|()
control|)
block|{
if|if
condition|(
name|min
operator|>
name|e
operator|.
name|getTimestamp
argument_list|()
condition|)
block|{
name|min
operator|=
name|e
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
block|}
name|existingEntity
operator|.
name|setStartTime
argument_list|(
name|min
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entity
operator|.
name|getPrimaryFilters
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|existingEntity
operator|.
name|getPrimaryFilters
argument_list|()
operator|==
literal|null
condition|)
block|{
name|existingEntity
operator|.
name|setPrimaryFilters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Object
argument_list|>
argument_list|>
name|pf
range|:
name|entity
operator|.
name|getPrimaryFilters
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Object
name|pfo
range|:
name|pf
operator|.
name|getValue
argument_list|()
control|)
block|{
name|existingEntity
operator|.
name|addPrimaryFilter
argument_list|(
name|pf
operator|.
name|getKey
argument_list|()
argument_list|,
name|maybeConvert
argument_list|(
name|pfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|entity
operator|.
name|getOtherInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|existingEntity
operator|.
name|getOtherInfo
argument_list|()
operator|==
literal|null
condition|)
block|{
name|existingEntity
operator|.
name|setOtherInfo
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|info
range|:
name|entity
operator|.
name|getOtherInfo
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|existingEntity
operator|.
name|addOtherInfo
argument_list|(
name|info
operator|.
name|getKey
argument_list|()
argument_list|,
name|maybeConvert
argument_list|(
name|info
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// relate it to other entities
if|if
condition|(
name|entity
operator|.
name|getRelatedEntities
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|partRelatedEntities
range|:
name|entity
operator|.
name|getRelatedEntities
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|partRelatedEntities
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|String
name|idStr
range|:
name|partRelatedEntities
operator|.
name|getValue
argument_list|()
control|)
block|{
name|EntityIdentifier
name|relatedEntityId
init|=
operator|new
name|EntityIdentifier
argument_list|(
name|idStr
argument_list|,
name|partRelatedEntities
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|TimelineEntity
name|relatedEntity
init|=
name|entities
operator|.
name|get
argument_list|(
name|relatedEntityId
argument_list|)
decl_stmt|;
if|if
condition|(
name|relatedEntity
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|relatedEntity
operator|.
name|getDomainId
argument_list|()
operator|.
name|equals
argument_list|(
name|existingEntity
operator|.
name|getDomainId
argument_list|()
argument_list|)
condition|)
block|{
name|relatedEntity
operator|.
name|addRelatedEntity
argument_list|(
name|existingEntity
operator|.
name|getEntityType
argument_list|()
argument_list|,
name|existingEntity
operator|.
name|getEntityId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// in this case the entity will be put, but the relation will be
comment|// ignored
name|TimelinePutError
name|error
init|=
operator|new
name|TimelinePutError
argument_list|()
decl_stmt|;
name|error
operator|.
name|setEntityType
argument_list|(
name|existingEntity
operator|.
name|getEntityType
argument_list|()
argument_list|)
expr_stmt|;
name|error
operator|.
name|setEntityId
argument_list|(
name|existingEntity
operator|.
name|getEntityId
argument_list|()
argument_list|)
expr_stmt|;
name|error
operator|.
name|setErrorCode
argument_list|(
name|TimelinePutError
operator|.
name|FORBIDDEN_RELATION
argument_list|)
expr_stmt|;
name|response
operator|.
name|addError
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|relatedEntity
operator|=
operator|new
name|TimelineEntity
argument_list|()
expr_stmt|;
name|relatedEntity
operator|.
name|setEntityId
argument_list|(
name|relatedEntityId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|relatedEntity
operator|.
name|setEntityType
argument_list|(
name|relatedEntityId
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|relatedEntity
operator|.
name|setStartTime
argument_list|(
name|existingEntity
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|relatedEntity
operator|.
name|addRelatedEntity
argument_list|(
name|existingEntity
operator|.
name|getEntityType
argument_list|()
argument_list|,
name|existingEntity
operator|.
name|getEntityId
argument_list|()
argument_list|)
expr_stmt|;
name|relatedEntity
operator|.
name|setDomainId
argument_list|(
name|existingEntity
operator|.
name|getDomainId
argument_list|()
argument_list|)
expr_stmt|;
name|entities
operator|.
name|put
argument_list|(
name|relatedEntityId
argument_list|,
name|relatedEntity
argument_list|)
expr_stmt|;
name|entityInsertTimes
operator|.
name|put
argument_list|(
name|relatedEntityId
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|response
return|;
block|}
DECL|method|put (TimelineDomain domain)
specifier|public
name|void
name|put
parameter_list|(
name|TimelineDomain
name|domain
parameter_list|)
throws|throws
name|IOException
block|{
name|TimelineDomain
name|domainToReplace
init|=
name|domainsById
operator|.
name|get
argument_list|(
name|domain
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|currentTimestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|TimelineDomain
name|domainToStore
init|=
name|createTimelineDomain
argument_list|(
name|domain
operator|.
name|getId
argument_list|()
argument_list|,
name|domain
operator|.
name|getDescription
argument_list|()
argument_list|,
name|domain
operator|.
name|getOwner
argument_list|()
argument_list|,
name|domain
operator|.
name|getReaders
argument_list|()
argument_list|,
name|domain
operator|.
name|getWriters
argument_list|()
argument_list|,
operator|(
name|domainToReplace
operator|==
literal|null
condition|?
name|currentTimestamp
else|:
name|domainToReplace
operator|.
name|getCreatedTime
argument_list|()
operator|)
argument_list|,
name|currentTimestamp
argument_list|)
decl_stmt|;
name|domainsById
operator|.
name|put
argument_list|(
name|domainToStore
operator|.
name|getId
argument_list|()
argument_list|,
name|domainToStore
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|TimelineDomain
argument_list|>
name|domainsByOneOwner
init|=
name|domainsByOwner
operator|.
name|get
argument_list|(
name|domainToStore
operator|.
name|getOwner
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|domainsByOneOwner
operator|==
literal|null
condition|)
block|{
name|domainsByOneOwner
operator|=
operator|new
name|HashSet
argument_list|<
name|TimelineDomain
argument_list|>
argument_list|()
expr_stmt|;
name|domainsByOwner
operator|.
name|put
argument_list|(
name|domainToStore
operator|.
name|getOwner
argument_list|()
argument_list|,
name|domainsByOneOwner
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|domainToReplace
operator|!=
literal|null
condition|)
block|{
name|domainsByOneOwner
operator|.
name|remove
argument_list|(
name|domainToReplace
argument_list|)
expr_stmt|;
block|}
name|domainsByOneOwner
operator|.
name|add
argument_list|(
name|domainToStore
argument_list|)
expr_stmt|;
block|}
DECL|method|createTimelineDomain ( String id, String description, String owner, String readers, String writers, Long createdTime, Long modifiedTime)
specifier|private
specifier|static
name|TimelineDomain
name|createTimelineDomain
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|description
parameter_list|,
name|String
name|owner
parameter_list|,
name|String
name|readers
parameter_list|,
name|String
name|writers
parameter_list|,
name|Long
name|createdTime
parameter_list|,
name|Long
name|modifiedTime
parameter_list|)
block|{
name|TimelineDomain
name|domainToStore
init|=
operator|new
name|TimelineDomain
argument_list|()
decl_stmt|;
name|domainToStore
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|domainToStore
operator|.
name|setDescription
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|domainToStore
operator|.
name|setOwner
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|domainToStore
operator|.
name|setReaders
argument_list|(
name|readers
argument_list|)
expr_stmt|;
name|domainToStore
operator|.
name|setWriters
argument_list|(
name|writers
argument_list|)
expr_stmt|;
name|domainToStore
operator|.
name|setCreatedTime
argument_list|(
name|createdTime
argument_list|)
expr_stmt|;
name|domainToStore
operator|.
name|setModifiedTime
argument_list|(
name|modifiedTime
argument_list|)
expr_stmt|;
return|return
name|domainToStore
return|;
block|}
DECL|method|maskFields ( TimelineEntity entity, EnumSet<Field> fields)
specifier|private
specifier|static
name|TimelineEntity
name|maskFields
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|EnumSet
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|)
block|{
comment|// Conceal the fields that are not going to be exposed
name|TimelineEntity
name|entityToReturn
init|=
operator|new
name|TimelineEntity
argument_list|()
decl_stmt|;
name|entityToReturn
operator|.
name|setEntityId
argument_list|(
name|entity
operator|.
name|getEntityId
argument_list|()
argument_list|)
expr_stmt|;
name|entityToReturn
operator|.
name|setEntityType
argument_list|(
name|entity
operator|.
name|getEntityType
argument_list|()
argument_list|)
expr_stmt|;
name|entityToReturn
operator|.
name|setStartTime
argument_list|(
name|entity
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|entityToReturn
operator|.
name|setDomainId
argument_list|(
name|entity
operator|.
name|getDomainId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Deep copy
if|if
condition|(
name|fields
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|EVENTS
argument_list|)
condition|)
block|{
name|entityToReturn
operator|.
name|addEvents
argument_list|(
name|entity
operator|.
name|getEvents
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fields
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|LAST_EVENT_ONLY
argument_list|)
condition|)
block|{
name|entityToReturn
operator|.
name|addEvent
argument_list|(
name|entity
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entityToReturn
operator|.
name|setEvents
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fields
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|RELATED_ENTITIES
argument_list|)
condition|)
block|{
name|entityToReturn
operator|.
name|addRelatedEntities
argument_list|(
name|entity
operator|.
name|getRelatedEntities
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entityToReturn
operator|.
name|setRelatedEntities
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fields
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|PRIMARY_FILTERS
argument_list|)
condition|)
block|{
name|entityToReturn
operator|.
name|addPrimaryFilters
argument_list|(
name|entity
operator|.
name|getPrimaryFilters
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entityToReturn
operator|.
name|setPrimaryFilters
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fields
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|OTHER_INFO
argument_list|)
condition|)
block|{
name|entityToReturn
operator|.
name|addOtherInfo
argument_list|(
name|entity
operator|.
name|getOtherInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entityToReturn
operator|.
name|setOtherInfo
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|entityToReturn
return|;
block|}
DECL|method|matchFilter (Map<String, Object> tags, NameValuePair filter)
specifier|private
specifier|static
name|boolean
name|matchFilter
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|tags
parameter_list|,
name|NameValuePair
name|filter
parameter_list|)
block|{
name|Object
name|value
init|=
name|tags
operator|.
name|get
argument_list|(
name|filter
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
comment|// doesn't have the filter
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|filter
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
comment|// doesn't match the filter
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|matchPrimaryFilter (Map<String, Set<Object>> tags, NameValuePair filter)
specifier|private
specifier|static
name|boolean
name|matchPrimaryFilter
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Object
argument_list|>
argument_list|>
name|tags
parameter_list|,
name|NameValuePair
name|filter
parameter_list|)
block|{
name|Set
argument_list|<
name|Object
argument_list|>
name|value
init|=
name|tags
operator|.
name|get
argument_list|(
name|filter
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
comment|// doesn't have the filter
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|value
operator|.
name|contains
argument_list|(
name|filter
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|maybeConvert (Object o)
specifier|private
specifier|static
name|Object
name|maybeConvert
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Long
condition|)
block|{
name|Long
name|l
init|=
operator|(
name|Long
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|l
operator|>=
name|Integer
operator|.
name|MIN_VALUE
operator|&&
name|l
operator|<=
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
return|return
name|l
operator|.
name|intValue
argument_list|()
return|;
block|}
block|}
return|return
name|o
return|;
block|}
block|}
end_class

end_unit

