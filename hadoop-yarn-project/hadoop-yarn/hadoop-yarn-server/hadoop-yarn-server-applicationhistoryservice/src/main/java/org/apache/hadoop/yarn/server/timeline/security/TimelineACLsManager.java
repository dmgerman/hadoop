begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timeline.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|map
operator|.
name|LRUMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AdminACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|EntityIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|TimelineStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *<code>TimelineACLsManager</code> check the entity level timeline data access.  */
end_comment

begin_class
annotation|@
name|Private
DECL|class|TimelineACLsManager
specifier|public
class|class
name|TimelineACLsManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TimelineACLsManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DOMAIN_ACCESS_ENTRY_CACHE_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|DOMAIN_ACCESS_ENTRY_CACHE_SIZE
init|=
literal|100
decl_stmt|;
DECL|field|adminAclsManager
specifier|private
name|AdminACLsManager
name|adminAclsManager
decl_stmt|;
DECL|field|aclExts
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|AccessControlListExt
argument_list|>
name|aclExts
decl_stmt|;
DECL|field|store
specifier|private
name|TimelineStore
name|store
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|TimelineACLsManager (Configuration conf)
specifier|public
name|TimelineACLsManager
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|adminAclsManager
operator|=
operator|new
name|AdminACLsManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|aclExts
operator|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|LRUMap
argument_list|(
name|DOMAIN_ACCESS_ENTRY_CACHE_SIZE
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setTimelineStore (TimelineStore store)
specifier|public
name|void
name|setTimelineStore
parameter_list|(
name|TimelineStore
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
block|}
DECL|method|loadDomainFromTimelineStore ( String domainId)
specifier|private
name|AccessControlListExt
name|loadDomainFromTimelineStore
parameter_list|(
name|String
name|domainId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|store
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|TimelineDomain
name|domain
init|=
name|store
operator|.
name|getDomain
argument_list|(
name|domainId
argument_list|)
decl_stmt|;
if|if
condition|(
name|domain
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|putDomainIntoCache
argument_list|(
name|domain
argument_list|)
return|;
block|}
block|}
DECL|method|replaceIfExist (TimelineDomain domain)
specifier|public
name|void
name|replaceIfExist
parameter_list|(
name|TimelineDomain
name|domain
parameter_list|)
block|{
if|if
condition|(
name|aclExts
operator|.
name|containsKey
argument_list|(
name|domain
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|putDomainIntoCache
argument_list|(
name|domain
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|putDomainIntoCache ( TimelineDomain domain)
specifier|private
name|AccessControlListExt
name|putDomainIntoCache
parameter_list|(
name|TimelineDomain
name|domain
parameter_list|)
block|{
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|AccessControlList
argument_list|>
name|acls
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|AccessControlList
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|acls
operator|.
name|put
argument_list|(
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
operator|new
name|AccessControlList
argument_list|(
name|StringHelper
operator|.
name|cjoin
argument_list|(
name|domain
operator|.
name|getReaders
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|acls
operator|.
name|put
argument_list|(
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
operator|new
name|AccessControlList
argument_list|(
name|StringHelper
operator|.
name|cjoin
argument_list|(
name|domain
operator|.
name|getWriters
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|AccessControlListExt
name|aclExt
init|=
operator|new
name|AccessControlListExt
argument_list|(
name|domain
operator|.
name|getOwner
argument_list|()
argument_list|,
name|acls
argument_list|)
decl_stmt|;
name|aclExts
operator|.
name|put
argument_list|(
name|domain
operator|.
name|getId
argument_list|()
argument_list|,
name|aclExt
argument_list|)
expr_stmt|;
return|return
name|aclExt
return|;
block|}
DECL|method|checkAccess (UserGroupInformation callerUGI, ApplicationAccessType applicationAccessType, TimelineEntity entity)
specifier|public
name|boolean
name|checkAccess
parameter_list|(
name|UserGroupInformation
name|callerUGI
parameter_list|,
name|ApplicationAccessType
name|applicationAccessType
parameter_list|,
name|TimelineEntity
name|entity
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Verifying the access of "
operator|+
operator|(
name|callerUGI
operator|==
literal|null
condition|?
literal|null
else|:
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
operator|)
operator|+
literal|" on the timeline entity "
operator|+
operator|new
name|EntityIdentifier
argument_list|(
name|entity
operator|.
name|getEntityId
argument_list|()
argument_list|,
name|entity
operator|.
name|getEntityType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|adminAclsManager
operator|.
name|areACLsEnabled
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// find domain owner and acls
name|AccessControlListExt
name|aclExt
init|=
name|aclExts
operator|.
name|get
argument_list|(
name|entity
operator|.
name|getDomainId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|aclExt
operator|==
literal|null
condition|)
block|{
name|aclExt
operator|=
name|loadDomainFromTimelineStore
argument_list|(
name|entity
operator|.
name|getDomainId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|aclExt
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Domain information of the timeline entity "
operator|+
operator|new
name|EntityIdentifier
argument_list|(
name|entity
operator|.
name|getEntityId
argument_list|()
argument_list|,
name|entity
operator|.
name|getEntityType
argument_list|()
argument_list|)
operator|+
literal|" doesn't exist."
argument_list|)
throw|;
block|}
name|String
name|owner
init|=
name|aclExt
operator|.
name|owner
decl_stmt|;
name|AccessControlList
name|domainACL
init|=
name|aclExt
operator|.
name|acls
operator|.
name|get
argument_list|(
name|applicationAccessType
argument_list|)
decl_stmt|;
if|if
condition|(
name|domainACL
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"ACL not found for access-type "
operator|+
name|applicationAccessType
operator|+
literal|" for domain "
operator|+
name|entity
operator|.
name|getDomainId
argument_list|()
operator|+
literal|" owned by "
operator|+
name|owner
operator|+
literal|". Using default ["
operator|+
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_APP_ACL
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|domainACL
operator|=
operator|new
name|AccessControlList
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_APP_ACL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|callerUGI
operator|!=
literal|null
operator|&&
operator|(
name|adminAclsManager
operator|.
name|isAdmin
argument_list|(
name|callerUGI
argument_list|)
operator|||
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
operator|.
name|equals
argument_list|(
name|owner
argument_list|)
operator|||
name|domainACL
operator|.
name|isUserAllowed
argument_list|(
name|callerUGI
argument_list|)
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|checkAccess (UserGroupInformation callerUGI, TimelineDomain domain)
specifier|public
name|boolean
name|checkAccess
parameter_list|(
name|UserGroupInformation
name|callerUGI
parameter_list|,
name|TimelineDomain
name|domain
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Verifying the access of "
operator|+
operator|(
name|callerUGI
operator|==
literal|null
condition|?
literal|null
else|:
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
operator|)
operator|+
literal|" on the timeline domain "
operator|+
name|domain
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|adminAclsManager
operator|.
name|areACLsEnabled
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|owner
init|=
name|domain
operator|.
name|getOwner
argument_list|()
decl_stmt|;
if|if
condition|(
name|owner
operator|==
literal|null
operator|||
name|owner
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Owner information of the timeline domain "
operator|+
name|domain
operator|.
name|getId
argument_list|()
operator|+
literal|" is corrupted."
argument_list|)
throw|;
block|}
if|if
condition|(
name|callerUGI
operator|!=
literal|null
operator|&&
operator|(
name|adminAclsManager
operator|.
name|isAdmin
argument_list|(
name|callerUGI
argument_list|)
operator|||
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
operator|.
name|equals
argument_list|(
name|owner
argument_list|)
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
specifier|public
name|AdminACLsManager
DECL|method|setAdminACLsManager (AdminACLsManager adminAclsManager)
name|setAdminACLsManager
parameter_list|(
name|AdminACLsManager
name|adminAclsManager
parameter_list|)
block|{
name|AdminACLsManager
name|oldAdminACLsManager
init|=
name|this
operator|.
name|adminAclsManager
decl_stmt|;
name|this
operator|.
name|adminAclsManager
operator|=
name|adminAclsManager
expr_stmt|;
return|return
name|oldAdminACLsManager
return|;
block|}
DECL|class|AccessControlListExt
specifier|private
specifier|static
class|class
name|AccessControlListExt
block|{
DECL|field|owner
specifier|private
name|String
name|owner
decl_stmt|;
DECL|field|acls
specifier|private
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|AccessControlList
argument_list|>
name|acls
decl_stmt|;
DECL|method|AccessControlListExt ( String owner, Map<ApplicationAccessType, AccessControlList> acls)
specifier|public
name|AccessControlListExt
parameter_list|(
name|String
name|owner
parameter_list|,
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|AccessControlList
argument_list|>
name|acls
parameter_list|)
block|{
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
name|this
operator|.
name|acls
operator|=
name|acls
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

