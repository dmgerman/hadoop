begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.applicationhistoryservice.timeline
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|timeline
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|map
operator|.
name|LRUMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEvents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelinePutResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEvents
operator|.
name|EventsOfOneEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelinePutResponse
operator|.
name|TimelinePutError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|leveldbjni
operator|.
name|JniDBFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DBIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|WriteBatch
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|timeline
operator|.
name|GenericObjectMapper
operator|.
name|readReverseOrderedLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|timeline
operator|.
name|GenericObjectMapper
operator|.
name|writeReverseOrderedLong
import|;
end_import

begin_comment
comment|/**  * An implementation of a timeline store backed by leveldb.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|LeveldbTimelineStore
specifier|public
class|class
name|LeveldbTimelineStore
extends|extends
name|AbstractService
implements|implements
name|TimelineStore
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LeveldbTimelineStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|FILENAME
specifier|private
specifier|static
specifier|final
name|String
name|FILENAME
init|=
literal|"leveldb-timeline-store.ldb"
decl_stmt|;
DECL|field|START_TIME_LOOKUP_PREFIX
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|START_TIME_LOOKUP_PREFIX
init|=
literal|"k"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
DECL|field|ENTITY_ENTRY_PREFIX
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ENTITY_ENTRY_PREFIX
init|=
literal|"e"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
DECL|field|INDEXED_ENTRY_PREFIX
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|INDEXED_ENTRY_PREFIX
init|=
literal|"i"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
DECL|field|PRIMARY_FILTER_COLUMN
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|PRIMARY_FILTER_COLUMN
init|=
literal|"f"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
DECL|field|OTHER_INFO_COLUMN
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|OTHER_INFO_COLUMN
init|=
literal|"i"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
DECL|field|RELATED_COLUMN
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|RELATED_COLUMN
init|=
literal|"r"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
DECL|field|TIME_COLUMN
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TIME_COLUMN
init|=
literal|"t"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
DECL|field|EMPTY_BYTES
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_BYTES
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
DECL|field|DEFAULT_START_TIME_READ_CACHE_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_START_TIME_READ_CACHE_SIZE
init|=
literal|10000
decl_stmt|;
DECL|field|DEFAULT_START_TIME_WRITE_CACHE_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_START_TIME_WRITE_CACHE_SIZE
init|=
literal|10000
decl_stmt|;
DECL|field|startTimeWriteCache
specifier|private
name|Map
argument_list|<
name|EntityIdentifier
argument_list|,
name|Long
argument_list|>
name|startTimeWriteCache
decl_stmt|;
DECL|field|startTimeReadCache
specifier|private
name|Map
argument_list|<
name|EntityIdentifier
argument_list|,
name|Long
argument_list|>
name|startTimeReadCache
decl_stmt|;
comment|/**    * Per-entity locks are obtained when writing.    */
DECL|field|writeLocks
specifier|private
specifier|final
name|LockMap
argument_list|<
name|EntityIdentifier
argument_list|>
name|writeLocks
init|=
operator|new
name|LockMap
argument_list|<
name|EntityIdentifier
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|db
specifier|private
name|DB
name|db
decl_stmt|;
DECL|method|LeveldbTimelineStore ()
specifier|public
name|LeveldbTimelineStore
parameter_list|()
block|{
name|super
argument_list|(
name|LeveldbTimelineStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|createIfMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|JniDBFactory
name|factory
init|=
operator|new
name|JniDBFactory
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_LEVELDB_PATH
argument_list|)
decl_stmt|;
name|File
name|p
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|exists
argument_list|()
condition|)
if|if
condition|(
operator|!
name|p
operator|.
name|mkdirs
argument_list|()
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't create directory for leveldb "
operator|+
literal|"timeline store "
operator|+
name|path
argument_list|)
throw|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using leveldb path "
operator|+
name|path
argument_list|)
expr_stmt|;
name|db
operator|=
name|factory
operator|.
name|open
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|,
name|FILENAME
argument_list|)
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|startTimeWriteCache
operator|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|LRUMap
argument_list|(
name|getStartTimeWriteCacheSize
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|startTimeReadCache
operator|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|LRUMap
argument_list|(
name|getStartTimeReadCacheSize
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|db
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
DECL|class|LockMap
specifier|private
specifier|static
class|class
name|LockMap
parameter_list|<
name|K
parameter_list|>
block|{
DECL|class|CountingReentrantLock
specifier|private
specifier|static
class|class
name|CountingReentrantLock
parameter_list|<
name|K
parameter_list|>
extends|extends
name|ReentrantLock
block|{
DECL|field|count
specifier|private
name|int
name|count
decl_stmt|;
DECL|field|key
specifier|private
name|K
name|key
decl_stmt|;
DECL|method|CountingReentrantLock (K key)
name|CountingReentrantLock
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|count
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
block|}
DECL|field|locks
specifier|private
name|Map
argument_list|<
name|K
argument_list|,
name|CountingReentrantLock
argument_list|<
name|K
argument_list|>
argument_list|>
name|locks
init|=
operator|new
name|HashMap
argument_list|<
name|K
argument_list|,
name|CountingReentrantLock
argument_list|<
name|K
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|getLock (K key)
specifier|synchronized
name|CountingReentrantLock
argument_list|<
name|K
argument_list|>
name|getLock
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|CountingReentrantLock
argument_list|<
name|K
argument_list|>
name|lock
init|=
name|locks
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|lock
operator|==
literal|null
condition|)
block|{
name|lock
operator|=
operator|new
name|CountingReentrantLock
argument_list|<
name|K
argument_list|>
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|locks
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|lock
argument_list|)
expr_stmt|;
block|}
name|lock
operator|.
name|count
operator|++
expr_stmt|;
return|return
name|lock
return|;
block|}
DECL|method|returnLock (CountingReentrantLock<K> lock)
specifier|synchronized
name|void
name|returnLock
parameter_list|(
name|CountingReentrantLock
argument_list|<
name|K
argument_list|>
name|lock
parameter_list|)
block|{
if|if
condition|(
name|lock
operator|.
name|count
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Returned lock more times than it "
operator|+
literal|"was retrieved"
argument_list|)
throw|;
block|}
name|lock
operator|.
name|count
operator|--
expr_stmt|;
if|if
condition|(
name|lock
operator|.
name|count
operator|==
literal|0
condition|)
block|{
name|locks
operator|.
name|remove
argument_list|(
name|lock
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|KeyBuilder
specifier|private
specifier|static
class|class
name|KeyBuilder
block|{
DECL|field|MAX_NUMBER_OF_KEY_ELEMENTS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_NUMBER_OF_KEY_ELEMENTS
init|=
literal|10
decl_stmt|;
DECL|field|b
specifier|private
name|byte
index|[]
index|[]
name|b
decl_stmt|;
DECL|field|useSeparator
specifier|private
name|boolean
index|[]
name|useSeparator
decl_stmt|;
DECL|field|index
specifier|private
name|int
name|index
decl_stmt|;
DECL|field|length
specifier|private
name|int
name|length
decl_stmt|;
DECL|method|KeyBuilder (int size)
specifier|public
name|KeyBuilder
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|b
operator|=
operator|new
name|byte
index|[
name|size
index|]
index|[]
expr_stmt|;
name|useSeparator
operator|=
operator|new
name|boolean
index|[
name|size
index|]
expr_stmt|;
name|index
operator|=
literal|0
expr_stmt|;
name|length
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|newInstance ()
specifier|public
specifier|static
name|KeyBuilder
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|KeyBuilder
argument_list|(
name|MAX_NUMBER_OF_KEY_ELEMENTS
argument_list|)
return|;
block|}
DECL|method|add (String s)
specifier|public
name|KeyBuilder
name|add
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|s
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|add (byte[] t)
specifier|public
name|KeyBuilder
name|add
parameter_list|(
name|byte
index|[]
name|t
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|t
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|add (byte[] t, boolean sep)
specifier|public
name|KeyBuilder
name|add
parameter_list|(
name|byte
index|[]
name|t
parameter_list|,
name|boolean
name|sep
parameter_list|)
block|{
name|b
index|[
name|index
index|]
operator|=
name|t
expr_stmt|;
name|useSeparator
index|[
name|index
index|]
operator|=
name|sep
expr_stmt|;
name|length
operator|+=
name|t
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|sep
condition|)
name|length
operator|++
expr_stmt|;
name|index
operator|++
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getBytes ()
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
condition|;
name|i
operator|++
control|)
block|{
name|baos
operator|.
name|write
argument_list|(
name|b
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|index
operator|-
literal|1
operator|&&
name|useSeparator
index|[
name|i
index|]
condition|)
name|baos
operator|.
name|write
argument_list|(
literal|0x0
argument_list|)
expr_stmt|;
block|}
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
DECL|method|getBytesForLookup ()
specifier|public
name|byte
index|[]
name|getBytesForLookup
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
condition|;
name|i
operator|++
control|)
block|{
name|baos
operator|.
name|write
argument_list|(
name|b
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|useSeparator
index|[
name|i
index|]
condition|)
name|baos
operator|.
name|write
argument_list|(
literal|0x0
argument_list|)
expr_stmt|;
block|}
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
DECL|class|KeyParser
specifier|private
specifier|static
class|class
name|KeyParser
block|{
DECL|field|b
specifier|private
specifier|final
name|byte
index|[]
name|b
decl_stmt|;
DECL|field|offset
specifier|private
name|int
name|offset
decl_stmt|;
DECL|method|KeyParser (byte[] b, int offset)
specifier|public
name|KeyParser
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|this
operator|.
name|b
operator|=
name|b
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
block|}
DECL|method|getNextString ()
specifier|public
name|String
name|getNextString
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|offset
operator|>=
name|b
operator|.
name|length
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"tried to read nonexistent string from byte array"
argument_list|)
throw|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|offset
operator|+
name|i
operator|<
name|b
operator|.
name|length
operator|&&
name|b
index|[
name|offset
operator|+
name|i
index|]
operator|!=
literal|0x0
condition|)
name|i
operator|++
expr_stmt|;
name|String
name|s
init|=
operator|new
name|String
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|offset
operator|=
name|offset
operator|+
name|i
operator|+
literal|1
expr_stmt|;
return|return
name|s
return|;
block|}
DECL|method|getNextLong ()
specifier|public
name|long
name|getNextLong
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|offset
operator|+
literal|8
operator|>=
name|b
operator|.
name|length
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"byte array ran out when trying to read long"
argument_list|)
throw|;
name|long
name|l
init|=
name|readReverseOrderedLong
argument_list|(
name|b
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|offset
operator|+=
literal|8
expr_stmt|;
return|return
name|l
return|;
block|}
DECL|method|getOffset ()
specifier|public
name|int
name|getOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getEntity (String entityId, String entityType, EnumSet<Field> fields)
specifier|public
name|TimelineEntity
name|getEntity
parameter_list|(
name|String
name|entityId
parameter_list|,
name|String
name|entityType
parameter_list|,
name|EnumSet
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|)
throws|throws
name|IOException
block|{
name|DBIterator
name|iterator
init|=
literal|null
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|revStartTime
init|=
name|getStartTime
argument_list|(
name|entityId
argument_list|,
name|entityType
argument_list|)
decl_stmt|;
if|if
condition|(
name|revStartTime
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|byte
index|[]
name|prefix
init|=
name|KeyBuilder
operator|.
name|newInstance
argument_list|()
operator|.
name|add
argument_list|(
name|ENTITY_ENTRY_PREFIX
argument_list|)
operator|.
name|add
argument_list|(
name|entityType
argument_list|)
operator|.
name|add
argument_list|(
name|revStartTime
argument_list|)
operator|.
name|add
argument_list|(
name|entityId
argument_list|)
operator|.
name|getBytesForLookup
argument_list|()
decl_stmt|;
name|iterator
operator|=
name|db
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|iterator
operator|.
name|seek
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
return|return
name|getEntity
argument_list|(
name|entityId
argument_list|,
name|entityType
argument_list|,
name|readReverseOrderedLong
argument_list|(
name|revStartTime
argument_list|,
literal|0
argument_list|)
argument_list|,
name|fields
argument_list|,
name|iterator
argument_list|,
name|prefix
argument_list|,
name|prefix
operator|.
name|length
argument_list|)
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|iterator
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Read entity from a db iterator.  If no information is found in the    * specified fields for this entity, return null.    */
DECL|method|getEntity (String entityId, String entityType, Long startTime, EnumSet<Field> fields, DBIterator iterator, byte[] prefix, int prefixlen)
specifier|private
specifier|static
name|TimelineEntity
name|getEntity
parameter_list|(
name|String
name|entityId
parameter_list|,
name|String
name|entityType
parameter_list|,
name|Long
name|startTime
parameter_list|,
name|EnumSet
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|,
name|DBIterator
name|iterator
parameter_list|,
name|byte
index|[]
name|prefix
parameter_list|,
name|int
name|prefixlen
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
name|fields
operator|=
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Field
operator|.
name|class
argument_list|)
expr_stmt|;
name|TimelineEntity
name|entity
init|=
operator|new
name|TimelineEntity
argument_list|()
decl_stmt|;
name|boolean
name|events
init|=
literal|false
decl_stmt|;
name|boolean
name|lastEvent
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|EVENTS
argument_list|)
condition|)
block|{
name|events
operator|=
literal|true
expr_stmt|;
name|entity
operator|.
name|setEvents
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|TimelineEvent
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fields
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|LAST_EVENT_ONLY
argument_list|)
condition|)
block|{
name|lastEvent
operator|=
literal|true
expr_stmt|;
name|entity
operator|.
name|setEvents
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|TimelineEvent
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entity
operator|.
name|setEvents
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|boolean
name|relatedEntities
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|RELATED_ENTITIES
argument_list|)
condition|)
block|{
name|relatedEntities
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|entity
operator|.
name|setRelatedEntities
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|boolean
name|primaryFilters
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|PRIMARY_FILTERS
argument_list|)
condition|)
block|{
name|primaryFilters
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|entity
operator|.
name|setPrimaryFilters
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|boolean
name|otherInfo
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|OTHER_INFO
argument_list|)
condition|)
block|{
name|otherInfo
operator|=
literal|true
expr_stmt|;
name|entity
operator|.
name|setOtherInfo
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entity
operator|.
name|setOtherInfo
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// iterate through the entity's entry, parsing information if it is part
comment|// of a requested field
for|for
control|(
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
name|iterator
operator|.
name|next
argument_list|()
control|)
block|{
name|byte
index|[]
name|key
init|=
name|iterator
operator|.
name|peekNext
argument_list|()
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|prefixMatches
argument_list|(
name|prefix
argument_list|,
name|prefixlen
argument_list|,
name|key
argument_list|)
condition|)
break|break;
if|if
condition|(
name|key
index|[
name|prefixlen
index|]
operator|==
name|PRIMARY_FILTER_COLUMN
index|[
literal|0
index|]
condition|)
block|{
if|if
condition|(
name|primaryFilters
condition|)
block|{
name|addPrimaryFilter
argument_list|(
name|entity
argument_list|,
name|key
argument_list|,
name|prefixlen
operator|+
name|PRIMARY_FILTER_COLUMN
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|key
index|[
name|prefixlen
index|]
operator|==
name|OTHER_INFO_COLUMN
index|[
literal|0
index|]
condition|)
block|{
if|if
condition|(
name|otherInfo
condition|)
block|{
name|entity
operator|.
name|addOtherInfo
argument_list|(
name|parseRemainingKey
argument_list|(
name|key
argument_list|,
name|prefixlen
operator|+
name|OTHER_INFO_COLUMN
operator|.
name|length
argument_list|)
argument_list|,
name|GenericObjectMapper
operator|.
name|read
argument_list|(
name|iterator
operator|.
name|peekNext
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|key
index|[
name|prefixlen
index|]
operator|==
name|RELATED_COLUMN
index|[
literal|0
index|]
condition|)
block|{
if|if
condition|(
name|relatedEntities
condition|)
block|{
name|addRelatedEntity
argument_list|(
name|entity
argument_list|,
name|key
argument_list|,
name|prefixlen
operator|+
name|RELATED_COLUMN
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|key
index|[
name|prefixlen
index|]
operator|==
name|TIME_COLUMN
index|[
literal|0
index|]
condition|)
block|{
if|if
condition|(
name|events
operator|||
operator|(
name|lastEvent
operator|&&
name|entity
operator|.
name|getEvents
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|TimelineEvent
name|event
init|=
name|getEntityEvent
argument_list|(
literal|null
argument_list|,
name|key
argument_list|,
name|prefixlen
operator|+
name|TIME_COLUMN
operator|.
name|length
argument_list|,
name|iterator
operator|.
name|peekNext
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|!=
literal|null
condition|)
block|{
name|entity
operator|.
name|addEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Found unexpected column for entity %s of "
operator|+
literal|"type %s (0x%02x)"
argument_list|,
name|entityId
argument_list|,
name|entityType
argument_list|,
name|key
index|[
name|prefixlen
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|entity
operator|.
name|setEntityId
argument_list|(
name|entityId
argument_list|)
expr_stmt|;
name|entity
operator|.
name|setEntityType
argument_list|(
name|entityType
argument_list|)
expr_stmt|;
name|entity
operator|.
name|setStartTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
return|return
name|entity
return|;
block|}
annotation|@
name|Override
DECL|method|getEntityTimelines (String entityType, SortedSet<String> entityIds, Long limit, Long windowStart, Long windowEnd, Set<String> eventType)
specifier|public
name|TimelineEvents
name|getEntityTimelines
parameter_list|(
name|String
name|entityType
parameter_list|,
name|SortedSet
argument_list|<
name|String
argument_list|>
name|entityIds
parameter_list|,
name|Long
name|limit
parameter_list|,
name|Long
name|windowStart
parameter_list|,
name|Long
name|windowEnd
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|eventType
parameter_list|)
throws|throws
name|IOException
block|{
name|TimelineEvents
name|events
init|=
operator|new
name|TimelineEvents
argument_list|()
decl_stmt|;
if|if
condition|(
name|entityIds
operator|==
literal|null
operator|||
name|entityIds
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|events
return|;
comment|// create a lexicographically-ordered map from start time to entities
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|EntityIdentifier
argument_list|>
argument_list|>
name|startTimeMap
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|EntityIdentifier
argument_list|>
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|byte
index|[]
name|o1
parameter_list|,
name|byte
index|[]
name|o2
parameter_list|)
block|{
return|return
name|WritableComparator
operator|.
name|compareBytes
argument_list|(
name|o1
argument_list|,
literal|0
argument_list|,
name|o1
operator|.
name|length
argument_list|,
name|o2
argument_list|,
literal|0
argument_list|,
name|o2
operator|.
name|length
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|DBIterator
name|iterator
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// look up start times for the specified entities
comment|// skip entities with no start time
for|for
control|(
name|String
name|entity
range|:
name|entityIds
control|)
block|{
name|byte
index|[]
name|startTime
init|=
name|getStartTime
argument_list|(
name|entity
argument_list|,
name|entityType
argument_list|)
decl_stmt|;
if|if
condition|(
name|startTime
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|EntityIdentifier
argument_list|>
name|entities
init|=
name|startTimeMap
operator|.
name|get
argument_list|(
name|startTime
argument_list|)
decl_stmt|;
if|if
condition|(
name|entities
operator|==
literal|null
condition|)
block|{
name|entities
operator|=
operator|new
name|ArrayList
argument_list|<
name|EntityIdentifier
argument_list|>
argument_list|()
expr_stmt|;
name|startTimeMap
operator|.
name|put
argument_list|(
name|startTime
argument_list|,
name|entities
argument_list|)
expr_stmt|;
block|}
name|entities
operator|.
name|add
argument_list|(
operator|new
name|EntityIdentifier
argument_list|(
name|entity
argument_list|,
name|entityType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|EntityIdentifier
argument_list|>
argument_list|>
name|entry
range|:
name|startTimeMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// look up the events matching the given parameters (limit,
comment|// start time, end time, event types) for entities whose start times
comment|// were found and add the entities to the return list
name|byte
index|[]
name|revStartTime
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|EntityIdentifier
name|entityID
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|EventsOfOneEntity
name|entity
init|=
operator|new
name|EventsOfOneEntity
argument_list|()
decl_stmt|;
name|entity
operator|.
name|setEntityId
argument_list|(
name|entityID
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|entity
operator|.
name|setEntityType
argument_list|(
name|entityType
argument_list|)
expr_stmt|;
name|events
operator|.
name|addEvent
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|KeyBuilder
name|kb
init|=
name|KeyBuilder
operator|.
name|newInstance
argument_list|()
operator|.
name|add
argument_list|(
name|ENTITY_ENTRY_PREFIX
argument_list|)
operator|.
name|add
argument_list|(
name|entityType
argument_list|)
operator|.
name|add
argument_list|(
name|revStartTime
argument_list|)
operator|.
name|add
argument_list|(
name|entityID
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|TIME_COLUMN
argument_list|)
decl_stmt|;
name|byte
index|[]
name|prefix
init|=
name|kb
operator|.
name|getBytesForLookup
argument_list|()
decl_stmt|;
if|if
condition|(
name|windowEnd
operator|==
literal|null
condition|)
block|{
name|windowEnd
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
name|byte
index|[]
name|revts
init|=
name|writeReverseOrderedLong
argument_list|(
name|windowEnd
argument_list|)
decl_stmt|;
name|kb
operator|.
name|add
argument_list|(
name|revts
argument_list|)
expr_stmt|;
name|byte
index|[]
name|first
init|=
name|kb
operator|.
name|getBytesForLookup
argument_list|()
decl_stmt|;
name|byte
index|[]
name|last
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|windowStart
operator|!=
literal|null
condition|)
block|{
name|last
operator|=
name|KeyBuilder
operator|.
name|newInstance
argument_list|()
operator|.
name|add
argument_list|(
name|prefix
argument_list|)
operator|.
name|add
argument_list|(
name|writeReverseOrderedLong
argument_list|(
name|windowStart
argument_list|)
argument_list|)
operator|.
name|getBytesForLookup
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|limit
operator|==
literal|null
condition|)
block|{
name|limit
operator|=
name|DEFAULT_LIMIT
expr_stmt|;
block|}
name|iterator
operator|=
name|db
operator|.
name|iterator
argument_list|()
expr_stmt|;
for|for
control|(
name|iterator
operator|.
name|seek
argument_list|(
name|first
argument_list|)
init|;
name|entity
operator|.
name|getEvents
argument_list|()
operator|.
name|size
argument_list|()
operator|<
name|limit
operator|&&
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
name|iterator
operator|.
name|next
argument_list|()
control|)
block|{
name|byte
index|[]
name|key
init|=
name|iterator
operator|.
name|peekNext
argument_list|()
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|prefixMatches
argument_list|(
name|prefix
argument_list|,
name|prefix
operator|.
name|length
argument_list|,
name|key
argument_list|)
operator|||
operator|(
name|last
operator|!=
literal|null
operator|&&
name|WritableComparator
operator|.
name|compareBytes
argument_list|(
name|key
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|length
argument_list|,
name|last
argument_list|,
literal|0
argument_list|,
name|last
operator|.
name|length
argument_list|)
operator|>
literal|0
operator|)
condition|)
break|break;
name|TimelineEvent
name|event
init|=
name|getEntityEvent
argument_list|(
name|eventType
argument_list|,
name|key
argument_list|,
name|prefix
operator|.
name|length
argument_list|,
name|iterator
operator|.
name|peekNext
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|!=
literal|null
condition|)
name|entity
operator|.
name|addEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|iterator
argument_list|)
expr_stmt|;
block|}
return|return
name|events
return|;
block|}
comment|/**    * Returns true if the byte array begins with the specified prefix.    */
DECL|method|prefixMatches (byte[] prefix, int prefixlen, byte[] b)
specifier|private
specifier|static
name|boolean
name|prefixMatches
parameter_list|(
name|byte
index|[]
name|prefix
parameter_list|,
name|int
name|prefixlen
parameter_list|,
name|byte
index|[]
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
operator|.
name|length
operator|<
name|prefixlen
condition|)
return|return
literal|false
return|;
return|return
name|WritableComparator
operator|.
name|compareBytes
argument_list|(
name|prefix
argument_list|,
literal|0
argument_list|,
name|prefixlen
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
name|prefixlen
argument_list|)
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getEntities (String entityType, Long limit, Long windowStart, Long windowEnd, NameValuePair primaryFilter, Collection<NameValuePair> secondaryFilters, EnumSet<Field> fields)
specifier|public
name|TimelineEntities
name|getEntities
parameter_list|(
name|String
name|entityType
parameter_list|,
name|Long
name|limit
parameter_list|,
name|Long
name|windowStart
parameter_list|,
name|Long
name|windowEnd
parameter_list|,
name|NameValuePair
name|primaryFilter
parameter_list|,
name|Collection
argument_list|<
name|NameValuePair
argument_list|>
name|secondaryFilters
parameter_list|,
name|EnumSet
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|primaryFilter
operator|==
literal|null
condition|)
block|{
comment|// if no primary filter is specified, prefix the lookup with
comment|// ENTITY_ENTRY_PREFIX
return|return
name|getEntityByTime
argument_list|(
name|ENTITY_ENTRY_PREFIX
argument_list|,
name|entityType
argument_list|,
name|limit
argument_list|,
name|windowStart
argument_list|,
name|windowEnd
argument_list|,
name|secondaryFilters
argument_list|,
name|fields
argument_list|)
return|;
block|}
else|else
block|{
comment|// if a primary filter is specified, prefix the lookup with
comment|// INDEXED_ENTRY_PREFIX + primaryFilterName + primaryFilterValue +
comment|// ENTITY_ENTRY_PREFIX
name|byte
index|[]
name|base
init|=
name|KeyBuilder
operator|.
name|newInstance
argument_list|()
operator|.
name|add
argument_list|(
name|INDEXED_ENTRY_PREFIX
argument_list|)
operator|.
name|add
argument_list|(
name|primaryFilter
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|GenericObjectMapper
operator|.
name|write
argument_list|(
name|primaryFilter
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|.
name|add
argument_list|(
name|ENTITY_ENTRY_PREFIX
argument_list|)
operator|.
name|getBytesForLookup
argument_list|()
decl_stmt|;
return|return
name|getEntityByTime
argument_list|(
name|base
argument_list|,
name|entityType
argument_list|,
name|limit
argument_list|,
name|windowStart
argument_list|,
name|windowEnd
argument_list|,
name|secondaryFilters
argument_list|,
name|fields
argument_list|)
return|;
block|}
block|}
comment|/**    * Retrieves a list of entities satisfying given parameters.    *    * @param base A byte array prefix for the lookup    * @param entityType The type of the entity    * @param limit A limit on the number of entities to return    * @param starttime The earliest entity start time to retrieve (exclusive)    * @param endtime The latest entity start time to retrieve (inclusive)    * @param secondaryFilters Filter pairs that the entities should match    * @param fields The set of fields to retrieve    * @return A list of entities    * @throws IOException    */
DECL|method|getEntityByTime (byte[] base, String entityType, Long limit, Long starttime, Long endtime, Collection<NameValuePair> secondaryFilters, EnumSet<Field> fields)
specifier|private
name|TimelineEntities
name|getEntityByTime
parameter_list|(
name|byte
index|[]
name|base
parameter_list|,
name|String
name|entityType
parameter_list|,
name|Long
name|limit
parameter_list|,
name|Long
name|starttime
parameter_list|,
name|Long
name|endtime
parameter_list|,
name|Collection
argument_list|<
name|NameValuePair
argument_list|>
name|secondaryFilters
parameter_list|,
name|EnumSet
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|)
throws|throws
name|IOException
block|{
name|DBIterator
name|iterator
init|=
literal|null
decl_stmt|;
try|try
block|{
name|KeyBuilder
name|kb
init|=
name|KeyBuilder
operator|.
name|newInstance
argument_list|()
operator|.
name|add
argument_list|(
name|base
argument_list|)
operator|.
name|add
argument_list|(
name|entityType
argument_list|)
decl_stmt|;
comment|// only db keys matching the prefix (base + entity type) will be parsed
name|byte
index|[]
name|prefix
init|=
name|kb
operator|.
name|getBytesForLookup
argument_list|()
decl_stmt|;
if|if
condition|(
name|endtime
operator|==
literal|null
condition|)
block|{
comment|// if end time is null, place no restriction on end time
name|endtime
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
comment|// using end time, construct a first key that will be seeked to
name|byte
index|[]
name|revts
init|=
name|writeReverseOrderedLong
argument_list|(
name|endtime
argument_list|)
decl_stmt|;
name|kb
operator|.
name|add
argument_list|(
name|revts
argument_list|)
expr_stmt|;
name|byte
index|[]
name|first
init|=
name|kb
operator|.
name|getBytesForLookup
argument_list|()
decl_stmt|;
name|byte
index|[]
name|last
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|starttime
operator|!=
literal|null
condition|)
block|{
comment|// if start time is not null, set a last key that will not be
comment|// iterated past
name|last
operator|=
name|KeyBuilder
operator|.
name|newInstance
argument_list|()
operator|.
name|add
argument_list|(
name|base
argument_list|)
operator|.
name|add
argument_list|(
name|entityType
argument_list|)
operator|.
name|add
argument_list|(
name|writeReverseOrderedLong
argument_list|(
name|starttime
argument_list|)
argument_list|)
operator|.
name|getBytesForLookup
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|limit
operator|==
literal|null
condition|)
block|{
comment|// if limit is not specified, use the default
name|limit
operator|=
name|DEFAULT_LIMIT
expr_stmt|;
block|}
name|TimelineEntities
name|entities
init|=
operator|new
name|TimelineEntities
argument_list|()
decl_stmt|;
name|iterator
operator|=
name|db
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|iterator
operator|.
name|seek
argument_list|(
name|first
argument_list|)
expr_stmt|;
comment|// iterate until one of the following conditions is met: limit is
comment|// reached, there are no more keys, the key prefix no longer matches,
comment|// or a start time has been specified and reached/exceeded
while|while
condition|(
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|size
argument_list|()
operator|<
name|limit
operator|&&
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|byte
index|[]
name|key
init|=
name|iterator
operator|.
name|peekNext
argument_list|()
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|prefixMatches
argument_list|(
name|prefix
argument_list|,
name|prefix
operator|.
name|length
argument_list|,
name|key
argument_list|)
operator|||
operator|(
name|last
operator|!=
literal|null
operator|&&
name|WritableComparator
operator|.
name|compareBytes
argument_list|(
name|key
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|length
argument_list|,
name|last
argument_list|,
literal|0
argument_list|,
name|last
operator|.
name|length
argument_list|)
operator|>
literal|0
operator|)
condition|)
break|break;
comment|// read the start time and entityId from the current key
name|KeyParser
name|kp
init|=
operator|new
name|KeyParser
argument_list|(
name|key
argument_list|,
name|prefix
operator|.
name|length
argument_list|)
decl_stmt|;
name|Long
name|startTime
init|=
name|kp
operator|.
name|getNextLong
argument_list|()
decl_stmt|;
name|String
name|entityId
init|=
name|kp
operator|.
name|getNextString
argument_list|()
decl_stmt|;
comment|// parse the entity that owns this key, iterating over all keys for
comment|// the entity
name|TimelineEntity
name|entity
init|=
name|getEntity
argument_list|(
name|entityId
argument_list|,
name|entityType
argument_list|,
name|startTime
argument_list|,
name|fields
argument_list|,
name|iterator
argument_list|,
name|key
argument_list|,
name|kp
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
continue|continue;
comment|// determine if the retrieved entity matches the provided secondary
comment|// filters, and if so add it to the list of entities to return
name|boolean
name|filterPassed
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|secondaryFilters
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|NameValuePair
name|filter
range|:
name|secondaryFilters
control|)
block|{
name|Object
name|v
init|=
name|entity
operator|.
name|getOtherInfo
argument_list|()
operator|.
name|get
argument_list|(
name|filter
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Object
argument_list|>
name|vs
init|=
name|entity
operator|.
name|getPrimaryFilters
argument_list|()
operator|.
name|get
argument_list|(
name|filter
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|vs
operator|!=
literal|null
operator|&&
operator|!
name|vs
operator|.
name|contains
argument_list|(
name|filter
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|filterPassed
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|v
operator|.
name|equals
argument_list|(
name|filter
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|filterPassed
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|filterPassed
condition|)
name|entities
operator|.
name|addEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
return|return
name|entities
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|iterator
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Put a single entity.  If there is an error, add a TimelinePutError to the given    * response.    */
DECL|method|put (TimelineEntity entity, TimelinePutResponse response)
specifier|private
name|void
name|put
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|TimelinePutResponse
name|response
parameter_list|)
block|{
name|LockMap
operator|.
name|CountingReentrantLock
argument_list|<
name|EntityIdentifier
argument_list|>
name|lock
init|=
name|writeLocks
operator|.
name|getLock
argument_list|(
operator|new
name|EntityIdentifier
argument_list|(
name|entity
operator|.
name|getEntityId
argument_list|()
argument_list|,
name|entity
operator|.
name|getEntityType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|WriteBatch
name|writeBatch
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writeBatch
operator|=
name|db
operator|.
name|createWriteBatch
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|TimelineEvent
argument_list|>
name|events
init|=
name|entity
operator|.
name|getEvents
argument_list|()
decl_stmt|;
comment|// look up the start time for the entity
name|byte
index|[]
name|revStartTime
init|=
name|getAndSetStartTime
argument_list|(
name|entity
operator|.
name|getEntityId
argument_list|()
argument_list|,
name|entity
operator|.
name|getEntityType
argument_list|()
argument_list|,
name|entity
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|events
argument_list|,
name|writeBatch
argument_list|)
decl_stmt|;
if|if
condition|(
name|revStartTime
operator|==
literal|null
condition|)
block|{
comment|// if no start time is found, add an error and return
name|TimelinePutError
name|error
init|=
operator|new
name|TimelinePutError
argument_list|()
decl_stmt|;
name|error
operator|.
name|setEntityId
argument_list|(
name|entity
operator|.
name|getEntityId
argument_list|()
argument_list|)
expr_stmt|;
name|error
operator|.
name|setEntityType
argument_list|(
name|entity
operator|.
name|getEntityType
argument_list|()
argument_list|)
expr_stmt|;
name|error
operator|.
name|setErrorCode
argument_list|(
name|TimelinePutError
operator|.
name|NO_START_TIME
argument_list|)
expr_stmt|;
name|response
operator|.
name|addError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
name|Long
name|revStartTimeLong
init|=
name|readReverseOrderedLong
argument_list|(
name|revStartTime
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Object
argument_list|>
argument_list|>
name|primaryFilters
init|=
name|entity
operator|.
name|getPrimaryFilters
argument_list|()
decl_stmt|;
comment|// write event entries
if|if
condition|(
name|events
operator|!=
literal|null
operator|&&
operator|!
name|events
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|TimelineEvent
name|event
range|:
name|events
control|)
block|{
name|byte
index|[]
name|revts
init|=
name|writeReverseOrderedLong
argument_list|(
name|event
operator|.
name|getTimestamp
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|key
init|=
name|createEntityEventKey
argument_list|(
name|entity
operator|.
name|getEntityId
argument_list|()
argument_list|,
name|entity
operator|.
name|getEntityType
argument_list|()
argument_list|,
name|revStartTime
argument_list|,
name|revts
argument_list|,
name|event
operator|.
name|getEventType
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|GenericObjectMapper
operator|.
name|write
argument_list|(
name|event
operator|.
name|getEventInfo
argument_list|()
argument_list|)
decl_stmt|;
name|writeBatch
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|writePrimaryFilterEntries
argument_list|(
name|writeBatch
argument_list|,
name|primaryFilters
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|// write related entity entries
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|relatedEntities
init|=
name|entity
operator|.
name|getRelatedEntities
argument_list|()
decl_stmt|;
if|if
condition|(
name|relatedEntities
operator|!=
literal|null
operator|&&
operator|!
name|relatedEntities
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|relatedEntityList
range|:
name|relatedEntities
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|relatedEntityType
init|=
name|relatedEntityList
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|relatedEntityId
range|:
name|relatedEntityList
operator|.
name|getValue
argument_list|()
control|)
block|{
comment|// look up start time of related entity
name|byte
index|[]
name|relatedEntityStartTime
init|=
name|getAndSetStartTime
argument_list|(
name|relatedEntityId
argument_list|,
name|relatedEntityType
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|writeBatch
argument_list|)
decl_stmt|;
if|if
condition|(
name|relatedEntityStartTime
operator|==
literal|null
condition|)
block|{
comment|// if start time is not found, set start time of the related
comment|// entity to the start time of this entity, and write it to the
comment|// db and the cache
name|relatedEntityStartTime
operator|=
name|revStartTime
expr_stmt|;
name|writeBatch
operator|.
name|put
argument_list|(
name|createStartTimeLookupKey
argument_list|(
name|relatedEntityId
argument_list|,
name|relatedEntityType
argument_list|)
argument_list|,
name|relatedEntityStartTime
argument_list|)
expr_stmt|;
name|startTimeWriteCache
operator|.
name|put
argument_list|(
operator|new
name|EntityIdentifier
argument_list|(
name|relatedEntityId
argument_list|,
name|relatedEntityType
argument_list|)
argument_list|,
name|revStartTimeLong
argument_list|)
expr_stmt|;
block|}
comment|// write reverse entry (related entity -> entity)
name|byte
index|[]
name|key
init|=
name|createReleatedEntityKey
argument_list|(
name|relatedEntityId
argument_list|,
name|relatedEntityType
argument_list|,
name|relatedEntityStartTime
argument_list|,
name|entity
operator|.
name|getEntityId
argument_list|()
argument_list|,
name|entity
operator|.
name|getEntityType
argument_list|()
argument_list|)
decl_stmt|;
name|writeBatch
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|EMPTY_BYTES
argument_list|)
expr_stmt|;
comment|// TODO: write forward entry (entity -> related entity)?
block|}
block|}
block|}
comment|// write primary filter entries
if|if
condition|(
name|primaryFilters
operator|!=
literal|null
operator|&&
operator|!
name|primaryFilters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Object
argument_list|>
argument_list|>
name|primaryFilter
range|:
name|primaryFilters
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Object
name|primaryFilterValue
range|:
name|primaryFilter
operator|.
name|getValue
argument_list|()
control|)
block|{
name|byte
index|[]
name|key
init|=
name|createPrimaryFilterKey
argument_list|(
name|entity
operator|.
name|getEntityId
argument_list|()
argument_list|,
name|entity
operator|.
name|getEntityType
argument_list|()
argument_list|,
name|revStartTime
argument_list|,
name|primaryFilter
operator|.
name|getKey
argument_list|()
argument_list|,
name|primaryFilterValue
argument_list|)
decl_stmt|;
name|writeBatch
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|EMPTY_BYTES
argument_list|)
expr_stmt|;
name|writePrimaryFilterEntries
argument_list|(
name|writeBatch
argument_list|,
name|primaryFilters
argument_list|,
name|key
argument_list|,
name|EMPTY_BYTES
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// write other info entries
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|otherInfo
init|=
name|entity
operator|.
name|getOtherInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|otherInfo
operator|!=
literal|null
operator|&&
operator|!
name|otherInfo
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|i
range|:
name|otherInfo
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|key
init|=
name|createOtherInfoKey
argument_list|(
name|entity
operator|.
name|getEntityId
argument_list|()
argument_list|,
name|entity
operator|.
name|getEntityType
argument_list|()
argument_list|,
name|revStartTime
argument_list|,
name|i
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|GenericObjectMapper
operator|.
name|write
argument_list|(
name|i
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|writeBatch
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|writePrimaryFilterEntries
argument_list|(
name|writeBatch
argument_list|,
name|primaryFilters
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|db
operator|.
name|write
argument_list|(
name|writeBatch
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error putting entity "
operator|+
name|entity
operator|.
name|getEntityId
argument_list|()
operator|+
literal|" of type "
operator|+
name|entity
operator|.
name|getEntityType
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|TimelinePutError
name|error
init|=
operator|new
name|TimelinePutError
argument_list|()
decl_stmt|;
name|error
operator|.
name|setEntityId
argument_list|(
name|entity
operator|.
name|getEntityId
argument_list|()
argument_list|)
expr_stmt|;
name|error
operator|.
name|setEntityType
argument_list|(
name|entity
operator|.
name|getEntityType
argument_list|()
argument_list|)
expr_stmt|;
name|error
operator|.
name|setErrorCode
argument_list|(
name|TimelinePutError
operator|.
name|IO_EXCEPTION
argument_list|)
expr_stmt|;
name|response
operator|.
name|addError
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|writeLocks
operator|.
name|returnLock
argument_list|(
name|lock
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|writeBatch
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * For a given key / value pair that has been written to the db,    * write additional entries to the db for each primary filter.    */
DECL|method|writePrimaryFilterEntries (WriteBatch writeBatch, Map<String, Set<Object>> primaryFilters, byte[] key, byte[] value)
specifier|private
specifier|static
name|void
name|writePrimaryFilterEntries
parameter_list|(
name|WriteBatch
name|writeBatch
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Object
argument_list|>
argument_list|>
name|primaryFilters
parameter_list|,
name|byte
index|[]
name|key
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|primaryFilters
operator|!=
literal|null
operator|&&
operator|!
name|primaryFilters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Object
argument_list|>
argument_list|>
name|pf
range|:
name|primaryFilters
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Object
name|pfval
range|:
name|pf
operator|.
name|getValue
argument_list|()
control|)
block|{
name|writeBatch
operator|.
name|put
argument_list|(
name|addPrimaryFilterToKey
argument_list|(
name|pf
operator|.
name|getKey
argument_list|()
argument_list|,
name|pfval
argument_list|,
name|key
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|put (TimelineEntities entities)
specifier|public
name|TimelinePutResponse
name|put
parameter_list|(
name|TimelineEntities
name|entities
parameter_list|)
block|{
name|TimelinePutResponse
name|response
init|=
operator|new
name|TimelinePutResponse
argument_list|()
decl_stmt|;
for|for
control|(
name|TimelineEntity
name|entity
range|:
name|entities
operator|.
name|getEntities
argument_list|()
control|)
block|{
name|put
argument_list|(
name|entity
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
comment|/**    * Get the unique start time for a given entity as a byte array that sorts    * the timestamps in reverse order (see {@link    * GenericObjectMapper#writeReverseOrderedLong(long)}).    *    * @param entityId The id of the entity    * @param entityType The type of the entity    * @return A byte array    * @throws IOException    */
DECL|method|getStartTime (String entityId, String entityType)
specifier|private
name|byte
index|[]
name|getStartTime
parameter_list|(
name|String
name|entityId
parameter_list|,
name|String
name|entityType
parameter_list|)
throws|throws
name|IOException
block|{
name|EntityIdentifier
name|entity
init|=
operator|new
name|EntityIdentifier
argument_list|(
name|entityId
argument_list|,
name|entityType
argument_list|)
decl_stmt|;
comment|// start time is not provided, so try to look it up
if|if
condition|(
name|startTimeReadCache
operator|.
name|containsKey
argument_list|(
name|entity
argument_list|)
condition|)
block|{
comment|// found the start time in the cache
return|return
name|writeReverseOrderedLong
argument_list|(
name|startTimeReadCache
operator|.
name|get
argument_list|(
name|entity
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
comment|// try to look up the start time in the db
name|byte
index|[]
name|b
init|=
name|createStartTimeLookupKey
argument_list|(
name|entity
operator|.
name|getId
argument_list|()
argument_list|,
name|entity
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|v
init|=
name|db
operator|.
name|get
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
comment|// did not find the start time in the db
return|return
literal|null
return|;
block|}
else|else
block|{
comment|// found the start time in the db
name|startTimeReadCache
operator|.
name|put
argument_list|(
name|entity
argument_list|,
name|readReverseOrderedLong
argument_list|(
name|v
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|v
return|;
block|}
block|}
block|}
comment|/**    * Get the unique start time for a given entity as a byte array that sorts    * the timestamps in reverse order (see {@link    * GenericObjectMapper#writeReverseOrderedLong(long)}). If the start time    * doesn't exist, set it based on the information provided.    *    * @param entityId The id of the entity    * @param entityType The type of the entity    * @param startTime The start time of the entity, or null    * @param events A list of events for the entity, or null    * @param writeBatch A leveldb write batch, if the method is called by a    *                   put as opposed to a get    * @return A byte array    * @throws IOException    */
DECL|method|getAndSetStartTime (String entityId, String entityType, Long startTime, List<TimelineEvent> events, WriteBatch writeBatch)
specifier|private
name|byte
index|[]
name|getAndSetStartTime
parameter_list|(
name|String
name|entityId
parameter_list|,
name|String
name|entityType
parameter_list|,
name|Long
name|startTime
parameter_list|,
name|List
argument_list|<
name|TimelineEvent
argument_list|>
name|events
parameter_list|,
name|WriteBatch
name|writeBatch
parameter_list|)
throws|throws
name|IOException
block|{
name|EntityIdentifier
name|entity
init|=
operator|new
name|EntityIdentifier
argument_list|(
name|entityId
argument_list|,
name|entityType
argument_list|)
decl_stmt|;
if|if
condition|(
name|startTime
operator|==
literal|null
condition|)
block|{
comment|// start time is not provided, so try to look it up
if|if
condition|(
name|startTimeWriteCache
operator|.
name|containsKey
argument_list|(
name|entity
argument_list|)
condition|)
block|{
comment|// found the start time in the cache
name|startTime
operator|=
name|startTimeWriteCache
operator|.
name|get
argument_list|(
name|entity
argument_list|)
expr_stmt|;
return|return
name|writeReverseOrderedLong
argument_list|(
name|startTime
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|events
operator|!=
literal|null
condition|)
block|{
comment|// prepare a start time from events in case it is needed
name|Long
name|min
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|TimelineEvent
name|e
range|:
name|events
control|)
block|{
if|if
condition|(
name|min
operator|>
name|e
operator|.
name|getTimestamp
argument_list|()
condition|)
block|{
name|min
operator|=
name|e
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
block|}
name|startTime
operator|=
name|min
expr_stmt|;
block|}
return|return
name|checkStartTimeInDb
argument_list|(
name|entity
argument_list|,
name|startTime
argument_list|,
name|writeBatch
argument_list|)
return|;
block|}
block|}
else|else
block|{
comment|// start time is provided
if|if
condition|(
name|startTimeWriteCache
operator|.
name|containsKey
argument_list|(
name|entity
argument_list|)
condition|)
block|{
comment|// check the provided start time matches the cache
if|if
condition|(
operator|!
name|startTime
operator|.
name|equals
argument_list|(
name|startTimeWriteCache
operator|.
name|get
argument_list|(
name|entity
argument_list|)
argument_list|)
condition|)
block|{
comment|// the start time is already in the cache,
comment|// and it is different from the provided start time,
comment|// so use the one from the cache
name|startTime
operator|=
name|startTimeWriteCache
operator|.
name|get
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
return|return
name|writeReverseOrderedLong
argument_list|(
name|startTime
argument_list|)
return|;
block|}
else|else
block|{
comment|// check the provided start time matches the db
return|return
name|checkStartTimeInDb
argument_list|(
name|entity
argument_list|,
name|startTime
argument_list|,
name|writeBatch
argument_list|)
return|;
block|}
block|}
block|}
comment|/**    * Checks db for start time and returns it if it exists.  If it doesn't    * exist, writes the suggested start time (if it is not null).  This is    * only called when the start time is not found in the cache,    * so it adds it back into the cache if it is found.    */
DECL|method|checkStartTimeInDb (EntityIdentifier entity, Long suggestedStartTime, WriteBatch writeBatch)
specifier|private
name|byte
index|[]
name|checkStartTimeInDb
parameter_list|(
name|EntityIdentifier
name|entity
parameter_list|,
name|Long
name|suggestedStartTime
parameter_list|,
name|WriteBatch
name|writeBatch
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create lookup key for start time
name|byte
index|[]
name|b
init|=
name|createStartTimeLookupKey
argument_list|(
name|entity
operator|.
name|getId
argument_list|()
argument_list|,
name|entity
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
comment|// retrieve value for key
name|byte
index|[]
name|v
init|=
name|db
operator|.
name|get
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|byte
index|[]
name|revStartTime
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
comment|// start time doesn't exist in db
if|if
condition|(
name|suggestedStartTime
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// write suggested start time
name|revStartTime
operator|=
name|writeReverseOrderedLong
argument_list|(
name|suggestedStartTime
argument_list|)
expr_stmt|;
name|writeBatch
operator|.
name|put
argument_list|(
name|b
argument_list|,
name|revStartTime
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// found start time in db, so ignore suggested start time
name|suggestedStartTime
operator|=
name|readReverseOrderedLong
argument_list|(
name|v
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|revStartTime
operator|=
name|v
expr_stmt|;
block|}
name|startTimeWriteCache
operator|.
name|put
argument_list|(
name|entity
argument_list|,
name|suggestedStartTime
argument_list|)
expr_stmt|;
name|startTimeReadCache
operator|.
name|put
argument_list|(
name|entity
argument_list|,
name|suggestedStartTime
argument_list|)
expr_stmt|;
return|return
name|revStartTime
return|;
block|}
comment|/**    * Creates a key for looking up the start time of a given entity,    * of the form START_TIME_LOOKUP_PREFIX + entitytype + entity.    */
DECL|method|createStartTimeLookupKey (String entity, String entitytype)
specifier|private
specifier|static
name|byte
index|[]
name|createStartTimeLookupKey
parameter_list|(
name|String
name|entity
parameter_list|,
name|String
name|entitytype
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|KeyBuilder
operator|.
name|newInstance
argument_list|()
operator|.
name|add
argument_list|(
name|START_TIME_LOOKUP_PREFIX
argument_list|)
operator|.
name|add
argument_list|(
name|entitytype
argument_list|)
operator|.
name|add
argument_list|(
name|entity
argument_list|)
operator|.
name|getBytes
argument_list|()
return|;
block|}
comment|/**    * Creates an index entry for the given key of the form    * INDEXED_ENTRY_PREFIX + primaryfiltername + primaryfiltervalue + key.    */
DECL|method|addPrimaryFilterToKey (String primaryFilterName, Object primaryFilterValue, byte[] key)
specifier|private
specifier|static
name|byte
index|[]
name|addPrimaryFilterToKey
parameter_list|(
name|String
name|primaryFilterName
parameter_list|,
name|Object
name|primaryFilterValue
parameter_list|,
name|byte
index|[]
name|key
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|KeyBuilder
operator|.
name|newInstance
argument_list|()
operator|.
name|add
argument_list|(
name|INDEXED_ENTRY_PREFIX
argument_list|)
operator|.
name|add
argument_list|(
name|primaryFilterName
argument_list|)
operator|.
name|add
argument_list|(
name|GenericObjectMapper
operator|.
name|write
argument_list|(
name|primaryFilterValue
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|.
name|add
argument_list|(
name|key
argument_list|)
operator|.
name|getBytes
argument_list|()
return|;
block|}
comment|/**    * Creates an event key, serializing ENTITY_ENTRY_PREFIX + entitytype +    * revstarttime + entity + TIME_COLUMN + reveventtimestamp + eventtype.    */
DECL|method|createEntityEventKey (String entity, String entitytype, byte[] revStartTime, byte[] reveventtimestamp, String eventtype)
specifier|private
specifier|static
name|byte
index|[]
name|createEntityEventKey
parameter_list|(
name|String
name|entity
parameter_list|,
name|String
name|entitytype
parameter_list|,
name|byte
index|[]
name|revStartTime
parameter_list|,
name|byte
index|[]
name|reveventtimestamp
parameter_list|,
name|String
name|eventtype
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|KeyBuilder
operator|.
name|newInstance
argument_list|()
operator|.
name|add
argument_list|(
name|ENTITY_ENTRY_PREFIX
argument_list|)
operator|.
name|add
argument_list|(
name|entitytype
argument_list|)
operator|.
name|add
argument_list|(
name|revStartTime
argument_list|)
operator|.
name|add
argument_list|(
name|entity
argument_list|)
operator|.
name|add
argument_list|(
name|TIME_COLUMN
argument_list|)
operator|.
name|add
argument_list|(
name|reveventtimestamp
argument_list|)
operator|.
name|add
argument_list|(
name|eventtype
argument_list|)
operator|.
name|getBytes
argument_list|()
return|;
block|}
comment|/**    * Creates an event object from the given key, offset, and value.  If the    * event type is not contained in the specified set of event types,    * returns null.    */
DECL|method|getEntityEvent (Set<String> eventTypes, byte[] key, int offset, byte[] value)
specifier|private
specifier|static
name|TimelineEvent
name|getEntityEvent
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|eventTypes
parameter_list|,
name|byte
index|[]
name|key
parameter_list|,
name|int
name|offset
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|KeyParser
name|kp
init|=
operator|new
name|KeyParser
argument_list|(
name|key
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
name|kp
operator|.
name|getNextLong
argument_list|()
decl_stmt|;
name|String
name|tstype
init|=
name|kp
operator|.
name|getNextString
argument_list|()
decl_stmt|;
if|if
condition|(
name|eventTypes
operator|==
literal|null
operator|||
name|eventTypes
operator|.
name|contains
argument_list|(
name|tstype
argument_list|)
condition|)
block|{
name|TimelineEvent
name|event
init|=
operator|new
name|TimelineEvent
argument_list|()
decl_stmt|;
name|event
operator|.
name|setTimestamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|event
operator|.
name|setEventType
argument_list|(
name|tstype
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|GenericObjectMapper
operator|.
name|read
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|event
operator|.
name|setEventInfo
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Map
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|o
decl_stmt|;
name|event
operator|.
name|setEventInfo
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't deserialize event info map"
argument_list|)
throw|;
block|}
return|return
name|event
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Creates a primary filter key, serializing ENTITY_ENTRY_PREFIX +    * entitytype + revstarttime + entity + PRIMARY_FILTER_COLUMN + name + value.    */
DECL|method|createPrimaryFilterKey (String entity, String entitytype, byte[] revStartTime, String name, Object value)
specifier|private
specifier|static
name|byte
index|[]
name|createPrimaryFilterKey
parameter_list|(
name|String
name|entity
parameter_list|,
name|String
name|entitytype
parameter_list|,
name|byte
index|[]
name|revStartTime
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|KeyBuilder
operator|.
name|newInstance
argument_list|()
operator|.
name|add
argument_list|(
name|ENTITY_ENTRY_PREFIX
argument_list|)
operator|.
name|add
argument_list|(
name|entitytype
argument_list|)
operator|.
name|add
argument_list|(
name|revStartTime
argument_list|)
operator|.
name|add
argument_list|(
name|entity
argument_list|)
operator|.
name|add
argument_list|(
name|PRIMARY_FILTER_COLUMN
argument_list|)
operator|.
name|add
argument_list|(
name|name
argument_list|)
operator|.
name|add
argument_list|(
name|GenericObjectMapper
operator|.
name|write
argument_list|(
name|value
argument_list|)
argument_list|)
operator|.
name|getBytes
argument_list|()
return|;
block|}
comment|/**    * Parses the primary filter from the given key at the given offset and    * adds it to the given entity.    */
DECL|method|addPrimaryFilter (TimelineEntity entity, byte[] key, int offset)
specifier|private
specifier|static
name|void
name|addPrimaryFilter
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|byte
index|[]
name|key
parameter_list|,
name|int
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
name|KeyParser
name|kp
init|=
operator|new
name|KeyParser
argument_list|(
name|key
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|kp
operator|.
name|getNextString
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|GenericObjectMapper
operator|.
name|read
argument_list|(
name|key
argument_list|,
name|kp
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
name|entity
operator|.
name|addPrimaryFilter
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates an other info key, serializing ENTITY_ENTRY_PREFIX + entitytype +    * revstarttime + entity + OTHER_INFO_COLUMN + name.    */
DECL|method|createOtherInfoKey (String entity, String entitytype, byte[] revStartTime, String name)
specifier|private
specifier|static
name|byte
index|[]
name|createOtherInfoKey
parameter_list|(
name|String
name|entity
parameter_list|,
name|String
name|entitytype
parameter_list|,
name|byte
index|[]
name|revStartTime
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|KeyBuilder
operator|.
name|newInstance
argument_list|()
operator|.
name|add
argument_list|(
name|ENTITY_ENTRY_PREFIX
argument_list|)
operator|.
name|add
argument_list|(
name|entitytype
argument_list|)
operator|.
name|add
argument_list|(
name|revStartTime
argument_list|)
operator|.
name|add
argument_list|(
name|entity
argument_list|)
operator|.
name|add
argument_list|(
name|OTHER_INFO_COLUMN
argument_list|)
operator|.
name|add
argument_list|(
name|name
argument_list|)
operator|.
name|getBytes
argument_list|()
return|;
block|}
comment|/**    * Creates a string representation of the byte array from the given offset    * to the end of the array (for parsing other info keys).    */
DECL|method|parseRemainingKey (byte[] b, int offset)
specifier|private
specifier|static
name|String
name|parseRemainingKey
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|b
operator|.
name|length
operator|-
name|offset
argument_list|)
return|;
block|}
comment|/**    * Creates a related entity key, serializing ENTITY_ENTRY_PREFIX +    * entitytype + revstarttime + entity + RELATED_COLUMN + relatedentitytype +    * relatedentity.    */
DECL|method|createReleatedEntityKey (String entity, String entitytype, byte[] revStartTime, String relatedEntity, String relatedEntityType)
specifier|private
specifier|static
name|byte
index|[]
name|createReleatedEntityKey
parameter_list|(
name|String
name|entity
parameter_list|,
name|String
name|entitytype
parameter_list|,
name|byte
index|[]
name|revStartTime
parameter_list|,
name|String
name|relatedEntity
parameter_list|,
name|String
name|relatedEntityType
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|KeyBuilder
operator|.
name|newInstance
argument_list|()
operator|.
name|add
argument_list|(
name|ENTITY_ENTRY_PREFIX
argument_list|)
operator|.
name|add
argument_list|(
name|entitytype
argument_list|)
operator|.
name|add
argument_list|(
name|revStartTime
argument_list|)
operator|.
name|add
argument_list|(
name|entity
argument_list|)
operator|.
name|add
argument_list|(
name|RELATED_COLUMN
argument_list|)
operator|.
name|add
argument_list|(
name|relatedEntityType
argument_list|)
operator|.
name|add
argument_list|(
name|relatedEntity
argument_list|)
operator|.
name|getBytes
argument_list|()
return|;
block|}
comment|/**    * Parses the related entity from the given key at the given offset and    * adds it to the given entity.    */
DECL|method|addRelatedEntity (TimelineEntity entity, byte[] key, int offset)
specifier|private
specifier|static
name|void
name|addRelatedEntity
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|byte
index|[]
name|key
parameter_list|,
name|int
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
name|KeyParser
name|kp
init|=
operator|new
name|KeyParser
argument_list|(
name|key
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|kp
operator|.
name|getNextString
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|kp
operator|.
name|getNextString
argument_list|()
decl_stmt|;
name|entity
operator|.
name|addRelatedEntity
argument_list|(
name|type
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|/**    * Clears the cache to test reloading start times from leveldb (only for    * testing).    */
annotation|@
name|VisibleForTesting
DECL|method|clearStartTimeCache ()
name|void
name|clearStartTimeCache
parameter_list|()
block|{
name|startTimeWriteCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|startTimeReadCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getStartTimeReadCacheSize (Configuration conf)
specifier|static
name|int
name|getStartTimeReadCacheSize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE
argument_list|,
name|DEFAULT_START_TIME_READ_CACHE_SIZE
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getStartTimeWriteCacheSize (Configuration conf)
specifier|static
name|int
name|getStartTimeWriteCacheSize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE
argument_list|,
name|DEFAULT_START_TIME_WRITE_CACHE_SIZE
argument_list|)
return|;
block|}
block|}
end_class

end_unit

