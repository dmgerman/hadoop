begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timeline.recovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|TimelineDelegationTokenIdentifier
import|;
end_import

begin_comment
comment|/**  * A state store backed by memory for unit tests  */
end_comment

begin_class
DECL|class|MemoryTimelineStateStore
specifier|public
class|class
name|MemoryTimelineStateStore
extends|extends
name|TimelineStateStore
block|{
DECL|field|state
specifier|private
name|TimelineServiceState
name|state
decl_stmt|;
annotation|@
name|Override
DECL|method|initStorage (Configuration conf)
specifier|protected
name|void
name|initStorage
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
DECL|method|startStorage ()
specifier|protected
name|void
name|startStorage
parameter_list|()
throws|throws
name|IOException
block|{
name|state
operator|=
operator|new
name|TimelineServiceState
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|closeStorage ()
specifier|protected
name|void
name|closeStorage
parameter_list|()
throws|throws
name|IOException
block|{
name|state
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|loadState ()
specifier|public
name|TimelineServiceState
name|loadState
parameter_list|()
throws|throws
name|IOException
block|{
name|TimelineServiceState
name|result
init|=
operator|new
name|TimelineServiceState
argument_list|()
decl_stmt|;
name|result
operator|.
name|tokenState
operator|.
name|putAll
argument_list|(
name|state
operator|.
name|tokenState
argument_list|)
expr_stmt|;
name|result
operator|.
name|tokenMasterKeyState
operator|.
name|addAll
argument_list|(
name|state
operator|.
name|tokenMasterKeyState
argument_list|)
expr_stmt|;
name|result
operator|.
name|latestSequenceNumber
operator|=
name|state
operator|.
name|latestSequenceNumber
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|storeToken (TimelineDelegationTokenIdentifier tokenId, Long renewDate)
specifier|public
name|void
name|storeToken
parameter_list|(
name|TimelineDelegationTokenIdentifier
name|tokenId
parameter_list|,
name|Long
name|renewDate
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|state
operator|.
name|tokenState
operator|.
name|containsKey
argument_list|(
name|tokenId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"token "
operator|+
name|tokenId
operator|+
literal|" was stored twice"
argument_list|)
throw|;
block|}
name|state
operator|.
name|tokenState
operator|.
name|put
argument_list|(
name|tokenId
argument_list|,
name|renewDate
argument_list|)
expr_stmt|;
name|state
operator|.
name|latestSequenceNumber
operator|=
name|tokenId
operator|.
name|getSequenceNumber
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateToken (TimelineDelegationTokenIdentifier tokenId, Long renewDate)
specifier|public
name|void
name|updateToken
parameter_list|(
name|TimelineDelegationTokenIdentifier
name|tokenId
parameter_list|,
name|Long
name|renewDate
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|state
operator|.
name|tokenState
operator|.
name|containsKey
argument_list|(
name|tokenId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"token "
operator|+
name|tokenId
operator|+
literal|" not in store"
argument_list|)
throw|;
block|}
name|state
operator|.
name|tokenState
operator|.
name|put
argument_list|(
name|tokenId
argument_list|,
name|renewDate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeToken (TimelineDelegationTokenIdentifier tokenId)
specifier|public
name|void
name|removeToken
parameter_list|(
name|TimelineDelegationTokenIdentifier
name|tokenId
parameter_list|)
throws|throws
name|IOException
block|{
name|state
operator|.
name|tokenState
operator|.
name|remove
argument_list|(
name|tokenId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeTokenMasterKey (DelegationKey key)
specifier|public
name|void
name|storeTokenMasterKey
parameter_list|(
name|DelegationKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|state
operator|.
name|tokenMasterKeyState
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"token master key "
operator|+
name|key
operator|+
literal|" was stored twice"
argument_list|)
throw|;
block|}
name|state
operator|.
name|tokenMasterKeyState
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeTokenMasterKey (DelegationKey key)
specifier|public
name|void
name|removeTokenMasterKey
parameter_list|(
name|DelegationKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|state
operator|.
name|tokenMasterKeyState
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

