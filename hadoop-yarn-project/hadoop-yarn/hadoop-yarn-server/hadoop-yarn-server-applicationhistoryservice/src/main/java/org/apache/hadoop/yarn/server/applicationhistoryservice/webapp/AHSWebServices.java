begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.applicationhistoryservice.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|GenericEntity
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|StreamingOutput
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|JettyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationBaseProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineAbout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|ContainerLogMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|ContainerLogAggregationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|LogToolUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|WebServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|YarnWebServiceParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppAttemptsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ContainerLogsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ContainersInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|timeline
operator|.
name|TimelineUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|util
operator|.
name|WebAppUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|util
operator|.
name|YarnWebServiceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientHandlerException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|UniformInterfaceException
import|;
end_import

begin_class
annotation|@
name|Singleton
annotation|@
name|Path
argument_list|(
literal|"/ws/v1/applicationhistory"
argument_list|)
DECL|class|AHSWebServices
specifier|public
class|class
name|AHSWebServices
extends|extends
name|WebServices
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AHSWebServices
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NM_DOWNLOAD_URI_STR
specifier|private
specifier|static
specifier|final
name|String
name|NM_DOWNLOAD_URI_STR
init|=
literal|"/ws/v1/node/containers"
decl_stmt|;
DECL|field|JOINER
specifier|private
specifier|static
specifier|final
name|Joiner
name|JOINER
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|field|DOT_JOINER
specifier|private
specifier|static
specifier|final
name|Joiner
name|DOT_JOINER
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|". "
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Inject
DECL|method|AHSWebServices (ApplicationBaseProtocol appBaseProt, Configuration conf)
specifier|public
name|AHSWebServices
parameter_list|(
name|ApplicationBaseProtocol
name|appBaseProt
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|appBaseProt
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/about"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
DECL|method|about ( @ontext HttpServletRequest req, @Context HttpServletResponse res)
specifier|public
name|TimelineAbout
name|about
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|)
block|{
name|init
argument_list|(
name|res
argument_list|)
expr_stmt|;
return|return
name|TimelineUtils
operator|.
name|createTimelineAbout
argument_list|(
literal|"Generic History Service API"
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
DECL|method|get (@ontext HttpServletRequest req, @Context HttpServletResponse res)
specifier|public
name|AppsInfo
name|get
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|)
block|{
return|return
name|getApps
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/apps"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getApps (@ontext HttpServletRequest req, @Context HttpServletResponse res, @QueryParam(R) String stateQuery, @QueryParam(R) Set<String> statesQuery, @QueryParam(R) String finalStatusQuery, @QueryParam(R) String userQuery, @QueryParam(R) String queueQuery, @QueryParam(R) String count, @QueryParam(R) String startedBegin, @QueryParam(R) String startedEnd, @QueryParam(R) String finishBegin, @QueryParam(R) String finishEnd, @QueryParam(R) Set<String> applicationTypes)
specifier|public
name|AppsInfo
name|getApps
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"state"
argument_list|)
name|String
name|stateQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"states"
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|statesQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"finalStatus"
argument_list|)
name|String
name|finalStatusQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"user"
argument_list|)
name|String
name|userQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"queue"
argument_list|)
name|String
name|queueQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"limit"
argument_list|)
name|String
name|count
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"startedTimeBegin"
argument_list|)
name|String
name|startedBegin
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"startedTimeEnd"
argument_list|)
name|String
name|startedEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"finishedTimeBegin"
argument_list|)
name|String
name|finishBegin
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"finishedTimeEnd"
argument_list|)
name|String
name|finishEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"applicationTypes"
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|applicationTypes
parameter_list|)
block|{
name|init
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|validateStates
argument_list|(
name|stateQuery
argument_list|,
name|statesQuery
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getApps
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|stateQuery
argument_list|,
name|statesQuery
argument_list|,
name|finalStatusQuery
argument_list|,
name|userQuery
argument_list|,
name|queueQuery
argument_list|,
name|count
argument_list|,
name|startedBegin
argument_list|,
name|startedEnd
argument_list|,
name|finishBegin
argument_list|,
name|finishEnd
argument_list|,
name|applicationTypes
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/apps/{appid}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getApp (@ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String appId)
specifier|public
name|AppInfo
name|getApp
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|)
block|{
name|init
argument_list|(
name|res
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getApp
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|appId
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/apps/{appid}/appattempts"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getAppAttempts (@ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String appId)
specifier|public
name|AppAttemptsInfo
name|getAppAttempts
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|)
block|{
name|init
argument_list|(
name|res
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getAppAttempts
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|appId
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/apps/{appid}/appattempts/{appattemptid}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getAppAttempt (@ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String appId, @PathParam(R) String appAttemptId)
specifier|public
name|AppAttemptInfo
name|getAppAttempt
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appattemptid"
argument_list|)
name|String
name|appAttemptId
parameter_list|)
block|{
name|init
argument_list|(
name|res
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getAppAttempt
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|appId
argument_list|,
name|appAttemptId
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/apps/{appid}/appattempts/{appattemptid}/containers"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getContainers (@ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String appId, @PathParam(R) String appAttemptId)
specifier|public
name|ContainersInfo
name|getContainers
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appattemptid"
argument_list|)
name|String
name|appAttemptId
parameter_list|)
block|{
name|init
argument_list|(
name|res
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getContainers
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|appId
argument_list|,
name|appAttemptId
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/apps/{appid}/appattempts/{appattemptid}/containers/{containerid}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getContainer (@ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String appId, @PathParam(R) String appAttemptId, @PathParam(R) String containerId)
specifier|public
name|ContainerInfo
name|getContainer
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appattemptid"
argument_list|)
name|String
name|appAttemptId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"containerid"
argument_list|)
name|String
name|containerId
parameter_list|)
block|{
name|init
argument_list|(
name|res
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getContainer
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|appId
argument_list|,
name|appAttemptId
argument_list|,
name|containerId
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
DECL|method|validateStates (String stateQuery, Set<String> statesQuery)
name|validateStates
parameter_list|(
name|String
name|stateQuery
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|statesQuery
parameter_list|)
block|{
comment|// stateQuery is deprecated.
if|if
condition|(
name|stateQuery
operator|!=
literal|null
operator|&&
operator|!
name|stateQuery
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|statesQuery
operator|.
name|add
argument_list|(
name|stateQuery
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|appStates
init|=
name|parseQueries
argument_list|(
name|statesQuery
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|appState
range|:
name|appStates
control|)
block|{
switch|switch
condition|(
name|YarnApplicationState
operator|.
name|valueOf
argument_list|(
name|StringUtils
operator|.
name|toUpperCase
argument_list|(
name|appState
argument_list|)
argument_list|)
condition|)
block|{
case|case
name|FINISHED
case|:
case|case
name|FAILED
case|:
case|case
name|KILLED
case|:
continue|continue;
default|default:
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Invalid application-state "
operator|+
name|appState
operator|+
literal|" specified. It should be a final state"
argument_list|)
throw|;
block|}
block|}
block|}
comment|// TODO: YARN-6080: Create WebServiceUtils to have common functions used in
comment|//       RMWebService, NMWebService and AHSWebService.
comment|/**    * Returns log file's name as well as current file size for a container.    *    * @param req    *    HttpServletRequest    * @param res    *    HttpServletResponse    * @param containerIdStr    *    The container ID    * @param nmId    *    The Node Manager NodeId    * @return    *    The log file's name and current file size    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/containers/{containerid}/logs"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getContainerLogsInfo ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr, @QueryParam(YarnWebServiceParams.NM_ID) String nmId)
specifier|public
name|Response
name|getContainerLogsInfo
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|CONTAINER_ID
argument_list|)
name|String
name|containerIdStr
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|NM_ID
argument_list|)
name|String
name|nmId
parameter_list|)
block|{
name|ContainerId
name|containerId
init|=
literal|null
decl_stmt|;
name|init
argument_list|(
name|res
argument_list|)
expr_stmt|;
try|try
block|{
name|containerId
operator|=
name|ContainerId
operator|.
name|fromString
argument_list|(
name|containerIdStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"invalid container id, "
operator|+
name|containerIdStr
argument_list|)
throw|;
block|}
name|ApplicationId
name|appId
init|=
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|AppInfo
name|appInfo
decl_stmt|;
try|try
block|{
name|appInfo
operator|=
name|super
operator|.
name|getApp
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// directly find logs from HDFS.
return|return
name|getContainerLogMeta
argument_list|(
name|appId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|containerIdStr
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|// if the application finishes, directly find logs
comment|// from HDFS.
if|if
condition|(
name|isFinishedState
argument_list|(
name|appInfo
operator|.
name|getAppState
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getContainerLogMeta
argument_list|(
name|appId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|containerIdStr
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
name|isRunningState
argument_list|(
name|appInfo
operator|.
name|getAppState
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|appOwner
init|=
name|appInfo
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|String
name|nodeHttpAddress
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|nmId
operator|!=
literal|null
operator|&&
operator|!
name|nmId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|nodeHttpAddress
operator|=
name|getNMWebAddressFromRM
argument_list|(
name|conf
argument_list|,
name|nmId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|nodeHttpAddress
operator|==
literal|null
operator|||
name|nodeHttpAddress
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ContainerInfo
name|containerInfo
decl_stmt|;
try|try
block|{
name|containerInfo
operator|=
name|super
operator|.
name|getContainer
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|,
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// return log meta for the aggregated logs if exists.
comment|// It will also return empty log meta for the local logs.
return|return
name|getContainerLogMeta
argument_list|(
name|appId
argument_list|,
name|appOwner
argument_list|,
literal|null
argument_list|,
name|containerIdStr
argument_list|,
literal|true
argument_list|)
return|;
block|}
name|nodeHttpAddress
operator|=
name|containerInfo
operator|.
name|getNodeHttpAddress
argument_list|()
expr_stmt|;
comment|// make sure nodeHttpAddress is not null and not empty. Otherwise,
comment|// we would only get log meta for aggregated logs instead of
comment|// re-directing the request
if|if
condition|(
name|nodeHttpAddress
operator|==
literal|null
operator|||
name|nodeHttpAddress
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// return log meta for the aggregated logs if exists.
comment|// It will also return empty log meta for the local logs.
return|return
name|getContainerLogMeta
argument_list|(
name|appId
argument_list|,
name|appOwner
argument_list|,
literal|null
argument_list|,
name|containerIdStr
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
name|String
name|uri
init|=
literal|"/"
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
literal|"/logs"
decl_stmt|;
name|String
name|resURI
init|=
name|JOINER
operator|.
name|join
argument_list|(
name|getAbsoluteNMWebAddress
argument_list|(
name|nodeHttpAddress
argument_list|)
argument_list|,
name|NM_DOWNLOAD_URI_STR
argument_list|,
name|uri
argument_list|)
decl_stmt|;
name|String
name|query
init|=
name|req
operator|.
name|getQueryString
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
operator|&&
operator|!
name|query
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|resURI
operator|+=
literal|"?"
operator|+
name|query
expr_stmt|;
block|}
name|ResponseBuilder
name|response
init|=
name|Response
operator|.
name|status
argument_list|(
name|HttpServletResponse
operator|.
name|SC_TEMPORARY_REDIRECT
argument_list|)
decl_stmt|;
name|response
operator|.
name|header
argument_list|(
literal|"Location"
argument_list|,
name|resURI
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"The application is not at Running or Finished State."
argument_list|)
throw|;
block|}
block|}
comment|/**    * Returns the contents of a container's log file in plain text.    *    * @param req    *    HttpServletRequest    * @param res    *    HttpServletResponse    * @param containerIdStr    *    The container ID    * @param filename    *    The name of the log file    * @param format    *    The content type    * @param size    *    the size of the log file    * @param nmId    *    The Node Manager NodeId    * @return    *    The contents of the container's log file    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/containers/{containerid}/logs/{filename}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|TEXT_PLAIN
block|}
argument_list|)
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getContainerLogFile (@ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr, @PathParam(YarnWebServiceParams.CONTAINER_LOG_FILE_NAME) String filename, @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_FORMAT) String format, @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_SIZE) String size, @QueryParam(YarnWebServiceParams.NM_ID) String nmId)
specifier|public
name|Response
name|getContainerLogFile
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|CONTAINER_ID
argument_list|)
name|String
name|containerIdStr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|CONTAINER_LOG_FILE_NAME
argument_list|)
name|String
name|filename
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|RESPONSE_CONTENT_FORMAT
argument_list|)
name|String
name|format
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|RESPONSE_CONTENT_SIZE
argument_list|)
name|String
name|size
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|NM_ID
argument_list|)
name|String
name|nmId
parameter_list|)
block|{
return|return
name|getLogs
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|containerIdStr
argument_list|,
name|filename
argument_list|,
name|format
argument_list|,
name|size
argument_list|,
name|nmId
argument_list|)
return|;
block|}
comment|//TODO: YARN-4993: Refactory ContainersLogsBlock, AggregatedLogsBlock and
comment|//      container log webservice introduced in AHS to minimize
comment|//      the duplication.
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/containerlogs/{containerid}/{filename}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|TEXT_PLAIN
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getLogs (@ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr, @PathParam(YarnWebServiceParams.CONTAINER_LOG_FILE_NAME) String filename, @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_FORMAT) String format, @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_SIZE) String size, @QueryParam(YarnWebServiceParams.NM_ID) String nmId)
specifier|public
name|Response
name|getLogs
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|CONTAINER_ID
argument_list|)
name|String
name|containerIdStr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|CONTAINER_LOG_FILE_NAME
argument_list|)
name|String
name|filename
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|RESPONSE_CONTENT_FORMAT
argument_list|)
name|String
name|format
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|RESPONSE_CONTENT_SIZE
argument_list|)
name|String
name|size
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|NM_ID
argument_list|)
name|String
name|nmId
parameter_list|)
block|{
name|init
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId
decl_stmt|;
try|try
block|{
name|containerId
operator|=
name|ContainerId
operator|.
name|fromString
argument_list|(
name|containerIdStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
return|return
name|createBadResponse
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|,
literal|"Invalid ContainerId: "
operator|+
name|containerIdStr
argument_list|)
return|;
block|}
specifier|final
name|long
name|length
init|=
name|parseLongParam
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|AppInfo
name|appInfo
decl_stmt|;
try|try
block|{
name|appInfo
operator|=
name|super
operator|.
name|getApp
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// directly find logs from HDFS.
return|return
name|sendStreamOutputResponse
argument_list|(
name|appId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|containerIdStr
argument_list|,
name|filename
argument_list|,
name|format
argument_list|,
name|length
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|String
name|appOwner
init|=
name|appInfo
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|isFinishedState
argument_list|(
name|appInfo
operator|.
name|getAppState
argument_list|()
argument_list|)
condition|)
block|{
comment|// directly find logs from HDFS.
return|return
name|sendStreamOutputResponse
argument_list|(
name|appId
argument_list|,
name|appOwner
argument_list|,
literal|null
argument_list|,
name|containerIdStr
argument_list|,
name|filename
argument_list|,
name|format
argument_list|,
name|length
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
name|isRunningState
argument_list|(
name|appInfo
operator|.
name|getAppState
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|nodeHttpAddress
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|nmId
operator|!=
literal|null
operator|&&
operator|!
name|nmId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|nodeHttpAddress
operator|=
name|getNMWebAddressFromRM
argument_list|(
name|conf
argument_list|,
name|nmId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|nodeHttpAddress
operator|==
literal|null
operator|||
name|nodeHttpAddress
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ContainerInfo
name|containerInfo
decl_stmt|;
try|try
block|{
name|containerInfo
operator|=
name|super
operator|.
name|getContainer
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|,
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// output the aggregated logs
return|return
name|sendStreamOutputResponse
argument_list|(
name|appId
argument_list|,
name|appOwner
argument_list|,
literal|null
argument_list|,
name|containerIdStr
argument_list|,
name|filename
argument_list|,
name|format
argument_list|,
name|length
argument_list|,
literal|true
argument_list|)
return|;
block|}
name|nodeHttpAddress
operator|=
name|containerInfo
operator|.
name|getNodeHttpAddress
argument_list|()
expr_stmt|;
comment|// make sure nodeHttpAddress is not null and not empty. Otherwise,
comment|// we would only get aggregated logs instead of re-directing the
comment|// request
if|if
condition|(
name|nodeHttpAddress
operator|==
literal|null
operator|||
name|nodeHttpAddress
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// output the aggregated logs
return|return
name|sendStreamOutputResponse
argument_list|(
name|appId
argument_list|,
name|appOwner
argument_list|,
literal|null
argument_list|,
name|containerIdStr
argument_list|,
name|filename
argument_list|,
name|format
argument_list|,
name|length
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
name|String
name|uri
init|=
literal|"/"
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
literal|"/logs/"
operator|+
name|filename
decl_stmt|;
name|String
name|resURI
init|=
name|JOINER
operator|.
name|join
argument_list|(
name|getAbsoluteNMWebAddress
argument_list|(
name|nodeHttpAddress
argument_list|)
argument_list|,
name|NM_DOWNLOAD_URI_STR
argument_list|,
name|uri
argument_list|)
decl_stmt|;
name|String
name|query
init|=
name|req
operator|.
name|getQueryString
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
operator|&&
operator|!
name|query
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|resURI
operator|+=
literal|"?"
operator|+
name|query
expr_stmt|;
block|}
name|ResponseBuilder
name|response
init|=
name|Response
operator|.
name|status
argument_list|(
name|HttpServletResponse
operator|.
name|SC_TEMPORARY_REDIRECT
argument_list|)
decl_stmt|;
name|response
operator|.
name|header
argument_list|(
literal|"Location"
argument_list|,
name|resURI
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|createBadResponse
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|,
literal|"The application is not at Running or Finished State."
argument_list|)
return|;
block|}
block|}
DECL|method|isRunningState (YarnApplicationState appState)
specifier|private
name|boolean
name|isRunningState
parameter_list|(
name|YarnApplicationState
name|appState
parameter_list|)
block|{
return|return
name|appState
operator|==
name|YarnApplicationState
operator|.
name|RUNNING
return|;
block|}
DECL|method|isFinishedState (YarnApplicationState appState)
specifier|private
name|boolean
name|isFinishedState
parameter_list|(
name|YarnApplicationState
name|appState
parameter_list|)
block|{
return|return
name|appState
operator|==
name|YarnApplicationState
operator|.
name|FINISHED
operator|||
name|appState
operator|==
name|YarnApplicationState
operator|.
name|FAILED
operator|||
name|appState
operator|==
name|YarnApplicationState
operator|.
name|KILLED
return|;
block|}
DECL|method|createBadResponse (Status status, String errMessage)
specifier|private
name|Response
name|createBadResponse
parameter_list|(
name|Status
name|status
parameter_list|,
name|String
name|errMessage
parameter_list|)
block|{
name|Response
name|response
init|=
name|Response
operator|.
name|status
argument_list|(
name|status
argument_list|)
operator|.
name|entity
argument_list|(
name|DOT_JOINER
operator|.
name|join
argument_list|(
name|status
operator|.
name|toString
argument_list|()
argument_list|,
name|errMessage
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|response
return|;
block|}
DECL|method|sendStreamOutputResponse (ApplicationId appId, String appOwner, String nodeId, String containerIdStr, String fileName, String format, long bytes, boolean printEmptyLocalContainerLog)
specifier|private
name|Response
name|sendStreamOutputResponse
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|appOwner
parameter_list|,
name|String
name|nodeId
parameter_list|,
name|String
name|containerIdStr
parameter_list|,
name|String
name|fileName
parameter_list|,
name|String
name|format
parameter_list|,
name|long
name|bytes
parameter_list|,
name|boolean
name|printEmptyLocalContainerLog
parameter_list|)
block|{
name|String
name|contentType
init|=
name|WebAppUtils
operator|.
name|getDefaultLogContentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|format
operator|!=
literal|null
operator|&&
operator|!
name|format
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|contentType
operator|=
name|WebAppUtils
operator|.
name|getSupportedLogContentType
argument_list|(
name|format
argument_list|)
expr_stmt|;
if|if
condition|(
name|contentType
operator|==
literal|null
condition|)
block|{
name|String
name|errorMessage
init|=
literal|"The valid values for the parameter : format "
operator|+
literal|"are "
operator|+
name|WebAppUtils
operator|.
name|listSupportedLogContentType
argument_list|()
decl_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|errorMessage
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
name|StreamingOutput
name|stream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stream
operator|=
name|getStreamingOutput
argument_list|(
name|appId
argument_list|,
name|appOwner
argument_list|,
name|nodeId
argument_list|,
name|containerIdStr
argument_list|,
name|fileName
argument_list|,
name|bytes
argument_list|,
name|printEmptyLocalContainerLog
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
return|return
name|createBadResponse
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
name|ResponseBuilder
name|response
init|=
name|Response
operator|.
name|ok
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|response
operator|.
name|header
argument_list|(
literal|"Content-Type"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
comment|// Sending the X-Content-Type-Options response header with the value
comment|// nosniff will prevent Internet Explorer from MIME-sniffing a response
comment|// away from the declared content-type.
name|response
operator|.
name|header
argument_list|(
literal|"X-Content-Type-Options"
argument_list|,
literal|"nosniff"
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getStreamingOutput (final ApplicationId appId, final String appOwner, final String nodeId, final String containerIdStr, final String logFile, final long bytes, final boolean printEmptyLocalContainerLog)
specifier|private
name|StreamingOutput
name|getStreamingOutput
parameter_list|(
specifier|final
name|ApplicationId
name|appId
parameter_list|,
specifier|final
name|String
name|appOwner
parameter_list|,
specifier|final
name|String
name|nodeId
parameter_list|,
specifier|final
name|String
name|containerIdStr
parameter_list|,
specifier|final
name|String
name|logFile
parameter_list|,
specifier|final
name|long
name|bytes
parameter_list|,
specifier|final
name|boolean
name|printEmptyLocalContainerLog
parameter_list|)
throws|throws
name|IOException
block|{
name|StreamingOutput
name|stream
init|=
operator|new
name|StreamingOutput
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|65535
index|]
decl_stmt|;
name|boolean
name|findLogs
init|=
name|LogToolUtils
operator|.
name|outputAggregatedContainerLog
argument_list|(
name|conf
argument_list|,
name|appId
argument_list|,
name|appOwner
argument_list|,
name|containerIdStr
argument_list|,
name|nodeId
argument_list|,
name|logFile
argument_list|,
name|bytes
argument_list|,
name|os
argument_list|,
name|buf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|findLogs
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
operator|(
literal|"Can not find logs for container:"
operator|+
name|containerIdStr
operator|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|printEmptyLocalContainerLog
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|containerIdStr
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"LogAggregationType: "
operator|+
name|ContainerLogAggregationType
operator|.
name|LOCAL
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"LogContents:\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getNoRedirectWarning
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
return|return
name|stream
return|;
block|}
DECL|method|parseLongParam (String bytes)
specifier|private
name|long
name|parseLongParam
parameter_list|(
name|String
name|bytes
parameter_list|)
block|{
if|if
condition|(
name|bytes
operator|==
literal|null
operator|||
name|bytes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|bytes
argument_list|)
return|;
block|}
DECL|method|getContainerLogMeta (ApplicationId appId, String appOwner, final String nodeId, final String containerIdStr, boolean emptyLocalContainerLogMeta)
specifier|private
name|Response
name|getContainerLogMeta
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|appOwner
parameter_list|,
specifier|final
name|String
name|nodeId
parameter_list|,
specifier|final
name|String
name|containerIdStr
parameter_list|,
name|boolean
name|emptyLocalContainerLogMeta
parameter_list|)
block|{
try|try
block|{
name|List
argument_list|<
name|ContainerLogMeta
argument_list|>
name|containerLogMeta
init|=
name|LogToolUtils
operator|.
name|getContainerLogMetaFromRemoteFS
argument_list|(
name|conf
argument_list|,
name|appId
argument_list|,
name|containerIdStr
argument_list|,
name|nodeId
argument_list|,
name|appOwner
argument_list|)
decl_stmt|;
if|if
condition|(
name|containerLogMeta
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Can not get log meta for container: "
operator|+
name|containerIdStr
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|ContainerLogsInfo
argument_list|>
name|containersLogsInfo
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerLogMeta
name|meta
range|:
name|containerLogMeta
control|)
block|{
name|ContainerLogsInfo
name|logInfo
init|=
operator|new
name|ContainerLogsInfo
argument_list|(
name|meta
argument_list|,
name|ContainerLogAggregationType
operator|.
name|AGGREGATED
argument_list|)
decl_stmt|;
name|containersLogsInfo
operator|.
name|add
argument_list|(
name|logInfo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|emptyLocalContainerLogMeta
condition|)
block|{
name|ContainerLogMeta
name|emptyMeta
init|=
operator|new
name|ContainerLogMeta
argument_list|(
name|containerIdStr
argument_list|,
literal|"N/A"
argument_list|)
decl_stmt|;
name|ContainerLogsInfo
name|empty
init|=
operator|new
name|ContainerLogsInfo
argument_list|(
name|emptyMeta
argument_list|,
name|ContainerLogAggregationType
operator|.
name|LOCAL
argument_list|)
decl_stmt|;
name|containersLogsInfo
operator|.
name|add
argument_list|(
name|empty
argument_list|)
expr_stmt|;
block|}
name|GenericEntity
argument_list|<
name|List
argument_list|<
name|ContainerLogsInfo
argument_list|>
argument_list|>
name|meta
init|=
operator|new
name|GenericEntity
argument_list|<
name|List
argument_list|<
name|ContainerLogsInfo
argument_list|>
argument_list|>
argument_list|(
name|containersLogsInfo
argument_list|)
block|{}
decl_stmt|;
name|ResponseBuilder
name|response
init|=
name|Response
operator|.
name|ok
argument_list|(
name|meta
argument_list|)
decl_stmt|;
comment|// Sending the X-Content-Type-Options response header with the value
comment|// nosniff will prevent Internet Explorer from MIME-sniffing a response
comment|// away from the declared content-type.
name|response
operator|.
name|header
argument_list|(
literal|"X-Content-Type-Options"
argument_list|,
literal|"nosniff"
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|getNoRedirectWarning ()
specifier|public
specifier|static
name|String
name|getNoRedirectWarning
parameter_list|()
block|{
return|return
literal|"We do not have NodeManager web address, so we can not "
operator|+
literal|"re-direct the request to related NodeManager "
operator|+
literal|"for local container logs."
return|;
block|}
DECL|method|getAbsoluteNMWebAddress (String nmWebAddress)
specifier|private
name|String
name|getAbsoluteNMWebAddress
parameter_list|(
name|String
name|nmWebAddress
parameter_list|)
block|{
if|if
condition|(
name|nmWebAddress
operator|.
name|contains
argument_list|(
name|WebAppUtils
operator|.
name|HTTP_PREFIX
argument_list|)
operator|||
name|nmWebAddress
operator|.
name|contains
argument_list|(
name|WebAppUtils
operator|.
name|HTTPS_PREFIX
argument_list|)
condition|)
block|{
return|return
name|nmWebAddress
return|;
block|}
return|return
name|WebAppUtils
operator|.
name|getHttpSchemePrefix
argument_list|(
name|conf
argument_list|)
operator|+
name|nmWebAddress
return|;
block|}
annotation|@
name|VisibleForTesting
annotation|@
name|Private
DECL|method|getNMWebAddressFromRM (Configuration configuration, String nodeId)
specifier|public
name|String
name|getNMWebAddressFromRM
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|String
name|nodeId
parameter_list|)
throws|throws
name|ClientHandlerException
throws|,
name|UniformInterfaceException
throws|,
name|JSONException
block|{
name|JSONObject
name|nodeInfo
init|=
name|YarnWebServiceUtils
operator|.
name|getNodeInfoFromRMWebService
argument_list|(
name|configuration
argument_list|,
name|nodeId
argument_list|)
operator|.
name|getJSONObject
argument_list|(
literal|"node"
argument_list|)
decl_stmt|;
return|return
name|nodeInfo
operator|.
name|has
argument_list|(
literal|"nodeHTTPAddress"
argument_list|)
condition|?
name|nodeInfo
operator|.
name|getString
argument_list|(
literal|"nodeHTTPAddress"
argument_list|)
else|:
literal|null
return|;
block|}
block|}
end_class

end_unit

