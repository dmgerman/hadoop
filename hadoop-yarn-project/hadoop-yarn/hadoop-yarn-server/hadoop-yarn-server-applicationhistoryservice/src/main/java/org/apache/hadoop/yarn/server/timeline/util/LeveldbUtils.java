begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timeline.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|GenericObjectMapper
operator|.
name|readReverseOrderedLong
import|;
end_import

begin_class
DECL|class|LeveldbUtils
specifier|public
class|class
name|LeveldbUtils
block|{
DECL|class|KeyBuilder
specifier|public
specifier|static
class|class
name|KeyBuilder
block|{
DECL|field|MAX_NUMBER_OF_KEY_ELEMENTS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_NUMBER_OF_KEY_ELEMENTS
init|=
literal|10
decl_stmt|;
DECL|field|b
specifier|private
name|byte
index|[]
index|[]
name|b
decl_stmt|;
DECL|field|useSeparator
specifier|private
name|boolean
index|[]
name|useSeparator
decl_stmt|;
DECL|field|index
specifier|private
name|int
name|index
decl_stmt|;
DECL|field|length
specifier|private
name|int
name|length
decl_stmt|;
DECL|method|KeyBuilder (int size)
specifier|public
name|KeyBuilder
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|b
operator|=
operator|new
name|byte
index|[
name|size
index|]
index|[]
expr_stmt|;
name|useSeparator
operator|=
operator|new
name|boolean
index|[
name|size
index|]
expr_stmt|;
name|index
operator|=
literal|0
expr_stmt|;
name|length
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|newInstance ()
specifier|public
specifier|static
name|KeyBuilder
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|KeyBuilder
argument_list|(
name|MAX_NUMBER_OF_KEY_ELEMENTS
argument_list|)
return|;
block|}
DECL|method|add (String s)
specifier|public
name|KeyBuilder
name|add
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|s
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|add (byte[] t)
specifier|public
name|KeyBuilder
name|add
parameter_list|(
name|byte
index|[]
name|t
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|t
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|add (byte[] t, boolean sep)
specifier|public
name|KeyBuilder
name|add
parameter_list|(
name|byte
index|[]
name|t
parameter_list|,
name|boolean
name|sep
parameter_list|)
block|{
name|b
index|[
name|index
index|]
operator|=
name|t
expr_stmt|;
name|useSeparator
index|[
name|index
index|]
operator|=
name|sep
expr_stmt|;
name|length
operator|+=
name|t
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|sep
condition|)
block|{
name|length
operator|++
expr_stmt|;
block|}
name|index
operator|++
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getBytes ()
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
condition|;
name|i
operator|++
control|)
block|{
name|baos
operator|.
name|write
argument_list|(
name|b
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|index
operator|-
literal|1
operator|&&
name|useSeparator
index|[
name|i
index|]
condition|)
block|{
name|baos
operator|.
name|write
argument_list|(
literal|0x0
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
DECL|method|getBytesForLookup ()
specifier|public
name|byte
index|[]
name|getBytesForLookup
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
condition|;
name|i
operator|++
control|)
block|{
name|baos
operator|.
name|write
argument_list|(
name|b
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|useSeparator
index|[
name|i
index|]
condition|)
block|{
name|baos
operator|.
name|write
argument_list|(
literal|0x0
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
DECL|class|KeyParser
specifier|public
specifier|static
class|class
name|KeyParser
block|{
DECL|field|b
specifier|private
specifier|final
name|byte
index|[]
name|b
decl_stmt|;
DECL|field|offset
specifier|private
name|int
name|offset
decl_stmt|;
DECL|method|KeyParser (byte[] b, int offset)
specifier|public
name|KeyParser
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|this
operator|.
name|b
operator|=
name|b
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
block|}
DECL|method|getNextString ()
specifier|public
name|String
name|getNextString
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|offset
operator|>=
name|b
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"tried to read nonexistent string from byte array"
argument_list|)
throw|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|offset
operator|+
name|i
operator|<
name|b
operator|.
name|length
operator|&&
name|b
index|[
name|offset
operator|+
name|i
index|]
operator|!=
literal|0x0
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
name|String
name|s
init|=
operator|new
name|String
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|i
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|offset
operator|=
name|offset
operator|+
name|i
operator|+
literal|1
expr_stmt|;
return|return
name|s
return|;
block|}
DECL|method|getNextLong ()
specifier|public
name|long
name|getNextLong
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|offset
operator|+
literal|8
operator|>=
name|b
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"byte array ran out when trying to read long"
argument_list|)
throw|;
block|}
name|long
name|l
init|=
name|readReverseOrderedLong
argument_list|(
name|b
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|offset
operator|+=
literal|8
expr_stmt|;
return|return
name|l
return|;
block|}
DECL|method|getOffset ()
specifier|public
name|int
name|getOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
block|}
comment|/**    * Returns true if the byte array begins with the specified prefix.    */
DECL|method|prefixMatches (byte[] prefix, int prefixlen, byte[] b)
specifier|public
specifier|static
name|boolean
name|prefixMatches
parameter_list|(
name|byte
index|[]
name|prefix
parameter_list|,
name|int
name|prefixlen
parameter_list|,
name|byte
index|[]
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
operator|.
name|length
operator|<
name|prefixlen
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|WritableComparator
operator|.
name|compareBytes
argument_list|(
name|prefix
argument_list|,
literal|0
argument_list|,
name|prefixlen
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
name|prefixlen
argument_list|)
operator|==
literal|0
return|;
block|}
block|}
end_class

end_unit

