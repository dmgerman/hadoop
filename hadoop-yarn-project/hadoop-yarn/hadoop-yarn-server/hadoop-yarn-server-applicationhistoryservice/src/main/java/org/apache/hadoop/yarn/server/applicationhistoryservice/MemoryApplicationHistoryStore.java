begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.applicationhistoryservice
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
operator|.
name|ApplicationAttemptFinishData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
operator|.
name|ApplicationAttemptHistoryData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
operator|.
name|ApplicationAttemptStartData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
operator|.
name|ApplicationFinishData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
operator|.
name|ApplicationHistoryData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
operator|.
name|ApplicationStartData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
operator|.
name|ContainerFinishData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
operator|.
name|ContainerHistoryData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
operator|.
name|ContainerStartData
import|;
end_import

begin_comment
comment|/**  * In-memory implementation of {@link ApplicationHistoryStore}. This  * implementation is for test purpose only. If users improperly instantiate it,  * they may encounter reading and writing history data in different memory  * store.  *   */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|MemoryApplicationHistoryStore
specifier|public
class|class
name|MemoryApplicationHistoryStore
extends|extends
name|AbstractService
implements|implements
name|ApplicationHistoryStore
block|{
DECL|field|applicationData
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationHistoryData
argument_list|>
name|applicationData
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationHistoryData
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|applicationAttemptData
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|ConcurrentMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|ApplicationAttemptHistoryData
argument_list|>
argument_list|>
name|applicationAttemptData
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|ConcurrentMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|ApplicationAttemptHistoryData
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|containerData
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|ConcurrentMap
argument_list|<
name|ContainerId
argument_list|,
name|ContainerHistoryData
argument_list|>
argument_list|>
name|containerData
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|ConcurrentMap
argument_list|<
name|ContainerId
argument_list|,
name|ContainerHistoryData
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|MemoryApplicationHistoryStore ()
specifier|public
name|MemoryApplicationHistoryStore
parameter_list|()
block|{
name|super
argument_list|(
name|MemoryApplicationHistoryStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAllApplications ()
specifier|public
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationHistoryData
argument_list|>
name|getAllApplications
parameter_list|()
block|{
return|return
operator|new
name|HashMap
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationHistoryData
argument_list|>
argument_list|(
name|applicationData
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getApplication (ApplicationId appId)
specifier|public
name|ApplicationHistoryData
name|getApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
return|return
name|applicationData
operator|.
name|get
argument_list|(
name|appId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|ApplicationAttemptHistoryData
argument_list|>
DECL|method|getApplicationAttempts (ApplicationId appId)
name|getApplicationAttempts
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
name|ConcurrentMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|ApplicationAttemptHistoryData
argument_list|>
name|subMap
init|=
name|applicationAttemptData
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|subMap
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
expr|<
name|ApplicationAttemptId
operator|,
name|ApplicationAttemptHistoryData
operator|>
name|emptyMap
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|HashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|ApplicationAttemptHistoryData
argument_list|>
argument_list|(
name|subMap
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getApplicationAttempt ( ApplicationAttemptId appAttemptId)
specifier|public
name|ApplicationAttemptHistoryData
name|getApplicationAttempt
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
block|{
name|ConcurrentMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|ApplicationAttemptHistoryData
argument_list|>
name|subMap
init|=
name|applicationAttemptData
operator|.
name|get
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|subMap
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|subMap
operator|.
name|get
argument_list|(
name|appAttemptId
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getAMContainer (ApplicationAttemptId appAttemptId)
specifier|public
name|ContainerHistoryData
name|getAMContainer
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
block|{
name|ApplicationAttemptHistoryData
name|appAttempt
init|=
name|getApplicationAttempt
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|appAttempt
operator|==
literal|null
operator|||
name|appAttempt
operator|.
name|getMasterContainerId
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|getContainer
argument_list|(
name|appAttempt
operator|.
name|getMasterContainerId
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getContainer (ContainerId containerId)
specifier|public
name|ContainerHistoryData
name|getContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|ContainerHistoryData
argument_list|>
name|subMap
init|=
name|containerData
operator|.
name|get
argument_list|(
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|subMap
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|subMap
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getContainers ( ApplicationAttemptId appAttemptId)
specifier|public
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|ContainerHistoryData
argument_list|>
name|getContainers
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
throws|throws
name|IOException
block|{
name|ConcurrentMap
argument_list|<
name|ContainerId
argument_list|,
name|ContainerHistoryData
argument_list|>
name|subMap
init|=
name|containerData
operator|.
name|get
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|subMap
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
expr|<
name|ContainerId
operator|,
name|ContainerHistoryData
operator|>
name|emptyMap
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|HashMap
argument_list|<
name|ContainerId
argument_list|,
name|ContainerHistoryData
argument_list|>
argument_list|(
name|subMap
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|applicationStarted (ApplicationStartData appStart)
specifier|public
name|void
name|applicationStarted
parameter_list|(
name|ApplicationStartData
name|appStart
parameter_list|)
throws|throws
name|IOException
block|{
name|ApplicationHistoryData
name|oldData
init|=
name|applicationData
operator|.
name|putIfAbsent
argument_list|(
name|appStart
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|ApplicationHistoryData
operator|.
name|newInstance
argument_list|(
name|appStart
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|appStart
operator|.
name|getApplicationName
argument_list|()
argument_list|,
name|appStart
operator|.
name|getApplicationType
argument_list|()
argument_list|,
name|appStart
operator|.
name|getQueue
argument_list|()
argument_list|,
name|appStart
operator|.
name|getUser
argument_list|()
argument_list|,
name|appStart
operator|.
name|getSubmitTime
argument_list|()
argument_list|,
name|appStart
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldData
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The start information of application "
operator|+
name|appStart
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" is already stored."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|applicationFinished (ApplicationFinishData appFinish)
specifier|public
name|void
name|applicationFinished
parameter_list|(
name|ApplicationFinishData
name|appFinish
parameter_list|)
throws|throws
name|IOException
block|{
name|ApplicationHistoryData
name|data
init|=
name|applicationData
operator|.
name|get
argument_list|(
name|appFinish
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The finish information of application "
operator|+
name|appFinish
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" is stored before the start"
operator|+
literal|" information."
argument_list|)
throw|;
block|}
comment|// Make the assumption that YarnApplicationState should not be null if
comment|// the finish information is already recorded
if|if
condition|(
name|data
operator|.
name|getYarnApplicationState
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The finish information of application "
operator|+
name|appFinish
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" is already stored."
argument_list|)
throw|;
block|}
name|data
operator|.
name|setFinishTime
argument_list|(
name|appFinish
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|setDiagnosticsInfo
argument_list|(
name|appFinish
operator|.
name|getDiagnosticsInfo
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|setFinalApplicationStatus
argument_list|(
name|appFinish
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|setYarnApplicationState
argument_list|(
name|appFinish
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|applicationAttemptStarted ( ApplicationAttemptStartData appAttemptStart)
specifier|public
name|void
name|applicationAttemptStarted
parameter_list|(
name|ApplicationAttemptStartData
name|appAttemptStart
parameter_list|)
throws|throws
name|IOException
block|{
name|ConcurrentMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|ApplicationAttemptHistoryData
argument_list|>
name|subMap
init|=
name|getSubMap
argument_list|(
name|appAttemptStart
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|ApplicationAttemptHistoryData
name|oldData
init|=
name|subMap
operator|.
name|putIfAbsent
argument_list|(
name|appAttemptStart
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|ApplicationAttemptHistoryData
operator|.
name|newInstance
argument_list|(
name|appAttemptStart
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|appAttemptStart
operator|.
name|getHost
argument_list|()
argument_list|,
name|appAttemptStart
operator|.
name|getRPCPort
argument_list|()
argument_list|,
name|appAttemptStart
operator|.
name|getMasterContainerId
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldData
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The start information of application attempt "
operator|+
name|appAttemptStart
operator|.
name|getApplicationAttemptId
argument_list|()
operator|+
literal|" is already stored."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|applicationAttemptFinished ( ApplicationAttemptFinishData appAttemptFinish)
specifier|public
name|void
name|applicationAttemptFinished
parameter_list|(
name|ApplicationAttemptFinishData
name|appAttemptFinish
parameter_list|)
throws|throws
name|IOException
block|{
name|ConcurrentMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|ApplicationAttemptHistoryData
argument_list|>
name|subMap
init|=
name|getSubMap
argument_list|(
name|appAttemptFinish
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|ApplicationAttemptHistoryData
name|data
init|=
name|subMap
operator|.
name|get
argument_list|(
name|appAttemptFinish
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The finish information of application attempt "
operator|+
name|appAttemptFinish
operator|.
name|getApplicationAttemptId
argument_list|()
operator|+
literal|" is stored before"
operator|+
literal|" the start information."
argument_list|)
throw|;
block|}
comment|// Make the assumption that YarnApplicationAttemptState should not be null
comment|// if the finish information is already recorded
if|if
condition|(
name|data
operator|.
name|getYarnApplicationAttemptState
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The finish information of application attempt "
operator|+
name|appAttemptFinish
operator|.
name|getApplicationAttemptId
argument_list|()
operator|+
literal|" is already stored."
argument_list|)
throw|;
block|}
name|data
operator|.
name|setTrackingURL
argument_list|(
name|appAttemptFinish
operator|.
name|getTrackingURL
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|setDiagnosticsInfo
argument_list|(
name|appAttemptFinish
operator|.
name|getDiagnosticsInfo
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|setFinalApplicationStatus
argument_list|(
name|appAttemptFinish
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|setYarnApplicationAttemptState
argument_list|(
name|appAttemptFinish
operator|.
name|getYarnApplicationAttemptState
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ConcurrentMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|ApplicationAttemptHistoryData
argument_list|>
DECL|method|getSubMap (ApplicationId appId)
name|getSubMap
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
name|applicationAttemptData
operator|.
name|putIfAbsent
argument_list|(
name|appId
argument_list|,
operator|new
name|ConcurrentHashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|ApplicationAttemptHistoryData
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|applicationAttemptData
operator|.
name|get
argument_list|(
name|appId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|containerStarted (ContainerStartData containerStart)
specifier|public
name|void
name|containerStarted
parameter_list|(
name|ContainerStartData
name|containerStart
parameter_list|)
throws|throws
name|IOException
block|{
name|ConcurrentMap
argument_list|<
name|ContainerId
argument_list|,
name|ContainerHistoryData
argument_list|>
name|subMap
init|=
name|getSubMap
argument_list|(
name|containerStart
operator|.
name|getContainerId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|ContainerHistoryData
name|oldData
init|=
name|subMap
operator|.
name|putIfAbsent
argument_list|(
name|containerStart
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|ContainerHistoryData
operator|.
name|newInstance
argument_list|(
name|containerStart
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|containerStart
operator|.
name|getAllocatedResource
argument_list|()
argument_list|,
name|containerStart
operator|.
name|getAssignedNode
argument_list|()
argument_list|,
name|containerStart
operator|.
name|getPriority
argument_list|()
argument_list|,
name|containerStart
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldData
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The start information of container "
operator|+
name|containerStart
operator|.
name|getContainerId
argument_list|()
operator|+
literal|" is already stored."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|containerFinished (ContainerFinishData containerFinish)
specifier|public
name|void
name|containerFinished
parameter_list|(
name|ContainerFinishData
name|containerFinish
parameter_list|)
throws|throws
name|IOException
block|{
name|ConcurrentMap
argument_list|<
name|ContainerId
argument_list|,
name|ContainerHistoryData
argument_list|>
name|subMap
init|=
name|getSubMap
argument_list|(
name|containerFinish
operator|.
name|getContainerId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|ContainerHistoryData
name|data
init|=
name|subMap
operator|.
name|get
argument_list|(
name|containerFinish
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The finish information of container "
operator|+
name|containerFinish
operator|.
name|getContainerId
argument_list|()
operator|+
literal|" is stored before"
operator|+
literal|" the start information."
argument_list|)
throw|;
block|}
comment|// Make the assumption that ContainerState should not be null if
comment|// the finish information is already recorded
if|if
condition|(
name|data
operator|.
name|getContainerState
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The finish information of container "
operator|+
name|containerFinish
operator|.
name|getContainerId
argument_list|()
operator|+
literal|" is already stored."
argument_list|)
throw|;
block|}
name|data
operator|.
name|setFinishTime
argument_list|(
name|containerFinish
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|setDiagnosticsInfo
argument_list|(
name|containerFinish
operator|.
name|getDiagnosticsInfo
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|setContainerExitStatus
argument_list|(
name|containerFinish
operator|.
name|getContainerExitStatus
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|setContainerState
argument_list|(
name|containerFinish
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getSubMap ( ApplicationAttemptId appAttemptId)
specifier|private
name|ConcurrentMap
argument_list|<
name|ContainerId
argument_list|,
name|ContainerHistoryData
argument_list|>
name|getSubMap
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
block|{
name|containerData
operator|.
name|putIfAbsent
argument_list|(
name|appAttemptId
argument_list|,
operator|new
name|ConcurrentHashMap
argument_list|<
name|ContainerId
argument_list|,
name|ContainerHistoryData
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|containerData
operator|.
name|get
argument_list|(
name|appAttemptId
argument_list|)
return|;
block|}
block|}
end_class

end_unit

