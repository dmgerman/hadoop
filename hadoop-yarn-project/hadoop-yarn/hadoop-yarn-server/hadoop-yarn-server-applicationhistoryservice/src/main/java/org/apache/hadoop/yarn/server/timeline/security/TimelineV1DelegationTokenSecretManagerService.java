begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timeline.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|AbstractDelegationTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|TimelineDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|recovery
operator|.
name|LeveldbTimelineStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|recovery
operator|.
name|TimelineStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|recovery
operator|.
name|TimelineStateStore
operator|.
name|TimelineServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The service wrapper of {@link TimelineV1DelegationTokenSecretManager}.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|TimelineV1DelegationTokenSecretManagerService
specifier|public
class|class
name|TimelineV1DelegationTokenSecretManagerService
extends|extends
name|TimelineDelgationTokenSecretManagerService
block|{
DECL|field|stateStore
specifier|private
name|TimelineStateStore
name|stateStore
init|=
literal|null
decl_stmt|;
DECL|method|TimelineV1DelegationTokenSecretManagerService ()
specifier|public
name|TimelineV1DelegationTokenSecretManagerService
parameter_list|()
block|{
name|super
argument_list|(
name|TimelineV1DelegationTokenSecretManagerService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_RECOVERY_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_TIMELINE_SERVICE_RECOVERY_ENABLED
argument_list|)
condition|)
block|{
name|stateStore
operator|=
name|createStateStore
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|stateStore
operator|!=
literal|null
condition|)
block|{
name|stateStore
operator|.
name|start
argument_list|()
expr_stmt|;
name|TimelineServiceState
name|state
init|=
name|stateStore
operator|.
name|loadState
argument_list|()
decl_stmt|;
operator|(
operator|(
name|TimelineV1DelegationTokenSecretManager
operator|)
name|getTimelineDelegationTokenSecretManager
argument_list|()
operator|)
operator|.
name|recover
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|stateStore
operator|!=
literal|null
condition|)
block|{
name|stateStore
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|AbstractDelegationTokenSecretManager
argument_list|<
name|TimelineDelegationTokenIdentifier
argument_list|>
DECL|method|createTimelineDelegationTokenSecretManager (long secretKeyInterval, long tokenMaxLifetime, long tokenRenewInterval, long tokenRemovalScanInterval)
name|createTimelineDelegationTokenSecretManager
parameter_list|(
name|long
name|secretKeyInterval
parameter_list|,
name|long
name|tokenMaxLifetime
parameter_list|,
name|long
name|tokenRenewInterval
parameter_list|,
name|long
name|tokenRemovalScanInterval
parameter_list|)
block|{
return|return
operator|new
name|TimelineV1DelegationTokenSecretManager
argument_list|(
name|secretKeyInterval
argument_list|,
name|tokenMaxLifetime
argument_list|,
name|tokenRenewInterval
argument_list|,
name|tokenRemovalScanInterval
argument_list|,
name|stateStore
argument_list|)
return|;
block|}
DECL|method|createStateStore ( Configuration conf)
specifier|protected
name|TimelineStateStore
name|createStateStore
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClass
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_STATE_STORE_CLASS
argument_list|,
name|LeveldbTimelineStateStore
operator|.
name|class
argument_list|,
name|TimelineStateStore
operator|.
name|class
argument_list|)
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    * Delegation token secret manager for ATSv1 and ATSv1.5.    */
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|TimelineV1DelegationTokenSecretManager
specifier|public
specifier|static
class|class
name|TimelineV1DelegationTokenSecretManager
extends|extends
name|AbstractDelegationTokenSecretManager
argument_list|<
name|TimelineDelegationTokenIdentifier
argument_list|>
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TimelineV1DelegationTokenSecretManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|stateStore
specifier|private
name|TimelineStateStore
name|stateStore
decl_stmt|;
comment|/**      * Create a timeline v1 secret manager.      * @param delegationKeyUpdateInterval the number of milliseconds for rolling      *        new secret keys.      * @param delegationTokenMaxLifetime the maximum lifetime of the delegation      *        tokens in milliseconds      * @param delegationTokenRenewInterval how often the tokens must be renewed      *        in milliseconds      * @param delegationTokenRemoverScanInterval how often the tokens are      *        scanned for expired tokens in milliseconds      * @param stateStore timeline service state store      */
DECL|method|TimelineV1DelegationTokenSecretManager ( long delegationKeyUpdateInterval, long delegationTokenMaxLifetime, long delegationTokenRenewInterval, long delegationTokenRemoverScanInterval, TimelineStateStore stateStore)
specifier|public
name|TimelineV1DelegationTokenSecretManager
parameter_list|(
name|long
name|delegationKeyUpdateInterval
parameter_list|,
name|long
name|delegationTokenMaxLifetime
parameter_list|,
name|long
name|delegationTokenRenewInterval
parameter_list|,
name|long
name|delegationTokenRemoverScanInterval
parameter_list|,
name|TimelineStateStore
name|stateStore
parameter_list|)
block|{
name|super
argument_list|(
name|delegationKeyUpdateInterval
argument_list|,
name|delegationTokenMaxLifetime
argument_list|,
name|delegationTokenRenewInterval
argument_list|,
name|delegationTokenRemoverScanInterval
argument_list|)
expr_stmt|;
name|this
operator|.
name|stateStore
operator|=
name|stateStore
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createIdentifier ()
specifier|public
name|TimelineDelegationTokenIdentifier
name|createIdentifier
parameter_list|()
block|{
return|return
operator|new
name|TimelineDelegationTokenIdentifier
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|storeNewMasterKey (DelegationKey key)
specifier|protected
name|void
name|storeNewMasterKey
parameter_list|(
name|DelegationKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing master key {}"
argument_list|,
name|key
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|stateStore
operator|!=
literal|null
condition|)
block|{
name|stateStore
operator|.
name|storeTokenMasterKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to store master key "
operator|+
name|key
operator|.
name|getKeyId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeStoredMasterKey (DelegationKey key)
specifier|protected
name|void
name|removeStoredMasterKey
parameter_list|(
name|DelegationKey
name|key
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing master key {}"
argument_list|,
name|key
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|stateStore
operator|!=
literal|null
condition|)
block|{
name|stateStore
operator|.
name|removeTokenMasterKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to remove master key "
operator|+
name|key
operator|.
name|getKeyId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeNewToken (TimelineDelegationTokenIdentifier tokenId, long renewDate)
specifier|protected
name|void
name|storeNewToken
parameter_list|(
name|TimelineDelegationTokenIdentifier
name|tokenId
parameter_list|,
name|long
name|renewDate
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing token {}"
argument_list|,
name|tokenId
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|stateStore
operator|!=
literal|null
condition|)
block|{
name|stateStore
operator|.
name|storeToken
argument_list|(
name|tokenId
argument_list|,
name|renewDate
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to store token "
operator|+
name|tokenId
operator|.
name|getSequenceNumber
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeStoredToken (TimelineDelegationTokenIdentifier tokenId)
specifier|protected
name|void
name|removeStoredToken
parameter_list|(
name|TimelineDelegationTokenIdentifier
name|tokenId
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing token {}"
argument_list|,
name|tokenId
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|stateStore
operator|!=
literal|null
condition|)
block|{
name|stateStore
operator|.
name|removeToken
argument_list|(
name|tokenId
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to remove token "
operator|+
name|tokenId
operator|.
name|getSequenceNumber
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|updateStoredToken (TimelineDelegationTokenIdentifier tokenId, long renewDate)
specifier|protected
name|void
name|updateStoredToken
parameter_list|(
name|TimelineDelegationTokenIdentifier
name|tokenId
parameter_list|,
name|long
name|renewDate
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updating token {}"
argument_list|,
name|tokenId
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|stateStore
operator|!=
literal|null
condition|)
block|{
name|stateStore
operator|.
name|updateToken
argument_list|(
name|tokenId
argument_list|,
name|renewDate
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to update token "
operator|+
name|tokenId
operator|.
name|getSequenceNumber
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|recover (TimelineServiceState state)
specifier|public
name|void
name|recover
parameter_list|(
name|TimelineServiceState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovering "
operator|+
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DelegationKey
name|key
range|:
name|state
operator|.
name|getTokenMasterKeyState
argument_list|()
control|)
block|{
name|addKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|delegationTokenSequenceNumber
operator|=
name|state
operator|.
name|getLatestSequenceNumber
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|TimelineDelegationTokenIdentifier
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|state
operator|.
name|getTokenState
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|addPersistedDelegationToken
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

