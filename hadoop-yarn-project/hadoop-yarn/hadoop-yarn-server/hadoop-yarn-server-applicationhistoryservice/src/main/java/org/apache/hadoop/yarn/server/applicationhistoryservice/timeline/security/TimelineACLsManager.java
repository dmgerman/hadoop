begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.applicationhistoryservice.timeline.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|timeline
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|timeline
operator|.
name|EntityIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|timeline
operator|.
name|TimelineStore
operator|.
name|SystemFilter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  *<code>TimelineACLsManager</code> check the entity level timeline data access.  */
end_comment

begin_class
annotation|@
name|Private
DECL|class|TimelineACLsManager
specifier|public
class|class
name|TimelineACLsManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TimelineACLsManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|aclsEnabled
specifier|private
name|boolean
name|aclsEnabled
decl_stmt|;
DECL|method|TimelineACLsManager (Configuration conf)
specifier|public
name|TimelineACLsManager
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|aclsEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_ACL_ENABLE
argument_list|)
expr_stmt|;
block|}
DECL|method|checkAccess (UserGroupInformation callerUGI, TimelineEntity entity)
specifier|public
name|boolean
name|checkAccess
parameter_list|(
name|UserGroupInformation
name|callerUGI
parameter_list|,
name|TimelineEntity
name|entity
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Verifying the access of "
operator|+
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|" on the timeline entity "
operator|+
operator|new
name|EntityIdentifier
argument_list|(
name|entity
operator|.
name|getEntityId
argument_list|()
argument_list|,
name|entity
operator|.
name|getEntityType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|aclsEnabled
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Set
argument_list|<
name|Object
argument_list|>
name|values
init|=
name|entity
operator|.
name|getPrimaryFilters
argument_list|()
operator|.
name|get
argument_list|(
name|SystemFilter
operator|.
name|ENTITY_OWNER
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
operator|||
name|values
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Owner information of the timeline entity "
operator|+
operator|new
name|EntityIdentifier
argument_list|(
name|entity
operator|.
name|getEntityId
argument_list|()
argument_list|,
name|entity
operator|.
name|getEntityType
argument_list|()
argument_list|)
operator|+
literal|" is corrupted."
argument_list|)
throw|;
block|}
name|String
name|owner
init|=
name|values
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// TODO: Currently we just check the user is the timeline entity owner. In
comment|// the future, we need to check whether the user is admin or is in the
comment|// allowed user/group list
if|if
condition|(
name|callerUGI
operator|!=
literal|null
operator|&&
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
operator|.
name|equals
argument_list|(
name|owner
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|setACLsEnabled (boolean aclsEnabled)
specifier|public
name|void
name|setACLsEnabled
parameter_list|(
name|boolean
name|aclsEnabled
parameter_list|)
block|{
name|this
operator|.
name|aclsEnabled
operator|=
name|aclsEnabled
expr_stmt|;
block|}
block|}
end_class

end_unit

