begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.sharedcachemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|sharedcachemanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationReportPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|YarnClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|impl
operator|.
name|YarnClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ApplicationNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestRemoteAppChecker
specifier|public
class|class
name|TestRemoteAppChecker
block|{
DECL|field|checker
specifier|private
name|RemoteAppChecker
name|checker
decl_stmt|;
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
if|if
condition|(
name|checker
operator|!=
literal|null
condition|)
block|{
name|checker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Creates/initializes/starts a RemoteAppChecker with a spied    * DummyYarnClientImpl.    *     * @return the spied DummyYarnClientImpl in the created AppChecker    */
DECL|method|createCheckerWithMockedClient ()
specifier|private
name|YarnClient
name|createCheckerWithMockedClient
parameter_list|()
block|{
name|YarnClient
name|client
init|=
name|spy
argument_list|(
operator|new
name|DummyYarnClientImpl
argument_list|()
argument_list|)
decl_stmt|;
name|checker
operator|=
operator|new
name|RemoteAppChecker
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|checker
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|checker
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|client
return|;
block|}
annotation|@
name|Test
DECL|method|testNonExistentApp ()
specifier|public
name|void
name|testNonExistentApp
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnClient
name|client
init|=
name|createCheckerWithMockedClient
argument_list|()
decl_stmt|;
name|ApplicationId
name|id
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// test for null
name|doReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|client
argument_list|)
operator|.
name|getApplicationReport
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|checker
operator|.
name|isApplicationActive
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
comment|// test for ApplicationNotFoundException
name|doThrow
argument_list|(
operator|new
name|ApplicationNotFoundException
argument_list|(
literal|"Throw!"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|client
argument_list|)
operator|.
name|getApplicationReport
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|checker
operator|.
name|isApplicationActive
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRunningApp ()
specifier|public
name|void
name|testRunningApp
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnClient
name|client
init|=
name|createCheckerWithMockedClient
argument_list|()
decl_stmt|;
name|ApplicationId
name|id
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// create a report and set the state to an active one
name|ApplicationReport
name|report
init|=
operator|new
name|ApplicationReportPBImpl
argument_list|()
decl_stmt|;
name|report
operator|.
name|setYarnApplicationState
argument_list|(
name|YarnApplicationState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|report
argument_list|)
operator|.
name|when
argument_list|(
name|client
argument_list|)
operator|.
name|getApplicationReport
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checker
operator|.
name|isApplicationActive
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|DummyYarnClientImpl
class|class
name|DummyYarnClientImpl
extends|extends
name|YarnClientImpl
block|{
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
comment|// do nothing
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
block|{
comment|// do nothing
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
block|{
comment|// do nothing
block|}
block|}
block|}
end_class

end_unit

