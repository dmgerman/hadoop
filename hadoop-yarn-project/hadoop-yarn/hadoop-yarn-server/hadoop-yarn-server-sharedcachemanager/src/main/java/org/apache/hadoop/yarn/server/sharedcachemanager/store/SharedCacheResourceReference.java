begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.sharedcachemanager.store
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|sharedcachemanager
operator|.
name|store
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Evolving
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_comment
comment|/**  * This is an object that represents a reference to a shared cache resource.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Evolving
DECL|class|SharedCacheResourceReference
specifier|public
class|class
name|SharedCacheResourceReference
block|{
DECL|field|appId
specifier|private
specifier|final
name|ApplicationId
name|appId
decl_stmt|;
DECL|field|shortUserName
specifier|private
specifier|final
name|String
name|shortUserName
decl_stmt|;
comment|/**    * Create a resource reference.    *     * @param appId<code>ApplicationId</code> that is referencing a resource.    * @param shortUserName<code>ShortUserName</code> of the user that created    *          the reference.    */
DECL|method|SharedCacheResourceReference (ApplicationId appId, String shortUserName)
specifier|public
name|SharedCacheResourceReference
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|shortUserName
parameter_list|)
block|{
name|this
operator|.
name|appId
operator|=
name|appId
expr_stmt|;
name|this
operator|.
name|shortUserName
operator|=
name|shortUserName
expr_stmt|;
block|}
DECL|method|getAppId ()
specifier|public
name|ApplicationId
name|getAppId
parameter_list|()
block|{
return|return
name|this
operator|.
name|appId
return|;
block|}
DECL|method|getShortUserName ()
specifier|public
name|String
name|getShortUserName
parameter_list|()
block|{
return|return
name|this
operator|.
name|shortUserName
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|appId
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|appId
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|shortUserName
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|shortUserName
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|SharedCacheResourceReference
name|other
init|=
operator|(
name|SharedCacheResourceReference
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|appId
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|appId
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|appId
operator|.
name|equals
argument_list|(
name|other
operator|.
name|appId
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|shortUserName
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|shortUserName
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|shortUserName
operator|.
name|equals
argument_list|(
name|other
operator|.
name|shortUserName
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

