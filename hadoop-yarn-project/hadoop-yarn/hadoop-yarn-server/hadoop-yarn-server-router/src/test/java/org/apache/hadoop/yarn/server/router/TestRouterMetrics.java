begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|router
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class validates the correctness of Router Federation Interceptor  * Metrics.  */
end_comment

begin_class
DECL|class|TestRouterMetrics
specifier|public
class|class
name|TestRouterMetrics
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRouterMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// All the operations in the bad subcluster failed.
DECL|field|badSubCluster
specifier|private
name|MockBadSubCluster
name|badSubCluster
init|=
operator|new
name|MockBadSubCluster
argument_list|()
decl_stmt|;
comment|// All the operations in the bad subcluster succeed.
DECL|field|goodSubCluster
specifier|private
name|MockGoodSubCluster
name|goodSubCluster
init|=
operator|new
name|MockGoodSubCluster
argument_list|()
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|static
name|RouterMetrics
name|metrics
init|=
name|RouterMetrics
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Test: aggregate metrics are initialized correctly"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getNumSucceededAppsCreated
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getNumSucceededAppsSubmitted
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getNumSucceededAppsKilled
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getNumSucceededAppsRetrieved
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getAppsFailedCreated
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getAppsFailedSubmitted
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getAppsFailedKilled
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getAppsFailedRetrieved
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Test: aggregate metrics are updated correctly"
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of the metric: Created Apps    * successfully.    */
annotation|@
name|Test
DECL|method|testSucceededAppsCreated ()
specifier|public
name|void
name|testSucceededAppsCreated
parameter_list|()
block|{
name|long
name|totalGoodBefore
init|=
name|metrics
operator|.
name|getNumSucceededAppsCreated
argument_list|()
decl_stmt|;
name|goodSubCluster
operator|.
name|getNewApplication
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totalGoodBefore
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getNumSucceededAppsCreated
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|metrics
operator|.
name|getLatencySucceededAppsCreated
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|goodSubCluster
operator|.
name|getNewApplication
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totalGoodBefore
operator|+
literal|2
argument_list|,
name|metrics
operator|.
name|getNumSucceededAppsCreated
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|150
argument_list|,
name|metrics
operator|.
name|getLatencySucceededAppsCreated
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of the metric: Failed to create Apps.    */
annotation|@
name|Test
DECL|method|testAppsFailedCreated ()
specifier|public
name|void
name|testAppsFailedCreated
parameter_list|()
block|{
name|long
name|totalBadbefore
init|=
name|metrics
operator|.
name|getAppsFailedCreated
argument_list|()
decl_stmt|;
name|badSubCluster
operator|.
name|getNewApplication
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totalBadbefore
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getAppsFailedCreated
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of the metric: Submitted Apps    * successfully.    */
annotation|@
name|Test
DECL|method|testSucceededAppsSubmitted ()
specifier|public
name|void
name|testSucceededAppsSubmitted
parameter_list|()
block|{
name|long
name|totalGoodBefore
init|=
name|metrics
operator|.
name|getNumSucceededAppsSubmitted
argument_list|()
decl_stmt|;
name|goodSubCluster
operator|.
name|submitApplication
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totalGoodBefore
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getNumSucceededAppsSubmitted
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|metrics
operator|.
name|getLatencySucceededAppsSubmitted
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|goodSubCluster
operator|.
name|submitApplication
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totalGoodBefore
operator|+
literal|2
argument_list|,
name|metrics
operator|.
name|getNumSucceededAppsSubmitted
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|150
argument_list|,
name|metrics
operator|.
name|getLatencySucceededAppsSubmitted
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of the metric: Failed to submit Apps.    */
annotation|@
name|Test
DECL|method|testAppsFailedSubmitted ()
specifier|public
name|void
name|testAppsFailedSubmitted
parameter_list|()
block|{
name|long
name|totalBadbefore
init|=
name|metrics
operator|.
name|getAppsFailedSubmitted
argument_list|()
decl_stmt|;
name|badSubCluster
operator|.
name|submitApplication
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totalBadbefore
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getAppsFailedSubmitted
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of the metric: Killed Apps    * successfully.    */
annotation|@
name|Test
DECL|method|testSucceededAppsKilled ()
specifier|public
name|void
name|testSucceededAppsKilled
parameter_list|()
block|{
name|long
name|totalGoodBefore
init|=
name|metrics
operator|.
name|getNumSucceededAppsKilled
argument_list|()
decl_stmt|;
name|goodSubCluster
operator|.
name|forceKillApplication
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totalGoodBefore
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getNumSucceededAppsKilled
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|metrics
operator|.
name|getLatencySucceededAppsKilled
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|goodSubCluster
operator|.
name|forceKillApplication
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totalGoodBefore
operator|+
literal|2
argument_list|,
name|metrics
operator|.
name|getNumSucceededAppsKilled
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|150
argument_list|,
name|metrics
operator|.
name|getLatencySucceededAppsKilled
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of the metric: Failed to kill Apps.    */
annotation|@
name|Test
DECL|method|testAppsFailedKilled ()
specifier|public
name|void
name|testAppsFailedKilled
parameter_list|()
block|{
name|long
name|totalBadbefore
init|=
name|metrics
operator|.
name|getAppsFailedKilled
argument_list|()
decl_stmt|;
name|badSubCluster
operator|.
name|forceKillApplication
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totalBadbefore
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getAppsFailedKilled
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of the metric: Retrieved Apps    * successfully.    */
annotation|@
name|Test
DECL|method|testSucceededAppsReport ()
specifier|public
name|void
name|testSucceededAppsReport
parameter_list|()
block|{
name|long
name|totalGoodBefore
init|=
name|metrics
operator|.
name|getNumSucceededAppsRetrieved
argument_list|()
decl_stmt|;
name|goodSubCluster
operator|.
name|getApplicationReport
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totalGoodBefore
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getNumSucceededAppsRetrieved
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|metrics
operator|.
name|getLatencySucceededGetAppReport
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|goodSubCluster
operator|.
name|getApplicationReport
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totalGoodBefore
operator|+
literal|2
argument_list|,
name|metrics
operator|.
name|getNumSucceededAppsRetrieved
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|150
argument_list|,
name|metrics
operator|.
name|getLatencySucceededGetAppReport
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of the metric: Failed to retrieve Apps.    */
annotation|@
name|Test
DECL|method|testAppsReportFailed ()
specifier|public
name|void
name|testAppsReportFailed
parameter_list|()
block|{
name|long
name|totalBadbefore
init|=
name|metrics
operator|.
name|getAppsFailedRetrieved
argument_list|()
decl_stmt|;
name|badSubCluster
operator|.
name|getApplicationReport
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totalBadbefore
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getAppsFailedRetrieved
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Records failures for all calls
DECL|class|MockBadSubCluster
specifier|private
class|class
name|MockBadSubCluster
block|{
DECL|method|getNewApplication ()
specifier|public
name|void
name|getNewApplication
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Mocked: failed getNewApplication call"
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incrAppsFailedCreated
argument_list|()
expr_stmt|;
block|}
DECL|method|submitApplication ()
specifier|public
name|void
name|submitApplication
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Mocked: failed submitApplication call"
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incrAppsFailedSubmitted
argument_list|()
expr_stmt|;
block|}
DECL|method|forceKillApplication ()
specifier|public
name|void
name|forceKillApplication
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Mocked: failed forceKillApplication call"
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incrAppsFailedKilled
argument_list|()
expr_stmt|;
block|}
DECL|method|getApplicationReport ()
specifier|public
name|void
name|getApplicationReport
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Mocked: failed getApplicationReport call"
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incrAppsFailedRetrieved
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Records successes for all calls
DECL|class|MockGoodSubCluster
specifier|private
class|class
name|MockGoodSubCluster
block|{
DECL|method|getNewApplication (long duration)
specifier|public
name|void
name|getNewApplication
parameter_list|(
name|long
name|duration
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Mocked: successful getNewApplication call with duration {}"
argument_list|,
name|duration
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|succeededAppsCreated
argument_list|(
name|duration
argument_list|)
expr_stmt|;
block|}
DECL|method|submitApplication (long duration)
specifier|public
name|void
name|submitApplication
parameter_list|(
name|long
name|duration
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Mocked: successful submitApplication call with duration {}"
argument_list|,
name|duration
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|succeededAppsSubmitted
argument_list|(
name|duration
argument_list|)
expr_stmt|;
block|}
DECL|method|forceKillApplication (long duration)
specifier|public
name|void
name|forceKillApplication
parameter_list|(
name|long
name|duration
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Mocked: successful forceKillApplication call with duration {}"
argument_list|,
name|duration
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|succeededAppsKilled
argument_list|(
name|duration
argument_list|)
expr_stmt|;
block|}
DECL|method|getApplicationReport (long duration)
specifier|public
name|void
name|getApplicationReport
parameter_list|(
name|long
name|duration
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Mocked: successful getApplicationReport call with duration {}"
argument_list|,
name|duration
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|succeededAppsRetrieved
argument_list|(
name|duration
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

