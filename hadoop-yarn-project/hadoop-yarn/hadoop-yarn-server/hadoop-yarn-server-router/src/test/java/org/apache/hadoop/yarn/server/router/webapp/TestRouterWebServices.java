begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.router.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|router
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ActivitiesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppActivitiesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppAttemptsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppTimeoutInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppTimeoutsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ApplicationStatisticsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ClusterMetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|LabelsToNodesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodeLabelsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodeToLabelsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|SchedulerTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|router
operator|.
name|webapp
operator|.
name|RouterWebServices
operator|.
name|RequestInterceptorChainWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ContainersInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test class to validate the WebService interceptor model inside the Router.  */
end_comment

begin_class
DECL|class|TestRouterWebServices
specifier|public
class|class
name|TestRouterWebServices
extends|extends
name|BaseRouterWebServicesTest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRouterWebServices
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|user
specifier|private
name|String
name|user
init|=
literal|"test1"
decl_stmt|;
comment|/**    * Test that all requests get forwarded to the last interceptor in the chain    * get back the responses.    */
annotation|@
name|Test
DECL|method|testRouterWebServicesE2E ()
specifier|public
name|void
name|testRouterWebServicesE2E
parameter_list|()
throws|throws
name|Exception
block|{
name|ClusterInfo
name|clusterInfo
init|=
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|clusterInfo
argument_list|)
expr_stmt|;
name|ClusterInfo
name|clusterInfo2
init|=
name|getClusterInfo
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|clusterInfo2
argument_list|)
expr_stmt|;
name|ClusterMetricsInfo
name|clusterMetricsInfo
init|=
name|getClusterMetricsInfo
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|clusterMetricsInfo
argument_list|)
expr_stmt|;
name|SchedulerTypeInfo
name|schedulerTypeInfo
init|=
name|getSchedulerInfo
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|schedulerTypeInfo
argument_list|)
expr_stmt|;
name|String
name|dumpResult
init|=
name|dumpSchedulerLogs
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|dumpResult
argument_list|)
expr_stmt|;
name|NodesInfo
name|nodesInfo
init|=
name|getNodes
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|nodesInfo
argument_list|)
expr_stmt|;
name|NodeInfo
name|nodeInfo
init|=
name|getNode
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|nodeInfo
argument_list|)
expr_stmt|;
name|AppsInfo
name|appsInfo
init|=
name|getApps
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appsInfo
argument_list|)
expr_stmt|;
name|ActivitiesInfo
name|activitiesInfo
init|=
name|getActivities
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|activitiesInfo
argument_list|)
expr_stmt|;
name|AppActivitiesInfo
name|appActiviesInfo
init|=
name|getAppActivities
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appActiviesInfo
argument_list|)
expr_stmt|;
name|ApplicationStatisticsInfo
name|applicationStatisticsInfo
init|=
name|getAppStatistics
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|applicationStatisticsInfo
argument_list|)
expr_stmt|;
name|AppInfo
name|appInfo
init|=
name|getApp
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appInfo
argument_list|)
expr_stmt|;
name|AppState
name|appState
init|=
name|getAppState
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appState
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|updateAppState
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|NodeToLabelsInfo
name|nodeToLabelsInfo
init|=
name|getNodeToLabels
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|nodeToLabelsInfo
argument_list|)
expr_stmt|;
name|LabelsToNodesInfo
name|labelsToNodesInfo
init|=
name|getLabelsToNodes
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|labelsToNodesInfo
argument_list|)
expr_stmt|;
name|Response
name|response2
init|=
name|replaceLabelsOnNodes
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response2
argument_list|)
expr_stmt|;
name|Response
name|response3
init|=
name|replaceLabelsOnNode
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response3
argument_list|)
expr_stmt|;
name|NodeLabelsInfo
name|nodeLabelsInfo
init|=
name|getClusterNodeLabels
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|nodeLabelsInfo
argument_list|)
expr_stmt|;
name|Response
name|response4
init|=
name|addToClusterNodeLabels
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response4
argument_list|)
expr_stmt|;
name|Response
name|response5
init|=
name|removeFromCluserNodeLabels
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response5
argument_list|)
expr_stmt|;
name|NodeLabelsInfo
name|nodeLabelsInfo2
init|=
name|getLabelsOnNode
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|nodeLabelsInfo2
argument_list|)
expr_stmt|;
name|AppPriority
name|appPriority
init|=
name|getAppPriority
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appPriority
argument_list|)
expr_stmt|;
name|Response
name|response6
init|=
name|updateApplicationPriority
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response6
argument_list|)
expr_stmt|;
name|AppQueue
name|appQueue
init|=
name|getAppQueue
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appQueue
argument_list|)
expr_stmt|;
name|Response
name|response7
init|=
name|updateAppQueue
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response7
argument_list|)
expr_stmt|;
name|Response
name|response8
init|=
name|createNewApplication
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response8
argument_list|)
expr_stmt|;
name|Response
name|response9
init|=
name|submitApplication
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response9
argument_list|)
expr_stmt|;
name|Response
name|response10
init|=
name|postDelegationToken
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response10
argument_list|)
expr_stmt|;
name|Response
name|response11
init|=
name|postDelegationTokenExpiration
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response11
argument_list|)
expr_stmt|;
name|Response
name|response12
init|=
name|cancelDelegationToken
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response12
argument_list|)
expr_stmt|;
name|Response
name|response13
init|=
name|createNewReservation
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response13
argument_list|)
expr_stmt|;
name|Response
name|response14
init|=
name|submitReservation
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response14
argument_list|)
expr_stmt|;
name|Response
name|response15
init|=
name|updateReservation
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response15
argument_list|)
expr_stmt|;
name|Response
name|response16
init|=
name|deleteReservation
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response16
argument_list|)
expr_stmt|;
name|Response
name|response17
init|=
name|listReservation
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response17
argument_list|)
expr_stmt|;
name|AppTimeoutInfo
name|appTimeoutInfo
init|=
name|getAppTimeout
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appTimeoutInfo
argument_list|)
expr_stmt|;
name|AppTimeoutsInfo
name|appTimeoutsInfo
init|=
name|getAppTimeouts
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appTimeoutsInfo
argument_list|)
expr_stmt|;
name|Response
name|response18
init|=
name|updateApplicationTimeout
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response18
argument_list|)
expr_stmt|;
name|AppAttemptsInfo
name|appAttemptsInfo
init|=
name|getAppAttempts
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appAttemptsInfo
argument_list|)
expr_stmt|;
name|AppAttemptInfo
name|appAttemptInfo
init|=
name|getAppAttempt
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appAttemptInfo
argument_list|)
expr_stmt|;
name|ContainersInfo
name|containersInfo
init|=
name|getContainers
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|containersInfo
argument_list|)
expr_stmt|;
name|ContainerInfo
name|containerInfo
init|=
name|getContainer
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|containerInfo
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests if the pipeline is created properly.    */
annotation|@
name|Test
DECL|method|testRequestInterceptorChainCreation ()
specifier|public
name|void
name|testRequestInterceptorChainCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|RESTRequestInterceptor
name|root
init|=
name|super
operator|.
name|getRouterWebServices
argument_list|()
operator|.
name|createRequestInterceptorChain
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
comment|// The current pipeline is:
comment|// PassThroughRESTRequestInterceptor - index = 0
comment|// PassThroughRESTRequestInterceptor - index = 1
comment|// PassThroughRESTRequestInterceptor - index = 2
comment|// MockRESTRequestInterceptor - index = 3
switch|switch
condition|(
name|index
condition|)
block|{
case|case
literal|0
case|:
comment|// Fall to the next case
case|case
literal|1
case|:
comment|// Fall to the next case
case|case
literal|2
case|:
comment|// If index is equal to 0,1 or 2 we fall in this check
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PassThroughRESTRequestInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|root
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|Assert
operator|.
name|assertEquals
argument_list|(
name|MockRESTRequestInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|root
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|root
operator|=
name|root
operator|.
name|getNextInterceptor
argument_list|()
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The number of interceptors in chain does not match"
argument_list|,
literal|4
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test if the different chains for users are generated, and LRU cache is    * working as expected.    */
annotation|@
name|Test
DECL|method|testUsersChainMapWithLRUCache ()
specifier|public
name|void
name|testUsersChainMapWithLRUCache
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|getInterceptorChain
argument_list|(
literal|"test1"
argument_list|)
expr_stmt|;
name|getInterceptorChain
argument_list|(
literal|"test2"
argument_list|)
expr_stmt|;
name|getInterceptorChain
argument_list|(
literal|"test3"
argument_list|)
expr_stmt|;
name|getInterceptorChain
argument_list|(
literal|"test4"
argument_list|)
expr_stmt|;
name|getInterceptorChain
argument_list|(
literal|"test5"
argument_list|)
expr_stmt|;
name|getInterceptorChain
argument_list|(
literal|"test6"
argument_list|)
expr_stmt|;
name|getInterceptorChain
argument_list|(
literal|"test7"
argument_list|)
expr_stmt|;
name|getInterceptorChain
argument_list|(
literal|"test8"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RequestInterceptorChainWrapper
argument_list|>
name|pipelines
init|=
name|getRouterWebServices
argument_list|()
operator|.
name|getPipelines
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|pipelines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|getInterceptorChain
argument_list|(
literal|"test9"
argument_list|)
expr_stmt|;
name|getInterceptorChain
argument_list|(
literal|"test10"
argument_list|)
expr_stmt|;
name|getInterceptorChain
argument_list|(
literal|"test1"
argument_list|)
expr_stmt|;
name|getInterceptorChain
argument_list|(
literal|"test11"
argument_list|)
expr_stmt|;
comment|// The cache max size is defined in TEST_MAX_CACHE_SIZE
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|pipelines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RequestInterceptorChainWrapper
name|chain
init|=
name|pipelines
operator|.
name|get
argument_list|(
literal|"test1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"test1 should not be evicted"
argument_list|,
name|chain
argument_list|)
expr_stmt|;
name|chain
operator|=
name|pipelines
operator|.
name|get
argument_list|(
literal|"test2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"test2 should have been evicted"
argument_list|,
name|chain
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates if the RESTRequestInterceptor chain for the user    * can build and init correctly when a multi-client process begins to    * request RouterWebServices for the same user simultaneously.    */
annotation|@
name|Test
DECL|method|testWebPipelineConcurrent ()
specifier|public
name|void
name|testWebPipelineConcurrent
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|String
name|user
init|=
literal|"test1"
decl_stmt|;
comment|/*      * ClientTestThread is a thread to simulate a client request to get a      * RESTRequestInterceptor for the user.      */
class|class
name|ClientTestThread
extends|extends
name|Thread
block|{
specifier|private
name|RESTRequestInterceptor
name|interceptor
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|interceptor
operator|=
name|pipeline
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|RESTRequestInterceptor
name|pipeline
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user
argument_list|)
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|RESTRequestInterceptor
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RESTRequestInterceptor
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|RequestInterceptorChainWrapper
name|wrapper
init|=
name|getInterceptorChain
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|RESTRequestInterceptor
name|interceptor
init|=
name|wrapper
operator|.
name|getRootInterceptor
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|interceptor
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"init web interceptor success for user"
operator|+
name|user
argument_list|)
expr_stmt|;
return|return
name|interceptor
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
comment|/*      * We start the first thread. It should not finish initing a chainWrapper      * before the other thread starts. In this way, the second thread can      * init at the same time of the first one. In the end, we validate that      * the 2 threads get the same chainWrapper without going into error.      */
name|ClientTestThread
name|client1
init|=
operator|new
name|ClientTestThread
argument_list|()
decl_stmt|;
name|ClientTestThread
name|client2
init|=
operator|new
name|ClientTestThread
argument_list|()
decl_stmt|;
name|client1
operator|.
name|start
argument_list|()
expr_stmt|;
name|client2
operator|.
name|start
argument_list|()
expr_stmt|;
name|client1
operator|.
name|join
argument_list|()
expr_stmt|;
name|client2
operator|.
name|join
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client1
operator|.
name|interceptor
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client2
operator|.
name|interceptor
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|client1
operator|.
name|interceptor
operator|==
name|client2
operator|.
name|interceptor
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

