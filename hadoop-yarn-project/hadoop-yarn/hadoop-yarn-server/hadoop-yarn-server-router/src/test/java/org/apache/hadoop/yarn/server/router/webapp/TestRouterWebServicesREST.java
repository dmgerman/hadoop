begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.router.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|router
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|RMWSConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|RMWebServiceProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ActivitiesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppActivitiesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppAttemptsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppTimeoutInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppTimeoutsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ApplicationStatisticsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ApplicationSubmissionContextInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ClusterMetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|LabelsToNodesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NewApplication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NewReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodeLabelsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodeToLabelsEntryList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodeToLabelsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ReservationDeleteRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ReservationSubmissionRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ReservationUpdateRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|SchedulerTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|router
operator|.
name|Router
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|WebServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ContainersInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|util
operator|.
name|WebAppUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientHandlerException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|NotThreadSafe
import|;
end_import

begin_comment
comment|/**  * This test validate E2E the correctness of the RouterWebServices. It starts  * Router, RM and NM in 3 different processes to avoid servlet conflicts. Each  * test creates a REST call to Router and validate that the operation complete  * successfully.  */
end_comment

begin_class
annotation|@
name|NotThreadSafe
DECL|class|TestRouterWebServicesREST
specifier|public
class|class
name|TestRouterWebServicesREST
block|{
DECL|field|userName
specifier|private
specifier|static
name|String
name|userName
init|=
literal|"test"
decl_stmt|;
DECL|field|rm
specifier|private
specifier|static
name|JavaProcess
name|rm
decl_stmt|;
DECL|field|nm
specifier|private
specifier|static
name|JavaProcess
name|nm
decl_stmt|;
DECL|field|router
specifier|private
specifier|static
name|JavaProcess
name|router
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|STATUS_OK
specifier|private
specifier|static
specifier|final
name|int
name|STATUS_OK
init|=
literal|200
decl_stmt|;
DECL|field|STATUS_ACCEPTED
specifier|private
specifier|static
specifier|final
name|int
name|STATUS_ACCEPTED
init|=
literal|202
decl_stmt|;
DECL|field|STATUS_BADREQUEST
specifier|private
specifier|static
specifier|final
name|int
name|STATUS_BADREQUEST
init|=
literal|400
decl_stmt|;
DECL|field|STATUS_ERROR
specifier|private
specifier|static
specifier|final
name|int
name|STATUS_ERROR
init|=
literal|500
decl_stmt|;
comment|/**    * Wait until the webservice is up and running.    */
DECL|method|waitWebAppRunning (String address, String path)
specifier|private
specifier|static
name|void
name|waitWebAppRunning
parameter_list|(
name|String
name|address
parameter_list|,
name|String
name|path
parameter_list|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|Client
name|clientToRouter
init|=
name|Client
operator|.
name|create
argument_list|()
decl_stmt|;
name|WebResource
name|toRouter
init|=
name|clientToRouter
operator|.
name|resource
argument_list|(
name|address
argument_list|)
operator|.
name|path
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|ClientResponse
name|response
init|=
name|toRouter
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
name|STATUS_OK
condition|)
block|{
comment|// process is up and running
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|ClientHandlerException
name|e
parameter_list|)
block|{
comment|// process is not up and running
continue|continue;
block|}
block|}
block|}
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|rm
operator|=
operator|new
name|JavaProcess
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|router
operator|=
operator|new
name|JavaProcess
argument_list|(
name|Router
operator|.
name|class
argument_list|)
expr_stmt|;
name|nm
operator|=
operator|new
name|JavaProcess
argument_list|(
name|NodeManager
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// The tests cannot start if all the service are not up and running.
name|waitWebAppRunning
argument_list|(
name|WebAppUtils
operator|.
name|getRMWebAppURLWithScheme
argument_list|(
name|conf
argument_list|)
argument_list|,
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
argument_list|)
expr_stmt|;
name|waitWebAppRunning
argument_list|(
name|WebAppUtils
operator|.
name|getRouterWebAppURLWithScheme
argument_list|(
name|conf
argument_list|)
argument_list|,
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
argument_list|)
expr_stmt|;
name|waitWebAppRunning
argument_list|(
literal|"http://"
operator|+
name|WebAppUtils
operator|.
name|getNMWebAppURLWithoutScheme
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|"/ws/v1/node"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|stop ()
specifier|public
specifier|static
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|nm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|router
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**    * Performs 2 GET calls one to RM and the one to Router. In positive case, it    * returns the 2 answers in a list.    */
DECL|method|performGetCalls (String path, Class<T> returnType, String queryName, String queryValue)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|performGetCalls
parameter_list|(
name|String
name|path
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|returnType
parameter_list|,
name|String
name|queryName
parameter_list|,
name|String
name|queryValue
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Client
name|clientToRouter
init|=
name|Client
operator|.
name|create
argument_list|()
decl_stmt|;
name|WebResource
name|toRouter
init|=
name|clientToRouter
operator|.
name|resource
argument_list|(
name|WebAppUtils
operator|.
name|getRouterWebAppURLWithScheme
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|path
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Client
name|clientToRM
init|=
name|Client
operator|.
name|create
argument_list|()
decl_stmt|;
name|WebResource
name|toRM
init|=
name|clientToRM
operator|.
name|resource
argument_list|(
name|WebAppUtils
operator|.
name|getRMWebAppURLWithScheme
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|path
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Builder
name|toRouterBuilder
decl_stmt|;
name|Builder
name|toRMBuilder
decl_stmt|;
if|if
condition|(
name|queryValue
operator|!=
literal|null
operator|&&
name|queryName
operator|!=
literal|null
condition|)
block|{
name|toRouterBuilder
operator|=
name|toRouter
operator|.
name|queryParam
argument_list|(
name|queryName
argument_list|,
name|queryValue
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
expr_stmt|;
name|toRMBuilder
operator|=
name|toRM
operator|.
name|queryParam
argument_list|(
name|queryName
argument_list|,
name|queryValue
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toRouterBuilder
operator|=
name|toRouter
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
expr_stmt|;
name|toRMBuilder
operator|=
name|toRM
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
expr_stmt|;
block|}
return|return
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|userName
argument_list|)
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|List
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ClientResponse
name|response
init|=
name|toRouterBuilder
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|ClientResponse
name|response2
init|=
name|toRMBuilder
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
name|STATUS_OK
operator|&&
name|response2
operator|.
name|getStatus
argument_list|()
operator|==
name|STATUS_OK
condition|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|responses
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
name|responses
operator|.
name|add
argument_list|(
name|response
operator|.
name|getEntity
argument_list|(
name|returnType
argument_list|)
argument_list|)
expr_stmt|;
name|responses
operator|.
name|add
argument_list|(
name|response2
operator|.
name|getEntity
argument_list|(
name|returnType
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|responses
return|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Performs a POST/PUT/DELETE call to Router and returns the ClientResponse.    */
DECL|method|performCall (String webAddress, String queryKey, String queryValue, Object context, HTTPMethods method)
specifier|private
specifier|static
name|ClientResponse
name|performCall
parameter_list|(
name|String
name|webAddress
parameter_list|,
name|String
name|queryKey
parameter_list|,
name|String
name|queryValue
parameter_list|,
name|Object
name|context
parameter_list|,
name|HTTPMethods
name|method
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|userName
argument_list|)
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|ClientResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClientResponse
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Client
name|clientToRouter
init|=
name|Client
operator|.
name|create
argument_list|()
decl_stmt|;
name|WebResource
name|toRouter
init|=
name|clientToRouter
operator|.
name|resource
argument_list|(
name|WebAppUtils
operator|.
name|getRouterWebAppURLWithScheme
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|path
argument_list|(
name|webAddress
argument_list|)
decl_stmt|;
name|WebResource
name|toRouterWR
decl_stmt|;
if|if
condition|(
name|queryKey
operator|!=
literal|null
operator|&&
name|queryValue
operator|!=
literal|null
condition|)
block|{
name|toRouterWR
operator|=
name|toRouter
operator|.
name|queryParam
argument_list|(
name|queryKey
argument_list|,
name|queryValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toRouterWR
operator|=
name|toRouter
expr_stmt|;
block|}
name|Builder
name|builder
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|builder
operator|=
name|toRouterWR
operator|.
name|entity
argument_list|(
name|context
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|builder
operator|=
name|builder
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|=
name|toRouter
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
block|}
name|ClientResponse
name|response
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|method
condition|)
block|{
case|case
name|DELETE
case|:
name|response
operator|=
name|builder
operator|.
name|delete
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
break|break;
case|case
name|POST
case|:
name|response
operator|=
name|builder
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
break|break;
case|case
name|PUT
case|:
name|response
operator|=
name|builder
operator|.
name|put
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|response
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * This test validates the correctness of {@link RMWebServiceProtocol#get()}    * inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testInfoXML ()
specifier|public
name|void
name|testInfoXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|List
argument_list|<
name|ClusterInfo
argument_list|>
name|responses
init|=
name|performGetCalls
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
argument_list|,
name|ClusterInfo
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ClusterInfo
name|routerResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ClusterInfo
name|rmResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|routerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rmResponse
operator|.
name|getRMVersion
argument_list|()
argument_list|,
name|routerResponse
operator|.
name|getRMVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#getClusterInfo()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testClusterInfoXML ()
specifier|public
name|void
name|testClusterInfoXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|List
argument_list|<
name|ClusterInfo
argument_list|>
name|responses
init|=
name|performGetCalls
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|INFO
argument_list|,
name|ClusterInfo
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ClusterInfo
name|routerResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ClusterInfo
name|rmResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|routerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rmResponse
operator|.
name|getRMVersion
argument_list|()
argument_list|,
name|routerResponse
operator|.
name|getRMVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#getClusterMetricsInfo()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testMetricsInfoXML ()
specifier|public
name|void
name|testMetricsInfoXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|List
argument_list|<
name|ClusterMetricsInfo
argument_list|>
name|responses
init|=
name|performGetCalls
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|METRICS
argument_list|,
name|ClusterMetricsInfo
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ClusterMetricsInfo
name|routerResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ClusterMetricsInfo
name|rmResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|routerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rmResponse
operator|.
name|getActiveNodes
argument_list|()
argument_list|,
name|routerResponse
operator|.
name|getActiveNodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#getSchedulerInfo()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testSchedulerInfoXML ()
specifier|public
name|void
name|testSchedulerInfoXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|List
argument_list|<
name|SchedulerTypeInfo
argument_list|>
name|responses
init|=
name|performGetCalls
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|SCHEDULER
argument_list|,
name|SchedulerTypeInfo
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SchedulerTypeInfo
name|routerResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SchedulerTypeInfo
name|rmResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|routerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rmResponse
operator|.
name|getSchedulerInfo
argument_list|()
operator|.
name|getSchedulerType
argument_list|()
argument_list|,
name|routerResponse
operator|.
name|getSchedulerInfo
argument_list|()
operator|.
name|getSchedulerType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#getNodes()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testNodesXML ()
specifier|public
name|void
name|testNodesXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|List
argument_list|<
name|NodesInfo
argument_list|>
name|responses
init|=
name|performGetCalls
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|NODES
argument_list|,
name|NodesInfo
operator|.
name|class
argument_list|,
name|RMWSConsts
operator|.
name|STATES
argument_list|,
literal|"LOST"
argument_list|)
decl_stmt|;
name|NodesInfo
name|routerResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|NodesInfo
name|rmResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|routerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rmResponse
operator|.
name|getNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|routerResponse
operator|.
name|getNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#getNode()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testNodeXML ()
specifier|public
name|void
name|testNodeXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|List
argument_list|<
name|NodeInfo
argument_list|>
name|responses
init|=
name|performGetCalls
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|NODES
operator|+
literal|"/"
operator|+
name|getNodeId
argument_list|()
argument_list|,
name|NodeInfo
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NodeInfo
name|routerResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|NodeInfo
name|rmResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|routerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rmResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|routerResponse
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#getActivities()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testActiviesXML ()
specifier|public
name|void
name|testActiviesXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|List
argument_list|<
name|ActivitiesInfo
argument_list|>
name|responses
init|=
name|performGetCalls
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|SCHEDULER_ACTIVITIES
argument_list|,
name|ActivitiesInfo
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ActivitiesInfo
name|routerResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ActivitiesInfo
name|rmResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|routerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmResponse
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#getAppActivities()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testAppActivitiesXML ()
specifier|public
name|void
name|testAppActivitiesXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|String
name|appId
init|=
name|submitApplication
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AppActivitiesInfo
argument_list|>
name|responses
init|=
name|performGetCalls
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|SCHEDULER_APP_ACTIVITIES
argument_list|,
name|AppActivitiesInfo
operator|.
name|class
argument_list|,
name|RMWSConsts
operator|.
name|APP_ID
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|AppActivitiesInfo
name|routerResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AppActivitiesInfo
name|rmResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|routerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmResponse
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#getAppStatistics()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testAppStatisticsXML ()
specifier|public
name|void
name|testAppStatisticsXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|submitApplication
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ApplicationStatisticsInfo
argument_list|>
name|responses
init|=
name|performGetCalls
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|APP_STATISTICS
argument_list|,
name|ApplicationStatisticsInfo
operator|.
name|class
argument_list|,
name|RMWSConsts
operator|.
name|STATES
argument_list|,
literal|"RUNNING"
argument_list|)
decl_stmt|;
name|ApplicationStatisticsInfo
name|routerResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ApplicationStatisticsInfo
name|rmResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|routerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rmResponse
operator|.
name|getStatItems
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|routerResponse
operator|.
name|getStatItems
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#dumpSchedulerLogs()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testDumpSchedulerLogsXML ()
specifier|public
name|void
name|testDumpSchedulerLogsXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
comment|// Test with a wrong HTTP method
name|ClientResponse
name|badResponse
init|=
name|performCall
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|SCHEDULER_LOGS
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|HTTPMethods
operator|.
name|PUT
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|STATUS_ERROR
argument_list|,
name|badResponse
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test with the correct HTTP method
name|ClientResponse
name|response
init|=
name|performCall
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|SCHEDULER_LOGS
argument_list|,
name|RMWSConsts
operator|.
name|TIME
argument_list|,
literal|"1"
argument_list|,
literal|null
argument_list|,
name|HTTPMethods
operator|.
name|POST
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
name|STATUS_BADREQUEST
condition|)
block|{
name|String
name|ci
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#createNewApplication()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testNewApplicationXML ()
specifier|public
name|void
name|testNewApplicationXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
comment|// Test with a wrong HTTP method
name|ClientResponse
name|badResponse
init|=
name|performCall
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|APPS_NEW_APPLICATION
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|HTTPMethods
operator|.
name|PUT
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|STATUS_ERROR
argument_list|,
name|badResponse
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test with the correct HTTP method
name|ClientResponse
name|response
init|=
name|performCall
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|APPS_NEW_APPLICATION
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|HTTPMethods
operator|.
name|POST
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
name|STATUS_OK
condition|)
block|{
name|NewApplication
name|ci
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|NewApplication
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#submitApplication()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testSubmitApplicationXML ()
specifier|public
name|void
name|testSubmitApplicationXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
comment|// Test with a wrong HTTP method
name|ClientResponse
name|badResponse
init|=
name|performCall
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|APPS
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|HTTPMethods
operator|.
name|PUT
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|STATUS_ERROR
argument_list|,
name|badResponse
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test with the correct HTTP method
name|ApplicationSubmissionContextInfo
name|context
init|=
operator|new
name|ApplicationSubmissionContextInfo
argument_list|()
decl_stmt|;
name|context
operator|.
name|setApplicationId
argument_list|(
name|getNewApplicationId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|performCall
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|APPS
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|context
argument_list|,
name|HTTPMethods
operator|.
name|POST
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
name|STATUS_ACCEPTED
condition|)
block|{
name|String
name|ci
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#getApps()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testAppsXML ()
specifier|public
name|void
name|testAppsXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|submitApplication
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|AppsInfo
argument_list|>
name|responses
init|=
name|performGetCalls
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|APPS
argument_list|,
name|AppsInfo
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AppsInfo
name|routerResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AppsInfo
name|rmResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|routerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rmResponse
operator|.
name|getApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|rmResponse
operator|.
name|getApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#getApp()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testAppXML ()
specifier|public
name|void
name|testAppXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|String
name|appId
init|=
name|submitApplication
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AppInfo
argument_list|>
name|responses
init|=
name|performGetCalls
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|APPS
operator|+
literal|"/"
operator|+
name|appId
argument_list|,
name|AppInfo
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AppInfo
name|routerResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AppInfo
name|rmResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|routerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rmResponse
operator|.
name|getAMHostHttpAddress
argument_list|()
argument_list|,
name|rmResponse
operator|.
name|getAMHostHttpAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#getAppAttempts()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testAppAttemptXML ()
specifier|public
name|void
name|testAppAttemptXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|String
name|appId
init|=
name|submitApplication
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AppAttemptsInfo
argument_list|>
name|responses
init|=
name|performGetCalls
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|APPS
operator|+
literal|"/"
operator|+
name|appId
operator|+
literal|"/"
operator|+
name|RMWSConsts
operator|.
name|ATTEMPTS
argument_list|,
name|AppAttemptsInfo
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AppAttemptsInfo
name|routerResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AppAttemptsInfo
name|rmResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|routerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rmResponse
operator|.
name|getAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|rmResponse
operator|.
name|getAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#getAppState()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testAppStateXML ()
specifier|public
name|void
name|testAppStateXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|String
name|appId
init|=
name|submitApplication
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AppState
argument_list|>
name|responses
init|=
name|performGetCalls
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|APPS
operator|+
literal|"/"
operator|+
name|appId
operator|+
literal|"/"
operator|+
name|RMWSConsts
operator|.
name|STATE
argument_list|,
name|AppState
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AppState
name|routerResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AppState
name|rmResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|routerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rmResponse
operator|.
name|getState
argument_list|()
argument_list|,
name|rmResponse
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#updateAppState()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testUpdateAppStateXML ()
specifier|public
name|void
name|testUpdateAppStateXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|String
name|appId
init|=
name|submitApplication
argument_list|()
decl_stmt|;
comment|// Test with a wrong HTTP method
name|ClientResponse
name|badResponse
init|=
name|performCall
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|APPS
operator|+
literal|"/"
operator|+
name|appId
operator|+
literal|"/"
operator|+
name|RMWSConsts
operator|.
name|STATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|HTTPMethods
operator|.
name|POST
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|STATUS_ERROR
argument_list|,
name|badResponse
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test with the correct HTTP method
name|AppState
name|appState
init|=
operator|new
name|AppState
argument_list|(
literal|"KILLED"
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|performCall
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|APPS
operator|+
literal|"/"
operator|+
name|appId
operator|+
literal|"/"
operator|+
name|RMWSConsts
operator|.
name|STATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|appState
argument_list|,
name|HTTPMethods
operator|.
name|PUT
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
name|STATUS_ACCEPTED
condition|)
block|{
name|AppState
name|ci
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|AppState
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#getAppPriority()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testAppPriorityXML ()
specifier|public
name|void
name|testAppPriorityXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|String
name|appId
init|=
name|submitApplication
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AppPriority
argument_list|>
name|responses
init|=
name|performGetCalls
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|APPS
operator|+
literal|"/"
operator|+
name|appId
operator|+
literal|"/"
operator|+
name|RMWSConsts
operator|.
name|PRIORITY
argument_list|,
name|AppPriority
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AppPriority
name|routerResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AppPriority
name|rmResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|routerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rmResponse
operator|.
name|getPriority
argument_list|()
argument_list|,
name|rmResponse
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#updateApplicationPriority()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testUpdateAppPriorityXML ()
specifier|public
name|void
name|testUpdateAppPriorityXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|String
name|appId
init|=
name|submitApplication
argument_list|()
decl_stmt|;
comment|// Test with a wrong HTTP method
name|ClientResponse
name|badResponse
init|=
name|performCall
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|APPS
operator|+
literal|"/"
operator|+
name|appId
operator|+
literal|"/"
operator|+
name|RMWSConsts
operator|.
name|PRIORITY
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|HTTPMethods
operator|.
name|POST
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|STATUS_ERROR
argument_list|,
name|badResponse
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test with the correct HTTP method
name|AppPriority
name|appPriority
init|=
operator|new
name|AppPriority
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|performCall
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|APPS
operator|+
literal|"/"
operator|+
name|appId
operator|+
literal|"/"
operator|+
name|RMWSConsts
operator|.
name|PRIORITY
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|appPriority
argument_list|,
name|HTTPMethods
operator|.
name|PUT
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
name|STATUS_OK
condition|)
block|{
name|AppPriority
name|ci
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|AppPriority
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#getAppQueue()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testAppQueueXML ()
specifier|public
name|void
name|testAppQueueXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|String
name|appId
init|=
name|submitApplication
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AppQueue
argument_list|>
name|responses
init|=
name|performGetCalls
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|APPS
operator|+
literal|"/"
operator|+
name|appId
operator|+
literal|"/"
operator|+
name|RMWSConsts
operator|.
name|QUEUE
argument_list|,
name|AppQueue
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AppQueue
name|routerResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AppQueue
name|rmResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|routerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rmResponse
operator|.
name|getQueue
argument_list|()
argument_list|,
name|rmResponse
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#updateAppQueue()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testUpdateAppQueueXML ()
specifier|public
name|void
name|testUpdateAppQueueXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|String
name|appId
init|=
name|submitApplication
argument_list|()
decl_stmt|;
comment|// Test with a wrong HTTP method
name|ClientResponse
name|badResponse
init|=
name|performCall
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|APPS
operator|+
literal|"/"
operator|+
name|appId
operator|+
literal|"/"
operator|+
name|RMWSConsts
operator|.
name|QUEUE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|HTTPMethods
operator|.
name|POST
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|STATUS_ERROR
argument_list|,
name|badResponse
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test with the correct HTTP method
name|AppQueue
name|appQueue
init|=
operator|new
name|AppQueue
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|performCall
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|APPS
operator|+
literal|"/"
operator|+
name|appId
operator|+
literal|"/"
operator|+
name|RMWSConsts
operator|.
name|QUEUE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|appQueue
argument_list|,
name|HTTPMethods
operator|.
name|PUT
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
name|STATUS_OK
condition|)
block|{
name|AppQueue
name|ci
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|AppQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#getAppTimeouts()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testAppTimeoutsXML ()
specifier|public
name|void
name|testAppTimeoutsXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|String
name|appId
init|=
name|submitApplication
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AppTimeoutsInfo
argument_list|>
name|responses
init|=
name|performGetCalls
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|APPS
operator|+
literal|"/"
operator|+
name|appId
operator|+
literal|"/"
operator|+
name|RMWSConsts
operator|.
name|TIMEOUTS
argument_list|,
name|AppTimeoutsInfo
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AppTimeoutsInfo
name|routerResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AppTimeoutsInfo
name|rmResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|routerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rmResponse
operator|.
name|getAppTimeouts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|rmResponse
operator|.
name|getAppTimeouts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#getAppTimeout()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testAppTimeoutXML ()
specifier|public
name|void
name|testAppTimeoutXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|String
name|appId
init|=
name|submitApplication
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AppTimeoutInfo
argument_list|>
name|responses
init|=
name|performGetCalls
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|APPS
operator|+
literal|"/"
operator|+
name|appId
operator|+
literal|"/"
operator|+
name|RMWSConsts
operator|.
name|TIMEOUTS
operator|+
literal|"/"
operator|+
literal|"LIFETIME"
argument_list|,
name|AppTimeoutInfo
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AppTimeoutInfo
name|routerResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AppTimeoutInfo
name|rmResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|routerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rmResponse
operator|.
name|getExpireTime
argument_list|()
argument_list|,
name|rmResponse
operator|.
name|getExpireTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#updateApplicationTimeout()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testUpdateAppTimeoutsXML ()
specifier|public
name|void
name|testUpdateAppTimeoutsXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|String
name|appId
init|=
name|submitApplication
argument_list|()
decl_stmt|;
comment|// Test with a wrong HTTP method
name|ClientResponse
name|badResponse
init|=
name|performCall
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|APPS
operator|+
literal|"/"
operator|+
name|appId
operator|+
literal|"/"
operator|+
name|RMWSConsts
operator|.
name|TIMEOUT
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|HTTPMethods
operator|.
name|POST
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|STATUS_ERROR
argument_list|,
name|badResponse
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test with the correct HTTP method
comment|// Create a bad request
name|AppTimeoutInfo
name|appTimeoutInfo
init|=
operator|new
name|AppTimeoutInfo
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|performCall
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|APPS
operator|+
literal|"/"
operator|+
name|appId
operator|+
literal|"/"
operator|+
name|RMWSConsts
operator|.
name|TIMEOUT
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|appTimeoutInfo
argument_list|,
name|HTTPMethods
operator|.
name|PUT
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
name|STATUS_BADREQUEST
condition|)
block|{
name|String
name|ci
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#createNewReservation()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testNewReservationXML ()
specifier|public
name|void
name|testNewReservationXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
comment|// Test with a wrong HTTP method
name|ClientResponse
name|badResponse
init|=
name|performCall
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|RESERVATION_NEW
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|HTTPMethods
operator|.
name|PUT
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|STATUS_ERROR
argument_list|,
name|badResponse
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test with the correct HTTP method
name|ClientResponse
name|response
init|=
name|performCall
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|RESERVATION_NEW
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|HTTPMethods
operator|.
name|POST
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
name|STATUS_OK
condition|)
block|{
name|NewReservation
name|ci
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|NewReservation
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#submitReservation()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testSubmitReservationXML ()
specifier|public
name|void
name|testSubmitReservationXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
comment|// Test with a wrong HTTP method
name|ClientResponse
name|badResponse
init|=
name|performCall
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|RESERVATION_SUBMIT
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|HTTPMethods
operator|.
name|PUT
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|STATUS_ERROR
argument_list|,
name|badResponse
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test with the correct HTTP method
name|ReservationSubmissionRequestInfo
name|context
init|=
operator|new
name|ReservationSubmissionRequestInfo
argument_list|()
decl_stmt|;
name|context
operator|.
name|setReservationId
argument_list|(
name|getNewReservationId
argument_list|()
operator|.
name|getReservationId
argument_list|()
argument_list|)
expr_stmt|;
comment|// ReservationDefinition is null
name|ClientResponse
name|response
init|=
name|performCall
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|RESERVATION_SUBMIT
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|context
argument_list|,
name|HTTPMethods
operator|.
name|POST
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
name|STATUS_BADREQUEST
condition|)
block|{
name|String
name|ci
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#updateReservation()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testUpdateReservationXML ()
specifier|public
name|void
name|testUpdateReservationXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
comment|// Test with a wrong HTTP method
name|ClientResponse
name|badResponse
init|=
name|performCall
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|RESERVATION_UPDATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|HTTPMethods
operator|.
name|PUT
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|STATUS_ERROR
argument_list|,
name|badResponse
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test with the correct HTTP method
name|String
name|reservationId
init|=
name|getNewReservationId
argument_list|()
operator|.
name|getReservationId
argument_list|()
decl_stmt|;
name|ReservationUpdateRequestInfo
name|context
init|=
operator|new
name|ReservationUpdateRequestInfo
argument_list|()
decl_stmt|;
name|context
operator|.
name|setReservationId
argument_list|(
name|reservationId
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|performCall
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|RESERVATION_UPDATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|context
argument_list|,
name|HTTPMethods
operator|.
name|POST
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
name|STATUS_BADREQUEST
condition|)
block|{
name|String
name|ci
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#deleteReservation()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testDeleteReservationXML ()
specifier|public
name|void
name|testDeleteReservationXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
comment|// Test with a wrong HTTP method
name|ClientResponse
name|badResponse
init|=
name|performCall
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|RESERVATION_DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|HTTPMethods
operator|.
name|PUT
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|STATUS_ERROR
argument_list|,
name|badResponse
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test with the correct HTTP method
name|String
name|reservationId
init|=
name|getNewReservationId
argument_list|()
operator|.
name|getReservationId
argument_list|()
decl_stmt|;
name|ReservationDeleteRequestInfo
name|context
init|=
operator|new
name|ReservationDeleteRequestInfo
argument_list|()
decl_stmt|;
name|context
operator|.
name|setReservationId
argument_list|(
name|reservationId
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|performCall
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|RESERVATION_DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|context
argument_list|,
name|HTTPMethods
operator|.
name|POST
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
name|STATUS_BADREQUEST
condition|)
block|{
name|String
name|ci
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#getNodeToLabels()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testGetNodeToLabelsXML ()
specifier|public
name|void
name|testGetNodeToLabelsXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|List
argument_list|<
name|NodeToLabelsInfo
argument_list|>
name|responses
init|=
name|performGetCalls
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|GET_NODE_TO_LABELS
argument_list|,
name|NodeToLabelsInfo
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NodeToLabelsInfo
name|routerResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|NodeToLabelsInfo
name|rmResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|routerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rmResponse
operator|.
name|getNodeToLabels
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|rmResponse
operator|.
name|getNodeToLabels
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#getClusterNodeLabels()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testGetClusterNodeLabelsXML ()
specifier|public
name|void
name|testGetClusterNodeLabelsXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|List
argument_list|<
name|NodeLabelsInfo
argument_list|>
name|responses
init|=
name|performGetCalls
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|GET_NODE_LABELS
argument_list|,
name|NodeLabelsInfo
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NodeLabelsInfo
name|routerResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|NodeLabelsInfo
name|rmResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|routerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rmResponse
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|rmResponse
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#getLabelsOnNode()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testGetLabelsOnNodeXML ()
specifier|public
name|void
name|testGetLabelsOnNodeXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|List
argument_list|<
name|NodeLabelsInfo
argument_list|>
name|responses
init|=
name|performGetCalls
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|NODES
operator|+
literal|"/"
operator|+
name|getNodeId
argument_list|()
operator|+
literal|"/"
operator|+
name|RMWSConsts
operator|.
name|GET_LABELS
argument_list|,
name|NodeLabelsInfo
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NodeLabelsInfo
name|routerResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|NodeLabelsInfo
name|rmResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|routerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rmResponse
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|rmResponse
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#getLabelsToNodes()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testGetLabelsMappingXML ()
specifier|public
name|void
name|testGetLabelsMappingXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|List
argument_list|<
name|LabelsToNodesInfo
argument_list|>
name|responses
init|=
name|performGetCalls
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|LABEL_MAPPINGS
argument_list|,
name|LabelsToNodesInfo
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LabelsToNodesInfo
name|routerResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LabelsToNodesInfo
name|rmResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|routerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rmResponse
operator|.
name|getLabelsToNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|rmResponse
operator|.
name|getLabelsToNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#addToClusterNodeLabels()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testAddToClusterNodeLabelsXML ()
specifier|public
name|void
name|testAddToClusterNodeLabelsXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
comment|// Test with a wrong HTTP method
name|ClientResponse
name|badResponse
init|=
name|performCall
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|ADD_NODE_LABELS
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|HTTPMethods
operator|.
name|PUT
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|STATUS_ERROR
argument_list|,
name|badResponse
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test with the correct HTTP method
name|List
argument_list|<
name|NodeLabel
argument_list|>
name|nodeLabels
init|=
operator|new
name|ArrayList
argument_list|<
name|NodeLabel
argument_list|>
argument_list|()
decl_stmt|;
name|nodeLabels
operator|.
name|add
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeLabelsInfo
name|context
init|=
operator|new
name|NodeLabelsInfo
argument_list|(
name|nodeLabels
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|performCall
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|ADD_NODE_LABELS
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|context
argument_list|,
name|HTTPMethods
operator|.
name|POST
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
name|STATUS_OK
condition|)
block|{
name|String
name|ci
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#removeFromCluserNodeLabels()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testRemoveFromCluserNodeLabelsXML ()
specifier|public
name|void
name|testRemoveFromCluserNodeLabelsXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
comment|// Test with a wrong HTTP method
name|ClientResponse
name|badResponse
init|=
name|performCall
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|REMOVE_NODE_LABELS
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|HTTPMethods
operator|.
name|PUT
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|STATUS_ERROR
argument_list|,
name|badResponse
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test with the correct HTTP method
name|addNodeLabel
argument_list|()
expr_stmt|;
name|ClientResponse
name|response
init|=
name|performCall
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|REMOVE_NODE_LABELS
argument_list|,
name|RMWSConsts
operator|.
name|LABELS
argument_list|,
literal|"default"
argument_list|,
literal|null
argument_list|,
name|HTTPMethods
operator|.
name|POST
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
name|STATUS_OK
condition|)
block|{
name|String
name|ci
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#replaceLabelsOnNodes()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testReplaceLabelsOnNodesXML ()
specifier|public
name|void
name|testReplaceLabelsOnNodesXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
comment|// Test with a wrong HTTP method
name|ClientResponse
name|badResponse
init|=
name|performCall
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|REPLACE_NODE_TO_LABELS
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|HTTPMethods
operator|.
name|PUT
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|STATUS_ERROR
argument_list|,
name|badResponse
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test with the correct HTTP method
name|addNodeLabel
argument_list|()
expr_stmt|;
name|NodeToLabelsEntryList
name|context
init|=
operator|new
name|NodeToLabelsEntryList
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|performCall
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|REPLACE_NODE_TO_LABELS
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|context
argument_list|,
name|HTTPMethods
operator|.
name|POST
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
name|STATUS_OK
condition|)
block|{
name|String
name|ci
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This test validates the correctness of    * {@link RMWebServiceProtocol#replaceLabelsOnNode()} inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testReplaceLabelsOnNodeXML ()
specifier|public
name|void
name|testReplaceLabelsOnNodeXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
comment|// Test with a wrong HTTP method
name|ClientResponse
name|badResponse
init|=
name|performCall
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|NODES
operator|+
literal|"/"
operator|+
name|getNodeId
argument_list|()
operator|+
literal|"/replace-labels"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|HTTPMethods
operator|.
name|PUT
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|STATUS_ERROR
argument_list|,
name|badResponse
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test with the correct HTTP method
name|addNodeLabel
argument_list|()
expr_stmt|;
name|ClientResponse
name|response
init|=
name|performCall
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|NODES
operator|+
literal|"/"
operator|+
name|getNodeId
argument_list|()
operator|+
literal|"/replace-labels"
argument_list|,
name|RMWSConsts
operator|.
name|LABELS
argument_list|,
literal|"default"
argument_list|,
literal|null
argument_list|,
name|HTTPMethods
operator|.
name|POST
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
name|STATUS_OK
condition|)
block|{
name|String
name|ci
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This test validates the correctness of {@link WebServices#getAppAttempt}    * inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testGetAppAttemptXML ()
specifier|public
name|void
name|testGetAppAttemptXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|String
name|appId
init|=
name|submitApplication
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AppAttemptInfo
argument_list|>
name|responses
init|=
name|performGetCalls
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|APPS
operator|+
literal|"/"
operator|+
name|appId
operator|+
literal|"/"
operator|+
name|RMWSConsts
operator|.
name|APPATTEMPTS
operator|+
literal|"/"
operator|+
name|getAppAttempt
argument_list|(
name|appId
argument_list|)
argument_list|,
name|AppAttemptInfo
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AppAttemptInfo
name|routerResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AppAttemptInfo
name|rmResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|routerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rmResponse
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|rmResponse
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of {@link WebServices#getContainers}    * inside Router.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testGetContainersXML ()
specifier|public
name|void
name|testGetContainersXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|String
name|appId
init|=
name|submitApplication
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainersInfo
argument_list|>
name|responses
init|=
name|performGetCalls
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|APPS
operator|+
literal|"/"
operator|+
name|appId
operator|+
literal|"/"
operator|+
name|RMWSConsts
operator|.
name|APPATTEMPTS
operator|+
literal|"/"
operator|+
name|getAppAttempt
argument_list|(
name|appId
argument_list|)
operator|+
literal|"/"
operator|+
name|RMWSConsts
operator|.
name|CONTAINERS
argument_list|,
name|ContainersInfo
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ContainersInfo
name|routerResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ContainersInfo
name|rmResponse
init|=
name|responses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|routerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rmResponse
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|rmResponse
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getNodeId ()
specifier|private
name|String
name|getNodeId
parameter_list|()
block|{
name|Client
name|clientToRM
init|=
name|Client
operator|.
name|create
argument_list|()
decl_stmt|;
name|WebResource
name|toRM
init|=
name|clientToRM
operator|.
name|resource
argument_list|(
name|WebAppUtils
operator|.
name|getRMWebAppURLWithScheme
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|path
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|NODES
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|toRM
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|NodesInfo
name|ci
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|NodesInfo
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|ci
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeId
argument_list|()
return|;
block|}
DECL|method|getNewApplicationId ()
specifier|private
name|NewApplication
name|getNewApplicationId
parameter_list|()
block|{
name|Client
name|clientToRM
init|=
name|Client
operator|.
name|create
argument_list|()
decl_stmt|;
name|WebResource
name|toRM
init|=
name|clientToRM
operator|.
name|resource
argument_list|(
name|WebAppUtils
operator|.
name|getRMWebAppURLWithScheme
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|path
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|APPS_NEW_APPLICATION
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|toRM
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getEntity
argument_list|(
name|NewApplication
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|submitApplication ()
specifier|private
name|String
name|submitApplication
parameter_list|()
block|{
name|ApplicationSubmissionContextInfo
name|context
init|=
operator|new
name|ApplicationSubmissionContextInfo
argument_list|()
decl_stmt|;
name|String
name|appId
init|=
name|getNewApplicationId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|context
operator|.
name|setApplicationId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|Client
name|clientToRouter
init|=
name|Client
operator|.
name|create
argument_list|()
decl_stmt|;
name|WebResource
name|toRM
init|=
name|clientToRouter
operator|.
name|resource
argument_list|(
name|WebAppUtils
operator|.
name|getRMWebAppURLWithScheme
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|path
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|APPS
argument_list|)
decl_stmt|;
name|toRM
operator|.
name|entity
argument_list|(
name|context
argument_list|,
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|appId
return|;
block|}
DECL|method|getNewReservationId ()
specifier|private
name|NewReservation
name|getNewReservationId
parameter_list|()
block|{
name|Client
name|clientToRM
init|=
name|Client
operator|.
name|create
argument_list|()
decl_stmt|;
name|WebResource
name|toRM
init|=
name|clientToRM
operator|.
name|resource
argument_list|(
name|WebAppUtils
operator|.
name|getRMWebAppURLWithScheme
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|path
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|RESERVATION_NEW
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|toRM
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getEntity
argument_list|(
name|NewReservation
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|addNodeLabel ()
specifier|private
name|String
name|addNodeLabel
parameter_list|()
block|{
name|Client
name|clientToRM
init|=
name|Client
operator|.
name|create
argument_list|()
decl_stmt|;
name|WebResource
name|toRM
init|=
name|clientToRM
operator|.
name|resource
argument_list|(
name|WebAppUtils
operator|.
name|getRMWebAppURLWithScheme
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|path
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|ADD_NODE_LABELS
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|NodeLabel
argument_list|>
name|nodeLabels
init|=
operator|new
name|ArrayList
argument_list|<
name|NodeLabel
argument_list|>
argument_list|()
decl_stmt|;
name|nodeLabels
operator|.
name|add
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeLabelsInfo
name|context
init|=
operator|new
name|NodeLabelsInfo
argument_list|(
name|nodeLabels
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|toRM
operator|.
name|entity
argument_list|(
name|context
argument_list|,
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|getAppAttempt (String appId)
specifier|private
name|String
name|getAppAttempt
parameter_list|(
name|String
name|appId
parameter_list|)
block|{
name|Client
name|clientToRM
init|=
name|Client
operator|.
name|create
argument_list|()
decl_stmt|;
name|WebResource
name|toRM
init|=
name|clientToRM
operator|.
name|resource
argument_list|(
name|WebAppUtils
operator|.
name|getRMWebAppURLWithScheme
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|path
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
operator|+
name|RMWSConsts
operator|.
name|APPS
operator|+
literal|"/"
operator|+
name|appId
operator|+
literal|"/"
operator|+
name|RMWSConsts
operator|.
name|ATTEMPTS
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|toRM
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|AppAttemptsInfo
name|ci
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|AppAttemptsInfo
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|ci
operator|.
name|getAttempts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAppAttemptId
argument_list|()
return|;
block|}
block|}
end_class

end_unit

