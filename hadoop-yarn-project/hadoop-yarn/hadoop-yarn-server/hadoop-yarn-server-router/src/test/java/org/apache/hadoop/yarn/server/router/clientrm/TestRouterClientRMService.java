begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.router.clientrm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|router
operator|.
name|clientrm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterMetricsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterNodeLabelsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterNodesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewReservationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetQueueInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetQueueUserAclsInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|MoveApplicationAcrossQueuesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationDeleteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationSubmissionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationUpdateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SubmitApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|router
operator|.
name|clientrm
operator|.
name|RouterClientRMService
operator|.
name|RequestInterceptorChainWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test class to validate the ClientRM Service inside the Router.  */
end_comment

begin_class
DECL|class|TestRouterClientRMService
specifier|public
class|class
name|TestRouterClientRMService
extends|extends
name|BaseRouterClientRMTest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRouterClientRMService
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Tests if the pipeline is created properly.    */
annotation|@
name|Test
DECL|method|testRequestInterceptorChainCreation ()
specifier|public
name|void
name|testRequestInterceptorChainCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|ClientRequestInterceptor
name|root
init|=
name|super
operator|.
name|getRouterClientRMService
argument_list|()
operator|.
name|createRequestInterceptorChain
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
comment|// The current pipeline is:
comment|// PassThroughClientRequestInterceptor - index = 0
comment|// PassThroughClientRequestInterceptor - index = 1
comment|// PassThroughClientRequestInterceptor - index = 2
comment|// MockClientRequestInterceptor - index = 3
switch|switch
condition|(
name|index
condition|)
block|{
case|case
literal|0
case|:
comment|// Fall to the next case
case|case
literal|1
case|:
comment|// Fall to the next case
case|case
literal|2
case|:
comment|// If index is equal to 0,1 or 2 we fall in this check
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PassThroughClientRequestInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|root
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|Assert
operator|.
name|assertEquals
argument_list|(
name|MockClientRequestInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|root
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|root
operator|=
name|root
operator|.
name|getNextInterceptor
argument_list|()
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The number of interceptors in chain does not match"
argument_list|,
literal|4
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test if the RouterClientRM forwards all the requests to the MockRM and get    * back the responses.    */
annotation|@
name|Test
DECL|method|testRouterClientRMServiceE2E ()
specifier|public
name|void
name|testRouterClientRMServiceE2E
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
init|=
literal|"test1"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"testRouterClientRMServiceE2E - Get New Application"
argument_list|)
expr_stmt|;
name|GetNewApplicationResponse
name|responseGetNewApp
init|=
name|getNewApplication
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseGetNewApp
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"testRouterClientRMServiceE2E - Submit Application"
argument_list|)
expr_stmt|;
name|SubmitApplicationResponse
name|responseSubmitApp
init|=
name|submitApplication
argument_list|(
name|responseGetNewApp
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseSubmitApp
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"testRouterClientRMServiceE2E - Kill Application"
argument_list|)
expr_stmt|;
name|KillApplicationResponse
name|responseKillApp
init|=
name|forceKillApplication
argument_list|(
name|responseGetNewApp
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseKillApp
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"testRouterClientRMServiceE2E - Get Cluster Metrics"
argument_list|)
expr_stmt|;
name|GetClusterMetricsResponse
name|responseGetClusterMetrics
init|=
name|getClusterMetrics
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseGetClusterMetrics
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"testRouterClientRMServiceE2E - Get Cluster Nodes"
argument_list|)
expr_stmt|;
name|GetClusterNodesResponse
name|responseGetClusterNodes
init|=
name|getClusterNodes
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseGetClusterNodes
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"testRouterClientRMServiceE2E - Get Queue Info"
argument_list|)
expr_stmt|;
name|GetQueueInfoResponse
name|responseGetQueueInfo
init|=
name|getQueueInfo
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseGetQueueInfo
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"testRouterClientRMServiceE2E - Get Queue User"
argument_list|)
expr_stmt|;
name|GetQueueUserAclsInfoResponse
name|responseGetQueueUser
init|=
name|getQueueUserAcls
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseGetQueueUser
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"testRouterClientRMServiceE2E - Get Cluster Node"
argument_list|)
expr_stmt|;
name|GetClusterNodeLabelsResponse
name|responseGetClusterNode
init|=
name|getClusterNodeLabels
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseGetClusterNode
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"testRouterClientRMServiceE2E - Move Application Across Queues"
argument_list|)
expr_stmt|;
name|MoveApplicationAcrossQueuesResponse
name|responseMoveApp
init|=
name|moveApplicationAcrossQueues
argument_list|(
name|user
argument_list|,
name|responseGetNewApp
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseMoveApp
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"testRouterClientRMServiceE2E - Get New Reservation"
argument_list|)
expr_stmt|;
name|GetNewReservationResponse
name|getNewReservationResponse
init|=
name|getNewReservation
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"testRouterClientRMServiceE2E - Submit Reservation"
argument_list|)
expr_stmt|;
name|ReservationSubmissionResponse
name|responseSubmitReser
init|=
name|submitReservation
argument_list|(
name|user
argument_list|,
name|getNewReservationResponse
operator|.
name|getReservationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseSubmitReser
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"testRouterClientRMServiceE2E - Update Reservation"
argument_list|)
expr_stmt|;
name|ReservationUpdateResponse
name|responseUpdateReser
init|=
name|updateReservation
argument_list|(
name|user
argument_list|,
name|getNewReservationResponse
operator|.
name|getReservationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseUpdateReser
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"testRouterClientRMServiceE2E - Delete Reservation"
argument_list|)
expr_stmt|;
name|ReservationDeleteResponse
name|responseDeleteReser
init|=
name|deleteReservation
argument_list|(
name|user
argument_list|,
name|getNewReservationResponse
operator|.
name|getReservationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseDeleteReser
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test if the different chains for users are generated, and LRU cache is    * working as expected.    */
annotation|@
name|Test
DECL|method|testUsersChainMapWithLRUCache ()
specifier|public
name|void
name|testUsersChainMapWithLRUCache
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|RequestInterceptorChainWrapper
argument_list|>
name|pipelines
decl_stmt|;
name|RequestInterceptorChainWrapper
name|chain
decl_stmt|;
name|getNewApplication
argument_list|(
literal|"test1"
argument_list|)
expr_stmt|;
name|getNewApplication
argument_list|(
literal|"test2"
argument_list|)
expr_stmt|;
name|getNewApplication
argument_list|(
literal|"test3"
argument_list|)
expr_stmt|;
name|getNewApplication
argument_list|(
literal|"test4"
argument_list|)
expr_stmt|;
name|getNewApplication
argument_list|(
literal|"test5"
argument_list|)
expr_stmt|;
name|getNewApplication
argument_list|(
literal|"test6"
argument_list|)
expr_stmt|;
name|getNewApplication
argument_list|(
literal|"test7"
argument_list|)
expr_stmt|;
name|getNewApplication
argument_list|(
literal|"test8"
argument_list|)
expr_stmt|;
name|pipelines
operator|=
name|super
operator|.
name|getRouterClientRMService
argument_list|()
operator|.
name|getPipelines
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|pipelines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|getNewApplication
argument_list|(
literal|"test9"
argument_list|)
expr_stmt|;
name|getNewApplication
argument_list|(
literal|"test10"
argument_list|)
expr_stmt|;
name|getNewApplication
argument_list|(
literal|"test1"
argument_list|)
expr_stmt|;
name|getNewApplication
argument_list|(
literal|"test11"
argument_list|)
expr_stmt|;
comment|// The cache max size is defined in
comment|// BaseRouterClientRMTest.TEST_MAX_CACHE_SIZE
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|pipelines
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|chain
operator|=
name|pipelines
operator|.
name|get
argument_list|(
literal|"test1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"test1 should not be evicted"
argument_list|,
name|chain
argument_list|)
expr_stmt|;
name|chain
operator|=
name|pipelines
operator|.
name|get
argument_list|(
literal|"test2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"test2 should have been evicted"
argument_list|,
name|chain
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates if the ClientRequestInterceptor chain for the user    * can build and init correctly when a multi-client process begins to    * request RouterClientRMService for the same user simultaneously.    */
annotation|@
name|Test
DECL|method|testClientPipelineConcurrent ()
specifier|public
name|void
name|testClientPipelineConcurrent
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|String
name|user
init|=
literal|"test1"
decl_stmt|;
comment|/*      * ClientTestThread is a thread to simulate a client request to get a      * ClientRequestInterceptor for the user.      */
class|class
name|ClientTestThread
extends|extends
name|Thread
block|{
specifier|private
name|ClientRequestInterceptor
name|interceptor
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|interceptor
operator|=
name|pipeline
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|ClientRequestInterceptor
name|pipeline
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user
argument_list|)
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|ClientRequestInterceptor
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClientRequestInterceptor
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|RequestInterceptorChainWrapper
name|wrapper
init|=
name|getRouterClientRMService
argument_list|()
operator|.
name|getInterceptorChain
argument_list|()
decl_stmt|;
name|ClientRequestInterceptor
name|interceptor
init|=
name|wrapper
operator|.
name|getRootInterceptor
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|interceptor
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"init client interceptor success for user "
operator|+
name|user
argument_list|)
expr_stmt|;
return|return
name|interceptor
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
comment|/*      * We start the first thread. It should not finish initing a chainWrapper      * before the other thread starts. In this way, the second thread can      * init at the same time of the first one. In the end, we validate that      * the 2 threads get the same chainWrapper without going into error.      */
name|ClientTestThread
name|client1
init|=
operator|new
name|ClientTestThread
argument_list|()
decl_stmt|;
name|ClientTestThread
name|client2
init|=
operator|new
name|ClientTestThread
argument_list|()
decl_stmt|;
name|client1
operator|.
name|start
argument_list|()
expr_stmt|;
name|client2
operator|.
name|start
argument_list|()
expr_stmt|;
name|client1
operator|.
name|join
argument_list|()
expr_stmt|;
name|client2
operator|.
name|join
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client1
operator|.
name|interceptor
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client2
operator|.
name|interceptor
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|client1
operator|.
name|interceptor
operator|==
name|client2
operator|.
name|interceptor
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

