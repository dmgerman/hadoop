begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.router.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|router
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ClusterMetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ResourceRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|uam
operator|.
name|UnmanagedApplicationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test class to validate RouterWebServiceUtil methods.  */
end_comment

begin_class
DECL|class|TestRouterWebServiceUtil
specifier|public
class|class
name|TestRouterWebServiceUtil
block|{
DECL|field|APPID1
specifier|private
specifier|static
specifier|final
name|ApplicationId
name|APPID1
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|APPID2
specifier|private
specifier|static
specifier|final
name|ApplicationId
name|APPID2
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|APPID3
specifier|private
specifier|static
specifier|final
name|ApplicationId
name|APPID3
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|APPID4
specifier|private
specifier|static
specifier|final
name|ApplicationId
name|APPID4
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|NODE1
specifier|private
specifier|static
specifier|final
name|String
name|NODE1
init|=
literal|"Node1"
decl_stmt|;
DECL|field|NODE2
specifier|private
specifier|static
specifier|final
name|String
name|NODE2
init|=
literal|"Node2"
decl_stmt|;
DECL|field|NODE3
specifier|private
specifier|static
specifier|final
name|String
name|NODE3
init|=
literal|"Node3"
decl_stmt|;
DECL|field|NODE4
specifier|private
specifier|static
specifier|final
name|String
name|NODE4
init|=
literal|"Node4"
decl_stmt|;
comment|/**    * This test validates the correctness of RouterWebServiceUtil#mergeAppsInfo    * in case we want to merge 4 AMs. The expected result would be the same 4    * AMs.    */
annotation|@
name|Test
DECL|method|testMerge4DifferentApps ()
specifier|public
name|void
name|testMerge4DifferentApps
parameter_list|()
block|{
name|AppsInfo
name|apps
init|=
operator|new
name|AppsInfo
argument_list|()
decl_stmt|;
name|int
name|value
init|=
literal|1000
decl_stmt|;
name|AppInfo
name|app1
init|=
operator|new
name|AppInfo
argument_list|()
decl_stmt|;
name|app1
operator|.
name|setAppId
argument_list|(
name|APPID1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|app1
operator|.
name|setAMHostHttpAddress
argument_list|(
literal|"http://i_am_the_AM1:1234"
argument_list|)
expr_stmt|;
name|app1
operator|.
name|setState
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|app1
operator|.
name|setNumAMContainerPreempted
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|apps
operator|.
name|add
argument_list|(
name|app1
argument_list|)
expr_stmt|;
name|AppInfo
name|app2
init|=
operator|new
name|AppInfo
argument_list|()
decl_stmt|;
name|app2
operator|.
name|setAppId
argument_list|(
name|APPID2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|app2
operator|.
name|setAMHostHttpAddress
argument_list|(
literal|"http://i_am_the_AM2:1234"
argument_list|)
expr_stmt|;
name|app2
operator|.
name|setState
argument_list|(
name|YarnApplicationState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|app2
operator|.
name|setAllocatedVCores
argument_list|(
literal|2
operator|*
name|value
argument_list|)
expr_stmt|;
name|apps
operator|.
name|add
argument_list|(
name|app2
argument_list|)
expr_stmt|;
name|AppInfo
name|app3
init|=
operator|new
name|AppInfo
argument_list|()
decl_stmt|;
name|app3
operator|.
name|setAppId
argument_list|(
name|APPID3
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|app3
operator|.
name|setAMHostHttpAddress
argument_list|(
literal|"http://i_am_the_AM3:1234"
argument_list|)
expr_stmt|;
name|app3
operator|.
name|setState
argument_list|(
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|app3
operator|.
name|setReservedMB
argument_list|(
literal|3
operator|*
name|value
argument_list|)
expr_stmt|;
name|apps
operator|.
name|add
argument_list|(
name|app3
argument_list|)
expr_stmt|;
name|AppInfo
name|app4
init|=
operator|new
name|AppInfo
argument_list|()
decl_stmt|;
name|app4
operator|.
name|setAppId
argument_list|(
name|APPID4
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|app4
operator|.
name|setAMHostHttpAddress
argument_list|(
literal|"http://i_am_the_AM4:1234"
argument_list|)
expr_stmt|;
name|app4
operator|.
name|setState
argument_list|(
name|YarnApplicationState
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|app4
operator|.
name|setAllocatedMB
argument_list|(
literal|4
operator|*
name|value
argument_list|)
expr_stmt|;
name|apps
operator|.
name|add
argument_list|(
name|app4
argument_list|)
expr_stmt|;
name|AppsInfo
name|result
init|=
name|RouterWebServiceUtil
operator|.
name|mergeAppsInfo
argument_list|(
name|apps
operator|.
name|getApps
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|result
operator|.
name|getApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|appIds
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|AppInfo
name|appInfo1
init|=
literal|null
decl_stmt|,
name|appInfo2
init|=
literal|null
decl_stmt|,
name|appInfo3
init|=
literal|null
decl_stmt|,
name|appInfo4
init|=
literal|null
decl_stmt|;
for|for
control|(
name|AppInfo
name|app
range|:
name|result
operator|.
name|getApps
argument_list|()
control|)
block|{
name|appIds
operator|.
name|add
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|app
operator|.
name|getAppId
argument_list|()
operator|.
name|equals
argument_list|(
name|APPID1
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|appInfo1
operator|=
name|app
expr_stmt|;
block|}
if|if
condition|(
name|app
operator|.
name|getAppId
argument_list|()
operator|.
name|equals
argument_list|(
name|APPID2
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|appInfo2
operator|=
name|app
expr_stmt|;
block|}
if|if
condition|(
name|app
operator|.
name|getAppId
argument_list|()
operator|.
name|equals
argument_list|(
name|APPID3
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|appInfo3
operator|=
name|app
expr_stmt|;
block|}
if|if
condition|(
name|app
operator|.
name|getAppId
argument_list|()
operator|.
name|equals
argument_list|(
name|APPID4
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|appInfo4
operator|=
name|app
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|appIds
operator|.
name|contains
argument_list|(
name|APPID1
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|appIds
operator|.
name|contains
argument_list|(
name|APPID2
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|appIds
operator|.
name|contains
argument_list|(
name|APPID3
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|appIds
operator|.
name|contains
argument_list|(
name|APPID4
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check preservations APP1
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app1
operator|.
name|getState
argument_list|()
argument_list|,
name|appInfo1
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app1
operator|.
name|getNumAMContainerPreempted
argument_list|()
argument_list|,
name|appInfo1
operator|.
name|getNumAMContainerPreempted
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check preservations APP2
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app2
operator|.
name|getState
argument_list|()
argument_list|,
name|appInfo2
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app3
operator|.
name|getAllocatedVCores
argument_list|()
argument_list|,
name|appInfo3
operator|.
name|getAllocatedVCores
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check preservations APP3
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app3
operator|.
name|getState
argument_list|()
argument_list|,
name|appInfo3
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app3
operator|.
name|getReservedMB
argument_list|()
argument_list|,
name|appInfo3
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check preservations APP3
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app4
operator|.
name|getState
argument_list|()
argument_list|,
name|appInfo4
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app3
operator|.
name|getAllocatedMB
argument_list|()
argument_list|,
name|appInfo3
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of RouterWebServiceUtil#mergeAppsInfo    * in case we want to merge 2 UAMs and their own AM. The status of the AM is    * FINISHED, so we check the correctness of the merging of the historical    * values. The expected result would be 1 report with the merged information.    */
annotation|@
name|Test
DECL|method|testMergeAppsFinished ()
specifier|public
name|void
name|testMergeAppsFinished
parameter_list|()
block|{
name|AppsInfo
name|apps
init|=
operator|new
name|AppsInfo
argument_list|()
decl_stmt|;
name|String
name|amHost
init|=
literal|"http://i_am_the_AM1:1234"
decl_stmt|;
name|AppInfo
name|am
init|=
operator|new
name|AppInfo
argument_list|()
decl_stmt|;
name|am
operator|.
name|setAppId
argument_list|(
name|APPID1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|am
operator|.
name|setAMHostHttpAddress
argument_list|(
name|amHost
argument_list|)
expr_stmt|;
name|am
operator|.
name|setState
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|int
name|value
init|=
literal|1000
decl_stmt|;
name|setAppInfoFinished
argument_list|(
name|am
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|apps
operator|.
name|add
argument_list|(
name|am
argument_list|)
expr_stmt|;
name|AppInfo
name|uam1
init|=
operator|new
name|AppInfo
argument_list|()
decl_stmt|;
name|uam1
operator|.
name|setAppId
argument_list|(
name|APPID1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|apps
operator|.
name|add
argument_list|(
name|uam1
argument_list|)
expr_stmt|;
name|setAppInfoFinished
argument_list|(
name|uam1
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|AppInfo
name|uam2
init|=
operator|new
name|AppInfo
argument_list|()
decl_stmt|;
name|uam2
operator|.
name|setAppId
argument_list|(
name|APPID1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|apps
operator|.
name|add
argument_list|(
name|uam2
argument_list|)
expr_stmt|;
name|setAppInfoFinished
argument_list|(
name|uam2
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// in this case the result does not change if we enable partial result
name|AppsInfo
name|result
init|=
name|RouterWebServiceUtil
operator|.
name|mergeAppsInfo
argument_list|(
name|apps
operator|.
name|getApps
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|AppInfo
name|app
init|=
name|result
operator|.
name|getApps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|APPID1
operator|.
name|toString
argument_list|()
argument_list|,
name|app
operator|.
name|getAppId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|amHost
argument_list|,
name|app
operator|.
name|getAMHostHttpAddress
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
operator|*
literal|3
argument_list|,
name|app
operator|.
name|getPreemptedResourceMB
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
operator|*
literal|3
argument_list|,
name|app
operator|.
name|getPreemptedResourceVCores
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
operator|*
literal|3
argument_list|,
name|app
operator|.
name|getNumNonAMContainerPreempted
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
operator|*
literal|3
argument_list|,
name|app
operator|.
name|getNumAMContainerPreempted
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
operator|*
literal|3
argument_list|,
name|app
operator|.
name|getPreemptedMemorySeconds
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
operator|*
literal|3
argument_list|,
name|app
operator|.
name|getPreemptedVcoreSeconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setAppInfoFinished (AppInfo am, int value)
specifier|private
name|void
name|setAppInfoFinished
parameter_list|(
name|AppInfo
name|am
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|am
operator|.
name|setPreemptedResourceMB
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|am
operator|.
name|setPreemptedResourceVCores
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|am
operator|.
name|setNumNonAMContainerPreempted
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|am
operator|.
name|setNumAMContainerPreempted
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|am
operator|.
name|setPreemptedMemorySeconds
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|am
operator|.
name|setPreemptedVcoreSeconds
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of RouterWebServiceUtil#mergeAppsInfo    * in case we want to merge 2 UAMs and their own AM. The status of the AM is    * RUNNING, so we check the correctness of the merging of the runtime values.    * The expected result would be 1 report with the merged information.    */
annotation|@
name|Test
DECL|method|testMergeAppsRunning ()
specifier|public
name|void
name|testMergeAppsRunning
parameter_list|()
block|{
name|AppsInfo
name|apps
init|=
operator|new
name|AppsInfo
argument_list|()
decl_stmt|;
name|String
name|amHost
init|=
literal|"http://i_am_the_AM2:1234"
decl_stmt|;
name|AppInfo
name|am
init|=
operator|new
name|AppInfo
argument_list|()
decl_stmt|;
name|am
operator|.
name|setAppId
argument_list|(
name|APPID2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|am
operator|.
name|setAMHostHttpAddress
argument_list|(
name|amHost
argument_list|)
expr_stmt|;
name|am
operator|.
name|setState
argument_list|(
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|int
name|value
init|=
literal|1000
decl_stmt|;
name|setAppInfoRunning
argument_list|(
name|am
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|apps
operator|.
name|add
argument_list|(
name|am
argument_list|)
expr_stmt|;
name|AppInfo
name|uam1
init|=
operator|new
name|AppInfo
argument_list|()
decl_stmt|;
name|uam1
operator|.
name|setAppId
argument_list|(
name|APPID2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|uam1
operator|.
name|setState
argument_list|(
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|apps
operator|.
name|add
argument_list|(
name|uam1
argument_list|)
expr_stmt|;
name|setAppInfoRunning
argument_list|(
name|uam1
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|AppInfo
name|uam2
init|=
operator|new
name|AppInfo
argument_list|()
decl_stmt|;
name|uam2
operator|.
name|setAppId
argument_list|(
name|APPID2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|uam2
operator|.
name|setState
argument_list|(
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|apps
operator|.
name|add
argument_list|(
name|uam2
argument_list|)
expr_stmt|;
name|setAppInfoRunning
argument_list|(
name|uam2
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// in this case the result does not change if we enable partial result
name|AppsInfo
name|result
init|=
name|RouterWebServiceUtil
operator|.
name|mergeAppsInfo
argument_list|(
name|apps
operator|.
name|getApps
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|AppInfo
name|app
init|=
name|result
operator|.
name|getApps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|APPID2
operator|.
name|toString
argument_list|()
argument_list|,
name|app
operator|.
name|getAppId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|amHost
argument_list|,
name|app
operator|.
name|getAMHostHttpAddress
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
operator|*
literal|3
argument_list|,
name|app
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
operator|*
literal|3
argument_list|,
name|app
operator|.
name|getAllocatedVCores
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
operator|*
literal|3
argument_list|,
name|app
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
operator|*
literal|3
argument_list|,
name|app
operator|.
name|getReservedVCores
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
operator|*
literal|3
argument_list|,
name|app
operator|.
name|getRunningContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
operator|*
literal|3
argument_list|,
name|app
operator|.
name|getMemorySeconds
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
operator|*
literal|3
argument_list|,
name|app
operator|.
name|getVcoreSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|app
operator|.
name|getResourceRequests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setAppInfoRunning (AppInfo am, int value)
specifier|private
name|void
name|setAppInfoRunning
parameter_list|(
name|AppInfo
name|am
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|am
operator|.
name|getResourceRequests
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ResourceRequestInfo
argument_list|()
argument_list|)
expr_stmt|;
name|am
operator|.
name|setAllocatedMB
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|am
operator|.
name|setAllocatedVCores
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|am
operator|.
name|setReservedMB
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|am
operator|.
name|setReservedVCores
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|am
operator|.
name|setRunningContainers
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|am
operator|.
name|setMemorySeconds
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|am
operator|.
name|setVcoreSeconds
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of RouterWebServiceUtil#mergeAppsInfo    * in case we want to merge 2 UAMs without their own AM. The expected result    * would be an empty report or a partial report of the 2 UAMs depending on the    * selected policy.    */
annotation|@
name|Test
DECL|method|testMerge2UAM ()
specifier|public
name|void
name|testMerge2UAM
parameter_list|()
block|{
name|AppsInfo
name|apps
init|=
operator|new
name|AppsInfo
argument_list|()
decl_stmt|;
name|AppInfo
name|app1
init|=
operator|new
name|AppInfo
argument_list|()
decl_stmt|;
name|app1
operator|.
name|setAppId
argument_list|(
name|APPID1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|app1
operator|.
name|setName
argument_list|(
name|UnmanagedApplicationManager
operator|.
name|APP_NAME
argument_list|)
expr_stmt|;
name|app1
operator|.
name|setState
argument_list|(
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|apps
operator|.
name|add
argument_list|(
name|app1
argument_list|)
expr_stmt|;
name|AppInfo
name|app2
init|=
operator|new
name|AppInfo
argument_list|()
decl_stmt|;
name|app2
operator|.
name|setAppId
argument_list|(
name|APPID1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|app2
operator|.
name|setName
argument_list|(
name|UnmanagedApplicationManager
operator|.
name|APP_NAME
argument_list|)
expr_stmt|;
name|app2
operator|.
name|setState
argument_list|(
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|apps
operator|.
name|add
argument_list|(
name|app2
argument_list|)
expr_stmt|;
name|AppsInfo
name|result
init|=
name|RouterWebServiceUtil
operator|.
name|mergeAppsInfo
argument_list|(
name|apps
operator|.
name|getApps
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// By enabling partial result, the expected result would be a partial report
comment|// of the 2 UAMs
name|AppsInfo
name|result2
init|=
name|RouterWebServiceUtil
operator|.
name|mergeAppsInfo
argument_list|(
name|apps
operator|.
name|getApps
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|result2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result2
operator|.
name|getApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|,
name|result2
operator|.
name|getApps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of RouterWebServiceUtil#mergeAppsInfo    * in case we want to merge 1 UAM that does not depend on Federation. The    * excepted result would be the same app report.    */
annotation|@
name|Test
DECL|method|testMergeUAM ()
specifier|public
name|void
name|testMergeUAM
parameter_list|()
block|{
name|AppsInfo
name|apps
init|=
operator|new
name|AppsInfo
argument_list|()
decl_stmt|;
name|AppInfo
name|app1
init|=
operator|new
name|AppInfo
argument_list|()
decl_stmt|;
name|app1
operator|.
name|setAppId
argument_list|(
name|APPID1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|app1
operator|.
name|setName
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|apps
operator|.
name|add
argument_list|(
name|app1
argument_list|)
expr_stmt|;
comment|// in this case the result does not change if we enable partial result
name|AppsInfo
name|result
init|=
name|RouterWebServiceUtil
operator|.
name|mergeAppsInfo
argument_list|(
name|apps
operator|.
name|getApps
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of    * RouterWebServiceUtil#deleteDuplicateNodesInfo in case we want to merge 4    * Nodes. The expected result would be the same 4 Nodes.    */
annotation|@
name|Test
DECL|method|testDeleteDuplicate4DifferentNodes ()
specifier|public
name|void
name|testDeleteDuplicate4DifferentNodes
parameter_list|()
block|{
name|NodesInfo
name|nodes
init|=
operator|new
name|NodesInfo
argument_list|()
decl_stmt|;
name|NodeInfo
name|nodeInfo1
init|=
operator|new
name|NodeInfo
argument_list|()
decl_stmt|;
name|nodeInfo1
operator|.
name|setId
argument_list|(
name|NODE1
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|nodeInfo1
argument_list|)
expr_stmt|;
name|NodeInfo
name|nodeInfo2
init|=
operator|new
name|NodeInfo
argument_list|()
decl_stmt|;
name|nodeInfo2
operator|.
name|setId
argument_list|(
name|NODE2
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|nodeInfo2
argument_list|)
expr_stmt|;
name|NodeInfo
name|nodeInfo3
init|=
operator|new
name|NodeInfo
argument_list|()
decl_stmt|;
name|nodeInfo3
operator|.
name|setId
argument_list|(
name|NODE3
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|nodeInfo3
argument_list|)
expr_stmt|;
name|NodeInfo
name|nodeInfo4
init|=
operator|new
name|NodeInfo
argument_list|()
decl_stmt|;
name|nodeInfo4
operator|.
name|setId
argument_list|(
name|NODE4
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|nodeInfo4
argument_list|)
expr_stmt|;
name|NodesInfo
name|result
init|=
name|RouterWebServiceUtil
operator|.
name|deleteDuplicateNodesInfo
argument_list|(
name|nodes
operator|.
name|getNodes
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|result
operator|.
name|getNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nodesIds
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeInfo
name|node
range|:
name|result
operator|.
name|getNodes
argument_list|()
control|)
block|{
name|nodesIds
operator|.
name|add
argument_list|(
name|node
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nodesIds
operator|.
name|contains
argument_list|(
name|NODE1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nodesIds
operator|.
name|contains
argument_list|(
name|NODE2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nodesIds
operator|.
name|contains
argument_list|(
name|NODE3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nodesIds
operator|.
name|contains
argument_list|(
name|NODE4
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of    * {@link RouterWebServiceUtil#deleteDuplicateNodesInfo(ArrayList)} in case we    * want to merge 3 nodes with the same id. The expected result would be 1 node    * report with the newest healthy report.    */
annotation|@
name|Test
DECL|method|testDeleteDuplicateNodes ()
specifier|public
name|void
name|testDeleteDuplicateNodes
parameter_list|()
block|{
name|NodesInfo
name|nodes
init|=
operator|new
name|NodesInfo
argument_list|()
decl_stmt|;
name|NodeInfo
name|node1
init|=
operator|new
name|NodeInfo
argument_list|()
decl_stmt|;
name|node1
operator|.
name|setId
argument_list|(
name|NODE1
argument_list|)
expr_stmt|;
name|node1
operator|.
name|setLastHealthUpdate
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|node1
argument_list|)
expr_stmt|;
name|NodeInfo
name|node2
init|=
operator|new
name|NodeInfo
argument_list|()
decl_stmt|;
name|node2
operator|.
name|setId
argument_list|(
name|NODE1
argument_list|)
expr_stmt|;
name|node2
operator|.
name|setLastHealthUpdate
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|NodeInfo
name|node3
init|=
operator|new
name|NodeInfo
argument_list|()
decl_stmt|;
name|node3
operator|.
name|setId
argument_list|(
name|NODE1
argument_list|)
expr_stmt|;
name|node3
operator|.
name|setLastHealthUpdate
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|node3
argument_list|)
expr_stmt|;
name|NodesInfo
name|result
init|=
name|RouterWebServiceUtil
operator|.
name|deleteDuplicateNodesInfo
argument_list|(
name|nodes
operator|.
name|getNodes
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|NodeInfo
name|node
init|=
name|result
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NODE1
argument_list|,
name|node
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|node
operator|.
name|getLastHealthUpdate
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test validates the correctness of    * {@link RouterWebServiceUtil#mergeMetrics}.    */
annotation|@
name|Test
DECL|method|testMergeMetrics ()
specifier|public
name|void
name|testMergeMetrics
parameter_list|()
block|{
name|ClusterMetricsInfo
name|metrics
init|=
operator|new
name|ClusterMetricsInfo
argument_list|()
decl_stmt|;
name|ClusterMetricsInfo
name|metricsResponse
init|=
operator|new
name|ClusterMetricsInfo
argument_list|()
decl_stmt|;
name|setUpClusterMetrics
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
name|setUpClusterMetrics
argument_list|(
name|metricsResponse
argument_list|)
expr_stmt|;
name|ClusterMetricsInfo
name|metricsClone
init|=
name|createClusterMetricsClone
argument_list|(
name|metrics
argument_list|)
decl_stmt|;
name|RouterWebServiceUtil
operator|.
name|mergeMetrics
argument_list|(
name|metrics
argument_list|,
name|metricsResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metricsResponse
operator|.
name|getAppsSubmitted
argument_list|()
operator|+
name|metricsClone
operator|.
name|getAppsSubmitted
argument_list|()
argument_list|,
name|metrics
operator|.
name|getAppsSubmitted
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metricsResponse
operator|.
name|getAppsCompleted
argument_list|()
operator|+
name|metricsClone
operator|.
name|getAppsCompleted
argument_list|()
argument_list|,
name|metrics
operator|.
name|getAppsCompleted
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metricsResponse
operator|.
name|getAppsPending
argument_list|()
operator|+
name|metricsClone
operator|.
name|getAppsPending
argument_list|()
argument_list|,
name|metrics
operator|.
name|getAppsPending
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metricsResponse
operator|.
name|getAppsRunning
argument_list|()
operator|+
name|metricsClone
operator|.
name|getAppsRunning
argument_list|()
argument_list|,
name|metrics
operator|.
name|getAppsRunning
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metricsResponse
operator|.
name|getAppsFailed
argument_list|()
operator|+
name|metricsClone
operator|.
name|getAppsFailed
argument_list|()
argument_list|,
name|metrics
operator|.
name|getAppsFailed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metricsResponse
operator|.
name|getAppsKilled
argument_list|()
operator|+
name|metricsClone
operator|.
name|getAppsKilled
argument_list|()
argument_list|,
name|metrics
operator|.
name|getAppsKilled
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metricsResponse
operator|.
name|getReservedMB
argument_list|()
operator|+
name|metricsClone
operator|.
name|getReservedMB
argument_list|()
argument_list|,
name|metrics
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metricsResponse
operator|.
name|getAvailableMB
argument_list|()
operator|+
name|metricsClone
operator|.
name|getAvailableMB
argument_list|()
argument_list|,
name|metrics
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metricsResponse
operator|.
name|getAllocatedMB
argument_list|()
operator|+
name|metricsClone
operator|.
name|getAllocatedMB
argument_list|()
argument_list|,
name|metrics
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metricsResponse
operator|.
name|getReservedVirtualCores
argument_list|()
operator|+
name|metricsClone
operator|.
name|getReservedVirtualCores
argument_list|()
argument_list|,
name|metrics
operator|.
name|getReservedVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metricsResponse
operator|.
name|getAvailableVirtualCores
argument_list|()
operator|+
name|metricsClone
operator|.
name|getAvailableVirtualCores
argument_list|()
argument_list|,
name|metrics
operator|.
name|getAvailableVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metricsResponse
operator|.
name|getAllocatedVirtualCores
argument_list|()
operator|+
name|metricsClone
operator|.
name|getAllocatedVirtualCores
argument_list|()
argument_list|,
name|metrics
operator|.
name|getAllocatedVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metricsResponse
operator|.
name|getContainersAllocated
argument_list|()
operator|+
name|metricsClone
operator|.
name|getContainersAllocated
argument_list|()
argument_list|,
name|metrics
operator|.
name|getContainersAllocated
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metricsResponse
operator|.
name|getReservedContainers
argument_list|()
operator|+
name|metricsClone
operator|.
name|getReservedContainers
argument_list|()
argument_list|,
name|metrics
operator|.
name|getReservedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metricsResponse
operator|.
name|getPendingContainers
argument_list|()
operator|+
name|metricsClone
operator|.
name|getPendingContainers
argument_list|()
argument_list|,
name|metrics
operator|.
name|getPendingContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metricsResponse
operator|.
name|getTotalMB
argument_list|()
operator|+
name|metricsClone
operator|.
name|getTotalMB
argument_list|()
argument_list|,
name|metrics
operator|.
name|getTotalMB
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metricsResponse
operator|.
name|getTotalVirtualCores
argument_list|()
operator|+
name|metricsClone
operator|.
name|getTotalVirtualCores
argument_list|()
argument_list|,
name|metrics
operator|.
name|getTotalVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metricsResponse
operator|.
name|getTotalNodes
argument_list|()
operator|+
name|metricsClone
operator|.
name|getTotalNodes
argument_list|()
argument_list|,
name|metrics
operator|.
name|getTotalNodes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metricsResponse
operator|.
name|getLostNodes
argument_list|()
operator|+
name|metricsClone
operator|.
name|getLostNodes
argument_list|()
argument_list|,
name|metrics
operator|.
name|getLostNodes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metricsResponse
operator|.
name|getUnhealthyNodes
argument_list|()
operator|+
name|metricsClone
operator|.
name|getUnhealthyNodes
argument_list|()
argument_list|,
name|metrics
operator|.
name|getUnhealthyNodes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metricsResponse
operator|.
name|getDecommissioningNodes
argument_list|()
operator|+
name|metricsClone
operator|.
name|getDecommissioningNodes
argument_list|()
argument_list|,
name|metrics
operator|.
name|getDecommissioningNodes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metricsResponse
operator|.
name|getDecommissionedNodes
argument_list|()
operator|+
name|metricsClone
operator|.
name|getDecommissionedNodes
argument_list|()
argument_list|,
name|metrics
operator|.
name|getDecommissionedNodes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metricsResponse
operator|.
name|getRebootedNodes
argument_list|()
operator|+
name|metricsClone
operator|.
name|getRebootedNodes
argument_list|()
argument_list|,
name|metrics
operator|.
name|getRebootedNodes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metricsResponse
operator|.
name|getActiveNodes
argument_list|()
operator|+
name|metricsClone
operator|.
name|getActiveNodes
argument_list|()
argument_list|,
name|metrics
operator|.
name|getActiveNodes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metricsResponse
operator|.
name|getShutdownNodes
argument_list|()
operator|+
name|metricsClone
operator|.
name|getShutdownNodes
argument_list|()
argument_list|,
name|metrics
operator|.
name|getShutdownNodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createClusterMetricsClone ( ClusterMetricsInfo metrics)
specifier|private
name|ClusterMetricsInfo
name|createClusterMetricsClone
parameter_list|(
name|ClusterMetricsInfo
name|metrics
parameter_list|)
block|{
name|ClusterMetricsInfo
name|metricsClone
init|=
operator|new
name|ClusterMetricsInfo
argument_list|()
decl_stmt|;
name|metricsClone
operator|.
name|setAppsSubmitted
argument_list|(
name|metrics
operator|.
name|getAppsSubmitted
argument_list|()
argument_list|)
expr_stmt|;
name|metricsClone
operator|.
name|setAppsCompleted
argument_list|(
name|metrics
operator|.
name|getAppsCompleted
argument_list|()
argument_list|)
expr_stmt|;
name|metricsClone
operator|.
name|setAppsPending
argument_list|(
name|metrics
operator|.
name|getAppsPending
argument_list|()
argument_list|)
expr_stmt|;
name|metricsClone
operator|.
name|setAppsRunning
argument_list|(
name|metrics
operator|.
name|getAppsRunning
argument_list|()
argument_list|)
expr_stmt|;
name|metricsClone
operator|.
name|setAppsFailed
argument_list|(
name|metrics
operator|.
name|getAppsFailed
argument_list|()
argument_list|)
expr_stmt|;
name|metricsClone
operator|.
name|setAppsKilled
argument_list|(
name|metrics
operator|.
name|getAppsKilled
argument_list|()
argument_list|)
expr_stmt|;
name|metricsClone
operator|.
name|setReservedMB
argument_list|(
name|metrics
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
name|metricsClone
operator|.
name|setAvailableMB
argument_list|(
name|metrics
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
name|metricsClone
operator|.
name|setAllocatedMB
argument_list|(
name|metrics
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
name|metricsClone
operator|.
name|setReservedVirtualCores
argument_list|(
name|metrics
operator|.
name|getReservedVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|metricsClone
operator|.
name|setAvailableVirtualCores
argument_list|(
name|metrics
operator|.
name|getAvailableVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|metricsClone
operator|.
name|setAllocatedVirtualCores
argument_list|(
name|metrics
operator|.
name|getAllocatedVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|metricsClone
operator|.
name|setContainersAllocated
argument_list|(
name|metrics
operator|.
name|getContainersAllocated
argument_list|()
argument_list|)
expr_stmt|;
name|metricsClone
operator|.
name|setContainersReserved
argument_list|(
name|metrics
operator|.
name|getReservedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|metricsClone
operator|.
name|setContainersPending
argument_list|(
name|metrics
operator|.
name|getPendingContainers
argument_list|()
argument_list|)
expr_stmt|;
name|metricsClone
operator|.
name|setTotalMB
argument_list|(
name|metrics
operator|.
name|getTotalMB
argument_list|()
argument_list|)
expr_stmt|;
name|metricsClone
operator|.
name|setTotalVirtualCores
argument_list|(
name|metrics
operator|.
name|getTotalVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|metricsClone
operator|.
name|setTotalNodes
argument_list|(
name|metrics
operator|.
name|getTotalNodes
argument_list|()
argument_list|)
expr_stmt|;
name|metricsClone
operator|.
name|setLostNodes
argument_list|(
name|metrics
operator|.
name|getLostNodes
argument_list|()
argument_list|)
expr_stmt|;
name|metricsClone
operator|.
name|setUnhealthyNodes
argument_list|(
name|metrics
operator|.
name|getUnhealthyNodes
argument_list|()
argument_list|)
expr_stmt|;
name|metricsClone
operator|.
name|setDecommissioningNodes
argument_list|(
name|metrics
operator|.
name|getDecommissioningNodes
argument_list|()
argument_list|)
expr_stmt|;
name|metricsClone
operator|.
name|setDecommissionedNodes
argument_list|(
name|metrics
operator|.
name|getDecommissionedNodes
argument_list|()
argument_list|)
expr_stmt|;
name|metricsClone
operator|.
name|setRebootedNodes
argument_list|(
name|metrics
operator|.
name|getRebootedNodes
argument_list|()
argument_list|)
expr_stmt|;
name|metricsClone
operator|.
name|setActiveNodes
argument_list|(
name|metrics
operator|.
name|getActiveNodes
argument_list|()
argument_list|)
expr_stmt|;
name|metricsClone
operator|.
name|setShutdownNodes
argument_list|(
name|metrics
operator|.
name|getShutdownNodes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|metricsClone
return|;
block|}
DECL|method|setUpClusterMetrics (ClusterMetricsInfo metrics)
specifier|private
name|void
name|setUpClusterMetrics
parameter_list|(
name|ClusterMetricsInfo
name|metrics
parameter_list|)
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|metrics
operator|.
name|setAppsSubmitted
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setAppsCompleted
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setAppsPending
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setAppsRunning
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setAppsFailed
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setAppsKilled
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setReservedMB
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setAvailableMB
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setAllocatedMB
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setReservedVirtualCores
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setAvailableVirtualCores
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setAllocatedVirtualCores
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setContainersAllocated
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setContainersReserved
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setContainersPending
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setTotalMB
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setTotalVirtualCores
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setTotalNodes
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setLostNodes
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setUnhealthyNodes
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setDecommissioningNodes
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setDecommissionedNodes
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setRebootedNodes
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setActiveNodes
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setShutdownNodes
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

