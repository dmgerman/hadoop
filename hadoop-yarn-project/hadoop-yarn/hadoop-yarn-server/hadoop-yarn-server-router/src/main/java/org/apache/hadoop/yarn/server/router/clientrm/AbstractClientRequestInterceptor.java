begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.router.clientrm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|router
operator|.
name|clientrm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implements the {@link ClientRequestInterceptor} interface and provides common  * functionality which can can be used and/or extended by other concrete  * intercepter classes.  *  */
end_comment

begin_class
DECL|class|AbstractClientRequestInterceptor
specifier|public
specifier|abstract
class|class
name|AbstractClientRequestInterceptor
implements|implements
name|ClientRequestInterceptor
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractClientRequestInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|nextInterceptor
specifier|private
name|ClientRequestInterceptor
name|nextInterceptor
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"checkstyle:visibilitymodifier"
argument_list|)
DECL|field|user
specifier|protected
name|UserGroupInformation
name|user
init|=
literal|null
decl_stmt|;
comment|/**    * Sets the {@link ClientRequestInterceptor} in the chain.    */
annotation|@
name|Override
DECL|method|setNextInterceptor (ClientRequestInterceptor nextInterceptor)
specifier|public
name|void
name|setNextInterceptor
parameter_list|(
name|ClientRequestInterceptor
name|nextInterceptor
parameter_list|)
block|{
name|this
operator|.
name|nextInterceptor
operator|=
name|nextInterceptor
expr_stmt|;
block|}
comment|/**    * Sets the {@link Configuration}.    */
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|nextInterceptor
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|nextInterceptor
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Gets the {@link Configuration}.    */
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
comment|/**    * Initializes the {@link ClientRequestInterceptor}.    */
annotation|@
name|Override
DECL|method|init (String userName)
specifier|public
name|void
name|init
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|setupUser
argument_list|(
name|userName
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|nextInterceptor
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|nextInterceptor
operator|.
name|init
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Disposes the {@link ClientRequestInterceptor}.    */
annotation|@
name|Override
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|nextInterceptor
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|nextInterceptor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Gets the next {@link ClientRequestInterceptor} in the chain.    */
annotation|@
name|Override
DECL|method|getNextInterceptor ()
specifier|public
name|ClientRequestInterceptor
name|getNextInterceptor
parameter_list|()
block|{
return|return
name|this
operator|.
name|nextInterceptor
return|;
block|}
DECL|method|setupUser (String userName)
specifier|private
name|void
name|setupUser
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
try|try
block|{
comment|// Do not create a proxy user if user name matches the user name on
comment|// current UGI
if|if
condition|(
name|userName
operator|.
name|equalsIgnoreCase
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
condition|)
block|{
name|user
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|user
operator|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|userName
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Error while creating Router ClientRM Service for user:"
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|message
operator|+=
literal|", user: "
operator|+
name|user
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

