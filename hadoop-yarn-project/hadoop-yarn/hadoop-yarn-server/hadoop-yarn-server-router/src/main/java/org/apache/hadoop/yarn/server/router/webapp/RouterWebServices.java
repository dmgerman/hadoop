begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.router.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|router
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DefaultValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|FormParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|JettyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|RMWSConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|RMWebServiceProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ActivitiesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppActivitiesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppAttemptsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppTimeoutInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppTimeoutsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ApplicationStatisticsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ApplicationSubmissionContextInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ClusterMetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|DelegationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|LabelsToNodesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodeLabelsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodeToLabelsEntryList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodeToLabelsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|RMQueueAclInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ReservationDeleteRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ReservationSubmissionRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ReservationUpdateRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|SchedulerTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|router
operator|.
name|Router
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ContainersInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|LRUCacheHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_comment
comment|/**  * RouterWebServices is a service that runs on each router that can be used to  * intercept and inspect {@link RMWebServiceProtocol} messages from client to  * the cluster resource manager. It listens {@link RMWebServiceProtocol} REST  * messages from the client and creates a request intercepting pipeline instance  * for each client. The pipeline is a chain of {@link RESTRequestInterceptor}  * instances that can inspect and modify the request/response as needed. The  * main difference with AMRMProxyService is the protocol they implement.  **/
end_comment

begin_class
annotation|@
name|Singleton
annotation|@
name|Path
argument_list|(
literal|"/ws/v1/cluster"
argument_list|)
DECL|class|RouterWebServices
specifier|public
class|class
name|RouterWebServices
implements|implements
name|RMWebServiceProtocol
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RouterWebServices
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|router
specifier|private
specifier|final
name|Router
name|router
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|response
specifier|private
annotation|@
name|Context
name|HttpServletResponse
name|response
decl_stmt|;
DECL|field|userPipelineMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|RequestInterceptorChainWrapper
argument_list|>
name|userPipelineMap
decl_stmt|;
comment|// -------Default values of QueryParams for RMWebServiceProtocol--------
DECL|field|DEFAULT_QUEUE
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_QUEUE
init|=
literal|"default"
decl_stmt|;
DECL|field|DEFAULT_RESERVATION_ID
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_RESERVATION_ID
init|=
literal|""
decl_stmt|;
DECL|field|DEFAULT_START_TIME
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_START_TIME
init|=
literal|"0"
decl_stmt|;
DECL|field|DEFAULT_END_TIME
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_END_TIME
init|=
literal|"-1"
decl_stmt|;
DECL|field|DEFAULT_INCLUDE_RESOURCE
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_INCLUDE_RESOURCE
init|=
literal|"false"
decl_stmt|;
annotation|@
name|Inject
DECL|method|RouterWebServices (final Router router, Configuration conf)
specifier|public
name|RouterWebServices
parameter_list|(
specifier|final
name|Router
name|router
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|router
operator|=
name|router
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|int
name|maxCacheSize
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|ROUTER_PIPELINE_CACHE_MAX_SIZE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_ROUTER_PIPELINE_CACHE_MAX_SIZE
argument_list|)
decl_stmt|;
name|this
operator|.
name|userPipelineMap
operator|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|LRUCacheHashMap
argument_list|<
name|String
argument_list|,
name|RequestInterceptorChainWrapper
argument_list|>
argument_list|(
name|maxCacheSize
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the comma separated intercepter class names from the configuration.    *    * @param conf    * @return the intercepter class names as an instance of ArrayList    */
DECL|method|getInterceptorClassNames (Configuration config)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getInterceptorClassNames
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|String
name|configuredInterceptorClassNames
init|=
name|config
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|ROUTER_WEBAPP_INTERCEPTOR_CLASS_PIPELINE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_ROUTER_WEBAPP_INTERCEPTOR_CLASS
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|interceptorClassNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|tempList
init|=
name|StringUtils
operator|.
name|getStringCollection
argument_list|(
name|configuredInterceptorClassNames
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|item
range|:
name|tempList
control|)
block|{
name|interceptorClassNames
operator|.
name|add
argument_list|(
name|item
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|interceptorClassNames
return|;
block|}
DECL|method|init ()
specifier|private
name|void
name|init
parameter_list|()
block|{
comment|// clear content type
name|response
operator|.
name|setContentType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getInterceptorChain ( final HttpServletRequest hsr)
specifier|protected
name|RequestInterceptorChainWrapper
name|getInterceptorChain
parameter_list|(
specifier|final
name|HttpServletRequest
name|hsr
parameter_list|)
block|{
name|String
name|user
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|hsr
operator|!=
literal|null
condition|)
block|{
name|user
operator|=
name|hsr
operator|.
name|getRemoteUser
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|user
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
comment|// Yarn Router user
name|user
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot get user: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RequestInterceptorChainWrapper
name|chain
init|=
name|userPipelineMap
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|chain
operator|!=
literal|null
operator|&&
name|chain
operator|.
name|getRootInterceptor
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|chain
return|;
block|}
return|return
name|initializePipeline
argument_list|(
name|user
argument_list|)
return|;
block|}
comment|/**    * Gets the Request intercepter chains for all the users.    *    * @return the request intercepter chains.    */
annotation|@
name|VisibleForTesting
DECL|method|getPipelines ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|RequestInterceptorChainWrapper
argument_list|>
name|getPipelines
parameter_list|()
block|{
return|return
name|this
operator|.
name|userPipelineMap
return|;
block|}
comment|/**    * This method creates and returns reference of the first intercepter in the    * chain of request intercepter instances.    *    * @return the reference of the first intercepter in the chain    */
annotation|@
name|VisibleForTesting
DECL|method|createRequestInterceptorChain ()
specifier|protected
name|RESTRequestInterceptor
name|createRequestInterceptorChain
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|interceptorClassNames
init|=
name|getInterceptorClassNames
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|RESTRequestInterceptor
name|pipeline
init|=
literal|null
decl_stmt|;
name|RESTRequestInterceptor
name|current
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|interceptorClassName
range|:
name|interceptorClassNames
control|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|interceptorClass
init|=
name|conf
operator|.
name|getClassByName
argument_list|(
name|interceptorClassName
argument_list|)
decl_stmt|;
if|if
condition|(
name|RESTRequestInterceptor
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|interceptorClass
argument_list|)
condition|)
block|{
name|RESTRequestInterceptor
name|interceptorInstance
init|=
operator|(
name|RESTRequestInterceptor
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|interceptorClass
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|pipeline
operator|==
literal|null
condition|)
block|{
name|pipeline
operator|=
name|interceptorInstance
expr_stmt|;
name|current
operator|=
name|interceptorInstance
expr_stmt|;
continue|continue;
block|}
else|else
block|{
name|current
operator|.
name|setNextInterceptor
argument_list|(
name|interceptorInstance
argument_list|)
expr_stmt|;
name|current
operator|=
name|interceptorInstance
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Class: "
operator|+
name|interceptorClassName
operator|+
literal|" not instance of "
operator|+
name|RESTRequestInterceptor
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Could not instantiate RESTRequestInterceptor: "
operator|+
name|interceptorClassName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|pipeline
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"RequestInterceptor pipeline is not configured in the system"
argument_list|)
throw|;
block|}
return|return
name|pipeline
return|;
block|}
comment|/**    * Initializes the request intercepter pipeline for the specified user.    *    * @param user    */
DECL|method|initializePipeline (String user)
specifier|private
name|RequestInterceptorChainWrapper
name|initializePipeline
parameter_list|(
name|String
name|user
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|userPipelineMap
init|)
block|{
if|if
condition|(
name|this
operator|.
name|userPipelineMap
operator|.
name|containsKey
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Request to start an already existing user: {}"
operator|+
literal|" was received, so ignoring."
argument_list|,
name|user
argument_list|)
expr_stmt|;
return|return
name|userPipelineMap
operator|.
name|get
argument_list|(
name|user
argument_list|)
return|;
block|}
name|RequestInterceptorChainWrapper
name|chainWrapper
init|=
operator|new
name|RequestInterceptorChainWrapper
argument_list|()
decl_stmt|;
try|try
block|{
comment|// We should init the pipeline instance after it is created and then
comment|// add to the map, to ensure thread safe.
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing request processing pipeline for user: {}"
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|RESTRequestInterceptor
name|interceptorChain
init|=
name|this
operator|.
name|createRequestInterceptorChain
argument_list|()
decl_stmt|;
name|interceptorChain
operator|.
name|init
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|chainWrapper
operator|.
name|init
argument_list|(
name|interceptorChain
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Init RESTRequestInterceptor error for user: "
operator|+
name|user
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|this
operator|.
name|userPipelineMap
operator|.
name|put
argument_list|(
name|user
argument_list|,
name|chainWrapper
argument_list|)
expr_stmt|;
return|return
name|chainWrapper
return|;
block|}
block|}
comment|/**    * Private structure for encapsulating RequestInterceptor and user instances.    *    */
annotation|@
name|Private
DECL|class|RequestInterceptorChainWrapper
specifier|public
specifier|static
class|class
name|RequestInterceptorChainWrapper
block|{
DECL|field|rootInterceptor
specifier|private
name|RESTRequestInterceptor
name|rootInterceptor
decl_stmt|;
comment|/**      * Initializes the wrapper with the specified parameters.      *      * @param interceptor the first interceptor in the pipeline      */
DECL|method|init (RESTRequestInterceptor interceptor)
specifier|public
specifier|synchronized
name|void
name|init
parameter_list|(
name|RESTRequestInterceptor
name|interceptor
parameter_list|)
block|{
name|this
operator|.
name|rootInterceptor
operator|=
name|interceptor
expr_stmt|;
block|}
comment|/**      * Gets the root request intercepter.      *      * @return the root request intercepter      */
DECL|method|getRootInterceptor ()
specifier|public
specifier|synchronized
name|RESTRequestInterceptor
name|getRootInterceptor
parameter_list|()
block|{
return|return
name|rootInterceptor
return|;
block|}
comment|/**      * Shutdown the chain of interceptors when the object is destroyed.      */
annotation|@
name|Override
DECL|method|finalize ()
specifier|protected
name|void
name|finalize
parameter_list|()
block|{
name|rootInterceptor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|ClusterInfo
name|get
parameter_list|()
block|{
return|return
name|getClusterInfo
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|INFO
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getClusterInfo ()
specifier|public
name|ClusterInfo
name|getClusterInfo
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
literal|null
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|getClusterInfo
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|METRICS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getClusterMetricsInfo ()
specifier|public
name|ClusterMetricsInfo
name|getClusterMetricsInfo
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
literal|null
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|getClusterMetricsInfo
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|SCHEDULER
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getSchedulerInfo ()
specifier|public
name|SchedulerTypeInfo
name|getSchedulerInfo
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
literal|null
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|getSchedulerInfo
argument_list|()
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|SCHEDULER_LOGS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|dumpSchedulerLogs (@ormParamRMWSConsts.TIME) String time, @Context HttpServletRequest hsr)
specifier|public
name|String
name|dumpSchedulerLogs
parameter_list|(
annotation|@
name|FormParam
argument_list|(
name|RMWSConsts
operator|.
name|TIME
argument_list|)
name|String
name|time
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|IOException
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|dumpSchedulerLogs
argument_list|(
name|time
argument_list|,
name|hsr
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|NODES
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getNodes (@ueryParamRMWSConsts.STATES) String states)
specifier|public
name|NodesInfo
name|getNodes
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|STATES
argument_list|)
name|String
name|states
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
literal|null
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|getNodes
argument_list|(
name|states
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|NODES_NODEID
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getNode (@athParamRMWSConsts.NODEID) String nodeId)
specifier|public
name|NodeInfo
name|getNode
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|NODEID
argument_list|)
name|String
name|nodeId
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
literal|null
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|getNode
argument_list|(
name|nodeId
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getApps (@ontext HttpServletRequest hsr, @QueryParam(RMWSConsts.STATE) String stateQuery, @QueryParam(RMWSConsts.STATES) Set<String> statesQuery, @QueryParam(RMWSConsts.FINAL_STATUS) String finalStatusQuery, @QueryParam(RMWSConsts.USER) String userQuery, @QueryParam(RMWSConsts.QUEUE) String queueQuery, @QueryParam(RMWSConsts.LIMIT) String count, @QueryParam(RMWSConsts.STARTED_TIME_BEGIN) String startedBegin, @QueryParam(RMWSConsts.STARTED_TIME_END) String startedEnd, @QueryParam(RMWSConsts.FINISHED_TIME_BEGIN) String finishBegin, @QueryParam(RMWSConsts.FINISHED_TIME_END) String finishEnd, @QueryParam(RMWSConsts.APPLICATION_TYPES) Set<String> applicationTypes, @QueryParam(RMWSConsts.APPLICATION_TAGS) Set<String> applicationTags, @QueryParam(RMWSConsts.DESELECTS) Set<String> unselectedFields)
specifier|public
name|AppsInfo
name|getApps
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|STATE
argument_list|)
name|String
name|stateQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|STATES
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|statesQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|FINAL_STATUS
argument_list|)
name|String
name|finalStatusQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|USER
argument_list|)
name|String
name|userQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|QUEUE
argument_list|)
name|String
name|queueQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|LIMIT
argument_list|)
name|String
name|count
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|STARTED_TIME_BEGIN
argument_list|)
name|String
name|startedBegin
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|STARTED_TIME_END
argument_list|)
name|String
name|startedEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|FINISHED_TIME_BEGIN
argument_list|)
name|String
name|finishBegin
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|FINISHED_TIME_END
argument_list|)
name|String
name|finishEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|APPLICATION_TYPES
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|applicationTypes
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|APPLICATION_TAGS
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|applicationTags
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|DESELECTS
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|unselectedFields
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|getApps
argument_list|(
name|hsr
argument_list|,
name|stateQuery
argument_list|,
name|statesQuery
argument_list|,
name|finalStatusQuery
argument_list|,
name|userQuery
argument_list|,
name|queueQuery
argument_list|,
name|count
argument_list|,
name|startedBegin
argument_list|,
name|startedEnd
argument_list|,
name|finishBegin
argument_list|,
name|finishEnd
argument_list|,
name|applicationTypes
argument_list|,
name|applicationTags
argument_list|,
name|unselectedFields
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|SCHEDULER_ACTIVITIES
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getActivities (@ontext HttpServletRequest hsr, @QueryParam(RMWSConsts.NODEID) String nodeId)
specifier|public
name|ActivitiesInfo
name|getActivities
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|NODEID
argument_list|)
name|String
name|nodeId
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|getActivities
argument_list|(
name|hsr
argument_list|,
name|nodeId
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|SCHEDULER_APP_ACTIVITIES
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getAppActivities (@ontext HttpServletRequest hsr, @QueryParam(RMWSConsts.APP_ID) String appId, @QueryParam(RMWSConsts.MAX_TIME) String time)
specifier|public
name|AppActivitiesInfo
name|getAppActivities
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|APP_ID
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|MAX_TIME
argument_list|)
name|String
name|time
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|getAppActivities
argument_list|(
name|hsr
argument_list|,
name|appId
argument_list|,
name|time
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APP_STATISTICS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getAppStatistics ( @ontext HttpServletRequest hsr, @QueryParam(RMWSConsts.STATES) Set<String> stateQueries, @QueryParam(RMWSConsts.APPLICATION_TYPES) Set<String> typeQueries)
specifier|public
name|ApplicationStatisticsInfo
name|getAppStatistics
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|STATES
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|stateQueries
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|APPLICATION_TYPES
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|typeQueries
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|getAppStatistics
argument_list|(
name|hsr
argument_list|,
name|stateQueries
argument_list|,
name|typeQueries
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS_APPID
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getApp (@ontext HttpServletRequest hsr, @PathParam(RMWSConsts.APPID) String appId, @QueryParam(RMWSConsts.DESELECTS) Set<String> unselectedFields)
specifier|public
name|AppInfo
name|getApp
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPID
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|DESELECTS
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|unselectedFields
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|getApp
argument_list|(
name|hsr
argument_list|,
name|appId
argument_list|,
name|unselectedFields
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS_APPID_STATE
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getAppState (@ontext HttpServletRequest hsr, @PathParam(RMWSConsts.APPID) String appId)
specifier|public
name|AppState
name|getAppState
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPID
argument_list|)
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|getAppState
argument_list|(
name|hsr
argument_list|,
name|appId
argument_list|)
return|;
block|}
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS_APPID_STATE
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|updateAppState (AppState targetState, @Context HttpServletRequest hsr, @PathParam(RMWSConsts.APPID) String appId)
specifier|public
name|Response
name|updateAppState
parameter_list|(
name|AppState
name|targetState
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPID
argument_list|)
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|YarnException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|updateAppState
argument_list|(
name|targetState
argument_list|,
name|hsr
argument_list|,
name|appId
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|GET_NODE_TO_LABELS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getNodeToLabels (@ontext HttpServletRequest hsr)
specifier|public
name|NodeToLabelsInfo
name|getNodeToLabels
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|IOException
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|getNodeToLabels
argument_list|(
name|hsr
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|LABEL_MAPPINGS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getLabelsToNodes ( @ueryParamRMWSConsts.LABELS) Set<String> labels)
specifier|public
name|LabelsToNodesInfo
name|getLabelsToNodes
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|LABELS
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|labels
parameter_list|)
throws|throws
name|IOException
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
literal|null
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|getLabelsToNodes
argument_list|(
name|labels
argument_list|)
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|REPLACE_NODE_TO_LABELS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|replaceLabelsOnNodes ( final NodeToLabelsEntryList newNodeToLabels, @Context HttpServletRequest hsr)
specifier|public
name|Response
name|replaceLabelsOnNodes
parameter_list|(
specifier|final
name|NodeToLabelsEntryList
name|newNodeToLabels
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|replaceLabelsOnNodes
argument_list|(
name|newNodeToLabels
argument_list|,
name|hsr
argument_list|)
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|NODES_NODEID_REPLACE_LABELS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|replaceLabelsOnNode ( @ueryParamRMWSConsts.LABELS) Set<String> newNodeLabelsName, @Context HttpServletRequest hsr, @PathParam(RMWSConsts.NODEID) String nodeId)
specifier|public
name|Response
name|replaceLabelsOnNode
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|LABELS
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|newNodeLabelsName
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|NODEID
argument_list|)
name|String
name|nodeId
parameter_list|)
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|replaceLabelsOnNode
argument_list|(
name|newNodeLabelsName
argument_list|,
name|hsr
argument_list|,
name|nodeId
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|GET_NODE_LABELS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getClusterNodeLabels (@ontext HttpServletRequest hsr)
specifier|public
name|NodeLabelsInfo
name|getClusterNodeLabels
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|IOException
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|getClusterNodeLabels
argument_list|(
name|hsr
argument_list|)
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|ADD_NODE_LABELS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|addToClusterNodeLabels (NodeLabelsInfo newNodeLabels, @Context HttpServletRequest hsr)
specifier|public
name|Response
name|addToClusterNodeLabels
parameter_list|(
name|NodeLabelsInfo
name|newNodeLabels
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|addToClusterNodeLabels
argument_list|(
name|newNodeLabels
argument_list|,
name|hsr
argument_list|)
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|REMOVE_NODE_LABELS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|removeFromCluserNodeLabels ( @ueryParamRMWSConsts.LABELS) Set<String> oldNodeLabels, @Context HttpServletRequest hsr)
specifier|public
name|Response
name|removeFromCluserNodeLabels
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|LABELS
argument_list|)
name|Set
argument_list|<
name|String
argument_list|>
name|oldNodeLabels
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|removeFromCluserNodeLabels
argument_list|(
name|oldNodeLabels
argument_list|,
name|hsr
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|NODES_NODEID_GETLABELS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getLabelsOnNode (@ontext HttpServletRequest hsr, @PathParam(RMWSConsts.NODEID) String nodeId)
specifier|public
name|NodeLabelsInfo
name|getLabelsOnNode
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|NODEID
argument_list|)
name|String
name|nodeId
parameter_list|)
throws|throws
name|IOException
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|getLabelsOnNode
argument_list|(
name|hsr
argument_list|,
name|nodeId
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS_APPID_PRIORITY
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getAppPriority (@ontext HttpServletRequest hsr, @PathParam(RMWSConsts.APPID) String appId)
specifier|public
name|AppPriority
name|getAppPriority
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPID
argument_list|)
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|getAppPriority
argument_list|(
name|hsr
argument_list|,
name|appId
argument_list|)
return|;
block|}
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS_APPID_PRIORITY
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|updateApplicationPriority (AppPriority targetPriority, @Context HttpServletRequest hsr, @PathParam(RMWSConsts.APPID) String appId)
specifier|public
name|Response
name|updateApplicationPriority
parameter_list|(
name|AppPriority
name|targetPriority
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPID
argument_list|)
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|YarnException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|updateApplicationPriority
argument_list|(
name|targetPriority
argument_list|,
name|hsr
argument_list|,
name|appId
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS_APPID_QUEUE
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getAppQueue (@ontext HttpServletRequest hsr, @PathParam(RMWSConsts.APPID) String appId)
specifier|public
name|AppQueue
name|getAppQueue
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPID
argument_list|)
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|getAppQueue
argument_list|(
name|hsr
argument_list|,
name|appId
argument_list|)
return|;
block|}
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS_APPID_QUEUE
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|updateAppQueue (AppQueue targetQueue, @Context HttpServletRequest hsr, @PathParam(RMWSConsts.APPID) String appId)
specifier|public
name|Response
name|updateAppQueue
parameter_list|(
name|AppQueue
name|targetQueue
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPID
argument_list|)
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|YarnException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|updateAppQueue
argument_list|(
name|targetQueue
argument_list|,
name|hsr
argument_list|,
name|appId
argument_list|)
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS_NEW_APPLICATION
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|createNewApplication (@ontext HttpServletRequest hsr)
specifier|public
name|Response
name|createNewApplication
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|createNewApplication
argument_list|(
name|hsr
argument_list|)
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|submitApplication (ApplicationSubmissionContextInfo newApp, @Context HttpServletRequest hsr)
specifier|public
name|Response
name|submitApplication
parameter_list|(
name|ApplicationSubmissionContextInfo
name|newApp
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|submitApplication
argument_list|(
name|newApp
argument_list|,
name|hsr
argument_list|)
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|DELEGATION_TOKEN
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|postDelegationToken (DelegationToken tokenData, @Context HttpServletRequest hsr)
specifier|public
name|Response
name|postDelegationToken
parameter_list|(
name|DelegationToken
name|tokenData
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
throws|,
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|postDelegationToken
argument_list|(
name|tokenData
argument_list|,
name|hsr
argument_list|)
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|DELEGATION_TOKEN_EXPIRATION
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|postDelegationTokenExpiration (@ontext HttpServletRequest hsr)
specifier|public
name|Response
name|postDelegationTokenExpiration
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|postDelegationTokenExpiration
argument_list|(
name|hsr
argument_list|)
return|;
block|}
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|DELEGATION_TOKEN
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|cancelDelegationToken (@ontext HttpServletRequest hsr)
specifier|public
name|Response
name|cancelDelegationToken
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
throws|,
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|cancelDelegationToken
argument_list|(
name|hsr
argument_list|)
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|RESERVATION_NEW
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|createNewReservation (@ontext HttpServletRequest hsr)
specifier|public
name|Response
name|createNewReservation
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|createNewReservation
argument_list|(
name|hsr
argument_list|)
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|RESERVATION_SUBMIT
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|submitReservation (ReservationSubmissionRequestInfo resContext, @Context HttpServletRequest hsr)
specifier|public
name|Response
name|submitReservation
parameter_list|(
name|ReservationSubmissionRequestInfo
name|resContext
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|submitReservation
argument_list|(
name|resContext
argument_list|,
name|hsr
argument_list|)
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|RESERVATION_UPDATE
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|updateReservation (ReservationUpdateRequestInfo resContext, @Context HttpServletRequest hsr)
specifier|public
name|Response
name|updateReservation
parameter_list|(
name|ReservationUpdateRequestInfo
name|resContext
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|updateReservation
argument_list|(
name|resContext
argument_list|,
name|hsr
argument_list|)
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|RESERVATION_DELETE
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|deleteReservation (ReservationDeleteRequestInfo resContext, @Context HttpServletRequest hsr)
specifier|public
name|Response
name|deleteReservation
parameter_list|(
name|ReservationDeleteRequestInfo
name|resContext
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|deleteReservation
argument_list|(
name|resContext
argument_list|,
name|hsr
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|RESERVATION_LIST
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|listReservation ( @ueryParamRMWSConsts.QUEUE) @efaultValueDEFAULT_QUEUE) String queue, @QueryParam(RMWSConsts.RESERVATION_ID) @DefaultValue(DEFAULT_RESERVATION_ID) String reservationId, @QueryParam(RMWSConsts.START_TIME) @DefaultValue(DEFAULT_START_TIME) long startTime, @QueryParam(RMWSConsts.END_TIME) @DefaultValue(DEFAULT_END_TIME) long endTime, @QueryParam(RMWSConsts.INCLUDE_RESOURCE) @DefaultValue(DEFAULT_INCLUDE_RESOURCE) boolean includeResourceAllocations, @Context HttpServletRequest hsr)
specifier|public
name|Response
name|listReservation
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|QUEUE
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DEFAULT_QUEUE
argument_list|)
name|String
name|queue
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|RESERVATION_ID
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DEFAULT_RESERVATION_ID
argument_list|)
name|String
name|reservationId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|START_TIME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DEFAULT_START_TIME
argument_list|)
name|long
name|startTime
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|END_TIME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DEFAULT_END_TIME
argument_list|)
name|long
name|endTime
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|INCLUDE_RESOURCE
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DEFAULT_INCLUDE_RESOURCE
argument_list|)
name|boolean
name|includeResourceAllocations
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|listReservation
argument_list|(
name|queue
argument_list|,
name|reservationId
argument_list|,
name|startTime
argument_list|,
name|endTime
argument_list|,
name|includeResourceAllocations
argument_list|,
name|hsr
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS_TIMEOUTS_TYPE
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getAppTimeout (@ontext HttpServletRequest hsr, @PathParam(RMWSConsts.APPID) String appId, @PathParam(RMWSConsts.TYPE) String type)
specifier|public
name|AppTimeoutInfo
name|getAppTimeout
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPID
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|TYPE
argument_list|)
name|String
name|type
parameter_list|)
throws|throws
name|AuthorizationException
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|getAppTimeout
argument_list|(
name|hsr
argument_list|,
name|appId
argument_list|,
name|type
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS_TIMEOUTS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getAppTimeouts (@ontext HttpServletRequest hsr, @PathParam(RMWSConsts.APPID) String appId)
specifier|public
name|AppTimeoutsInfo
name|getAppTimeouts
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPID
argument_list|)
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|getAppTimeouts
argument_list|(
name|hsr
argument_list|,
name|appId
argument_list|)
return|;
block|}
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS_TIMEOUT
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|updateApplicationTimeout (AppTimeoutInfo appTimeout, @Context HttpServletRequest hsr, @PathParam(RMWSConsts.APPID) String appId)
specifier|public
name|Response
name|updateApplicationTimeout
parameter_list|(
name|AppTimeoutInfo
name|appTimeout
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPID
argument_list|)
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|YarnException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|updateApplicationTimeout
argument_list|(
name|appTimeout
argument_list|,
name|hsr
argument_list|,
name|appId
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS_APPID_APPATTEMPTS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|getAppAttempts (@ontext HttpServletRequest hsr, @PathParam(RMWSConsts.APPID) String appId)
specifier|public
name|AppAttemptsInfo
name|getAppAttempts
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPID
argument_list|)
name|String
name|appId
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|getAppAttempts
argument_list|(
name|hsr
argument_list|,
name|appId
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|CHECK_USER_ACCESS_TO_QUEUE
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Override
DECL|method|checkUserAccessToQueue ( @athParamRMWSConsts.QUEUE) String queue, @QueryParam(RMWSConsts.USER) String username, @QueryParam(RMWSConsts.QUEUE_ACL_TYPE) @DefaultValue(R) String queueAclType, @Context HttpServletRequest hsr)
specifier|public
name|RMQueueAclInfo
name|checkUserAccessToQueue
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|QUEUE
argument_list|)
name|String
name|queue
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|USER
argument_list|)
name|String
name|username
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RMWSConsts
operator|.
name|QUEUE_ACL_TYPE
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
literal|"SUBMIT_APPLICATIONS"
argument_list|)
name|String
name|queueAclType
parameter_list|,
annotation|@
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|hsr
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|checkUserAccessToQueue
argument_list|(
name|queue
argument_list|,
name|username
argument_list|,
name|queueAclType
argument_list|,
name|hsr
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS_APPID_APPATTEMPTS_APPATTEMPTID
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
DECL|method|getAppAttempt ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(RMWSConsts.APPID) String appId, @PathParam(RMWSConsts.APPATTEMPTID) String appAttemptId)
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppAttemptInfo
name|getAppAttempt
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPID
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPATTEMPTID
argument_list|)
name|String
name|appAttemptId
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|req
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|getAppAttempt
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|appId
argument_list|,
name|appAttemptId
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|APPS_APPID_APPATTEMPTS_APPATTEMPTID_CONTAINERS
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
DECL|method|getContainers (@ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(RMWSConsts.APPID) String appId, @PathParam(RMWSConsts.APPATTEMPTID) String appAttemptId)
specifier|public
name|ContainersInfo
name|getContainers
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPID
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPATTEMPTID
argument_list|)
name|String
name|appAttemptId
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|req
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|getContainers
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|appId
argument_list|,
name|appAttemptId
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|RMWSConsts
operator|.
name|GET_CONTAINER
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
DECL|method|getContainer (@ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(RMWSConsts.APPID) String appId, @PathParam(RMWSConsts.APPATTEMPTID) String appAttemptId, @PathParam(RMWSConsts.CONTAINERID) String containerId)
specifier|public
name|ContainerInfo
name|getContainer
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPID
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|APPATTEMPTID
argument_list|)
name|String
name|appAttemptId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|RMWSConsts
operator|.
name|CONTAINERID
argument_list|)
name|String
name|containerId
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|req
argument_list|)
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|getContainer
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|appId
argument_list|,
name|appAttemptId
argument_list|,
name|containerId
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setResponse (HttpServletResponse response)
specifier|protected
name|void
name|setResponse
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|)
block|{
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
block|}
block|}
end_class

end_unit

