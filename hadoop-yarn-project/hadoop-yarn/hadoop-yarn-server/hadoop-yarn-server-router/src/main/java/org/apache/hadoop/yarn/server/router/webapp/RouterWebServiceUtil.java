begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.router.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|router
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
operator|.
name|SC_NO_CONTENT
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
operator|.
name|SC_OK
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|RMWebAppUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ClusterMetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|uam
operator|.
name|UnmanagedApplicationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|ForbiddenException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|ConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|core
operator|.
name|util
operator|.
name|MultivaluedMapImpl
import|;
end_import

begin_comment
comment|/**  * The Router webservice util class.  */
end_comment

begin_class
DECL|class|RouterWebServiceUtil
specifier|public
specifier|final
class|class
name|RouterWebServiceUtil
block|{
DECL|field|user
specifier|private
specifier|static
name|String
name|user
init|=
literal|"YarnRouter"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RouterWebServiceUtil
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|PARTIAL_REPORT
specifier|private
specifier|final
specifier|static
name|String
name|PARTIAL_REPORT
init|=
literal|"Partial Report "
decl_stmt|;
comment|/** Disable constructor. */
DECL|method|RouterWebServiceUtil ()
specifier|private
name|RouterWebServiceUtil
parameter_list|()
block|{   }
comment|/**    * Creates and performs a REST call to a specific WebService.    *    * @param webApp the address of the remote webap    * @param hsr the servlet request    * @param returnType the return type of the REST call    * @param<T> Type of return object.    * @param method the HTTP method of the REST call    * @param targetPath additional path to add to the webapp address    * @param formParam the form parameters as input for a specific REST call    * @param additionalParam the query parameters as input for a specific REST    *          call in case the call has no servlet request    * @return the retrieved entity from the REST call    */
DECL|method|genericForward ( final String webApp, final HttpServletRequest hsr, final Class<T> returnType, final HTTPMethods method, final String targetPath, final Object formParam, final Map<String, String[]> additionalParam)
specifier|protected
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|genericForward
parameter_list|(
specifier|final
name|String
name|webApp
parameter_list|,
specifier|final
name|HttpServletRequest
name|hsr
parameter_list|,
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|returnType
parameter_list|,
specifier|final
name|HTTPMethods
name|method
parameter_list|,
specifier|final
name|String
name|targetPath
parameter_list|,
specifier|final
name|Object
name|formParam
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|additionalParam
parameter_list|)
block|{
name|UserGroupInformation
name|callerUGI
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hsr
operator|!=
literal|null
condition|)
block|{
name|callerUGI
operator|=
name|RMWebAppUtil
operator|.
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// user not required
name|callerUGI
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to obtain user name, user not authenticated"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|T
name|run
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|paramMap
init|=
literal|null
decl_stmt|;
comment|// We can have hsr or additionalParam. There are no case with both.
if|if
condition|(
name|hsr
operator|!=
literal|null
condition|)
block|{
name|paramMap
operator|=
name|hsr
operator|.
name|getParameterMap
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|additionalParam
operator|!=
literal|null
condition|)
block|{
name|paramMap
operator|=
name|additionalParam
expr_stmt|;
block|}
name|ClientResponse
name|response
init|=
name|RouterWebServiceUtil
operator|.
name|invokeRMWebService
argument_list|(
name|webApp
argument_list|,
name|targetPath
argument_list|,
name|method
argument_list|,
operator|(
name|hsr
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|hsr
operator|.
name|getPathInfo
argument_list|()
argument_list|,
name|paramMap
argument_list|,
name|formParam
argument_list|,
name|getMediaTypeFromHttpServletRequest
argument_list|(
name|hsr
argument_list|,
name|returnType
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|Response
operator|.
name|class
operator|.
name|equals
argument_list|(
name|returnType
argument_list|)
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|RouterWebServiceUtil
operator|.
name|clientResponseToResponse
argument_list|(
name|response
argument_list|)
return|;
block|}
comment|// YARN RM can answer with Status.OK or it throws an exception
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
name|SC_OK
condition|)
block|{
return|return
name|response
operator|.
name|getEntity
argument_list|(
name|returnType
argument_list|)
return|;
block|}
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|==
name|SC_NO_CONTENT
condition|)
block|{
try|try
block|{
return|return
name|returnType
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
decl||
name|ReflectiveOperationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot create empty entity for {}"
argument_list|,
name|returnType
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|RouterWebServiceUtil
operator|.
name|retrieveException
argument_list|(
name|response
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Performs an invocation of a REST call on a remote RMWebService.    *    * @param additionalParam    */
DECL|method|invokeRMWebService (String webApp, String path, HTTPMethods method, String additionalPath, Map<String, String[]> queryParams, Object formParam, String mediaType)
specifier|private
specifier|static
name|ClientResponse
name|invokeRMWebService
parameter_list|(
name|String
name|webApp
parameter_list|,
name|String
name|path
parameter_list|,
name|HTTPMethods
name|method
parameter_list|,
name|String
name|additionalPath
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|queryParams
parameter_list|,
name|Object
name|formParam
parameter_list|,
name|String
name|mediaType
parameter_list|)
block|{
name|Client
name|client
init|=
name|Client
operator|.
name|create
argument_list|()
decl_stmt|;
name|WebResource
name|webResource
init|=
name|client
operator|.
name|resource
argument_list|(
name|webApp
argument_list|)
operator|.
name|path
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|additionalPath
operator|!=
literal|null
operator|&&
operator|!
name|additionalPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|webResource
operator|=
name|webResource
operator|.
name|path
argument_list|(
name|additionalPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queryParams
operator|!=
literal|null
operator|&&
operator|!
name|queryParams
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|paramMap
init|=
operator|new
name|MultivaluedMapImpl
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|param
range|:
name|queryParams
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
index|[]
name|values
init|=
name|param
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|paramMap
operator|.
name|add
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|webResource
operator|=
name|webResource
operator|.
name|queryParams
argument_list|(
name|paramMap
argument_list|)
expr_stmt|;
block|}
name|Builder
name|builder
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|formParam
operator|!=
literal|null
condition|)
block|{
name|builder
operator|=
name|webResource
operator|.
name|entity
argument_list|(
name|formParam
argument_list|,
name|mediaType
argument_list|)
expr_stmt|;
name|builder
operator|=
name|builder
operator|.
name|accept
argument_list|(
name|mediaType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|=
name|webResource
operator|.
name|accept
argument_list|(
name|mediaType
argument_list|)
expr_stmt|;
block|}
name|ClientResponse
name|response
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|method
condition|)
block|{
case|case
name|DELETE
case|:
name|response
operator|=
name|builder
operator|.
name|delete
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
break|break;
case|case
name|GET
case|:
name|response
operator|=
name|builder
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
break|break;
case|case
name|POST
case|:
name|response
operator|=
name|builder
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
break|break;
case|case
name|PUT
case|:
name|response
operator|=
name|builder
operator|.
name|put
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|response
return|;
block|}
DECL|method|clientResponseToResponse (ClientResponse r)
specifier|public
specifier|static
name|Response
name|clientResponseToResponse
parameter_list|(
name|ClientResponse
name|r
parameter_list|)
block|{
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// copy the status code
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|status
argument_list|(
name|r
operator|.
name|getStatus
argument_list|()
argument_list|)
decl_stmt|;
comment|// copy all the headers
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|r
operator|.
name|getHeaders
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|value
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|rb
operator|.
name|header
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|// copy the entity
name|rb
operator|.
name|entity
argument_list|(
name|r
operator|.
name|getEntityInputStream
argument_list|()
argument_list|)
expr_stmt|;
comment|// return the response
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|retrieveException (ClientResponse response)
specifier|public
specifier|static
name|void
name|retrieveException
parameter_list|(
name|ClientResponse
name|response
parameter_list|)
block|{
name|String
name|serverErrorMsg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|status
init|=
name|response
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|400
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|serverErrorMsg
argument_list|)
throw|;
block|}
if|if
condition|(
name|status
operator|==
literal|403
condition|)
block|{
throw|throw
operator|new
name|ForbiddenException
argument_list|(
name|serverErrorMsg
argument_list|)
throw|;
block|}
if|if
condition|(
name|status
operator|==
literal|404
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
name|serverErrorMsg
argument_list|)
throw|;
block|}
if|if
condition|(
name|status
operator|==
literal|409
condition|)
block|{
throw|throw
operator|new
name|ConflictException
argument_list|(
name|serverErrorMsg
argument_list|)
throw|;
block|}
block|}
comment|/**    * Merges a list of AppInfo grouping by ApplicationId. Our current policy is    * to merge the application reports from the reacheable SubClusters. Via    * configuration parameter, we decide whether to return applications for which    * the primary AM is missing or to omit them.    *    * @param appsInfo a list of AppInfo to merge    * @param returnPartialResult if the merge AppsInfo should contain partial    *          result or not    * @return the merged AppsInfo    */
DECL|method|mergeAppsInfo (ArrayList<AppInfo> appsInfo, boolean returnPartialResult)
specifier|public
specifier|static
name|AppsInfo
name|mergeAppsInfo
parameter_list|(
name|ArrayList
argument_list|<
name|AppInfo
argument_list|>
name|appsInfo
parameter_list|,
name|boolean
name|returnPartialResult
parameter_list|)
block|{
name|AppsInfo
name|allApps
init|=
operator|new
name|AppsInfo
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|AppInfo
argument_list|>
name|federationAM
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|AppInfo
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|AppInfo
argument_list|>
name|federationUAMSum
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|AppInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AppInfo
name|a
range|:
name|appsInfo
control|)
block|{
comment|// Check if this AppInfo is an AM
if|if
condition|(
name|a
operator|.
name|getAMHostHttpAddress
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Insert in the list of AM
name|federationAM
operator|.
name|put
argument_list|(
name|a
operator|.
name|getAppId
argument_list|()
argument_list|,
name|a
argument_list|)
expr_stmt|;
comment|// Check if there are any UAM found before
if|if
condition|(
name|federationUAMSum
operator|.
name|containsKey
argument_list|(
name|a
operator|.
name|getAppId
argument_list|()
argument_list|)
condition|)
block|{
comment|// Merge the current AM with the found UAM
name|mergeAMWithUAM
argument_list|(
name|a
argument_list|,
name|federationUAMSum
operator|.
name|get
argument_list|(
name|a
operator|.
name|getAppId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove the sum of the UAMs
name|federationUAMSum
operator|.
name|remove
argument_list|(
name|a
operator|.
name|getAppId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// This AppInfo is an UAM
block|}
else|else
block|{
if|if
condition|(
name|federationAM
operator|.
name|containsKey
argument_list|(
name|a
operator|.
name|getAppId
argument_list|()
argument_list|)
condition|)
block|{
comment|// Merge the current UAM with its own AM
name|mergeAMWithUAM
argument_list|(
name|federationAM
operator|.
name|get
argument_list|(
name|a
operator|.
name|getAppId
argument_list|()
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|federationUAMSum
operator|.
name|containsKey
argument_list|(
name|a
operator|.
name|getAppId
argument_list|()
argument_list|)
condition|)
block|{
comment|// Merge the current UAM with its own UAM and update the list of UAM
name|federationUAMSum
operator|.
name|put
argument_list|(
name|a
operator|.
name|getAppId
argument_list|()
argument_list|,
name|mergeUAMWithUAM
argument_list|(
name|federationUAMSum
operator|.
name|get
argument_list|(
name|a
operator|.
name|getAppId
argument_list|()
argument_list|)
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Insert in the list of UAM
name|federationUAMSum
operator|.
name|put
argument_list|(
name|a
operator|.
name|getAppId
argument_list|()
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Check the remaining UAMs are depending or not from federation
for|for
control|(
name|AppInfo
name|a
range|:
name|federationUAMSum
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|returnPartialResult
operator|||
operator|(
name|a
operator|.
name|getName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|a
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|UnmanagedApplicationManager
operator|.
name|APP_NAME
argument_list|)
operator|||
name|a
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|PARTIAL_REPORT
argument_list|)
operator|)
operator|)
condition|)
block|{
name|federationAM
operator|.
name|put
argument_list|(
name|a
operator|.
name|getAppId
argument_list|()
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
block|}
name|allApps
operator|.
name|addAll
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|AppInfo
argument_list|>
argument_list|(
name|federationAM
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|allApps
return|;
block|}
DECL|method|mergeUAMWithUAM (AppInfo uam1, AppInfo uam2)
specifier|private
specifier|static
name|AppInfo
name|mergeUAMWithUAM
parameter_list|(
name|AppInfo
name|uam1
parameter_list|,
name|AppInfo
name|uam2
parameter_list|)
block|{
name|AppInfo
name|partialReport
init|=
operator|new
name|AppInfo
argument_list|()
decl_stmt|;
name|partialReport
operator|.
name|setAppId
argument_list|(
name|uam1
operator|.
name|getAppId
argument_list|()
argument_list|)
expr_stmt|;
name|partialReport
operator|.
name|setName
argument_list|(
name|PARTIAL_REPORT
operator|+
name|uam1
operator|.
name|getAppId
argument_list|()
argument_list|)
expr_stmt|;
comment|// We pick the status of the first uam
name|partialReport
operator|.
name|setState
argument_list|(
name|uam1
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Merge the newly partial AM with UAM1 and then with UAM2
name|mergeAMWithUAM
argument_list|(
name|partialReport
argument_list|,
name|uam1
argument_list|)
expr_stmt|;
name|mergeAMWithUAM
argument_list|(
name|partialReport
argument_list|,
name|uam2
argument_list|)
expr_stmt|;
return|return
name|partialReport
return|;
block|}
DECL|method|mergeAMWithUAM (AppInfo am, AppInfo uam)
specifier|private
specifier|static
name|void
name|mergeAMWithUAM
parameter_list|(
name|AppInfo
name|am
parameter_list|,
name|AppInfo
name|uam
parameter_list|)
block|{
name|am
operator|.
name|setPreemptedResourceMB
argument_list|(
name|am
operator|.
name|getPreemptedResourceMB
argument_list|()
operator|+
name|uam
operator|.
name|getPreemptedResourceMB
argument_list|()
argument_list|)
expr_stmt|;
name|am
operator|.
name|setPreemptedResourceVCores
argument_list|(
name|am
operator|.
name|getPreemptedResourceVCores
argument_list|()
operator|+
name|uam
operator|.
name|getPreemptedResourceVCores
argument_list|()
argument_list|)
expr_stmt|;
name|am
operator|.
name|setNumNonAMContainerPreempted
argument_list|(
name|am
operator|.
name|getNumNonAMContainerPreempted
argument_list|()
operator|+
name|uam
operator|.
name|getNumNonAMContainerPreempted
argument_list|()
argument_list|)
expr_stmt|;
name|am
operator|.
name|setNumAMContainerPreempted
argument_list|(
name|am
operator|.
name|getNumAMContainerPreempted
argument_list|()
operator|+
name|uam
operator|.
name|getNumAMContainerPreempted
argument_list|()
argument_list|)
expr_stmt|;
name|am
operator|.
name|setPreemptedMemorySeconds
argument_list|(
name|am
operator|.
name|getPreemptedMemorySeconds
argument_list|()
operator|+
name|uam
operator|.
name|getPreemptedMemorySeconds
argument_list|()
argument_list|)
expr_stmt|;
name|am
operator|.
name|setPreemptedVcoreSeconds
argument_list|(
name|am
operator|.
name|getPreemptedVcoreSeconds
argument_list|()
operator|+
name|uam
operator|.
name|getPreemptedVcoreSeconds
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|am
operator|.
name|getState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|RUNNING
operator|&&
name|uam
operator|.
name|getState
argument_list|()
operator|==
name|am
operator|.
name|getState
argument_list|()
condition|)
block|{
name|am
operator|.
name|getResourceRequests
argument_list|()
operator|.
name|addAll
argument_list|(
name|uam
operator|.
name|getResourceRequests
argument_list|()
argument_list|)
expr_stmt|;
name|am
operator|.
name|setAllocatedMB
argument_list|(
name|am
operator|.
name|getAllocatedMB
argument_list|()
operator|+
name|uam
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
name|am
operator|.
name|setAllocatedVCores
argument_list|(
name|am
operator|.
name|getAllocatedVCores
argument_list|()
operator|+
name|uam
operator|.
name|getAllocatedVCores
argument_list|()
argument_list|)
expr_stmt|;
name|am
operator|.
name|setReservedMB
argument_list|(
name|am
operator|.
name|getReservedMB
argument_list|()
operator|+
name|uam
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
name|am
operator|.
name|setReservedVCores
argument_list|(
name|am
operator|.
name|getReservedVCores
argument_list|()
operator|+
name|uam
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
name|am
operator|.
name|setRunningContainers
argument_list|(
name|am
operator|.
name|getRunningContainers
argument_list|()
operator|+
name|uam
operator|.
name|getRunningContainers
argument_list|()
argument_list|)
expr_stmt|;
name|am
operator|.
name|setMemorySeconds
argument_list|(
name|am
operator|.
name|getMemorySeconds
argument_list|()
operator|+
name|uam
operator|.
name|getMemorySeconds
argument_list|()
argument_list|)
expr_stmt|;
name|am
operator|.
name|setVcoreSeconds
argument_list|(
name|am
operator|.
name|getVcoreSeconds
argument_list|()
operator|+
name|uam
operator|.
name|getVcoreSeconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Deletes all the duplicate NodeInfo by discarding the old instances.    *    * @param nodes a list of NodeInfo to check for duplicates    * @return a NodesInfo that contains a list of NodeInfos without duplicates    */
DECL|method|deleteDuplicateNodesInfo (ArrayList<NodeInfo> nodes)
specifier|public
specifier|static
name|NodesInfo
name|deleteDuplicateNodesInfo
parameter_list|(
name|ArrayList
argument_list|<
name|NodeInfo
argument_list|>
name|nodes
parameter_list|)
block|{
name|NodesInfo
name|nodesInfo
init|=
operator|new
name|NodesInfo
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NodeInfo
argument_list|>
name|nodesMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeInfo
name|node
range|:
name|nodes
control|)
block|{
name|String
name|nodeId
init|=
name|node
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
comment|// If the node already exists, it could be an old instance
if|if
condition|(
name|nodesMap
operator|.
name|containsKey
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
comment|// Check if the node is an old instance
if|if
condition|(
name|nodesMap
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
operator|.
name|getLastHealthUpdate
argument_list|()
operator|<
name|node
operator|.
name|getLastHealthUpdate
argument_list|()
condition|)
block|{
name|nodesMap
operator|.
name|put
argument_list|(
name|node
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|nodesMap
operator|.
name|put
argument_list|(
name|node
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
name|nodesInfo
operator|.
name|addAll
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|NodeInfo
argument_list|>
argument_list|(
name|nodesMap
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|nodesInfo
return|;
block|}
comment|/**    * Adds all the values from the second ClusterMetricsInfo to the first one.    *    * @param metrics the ClusterMetricsInfo we want to update    * @param metricsResponse the ClusterMetricsInfo we want to add to the first    *          param    */
DECL|method|mergeMetrics (ClusterMetricsInfo metrics, ClusterMetricsInfo metricsResponse)
specifier|public
specifier|static
name|void
name|mergeMetrics
parameter_list|(
name|ClusterMetricsInfo
name|metrics
parameter_list|,
name|ClusterMetricsInfo
name|metricsResponse
parameter_list|)
block|{
name|metrics
operator|.
name|setAppsSubmitted
argument_list|(
name|metrics
operator|.
name|getAppsSubmitted
argument_list|()
operator|+
name|metricsResponse
operator|.
name|getAppsSubmitted
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setAppsCompleted
argument_list|(
name|metrics
operator|.
name|getAppsCompleted
argument_list|()
operator|+
name|metricsResponse
operator|.
name|getAppsCompleted
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setAppsPending
argument_list|(
name|metrics
operator|.
name|getAppsPending
argument_list|()
operator|+
name|metricsResponse
operator|.
name|getAppsPending
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setAppsRunning
argument_list|(
name|metrics
operator|.
name|getAppsRunning
argument_list|()
operator|+
name|metricsResponse
operator|.
name|getAppsRunning
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setAppsFailed
argument_list|(
name|metrics
operator|.
name|getAppsFailed
argument_list|()
operator|+
name|metricsResponse
operator|.
name|getAppsFailed
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setAppsKilled
argument_list|(
name|metrics
operator|.
name|getAppsKilled
argument_list|()
operator|+
name|metricsResponse
operator|.
name|getAppsKilled
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setReservedMB
argument_list|(
name|metrics
operator|.
name|getReservedMB
argument_list|()
operator|+
name|metricsResponse
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setAvailableMB
argument_list|(
name|metrics
operator|.
name|getAvailableMB
argument_list|()
operator|+
name|metricsResponse
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setAllocatedMB
argument_list|(
name|metrics
operator|.
name|getAllocatedMB
argument_list|()
operator|+
name|metricsResponse
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setReservedVirtualCores
argument_list|(
name|metrics
operator|.
name|getReservedVirtualCores
argument_list|()
operator|+
name|metricsResponse
operator|.
name|getReservedVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setAvailableVirtualCores
argument_list|(
name|metrics
operator|.
name|getAvailableVirtualCores
argument_list|()
operator|+
name|metricsResponse
operator|.
name|getAvailableVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setAllocatedVirtualCores
argument_list|(
name|metrics
operator|.
name|getAllocatedVirtualCores
argument_list|()
operator|+
name|metricsResponse
operator|.
name|getAllocatedVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setContainersAllocated
argument_list|(
name|metrics
operator|.
name|getContainersAllocated
argument_list|()
operator|+
name|metricsResponse
operator|.
name|getContainersAllocated
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setContainersReserved
argument_list|(
name|metrics
operator|.
name|getReservedContainers
argument_list|()
operator|+
name|metricsResponse
operator|.
name|getReservedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setContainersPending
argument_list|(
name|metrics
operator|.
name|getPendingContainers
argument_list|()
operator|+
name|metricsResponse
operator|.
name|getPendingContainers
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setTotalMB
argument_list|(
name|metrics
operator|.
name|getTotalMB
argument_list|()
operator|+
name|metricsResponse
operator|.
name|getTotalMB
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setTotalVirtualCores
argument_list|(
name|metrics
operator|.
name|getTotalVirtualCores
argument_list|()
operator|+
name|metricsResponse
operator|.
name|getTotalVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setTotalNodes
argument_list|(
name|metrics
operator|.
name|getTotalNodes
argument_list|()
operator|+
name|metricsResponse
operator|.
name|getTotalNodes
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setLostNodes
argument_list|(
name|metrics
operator|.
name|getLostNodes
argument_list|()
operator|+
name|metricsResponse
operator|.
name|getLostNodes
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setUnhealthyNodes
argument_list|(
name|metrics
operator|.
name|getUnhealthyNodes
argument_list|()
operator|+
name|metricsResponse
operator|.
name|getUnhealthyNodes
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setDecommissioningNodes
argument_list|(
name|metrics
operator|.
name|getDecommissioningNodes
argument_list|()
operator|+
name|metricsResponse
operator|.
name|getDecommissioningNodes
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setDecommissionedNodes
argument_list|(
name|metrics
operator|.
name|getDecommissionedNodes
argument_list|()
operator|+
name|metricsResponse
operator|.
name|getDecommissionedNodes
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setRebootedNodes
argument_list|(
name|metrics
operator|.
name|getRebootedNodes
argument_list|()
operator|+
name|metricsResponse
operator|.
name|getRebootedNodes
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setActiveNodes
argument_list|(
name|metrics
operator|.
name|getActiveNodes
argument_list|()
operator|+
name|metricsResponse
operator|.
name|getActiveNodes
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setShutdownNodes
argument_list|(
name|metrics
operator|.
name|getShutdownNodes
argument_list|()
operator|+
name|metricsResponse
operator|.
name|getShutdownNodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Extract from HttpServletRequest the MediaType in output.    */
DECL|method|getMediaTypeFromHttpServletRequest ( HttpServletRequest request, final Class<T> returnType)
specifier|protected
specifier|static
parameter_list|<
name|T
parameter_list|>
name|String
name|getMediaTypeFromHttpServletRequest
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|returnType
parameter_list|)
block|{
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
comment|// By default we return XML for REST call without HttpServletRequest
return|return
name|MediaType
operator|.
name|APPLICATION_XML
return|;
block|}
comment|// TODO
if|if
condition|(
operator|!
name|returnType
operator|.
name|equals
argument_list|(
name|Response
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|MediaType
operator|.
name|APPLICATION_XML
return|;
block|}
name|String
name|header
init|=
name|request
operator|.
name|getHeader
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|==
literal|null
operator|||
name|header
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
comment|// By default we return JSON
return|return
name|MediaType
operator|.
name|APPLICATION_JSON
return|;
block|}
return|return
name|header
return|;
block|}
block|}
end_class

end_unit

