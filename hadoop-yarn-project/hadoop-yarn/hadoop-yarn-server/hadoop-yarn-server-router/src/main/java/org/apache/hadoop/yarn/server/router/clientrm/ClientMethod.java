begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.router.clientrm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|router
operator|.
name|clientrm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Class to define client method,params and arguments.  */
end_comment

begin_class
DECL|class|ClientMethod
specifier|public
class|class
name|ClientMethod
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ClientMethod
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * List of parameters: static and dynamic values, matchings types.    */
DECL|field|params
specifier|private
specifier|final
name|Object
index|[]
name|params
decl_stmt|;
comment|/**    * List of method parameters types, matches parameters.    */
DECL|field|types
specifier|private
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|types
decl_stmt|;
comment|/**    * String name of the method.    */
DECL|field|methodName
specifier|private
specifier|final
name|String
name|methodName
decl_stmt|;
DECL|method|ClientMethod (String method, Class<?>[] pTypes, Object... pParams)
specifier|public
name|ClientMethod
parameter_list|(
name|String
name|method
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|pTypes
parameter_list|,
name|Object
modifier|...
name|pParams
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pParams
operator|.
name|length
operator|!=
name|pTypes
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid parameters for method "
operator|+
name|method
argument_list|)
throw|;
block|}
name|this
operator|.
name|params
operator|=
name|pParams
expr_stmt|;
name|this
operator|.
name|types
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|pTypes
argument_list|,
name|pTypes
operator|.
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|methodName
operator|=
name|method
expr_stmt|;
block|}
DECL|method|getParams ()
specifier|public
name|Object
index|[]
name|getParams
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|this
operator|.
name|params
argument_list|,
name|this
operator|.
name|params
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|getMethodName ()
specifier|public
name|String
name|getMethodName
parameter_list|()
block|{
return|return
name|methodName
return|;
block|}
comment|/**    * Get the calling types for this method.    *    * @return An array of calling types.    */
DECL|method|getTypes ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|getTypes
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|this
operator|.
name|types
argument_list|,
name|this
operator|.
name|types
operator|.
name|length
argument_list|)
return|;
block|}
block|}
end_class

end_unit

