begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.router.clientrm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|router
operator|.
name|clientrm
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|NotImplementedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|CancelDelegationTokenRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|CancelDelegationTokenResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FailApplicationAttemptRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FailApplicationAttemptResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetAllResourceProfilesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetAllResourceProfilesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetAllResourceTypeInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetAllResourceTypeInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterMetricsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterMetricsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterNodeLabelsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterNodeLabelsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterNodesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterNodesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetDelegationTokenRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetDelegationTokenResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetLabelsToNodesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetLabelsToNodesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewReservationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewReservationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNodesToLabelsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNodesToLabelsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetQueueInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetQueueInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetQueueUserAclsInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetQueueUserAclsInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetResourceProfileRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetResourceProfileResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|MoveApplicationAcrossQueuesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|MoveApplicationAcrossQueuesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RenewDelegationTokenRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RenewDelegationTokenResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationDeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationDeleteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationListRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationListResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationSubmissionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationSubmissionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationUpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationUpdateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SignalContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SignalContainerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SubmitApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SubmitApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UpdateApplicationPriorityRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UpdateApplicationPriorityResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UpdateApplicationTimeoutsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UpdateApplicationTimeoutsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|failover
operator|.
name|FederationProxyProviderUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|FederationPolicyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|RouterPolicyFacade
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|exceptions
operator|.
name|FederationPolicyInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|ApplicationHomeSubCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|utils
operator|.
name|FederationStateStoreFacade
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|router
operator|.
name|RouterMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|router
operator|.
name|RouterServerUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|MonotonicClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Extends the {@code AbstractRequestInterceptorClient} class and provides an  * implementation for federation of YARN RM and scaling an application across  * multiple YARN SubClusters. All the federation specific implementation is  * encapsulated in this class. This is always the last intercepter in the chain.  */
end_comment

begin_class
DECL|class|FederationClientInterceptor
specifier|public
class|class
name|FederationClientInterceptor
extends|extends
name|AbstractClientRequestInterceptor
block|{
comment|/*    * TODO YARN-6740 Federation Router (hiding multiple RMs for    * ApplicationClientProtocol) phase 2.    *    * The current implementation finalized the main 4 calls (getNewApplication,    * submitApplication, forceKillApplication and getApplicationReport). Those    * allow us to execute applications E2E.    */
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FederationClientInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|numSubmitRetries
specifier|private
name|int
name|numSubmitRetries
decl_stmt|;
DECL|field|clientRMProxies
specifier|private
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|ApplicationClientProtocol
argument_list|>
name|clientRMProxies
decl_stmt|;
DECL|field|federationFacade
specifier|private
name|FederationStateStoreFacade
name|federationFacade
decl_stmt|;
DECL|field|rand
specifier|private
name|Random
name|rand
decl_stmt|;
DECL|field|policyFacade
specifier|private
name|RouterPolicyFacade
name|policyFacade
decl_stmt|;
DECL|field|routerMetrics
specifier|private
name|RouterMetrics
name|routerMetrics
decl_stmt|;
DECL|field|executorService
specifier|private
name|ThreadPoolExecutor
name|executorService
decl_stmt|;
DECL|field|clock
specifier|private
specifier|final
name|Clock
name|clock
init|=
operator|new
name|MonotonicClock
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|init (String userName)
specifier|public
name|void
name|init
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|federationFacade
operator|=
name|FederationStateStoreFacade
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|rand
operator|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numThreads
init|=
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|ROUTER_USER_CLIENT_THREADS_SIZE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_ROUTER_USER_CLIENT_THREADS_SIZE
argument_list|)
decl_stmt|;
name|ThreadFactory
name|threadFactory
init|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"RPC Router Client-"
operator|+
name|userName
operator|+
literal|"-%d "
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|BlockingQueue
name|workQueue
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|()
decl_stmt|;
name|this
operator|.
name|executorService
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|numThreads
argument_list|,
name|numThreads
argument_list|,
literal|0L
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|workQueue
argument_list|,
name|threadFactory
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|this
operator|.
name|getConf
argument_list|()
decl_stmt|;
try|try
block|{
name|policyFacade
operator|=
operator|new
name|RouterPolicyFacade
argument_list|(
name|conf
argument_list|,
name|federationFacade
argument_list|,
name|this
operator|.
name|federationFacade
operator|.
name|getSubClusterResolver
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationPolicyInitializationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|numSubmitRetries
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|ROUTER_CLIENTRM_SUBMIT_RETRY
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_ROUTER_CLIENTRM_SUBMIT_RETRY
argument_list|)
expr_stmt|;
name|clientRMProxies
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|SubClusterId
argument_list|,
name|ApplicationClientProtocol
argument_list|>
argument_list|()
expr_stmt|;
name|routerMetrics
operator|=
name|RouterMetrics
operator|.
name|getMetrics
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextInterceptor (ClientRequestInterceptor next)
specifier|public
name|void
name|setNextInterceptor
parameter_list|(
name|ClientRequestInterceptor
name|next
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"setNextInterceptor is being called on "
operator|+
literal|"FederationClientRequestInterceptor, which should be the last one "
operator|+
literal|"in the chain. Check if the interceptor pipeline configuration "
operator|+
literal|"is correct"
argument_list|)
throw|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getClientRMProxyForSubCluster ( SubClusterId subClusterId)
specifier|protected
name|ApplicationClientProtocol
name|getClientRMProxyForSubCluster
parameter_list|(
name|SubClusterId
name|subClusterId
parameter_list|)
throws|throws
name|YarnException
block|{
if|if
condition|(
name|clientRMProxies
operator|.
name|containsKey
argument_list|(
name|subClusterId
argument_list|)
condition|)
block|{
return|return
name|clientRMProxies
operator|.
name|get
argument_list|(
name|subClusterId
argument_list|)
return|;
block|}
name|ApplicationClientProtocol
name|clientRMProxy
init|=
literal|null
decl_stmt|;
try|try
block|{
name|clientRMProxy
operator|=
name|FederationProxyProviderUtil
operator|.
name|createRMProxy
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|ApplicationClientProtocol
operator|.
name|class
argument_list|,
name|subClusterId
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|RouterServerUtil
operator|.
name|logAndThrowException
argument_list|(
literal|"Unable to create the interface to reach the SubCluster "
operator|+
name|subClusterId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|clientRMProxies
operator|.
name|put
argument_list|(
name|subClusterId
argument_list|,
name|clientRMProxy
argument_list|)
expr_stmt|;
return|return
name|clientRMProxy
return|;
block|}
DECL|method|getRandomActiveSubCluster ( Map<SubClusterId, SubClusterInfo> activeSubclusters)
specifier|private
name|SubClusterId
name|getRandomActiveSubCluster
parameter_list|(
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|SubClusterInfo
argument_list|>
name|activeSubclusters
parameter_list|)
throws|throws
name|YarnException
block|{
if|if
condition|(
name|activeSubclusters
operator|==
literal|null
operator|||
name|activeSubclusters
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
name|RouterServerUtil
operator|.
name|logAndThrowException
argument_list|(
name|FederationPolicyUtils
operator|.
name|NO_ACTIVE_SUBCLUSTER_AVAILABLE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|SubClusterId
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|activeSubclusters
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|list
operator|.
name|get
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * YARN Router forwards every getNewApplication requests to any RM. During    * this operation there will be no communication with the State Store. The    * Router will forward the requests to any SubCluster. The Router will retry    * to submit the request on #numSubmitRetries different SubClusters. The    * SubClusters are randomly chosen from the active ones.    *    * Possible failures and behaviors:    *    * Client: identical behavior as {@code ClientRMService}.    *    * Router: the Client will timeout and resubmit.    *    * ResourceManager: the Router will timeout and contacts another RM.    *    * StateStore: not in the execution.    */
annotation|@
name|Override
DECL|method|getNewApplication ( GetNewApplicationRequest request)
specifier|public
name|GetNewApplicationResponse
name|getNewApplication
parameter_list|(
name|GetNewApplicationRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|long
name|startTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|SubClusterInfo
argument_list|>
name|subClustersActive
init|=
name|federationFacade
operator|.
name|getSubClusters
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSubmitRetries
condition|;
operator|++
name|i
control|)
block|{
name|SubClusterId
name|subClusterId
init|=
name|getRandomActiveSubCluster
argument_list|(
name|subClustersActive
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"getNewApplication try #"
operator|+
name|i
operator|+
literal|" on SubCluster "
operator|+
name|subClusterId
argument_list|)
expr_stmt|;
name|ApplicationClientProtocol
name|clientRMProxy
init|=
name|getClientRMProxyForSubCluster
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
name|GetNewApplicationResponse
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|response
operator|=
name|clientRMProxy
operator|.
name|getNewApplication
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to create a new ApplicationId in SubCluster "
operator|+
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|!=
literal|null
condition|)
block|{
name|long
name|stopTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|routerMetrics
operator|.
name|succeededAppsCreated
argument_list|(
name|stopTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
else|else
block|{
comment|// Empty response from the ResourceManager.
comment|// Blacklist this subcluster for this request.
name|subClustersActive
operator|.
name|remove
argument_list|(
name|subClusterId
argument_list|)
expr_stmt|;
block|}
block|}
name|routerMetrics
operator|.
name|incrAppsFailedCreated
argument_list|()
expr_stmt|;
name|String
name|errMsg
init|=
literal|"Fail to create a new application."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
comment|/**    * Today, in YARN there are no checks of any applicationId submitted.    *    * Base scenarios:    *    * The Client submits an application to the Router. â¢ The Router selects one    * SubCluster to forward the request. â¢ The Router inserts a tuple into    * StateStore with the selected SubCluster (e.g. SC1) and the appId. â¢ The    * State Store replies with the selected SubCluster (e.g. SC1). â¢ The Router    * submits the request to the selected SubCluster.    *    * In case of State Store failure:    *    * The client submits an application to the Router. â¢ The Router selects one    * SubCluster to forward the request. â¢ The Router inserts a tuple into State    * Store with the selected SubCluster (e.g. SC1) and the appId. â¢ Due to the    * State Store down the Router times out and it will retry depending on the    * FederationFacade settings. â¢ The Router replies to the client with an error    * message.    *    * If State Store fails after inserting the tuple: identical behavior as    * {@code ClientRMService}.    *    * In case of Router failure:    *    * Scenario 1 â Crash before submission to the ResourceManager    *    * The Client submits an application to the Router. â¢ The Router selects one    * SubCluster to forward the request. â¢ The Router inserts a tuple into State    * Store with the selected SubCluster (e.g. SC1) and the appId. â¢ The Router    * crashes. â¢ The Client timeouts and resubmits the application. â¢ The Router    * selects one SubCluster to forward the request. â¢ The Router inserts a tuple    * into State Store with the selected SubCluster (e.g. SC2) and the appId. â¢    * Because the tuple is already inserted in the State Store, it returns the    * previous selected SubCluster (e.g. SC1). â¢ The Router submits the request    * to the selected SubCluster (e.g. SC1).    *    * Scenario 2 â Crash after submission to the ResourceManager    *    * â¢ The Client submits an application to the Router. â¢ The Router selects one    * SubCluster to forward the request. â¢ The Router inserts a tuple into State    * Store with the selected SubCluster (e.g. SC1) and the appId. â¢ The Router    * submits the request to the selected SubCluster. â¢ The Router crashes. â¢ The    * Client timeouts and resubmit the application. â¢ The Router selects one    * SubCluster to forward the request. â¢ The Router inserts a tuple into State    * Store with the selected SubCluster (e.g. SC2) and the appId. â¢ The State    * Store replies with the selected SubCluster (e.g. SC1). â¢ The Router submits    * the request to the selected SubCluster (e.g. SC1). When a client re-submits    * the same application to the same RM, it does not raise an exception and    * replies with operation successful message.    *    * In case of Client failure: identical behavior as {@code ClientRMService}.    *    * In case of ResourceManager failure:    *    * The Client submits an application to the Router. â¢ The Router selects one    * SubCluster to forward the request. â¢ The Router inserts a tuple into State    * Store with the selected SubCluster (e.g. SC1) and the appId. â¢ The Router    * submits the request to the selected SubCluster. â¢ The entire SubCluster is    * down â all the RMs in HA or the master RM is not reachable. â¢ The Router    * times out. â¢ The Router selects a new SubCluster to forward the request. â¢    * The Router update a tuple into State Store with the selected SubCluster    * (e.g. SC2) and the appId. â¢ The State Store replies with OK answer. â¢ The    * Router submits the request to the selected SubCluster (e.g. SC2).    */
annotation|@
name|Override
DECL|method|submitApplication ( SubmitApplicationRequest request)
specifier|public
name|SubmitApplicationResponse
name|submitApplication
parameter_list|(
name|SubmitApplicationRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|long
name|startTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
operator|||
name|request
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|==
literal|null
operator|||
name|request
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|routerMetrics
operator|.
name|incrAppsFailedSubmitted
argument_list|()
expr_stmt|;
name|RouterServerUtil
operator|.
name|logAndThrowException
argument_list|(
literal|"Missing submitApplication request or "
operator|+
literal|"applicationSubmissionContex information."
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|ApplicationId
name|applicationId
init|=
name|request
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SubClusterId
argument_list|>
name|blacklist
init|=
operator|new
name|ArrayList
argument_list|<
name|SubClusterId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSubmitRetries
condition|;
operator|++
name|i
control|)
block|{
name|SubClusterId
name|subClusterId
init|=
name|policyFacade
operator|.
name|getHomeSubcluster
argument_list|(
name|request
operator|.
name|getApplicationSubmissionContext
argument_list|()
argument_list|,
name|blacklist
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"submitApplication appId"
operator|+
name|applicationId
operator|+
literal|" try #"
operator|+
name|i
operator|+
literal|" on SubCluster "
operator|+
name|subClusterId
argument_list|)
expr_stmt|;
name|ApplicationHomeSubCluster
name|appHomeSubCluster
init|=
name|ApplicationHomeSubCluster
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
name|subClusterId
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
try|try
block|{
comment|// persist the mapping of applicationId and the subClusterId which has
comment|// been selected as its home
name|subClusterId
operator|=
name|federationFacade
operator|.
name|addApplicationHomeSubCluster
argument_list|(
name|appHomeSubCluster
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|routerMetrics
operator|.
name|incrAppsFailedSubmitted
argument_list|()
expr_stmt|;
name|String
name|message
init|=
literal|"Unable to insert the ApplicationId "
operator|+
name|applicationId
operator|+
literal|" into the FederationStateStore"
decl_stmt|;
name|RouterServerUtil
operator|.
name|logAndThrowException
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
comment|// update the mapping of applicationId and the home subClusterId to
comment|// the new subClusterId we have selected
name|federationFacade
operator|.
name|updateApplicationHomeSubCluster
argument_list|(
name|appHomeSubCluster
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Unable to update the ApplicationId "
operator|+
name|applicationId
operator|+
literal|" into the FederationStateStore"
decl_stmt|;
name|SubClusterId
name|subClusterIdInStateStore
init|=
name|federationFacade
operator|.
name|getApplicationHomeSubCluster
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
if|if
condition|(
name|subClusterId
operator|==
name|subClusterIdInStateStore
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Application "
operator|+
name|applicationId
operator|+
literal|" already submitted on SubCluster "
operator|+
name|subClusterId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|routerMetrics
operator|.
name|incrAppsFailedSubmitted
argument_list|()
expr_stmt|;
name|RouterServerUtil
operator|.
name|logAndThrowException
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ApplicationClientProtocol
name|clientRMProxy
init|=
name|getClientRMProxyForSubCluster
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
name|SubmitApplicationResponse
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|response
operator|=
name|clientRMProxy
operator|.
name|submitApplication
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to submit the application "
operator|+
name|applicationId
operator|+
literal|"to SubCluster "
operator|+
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Application "
operator|+
name|request
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationName
argument_list|()
operator|+
literal|" with appId "
operator|+
name|applicationId
operator|+
literal|" submitted on "
operator|+
name|subClusterId
argument_list|)
expr_stmt|;
name|long
name|stopTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|routerMetrics
operator|.
name|succeededAppsSubmitted
argument_list|(
name|stopTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
else|else
block|{
comment|// Empty response from the ResourceManager.
comment|// Blacklist this subcluster for this request.
name|blacklist
operator|.
name|add
argument_list|(
name|subClusterId
argument_list|)
expr_stmt|;
block|}
block|}
name|routerMetrics
operator|.
name|incrAppsFailedSubmitted
argument_list|()
expr_stmt|;
name|String
name|errMsg
init|=
literal|"Application "
operator|+
name|request
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationName
argument_list|()
operator|+
literal|" with appId "
operator|+
name|applicationId
operator|+
literal|" failed to be submitted."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
comment|/**    * The YARN Router will forward to the respective YARN RM in which the AM is    * running.    *    * Possible failures and behaviors:    *    * Client: identical behavior as {@code ClientRMService}.    *    * Router: the Client will timeout and resubmit the request.    *    * ResourceManager: the Router will timeout and the call will fail.    *    * State Store: the Router will timeout and it will retry depending on the    * FederationFacade settings - if the failure happened before the select    * operation.    */
annotation|@
name|Override
DECL|method|forceKillApplication ( KillApplicationRequest request)
specifier|public
name|KillApplicationResponse
name|forceKillApplication
parameter_list|(
name|KillApplicationRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|long
name|startTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
operator|||
name|request
operator|.
name|getApplicationId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|routerMetrics
operator|.
name|incrAppsFailedKilled
argument_list|()
expr_stmt|;
name|RouterServerUtil
operator|.
name|logAndThrowException
argument_list|(
literal|"Missing forceKillApplication request or ApplicationId."
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|ApplicationId
name|applicationId
init|=
name|request
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|SubClusterId
name|subClusterId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|subClusterId
operator|=
name|federationFacade
operator|.
name|getApplicationHomeSubCluster
argument_list|(
name|request
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|routerMetrics
operator|.
name|incrAppsFailedKilled
argument_list|()
expr_stmt|;
name|RouterServerUtil
operator|.
name|logAndThrowException
argument_list|(
literal|"Application "
operator|+
name|applicationId
operator|+
literal|" does not exist in FederationStateStore"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|ApplicationClientProtocol
name|clientRMProxy
init|=
name|getClientRMProxyForSubCluster
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
name|KillApplicationResponse
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"forceKillApplication "
operator|+
name|applicationId
operator|+
literal|" on SubCluster "
operator|+
name|subClusterId
argument_list|)
expr_stmt|;
name|response
operator|=
name|clientRMProxy
operator|.
name|forceKillApplication
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|routerMetrics
operator|.
name|incrAppsFailedKilled
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to kill the application report for "
operator|+
name|request
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|"to SubCluster "
operator|+
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|response
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No response when attempting to kill the application "
operator|+
name|applicationId
operator|+
literal|" to SubCluster "
operator|+
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|stopTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|routerMetrics
operator|.
name|succeededAppsKilled
argument_list|(
name|stopTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
comment|/**    * The YARN Router will forward to the respective YARN RM in which the AM is    * running.    *    * Possible failure:    *    * Client: identical behavior as {@code ClientRMService}.    *    * Router: the Client will timeout and resubmit the request.    *    * ResourceManager: the Router will timeout and the call will fail.    *    * State Store: the Router will timeout and it will retry depending on the    * FederationFacade settings - if the failure happened before the select    * operation.    */
annotation|@
name|Override
DECL|method|getApplicationReport ( GetApplicationReportRequest request)
specifier|public
name|GetApplicationReportResponse
name|getApplicationReport
parameter_list|(
name|GetApplicationReportRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|long
name|startTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
operator|||
name|request
operator|.
name|getApplicationId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|routerMetrics
operator|.
name|incrAppsFailedRetrieved
argument_list|()
expr_stmt|;
name|RouterServerUtil
operator|.
name|logAndThrowException
argument_list|(
literal|"Missing getApplicationReport request or applicationId information."
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|SubClusterId
name|subClusterId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|subClusterId
operator|=
name|federationFacade
operator|.
name|getApplicationHomeSubCluster
argument_list|(
name|request
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|routerMetrics
operator|.
name|incrAppsFailedRetrieved
argument_list|()
expr_stmt|;
name|RouterServerUtil
operator|.
name|logAndThrowException
argument_list|(
literal|"Application "
operator|+
name|request
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" does not exist in FederationStateStore"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|ApplicationClientProtocol
name|clientRMProxy
init|=
name|getClientRMProxyForSubCluster
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
name|GetApplicationReportResponse
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|response
operator|=
name|clientRMProxy
operator|.
name|getApplicationReport
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|routerMetrics
operator|.
name|incrAppsFailedRetrieved
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get the application report for "
operator|+
name|request
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|"to SubCluster "
operator|+
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|response
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No response when attempting to retrieve the report of "
operator|+
literal|"the application "
operator|+
name|request
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" to SubCluster "
operator|+
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|stopTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|routerMetrics
operator|.
name|succeededAppsRetrieved
argument_list|(
name|stopTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|getApplications (GetApplicationsRequest request)
specifier|public
name|GetApplicationsResponse
name|getApplications
parameter_list|(
name|GetApplicationsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Code is not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getClusterMetrics ( GetClusterMetricsRequest request)
specifier|public
name|GetClusterMetricsResponse
name|getClusterMetrics
parameter_list|(
name|GetClusterMetricsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|SubClusterInfo
argument_list|>
name|subclusters
init|=
name|federationFacade
operator|.
name|getSubClusters
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|ClientMethod
name|remoteMethod
init|=
operator|new
name|ClientMethod
argument_list|(
literal|"getClusterMetrics"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|GetClusterMetricsRequest
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|request
block|}
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|SubClusterId
argument_list|>
name|clusterList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|subclusters
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|GetClusterMetricsResponse
argument_list|>
name|clusterMetrics
init|=
name|invokeConcurrent
argument_list|(
name|clusterList
argument_list|,
name|remoteMethod
argument_list|,
name|GetClusterMetricsResponse
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|RouterYarnClientUtils
operator|.
name|merge
argument_list|(
name|clusterMetrics
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
DECL|method|invokeConcurrent (ArrayList<SubClusterId> clusterIds, ClientMethod request, Class<R> clazz)
parameter_list|<
name|R
parameter_list|>
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|R
argument_list|>
name|invokeConcurrent
parameter_list|(
name|ArrayList
argument_list|<
name|SubClusterId
argument_list|>
name|clusterIds
parameter_list|,
name|ClientMethod
name|request
parameter_list|,
name|Class
argument_list|<
name|R
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|>
name|callables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|Object
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|IOException
argument_list|>
name|exceptions
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SubClusterId
name|subClusterId
range|:
name|clusterIds
control|)
block|{
name|callables
operator|.
name|add
argument_list|(
operator|new
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationClientProtocol
name|protocol
init|=
name|getClientRMProxyForSubCluster
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
name|Method
name|method
init|=
name|ApplicationClientProtocol
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
name|request
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|request
operator|.
name|getTypes
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|method
operator|.
name|invoke
argument_list|(
name|protocol
argument_list|,
name|request
operator|.
name|getParams
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|R
argument_list|>
name|results
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|futures
operator|.
name|addAll
argument_list|(
name|executorService
operator|.
name|invokeAll
argument_list|(
name|callables
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|futures
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SubClusterId
name|subClusterId
init|=
name|clusterIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
try|try
block|{
name|Future
argument_list|<
name|Object
argument_list|>
name|future
init|=
name|futures
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
name|result
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
name|results
operator|.
name|put
argument_list|(
name|subClusterId
argument_list|,
name|clazz
operator|.
name|cast
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ex
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|ex
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot execute {} on {}: {}"
argument_list|,
name|request
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|,
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|IOException
name|ioe
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|IOException
condition|)
block|{
name|ioe
operator|=
operator|(
name|IOException
operator|)
name|cause
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cause
operator|instanceof
name|YarnException
condition|)
block|{
throw|throw
operator|(
name|YarnException
operator|)
name|cause
throw|;
block|}
else|else
block|{
name|ioe
operator|=
operator|new
name|IOException
argument_list|(
literal|"Unhandled exception while calling "
operator|+
name|request
operator|.
name|getMethodName
argument_list|()
operator|+
literal|": "
operator|+
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
comment|// Store the exceptions
name|exceptions
operator|.
name|put
argument_list|(
name|subClusterId
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SubClusterId
name|subClusterId
init|=
name|clusterIds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|IOException
name|ioe
init|=
name|exceptions
operator|.
name|get
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ioe
operator|!=
literal|null
condition|)
block|{
throw|throw
name|ioe
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|results
return|;
block|}
annotation|@
name|Override
DECL|method|getClusterNodes (GetClusterNodesRequest request)
specifier|public
name|GetClusterNodesResponse
name|getClusterNodes
parameter_list|(
name|GetClusterNodesRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Code is not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getQueueInfo (GetQueueInfoRequest request)
specifier|public
name|GetQueueInfoResponse
name|getQueueInfo
parameter_list|(
name|GetQueueInfoRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Code is not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getQueueUserAcls ( GetQueueUserAclsInfoRequest request)
specifier|public
name|GetQueueUserAclsInfoResponse
name|getQueueUserAcls
parameter_list|(
name|GetQueueUserAclsInfoRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Code is not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|moveApplicationAcrossQueues ( MoveApplicationAcrossQueuesRequest request)
specifier|public
name|MoveApplicationAcrossQueuesResponse
name|moveApplicationAcrossQueues
parameter_list|(
name|MoveApplicationAcrossQueuesRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Code is not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getNewReservation ( GetNewReservationRequest request)
specifier|public
name|GetNewReservationResponse
name|getNewReservation
parameter_list|(
name|GetNewReservationRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Code is not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|submitReservation ( ReservationSubmissionRequest request)
specifier|public
name|ReservationSubmissionResponse
name|submitReservation
parameter_list|(
name|ReservationSubmissionRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Code is not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|listReservations ( ReservationListRequest request)
specifier|public
name|ReservationListResponse
name|listReservations
parameter_list|(
name|ReservationListRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Code is not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|updateReservation ( ReservationUpdateRequest request)
specifier|public
name|ReservationUpdateResponse
name|updateReservation
parameter_list|(
name|ReservationUpdateRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Code is not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|deleteReservation ( ReservationDeleteRequest request)
specifier|public
name|ReservationDeleteResponse
name|deleteReservation
parameter_list|(
name|ReservationDeleteRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Code is not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getNodeToLabels ( GetNodesToLabelsRequest request)
specifier|public
name|GetNodesToLabelsResponse
name|getNodeToLabels
parameter_list|(
name|GetNodesToLabelsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Code is not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getLabelsToNodes ( GetLabelsToNodesRequest request)
specifier|public
name|GetLabelsToNodesResponse
name|getLabelsToNodes
parameter_list|(
name|GetLabelsToNodesRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Code is not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getClusterNodeLabels ( GetClusterNodeLabelsRequest request)
specifier|public
name|GetClusterNodeLabelsResponse
name|getClusterNodeLabels
parameter_list|(
name|GetClusterNodeLabelsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Code is not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getApplicationAttemptReport ( GetApplicationAttemptReportRequest request)
specifier|public
name|GetApplicationAttemptReportResponse
name|getApplicationAttemptReport
parameter_list|(
name|GetApplicationAttemptReportRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Code is not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getApplicationAttempts ( GetApplicationAttemptsRequest request)
specifier|public
name|GetApplicationAttemptsResponse
name|getApplicationAttempts
parameter_list|(
name|GetApplicationAttemptsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Code is not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getContainerReport ( GetContainerReportRequest request)
specifier|public
name|GetContainerReportResponse
name|getContainerReport
parameter_list|(
name|GetContainerReportRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Code is not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getContainers (GetContainersRequest request)
specifier|public
name|GetContainersResponse
name|getContainers
parameter_list|(
name|GetContainersRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Code is not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getDelegationToken ( GetDelegationTokenRequest request)
specifier|public
name|GetDelegationTokenResponse
name|getDelegationToken
parameter_list|(
name|GetDelegationTokenRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Code is not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|renewDelegationToken ( RenewDelegationTokenRequest request)
specifier|public
name|RenewDelegationTokenResponse
name|renewDelegationToken
parameter_list|(
name|RenewDelegationTokenRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Code is not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|cancelDelegationToken ( CancelDelegationTokenRequest request)
specifier|public
name|CancelDelegationTokenResponse
name|cancelDelegationToken
parameter_list|(
name|CancelDelegationTokenRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Code is not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|failApplicationAttempt ( FailApplicationAttemptRequest request)
specifier|public
name|FailApplicationAttemptResponse
name|failApplicationAttempt
parameter_list|(
name|FailApplicationAttemptRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Code is not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|updateApplicationPriority ( UpdateApplicationPriorityRequest request)
specifier|public
name|UpdateApplicationPriorityResponse
name|updateApplicationPriority
parameter_list|(
name|UpdateApplicationPriorityRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Code is not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|signalToContainer ( SignalContainerRequest request)
specifier|public
name|SignalContainerResponse
name|signalToContainer
parameter_list|(
name|SignalContainerRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Code is not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|updateApplicationTimeouts ( UpdateApplicationTimeoutsRequest request)
specifier|public
name|UpdateApplicationTimeoutsResponse
name|updateApplicationTimeouts
parameter_list|(
name|UpdateApplicationTimeoutsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Code is not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getResourceProfiles ( GetAllResourceProfilesRequest request)
specifier|public
name|GetAllResourceProfilesResponse
name|getResourceProfiles
parameter_list|(
name|GetAllResourceProfilesRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Code is not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getResourceProfile ( GetResourceProfileRequest request)
specifier|public
name|GetResourceProfileResponse
name|getResourceProfile
parameter_list|(
name|GetResourceProfileRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Code is not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getResourceTypeInfo ( GetAllResourceTypeInfoRequest request)
specifier|public
name|GetAllResourceTypeInfoResponse
name|getResourceTypeInfo
parameter_list|(
name|GetAllResourceTypeInfoRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Code is not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|super
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

