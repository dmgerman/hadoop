begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.router.rmadmin
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|router
operator|.
name|rmadmin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|StandbyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ResourceManagerAdministrationProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AddToClusterNodeLabelsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AddToClusterNodeLabelsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|CheckForDecommissioningNodesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|CheckForDecommissioningNodesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshAdminAclsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshAdminAclsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshClusterMaxPriorityRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshClusterMaxPriorityResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshNodesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshNodesResourcesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshNodesResourcesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshNodesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshQueuesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshQueuesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshServiceAclsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshServiceAclsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshSuperUserGroupsConfigurationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshSuperUserGroupsConfigurationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshUserToGroupsMappingsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshUserToGroupsMappingsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RemoveFromClusterNodeLabelsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RemoveFromClusterNodeLabelsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReplaceLabelsOnNodeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReplaceLabelsOnNodeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UpdateNodeResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UpdateNodeResourceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|LRUCacheHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * RouterRMAdminService is a service that runs on each router that can be used  * to intercept and inspect {@code ResourceManagerAdministrationProtocol}  * messages from client to the cluster resource manager. It listens  * {@code ResourceManagerAdministrationProtocol} messages from the client and  * creates a request intercepting pipeline instance for each client. The  * pipeline is a chain of intercepter instances that can inspect and modify the  * request/response as needed. The main difference with AMRMProxyService is the  * protocol they implement.  */
end_comment

begin_class
DECL|class|RouterRMAdminService
specifier|public
class|class
name|RouterRMAdminService
extends|extends
name|AbstractService
implements|implements
name|ResourceManagerAdministrationProtocol
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RouterRMAdminService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|server
specifier|private
name|Server
name|server
decl_stmt|;
DECL|field|listenerEndpoint
specifier|private
name|InetSocketAddress
name|listenerEndpoint
decl_stmt|;
comment|// For each user we store an interceptors' pipeline.
comment|// For performance issue we use LRU cache to keep in memory the newest ones
comment|// and remove the oldest used ones.
DECL|field|userPipelineMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|RequestInterceptorChainWrapper
argument_list|>
name|userPipelineMap
decl_stmt|;
DECL|method|RouterRMAdminService ()
specifier|public
name|RouterRMAdminService
parameter_list|()
block|{
name|super
argument_list|(
name|RouterRMAdminService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting Router RMAdmin Service"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|listenerEndpoint
operator|=
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|ROUTER_BIND_HOST
argument_list|,
name|YarnConfiguration
operator|.
name|ROUTER_RMADMIN_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_ROUTER_RMADMIN_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_ROUTER_RMADMIN_PORT
argument_list|)
expr_stmt|;
name|int
name|maxCacheSize
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|ROUTER_PIPELINE_CACHE_MAX_SIZE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_ROUTER_PIPELINE_CACHE_MAX_SIZE
argument_list|)
decl_stmt|;
name|this
operator|.
name|userPipelineMap
operator|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|LRUCacheHashMap
argument_list|<
name|String
argument_list|,
name|RequestInterceptorChainWrapper
argument_list|>
argument_list|(
name|maxCacheSize
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|serverConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|numWorkerThreads
init|=
name|serverConf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADMIN_CLIENT_THREAD_COUNT
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ADMIN_CLIENT_THREAD_COUNT
argument_list|)
decl_stmt|;
name|this
operator|.
name|server
operator|=
name|rpc
operator|.
name|getServer
argument_list|(
name|ResourceManagerAdministrationProtocol
operator|.
name|class
argument_list|,
name|this
argument_list|,
name|listenerEndpoint
argument_list|,
name|serverConf
argument_list|,
literal|null
argument_list|,
name|numWorkerThreads
argument_list|)
expr_stmt|;
name|this
operator|.
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Router RMAdminService listening on address: "
operator|+
name|this
operator|.
name|server
operator|.
name|getListenerAddress
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping Router RMAdminService"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|server
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|userPipelineMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns the comma separated intercepter class names from the configuration.    *    * @param conf    * @return the intercepter class names as an instance of ArrayList    */
DECL|method|getInterceptorClassNames (Configuration conf)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getInterceptorClassNames
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|configuredInterceptorClassNames
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|ROUTER_RMADMIN_INTERCEPTOR_CLASS_PIPELINE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_ROUTER_RMADMIN_INTERCEPTOR_CLASS
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|interceptorClassNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|tempList
init|=
name|StringUtils
operator|.
name|getStringCollection
argument_list|(
name|configuredInterceptorClassNames
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|item
range|:
name|tempList
control|)
block|{
name|interceptorClassNames
operator|.
name|add
argument_list|(
name|item
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|interceptorClassNames
return|;
block|}
DECL|method|getInterceptorChain ()
specifier|private
name|RequestInterceptorChainWrapper
name|getInterceptorChain
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|userPipelineMap
operator|.
name|containsKey
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|initializePipeline
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
return|return
name|userPipelineMap
operator|.
name|get
argument_list|(
name|user
argument_list|)
return|;
block|}
comment|/**    * Gets the Request intercepter chains for all the users.    *    * @return the request intercepter chains.    */
annotation|@
name|VisibleForTesting
DECL|method|getPipelines ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|RequestInterceptorChainWrapper
argument_list|>
name|getPipelines
parameter_list|()
block|{
return|return
name|this
operator|.
name|userPipelineMap
return|;
block|}
comment|/**    * This method creates and returns reference of the first intercepter in the    * chain of request intercepter instances.    *    * @return the reference of the first intercepter in the chain    */
annotation|@
name|VisibleForTesting
DECL|method|createRequestInterceptorChain ()
specifier|protected
name|RMAdminRequestInterceptor
name|createRequestInterceptorChain
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|interceptorClassNames
init|=
name|getInterceptorClassNames
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|RMAdminRequestInterceptor
name|pipeline
init|=
literal|null
decl_stmt|;
name|RMAdminRequestInterceptor
name|current
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|interceptorClassName
range|:
name|interceptorClassNames
control|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|interceptorClass
init|=
name|conf
operator|.
name|getClassByName
argument_list|(
name|interceptorClassName
argument_list|)
decl_stmt|;
if|if
condition|(
name|RMAdminRequestInterceptor
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|interceptorClass
argument_list|)
condition|)
block|{
name|RMAdminRequestInterceptor
name|interceptorInstance
init|=
operator|(
name|RMAdminRequestInterceptor
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|interceptorClass
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|pipeline
operator|==
literal|null
condition|)
block|{
name|pipeline
operator|=
name|interceptorInstance
expr_stmt|;
name|current
operator|=
name|interceptorInstance
expr_stmt|;
continue|continue;
block|}
else|else
block|{
name|current
operator|.
name|setNextInterceptor
argument_list|(
name|interceptorInstance
argument_list|)
expr_stmt|;
name|current
operator|=
name|interceptorInstance
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Class: "
operator|+
name|interceptorClassName
operator|+
literal|" not instance of "
operator|+
name|RMAdminRequestInterceptor
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Could not instantiate RMAdminRequestInterceptor: "
operator|+
name|interceptorClassName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|pipeline
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"RequestInterceptor pipeline is not configured in the system"
argument_list|)
throw|;
block|}
return|return
name|pipeline
return|;
block|}
comment|/**    * Initializes the request intercepter pipeline for the specified user.    *    * @param user    */
DECL|method|initializePipeline (String user)
specifier|private
name|void
name|initializePipeline
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|RequestInterceptorChainWrapper
name|chainWrapper
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|userPipelineMap
init|)
block|{
if|if
condition|(
name|this
operator|.
name|userPipelineMap
operator|.
name|containsKey
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Request to start an already existing user: {}"
operator|+
literal|" was received, so ignoring."
argument_list|,
name|user
argument_list|)
expr_stmt|;
return|return;
block|}
name|chainWrapper
operator|=
operator|new
name|RequestInterceptorChainWrapper
argument_list|()
expr_stmt|;
name|this
operator|.
name|userPipelineMap
operator|.
name|put
argument_list|(
name|user
argument_list|,
name|chainWrapper
argument_list|)
expr_stmt|;
block|}
comment|// We register the pipeline instance in the map first and then initialize it
comment|// later because chain initialization can be expensive and we would like to
comment|// release the lock as soon as possible to prevent other applications from
comment|// blocking when one application's chain is initializing
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing request processing pipeline for the user: {}"
argument_list|,
name|user
argument_list|)
expr_stmt|;
try|try
block|{
name|RMAdminRequestInterceptor
name|interceptorChain
init|=
name|this
operator|.
name|createRequestInterceptorChain
argument_list|()
decl_stmt|;
name|interceptorChain
operator|.
name|init
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|chainWrapper
operator|.
name|init
argument_list|(
name|interceptorChain
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|userPipelineMap
init|)
block|{
name|this
operator|.
name|userPipelineMap
operator|.
name|remove
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Private structure for encapsulating RequestInterceptor and user instances.    *    */
annotation|@
name|Private
DECL|class|RequestInterceptorChainWrapper
specifier|public
specifier|static
class|class
name|RequestInterceptorChainWrapper
block|{
DECL|field|rootInterceptor
specifier|private
name|RMAdminRequestInterceptor
name|rootInterceptor
decl_stmt|;
comment|/**      * Initializes the wrapper with the specified parameters.      *      * @param interceptor the first interceptor in the pipeline      */
DECL|method|init (RMAdminRequestInterceptor interceptor)
specifier|public
specifier|synchronized
name|void
name|init
parameter_list|(
name|RMAdminRequestInterceptor
name|interceptor
parameter_list|)
block|{
name|this
operator|.
name|rootInterceptor
operator|=
name|interceptor
expr_stmt|;
block|}
comment|/**      * Gets the root request intercepter.      *      * @return the root request intercepter      */
DECL|method|getRootInterceptor ()
specifier|public
specifier|synchronized
name|RMAdminRequestInterceptor
name|getRootInterceptor
parameter_list|()
block|{
return|return
name|rootInterceptor
return|;
block|}
comment|/**      * Shutdown the chain of interceptors when the object is destroyed.      */
annotation|@
name|Override
DECL|method|finalize ()
specifier|protected
name|void
name|finalize
parameter_list|()
block|{
name|rootInterceptor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getGroupsForUser (String user)
specifier|public
name|String
index|[]
name|getGroupsForUser
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|()
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|getGroupsForUser
argument_list|(
name|user
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|refreshQueues (RefreshQueuesRequest request)
specifier|public
name|RefreshQueuesResponse
name|refreshQueues
parameter_list|(
name|RefreshQueuesRequest
name|request
parameter_list|)
throws|throws
name|StandbyException
throws|,
name|YarnException
throws|,
name|IOException
block|{
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|()
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|refreshQueues
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|refreshNodes (RefreshNodesRequest request)
specifier|public
name|RefreshNodesResponse
name|refreshNodes
parameter_list|(
name|RefreshNodesRequest
name|request
parameter_list|)
throws|throws
name|StandbyException
throws|,
name|YarnException
throws|,
name|IOException
block|{
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|()
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|refreshSuperUserGroupsConfiguration ( RefreshSuperUserGroupsConfigurationRequest request)
specifier|public
name|RefreshSuperUserGroupsConfigurationResponse
name|refreshSuperUserGroupsConfiguration
parameter_list|(
name|RefreshSuperUserGroupsConfigurationRequest
name|request
parameter_list|)
throws|throws
name|StandbyException
throws|,
name|YarnException
throws|,
name|IOException
block|{
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|()
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|refreshUserToGroupsMappings ( RefreshUserToGroupsMappingsRequest request)
specifier|public
name|RefreshUserToGroupsMappingsResponse
name|refreshUserToGroupsMappings
parameter_list|(
name|RefreshUserToGroupsMappingsRequest
name|request
parameter_list|)
throws|throws
name|StandbyException
throws|,
name|YarnException
throws|,
name|IOException
block|{
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|()
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|refreshUserToGroupsMappings
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|refreshAdminAcls ( RefreshAdminAclsRequest request)
specifier|public
name|RefreshAdminAclsResponse
name|refreshAdminAcls
parameter_list|(
name|RefreshAdminAclsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|()
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|refreshAdminAcls
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|refreshServiceAcls ( RefreshServiceAclsRequest request)
specifier|public
name|RefreshServiceAclsResponse
name|refreshServiceAcls
parameter_list|(
name|RefreshServiceAclsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|()
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|refreshServiceAcls
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|updateNodeResource ( UpdateNodeResourceRequest request)
specifier|public
name|UpdateNodeResourceResponse
name|updateNodeResource
parameter_list|(
name|UpdateNodeResourceRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|()
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|updateNodeResource
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|refreshNodesResources ( RefreshNodesResourcesRequest request)
specifier|public
name|RefreshNodesResourcesResponse
name|refreshNodesResources
parameter_list|(
name|RefreshNodesResourcesRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|()
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|refreshNodesResources
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|addToClusterNodeLabels ( AddToClusterNodeLabelsRequest request)
specifier|public
name|AddToClusterNodeLabelsResponse
name|addToClusterNodeLabels
parameter_list|(
name|AddToClusterNodeLabelsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|()
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|addToClusterNodeLabels
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|removeFromClusterNodeLabels ( RemoveFromClusterNodeLabelsRequest request)
specifier|public
name|RemoveFromClusterNodeLabelsResponse
name|removeFromClusterNodeLabels
parameter_list|(
name|RemoveFromClusterNodeLabelsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|()
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|removeFromClusterNodeLabels
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|replaceLabelsOnNode ( ReplaceLabelsOnNodeRequest request)
specifier|public
name|ReplaceLabelsOnNodeResponse
name|replaceLabelsOnNode
parameter_list|(
name|ReplaceLabelsOnNodeRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|()
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|replaceLabelsOnNode
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|checkForDecommissioningNodes ( CheckForDecommissioningNodesRequest checkForDecommissioningNodesRequest)
specifier|public
name|CheckForDecommissioningNodesResponse
name|checkForDecommissioningNodes
parameter_list|(
name|CheckForDecommissioningNodesRequest
name|checkForDecommissioningNodesRequest
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|()
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|checkForDecommissioningNodes
argument_list|(
name|checkForDecommissioningNodesRequest
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|refreshClusterMaxPriority ( RefreshClusterMaxPriorityRequest request)
specifier|public
name|RefreshClusterMaxPriorityResponse
name|refreshClusterMaxPriority
parameter_list|(
name|RefreshClusterMaxPriorityRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|()
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|refreshClusterMaxPriority
argument_list|(
name|request
argument_list|)
return|;
block|}
block|}
end_class

end_unit

