begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.router.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|router
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|NotImplementedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|FederationPolicyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|RouterPolicyFacade
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|exceptions
operator|.
name|FederationPolicyInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|ApplicationHomeSubCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|utils
operator|.
name|FederationStateStoreFacade
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|RMWebAppUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|router
operator|.
name|RouterServerUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ContainersInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Extends the {@code AbstractRESTRequestInterceptor} class and provides an  * implementation for federation of YARN RM and scaling an application across  * multiple YARN SubClusters. All the federation specific implementation is  * encapsulated in this class. This is always the last intercepter in the chain.  */
end_comment

begin_class
DECL|class|FederationInterceptorREST
specifier|public
class|class
name|FederationInterceptorREST
extends|extends
name|AbstractRESTRequestInterceptor
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FederationInterceptorREST
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|numSubmitRetries
specifier|private
name|int
name|numSubmitRetries
decl_stmt|;
DECL|field|federationFacade
specifier|private
name|FederationStateStoreFacade
name|federationFacade
decl_stmt|;
DECL|field|rand
specifier|private
name|Random
name|rand
decl_stmt|;
DECL|field|policyFacade
specifier|private
name|RouterPolicyFacade
name|policyFacade
decl_stmt|;
DECL|field|interceptors
specifier|private
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|DefaultRequestInterceptorREST
argument_list|>
name|interceptors
decl_stmt|;
annotation|@
name|Override
DECL|method|init (String user)
specifier|public
name|void
name|init
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|federationFacade
operator|=
name|FederationStateStoreFacade
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|rand
operator|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|this
operator|.
name|getConf
argument_list|()
decl_stmt|;
try|try
block|{
name|policyFacade
operator|=
operator|new
name|RouterPolicyFacade
argument_list|(
name|conf
argument_list|,
name|federationFacade
argument_list|,
name|this
operator|.
name|federationFacade
operator|.
name|getSubClusterResolver
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationPolicyInitializationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|numSubmitRetries
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|ROUTER_CLIENTRM_SUBMIT_RETRY
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_ROUTER_CLIENTRM_SUBMIT_RETRY
argument_list|)
expr_stmt|;
name|interceptors
operator|=
operator|new
name|HashMap
argument_list|<
name|SubClusterId
argument_list|,
name|DefaultRequestInterceptorREST
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|getRandomActiveSubCluster ( Map<SubClusterId, SubClusterInfo> activeSubclusters, List<SubClusterId> blackListSubClusters)
specifier|private
name|SubClusterId
name|getRandomActiveSubCluster
parameter_list|(
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|SubClusterInfo
argument_list|>
name|activeSubclusters
parameter_list|,
name|List
argument_list|<
name|SubClusterId
argument_list|>
name|blackListSubClusters
parameter_list|)
throws|throws
name|YarnException
block|{
if|if
condition|(
name|activeSubclusters
operator|==
literal|null
operator|||
name|activeSubclusters
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
name|RouterServerUtil
operator|.
name|logAndThrowException
argument_list|(
name|FederationPolicyUtils
operator|.
name|NO_ACTIVE_SUBCLUSTER_AVAILABLE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|SubClusterId
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|activeSubclusters
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|FederationPolicyUtils
operator|.
name|validateSubClusterAvailability
argument_list|(
name|list
argument_list|,
name|blackListSubClusters
argument_list|)
expr_stmt|;
if|if
condition|(
name|blackListSubClusters
operator|!=
literal|null
condition|)
block|{
comment|// Remove from the active SubClusters from StateStore the blacklisted ones
for|for
control|(
name|SubClusterId
name|scId
range|:
name|blackListSubClusters
control|)
block|{
name|list
operator|.
name|remove
argument_list|(
name|scId
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
operator|.
name|get
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getInterceptorForSubCluster ( SubClusterId subClusterId)
specifier|protected
name|DefaultRequestInterceptorREST
name|getInterceptorForSubCluster
parameter_list|(
name|SubClusterId
name|subClusterId
parameter_list|)
block|{
if|if
condition|(
name|interceptors
operator|.
name|containsKey
argument_list|(
name|subClusterId
argument_list|)
condition|)
block|{
return|return
name|interceptors
operator|.
name|get
argument_list|(
name|subClusterId
argument_list|)
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"The interceptor for SubCluster "
operator|+
name|subClusterId
operator|+
literal|" does not exist in the cache."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|createInterceptorForSubCluster ( SubClusterId subClusterId, String webAppAddress)
specifier|private
name|DefaultRequestInterceptorREST
name|createInterceptorForSubCluster
parameter_list|(
name|SubClusterId
name|subClusterId
parameter_list|,
name|String
name|webAppAddress
parameter_list|)
block|{
specifier|final
name|Configuration
name|conf
init|=
name|this
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|String
name|interceptorClassName
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|ROUTER_WEBAPP_DEFAULT_INTERCEPTOR_CLASS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_ROUTER_WEBAPP_DEFAULT_INTERCEPTOR_CLASS
argument_list|)
decl_stmt|;
name|DefaultRequestInterceptorREST
name|interceptorInstance
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|interceptorClass
init|=
name|conf
operator|.
name|getClassByName
argument_list|(
name|interceptorClassName
argument_list|)
decl_stmt|;
if|if
condition|(
name|DefaultRequestInterceptorREST
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|interceptorClass
argument_list|)
condition|)
block|{
name|interceptorInstance
operator|=
operator|(
name|DefaultRequestInterceptorREST
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|interceptorClass
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Class: "
operator|+
name|interceptorClassName
operator|+
literal|" not instance of "
operator|+
name|DefaultRequestInterceptorREST
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Could not instantiate ApplicationMasterRequestInterceptor: "
operator|+
name|interceptorClassName
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|interceptorInstance
operator|.
name|setWebAppAddress
argument_list|(
name|webAppAddress
argument_list|)
expr_stmt|;
name|interceptorInstance
operator|.
name|setSubClusterId
argument_list|(
name|subClusterId
argument_list|)
expr_stmt|;
name|interceptors
operator|.
name|put
argument_list|(
name|subClusterId
argument_list|,
name|interceptorInstance
argument_list|)
expr_stmt|;
return|return
name|interceptorInstance
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getOrCreateInterceptorForSubCluster ( SubClusterId subClusterId, String webAppAddress)
specifier|protected
name|DefaultRequestInterceptorREST
name|getOrCreateInterceptorForSubCluster
parameter_list|(
name|SubClusterId
name|subClusterId
parameter_list|,
name|String
name|webAppAddress
parameter_list|)
block|{
name|DefaultRequestInterceptorREST
name|interceptor
init|=
name|getInterceptorForSubCluster
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
if|if
condition|(
name|interceptor
operator|==
literal|null
condition|)
block|{
name|interceptor
operator|=
name|createInterceptorForSubCluster
argument_list|(
name|subClusterId
argument_list|,
name|webAppAddress
argument_list|)
expr_stmt|;
block|}
return|return
name|interceptor
return|;
block|}
comment|/**    * Yarn Router forwards every getNewApplication requests to any RM. During    * this operation there will be no communication with the State Store. The    * Router will forward the requests to any SubCluster. The Router will retry    * to submit the request on #numSubmitRetries different SubClusters. The    * SubClusters are randomly chosen from the active ones.    *<p>    * Possible failures and behaviors:    *<p>    * Client: identical behavior as {@code RMWebServices}.    *<p>    * Router: the Client will timeout and resubmit.    *<p>    * ResourceManager: the Router will timeout and contacts another RM.    *<p>    * StateStore: not in the execution.    */
annotation|@
name|Override
DECL|method|createNewApplication (HttpServletRequest hsr)
specifier|public
name|Response
name|createNewApplication
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|SubClusterInfo
argument_list|>
name|subClustersActive
decl_stmt|;
try|try
block|{
name|subClustersActive
operator|=
name|federationFacade
operator|.
name|getSubClusters
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|List
argument_list|<
name|SubClusterId
argument_list|>
name|blacklist
init|=
operator|new
name|ArrayList
argument_list|<
name|SubClusterId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSubmitRetries
condition|;
operator|++
name|i
control|)
block|{
name|SubClusterId
name|subClusterId
decl_stmt|;
try|try
block|{
name|subClusterId
operator|=
name|getRandomActiveSubCluster
argument_list|(
name|subClustersActive
argument_list|,
name|blacklist
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|SERVICE_UNAVAILABLE
argument_list|)
operator|.
name|entity
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"getNewApplication try #"
operator|+
name|i
operator|+
literal|" on SubCluster "
operator|+
name|subClusterId
argument_list|)
expr_stmt|;
name|DefaultRequestInterceptorREST
name|interceptor
init|=
name|getOrCreateInterceptorForSubCluster
argument_list|(
name|subClusterId
argument_list|,
name|subClustersActive
operator|.
name|get
argument_list|(
name|subClusterId
argument_list|)
operator|.
name|getRMWebServiceAddress
argument_list|()
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|response
operator|=
name|interceptor
operator|.
name|createNewApplication
argument_list|(
name|hsr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to create a new ApplicationId in SubCluster "
operator|+
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|!=
literal|null
operator|&&
name|response
operator|.
name|getStatus
argument_list|()
operator|==
literal|200
condition|)
block|{
return|return
name|response
return|;
block|}
else|else
block|{
comment|// Empty response from the ResourceManager.
comment|// Blacklist this subcluster for this request.
name|blacklist
operator|.
name|add
argument_list|(
name|subClusterId
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|errMsg
init|=
literal|"Fail to create a new application."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
name|errMsg
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Today, in YARN there are no checks of any applicationId submitted.    *<p>    * Base scenarios:    *<p>    * The Client submits an application to the Router. â¢ The Router selects one    * SubCluster to forward the request. â¢ The Router inserts a tuple into    * StateStore with the selected SubCluster (e.g. SC1) and the appId. â¢ The    * State Store replies with the selected SubCluster (e.g. SC1). â¢ The Router    * submits the request to the selected SubCluster.    *<p>    * In case of State Store failure:    *<p>    * The client submits an application to the Router. â¢ The Router selects one    * SubCluster to forward the request. â¢ The Router inserts a tuple into State    * Store with the selected SubCluster (e.g. SC1) and the appId. â¢ Due to the    * State Store down the Router times out and it will retry depending on the    * FederationFacade settings. â¢ The Router replies to the client with an error    * message.    *<p>    * If State Store fails after inserting the tuple: identical behavior as    * {@code RMWebServices}.    *<p>    * In case of Router failure:    *<p>    * Scenario 1 â Crash before submission to the ResourceManager    *<p>    * The Client submits an application to the Router. â¢ The Router selects one    * SubCluster to forward the request. â¢ The Router inserts a tuple into State    * Store with the selected SubCluster (e.g. SC1) and the appId. â¢ The Router    * crashes. â¢ The Client timeouts and resubmits the application. â¢ The Router    * selects one SubCluster to forward the request. â¢ The Router inserts a tuple    * into State Store with the selected SubCluster (e.g. SC2) and the appId. â¢    * Because the tuple is already inserted in the State Store, it returns the    * previous selected SubCluster (e.g. SC1). â¢ The Router submits the request    * to the selected SubCluster (e.g. SC1).    *<p>    * Scenario 2 â Crash after submission to the ResourceManager    *<p>    * â¢ The Client submits an application to the Router. â¢ The Router selects one    * SubCluster to forward the request. â¢ The Router inserts a tuple into State    * Store with the selected SubCluster (e.g. SC1) and the appId. â¢ The Router    * submits the request to the selected SubCluster. â¢ The Router crashes. â¢ The    * Client timeouts and resubmit the application. â¢ The Router selects one    * SubCluster to forward the request. â¢ The Router inserts a tuple into State    * Store with the selected SubCluster (e.g. SC2) and the appId. â¢ The State    * Store replies with the selected SubCluster (e.g. SC1). â¢ The Router submits    * the request to the selected SubCluster (e.g. SC1). When a client re-submits    * the same application to the same RM, it does not raise an exception and    * replies with operation successful message.    *<p>    * In case of Client failure: identical behavior as {@code RMWebServices}.    *<p>    * In case of ResourceManager failure:    *<p>    * The Client submits an application to the Router. â¢ The Router selects one    * SubCluster to forward the request. â¢ The Router inserts a tuple into State    * Store with the selected SubCluster (e.g. SC1) and the appId. â¢ The Router    * submits the request to the selected SubCluster. â¢ The entire SubCluster is    * down â all the RMs in HA or the master RM is not reachable. â¢ The Router    * times out. â¢ The Router selects a new SubCluster to forward the request. â¢    * The Router update a tuple into State Store with the selected SubCluster    * (e.g. SC2) and the appId. â¢ The State Store replies with OK answer. â¢ The    * Router submits the request to the selected SubCluster (e.g. SC2).    */
annotation|@
name|Override
DECL|method|submitApplication (ApplicationSubmissionContextInfo newApp, HttpServletRequest hsr)
specifier|public
name|Response
name|submitApplication
parameter_list|(
name|ApplicationSubmissionContextInfo
name|newApp
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|newApp
operator|==
literal|null
operator|||
name|newApp
operator|.
name|getApplicationId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|errMsg
init|=
literal|"Missing ApplicationSubmissionContextInfo or "
operator|+
literal|"applicationSubmissionContex information."
decl_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|errMsg
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|ApplicationId
name|applicationId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|applicationId
operator|=
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|newApp
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|List
argument_list|<
name|SubClusterId
argument_list|>
name|blacklist
init|=
operator|new
name|ArrayList
argument_list|<
name|SubClusterId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSubmitRetries
condition|;
operator|++
name|i
control|)
block|{
name|ApplicationSubmissionContext
name|context
init|=
name|RMWebAppUtil
operator|.
name|createAppSubmissionContext
argument_list|(
name|newApp
argument_list|,
name|this
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|SubClusterId
name|subClusterId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|subClusterId
operator|=
name|policyFacade
operator|.
name|getHomeSubcluster
argument_list|(
name|context
argument_list|,
name|blacklist
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|SERVICE_UNAVAILABLE
argument_list|)
operator|.
name|entity
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"submitApplication appId"
operator|+
name|applicationId
operator|+
literal|" try #"
operator|+
name|i
operator|+
literal|" on SubCluster "
operator|+
name|subClusterId
argument_list|)
expr_stmt|;
name|ApplicationHomeSubCluster
name|appHomeSubCluster
init|=
name|ApplicationHomeSubCluster
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
name|subClusterId
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
try|try
block|{
comment|// persist the mapping of applicationId and the subClusterId which has
comment|// been selected as its home
name|subClusterId
operator|=
name|federationFacade
operator|.
name|addApplicationHomeSubCluster
argument_list|(
name|appHomeSubCluster
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"Unable to insert the ApplicationId "
operator|+
name|applicationId
operator|+
literal|" into the FederationStateStore"
decl_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|SERVICE_UNAVAILABLE
argument_list|)
operator|.
name|entity
argument_list|(
name|errMsg
operator|+
literal|" "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
else|else
block|{
try|try
block|{
comment|// update the mapping of applicationId and the home subClusterId to
comment|// the new subClusterId we have selected
name|federationFacade
operator|.
name|updateApplicationHomeSubCluster
argument_list|(
name|appHomeSubCluster
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"Unable to update the ApplicationId "
operator|+
name|applicationId
operator|+
literal|" into the FederationStateStore"
decl_stmt|;
name|SubClusterId
name|subClusterIdInStateStore
decl_stmt|;
try|try
block|{
name|subClusterIdInStateStore
operator|=
name|federationFacade
operator|.
name|getApplicationHomeSubCluster
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e1
parameter_list|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|SERVICE_UNAVAILABLE
argument_list|)
operator|.
name|entity
argument_list|(
name|e1
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
if|if
condition|(
name|subClusterId
operator|==
name|subClusterIdInStateStore
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Application "
operator|+
name|applicationId
operator|+
literal|" already submitted on SubCluster "
operator|+
name|subClusterId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|SERVICE_UNAVAILABLE
argument_list|)
operator|.
name|entity
argument_list|(
name|errMsg
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|}
name|SubClusterInfo
name|subClusterInfo
decl_stmt|;
try|try
block|{
name|subClusterInfo
operator|=
name|federationFacade
operator|.
name|getSubCluster
argument_list|(
name|subClusterId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|SERVICE_UNAVAILABLE
argument_list|)
operator|.
name|entity
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|Response
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|response
operator|=
name|getOrCreateInterceptorForSubCluster
argument_list|(
name|subClusterId
argument_list|,
name|subClusterInfo
operator|.
name|getRMWebServiceAddress
argument_list|()
argument_list|)
operator|.
name|submitApplication
argument_list|(
name|newApp
argument_list|,
name|hsr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to submit the application "
operator|+
name|applicationId
operator|+
literal|"to SubCluster "
operator|+
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|!=
literal|null
operator|&&
name|response
operator|.
name|getStatus
argument_list|()
operator|==
literal|202
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Application "
operator|+
name|context
operator|.
name|getApplicationName
argument_list|()
operator|+
literal|" with appId "
operator|+
name|applicationId
operator|+
literal|" submitted on "
operator|+
name|subClusterId
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
else|else
block|{
comment|// Empty response from the ResourceManager.
comment|// Blacklist this subcluster for this request.
name|blacklist
operator|.
name|add
argument_list|(
name|subClusterId
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|errMsg
init|=
literal|"Application "
operator|+
name|newApp
operator|.
name|getApplicationName
argument_list|()
operator|+
literal|" with appId "
operator|+
name|applicationId
operator|+
literal|" failed to be submitted."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|SERVICE_UNAVAILABLE
argument_list|)
operator|.
name|entity
argument_list|(
name|errMsg
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * The Yarn Router will forward to the respective Yarn RM in which the AM is    * running.    *<p>    * Possible failure:    *<p>    * Client: identical behavior as {@code RMWebServices}.    *<p>    * Router: the Client will timeout and resubmit the request.    *<p>    * ResourceManager: the Router will timeout and the call will fail.    *<p>    * State Store: the Router will timeout and it will retry depending on the    * FederationFacade settings - if the failure happened before the select    * operation.    */
annotation|@
name|Override
DECL|method|getApp (HttpServletRequest hsr, String appId, Set<String> unselectedFields)
specifier|public
name|AppInfo
name|getApp
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|appId
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|unselectedFields
parameter_list|)
block|{
name|ApplicationId
name|applicationId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|applicationId
operator|=
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
name|SubClusterInfo
name|subClusterInfo
init|=
literal|null
decl_stmt|;
name|SubClusterId
name|subClusterId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|subClusterId
operator|=
name|federationFacade
operator|.
name|getApplicationHomeSubCluster
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
if|if
condition|(
name|subClusterId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|subClusterInfo
operator|=
name|federationFacade
operator|.
name|getSubCluster
argument_list|(
name|subClusterId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getOrCreateInterceptorForSubCluster
argument_list|(
name|subClusterId
argument_list|,
name|subClusterInfo
operator|.
name|getRMWebServiceAddress
argument_list|()
argument_list|)
operator|.
name|getApp
argument_list|(
name|hsr
argument_list|,
name|appId
argument_list|,
name|unselectedFields
argument_list|)
return|;
block|}
comment|/**    * The Yarn Router will forward to the respective Yarn RM in which the AM is    * running.    *<p>    * Possible failures and behaviors:    *<p>    * Client: identical behavior as {@code RMWebServices}.    *<p>    * Router: the Client will timeout and resubmit the request.    *<p>    * ResourceManager: the Router will timeout and the call will fail.    *<p>    * State Store: the Router will timeout and it will retry depending on the    * FederationFacade settings - if the failure happened before the select    * operation.    */
annotation|@
name|Override
DECL|method|updateAppState (AppState targetState, HttpServletRequest hsr, String appId)
specifier|public
name|Response
name|updateAppState
parameter_list|(
name|AppState
name|targetState
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|YarnException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|ApplicationId
name|applicationId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|applicationId
operator|=
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|SubClusterId
name|subClusterId
init|=
name|federationFacade
operator|.
name|getApplicationHomeSubCluster
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
name|SubClusterInfo
name|subClusterInfo
init|=
name|federationFacade
operator|.
name|getSubCluster
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
return|return
name|getOrCreateInterceptorForSubCluster
argument_list|(
name|subClusterId
argument_list|,
name|subClusterInfo
operator|.
name|getRMWebServiceAddress
argument_list|()
argument_list|)
operator|.
name|updateAppState
argument_list|(
name|targetState
argument_list|,
name|hsr
argument_list|,
name|appId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|ClusterInfo
name|get
parameter_list|()
block|{
return|return
name|getClusterInfo
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getClusterInfo ()
specifier|public
name|ClusterInfo
name|getClusterInfo
parameter_list|()
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getClusterMetricsInfo ()
specifier|public
name|ClusterMetricsInfo
name|getClusterMetricsInfo
parameter_list|()
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getSchedulerInfo ()
specifier|public
name|SchedulerTypeInfo
name|getSchedulerInfo
parameter_list|()
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|dumpSchedulerLogs (String time, HttpServletRequest hsr)
specifier|public
name|String
name|dumpSchedulerLogs
parameter_list|(
name|String
name|time
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getNodes (String states)
specifier|public
name|NodesInfo
name|getNodes
parameter_list|(
name|String
name|states
parameter_list|)
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getNode (String nodeId)
specifier|public
name|NodeInfo
name|getNode
parameter_list|(
name|String
name|nodeId
parameter_list|)
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getActivities (HttpServletRequest hsr, String nodeId)
specifier|public
name|ActivitiesInfo
name|getActivities
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|nodeId
parameter_list|)
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getAppActivities (HttpServletRequest hsr, String appId, String time)
specifier|public
name|AppActivitiesInfo
name|getAppActivities
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|appId
parameter_list|,
name|String
name|time
parameter_list|)
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getAppStatistics (HttpServletRequest hsr, Set<String> stateQueries, Set<String> typeQueries)
specifier|public
name|ApplicationStatisticsInfo
name|getAppStatistics
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|stateQueries
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|typeQueries
parameter_list|)
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getApps (HttpServletRequest hsr, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes, Set<String> applicationTags, Set<String> unselectedFields)
specifier|public
name|AppsInfo
name|getApps
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|stateQuery
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|statesQuery
parameter_list|,
name|String
name|finalStatusQuery
parameter_list|,
name|String
name|userQuery
parameter_list|,
name|String
name|queueQuery
parameter_list|,
name|String
name|count
parameter_list|,
name|String
name|startedBegin
parameter_list|,
name|String
name|startedEnd
parameter_list|,
name|String
name|finishBegin
parameter_list|,
name|String
name|finishEnd
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|applicationTypes
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|applicationTags
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|unselectedFields
parameter_list|)
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getAppState (HttpServletRequest hsr, String appId)
specifier|public
name|AppState
name|getAppState
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getNodeToLabels (HttpServletRequest hsr)
specifier|public
name|NodeToLabelsInfo
name|getNodeToLabels
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getLabelsToNodes (Set<String> labels)
specifier|public
name|LabelsToNodesInfo
name|getLabelsToNodes
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|labels
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|replaceLabelsOnNodes (NodeToLabelsEntryList newNodeToLabels, HttpServletRequest hsr)
specifier|public
name|Response
name|replaceLabelsOnNodes
parameter_list|(
name|NodeToLabelsEntryList
name|newNodeToLabels
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|replaceLabelsOnNode (Set<String> newNodeLabelsName, HttpServletRequest hsr, String nodeId)
specifier|public
name|Response
name|replaceLabelsOnNode
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|newNodeLabelsName
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|nodeId
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getClusterNodeLabels (HttpServletRequest hsr)
specifier|public
name|NodeLabelsInfo
name|getClusterNodeLabels
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|addToClusterNodeLabels (NodeLabelsInfo newNodeLabels, HttpServletRequest hsr)
specifier|public
name|Response
name|addToClusterNodeLabels
parameter_list|(
name|NodeLabelsInfo
name|newNodeLabels
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|removeFromCluserNodeLabels (Set<String> oldNodeLabels, HttpServletRequest hsr)
specifier|public
name|Response
name|removeFromCluserNodeLabels
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|oldNodeLabels
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getLabelsOnNode (HttpServletRequest hsr, String nodeId)
specifier|public
name|NodeLabelsInfo
name|getLabelsOnNode
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|nodeId
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getAppPriority (HttpServletRequest hsr, String appId)
specifier|public
name|AppPriority
name|getAppPriority
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|updateApplicationPriority (AppPriority targetPriority, HttpServletRequest hsr, String appId)
specifier|public
name|Response
name|updateApplicationPriority
parameter_list|(
name|AppPriority
name|targetPriority
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|YarnException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getAppQueue (HttpServletRequest hsr, String appId)
specifier|public
name|AppQueue
name|getAppQueue
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|updateAppQueue (AppQueue targetQueue, HttpServletRequest hsr, String appId)
specifier|public
name|Response
name|updateAppQueue
parameter_list|(
name|AppQueue
name|targetQueue
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|YarnException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|postDelegationToken (DelegationToken tokenData, HttpServletRequest hsr)
specifier|public
name|Response
name|postDelegationToken
parameter_list|(
name|DelegationToken
name|tokenData
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
throws|,
name|Exception
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|postDelegationTokenExpiration (HttpServletRequest hsr)
specifier|public
name|Response
name|postDelegationTokenExpiration
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
throws|,
name|Exception
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|cancelDelegationToken (HttpServletRequest hsr)
specifier|public
name|Response
name|cancelDelegationToken
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
throws|,
name|Exception
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|createNewReservation (HttpServletRequest hsr)
specifier|public
name|Response
name|createNewReservation
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|submitReservation (ReservationSubmissionRequestInfo resContext, HttpServletRequest hsr)
specifier|public
name|Response
name|submitReservation
parameter_list|(
name|ReservationSubmissionRequestInfo
name|resContext
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|updateReservation (ReservationUpdateRequestInfo resContext, HttpServletRequest hsr)
specifier|public
name|Response
name|updateReservation
parameter_list|(
name|ReservationUpdateRequestInfo
name|resContext
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|deleteReservation (ReservationDeleteRequestInfo resContext, HttpServletRequest hsr)
specifier|public
name|Response
name|deleteReservation
parameter_list|(
name|ReservationDeleteRequestInfo
name|resContext
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|listReservation (String queue, String reservationId, long startTime, long endTime, boolean includeResourceAllocations, HttpServletRequest hsr)
specifier|public
name|Response
name|listReservation
parameter_list|(
name|String
name|queue
parameter_list|,
name|String
name|reservationId
parameter_list|,
name|long
name|startTime
parameter_list|,
name|long
name|endTime
parameter_list|,
name|boolean
name|includeResourceAllocations
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getAppTimeout (HttpServletRequest hsr, String appId, String type)
specifier|public
name|AppTimeoutInfo
name|getAppTimeout
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|appId
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|AuthorizationException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getAppTimeouts (HttpServletRequest hsr, String appId)
specifier|public
name|AppTimeoutsInfo
name|getAppTimeouts
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|updateApplicationTimeout (AppTimeoutInfo appTimeout, HttpServletRequest hsr, String appId)
specifier|public
name|Response
name|updateApplicationTimeout
parameter_list|(
name|AppTimeoutInfo
name|appTimeout
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|appId
parameter_list|)
throws|throws
name|AuthorizationException
throws|,
name|YarnException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getAppAttempts (HttpServletRequest hsr, String appId)
specifier|public
name|AppAttemptsInfo
name|getAppAttempts
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|,
name|String
name|appId
parameter_list|)
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getAppAttempt (HttpServletRequest req, HttpServletResponse res, String appId, String appAttemptId)
specifier|public
name|AppAttemptInfo
name|getAppAttempt
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|,
name|String
name|appId
parameter_list|,
name|String
name|appAttemptId
parameter_list|)
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getContainers (HttpServletRequest req, HttpServletResponse res, String appId, String appAttemptId)
specifier|public
name|ContainersInfo
name|getContainers
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|,
name|String
name|appId
parameter_list|,
name|String
name|appAttemptId
parameter_list|)
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getContainer (HttpServletRequest req, HttpServletResponse res, String appId, String appAttemptId, String containerId)
specifier|public
name|ContainerInfo
name|getContainer
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|,
name|String
name|appId
parameter_list|,
name|String
name|appAttemptId
parameter_list|,
name|String
name|containerId
parameter_list|)
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|setNextInterceptor (RESTRequestInterceptor next)
specifier|public
name|void
name|setNextInterceptor
parameter_list|(
name|RESTRequestInterceptor
name|next
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"setNextInterceptor is being called on "
operator|+
literal|"FederationInterceptorREST, which should be the last one "
operator|+
literal|"in the chain. Check if the interceptor pipeline configuration "
operator|+
literal|"is correct"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

