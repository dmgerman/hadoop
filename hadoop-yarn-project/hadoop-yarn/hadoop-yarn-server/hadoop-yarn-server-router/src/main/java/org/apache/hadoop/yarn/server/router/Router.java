begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|router
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ShutdownHookManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnUncaughtExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|RMWebAppUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|router
operator|.
name|clientrm
operator|.
name|RouterClientRMService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|router
operator|.
name|rmadmin
operator|.
name|RouterRMAdminService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|router
operator|.
name|webapp
operator|.
name|RouterWebApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebApps
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|util
operator|.
name|WebAppUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * The router is a stateless YARN component which is the entry point to the  * cluster. It can be deployed on multiple nodes behind a Virtual IP (VIP) with  * a LoadBalancer.  *  * The Router exposes the ApplicationClientProtocol (RPC and REST) to the  * outside world, transparently hiding the presence of ResourceManager(s), which  * allows users to request and update reservations, submit and kill  * applications, and request status on running applications.  *  * In addition, it exposes the ResourceManager Admin API.  *  * This provides a placeholder for throttling mis-behaving clients (YARN-1546)  * and masks the access to multiple RMs (YARN-3659).  */
end_comment

begin_class
DECL|class|Router
specifier|public
class|class
name|Router
extends|extends
name|CompositeService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Router
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|routerShutdownHook
specifier|private
specifier|static
name|CompositeServiceShutdownHook
name|routerShutdownHook
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|isStopping
specifier|private
name|AtomicBoolean
name|isStopping
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|clientRMProxyService
specifier|private
name|RouterClientRMService
name|clientRMProxyService
decl_stmt|;
DECL|field|rmAdminProxyService
specifier|private
name|RouterRMAdminService
name|rmAdminProxyService
decl_stmt|;
DECL|field|webApp
specifier|private
name|WebApp
name|webApp
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|webAppAddress
specifier|protected
name|String
name|webAppAddress
decl_stmt|;
comment|/**    * Priority of the Router shutdown hook.    */
DECL|field|SHUTDOWN_HOOK_PRIORITY
specifier|public
specifier|static
specifier|final
name|int
name|SHUTDOWN_HOOK_PRIORITY
init|=
literal|30
decl_stmt|;
DECL|field|METRICS_NAME
specifier|private
specifier|static
specifier|final
name|String
name|METRICS_NAME
init|=
literal|"Router"
decl_stmt|;
DECL|method|Router ()
specifier|public
name|Router
parameter_list|()
block|{
name|super
argument_list|(
name|Router
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|doSecureLogin ()
specifier|protected
name|void
name|doSecureLogin
parameter_list|()
throws|throws
name|IOException
block|{
comment|// TODO YARN-6539 Create SecureLogin inside Router
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration config)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|conf
operator|=
name|config
expr_stmt|;
comment|// ClientRM Proxy
name|clientRMProxyService
operator|=
name|createClientRMProxyService
argument_list|()
expr_stmt|;
name|addService
argument_list|(
name|clientRMProxyService
argument_list|)
expr_stmt|;
comment|// RMAdmin Proxy
name|rmAdminProxyService
operator|=
name|createRMAdminProxyService
argument_list|()
expr_stmt|;
name|addService
argument_list|(
name|rmAdminProxyService
argument_list|)
expr_stmt|;
comment|// WebService
name|webAppAddress
operator|=
name|WebAppUtils
operator|.
name|getWebAppBindURL
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|YarnConfiguration
operator|.
name|ROUTER_BIND_HOST
argument_list|,
name|WebAppUtils
operator|.
name|getRouterWebAppURLWithoutScheme
argument_list|(
name|this
operator|.
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Metrics
name|DefaultMetricsSystem
operator|.
name|initialize
argument_list|(
name|METRICS_NAME
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|doSecureLogin
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Failed Router login"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|startWepApp
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|webApp
operator|!=
literal|null
condition|)
block|{
name|webApp
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isStopping
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
condition|)
block|{
return|return;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
name|DefaultMetricsSystem
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|shutDown ()
specifier|protected
name|void
name|shutDown
parameter_list|()
block|{
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Router
operator|.
name|this
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|createClientRMProxyService ()
specifier|protected
name|RouterClientRMService
name|createClientRMProxyService
parameter_list|()
block|{
return|return
operator|new
name|RouterClientRMService
argument_list|()
return|;
block|}
DECL|method|createRMAdminProxyService ()
specifier|protected
name|RouterRMAdminService
name|createRMAdminProxyService
parameter_list|()
block|{
return|return
operator|new
name|RouterRMAdminService
argument_list|()
return|;
block|}
annotation|@
name|Private
DECL|method|getWebapp ()
specifier|public
name|WebApp
name|getWebapp
parameter_list|()
block|{
return|return
name|this
operator|.
name|webApp
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|startWepApp ()
specifier|public
name|void
name|startWepApp
parameter_list|()
block|{
name|RMWebAppUtil
operator|.
name|setupSecurityAndFilters
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Builder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
name|WebApps
operator|.
name|$for
argument_list|(
literal|"cluster"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"ws"
argument_list|)
operator|.
name|with
argument_list|(
name|conf
argument_list|)
operator|.
name|at
argument_list|(
name|webAppAddress
argument_list|)
decl_stmt|;
name|webApp
operator|=
name|builder
operator|.
name|start
argument_list|(
operator|new
name|RouterWebApp
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|main (String[] argv)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|setDefaultUncaughtExceptionHandler
argument_list|(
operator|new
name|YarnUncaughtExceptionHandler
argument_list|()
argument_list|)
expr_stmt|;
name|StringUtils
operator|.
name|startupShutdownMessage
argument_list|(
name|Router
operator|.
name|class
argument_list|,
name|argv
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|Router
name|router
init|=
operator|new
name|Router
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Remove the old hook if we are rebooting.
if|if
condition|(
literal|null
operator|!=
name|routerShutdownHook
condition|)
block|{
name|ShutdownHookManager
operator|.
name|get
argument_list|()
operator|.
name|removeShutdownHook
argument_list|(
name|routerShutdownHook
argument_list|)
expr_stmt|;
block|}
name|routerShutdownHook
operator|=
operator|new
name|CompositeServiceShutdownHook
argument_list|(
name|router
argument_list|)
expr_stmt|;
name|ShutdownHookManager
operator|.
name|get
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
name|routerShutdownHook
argument_list|,
name|SHUTDOWN_HOOK_PRIORITY
argument_list|)
expr_stmt|;
name|router
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|router
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error starting Router"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

