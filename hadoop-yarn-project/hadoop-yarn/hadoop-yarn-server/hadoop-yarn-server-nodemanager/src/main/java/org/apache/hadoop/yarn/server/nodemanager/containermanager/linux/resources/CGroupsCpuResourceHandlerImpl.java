begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.resources
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|util
operator|.
name|NodeManagerHardwareUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ResourceCalculatorPlugin
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * An implementation for using CGroups to restrict CPU usage on Linux. The  * implementation supports 3 different controls - restrict usage of all YARN  * containers, restrict relative usage of individual YARN containers and  * restrict usage of individual YARN containers. Admins can set the overall CPU  * to be used by all YARN containers - this is implemented by setting  * cpu.cfs_period_us and cpu.cfs_quota_us to the ratio desired. If strict  * resource usage mode is not enabled, cpu.shares is set for individual  * containers - this prevents containers from exceeding the overall limit for  * YARN containers but individual containers can use as much of the CPU as  * available(under the YARN limit). If strict resource usage is enabled, then  * container can only use the percentage of CPU allocated to them and this is  * again implemented using cpu.cfs_period_us and cpu.cfs_quota_us.  *  */
end_comment

begin_class
annotation|@
name|InterfaceStability
operator|.
name|Unstable
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|CGroupsCpuResourceHandlerImpl
specifier|public
class|class
name|CGroupsCpuResourceHandlerImpl
implements|implements
name|CpuResourceHandler
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CGroupsCpuResourceHandlerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|cGroupsHandler
specifier|private
name|CGroupsHandler
name|cGroupsHandler
decl_stmt|;
DECL|field|strictResourceUsageMode
specifier|private
name|boolean
name|strictResourceUsageMode
init|=
literal|false
decl_stmt|;
DECL|field|yarnProcessors
specifier|private
name|float
name|yarnProcessors
decl_stmt|;
DECL|field|nodeVCores
specifier|private
name|int
name|nodeVCores
decl_stmt|;
DECL|field|CPU
specifier|private
specifier|static
specifier|final
name|CGroupsHandler
operator|.
name|CGroupController
name|CPU
init|=
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|MAX_QUOTA_US
specifier|static
specifier|final
name|int
name|MAX_QUOTA_US
init|=
literal|1000
operator|*
literal|1000
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|MIN_PERIOD_US
specifier|static
specifier|final
name|int
name|MIN_PERIOD_US
init|=
literal|1000
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|CPU_DEFAULT_WEIGHT
specifier|static
specifier|final
name|int
name|CPU_DEFAULT_WEIGHT
init|=
literal|1024
decl_stmt|;
comment|// set by kernel
DECL|method|CGroupsCpuResourceHandlerImpl (CGroupsHandler cGroupsHandler)
name|CGroupsCpuResourceHandlerImpl
parameter_list|(
name|CGroupsHandler
name|cGroupsHandler
parameter_list|)
block|{
name|this
operator|.
name|cGroupsHandler
operator|=
name|cGroupsHandler
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|bootstrap (Configuration conf)
specifier|public
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|bootstrap
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
return|return
name|bootstrap
argument_list|(
name|ResourceCalculatorPlugin
operator|.
name|getResourceCalculatorPlugin
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|bootstrap ( ResourceCalculatorPlugin plugin, Configuration conf)
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|bootstrap
parameter_list|(
name|ResourceCalculatorPlugin
name|plugin
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|this
operator|.
name|strictResourceUsageMode
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE
argument_list|)
expr_stmt|;
name|this
operator|.
name|cGroupsHandler
operator|.
name|initializeCGroupController
argument_list|(
name|CPU
argument_list|)
expr_stmt|;
name|nodeVCores
operator|=
name|NodeManagerHardwareUtils
operator|.
name|getVCores
argument_list|(
name|plugin
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// cap overall usage to the number of cores allocated to YARN
name|yarnProcessors
operator|=
name|NodeManagerHardwareUtils
operator|.
name|getContainersCPUs
argument_list|(
name|plugin
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|int
name|systemProcessors
init|=
name|NodeManagerHardwareUtils
operator|.
name|getNodeCPUs
argument_list|(
name|plugin
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|boolean
name|existingCpuLimits
decl_stmt|;
try|try
block|{
name|existingCpuLimits
operator|=
name|cpuLimitsExist
argument_list|(
name|cGroupsHandler
operator|.
name|getPathForCGroup
argument_list|(
name|CPU
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
if|if
condition|(
name|systemProcessors
operator|!=
operator|(
name|int
operator|)
name|yarnProcessors
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"YARN containers restricted to "
operator|+
name|yarnProcessors
operator|+
literal|" cores"
argument_list|)
expr_stmt|;
name|int
index|[]
name|limits
init|=
name|getOverallLimits
argument_list|(
name|yarnProcessors
argument_list|)
decl_stmt|;
name|cGroupsHandler
operator|.
name|updateCGroupParam
argument_list|(
name|CPU
argument_list|,
literal|""
argument_list|,
name|CGroupsHandler
operator|.
name|CGROUP_CPU_PERIOD_US
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|limits
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|cGroupsHandler
operator|.
name|updateCGroupParam
argument_list|(
name|CPU
argument_list|,
literal|""
argument_list|,
name|CGroupsHandler
operator|.
name|CGROUP_CPU_QUOTA_US
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|limits
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|existingCpuLimits
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing CPU constraints for YARN containers."
argument_list|)
expr_stmt|;
name|cGroupsHandler
operator|.
name|updateCGroupParam
argument_list|(
name|CPU
argument_list|,
literal|""
argument_list|,
name|CGroupsHandler
operator|.
name|CGROUP_CPU_QUOTA_US
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|method|cpuLimitsExist (String path)
specifier|public
specifier|static
name|boolean
name|cpuLimitsExist
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|quotaFile
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|,
name|CPU
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|CGroupsHandler
operator|.
name|CGROUP_CPU_QUOTA_US
argument_list|)
decl_stmt|;
if|if
condition|(
name|quotaFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|String
name|contents
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|quotaFile
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|int
name|quotaUS
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|contents
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|quotaUS
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|VisibleForTesting
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|method|getOverallLimits (float yarnProcessors)
specifier|public
specifier|static
name|int
index|[]
name|getOverallLimits
parameter_list|(
name|float
name|yarnProcessors
parameter_list|)
block|{
name|int
index|[]
name|ret
init|=
operator|new
name|int
index|[
literal|2
index|]
decl_stmt|;
if|if
condition|(
name|yarnProcessors
operator|<
literal|0.01f
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Number of processors can't be<= 0."
argument_list|)
throw|;
block|}
name|int
name|quotaUS
init|=
name|MAX_QUOTA_US
decl_stmt|;
name|int
name|periodUS
init|=
call|(
name|int
call|)
argument_list|(
name|MAX_QUOTA_US
operator|/
name|yarnProcessors
argument_list|)
decl_stmt|;
if|if
condition|(
name|yarnProcessors
operator|<
literal|1.0f
condition|)
block|{
name|periodUS
operator|=
name|MAX_QUOTA_US
expr_stmt|;
name|quotaUS
operator|=
call|(
name|int
call|)
argument_list|(
name|periodUS
operator|*
name|yarnProcessors
argument_list|)
expr_stmt|;
if|if
condition|(
name|quotaUS
operator|<
name|MIN_PERIOD_US
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The quota calculated for the cgroup was too low."
operator|+
literal|" The minimum value is "
operator|+
name|MIN_PERIOD_US
operator|+
literal|", calculated value is "
operator|+
name|quotaUS
operator|+
literal|". Setting quota to minimum value."
argument_list|)
expr_stmt|;
name|quotaUS
operator|=
name|MIN_PERIOD_US
expr_stmt|;
block|}
block|}
comment|// cfs_period_us can't be less than 1000 microseconds
comment|// if the value of periodUS is less than 1000, we can't really use cgroups
comment|// to limit cpu
if|if
condition|(
name|periodUS
operator|<
name|MIN_PERIOD_US
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The period calculated for the cgroup was too low."
operator|+
literal|" The minimum value is "
operator|+
name|MIN_PERIOD_US
operator|+
literal|", calculated value is "
operator|+
name|periodUS
operator|+
literal|". Using all available CPU."
argument_list|)
expr_stmt|;
name|periodUS
operator|=
name|MAX_QUOTA_US
expr_stmt|;
name|quotaUS
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|ret
index|[
literal|0
index|]
operator|=
name|periodUS
expr_stmt|;
name|ret
index|[
literal|1
index|]
operator|=
name|quotaUS
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|preStart (Container container)
specifier|public
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|preStart
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|String
name|cgroupId
init|=
name|container
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Resource
name|containerResource
init|=
name|container
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|cGroupsHandler
operator|.
name|createCGroup
argument_list|(
name|CPU
argument_list|,
name|cgroupId
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|containerVCores
init|=
name|containerResource
operator|.
name|getVirtualCores
argument_list|()
decl_stmt|;
name|int
name|cpuShares
init|=
name|CPU_DEFAULT_WEIGHT
operator|*
name|containerVCores
decl_stmt|;
name|cGroupsHandler
operator|.
name|updateCGroupParam
argument_list|(
name|CPU
argument_list|,
name|cgroupId
argument_list|,
name|CGroupsHandler
operator|.
name|CGROUP_CPU_SHARES
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|cpuShares
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|strictResourceUsageMode
condition|)
block|{
if|if
condition|(
name|nodeVCores
operator|!=
name|containerVCores
condition|)
block|{
name|float
name|containerCPU
init|=
operator|(
name|containerVCores
operator|*
name|yarnProcessors
operator|)
operator|/
operator|(
name|float
operator|)
name|nodeVCores
decl_stmt|;
name|int
index|[]
name|limits
init|=
name|getOverallLimits
argument_list|(
name|containerCPU
argument_list|)
decl_stmt|;
name|cGroupsHandler
operator|.
name|updateCGroupParam
argument_list|(
name|CPU
argument_list|,
name|cgroupId
argument_list|,
name|CGroupsHandler
operator|.
name|CGROUP_CPU_PERIOD_US
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|limits
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|cGroupsHandler
operator|.
name|updateCGroupParam
argument_list|(
name|CPU
argument_list|,
name|cgroupId
argument_list|,
name|CGroupsHandler
operator|.
name|CGROUP_CPU_QUOTA_US
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|limits
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ResourceHandlerException
name|re
parameter_list|)
block|{
name|cGroupsHandler
operator|.
name|deleteCGroup
argument_list|(
name|CPU
argument_list|,
name|cgroupId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not update cgroup for container"
argument_list|,
name|re
argument_list|)
expr_stmt|;
throw|throw
name|re
throw|;
block|}
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|PrivilegedOperation
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|ADD_PID_TO_CGROUP
argument_list|,
name|PrivilegedOperation
operator|.
name|CGROUP_ARG_PREFIX
operator|+
name|cGroupsHandler
operator|.
name|getPathForCGroupTasks
argument_list|(
name|CPU
argument_list|,
name|cgroupId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|reacquireContainer (ContainerId containerId)
specifier|public
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|reacquireContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|postComplete (ContainerId containerId)
specifier|public
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|postComplete
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|cGroupsHandler
operator|.
name|deleteCGroup
argument_list|(
name|CPU
argument_list|,
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
DECL|method|teardown ()
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|teardown
parameter_list|()
throws|throws
name|ResourceHandlerException
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

