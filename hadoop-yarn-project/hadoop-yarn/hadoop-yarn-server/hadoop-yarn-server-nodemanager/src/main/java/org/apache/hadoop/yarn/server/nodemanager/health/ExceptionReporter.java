begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.health
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|health
package|;
end_package

begin_comment
comment|/**  * Simple {@link HealthReporter} implementation which reports whether a fatal  * exception has happened in the NodeManager.  *  * See the<code>reportException</code> call of  * {@link org.apache.hadoop.yarn.server.nodemanager.NodeStatusUpdaterImpl}  */
end_comment

begin_class
DECL|class|ExceptionReporter
specifier|public
class|class
name|ExceptionReporter
implements|implements
name|HealthReporter
block|{
DECL|field|nodeHealthException
specifier|private
name|Exception
name|nodeHealthException
decl_stmt|;
DECL|field|nodeHealthExceptionReportTime
specifier|private
name|long
name|nodeHealthExceptionReportTime
decl_stmt|;
DECL|method|ExceptionReporter ()
name|ExceptionReporter
parameter_list|()
block|{
name|this
operator|.
name|nodeHealthException
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|nodeHealthExceptionReportTime
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isHealthy ()
specifier|public
specifier|synchronized
name|boolean
name|isHealthy
parameter_list|()
block|{
return|return
name|nodeHealthException
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getHealthReport ()
specifier|public
specifier|synchronized
name|String
name|getHealthReport
parameter_list|()
block|{
return|return
name|nodeHealthException
operator|==
literal|null
condition|?
literal|null
else|:
name|nodeHealthException
operator|.
name|getMessage
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getLastHealthReportTime ()
specifier|public
specifier|synchronized
name|long
name|getLastHealthReportTime
parameter_list|()
block|{
return|return
name|nodeHealthExceptionReportTime
return|;
block|}
comment|/**    * Report an exception to mark the node as unhealthy.    * @param ex the exception that makes the node unhealthy    */
DECL|method|reportException (Exception ex)
specifier|public
specifier|synchronized
name|void
name|reportException
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|nodeHealthException
operator|=
name|ex
expr_stmt|;
name|nodeHealthExceptionReportTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

