begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.fpga
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|fpga
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|CGroupsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|ResourceHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|fpga
operator|.
name|FpgaResourceHandlerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|DockerCommandPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|NodeResourceUpdaterPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|ResourcePlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NMResourceInfo
import|;
end_import

begin_class
DECL|class|FpgaResourcePlugin
specifier|public
class|class
name|FpgaResourcePlugin
implements|implements
name|ResourcePlugin
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FpgaResourcePlugin
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|fpgaResourceHandler
specifier|private
name|ResourceHandler
name|fpgaResourceHandler
init|=
literal|null
decl_stmt|;
DECL|field|vendorPlugin
specifier|private
name|AbstractFpgaVendorPlugin
name|vendorPlugin
init|=
literal|null
decl_stmt|;
DECL|field|fpgaNodeResourceUpdateHandler
specifier|private
name|FpgaNodeResourceUpdateHandler
name|fpgaNodeResourceUpdateHandler
init|=
literal|null
decl_stmt|;
DECL|method|createFpgaVendorPlugin (Configuration conf)
specifier|private
name|AbstractFpgaVendorPlugin
name|createFpgaVendorPlugin
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|vendorPluginClass
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_VENDOR_PLUGIN
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_FPGA_VENDOR_PLUGIN
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using FPGA vendor plugin: "
operator|+
name|vendorPluginClass
argument_list|)
expr_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|schedulerClazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|vendorPluginClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|AbstractFpgaVendorPlugin
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|schedulerClazz
argument_list|)
condition|)
block|{
return|return
operator|(
name|AbstractFpgaVendorPlugin
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|schedulerClazz
argument_list|,
name|conf
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Class: "
operator|+
name|vendorPluginClass
operator|+
literal|" not instance of "
operator|+
name|AbstractFpgaVendorPlugin
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Could not instantiate FPGA vendor plugin: "
operator|+
name|vendorPluginClass
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|initialize (Context context)
specifier|public
name|void
name|initialize
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// Get vendor plugin from configuration
name|this
operator|.
name|vendorPlugin
operator|=
name|createFpgaVendorPlugin
argument_list|(
name|context
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|FpgaDiscoverer
operator|.
name|getInstance
argument_list|()
operator|.
name|setResourceHanderPlugin
argument_list|(
name|vendorPlugin
argument_list|)
expr_stmt|;
name|FpgaDiscoverer
operator|.
name|getInstance
argument_list|()
operator|.
name|initialize
argument_list|(
name|context
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|fpgaNodeResourceUpdateHandler
operator|=
operator|new
name|FpgaNodeResourceUpdateHandler
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createResourceHandler ( Context nmContext, CGroupsHandler cGroupsHandler, PrivilegedOperationExecutor privilegedOperationExecutor)
specifier|public
name|ResourceHandler
name|createResourceHandler
parameter_list|(
name|Context
name|nmContext
parameter_list|,
name|CGroupsHandler
name|cGroupsHandler
parameter_list|,
name|PrivilegedOperationExecutor
name|privilegedOperationExecutor
parameter_list|)
block|{
if|if
condition|(
name|fpgaResourceHandler
operator|==
literal|null
condition|)
block|{
name|fpgaResourceHandler
operator|=
operator|new
name|FpgaResourceHandlerImpl
argument_list|(
name|nmContext
argument_list|,
name|cGroupsHandler
argument_list|,
name|privilegedOperationExecutor
argument_list|,
name|vendorPlugin
argument_list|)
expr_stmt|;
block|}
return|return
name|fpgaResourceHandler
return|;
block|}
annotation|@
name|Override
DECL|method|getNodeResourceHandlerInstance ()
specifier|public
name|NodeResourceUpdaterPlugin
name|getNodeResourceHandlerInstance
parameter_list|()
block|{
return|return
name|fpgaNodeResourceUpdateHandler
return|;
block|}
annotation|@
name|Override
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|YarnException
block|{    }
annotation|@
name|Override
DECL|method|getDockerCommandPluginInstance ()
specifier|public
name|DockerCommandPlugin
name|getDockerCommandPluginInstance
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getNMResourceInfo ()
specifier|public
name|NMResourceInfo
name|getNMResourceInfo
parameter_list|()
throws|throws
name|YarnException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|FpgaResourcePlugin
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

