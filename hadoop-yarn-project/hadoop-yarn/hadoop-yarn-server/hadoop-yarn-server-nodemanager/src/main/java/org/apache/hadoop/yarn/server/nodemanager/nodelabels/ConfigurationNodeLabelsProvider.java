begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.nodelabels
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|nodelabels
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_comment
comment|/**  * Provides Node's Labels by constantly monitoring the configuration.  */
end_comment

begin_class
DECL|class|ConfigurationNodeLabelsProvider
specifier|public
class|class
name|ConfigurationNodeLabelsProvider
extends|extends
name|AbstractNodeLabelsProvider
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ConfigurationNodeLabelsProvider
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|ConfigurationNodeLabelsProvider ()
specifier|public
name|ConfigurationNodeLabelsProvider
parameter_list|()
block|{
name|super
argument_list|(
literal|"Configuration Based NodeLabels Provider"
argument_list|)
expr_stmt|;
block|}
DECL|method|updateNodeLabelsFromConfig (Configuration conf)
specifier|private
name|void
name|updateNodeLabelsFromConfig
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|configuredNodePartition
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_PROVIDER_CONFIGURED_NODE_PARTITION
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|setNodeLabels
argument_list|(
name|convertToNodeLabelSet
argument_list|(
name|configuredNodePartition
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|ConfigurationMonitorTimerTask
specifier|private
class|class
name|ConfigurationMonitorTimerTask
extends|extends
name|TimerTask
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|updateNodeLabelsFromConfig
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to update node Labels from configuration.xml "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|createTimerTask ()
specifier|public
name|TimerTask
name|createTimerTask
parameter_list|()
block|{
return|return
operator|new
name|ConfigurationMonitorTimerTask
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|cleanUp ()
specifier|protected
name|void
name|cleanUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|//No cleanup Req!
block|}
block|}
end_class

end_unit

