begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer.sharedcache
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|sharedcache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|SCMUploaderProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SCMUploaderNotifyRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|sharedcache
operator|.
name|SharedCacheUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sharedcache
operator|.
name|SharedCacheChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sharedcache
operator|.
name|SharedCacheChecksumFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|FSDownload
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * The callable class that handles the actual upload to the shared cache.  */
end_comment

begin_class
DECL|class|SharedCacheUploader
class|class
name|SharedCacheUploader
implements|implements
name|Callable
argument_list|<
name|Boolean
argument_list|>
block|{
comment|// rwxr-xr-x
DECL|field|DIRECTORY_PERMISSION
specifier|static
specifier|final
name|FsPermission
name|DIRECTORY_PERMISSION
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|00755
argument_list|)
decl_stmt|;
comment|// r-xr-xr-x
DECL|field|FILE_PERMISSION
specifier|static
specifier|final
name|FsPermission
name|FILE_PERMISSION
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|00555
argument_list|)
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SharedCacheUploader
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|resource
specifier|private
specifier|final
name|LocalResource
name|resource
decl_stmt|;
DECL|field|localPath
specifier|private
specifier|final
name|Path
name|localPath
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|String
name|user
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|scmClient
specifier|private
specifier|final
name|SCMUploaderProtocol
name|scmClient
decl_stmt|;
DECL|field|fs
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
DECL|field|localFs
specifier|private
specifier|final
name|FileSystem
name|localFs
decl_stmt|;
DECL|field|sharedCacheRootDir
specifier|private
specifier|final
name|String
name|sharedCacheRootDir
decl_stmt|;
DECL|field|nestedLevel
specifier|private
specifier|final
name|int
name|nestedLevel
decl_stmt|;
DECL|field|checksum
specifier|private
specifier|final
name|SharedCacheChecksum
name|checksum
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|final
name|RecordFactory
name|recordFactory
decl_stmt|;
DECL|method|SharedCacheUploader (LocalResource resource, Path localPath, String user, Configuration conf, SCMUploaderProtocol scmClient)
specifier|public
name|SharedCacheUploader
parameter_list|(
name|LocalResource
name|resource
parameter_list|,
name|Path
name|localPath
parameter_list|,
name|String
name|user
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|SCMUploaderProtocol
name|scmClient
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|resource
argument_list|,
name|localPath
argument_list|,
name|user
argument_list|,
name|conf
argument_list|,
name|scmClient
argument_list|,
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
argument_list|,
name|localPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param resource the local resource that contains the original remote path    * @param localPath the path in the local filesystem where the resource is    * localized    * @param fs the filesystem of the shared cache    * @param localFs the local filesystem    */
DECL|method|SharedCacheUploader (LocalResource resource, Path localPath, String user, Configuration conf, SCMUploaderProtocol scmClient, FileSystem fs, FileSystem localFs)
specifier|public
name|SharedCacheUploader
parameter_list|(
name|LocalResource
name|resource
parameter_list|,
name|Path
name|localPath
parameter_list|,
name|String
name|user
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|SCMUploaderProtocol
name|scmClient
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|FileSystem
name|localFs
parameter_list|)
block|{
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
name|this
operator|.
name|localPath
operator|=
name|localPath
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|scmClient
operator|=
name|scmClient
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|sharedCacheRootDir
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|SHARED_CACHE_ROOT
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_SHARED_CACHE_ROOT
argument_list|)
expr_stmt|;
name|this
operator|.
name|nestedLevel
operator|=
name|SharedCacheUtil
operator|.
name|getCacheDepth
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|checksum
operator|=
name|SharedCacheChecksumFactory
operator|.
name|getChecksum
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|localFs
operator|=
name|localFs
expr_stmt|;
name|this
operator|.
name|recordFactory
operator|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Uploads the file under the shared cache, and notifies the shared cache    * manager. If it is unable to upload the file because it already exists, it    * returns false.    */
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|tempPath
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|verifyAccess
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"User "
operator|+
name|user
operator|+
literal|" is not authorized to upload file "
operator|+
name|localPath
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// first determine the actual local path that will be used for upload
name|Path
name|actualPath
init|=
name|getActualPath
argument_list|()
decl_stmt|;
comment|// compute the checksum
name|String
name|checksumVal
init|=
name|computeChecksum
argument_list|(
name|actualPath
argument_list|)
decl_stmt|;
comment|// create the directory (if it doesn't exist)
name|Path
name|directoryPath
init|=
operator|new
name|Path
argument_list|(
name|SharedCacheUtil
operator|.
name|getCacheEntryPath
argument_list|(
name|nestedLevel
argument_list|,
name|sharedCacheRootDir
argument_list|,
name|checksumVal
argument_list|)
argument_list|)
decl_stmt|;
comment|// let's not check if the directory already exists: in the vast majority
comment|// of the cases, the directory does not exist; as long as mkdirs does not
comment|// error out if it exists, we should be fine
name|fs
operator|.
name|mkdirs
argument_list|(
name|directoryPath
argument_list|,
name|DIRECTORY_PERMISSION
argument_list|)
expr_stmt|;
comment|// create the temporary file
name|tempPath
operator|=
operator|new
name|Path
argument_list|(
name|directoryPath
argument_list|,
name|getTemporaryFileName
argument_list|(
name|actualPath
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|uploadFile
argument_list|(
name|actualPath
argument_list|,
name|tempPath
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not copy the file to the shared cache at "
operator|+
name|tempPath
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// set the permission so that it is readable but not writable
name|fs
operator|.
name|setPermission
argument_list|(
name|tempPath
argument_list|,
name|FILE_PERMISSION
argument_list|)
expr_stmt|;
comment|// rename it to the final filename
name|Path
name|finalPath
init|=
operator|new
name|Path
argument_list|(
name|directoryPath
argument_list|,
name|actualPath
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|tempPath
argument_list|,
name|finalPath
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The file already exists under "
operator|+
name|finalPath
operator|+
literal|". Ignoring this attempt."
argument_list|)
expr_stmt|;
name|deleteTempFile
argument_list|(
name|tempPath
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// notify the SCM
if|if
condition|(
operator|!
name|notifySharedCacheManager
argument_list|(
name|checksumVal
argument_list|,
name|actualPath
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// the shared cache manager rejected the upload (as it is likely
comment|// uploaded under a different name
comment|// clean up this file and exit
name|fs
operator|.
name|delete
argument_list|(
name|finalPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// set the replication factor
name|short
name|replication
init|=
operator|(
name|short
operator|)
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|SHARED_CACHE_NM_UPLOADER_REPLICATION_FACTOR
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_SHARED_CACHE_NM_UPLOADER_REPLICATION_FACTOR
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setReplication
argument_list|(
name|finalPath
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"File "
operator|+
name|actualPath
operator|.
name|getName
argument_list|()
operator|+
literal|" was uploaded to the shared cache at "
operator|+
name|finalPath
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while uploading the file "
operator|+
name|localPath
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// in case an exception is thrown, delete the temp file
name|deleteTempFile
argument_list|(
name|tempPath
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getActualPath ()
name|Path
name|getActualPath
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|localPath
decl_stmt|;
name|FileStatus
name|status
init|=
name|localFs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
name|status
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// for certain types of resources that get unpacked, the original file may
comment|// be found under the directory with the same name (see
comment|// FSDownload.unpack); check if the path is a directory and if so look
comment|// under it
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
name|path
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
DECL|method|deleteTempFile (Path tempPath)
specifier|private
name|void
name|deleteTempFile
parameter_list|(
name|Path
name|tempPath
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|tempPath
operator|!=
literal|null
operator|&&
name|fs
operator|.
name|exists
argument_list|(
name|tempPath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|tempPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{}
block|}
comment|/**    * Checks that the (original) remote file is either owned by the user who    * started the app or public.    */
annotation|@
name|VisibleForTesting
DECL|method|verifyAccess ()
name|boolean
name|verifyAccess
parameter_list|()
throws|throws
name|IOException
block|{
comment|// if it is in the public cache, it's trivially OK
if|if
condition|(
name|resource
operator|.
name|getVisibility
argument_list|()
operator|==
name|LocalResourceVisibility
operator|.
name|PUBLIC
condition|)
block|{
return|return
literal|true
return|;
block|}
specifier|final
name|Path
name|remotePath
decl_stmt|;
try|try
block|{
name|remotePath
operator|=
name|ConverterUtils
operator|.
name|getPathFromYarnURL
argument_list|(
name|resource
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid resource"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// get the file status of the HDFS file
name|FileSystem
name|remoteFs
init|=
name|remotePath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
name|status
init|=
name|remoteFs
operator|.
name|getFileStatus
argument_list|(
name|remotePath
argument_list|)
decl_stmt|;
comment|// check to see if the file has been modified in any way
if|if
condition|(
name|status
operator|.
name|getModificationTime
argument_list|()
operator|!=
name|resource
operator|.
name|getTimestamp
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The remote file "
operator|+
name|remotePath
operator|+
literal|" has changed since it's localized; will not consider it for upload"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// check for the user ownership
if|if
condition|(
name|status
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|user
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
comment|// the user owns the file
block|}
comment|// check if the file is publicly readable otherwise
return|return
name|fileIsPublic
argument_list|(
name|remotePath
argument_list|,
name|remoteFs
argument_list|,
name|status
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|fileIsPublic (final Path remotePath, FileSystem remoteFs, FileStatus status)
name|boolean
name|fileIsPublic
parameter_list|(
specifier|final
name|Path
name|remotePath
parameter_list|,
name|FileSystem
name|remoteFs
parameter_list|,
name|FileStatus
name|status
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FSDownload
operator|.
name|isPublic
argument_list|(
name|remoteFs
argument_list|,
name|remotePath
argument_list|,
name|status
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Uploads the file to the shared cache under a temporary name, and returns    * the result.    */
annotation|@
name|VisibleForTesting
DECL|method|uploadFile (Path sourcePath, Path tempPath)
name|boolean
name|uploadFile
parameter_list|(
name|Path
name|sourcePath
parameter_list|,
name|Path
name|tempPath
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FileUtil
operator|.
name|copy
argument_list|(
name|localFs
argument_list|,
name|sourcePath
argument_list|,
name|fs
argument_list|,
name|tempPath
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|computeChecksum (Path path)
name|String
name|computeChecksum
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|is
init|=
name|localFs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|checksum
operator|.
name|computeChecksum
argument_list|(
name|is
argument_list|)
return|;
block|}
finally|finally
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{}
block|}
block|}
DECL|method|getTemporaryFileName (Path path)
specifier|private
name|String
name|getTemporaryFileName
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextLong
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|notifySharedCacheManager (String checksumVal, String fileName)
name|boolean
name|notifySharedCacheManager
parameter_list|(
name|String
name|checksumVal
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|SCMUploaderNotifyRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|SCMUploaderNotifyRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setResourceKey
argument_list|(
name|checksumVal
argument_list|)
expr_stmt|;
name|request
operator|.
name|setFilename
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
return|return
name|scmClient
operator|.
name|notify
argument_list|(
name|request
argument_list|)
operator|.
name|getAccepted
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|e
parameter_list|)
block|{
comment|// retrieve the cause of the exception and throw it as an IOException
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|==
literal|null
condition|?
name|e
else|:
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

