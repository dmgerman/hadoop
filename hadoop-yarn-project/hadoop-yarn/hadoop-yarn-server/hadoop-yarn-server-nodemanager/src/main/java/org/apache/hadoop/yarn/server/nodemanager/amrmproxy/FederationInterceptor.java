begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.amrmproxy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|amrmproxy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationMasterProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|RegisterApplicationMasterRequestPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|RegisterApplicationMasterResponsePBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NMToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|PreemptionContract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|PreemptionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceBlacklistRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|StrictPreemptionContract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|UpdateContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|AMRMClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ApplicationMasterNotRegisteredException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidApplicationMasterRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServiceProtos
operator|.
name|RegisterApplicationMasterRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServiceProtos
operator|.
name|RegisterApplicationMasterResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|AMHeartbeatRequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|AMRMClientRelayer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|failover
operator|.
name|FederationProxyProviderUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|FederationPolicyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|amrmproxy
operator|.
name|FederationAMRMProxyPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|exceptions
operator|.
name|FederationPolicyInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|SubClusterResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|utils
operator|.
name|FederationRegistryClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|utils
operator|.
name|FederationStateStoreFacade
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|uam
operator|.
name|UnmanagedAMPoolManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|MonotonicClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Extends the AbstractRequestInterceptor and provides an implementation for  * federation of YARN RM and scaling an application across multiple YARN  * sub-clusters. All the federation specific implementation is encapsulated in  * this class. This is always the last intercepter in the chain.  */
end_comment

begin_class
DECL|class|FederationInterceptor
specifier|public
class|class
name|FederationInterceptor
extends|extends
name|AbstractRequestInterceptor
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FederationInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NMSS_CLASS_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|NMSS_CLASS_PREFIX
init|=
literal|"FederationInterceptor/"
decl_stmt|;
DECL|field|NMSS_REG_REQUEST_KEY
specifier|public
specifier|static
specifier|final
name|String
name|NMSS_REG_REQUEST_KEY
init|=
name|NMSS_CLASS_PREFIX
operator|+
literal|"registerRequest"
decl_stmt|;
DECL|field|NMSS_REG_RESPONSE_KEY
specifier|public
specifier|static
specifier|final
name|String
name|NMSS_REG_RESPONSE_KEY
init|=
name|NMSS_CLASS_PREFIX
operator|+
literal|"registerResponse"
decl_stmt|;
comment|/**    * When AMRMProxy HA is enabled, secondary AMRMTokens will be stored in Yarn    * Registry. Otherwise if NM recovery is enabled, the UAM token are stored in    * local NMSS instead under this directory name.    */
DECL|field|NMSS_SECONDARY_SC_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|NMSS_SECONDARY_SC_PREFIX
init|=
name|NMSS_CLASS_PREFIX
operator|+
literal|"secondarySC/"
decl_stmt|;
DECL|field|STRING_TO_BYTE_FORMAT
specifier|public
specifier|static
specifier|final
name|String
name|STRING_TO_BYTE_FORMAT
init|=
literal|"UTF-8"
decl_stmt|;
DECL|field|RECORD_FACTORY
specifier|private
specifier|static
specifier|final
name|RecordFactory
name|RECORD_FACTORY
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|/**    * From AM's perspective, FederationInterceptor behaves exactly the same as    * YarnRM (ApplicationMasterService). This is to remember the last heart beat    * response, used to handle duplicate heart beat and responseId from AM.    */
DECL|field|lastAllocateResponse
specifier|private
name|AllocateResponse
name|lastAllocateResponse
decl_stmt|;
DECL|field|lastAllocateResponseLock
specifier|private
specifier|final
name|Object
name|lastAllocateResponseLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|attemptId
specifier|private
name|ApplicationAttemptId
name|attemptId
decl_stmt|;
comment|/**    * The home sub-cluster is the sub-cluster where the AM container is running    * in.    */
DECL|field|homeRMRelayer
specifier|private
name|AMRMClientRelayer
name|homeRMRelayer
decl_stmt|;
DECL|field|homeSubClusterId
specifier|private
name|SubClusterId
name|homeSubClusterId
decl_stmt|;
DECL|field|homeHeartbeartHandler
specifier|private
name|AMHeartbeatRequestHandler
name|homeHeartbeartHandler
decl_stmt|;
comment|/**    * UAM pool for secondary sub-clusters (ones other than home sub-cluster),    * using subClusterId as uamId. One UAM is created per sub-cluster RM except    * the home RM.    *    * Creation and register of UAM in secondary sub-clusters happen on-demand,    * when AMRMProxy policy routes resource request to these sub-clusters for the    * first time. AM heart beats to them are also handled asynchronously for    * performance reasons.    */
DECL|field|uamPool
specifier|private
name|UnmanagedAMPoolManager
name|uamPool
decl_stmt|;
comment|/**    * The rmProxy relayers for secondary sub-clusters that keep track of all    * pending requests.    */
DECL|field|secondaryRelayers
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|AMRMClientRelayer
argument_list|>
name|secondaryRelayers
decl_stmt|;
comment|/**    * Stores the AllocateResponses that are received asynchronously from all the    * sub-cluster resource managers, including home RM.    */
DECL|field|asyncResponseSink
specifier|private
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|List
argument_list|<
name|AllocateResponse
argument_list|>
argument_list|>
name|asyncResponseSink
decl_stmt|;
DECL|field|uamRegistrations
specifier|private
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|RegisterApplicationMasterResponse
argument_list|>
name|uamRegistrations
decl_stmt|;
comment|// For unit test synchronization
DECL|field|uamRegisterFutures
specifier|private
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
name|uamRegisterFutures
decl_stmt|;
comment|/** Thread pool used for asynchronous operations. */
DECL|field|threadpool
specifier|private
name|ExecutorService
name|threadpool
decl_stmt|;
comment|/**    * A flag for work preserving NM restart. If we just recovered, we need to    * generate an {@link ApplicationMasterNotRegisteredException} exception back    * to AM (similar to what RM will do after its restart/fail-over) in its next    * allocate to trigger AM re-register (which we will shield from RM and just    * return our saved register response) and a full pending requests re-send, so    * that all the {@link AMRMClientRelayer} will be re-populated with all    * pending requests.    *    * TODO: When split-merge is not idempotent, this can lead to some    * over-allocation without a full cancel to RM.    */
DECL|field|justRecovered
specifier|private
specifier|volatile
name|boolean
name|justRecovered
decl_stmt|;
comment|/** if true, allocate will be no-op, skipping actual processing. */
DECL|field|finishAMCalled
specifier|private
specifier|volatile
name|boolean
name|finishAMCalled
decl_stmt|;
comment|/**    * Used to keep track of the container Id and the sub cluster RM that created    * the container, so that we know which sub-cluster to forward later requests    * about existing containers to.    */
DECL|field|containerIdToSubClusterIdMap
specifier|private
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|SubClusterId
argument_list|>
name|containerIdToSubClusterIdMap
decl_stmt|;
comment|/**    * The original registration request that was sent by the AM. This instance is    * reused to register/re-register with all the sub-cluster RMs.    */
DECL|field|amRegistrationRequest
specifier|private
name|RegisterApplicationMasterRequest
name|amRegistrationRequest
decl_stmt|;
comment|/**    * The original registration response returned to AM. This instance is reused    * for duplicate register request from AM, triggered by timeout between AM and    * AMRMProxy.    */
DECL|field|amRegistrationResponse
specifier|private
name|RegisterApplicationMasterResponse
name|amRegistrationResponse
decl_stmt|;
DECL|field|federationFacade
specifier|private
name|FederationStateStoreFacade
name|federationFacade
decl_stmt|;
DECL|field|subClusterResolver
specifier|private
name|SubClusterResolver
name|subClusterResolver
decl_stmt|;
comment|/** The policy used to split requests among sub-clusters. */
DECL|field|policyInterpreter
specifier|private
name|FederationAMRMProxyPolicy
name|policyInterpreter
decl_stmt|;
DECL|field|registryClient
specifier|private
name|FederationRegistryClient
name|registryClient
decl_stmt|;
comment|// the maximum wait time for the first async heart beat response
DECL|field|heartbeatMaxWaitTimeMs
specifier|private
name|long
name|heartbeatMaxWaitTimeMs
decl_stmt|;
DECL|field|clock
specifier|private
name|MonotonicClock
name|clock
init|=
operator|new
name|MonotonicClock
argument_list|()
decl_stmt|;
comment|/**    * Creates an instance of the FederationInterceptor class.    */
DECL|method|FederationInterceptor ()
specifier|public
name|FederationInterceptor
parameter_list|()
block|{
name|this
operator|.
name|containerIdToSubClusterIdMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|asyncResponseSink
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|uamRegistrations
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|uamRegisterFutures
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|threadpool
operator|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
expr_stmt|;
name|this
operator|.
name|uamPool
operator|=
name|createUnmanagedAMPoolManager
argument_list|(
name|this
operator|.
name|threadpool
argument_list|)
expr_stmt|;
name|this
operator|.
name|secondaryRelayers
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|amRegistrationRequest
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|amRegistrationResponse
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|justRecovered
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|finishAMCalled
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * Initializes the instance using specified context.    */
annotation|@
name|Override
DECL|method|init (AMRMProxyApplicationContext appContext)
specifier|public
name|void
name|init
parameter_list|(
name|AMRMProxyApplicationContext
name|appContext
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|appContext
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing Federation Interceptor"
argument_list|)
expr_stmt|;
comment|// Update the conf if available
name|Configuration
name|conf
init|=
name|appContext
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
name|getConf
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|// The proxy ugi used to talk to home RM as well as Yarn Registry, loaded
comment|// with the up-to-date AMRMToken issued by home RM.
name|UserGroupInformation
name|appOwner
decl_stmt|;
try|try
block|{
name|appOwner
operator|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|appContext
operator|.
name|getUser
argument_list|()
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
if|if
condition|(
name|appContext
operator|.
name|getRegistryClient
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|registryClient
operator|=
operator|new
name|FederationRegistryClient
argument_list|(
name|conf
argument_list|,
name|appContext
operator|.
name|getRegistryClient
argument_list|()
argument_list|,
name|appOwner
argument_list|)
expr_stmt|;
comment|// Add all app tokens for Yarn Registry access
if|if
condition|(
name|appContext
operator|.
name|getCredentials
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|appOwner
operator|.
name|addCredentials
argument_list|(
name|appContext
operator|.
name|getCredentials
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|attemptId
operator|=
name|appContext
operator|.
name|getApplicationAttemptId
argument_list|()
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|this
operator|.
name|attemptId
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|this
operator|.
name|homeSubClusterId
operator|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
name|YarnConfiguration
operator|.
name|getClusterId
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|homeRMRelayer
operator|=
operator|new
name|AMRMClientRelayer
argument_list|(
name|createHomeRMProxy
argument_list|(
name|appContext
argument_list|,
name|ApplicationMasterProtocol
operator|.
name|class
argument_list|,
name|appOwner
argument_list|)
argument_list|,
name|appId
argument_list|,
name|this
operator|.
name|homeSubClusterId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|homeHeartbeartHandler
operator|=
name|createHomeHeartbeartHandler
argument_list|(
name|conf
argument_list|,
name|appId
argument_list|,
name|this
operator|.
name|homeRMRelayer
argument_list|)
expr_stmt|;
name|this
operator|.
name|homeHeartbeartHandler
operator|.
name|setUGI
argument_list|(
name|appOwner
argument_list|)
expr_stmt|;
name|this
operator|.
name|homeHeartbeartHandler
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|homeHeartbeartHandler
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// set lastResponseId to -1 before application master registers
name|this
operator|.
name|lastAllocateResponse
operator|=
name|RECORD_FACTORY
operator|.
name|newRecordInstance
argument_list|(
name|AllocateResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastAllocateResponse
operator|.
name|setResponseId
argument_list|(
name|AMRMClientUtils
operator|.
name|PRE_REGISTER_RESPONSE_ID
argument_list|)
expr_stmt|;
name|this
operator|.
name|federationFacade
operator|=
name|FederationStateStoreFacade
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|this
operator|.
name|subClusterResolver
operator|=
name|this
operator|.
name|federationFacade
operator|.
name|getSubClusterResolver
argument_list|()
expr_stmt|;
comment|// AMRMProxyPolicy will be initialized in registerApplicationMaster
name|this
operator|.
name|policyInterpreter
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|uamPool
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|uamPool
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|heartbeatMaxWaitTimeMs
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|FEDERATION_AMRMPROXY_HB_MAX_WAIT_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_FEDERATION_AMRMPROXY_HB_MAX_WAIT_MS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|recover (Map<String, byte[]> recoveredDataMap)
specifier|public
name|void
name|recover
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|recoveredDataMap
parameter_list|)
block|{
name|super
operator|.
name|recover
argument_list|(
name|recoveredDataMap
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovering data for FederationInterceptor for {}"
argument_list|,
name|this
operator|.
name|attemptId
argument_list|)
expr_stmt|;
name|this
operator|.
name|justRecovered
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|recoveredDataMap
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
if|if
condition|(
name|recoveredDataMap
operator|.
name|containsKey
argument_list|(
name|NMSS_REG_REQUEST_KEY
argument_list|)
condition|)
block|{
name|RegisterApplicationMasterRequestProto
name|pb
init|=
name|RegisterApplicationMasterRequestProto
operator|.
name|parseFrom
argument_list|(
name|recoveredDataMap
operator|.
name|get
argument_list|(
name|NMSS_REG_REQUEST_KEY
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|amRegistrationRequest
operator|=
operator|new
name|RegisterApplicationMasterRequestPBImpl
argument_list|(
name|pb
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"amRegistrationRequest recovered for {}"
argument_list|,
name|this
operator|.
name|attemptId
argument_list|)
expr_stmt|;
comment|// Give the register request to homeRMRelayer for future re-registration
name|this
operator|.
name|homeRMRelayer
operator|.
name|setAMRegistrationRequest
argument_list|(
name|this
operator|.
name|amRegistrationRequest
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|recoveredDataMap
operator|.
name|containsKey
argument_list|(
name|NMSS_REG_RESPONSE_KEY
argument_list|)
condition|)
block|{
name|RegisterApplicationMasterResponseProto
name|pb
init|=
name|RegisterApplicationMasterResponseProto
operator|.
name|parseFrom
argument_list|(
name|recoveredDataMap
operator|.
name|get
argument_list|(
name|NMSS_REG_RESPONSE_KEY
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|amRegistrationResponse
operator|=
operator|new
name|RegisterApplicationMasterResponsePBImpl
argument_list|(
name|pb
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"amRegistrationResponse recovered for {}"
argument_list|,
name|this
operator|.
name|attemptId
argument_list|)
expr_stmt|;
block|}
comment|// Recover UAM amrmTokens from registry or NMSS
name|Map
argument_list|<
name|String
argument_list|,
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
argument_list|>
name|uamMap
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|registryClient
operator|!=
literal|null
condition|)
block|{
name|uamMap
operator|=
name|this
operator|.
name|registryClient
operator|.
name|loadStateFromRegistry
argument_list|(
name|this
operator|.
name|attemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Found {} existing UAMs for application {} in Yarn Registry"
argument_list|,
name|uamMap
operator|.
name|size
argument_list|()
argument_list|,
name|this
operator|.
name|attemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|uamMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
range|:
name|recoveredDataMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|NMSS_SECONDARY_SC_PREFIX
argument_list|)
condition|)
block|{
comment|// entry for subClusterId -> UAM amrmToken
name|String
name|scId
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|substring
argument_list|(
name|NMSS_SECONDARY_SC_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|amrmToken
init|=
operator|new
name|Token
argument_list|<>
argument_list|()
decl_stmt|;
name|amrmToken
operator|.
name|decodeFromUrlString
argument_list|(
operator|new
name|String
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|STRING_TO_BYTE_FORMAT
argument_list|)
argument_list|)
expr_stmt|;
name|uamMap
operator|.
name|put
argument_list|(
name|scId
argument_list|,
name|amrmToken
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Recovered UAM in "
operator|+
name|scId
operator|+
literal|" from NMSS"
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Found {} existing UAMs for application {} in NMStateStore"
argument_list|,
name|uamMap
operator|.
name|size
argument_list|()
argument_list|,
name|this
operator|.
name|attemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Re-attach the UAMs
name|int
name|containers
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
argument_list|>
name|entry
range|:
name|uamMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|SubClusterId
name|subClusterId
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create a config loaded with federation on and subclusterId
comment|// for each UAM
name|YarnConfiguration
name|config
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|FederationProxyProviderUtil
operator|.
name|updateConfForFederation
argument_list|(
name|config
argument_list|,
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|uamPool
operator|.
name|reAttachUAM
argument_list|(
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|,
name|config
argument_list|,
name|this
operator|.
name|attemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|this
operator|.
name|amRegistrationResponse
operator|.
name|getQueue
argument_list|()
argument_list|,
name|getApplicationContext
argument_list|()
operator|.
name|getUser
argument_list|()
argument_list|,
name|this
operator|.
name|homeSubClusterId
operator|.
name|getId
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|subClusterId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|secondaryRelayers
operator|.
name|put
argument_list|(
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|,
name|this
operator|.
name|uamPool
operator|.
name|getAMRMClientRelayer
argument_list|(
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RegisterApplicationMasterResponse
name|response
init|=
name|this
operator|.
name|uamPool
operator|.
name|registerApplicationMaster
argument_list|(
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|,
name|this
operator|.
name|amRegistrationRequest
argument_list|)
decl_stmt|;
comment|// Running containers from secondary RMs
for|for
control|(
name|Container
name|container
range|:
name|response
operator|.
name|getContainersFromPreviousAttempts
argument_list|()
control|)
block|{
name|containerIdToSubClusterIdMap
operator|.
name|put
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|subClusterId
argument_list|)
expr_stmt|;
name|containers
operator|++
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"  From subcluster "
operator|+
name|subClusterId
operator|+
literal|" running container "
operator|+
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovered {} running containers from UAM in {}"
argument_list|,
name|response
operator|.
name|getContainersFromPreviousAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|subClusterId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error reattaching UAM to "
operator|+
name|subClusterId
operator|+
literal|" for "
operator|+
name|this
operator|.
name|attemptId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Get the running containers from home RM, note that we will also get the
comment|// AM container itself from here. We don't need it, but no harm to put the
comment|// map as well.
name|UserGroupInformation
name|appSubmitter
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|getApplicationContext
argument_list|()
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|ApplicationClientProtocol
name|rmClient
init|=
name|createHomeRMProxy
argument_list|(
name|getApplicationContext
argument_list|()
argument_list|,
name|ApplicationClientProtocol
operator|.
name|class
argument_list|,
name|appSubmitter
argument_list|)
decl_stmt|;
name|GetContainersResponse
name|response
init|=
name|rmClient
operator|.
name|getContainers
argument_list|(
name|GetContainersRequest
operator|.
name|newInstance
argument_list|(
name|this
operator|.
name|attemptId
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|ContainerReport
name|container
range|:
name|response
operator|.
name|getContainerList
argument_list|()
control|)
block|{
name|containerIdToSubClusterIdMap
operator|.
name|put
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|this
operator|.
name|homeSubClusterId
argument_list|)
expr_stmt|;
name|containers
operator|++
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"  From home RM "
operator|+
name|this
operator|.
name|homeSubClusterId
operator|+
literal|" running container "
operator|+
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"{} running containers including AM recovered from home RM {}"
argument_list|,
name|response
operator|.
name|getContainerList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|this
operator|.
name|homeSubClusterId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"In all {} UAMs {} running containers including AM recovered for {}"
argument_list|,
name|uamMap
operator|.
name|size
argument_list|()
argument_list|,
name|containers
argument_list|,
name|this
operator|.
name|attemptId
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|amRegistrationResponse
operator|!=
literal|null
condition|)
block|{
comment|// Initialize the AMRMProxyPolicy
name|String
name|queue
init|=
name|this
operator|.
name|amRegistrationResponse
operator|.
name|getQueue
argument_list|()
decl_stmt|;
name|this
operator|.
name|policyInterpreter
operator|=
name|FederationPolicyUtils
operator|.
name|loadAMRMPolicy
argument_list|(
name|queue
argument_list|,
name|this
operator|.
name|policyInterpreter
argument_list|,
name|getConf
argument_list|()
argument_list|,
name|this
operator|.
name|federationFacade
argument_list|,
name|this
operator|.
name|homeSubClusterId
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|YarnException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Sends the application master's registration request to the home RM.    *    * Between AM and AMRMProxy, FederationInterceptor modifies the RM behavior,    * so that when AM registers more than once, it returns the same register    * success response instead of throwing    * {@link InvalidApplicationMasterRequestException}. Furthermore, we present    * to AM as if we are the RM that never fails over (except when AMRMProxy    * restarts). When actual RM fails over, we always re-register automatically.    *    * We did this because FederationInterceptor can receive concurrent register    * requests from AM because of timeout between AM and AMRMProxy, which is    * shorter than the timeout + failOver between FederationInterceptor    * (AMRMProxy) and RM.    *    * For the same reason, this method needs to be synchronized.    */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|RegisterApplicationMasterResponse
DECL|method|registerApplicationMaster (RegisterApplicationMasterRequest request)
name|registerApplicationMaster
parameter_list|(
name|RegisterApplicationMasterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
comment|// Reset the heartbeat responseId to zero upon register
synchronized|synchronized
init|(
name|this
operator|.
name|lastAllocateResponseLock
init|)
block|{
name|this
operator|.
name|lastAllocateResponse
operator|.
name|setResponseId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|justRecovered
operator|=
literal|false
expr_stmt|;
comment|// If AM is calling with a different request, complain
if|if
condition|(
name|this
operator|.
name|amRegistrationRequest
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|amRegistrationRequest
operator|.
name|equals
argument_list|(
name|request
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"AM should not call "
operator|+
literal|"registerApplicationMaster with a different request body"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// Save the registration request. This will be used for registering with
comment|// secondary sub-clusters using UAMs, as well as re-register later
name|this
operator|.
name|amRegistrationRequest
operator|=
name|request
expr_stmt|;
if|if
condition|(
name|getNMStateStore
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|RegisterApplicationMasterRequestPBImpl
name|pb
init|=
operator|(
name|RegisterApplicationMasterRequestPBImpl
operator|)
name|this
operator|.
name|amRegistrationRequest
decl_stmt|;
name|getNMStateStore
argument_list|()
operator|.
name|storeAMRMProxyAppContextEntry
argument_list|(
name|this
operator|.
name|attemptId
argument_list|,
name|NMSS_REG_REQUEST_KEY
argument_list|,
name|pb
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error storing AMRMProxy application context entry for "
operator|+
name|this
operator|.
name|attemptId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*      * Present to AM as if we are the RM that never fails over. When actual RM      * fails over, we always re-register automatically.      *      * We did this because it is possible for AM to send duplicate register      * request because of timeout. When it happens, it is fine to simply return      * the success message. Out of all outstanding register threads, only the      * last one will still have an unbroken RPC connection and successfully      * return the response.      */
if|if
condition|(
name|this
operator|.
name|amRegistrationResponse
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|amRegistrationResponse
return|;
block|}
comment|/*      * Send a registration request to the home resource manager. Note that here      * we don't register with other sub-cluster resource managers because that      * will prevent us from using new sub-clusters that get added while the AM      * is running and will breaks the elasticity feature. The registration with      * the other sub-cluster RM will be done lazily as needed later.      */
name|this
operator|.
name|amRegistrationResponse
operator|=
name|this
operator|.
name|homeRMRelayer
operator|.
name|registerApplicationMaster
argument_list|(
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|amRegistrationResponse
operator|.
name|getContainersFromPreviousAttempts
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cacheAllocatedContainers
argument_list|(
name|this
operator|.
name|amRegistrationResponse
operator|.
name|getContainersFromPreviousAttempts
argument_list|()
argument_list|,
name|this
operator|.
name|homeSubClusterId
argument_list|)
expr_stmt|;
block|}
name|ApplicationId
name|appId
init|=
name|this
operator|.
name|attemptId
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|reAttachUAMAndMergeRegisterResponse
argument_list|(
name|this
operator|.
name|amRegistrationResponse
argument_list|,
name|appId
argument_list|)
expr_stmt|;
if|if
condition|(
name|getNMStateStore
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|RegisterApplicationMasterResponsePBImpl
name|pb
init|=
operator|(
name|RegisterApplicationMasterResponsePBImpl
operator|)
name|this
operator|.
name|amRegistrationResponse
decl_stmt|;
name|getNMStateStore
argument_list|()
operator|.
name|storeAMRMProxyAppContextEntry
argument_list|(
name|this
operator|.
name|attemptId
argument_list|,
name|NMSS_REG_RESPONSE_KEY
argument_list|,
name|pb
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error storing AMRMProxy application context entry for "
operator|+
name|this
operator|.
name|attemptId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// the queue this application belongs will be used for getting
comment|// AMRMProxy policy from state store.
name|String
name|queue
init|=
name|this
operator|.
name|amRegistrationResponse
operator|.
name|getQueue
argument_list|()
decl_stmt|;
if|if
condition|(
name|queue
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Received null queue for application "
operator|+
name|appId
operator|+
literal|" from home subcluster. Will use default queue name "
operator|+
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
operator|+
literal|" for getting AMRMProxyPolicy"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Application "
operator|+
name|appId
operator|+
literal|" belongs to queue "
operator|+
name|queue
argument_list|)
expr_stmt|;
block|}
comment|// Initialize the AMRMProxyPolicy
try|try
block|{
name|this
operator|.
name|policyInterpreter
operator|=
name|FederationPolicyUtils
operator|.
name|loadAMRMPolicy
argument_list|(
name|queue
argument_list|,
name|this
operator|.
name|policyInterpreter
argument_list|,
name|getConf
argument_list|()
argument_list|,
name|this
operator|.
name|federationFacade
argument_list|,
name|this
operator|.
name|homeSubClusterId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationPolicyInitializationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
name|amRegistrationResponse
return|;
block|}
comment|/**    * Sends the heart beats to the home RM and the secondary sub-cluster RMs that    * are being used by the application.    */
annotation|@
name|Override
DECL|method|allocate (AllocateRequest request)
specifier|public
name|AllocateResponse
name|allocate
parameter_list|(
name|AllocateRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|this
operator|.
name|policyInterpreter
operator|!=
literal|null
argument_list|,
literal|"Allocate should be called after registerApplicationMaster"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|justRecovered
condition|)
block|{
throw|throw
operator|new
name|ApplicationMasterNotRegisteredException
argument_list|(
literal|"AMRMProxy just restarted and recovered for "
operator|+
name|this
operator|.
name|attemptId
operator|+
literal|". AM should re-register and full re-send pending requests."
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|finishAMCalled
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"FinishApplicationMaster already called by {}, skip heartbeat "
operator|+
literal|"processing and return dummy response"
operator|+
name|this
operator|.
name|attemptId
argument_list|)
expr_stmt|;
return|return
name|RECORD_FACTORY
operator|.
name|newRecordInstance
argument_list|(
name|AllocateResponse
operator|.
name|class
argument_list|)
return|;
block|}
comment|// Check responseId and handle duplicate heartbeat exactly same as RM
synchronized|synchronized
init|(
name|this
operator|.
name|lastAllocateResponseLock
init|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Heartbeat from "
operator|+
name|this
operator|.
name|attemptId
operator|+
literal|" with responseId "
operator|+
name|request
operator|.
name|getResponseId
argument_list|()
operator|+
literal|" when we are expecting "
operator|+
name|this
operator|.
name|lastAllocateResponse
operator|.
name|getResponseId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Normally request.getResponseId() == lastResponse.getResponseId()
if|if
condition|(
name|AMRMClientUtils
operator|.
name|getNextResponseId
argument_list|(
name|request
operator|.
name|getResponseId
argument_list|()
argument_list|)
operator|==
name|this
operator|.
name|lastAllocateResponse
operator|.
name|getResponseId
argument_list|()
condition|)
block|{
comment|// heartbeat one step old, simply return lastReponse
return|return
name|this
operator|.
name|lastAllocateResponse
return|;
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|getResponseId
argument_list|()
operator|!=
name|this
operator|.
name|lastAllocateResponse
operator|.
name|getResponseId
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidApplicationMasterRequestException
argument_list|(
name|AMRMClientUtils
operator|.
name|assembleInvalidResponseIdExceptionMessage
argument_list|(
name|attemptId
argument_list|,
name|this
operator|.
name|lastAllocateResponse
operator|.
name|getResponseId
argument_list|()
argument_list|,
name|request
operator|.
name|getResponseId
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
try|try
block|{
comment|// Split the heart beat request into multiple requests, one for each
comment|// sub-cluster RM that is used by this application.
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|AllocateRequest
argument_list|>
name|requests
init|=
name|splitAllocateRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
comment|/**        * Send the requests to the all sub-cluster resource managers. All        * requests are synchronously triggered but sent asynchronously. Later the        * responses will be collected and merged.        */
name|sendRequestsToResourceManagers
argument_list|(
name|requests
argument_list|)
expr_stmt|;
comment|// Wait for the first async response to arrive
name|long
name|startTime
init|=
name|this
operator|.
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|asyncResponseSink
init|)
block|{
try|try
block|{
name|this
operator|.
name|asyncResponseSink
operator|.
name|wait
argument_list|(
name|this
operator|.
name|heartbeatMaxWaitTimeMs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{         }
block|}
name|long
name|firstResponseTime
init|=
name|this
operator|.
name|clock
operator|.
name|getTime
argument_list|()
operator|-
name|startTime
decl_stmt|;
comment|// An extra brief wait for other async heart beats, so that most of their
comment|// responses can make it back to AM in the same heart beat round trip.
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|firstResponseTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
comment|// Prepare the response to AM
name|AllocateResponse
name|response
init|=
name|RECORD_FACTORY
operator|.
name|newRecordInstance
argument_list|(
name|AllocateResponse
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Merge all responses from response sink
name|mergeAllocateResponses
argument_list|(
name|response
argument_list|)
expr_stmt|;
comment|// Merge the containers and NMTokens from the new registrations into
comment|// the response
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|this
operator|.
name|uamRegistrations
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|RegisterApplicationMasterResponse
argument_list|>
name|newRegistrations
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|uamRegistrations
init|)
block|{
name|newRegistrations
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|this
operator|.
name|uamRegistrations
argument_list|)
expr_stmt|;
name|this
operator|.
name|uamRegistrations
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|mergeRegistrationResponses
argument_list|(
name|response
argument_list|,
name|newRegistrations
argument_list|)
expr_stmt|;
block|}
comment|// update the responseId and return the final response to AM
synchronized|synchronized
init|(
name|this
operator|.
name|lastAllocateResponseLock
init|)
block|{
name|response
operator|.
name|setResponseId
argument_list|(
name|AMRMClientUtils
operator|.
name|getNextResponseId
argument_list|(
name|this
operator|.
name|lastAllocateResponse
operator|.
name|getResponseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastAllocateResponse
operator|=
name|response
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while processing heart beat for "
operator|+
name|this
operator|.
name|attemptId
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**    * Sends the finish application master request to all the resource managers    * used by the application.    */
annotation|@
name|Override
DECL|method|finishApplicationMaster ( FinishApplicationMasterRequest request)
specifier|public
name|FinishApplicationMasterResponse
name|finishApplicationMaster
parameter_list|(
name|FinishApplicationMasterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|this
operator|.
name|finishAMCalled
operator|=
literal|true
expr_stmt|;
comment|// TODO: consider adding batchFinishApplicationMaster in UAMPoolManager
name|boolean
name|failedToUnRegister
init|=
literal|false
decl_stmt|;
name|ExecutorCompletionService
argument_list|<
name|FinishApplicationMasterResponseInfo
argument_list|>
name|compSvc
init|=
literal|null
decl_stmt|;
comment|// Application master is completing operation. Send the finish
comment|// application master request to all the registered sub-cluster resource
comment|// managers in parallel, wait for the responses and aggregate the results.
name|Set
argument_list|<
name|String
argument_list|>
name|subClusterIds
init|=
name|this
operator|.
name|uamPool
operator|.
name|getAllUAMIds
argument_list|()
decl_stmt|;
if|if
condition|(
name|subClusterIds
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|FinishApplicationMasterRequest
name|finishRequest
init|=
name|request
decl_stmt|;
name|compSvc
operator|=
operator|new
name|ExecutorCompletionService
argument_list|<
name|FinishApplicationMasterResponseInfo
argument_list|>
argument_list|(
name|this
operator|.
name|threadpool
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending finish application request to {} sub-cluster RMs"
argument_list|,
name|subClusterIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|String
name|subClusterId
range|:
name|subClusterIds
control|)
block|{
name|compSvc
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|FinishApplicationMasterResponseInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FinishApplicationMasterResponseInfo
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending finish application request to RM {}"
argument_list|,
name|subClusterId
argument_list|)
expr_stmt|;
name|FinishApplicationMasterResponse
name|uamResponse
init|=
literal|null
decl_stmt|;
try|try
block|{
name|uamResponse
operator|=
name|uamPool
operator|.
name|finishApplicationMaster
argument_list|(
name|subClusterId
argument_list|,
name|finishRequest
argument_list|)
expr_stmt|;
if|if
condition|(
name|uamResponse
operator|.
name|getIsUnregistered
argument_list|()
condition|)
block|{
name|AMRMClientRelayer
name|relayer
init|=
name|secondaryRelayers
operator|.
name|remove
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
if|if
condition|(
name|relayer
operator|!=
literal|null
condition|)
block|{
name|relayer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|getNMStateStore
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getNMStateStore
argument_list|()
operator|.
name|removeAMRMProxyAppContextEntry
argument_list|(
name|attemptId
argument_list|,
name|NMSS_SECONDARY_SC_PREFIX
operator|+
name|subClusterId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to finish unmanaged application master: "
operator|+
literal|"RM address: "
operator|+
name|subClusterId
operator|+
literal|" ApplicationId: "
operator|+
name|attemptId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|FinishApplicationMasterResponseInfo
argument_list|(
name|uamResponse
argument_list|,
name|subClusterId
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|// While the finish application request is being processed
comment|// asynchronously by other sub-cluster resource managers, send the same
comment|// request to the home resource manager on this thread.
name|FinishApplicationMasterResponse
name|homeResponse
init|=
name|this
operator|.
name|homeRMRelayer
operator|.
name|finishApplicationMaster
argument_list|(
name|request
argument_list|)
decl_stmt|;
comment|// Stop the home heartbeat thread
name|this
operator|.
name|homeHeartbeartHandler
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|subClusterIds
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Wait for other sub-cluster resource managers to return the
comment|// response and merge it with the home response
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for finish application response from {} sub-cluster RMs"
argument_list|,
name|subClusterIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subClusterIds
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
try|try
block|{
name|Future
argument_list|<
name|FinishApplicationMasterResponseInfo
argument_list|>
name|future
init|=
name|compSvc
operator|.
name|take
argument_list|()
decl_stmt|;
name|FinishApplicationMasterResponseInfo
name|uamResponse
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received finish application response from RM: "
operator|+
name|uamResponse
operator|.
name|getSubClusterId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uamResponse
operator|.
name|getResponse
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|uamResponse
operator|.
name|getResponse
argument_list|()
operator|.
name|getIsUnregistered
argument_list|()
condition|)
block|{
name|failedToUnRegister
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|failedToUnRegister
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to finish unmanaged application master: "
operator|+
literal|" ApplicationId: "
operator|+
name|this
operator|.
name|attemptId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|failedToUnRegister
condition|)
block|{
name|homeResponse
operator|.
name|setIsUnregistered
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Clean up UAMs only when the app finishes successfully, so that no more
comment|// attempt will be launched.
name|this
operator|.
name|uamPool
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|registryClient
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|registryClient
operator|.
name|removeAppFromRegistry
argument_list|(
name|this
operator|.
name|attemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|homeResponse
return|;
block|}
annotation|@
name|Override
DECL|method|setNextInterceptor (RequestInterceptor next)
specifier|public
name|void
name|setNextInterceptor
parameter_list|(
name|RequestInterceptor
name|next
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"setNextInterceptor is being called on FederationInterceptor. "
operator|+
literal|"It should always be used as the last interceptor in the chain"
argument_list|)
throw|;
block|}
comment|/**    * This is called when the application pipeline is being destroyed. We will    * release all the resources that we are holding in this call.    */
annotation|@
name|Override
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
comment|// Do not stop uamPool service and kill UAMs here because of possible second
comment|// app attempt
if|if
condition|(
name|this
operator|.
name|threadpool
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|threadpool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{       }
name|this
operator|.
name|threadpool
operator|=
literal|null
expr_stmt|;
block|}
comment|// Stop the home heartbeat thread
name|this
operator|.
name|homeHeartbeartHandler
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|this
operator|.
name|homeRMRelayer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
for|for
control|(
name|AMRMClientRelayer
name|relayer
range|:
name|this
operator|.
name|secondaryRelayers
operator|.
name|values
argument_list|()
control|)
block|{
name|relayer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Only for unit test cleanup.    */
annotation|@
name|VisibleForTesting
DECL|method|cleanupRegistry ()
specifier|protected
name|void
name|cleanupRegistry
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|registryClient
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|registryClient
operator|.
name|cleanAllApplications
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getRegistryClient ()
specifier|protected
name|FederationRegistryClient
name|getRegistryClient
parameter_list|()
block|{
return|return
name|this
operator|.
name|registryClient
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getAttemptId ()
specifier|protected
name|ApplicationAttemptId
name|getAttemptId
parameter_list|()
block|{
return|return
name|this
operator|.
name|attemptId
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getHomeHeartbeartHandler ()
specifier|protected
name|AMHeartbeatRequestHandler
name|getHomeHeartbeartHandler
parameter_list|()
block|{
return|return
name|this
operator|.
name|homeHeartbeartHandler
return|;
block|}
comment|/**    * Create the UAM pool manager for secondary sub-clsuters. For unit test to    * override.    *    * @param threadPool the thread pool to use    * @return the UAM pool manager instance    */
annotation|@
name|VisibleForTesting
DECL|method|createUnmanagedAMPoolManager ( ExecutorService threadPool)
specifier|protected
name|UnmanagedAMPoolManager
name|createUnmanagedAMPoolManager
parameter_list|(
name|ExecutorService
name|threadPool
parameter_list|)
block|{
return|return
operator|new
name|UnmanagedAMPoolManager
argument_list|(
name|threadPool
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|createHomeHeartbeartHandler ( Configuration conf, ApplicationId appId, AMRMClientRelayer rmProxyRelayer)
specifier|protected
name|AMHeartbeatRequestHandler
name|createHomeHeartbeartHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|AMRMClientRelayer
name|rmProxyRelayer
parameter_list|)
block|{
return|return
operator|new
name|AMHeartbeatRequestHandler
argument_list|(
name|conf
argument_list|,
name|appId
argument_list|,
name|rmProxyRelayer
argument_list|)
return|;
block|}
comment|/**    * Create a proxy instance that is used to connect to the Home resource    * manager.    *    * @param appContext AMRMProxyApplicationContext    * @param protocol the protocol class for the proxy    * @param user the ugi for the proxy    * @param<T> the type of the proxy    * @return the proxy created    */
DECL|method|createHomeRMProxy (AMRMProxyApplicationContext appContext, Class<T> protocol, UserGroupInformation user)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|createHomeRMProxy
parameter_list|(
name|AMRMProxyApplicationContext
name|appContext
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|protocol
parameter_list|,
name|UserGroupInformation
name|user
parameter_list|)
block|{
try|try
block|{
return|return
name|FederationProxyProviderUtil
operator|.
name|createRMProxy
argument_list|(
name|appContext
operator|.
name|getConf
argument_list|()
argument_list|,
name|protocol
argument_list|,
name|this
operator|.
name|homeSubClusterId
argument_list|,
name|user
argument_list|,
name|appContext
operator|.
name|getAMRMToken
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|mergeRegisterResponse ( RegisterApplicationMasterResponse homeResponse, RegisterApplicationMasterResponse otherResponse)
specifier|private
name|void
name|mergeRegisterResponse
parameter_list|(
name|RegisterApplicationMasterResponse
name|homeResponse
parameter_list|,
name|RegisterApplicationMasterResponse
name|otherResponse
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|otherResponse
operator|.
name|getContainersFromPreviousAttempts
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|homeResponse
operator|.
name|getContainersFromPreviousAttempts
argument_list|()
argument_list|)
condition|)
block|{
name|homeResponse
operator|.
name|getContainersFromPreviousAttempts
argument_list|()
operator|.
name|addAll
argument_list|(
name|otherResponse
operator|.
name|getContainersFromPreviousAttempts
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|homeResponse
operator|.
name|setContainersFromPreviousAttempts
argument_list|(
name|otherResponse
operator|.
name|getContainersFromPreviousAttempts
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|otherResponse
operator|.
name|getNMTokensFromPreviousAttempts
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|homeResponse
operator|.
name|getNMTokensFromPreviousAttempts
argument_list|()
argument_list|)
condition|)
block|{
name|homeResponse
operator|.
name|getNMTokensFromPreviousAttempts
argument_list|()
operator|.
name|addAll
argument_list|(
name|otherResponse
operator|.
name|getNMTokensFromPreviousAttempts
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|homeResponse
operator|.
name|setNMTokensFromPreviousAttempts
argument_list|(
name|otherResponse
operator|.
name|getNMTokensFromPreviousAttempts
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Try re-attach to all existing and running UAMs in secondary sub-clusters    * launched by previous application attempts if any. All running containers in    * the UAMs will be combined into the registerResponse. For the first attempt,    * the registry will be empty for this application and thus no-op here.    */
DECL|method|reAttachUAMAndMergeRegisterResponse ( RegisterApplicationMasterResponse homeResponse, final ApplicationId appId)
specifier|protected
name|void
name|reAttachUAMAndMergeRegisterResponse
parameter_list|(
name|RegisterApplicationMasterResponse
name|homeResponse
parameter_list|,
specifier|final
name|ApplicationId
name|appId
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|registryClient
operator|==
literal|null
condition|)
block|{
comment|// Both AMRMProxy HA and NM work preserving restart is not enabled
name|LOG
operator|.
name|warn
argument_list|(
literal|"registryClient is null, skip attaching existing UAM if any"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Load existing running UAMs from the previous attempts from
comment|// registry, if any
name|Map
argument_list|<
name|String
argument_list|,
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
argument_list|>
name|uamMap
init|=
name|this
operator|.
name|registryClient
operator|.
name|loadStateFromRegistry
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|uamMap
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No existing UAM for application {} found in Yarn Registry"
argument_list|,
name|appId
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Found {} existing UAMs for application {} in Yarn Registry. "
operator|+
literal|"Reattaching in parallel"
argument_list|,
name|uamMap
operator|.
name|size
argument_list|()
argument_list|,
name|appId
argument_list|)
expr_stmt|;
name|ExecutorCompletionService
argument_list|<
name|RegisterApplicationMasterResponse
argument_list|>
name|completionService
init|=
operator|new
name|ExecutorCompletionService
argument_list|<>
argument_list|(
name|this
operator|.
name|threadpool
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
argument_list|>
name|entry
range|:
name|uamMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|SubClusterId
name|subClusterId
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|amrmToken
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|completionService
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|RegisterApplicationMasterResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RegisterApplicationMasterResponse
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|RegisterApplicationMasterResponse
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Create a config loaded with federation on and subclusterId
comment|// for each UAM
name|YarnConfiguration
name|config
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|FederationProxyProviderUtil
operator|.
name|updateConfForFederation
argument_list|(
name|config
argument_list|,
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|uamPool
operator|.
name|reAttachUAM
argument_list|(
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|,
name|config
argument_list|,
name|appId
argument_list|,
name|amRegistrationResponse
operator|.
name|getQueue
argument_list|()
argument_list|,
name|getApplicationContext
argument_list|()
operator|.
name|getUser
argument_list|()
argument_list|,
name|homeSubClusterId
operator|.
name|getId
argument_list|()
argument_list|,
name|amrmToken
argument_list|,
name|subClusterId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|secondaryRelayers
operator|.
name|put
argument_list|(
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|,
name|uamPool
operator|.
name|getAMRMClientRelayer
argument_list|(
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
name|uamPool
operator|.
name|registerApplicationMaster
argument_list|(
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|,
name|amRegistrationRequest
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
operator|&&
name|response
operator|.
name|getContainersFromPreviousAttempts
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cacheAllocatedContainers
argument_list|(
name|response
operator|.
name|getContainersFromPreviousAttempts
argument_list|()
argument_list|,
name|subClusterId
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"UAM {} reattached for {}"
argument_list|,
name|subClusterId
argument_list|,
name|appId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Reattaching UAM "
operator|+
name|subClusterId
operator|+
literal|" failed for "
operator|+
name|appId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// Wait for the re-attach responses
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|uamMap
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|Future
argument_list|<
name|RegisterApplicationMasterResponse
argument_list|>
name|future
init|=
name|completionService
operator|.
name|take
argument_list|()
decl_stmt|;
name|RegisterApplicationMasterResponse
name|registerResponse
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|registerResponse
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Merging register response for {}"
argument_list|,
name|appId
argument_list|)
expr_stmt|;
name|mergeRegisterResponse
argument_list|(
name|homeResponse
argument_list|,
name|registerResponse
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Reattaching UAM failed for ApplicationId: "
operator|+
name|appId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getSubClusterForNode (String nodeName)
specifier|private
name|SubClusterId
name|getSubClusterForNode
parameter_list|(
name|String
name|nodeName
parameter_list|)
block|{
name|SubClusterId
name|subClusterId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|subClusterId
operator|=
name|this
operator|.
name|subClusterResolver
operator|.
name|getSubClusterForNode
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to resolve sub-cluster for node "
operator|+
name|nodeName
operator|+
literal|", skipping this node"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|subClusterId
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to resolve sub-cluster for node {}, skipping this node"
argument_list|,
name|nodeName
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|subClusterId
return|;
block|}
comment|/**    * In federation, the heart beat request needs to be sent to all the sub    * clusters from which the AM has requested containers. This method splits the    * specified AllocateRequest from the AM and creates a new request for each    * sub-cluster RM.    */
DECL|method|splitAllocateRequest ( AllocateRequest request)
specifier|private
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|AllocateRequest
argument_list|>
name|splitAllocateRequest
parameter_list|(
name|AllocateRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|AllocateRequest
argument_list|>
name|requestMap
init|=
operator|new
name|HashMap
argument_list|<
name|SubClusterId
argument_list|,
name|AllocateRequest
argument_list|>
argument_list|()
decl_stmt|;
comment|// Create heart beat request for home sub-cluster resource manager
name|findOrCreateAllocateRequestForSubCluster
argument_list|(
name|this
operator|.
name|homeSubClusterId
argument_list|,
name|request
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
comment|// Create heart beat request instances for all other already registered
comment|// sub-cluster resource managers
name|Set
argument_list|<
name|String
argument_list|>
name|subClusterIds
init|=
name|this
operator|.
name|uamPool
operator|.
name|getAllUAMIds
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|subClusterId
range|:
name|subClusterIds
control|)
block|{
name|findOrCreateAllocateRequestForSubCluster
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|)
argument_list|,
name|request
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|request
operator|.
name|getAskList
argument_list|()
argument_list|)
condition|)
block|{
comment|// Ask the federation policy interpreter to split the ask list for
comment|// sending it to all the sub-cluster resource managers.
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|>
name|asks
init|=
name|splitResourceRequests
argument_list|(
name|request
operator|.
name|getAskList
argument_list|()
argument_list|)
decl_stmt|;
comment|// Add the askLists to the corresponding sub-cluster requests.
for|for
control|(
name|Entry
argument_list|<
name|SubClusterId
argument_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|>
name|entry
range|:
name|asks
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|AllocateRequest
name|newRequest
init|=
name|findOrCreateAllocateRequestForSubCluster
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|request
argument_list|,
name|requestMap
argument_list|)
decl_stmt|;
name|newRequest
operator|.
name|getAskList
argument_list|()
operator|.
name|addAll
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|getResourceBlacklistRequest
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|request
operator|.
name|getResourceBlacklistRequest
argument_list|()
operator|.
name|getBlacklistAdditions
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|resourceName
range|:
name|request
operator|.
name|getResourceBlacklistRequest
argument_list|()
operator|.
name|getBlacklistAdditions
argument_list|()
control|)
block|{
name|SubClusterId
name|subClusterId
init|=
name|getSubClusterForNode
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|subClusterId
operator|!=
literal|null
condition|)
block|{
name|AllocateRequest
name|newRequest
init|=
name|findOrCreateAllocateRequestForSubCluster
argument_list|(
name|subClusterId
argument_list|,
name|request
argument_list|,
name|requestMap
argument_list|)
decl_stmt|;
name|newRequest
operator|.
name|getResourceBlacklistRequest
argument_list|()
operator|.
name|getBlacklistAdditions
argument_list|()
operator|.
name|add
argument_list|(
name|resourceName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|request
operator|.
name|getResourceBlacklistRequest
argument_list|()
operator|.
name|getBlacklistRemovals
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|resourceName
range|:
name|request
operator|.
name|getResourceBlacklistRequest
argument_list|()
operator|.
name|getBlacklistRemovals
argument_list|()
control|)
block|{
name|SubClusterId
name|subClusterId
init|=
name|getSubClusterForNode
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|subClusterId
operator|!=
literal|null
condition|)
block|{
name|AllocateRequest
name|newRequest
init|=
name|findOrCreateAllocateRequestForSubCluster
argument_list|(
name|subClusterId
argument_list|,
name|request
argument_list|,
name|requestMap
argument_list|)
decl_stmt|;
name|newRequest
operator|.
name|getResourceBlacklistRequest
argument_list|()
operator|.
name|getBlacklistRemovals
argument_list|()
operator|.
name|add
argument_list|(
name|resourceName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|request
operator|.
name|getReleaseList
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|ContainerId
name|cid
range|:
name|request
operator|.
name|getReleaseList
argument_list|()
control|)
block|{
if|if
condition|(
name|warnIfNotExists
argument_list|(
name|cid
argument_list|,
literal|"release"
argument_list|)
condition|)
block|{
name|SubClusterId
name|subClusterId
init|=
name|this
operator|.
name|containerIdToSubClusterIdMap
operator|.
name|get
argument_list|(
name|cid
argument_list|)
decl_stmt|;
name|AllocateRequest
name|newRequest
init|=
name|requestMap
operator|.
name|get
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
name|newRequest
operator|.
name|getReleaseList
argument_list|()
operator|.
name|add
argument_list|(
name|cid
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|request
operator|.
name|getUpdateRequests
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|UpdateContainerRequest
name|ucr
range|:
name|request
operator|.
name|getUpdateRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|warnIfNotExists
argument_list|(
name|ucr
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|"update"
argument_list|)
condition|)
block|{
name|SubClusterId
name|subClusterId
init|=
name|this
operator|.
name|containerIdToSubClusterIdMap
operator|.
name|get
argument_list|(
name|ucr
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
name|AllocateRequest
name|newRequest
init|=
name|requestMap
operator|.
name|get
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
name|newRequest
operator|.
name|getUpdateRequests
argument_list|()
operator|.
name|add
argument_list|(
name|ucr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|requestMap
return|;
block|}
comment|/**    * This methods sends the specified AllocateRequests to the appropriate    * sub-cluster resource managers asynchronously.    *    * @param requests contains the heart beat requests to send to the resource    *          manager keyed by the sub-cluster id    * @throws YarnException    * @throws IOException    */
DECL|method|sendRequestsToResourceManagers ( Map<SubClusterId, AllocateRequest> requests)
specifier|private
name|void
name|sendRequestsToResourceManagers
parameter_list|(
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|AllocateRequest
argument_list|>
name|requests
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
comment|// Create new UAM instances for the sub-cluster that we haven't seen before
name|List
argument_list|<
name|SubClusterId
argument_list|>
name|newSubClusters
init|=
name|registerAndAllocateWithNewSubClusters
argument_list|(
name|requests
argument_list|)
decl_stmt|;
comment|// Now that all the registrations are done, send the allocation request
comment|// to the sub-cluster RMs asynchronously and don't wait for the response.
comment|// The responses will arrive asynchronously and will be added to the
comment|// response sink, then merged and sent to the application master.
for|for
control|(
name|Entry
argument_list|<
name|SubClusterId
argument_list|,
name|AllocateRequest
argument_list|>
name|entry
range|:
name|requests
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|SubClusterId
name|subClusterId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|newSubClusters
operator|.
name|contains
argument_list|(
name|subClusterId
argument_list|)
condition|)
block|{
comment|// For new sub-clusters, we have already sent the request right after
comment|// register in the async thread
continue|continue;
block|}
if|if
condition|(
name|subClusterId
operator|.
name|equals
argument_list|(
name|this
operator|.
name|homeSubClusterId
argument_list|)
condition|)
block|{
comment|// Request for the home sub-cluster resource manager
name|this
operator|.
name|homeHeartbeartHandler
operator|.
name|allocateAsync
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
operator|new
name|HeartbeatCallBack
argument_list|(
name|this
operator|.
name|homeSubClusterId
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|uamPool
operator|.
name|hasUAMId
argument_list|(
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"UAM not found for "
operator|+
name|this
operator|.
name|attemptId
operator|+
literal|" in sub-cluster "
operator|+
name|subClusterId
argument_list|)
throw|;
block|}
name|this
operator|.
name|uamPool
operator|.
name|allocateAsync
argument_list|(
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
operator|new
name|HeartbeatCallBack
argument_list|(
name|subClusterId
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * This method ensures that Unmanaged AMs are created for newly specified    * sub-clusters, registers with the corresponding resource managers and send    * the first allocate request async.    */
DECL|method|registerAndAllocateWithNewSubClusters ( final Map<SubClusterId, AllocateRequest> requests)
specifier|private
name|List
argument_list|<
name|SubClusterId
argument_list|>
name|registerAndAllocateWithNewSubClusters
parameter_list|(
specifier|final
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|AllocateRequest
argument_list|>
name|requests
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check to see if there are any new sub-clusters in this request
comment|// list and create and register Unmanaged AM instance for the new ones
name|List
argument_list|<
name|SubClusterId
argument_list|>
name|newSubClusters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SubClusterId
name|subClusterId
range|:
name|requests
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|subClusterId
operator|.
name|equals
argument_list|(
name|this
operator|.
name|homeSubClusterId
argument_list|)
operator|&&
operator|!
name|this
operator|.
name|uamPool
operator|.
name|hasUAMId
argument_list|(
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|newSubClusters
operator|.
name|add
argument_list|(
name|subClusterId
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|uamRegisterFutures
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|SubClusterId
name|scId
range|:
name|newSubClusters
control|)
block|{
name|Future
argument_list|<
name|?
argument_list|>
name|future
init|=
name|this
operator|.
name|threadpool
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|String
name|subClusterId
init|=
name|scId
operator|.
name|getId
argument_list|()
decl_stmt|;
comment|// Create a config loaded with federation on and subclusterId
comment|// for each UAM
name|YarnConfiguration
name|config
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|FederationProxyProviderUtil
operator|.
name|updateConfForFederation
argument_list|(
name|config
argument_list|,
name|subClusterId
argument_list|)
expr_stmt|;
name|RegisterApplicationMasterResponse
name|uamResponse
init|=
literal|null
decl_stmt|;
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|token
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// For appNameSuffix, use subClusterId of the home sub-cluster
name|token
operator|=
name|uamPool
operator|.
name|launchUAM
argument_list|(
name|subClusterId
argument_list|,
name|config
argument_list|,
name|attemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|amRegistrationResponse
operator|.
name|getQueue
argument_list|()
argument_list|,
name|getApplicationContext
argument_list|()
operator|.
name|getUser
argument_list|()
argument_list|,
name|homeSubClusterId
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|,
name|subClusterId
argument_list|)
expr_stmt|;
name|secondaryRelayers
operator|.
name|put
argument_list|(
name|subClusterId
argument_list|,
name|uamPool
operator|.
name|getAMRMClientRelayer
argument_list|(
name|subClusterId
argument_list|)
argument_list|)
expr_stmt|;
name|uamResponse
operator|=
name|uamPool
operator|.
name|registerApplicationMaster
argument_list|(
name|subClusterId
argument_list|,
name|amRegistrationRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to register application master: "
operator|+
name|subClusterId
operator|+
literal|" Application: "
operator|+
name|attemptId
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// TODO: UAM registration for this sub-cluster RM
comment|// failed. For now, we ignore the resource requests and continue
comment|// but we need to fix this and handle this situation. One way would
comment|// be to send the request to another RM by consulting the policy.
return|return;
block|}
name|uamRegistrations
operator|.
name|put
argument_list|(
name|scId
argument_list|,
name|uamResponse
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully registered unmanaged application master: "
operator|+
name|subClusterId
operator|+
literal|" ApplicationId: "
operator|+
name|attemptId
argument_list|)
expr_stmt|;
try|try
block|{
name|uamPool
operator|.
name|allocateAsync
argument_list|(
name|subClusterId
argument_list|,
name|requests
operator|.
name|get
argument_list|(
name|scId
argument_list|)
argument_list|,
operator|new
name|HeartbeatCallBack
argument_list|(
name|scId
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to allocate async to "
operator|+
name|subClusterId
operator|+
literal|" Application: "
operator|+
name|attemptId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Save the UAM token in registry or NMSS
try|try
block|{
if|if
condition|(
name|registryClient
operator|!=
literal|null
condition|)
block|{
name|registryClient
operator|.
name|writeAMRMTokenForUAM
argument_list|(
name|attemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|subClusterId
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getNMStateStore
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getNMStateStore
argument_list|()
operator|.
name|storeAMRMProxyAppContextEntry
argument_list|(
name|attemptId
argument_list|,
name|NMSS_SECONDARY_SC_PREFIX
operator|+
name|subClusterId
argument_list|,
name|token
operator|.
name|encodeToUrlString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|STRING_TO_BYTE_FORMAT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to persist UAM token from "
operator|+
name|subClusterId
operator|+
literal|" Application: "
operator|+
name|attemptId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|this
operator|.
name|uamRegisterFutures
operator|.
name|put
argument_list|(
name|scId
argument_list|,
name|future
argument_list|)
expr_stmt|;
block|}
return|return
name|newSubClusters
return|;
block|}
comment|/**    * Merge the responses from all sub-clusters that we received asynchronously    * and keeps track of the containers received from each sub-cluster resource    * managers.    */
DECL|method|mergeAllocateResponses (AllocateResponse mergedResponse)
specifier|private
name|void
name|mergeAllocateResponses
parameter_list|(
name|AllocateResponse
name|mergedResponse
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|asyncResponseSink
init|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|SubClusterId
argument_list|,
name|List
argument_list|<
name|AllocateResponse
argument_list|>
argument_list|>
name|entry
range|:
name|this
operator|.
name|asyncResponseSink
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|SubClusterId
name|subClusterId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AllocateResponse
argument_list|>
name|responses
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|responses
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|AllocateResponse
name|response
range|:
name|responses
control|)
block|{
name|removeFinishedContainersFromCache
argument_list|(
name|response
operator|.
name|getCompletedContainersStatuses
argument_list|()
argument_list|)
expr_stmt|;
name|cacheAllocatedContainers
argument_list|(
name|response
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|,
name|subClusterId
argument_list|)
expr_stmt|;
name|mergeAllocateResponse
argument_list|(
name|mergedResponse
argument_list|,
name|response
argument_list|,
name|subClusterId
argument_list|)
expr_stmt|;
block|}
name|responses
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Removes the finished containers from the local cache.    */
DECL|method|removeFinishedContainersFromCache ( List<ContainerStatus> finishedContainers)
specifier|private
name|void
name|removeFinishedContainersFromCache
parameter_list|(
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|finishedContainers
parameter_list|)
block|{
for|for
control|(
name|ContainerStatus
name|container
range|:
name|finishedContainers
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Completed container {}"
argument_list|,
name|container
argument_list|)
expr_stmt|;
if|if
condition|(
name|containerIdToSubClusterIdMap
operator|.
name|containsKey
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
condition|)
block|{
name|containerIdToSubClusterIdMap
operator|.
name|remove
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Helper method for merging the registration responses from the secondary sub    * cluster RMs into the allocate response to return to the AM.    */
DECL|method|mergeRegistrationResponses (AllocateResponse homeResponse, Map<SubClusterId, RegisterApplicationMasterResponse> registrations)
specifier|private
name|void
name|mergeRegistrationResponses
parameter_list|(
name|AllocateResponse
name|homeResponse
parameter_list|,
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|RegisterApplicationMasterResponse
argument_list|>
name|registrations
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|SubClusterId
argument_list|,
name|RegisterApplicationMasterResponse
argument_list|>
name|entry
range|:
name|registrations
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|RegisterApplicationMasterResponse
name|registration
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|registration
operator|.
name|getContainersFromPreviousAttempts
argument_list|()
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Container
argument_list|>
name|tempContainers
init|=
name|homeResponse
operator|.
name|getAllocatedContainers
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|tempContainers
argument_list|)
condition|)
block|{
name|tempContainers
operator|.
name|addAll
argument_list|(
name|registration
operator|.
name|getContainersFromPreviousAttempts
argument_list|()
argument_list|)
expr_stmt|;
name|homeResponse
operator|.
name|setAllocatedContainers
argument_list|(
name|tempContainers
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|homeResponse
operator|.
name|setAllocatedContainers
argument_list|(
name|registration
operator|.
name|getContainersFromPreviousAttempts
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cacheAllocatedContainers
argument_list|(
name|registration
operator|.
name|getContainersFromPreviousAttempts
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|registration
operator|.
name|getNMTokensFromPreviousAttempts
argument_list|()
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|NMToken
argument_list|>
name|tempTokens
init|=
name|homeResponse
operator|.
name|getNMTokens
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|tempTokens
argument_list|)
condition|)
block|{
name|tempTokens
operator|.
name|addAll
argument_list|(
name|registration
operator|.
name|getNMTokensFromPreviousAttempts
argument_list|()
argument_list|)
expr_stmt|;
name|homeResponse
operator|.
name|setNMTokens
argument_list|(
name|tempTokens
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|homeResponse
operator|.
name|setNMTokens
argument_list|(
name|registration
operator|.
name|getNMTokensFromPreviousAttempts
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|mergeAllocateResponse (AllocateResponse homeResponse, AllocateResponse otherResponse, SubClusterId otherRMAddress)
specifier|private
name|void
name|mergeAllocateResponse
parameter_list|(
name|AllocateResponse
name|homeResponse
parameter_list|,
name|AllocateResponse
name|otherResponse
parameter_list|,
name|SubClusterId
name|otherRMAddress
parameter_list|)
block|{
if|if
condition|(
name|otherResponse
operator|.
name|getAMRMToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Propagate only the new amrmToken from home sub-cluster back to
comment|// AMRMProxyService
if|if
condition|(
name|otherRMAddress
operator|.
name|equals
argument_list|(
name|this
operator|.
name|homeSubClusterId
argument_list|)
condition|)
block|{
name|homeResponse
operator|.
name|setAMRMToken
argument_list|(
name|otherResponse
operator|.
name|getAMRMToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"amrmToken from UAM "
operator|+
name|otherRMAddress
operator|+
literal|" should be null here"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|otherResponse
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|homeResponse
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
condition|)
block|{
name|homeResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|addAll
argument_list|(
name|otherResponse
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|homeResponse
operator|.
name|setAllocatedContainers
argument_list|(
name|otherResponse
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|otherResponse
operator|.
name|getAvailableResources
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|homeResponse
operator|.
name|getAvailableResources
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|homeResponse
operator|.
name|setAvailableResources
argument_list|(
name|Resources
operator|.
name|add
argument_list|(
name|homeResponse
operator|.
name|getAvailableResources
argument_list|()
argument_list|,
name|otherResponse
operator|.
name|getAvailableResources
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|homeResponse
operator|.
name|setAvailableResources
argument_list|(
name|otherResponse
operator|.
name|getAvailableResources
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|otherResponse
operator|.
name|getCompletedContainersStatuses
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|homeResponse
operator|.
name|getCompletedContainersStatuses
argument_list|()
argument_list|)
condition|)
block|{
name|homeResponse
operator|.
name|getCompletedContainersStatuses
argument_list|()
operator|.
name|addAll
argument_list|(
name|otherResponse
operator|.
name|getCompletedContainersStatuses
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|homeResponse
operator|.
name|setCompletedContainersStatuses
argument_list|(
name|otherResponse
operator|.
name|getCompletedContainersStatuses
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|otherResponse
operator|.
name|getUpdatedNodes
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|homeResponse
operator|.
name|getUpdatedNodes
argument_list|()
argument_list|)
condition|)
block|{
name|homeResponse
operator|.
name|getUpdatedNodes
argument_list|()
operator|.
name|addAll
argument_list|(
name|otherResponse
operator|.
name|getUpdatedNodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|homeResponse
operator|.
name|setUpdatedNodes
argument_list|(
name|otherResponse
operator|.
name|getUpdatedNodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|homeResponse
operator|.
name|setNumClusterNodes
argument_list|(
name|homeResponse
operator|.
name|getNumClusterNodes
argument_list|()
operator|+
name|otherResponse
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|PreemptionMessage
name|homePreempMessage
init|=
name|homeResponse
operator|.
name|getPreemptionMessage
argument_list|()
decl_stmt|;
name|PreemptionMessage
name|otherPreempMessage
init|=
name|otherResponse
operator|.
name|getPreemptionMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|homePreempMessage
operator|==
literal|null
operator|&&
name|otherPreempMessage
operator|!=
literal|null
condition|)
block|{
name|homeResponse
operator|.
name|setPreemptionMessage
argument_list|(
name|otherPreempMessage
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|homePreempMessage
operator|!=
literal|null
operator|&&
name|otherPreempMessage
operator|!=
literal|null
condition|)
block|{
name|PreemptionContract
name|par1
init|=
name|homePreempMessage
operator|.
name|getContract
argument_list|()
decl_stmt|;
name|PreemptionContract
name|par2
init|=
name|otherPreempMessage
operator|.
name|getContract
argument_list|()
decl_stmt|;
if|if
condition|(
name|par1
operator|==
literal|null
operator|&&
name|par2
operator|!=
literal|null
condition|)
block|{
name|homePreempMessage
operator|.
name|setContract
argument_list|(
name|par2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|par1
operator|!=
literal|null
operator|&&
name|par2
operator|!=
literal|null
condition|)
block|{
name|par1
operator|.
name|getResourceRequest
argument_list|()
operator|.
name|addAll
argument_list|(
name|par2
operator|.
name|getResourceRequest
argument_list|()
argument_list|)
expr_stmt|;
name|par2
operator|.
name|getContainers
argument_list|()
operator|.
name|addAll
argument_list|(
name|par2
operator|.
name|getContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|StrictPreemptionContract
name|spar1
init|=
name|homePreempMessage
operator|.
name|getStrictContract
argument_list|()
decl_stmt|;
name|StrictPreemptionContract
name|spar2
init|=
name|otherPreempMessage
operator|.
name|getStrictContract
argument_list|()
decl_stmt|;
if|if
condition|(
name|spar1
operator|==
literal|null
operator|&&
name|spar2
operator|!=
literal|null
condition|)
block|{
name|homePreempMessage
operator|.
name|setStrictContract
argument_list|(
name|spar2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|spar1
operator|!=
literal|null
operator|&&
name|spar2
operator|!=
literal|null
condition|)
block|{
name|spar1
operator|.
name|getContainers
argument_list|()
operator|.
name|addAll
argument_list|(
name|spar2
operator|.
name|getContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|otherResponse
operator|.
name|getNMTokens
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|homeResponse
operator|.
name|getNMTokens
argument_list|()
argument_list|)
condition|)
block|{
name|homeResponse
operator|.
name|getNMTokens
argument_list|()
operator|.
name|addAll
argument_list|(
name|otherResponse
operator|.
name|getNMTokens
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|homeResponse
operator|.
name|setNMTokens
argument_list|(
name|otherResponse
operator|.
name|getNMTokens
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|otherResponse
operator|.
name|getUpdatedContainers
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|homeResponse
operator|.
name|getUpdatedContainers
argument_list|()
argument_list|)
condition|)
block|{
name|homeResponse
operator|.
name|getUpdatedContainers
argument_list|()
operator|.
name|addAll
argument_list|(
name|otherResponse
operator|.
name|getUpdatedContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|homeResponse
operator|.
name|setUpdatedContainers
argument_list|(
name|otherResponse
operator|.
name|getUpdatedContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|otherResponse
operator|.
name|getUpdateErrors
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|homeResponse
operator|.
name|getUpdateErrors
argument_list|()
argument_list|)
condition|)
block|{
name|homeResponse
operator|.
name|getUpdateErrors
argument_list|()
operator|.
name|addAll
argument_list|(
name|otherResponse
operator|.
name|getUpdateErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|homeResponse
operator|.
name|setUpdateErrors
argument_list|(
name|otherResponse
operator|.
name|getUpdateErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Add allocated containers to cache mapping.    */
DECL|method|cacheAllocatedContainers (List<Container> containers, SubClusterId subClusterId)
specifier|private
name|void
name|cacheAllocatedContainers
parameter_list|(
name|List
argument_list|<
name|Container
argument_list|>
name|containers
parameter_list|,
name|SubClusterId
name|subClusterId
parameter_list|)
block|{
for|for
control|(
name|Container
name|container
range|:
name|containers
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding container {}"
argument_list|,
name|container
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|containerIdToSubClusterIdMap
operator|.
name|containsKey
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|SubClusterId
name|existingSubClusterId
init|=
name|this
operator|.
name|containerIdToSubClusterIdMap
operator|.
name|get
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingSubClusterId
operator|.
name|equals
argument_list|(
name|subClusterId
argument_list|)
condition|)
block|{
comment|/*            * When RM fails over, the new RM master might send out the same            * container allocation more than once.            *            * It is also possible because of a recent NM restart with NM recovery            * enabled. We recover running containers from RM. But RM might not            * notified AM of some of these containers yet. When RM dose notify,            * we will already have these containers in the map.            *            * Either case, just warn and move on.            */
name|LOG
operator|.
name|warn
argument_list|(
literal|"Duplicate containerID: {} found in the allocated containers"
operator|+
literal|" from same sub-cluster: {}, so ignoring."
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|subClusterId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// The same container allocation from different sub-clusters,
comment|// something is wrong.
comment|// TODO: YARN-6667 if some subcluster RM is configured wrong, we
comment|// should not fail the entire heartbeat.
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Duplicate containerID found in the allocated containers. This"
operator|+
literal|" can happen if the RM epoch is not configured properly."
operator|+
literal|" ContainerId: "
operator|+
name|container
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" ApplicationId: "
operator|+
name|this
operator|.
name|attemptId
operator|+
literal|" From RM: "
operator|+
name|subClusterId
operator|+
literal|" . Previous container was from sub-cluster: "
operator|+
name|existingSubClusterId
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|containerIdToSubClusterIdMap
operator|.
name|put
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|subClusterId
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Check to see if an AllocateRequest exists in the Map for the specified sub    * cluster. If not found, create a new one, copy the value of responseId and    * progress from the orignialAMRequest, save it in the specified Map and    * return the new instance. If found, just return the old instance.    */
DECL|method|findOrCreateAllocateRequestForSubCluster ( SubClusterId subClusterId, AllocateRequest originalAMRequest, Map<SubClusterId, AllocateRequest> requestMap)
specifier|private
specifier|static
name|AllocateRequest
name|findOrCreateAllocateRequestForSubCluster
parameter_list|(
name|SubClusterId
name|subClusterId
parameter_list|,
name|AllocateRequest
name|originalAMRequest
parameter_list|,
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|AllocateRequest
argument_list|>
name|requestMap
parameter_list|)
block|{
name|AllocateRequest
name|newRequest
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|requestMap
operator|.
name|containsKey
argument_list|(
name|subClusterId
argument_list|)
condition|)
block|{
name|newRequest
operator|=
name|requestMap
operator|.
name|get
argument_list|(
name|subClusterId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newRequest
operator|=
name|createAllocateRequest
argument_list|()
expr_stmt|;
name|newRequest
operator|.
name|setResponseId
argument_list|(
name|originalAMRequest
operator|.
name|getResponseId
argument_list|()
argument_list|)
expr_stmt|;
name|newRequest
operator|.
name|setProgress
argument_list|(
name|originalAMRequest
operator|.
name|getProgress
argument_list|()
argument_list|)
expr_stmt|;
name|requestMap
operator|.
name|put
argument_list|(
name|subClusterId
argument_list|,
name|newRequest
argument_list|)
expr_stmt|;
block|}
return|return
name|newRequest
return|;
block|}
comment|/**    * Create an empty AllocateRequest instance.    */
DECL|method|createAllocateRequest ()
specifier|private
specifier|static
name|AllocateRequest
name|createAllocateRequest
parameter_list|()
block|{
name|AllocateRequest
name|request
init|=
name|RECORD_FACTORY
operator|.
name|newRecordInstance
argument_list|(
name|AllocateRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAskList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setReleaseList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|ResourceBlacklistRequest
name|blackList
init|=
name|ResourceBlacklistRequest
operator|.
name|newInstance
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|blackList
operator|.
name|setBlacklistAdditions
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|blackList
operator|.
name|setBlacklistRemovals
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setResourceBlacklistRequest
argument_list|(
name|blackList
argument_list|)
expr_stmt|;
name|request
operator|.
name|setUpdateRequests
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|UpdateContainerRequest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
comment|/**    * Check to see if the specified containerId exists in the cache and log an    * error if not found.    *    * @param containerId the container id    * @param actionName the name of the action    * @return true if the container exists in the map, false otherwise    */
DECL|method|warnIfNotExists (ContainerId containerId, String actionName)
specifier|private
name|boolean
name|warnIfNotExists
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|String
name|actionName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|containerIdToSubClusterIdMap
operator|.
name|containsKey
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"AM is trying to {} a container {} that does not exist. Might happen "
operator|+
literal|"shortly after NM restart when NM recovery is enabled"
argument_list|,
name|actionName
argument_list|,
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Splits the specified request to send it to different sub clusters. The    * splitting algorithm is very simple. If the request does not have a node    * preference, the policy decides the sub cluster. If the request has a node    * preference and if locality is required, then it is sent to the sub cluster    * that contains the requested node. If node preference is specified and    * locality is not required, then the policy decides the sub cluster.    *    * @param askList the ask list to split    * @return the split asks    * @throws YarnException if split fails    */
DECL|method|splitResourceRequests ( List<ResourceRequest> askList)
specifier|protected
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|>
name|splitResourceRequests
parameter_list|(
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|askList
parameter_list|)
throws|throws
name|YarnException
block|{
return|return
name|this
operator|.
name|policyInterpreter
operator|.
name|splitResourceRequests
argument_list|(
name|askList
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getUnmanagedAMPoolSize ()
specifier|protected
name|int
name|getUnmanagedAMPoolSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|uamPool
operator|.
name|getAllUAMIds
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getUnmanagedAMPool ()
specifier|protected
name|UnmanagedAMPoolManager
name|getUnmanagedAMPool
parameter_list|()
block|{
return|return
name|this
operator|.
name|uamPool
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getUamRegisterFutures ()
specifier|protected
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
name|getUamRegisterFutures
parameter_list|()
block|{
return|return
name|this
operator|.
name|uamRegisterFutures
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getAsyncResponseSink ()
specifier|public
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|List
argument_list|<
name|AllocateResponse
argument_list|>
argument_list|>
name|getAsyncResponseSink
parameter_list|()
block|{
return|return
name|this
operator|.
name|asyncResponseSink
return|;
block|}
comment|/**    * Async callback handler for heart beat response from all sub-clusters.    */
DECL|class|HeartbeatCallBack
specifier|private
class|class
name|HeartbeatCallBack
implements|implements
name|AsyncCallback
argument_list|<
name|AllocateResponse
argument_list|>
block|{
DECL|field|subClusterId
specifier|private
name|SubClusterId
name|subClusterId
decl_stmt|;
DECL|field|isUAM
specifier|private
name|boolean
name|isUAM
decl_stmt|;
DECL|method|HeartbeatCallBack (SubClusterId subClusterId, boolean isUAM)
name|HeartbeatCallBack
parameter_list|(
name|SubClusterId
name|subClusterId
parameter_list|,
name|boolean
name|isUAM
parameter_list|)
block|{
name|this
operator|.
name|subClusterId
operator|=
name|subClusterId
expr_stmt|;
name|this
operator|.
name|isUAM
operator|=
name|isUAM
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|callback (AllocateResponse response)
specifier|public
name|void
name|callback
parameter_list|(
name|AllocateResponse
name|response
parameter_list|)
block|{
synchronized|synchronized
init|(
name|asyncResponseSink
init|)
block|{
name|List
argument_list|<
name|AllocateResponse
argument_list|>
name|responses
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|asyncResponseSink
operator|.
name|containsKey
argument_list|(
name|subClusterId
argument_list|)
condition|)
block|{
name|responses
operator|=
name|asyncResponseSink
operator|.
name|get
argument_list|(
name|subClusterId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|responses
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|asyncResponseSink
operator|.
name|put
argument_list|(
name|subClusterId
argument_list|,
name|responses
argument_list|)
expr_stmt|;
block|}
name|responses
operator|.
name|add
argument_list|(
name|response
argument_list|)
expr_stmt|;
comment|// Notify main thread about the response arrival
name|asyncResponseSink
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
comment|// Notify policy of allocate response
try|try
block|{
name|policyInterpreter
operator|.
name|notifyOfResponse
argument_list|(
name|subClusterId
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"notifyOfResponse for policy failed for sub-cluster "
operator|+
name|subClusterId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Save the new AMRMToken for the UAM if present
comment|// Do this last because it can be slow...
if|if
condition|(
name|this
operator|.
name|isUAM
operator|&&
name|response
operator|.
name|getAMRMToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|newToken
init|=
name|ConverterUtils
operator|.
name|convertFromYarn
argument_list|(
name|response
operator|.
name|getAMRMToken
argument_list|()
argument_list|,
operator|(
name|Text
operator|)
literal|null
argument_list|)
decl_stmt|;
comment|// Do not further propagate the new amrmToken for UAM
name|response
operator|.
name|setAMRMToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// Update the token in registry or NMSS
if|if
condition|(
name|registryClient
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|registryClient
operator|.
name|writeAMRMTokenForUAM
argument_list|(
name|attemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|,
name|newToken
argument_list|)
condition|)
block|{
try|try
block|{
name|AMRMTokenIdentifier
name|identifier
init|=
operator|new
name|AMRMTokenIdentifier
argument_list|()
decl_stmt|;
name|identifier
operator|.
name|readFields
argument_list|(
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|newToken
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received new UAM amrmToken with keyId {} and "
operator|+
literal|"service {} from {} for {}, written to Registry"
argument_list|,
name|identifier
operator|.
name|getKeyId
argument_list|()
argument_list|,
name|newToken
operator|.
name|getService
argument_list|()
argument_list|,
name|subClusterId
argument_list|,
name|attemptId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{             }
block|}
block|}
elseif|else
if|if
condition|(
name|getNMStateStore
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|getNMStateStore
argument_list|()
operator|.
name|storeAMRMProxyAppContextEntry
argument_list|(
name|attemptId
argument_list|,
name|NMSS_SECONDARY_SC_PREFIX
operator|+
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|,
name|newToken
operator|.
name|encodeToUrlString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|STRING_TO_BYTE_FORMAT
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error storing UAM token as AMRMProxy "
operator|+
literal|"context entry in NMSS for "
operator|+
name|attemptId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * Private structure for encapsulating SubClusterId and    * FinishApplicationMasterResponse instances.    */
DECL|class|FinishApplicationMasterResponseInfo
specifier|private
specifier|static
class|class
name|FinishApplicationMasterResponseInfo
block|{
DECL|field|response
specifier|private
name|FinishApplicationMasterResponse
name|response
decl_stmt|;
DECL|field|subClusterId
specifier|private
name|String
name|subClusterId
decl_stmt|;
DECL|method|FinishApplicationMasterResponseInfo ( FinishApplicationMasterResponse response, String subClusterId)
name|FinishApplicationMasterResponseInfo
parameter_list|(
name|FinishApplicationMasterResponse
name|response
parameter_list|,
name|String
name|subClusterId
parameter_list|)
block|{
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
name|this
operator|.
name|subClusterId
operator|=
name|subClusterId
expr_stmt|;
block|}
DECL|method|getResponse ()
specifier|public
name|FinishApplicationMasterResponse
name|getResponse
parameter_list|()
block|{
return|return
name|response
return|;
block|}
DECL|method|getSubClusterId ()
specifier|public
name|String
name|getSubClusterId
parameter_list|()
block|{
return|return
name|subClusterId
return|;
block|}
block|}
comment|/**    * Utility method to check if the specified Collection is null or empty.    *    * @param c the collection object    * @param<T> element type of the collection    * @return whether is it is null or empty    */
DECL|method|isNullOrEmpty (Collection<T> c)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|boolean
name|isNullOrEmpty
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|c
parameter_list|)
block|{
return|return
operator|(
name|c
operator|==
literal|null
operator|||
name|c
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
return|;
block|}
comment|/**    * Utility method to check if the specified Collection is null or empty.    *    * @param c the map object    * @param<T1> key type of the map    * @param<T2> value type of the map    * @return whether is it is null or empty    */
DECL|method|isNullOrEmpty (Map<T1, T2> c)
specifier|public
specifier|static
parameter_list|<
name|T1
parameter_list|,
name|T2
parameter_list|>
name|boolean
name|isNullOrEmpty
parameter_list|(
name|Map
argument_list|<
name|T1
argument_list|,
name|T2
argument_list|>
name|c
parameter_list|)
block|{
return|return
operator|(
name|c
operator|==
literal|null
operator|||
name|c
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
return|;
block|}
block|}
end_class

end_unit

