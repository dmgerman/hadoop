begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.amrmproxy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|amrmproxy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationMasterProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceBlacklistRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|UpdateContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidApplicationMasterRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|failover
operator|.
name|FederationProxyProviderUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|AMRMClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|YarnServerSecurityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Extends the AbstractRequestInterceptor and provides an implementation for  * federation of YARN RM and scaling an application across multiple YARN  * sub-clusters. All the federation specific implementation is encapsulated in  * this class. This is always the last intercepter in the chain.  */
end_comment

begin_class
DECL|class|FederationInterceptor
specifier|public
class|class
name|FederationInterceptor
extends|extends
name|AbstractRequestInterceptor
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FederationInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * The home sub-cluster is the sub-cluster where the AM container is running    * in.    */
DECL|field|homeRM
specifier|private
name|ApplicationMasterProtocol
name|homeRM
decl_stmt|;
DECL|field|homeSubClusterId
specifier|private
name|SubClusterId
name|homeSubClusterId
decl_stmt|;
comment|/**    * Used to keep track of the container Id and the sub cluster RM that created    * the container, so that we know which sub-cluster to forward later requests    * about existing containers to.    */
DECL|field|containerIdToSubClusterIdMap
specifier|private
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|SubClusterId
argument_list|>
name|containerIdToSubClusterIdMap
decl_stmt|;
comment|/**    * The original registration request that was sent by the AM. This instance is    * reused to register/re-register with all the sub-cluster RMs.    */
DECL|field|amRegistrationRequest
specifier|private
name|RegisterApplicationMasterRequest
name|amRegistrationRequest
decl_stmt|;
comment|/**    * The original registration response from home RM. This instance is reused    * for duplicate register request from AM, triggered by timeout between AM and    * AMRMProxy.    */
DECL|field|amRegistrationResponse
specifier|private
name|RegisterApplicationMasterResponse
name|amRegistrationResponse
decl_stmt|;
comment|/** The proxy ugi used to talk to home RM. */
DECL|field|appOwner
specifier|private
name|UserGroupInformation
name|appOwner
decl_stmt|;
comment|/**    * Creates an instance of the FederationInterceptor class.    */
DECL|method|FederationInterceptor ()
specifier|public
name|FederationInterceptor
parameter_list|()
block|{
name|this
operator|.
name|containerIdToSubClusterIdMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|amRegistrationResponse
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Initializes the instance using specified context.    */
annotation|@
name|Override
DECL|method|init (AMRMProxyApplicationContext appContext)
specifier|public
name|void
name|init
parameter_list|(
name|AMRMProxyApplicationContext
name|appContext
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|appContext
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing Federation Interceptor"
argument_list|)
expr_stmt|;
comment|// Update the conf if available
name|Configuration
name|conf
init|=
name|appContext
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
name|getConf
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|this
operator|.
name|appOwner
operator|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|appContext
operator|.
name|getUser
argument_list|()
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|this
operator|.
name|homeSubClusterId
operator|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
name|YarnConfiguration
operator|.
name|getClusterId
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|homeRM
operator|=
name|createHomeRMProxy
argument_list|(
name|appContext
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sends the application master's registration request to the home RM.    *    * Between AM and AMRMProxy, FederationInterceptor modifies the RM behavior,    * so that when AM registers more than once, it returns the same register    * success response instead of throwing    * {@link InvalidApplicationMasterRequestException}. Furthermore, we present    * to AM as if we are the RM that never fails over. When actual RM fails over,    * we always re-register automatically.    *    * We did this because FederationInterceptor can receive concurrent register    * requests from AM because of timeout between AM and AMRMProxy, which is    * shorter than the timeout + failOver between FederationInterceptor    * (AMRMProxy) and RM.    */
annotation|@
name|Override
DECL|method|registerApplicationMaster ( RegisterApplicationMasterRequest request)
specifier|public
name|RegisterApplicationMasterResponse
name|registerApplicationMaster
parameter_list|(
name|RegisterApplicationMasterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
comment|// If AM is calling with a different request, complain
if|if
condition|(
name|this
operator|.
name|amRegistrationRequest
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|amRegistrationRequest
operator|.
name|equals
argument_list|(
name|request
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"A different request body recieved. AM should"
operator|+
literal|" not call registerApplicationMaster with different request body"
argument_list|)
throw|;
block|}
comment|// Save the registration request. This will be used for registering with
comment|// secondary sub-clusters using UAMs, as well as re-register later
name|this
operator|.
name|amRegistrationRequest
operator|=
name|request
expr_stmt|;
comment|/*      * Present to AM as if we are the RM that never fails over. When actual RM      * fails over, we always re-register automatically.      *      * We did this because it is possible for AM to send duplicate register      * request because of timeout. When it happens, it is fine to simply return      * the success message. Out of all outstanding register threads, only the      * last one will still have an unbroken RPC connection and successfully      * return the response.      */
if|if
condition|(
name|this
operator|.
name|amRegistrationResponse
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|amRegistrationResponse
return|;
block|}
comment|/*      * Send a registration request to the home resource manager. Note that here      * we don't register with other sub-cluster resource managers because that      * will prevent us from using new sub-clusters that get added while the AM      * is running and will breaks the elasticity feature. The registration with      * the other sub-cluster RM will be done lazily as needed later.      */
try|try
block|{
name|this
operator|.
name|amRegistrationResponse
operator|=
name|this
operator|.
name|homeRM
operator|.
name|registerApplicationMaster
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidApplicationMasterRequestException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|AMRMClientUtils
operator|.
name|APP_ALREADY_REGISTERED_MESSAGE
argument_list|)
condition|)
block|{
comment|// Some other register thread might have succeeded in the meantime
if|if
condition|(
name|this
operator|.
name|amRegistrationResponse
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Other concurrent thread registered successfully, "
operator|+
literal|"simply return the same success register response"
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|amRegistrationResponse
return|;
block|}
block|}
comment|// This is a real issue, throw back to AM
throw|throw
name|e
throw|;
block|}
comment|// the queue this application belongs will be used for getting
comment|// AMRMProxy policy from state store.
name|String
name|queue
init|=
name|this
operator|.
name|amRegistrationResponse
operator|.
name|getQueue
argument_list|()
decl_stmt|;
if|if
condition|(
name|queue
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Received null queue for application "
operator|+
name|getApplicationContext
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" from home subcluster. Will use default queue name "
operator|+
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
operator|+
literal|" for getting AMRMProxyPolicy"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Application "
operator|+
name|getApplicationContext
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" belongs to queue "
operator|+
name|queue
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|amRegistrationResponse
return|;
block|}
comment|/**    * Sends the heart beats to the home RM and the secondary sub-cluster RMs that    * are being used by the application.    */
annotation|@
name|Override
DECL|method|allocate (AllocateRequest request)
specifier|public
name|AllocateResponse
name|allocate
parameter_list|(
name|AllocateRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
try|try
block|{
comment|// Split the heart beat request into multiple requests, one for each
comment|// sub-cluster RM that is used by this application.
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|AllocateRequest
argument_list|>
name|requests
init|=
name|splitAllocateRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
comment|// Send the request to the home RM and get the response
name|AllocateResponse
name|homeResponse
init|=
name|AMRMClientUtils
operator|.
name|allocateWithReRegister
argument_list|(
name|requests
operator|.
name|get
argument_list|(
name|this
operator|.
name|homeSubClusterId
argument_list|)
argument_list|,
name|this
operator|.
name|homeRM
argument_list|,
name|this
operator|.
name|amRegistrationRequest
argument_list|,
name|getApplicationContext
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
comment|// If the resource manager sent us a new token, add to the current user
if|if
condition|(
name|homeResponse
operator|.
name|getAMRMToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received new AMRMToken"
argument_list|)
expr_stmt|;
name|YarnServerSecurityUtils
operator|.
name|updateAMRMToken
argument_list|(
name|homeResponse
operator|.
name|getAMRMToken
argument_list|()
argument_list|,
name|this
operator|.
name|appOwner
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Merge the responses from home and secondary sub-cluster RMs
name|homeResponse
operator|=
name|mergeAllocateResponses
argument_list|(
name|homeResponse
argument_list|)
expr_stmt|;
comment|// return the final response to the application master.
return|return
name|homeResponse
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered while processing heart beat"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**    * Sends the finish application master request to all the resource managers    * used by the application.    */
annotation|@
name|Override
DECL|method|finishApplicationMaster ( FinishApplicationMasterRequest request)
specifier|public
name|FinishApplicationMasterResponse
name|finishApplicationMaster
parameter_list|(
name|FinishApplicationMasterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|FinishApplicationMasterResponse
name|homeResponse
init|=
name|AMRMClientUtils
operator|.
name|finishAMWithReRegister
argument_list|(
name|request
argument_list|,
name|this
operator|.
name|homeRM
argument_list|,
name|this
operator|.
name|amRegistrationRequest
argument_list|,
name|getApplicationContext
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|homeResponse
return|;
block|}
annotation|@
name|Override
DECL|method|setNextInterceptor (RequestInterceptor next)
specifier|public
name|void
name|setNextInterceptor
parameter_list|(
name|RequestInterceptor
name|next
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"setNextInterceptor is being called on FederationInterceptor. "
operator|+
literal|"It should always be used as the last interceptor in the chain"
argument_list|)
throw|;
block|}
comment|/**    * This is called when the application pipeline is being destroyed. We will    * release all the resources that we are holding in this call.    */
annotation|@
name|Override
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|super
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns instance of the ApplicationMasterProtocol proxy class that is used    * to connect to the Home resource manager.    *    * @param appContext AMRMProxyApplicationContext    * @return the proxy created    */
DECL|method|createHomeRMProxy ( AMRMProxyApplicationContext appContext)
specifier|protected
name|ApplicationMasterProtocol
name|createHomeRMProxy
parameter_list|(
name|AMRMProxyApplicationContext
name|appContext
parameter_list|)
block|{
try|try
block|{
return|return
name|FederationProxyProviderUtil
operator|.
name|createRMProxy
argument_list|(
name|appContext
operator|.
name|getConf
argument_list|()
argument_list|,
name|ApplicationMasterProtocol
operator|.
name|class
argument_list|,
name|this
operator|.
name|homeSubClusterId
argument_list|,
name|this
operator|.
name|appOwner
argument_list|,
name|appContext
operator|.
name|getAMRMToken
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**    * In federation, the heart beat request needs to be sent to all the sub    * clusters from which the AM has requested containers. This method splits the    * specified AllocateRequest from the AM and creates a new request for each    * sub-cluster RM.    */
DECL|method|splitAllocateRequest ( AllocateRequest request)
specifier|private
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|AllocateRequest
argument_list|>
name|splitAllocateRequest
parameter_list|(
name|AllocateRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|AllocateRequest
argument_list|>
name|requestMap
init|=
operator|new
name|HashMap
argument_list|<
name|SubClusterId
argument_list|,
name|AllocateRequest
argument_list|>
argument_list|()
decl_stmt|;
comment|// Create heart beat request for home sub-cluster resource manager
name|findOrCreateAllocateRequestForSubCluster
argument_list|(
name|this
operator|.
name|homeSubClusterId
argument_list|,
name|request
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|request
operator|.
name|getAskList
argument_list|()
argument_list|)
condition|)
block|{
name|AllocateRequest
name|newRequest
init|=
name|findOrCreateAllocateRequestForSubCluster
argument_list|(
name|this
operator|.
name|homeSubClusterId
argument_list|,
name|request
argument_list|,
name|requestMap
argument_list|)
decl_stmt|;
name|newRequest
operator|.
name|getAskList
argument_list|()
operator|.
name|addAll
argument_list|(
name|request
operator|.
name|getAskList
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getResourceBlacklistRequest
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|isNullOrEmpty
argument_list|(
name|request
operator|.
name|getResourceBlacklistRequest
argument_list|()
operator|.
name|getBlacklistAdditions
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|resourceName
range|:
name|request
operator|.
name|getResourceBlacklistRequest
argument_list|()
operator|.
name|getBlacklistAdditions
argument_list|()
control|)
block|{
name|AllocateRequest
name|newRequest
init|=
name|findOrCreateAllocateRequestForSubCluster
argument_list|(
name|this
operator|.
name|homeSubClusterId
argument_list|,
name|request
argument_list|,
name|requestMap
argument_list|)
decl_stmt|;
name|newRequest
operator|.
name|getResourceBlacklistRequest
argument_list|()
operator|.
name|getBlacklistAdditions
argument_list|()
operator|.
name|add
argument_list|(
name|resourceName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|getResourceBlacklistRequest
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|isNullOrEmpty
argument_list|(
name|request
operator|.
name|getResourceBlacklistRequest
argument_list|()
operator|.
name|getBlacklistRemovals
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|resourceName
range|:
name|request
operator|.
name|getResourceBlacklistRequest
argument_list|()
operator|.
name|getBlacklistRemovals
argument_list|()
control|)
block|{
name|AllocateRequest
name|newRequest
init|=
name|findOrCreateAllocateRequestForSubCluster
argument_list|(
name|this
operator|.
name|homeSubClusterId
argument_list|,
name|request
argument_list|,
name|requestMap
argument_list|)
decl_stmt|;
name|newRequest
operator|.
name|getResourceBlacklistRequest
argument_list|()
operator|.
name|getBlacklistRemovals
argument_list|()
operator|.
name|add
argument_list|(
name|resourceName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|request
operator|.
name|getReleaseList
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|ContainerId
name|cid
range|:
name|request
operator|.
name|getReleaseList
argument_list|()
control|)
block|{
if|if
condition|(
name|warnIfNotExists
argument_list|(
name|cid
argument_list|,
literal|"release"
argument_list|)
condition|)
block|{
name|SubClusterId
name|subClusterId
init|=
name|this
operator|.
name|containerIdToSubClusterIdMap
operator|.
name|get
argument_list|(
name|cid
argument_list|)
decl_stmt|;
name|AllocateRequest
name|newRequest
init|=
name|requestMap
operator|.
name|get
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
name|newRequest
operator|.
name|getReleaseList
argument_list|()
operator|.
name|add
argument_list|(
name|cid
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|request
operator|.
name|getUpdateRequests
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|UpdateContainerRequest
name|ucr
range|:
name|request
operator|.
name|getUpdateRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|warnIfNotExists
argument_list|(
name|ucr
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|"update"
argument_list|)
condition|)
block|{
name|SubClusterId
name|subClusterId
init|=
name|this
operator|.
name|containerIdToSubClusterIdMap
operator|.
name|get
argument_list|(
name|ucr
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
name|AllocateRequest
name|newRequest
init|=
name|requestMap
operator|.
name|get
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
name|newRequest
operator|.
name|getUpdateRequests
argument_list|()
operator|.
name|add
argument_list|(
name|ucr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|requestMap
return|;
block|}
comment|/**    * Merges the responses from other sub-clusters that we received    * asynchronously with the specified home cluster response and keeps track of    * the containers received from each sub-cluster resource managers.    */
DECL|method|mergeAllocateResponses ( AllocateResponse homeResponse)
specifier|private
name|AllocateResponse
name|mergeAllocateResponses
parameter_list|(
name|AllocateResponse
name|homeResponse
parameter_list|)
block|{
comment|// Timing issue, we need to remove the completed and then save the new ones.
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Remove containers: "
operator|+
name|homeResponse
operator|.
name|getCompletedContainersStatuses
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding containers: "
operator|+
name|homeResponse
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|removeFinishedContainersFromCache
argument_list|(
name|homeResponse
operator|.
name|getCompletedContainersStatuses
argument_list|()
argument_list|)
expr_stmt|;
name|cacheAllocatedContainers
argument_list|(
name|homeResponse
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|,
name|this
operator|.
name|homeSubClusterId
argument_list|)
expr_stmt|;
return|return
name|homeResponse
return|;
block|}
comment|/**    * Removes the finished containers from the local cache.    */
DECL|method|removeFinishedContainersFromCache ( List<ContainerStatus> finishedContainers)
specifier|private
name|void
name|removeFinishedContainersFromCache
parameter_list|(
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|finishedContainers
parameter_list|)
block|{
for|for
control|(
name|ContainerStatus
name|container
range|:
name|finishedContainers
control|)
block|{
if|if
condition|(
name|containerIdToSubClusterIdMap
operator|.
name|containsKey
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
condition|)
block|{
name|containerIdToSubClusterIdMap
operator|.
name|remove
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Add allocated containers to cache mapping.    */
DECL|method|cacheAllocatedContainers (List<Container> containers, SubClusterId subClusterId)
specifier|private
name|void
name|cacheAllocatedContainers
parameter_list|(
name|List
argument_list|<
name|Container
argument_list|>
name|containers
parameter_list|,
name|SubClusterId
name|subClusterId
parameter_list|)
block|{
for|for
control|(
name|Container
name|container
range|:
name|containers
control|)
block|{
if|if
condition|(
name|containerIdToSubClusterIdMap
operator|.
name|containsKey
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|SubClusterId
name|existingSubClusterId
init|=
name|containerIdToSubClusterIdMap
operator|.
name|get
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingSubClusterId
operator|.
name|equals
argument_list|(
name|subClusterId
argument_list|)
condition|)
block|{
comment|// When RM fails over, the new RM master might send out the same
comment|// container allocation more than once. Just move on in this case.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Duplicate containerID: {} found in the allocated containers"
operator|+
literal|" from same subcluster: {}, so ignoring."
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|subClusterId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// The same container allocation from different subclusters,
comment|// something is wrong.
comment|// TODO: YARN-6667 if some subcluster RM is configured wrong, we
comment|// should not fail the entire heartbeat.
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Duplicate containerID found in the allocated containers. This"
operator|+
literal|" can happen if the RM epoch is not configured properly."
operator|+
literal|" ContainerId: "
operator|+
name|container
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" ApplicationId: "
operator|+
name|getApplicationContext
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|+
literal|" From RM: "
operator|+
name|subClusterId
operator|+
literal|" . Previous container was from subcluster: "
operator|+
name|existingSubClusterId
argument_list|)
throw|;
block|}
block|}
name|containerIdToSubClusterIdMap
operator|.
name|put
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|subClusterId
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Check to see if an AllocateRequest exists in the Map for the specified sub    * cluster. If not found, create a new one, copy the value of responseId and    * progress from the orignialAMRequest, save it in the specified Map and    * return the new instance. If found, just return the old instance.    */
DECL|method|findOrCreateAllocateRequestForSubCluster ( SubClusterId subClusterId, AllocateRequest originalAMRequest, Map<SubClusterId, AllocateRequest> requestMap)
specifier|private
specifier|static
name|AllocateRequest
name|findOrCreateAllocateRequestForSubCluster
parameter_list|(
name|SubClusterId
name|subClusterId
parameter_list|,
name|AllocateRequest
name|originalAMRequest
parameter_list|,
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|AllocateRequest
argument_list|>
name|requestMap
parameter_list|)
block|{
name|AllocateRequest
name|newRequest
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|requestMap
operator|.
name|containsKey
argument_list|(
name|subClusterId
argument_list|)
condition|)
block|{
name|newRequest
operator|=
name|requestMap
operator|.
name|get
argument_list|(
name|subClusterId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newRequest
operator|=
name|createAllocateRequest
argument_list|()
expr_stmt|;
name|newRequest
operator|.
name|setResponseId
argument_list|(
name|originalAMRequest
operator|.
name|getResponseId
argument_list|()
argument_list|)
expr_stmt|;
name|newRequest
operator|.
name|setProgress
argument_list|(
name|originalAMRequest
operator|.
name|getProgress
argument_list|()
argument_list|)
expr_stmt|;
name|requestMap
operator|.
name|put
argument_list|(
name|subClusterId
argument_list|,
name|newRequest
argument_list|)
expr_stmt|;
block|}
return|return
name|newRequest
return|;
block|}
comment|/**    * Create an empty AllocateRequest instance.    */
DECL|method|createAllocateRequest ()
specifier|private
specifier|static
name|AllocateRequest
name|createAllocateRequest
parameter_list|()
block|{
name|AllocateRequest
name|request
init|=
name|AllocateRequest
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAskList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setReleaseList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|ResourceBlacklistRequest
name|blackList
init|=
name|ResourceBlacklistRequest
operator|.
name|newInstance
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|blackList
operator|.
name|setBlacklistAdditions
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|blackList
operator|.
name|setBlacklistRemovals
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setResourceBlacklistRequest
argument_list|(
name|blackList
argument_list|)
expr_stmt|;
name|request
operator|.
name|setUpdateRequests
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|UpdateContainerRequest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
comment|/**    * Check to see if the specified containerId exists in the cache and log an    * error if not found.    *    * @param containerId the container id    * @param actionName the name of the action    * @return true if the container exists in the map, false otherwise    */
DECL|method|warnIfNotExists (ContainerId containerId, String actionName)
specifier|private
name|boolean
name|warnIfNotExists
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|String
name|actionName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|containerIdToSubClusterIdMap
operator|.
name|containsKey
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"AM is trying to {} a container {} that does not exist. "
argument_list|,
name|actionName
argument_list|,
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Utility method to check if the specified Collection is null or empty    *    * @param c the collection object    * @param<T> element type of the collection    * @return whether is it is null or empty    */
DECL|method|isNullOrEmpty (Collection<T> c)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|boolean
name|isNullOrEmpty
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|c
parameter_list|)
block|{
return|return
operator|(
name|c
operator|==
literal|null
operator|||
name|c
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
return|;
block|}
block|}
end_class

end_unit

