begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.deviceframework
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|deviceframework
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|DevicePlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|CGroupsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|ResourceHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|DockerCommandPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|NodeResourceUpdaterPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|ResourcePlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NMResourceInfo
import|;
end_import

begin_comment
comment|/**  * The {@link DevicePluginAdapter} will adapt existing hooks.  * into vendor plugin's logic.  * It decouples the vendor plugin from YARN's device framework  *  * */
end_comment

begin_class
DECL|class|DevicePluginAdapter
specifier|public
class|class
name|DevicePluginAdapter
implements|implements
name|ResourcePlugin
block|{
DECL|field|LOG
specifier|private
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DevicePluginAdapter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|resourceName
specifier|private
specifier|final
name|String
name|resourceName
decl_stmt|;
DECL|field|devicePlugin
specifier|private
specifier|final
name|DevicePlugin
name|devicePlugin
decl_stmt|;
DECL|field|deviceMappingManager
specifier|private
name|DeviceMappingManager
name|deviceMappingManager
decl_stmt|;
DECL|field|deviceResourceUpdater
specifier|private
name|DeviceResourceUpdaterImpl
name|deviceResourceUpdater
decl_stmt|;
DECL|field|deviceResourceHandler
specifier|private
name|DeviceResourceHandlerImpl
name|deviceResourceHandler
decl_stmt|;
DECL|method|DevicePluginAdapter (String name, DevicePlugin dp, DeviceMappingManager dmm)
specifier|public
name|DevicePluginAdapter
parameter_list|(
name|String
name|name
parameter_list|,
name|DevicePlugin
name|dp
parameter_list|,
name|DeviceMappingManager
name|dmm
parameter_list|)
block|{
name|deviceMappingManager
operator|=
name|dmm
expr_stmt|;
name|resourceName
operator|=
name|name
expr_stmt|;
name|devicePlugin
operator|=
name|dp
expr_stmt|;
block|}
DECL|method|getDeviceMappingManager ()
specifier|public
name|DeviceMappingManager
name|getDeviceMappingManager
parameter_list|()
block|{
return|return
name|deviceMappingManager
return|;
block|}
annotation|@
name|Override
DECL|method|initialize (Context context)
specifier|public
name|void
name|initialize
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|YarnException
block|{
name|deviceResourceUpdater
operator|=
operator|new
name|DeviceResourceUpdaterImpl
argument_list|(
name|resourceName
argument_list|,
name|devicePlugin
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|resourceName
operator|+
literal|" plugin adapter initialized"
argument_list|)
expr_stmt|;
return|return;
block|}
annotation|@
name|Override
DECL|method|createResourceHandler (Context nmContext, CGroupsHandler cGroupsHandler, PrivilegedOperationExecutor privilegedOperationExecutor)
specifier|public
name|ResourceHandler
name|createResourceHandler
parameter_list|(
name|Context
name|nmContext
parameter_list|,
name|CGroupsHandler
name|cGroupsHandler
parameter_list|,
name|PrivilegedOperationExecutor
name|privilegedOperationExecutor
parameter_list|)
block|{
name|this
operator|.
name|deviceResourceHandler
operator|=
operator|new
name|DeviceResourceHandlerImpl
argument_list|(
name|resourceName
argument_list|,
name|devicePlugin
argument_list|,
name|this
argument_list|,
name|deviceMappingManager
argument_list|,
name|cGroupsHandler
argument_list|,
name|privilegedOperationExecutor
argument_list|)
expr_stmt|;
return|return
name|deviceResourceHandler
return|;
block|}
annotation|@
name|Override
DECL|method|getNodeResourceHandlerInstance ()
specifier|public
name|NodeResourceUpdaterPlugin
name|getNodeResourceHandlerInstance
parameter_list|()
block|{
return|return
name|deviceResourceUpdater
return|;
block|}
annotation|@
name|Override
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{    }
annotation|@
name|Override
DECL|method|getDockerCommandPluginInstance ()
specifier|public
name|DockerCommandPlugin
name|getDockerCommandPluginInstance
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getNMResourceInfo ()
specifier|public
name|NMResourceInfo
name|getNMResourceInfo
parameter_list|()
throws|throws
name|YarnException
block|{
return|return
literal|null
return|;
block|}
DECL|method|getDeviceResourceHandler ()
specifier|public
name|DeviceResourceHandlerImpl
name|getDeviceResourceHandler
parameter_list|()
block|{
return|return
name|deviceResourceHandler
return|;
block|}
block|}
end_class

end_unit

