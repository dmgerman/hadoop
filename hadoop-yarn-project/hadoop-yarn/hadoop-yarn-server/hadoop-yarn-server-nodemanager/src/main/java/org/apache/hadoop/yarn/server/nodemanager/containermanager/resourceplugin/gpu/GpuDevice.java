begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.gpu
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|gpu
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_comment
comment|/**  * This class is used to represent GPU device while allocation.  */
end_comment

begin_class
DECL|class|GpuDevice
specifier|public
class|class
name|GpuDevice
implements|implements
name|Serializable
implements|,
name|Comparable
block|{
DECL|field|index
specifier|private
name|int
name|index
decl_stmt|;
DECL|field|minorNumber
specifier|private
name|int
name|minorNumber
decl_stmt|;
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|6812314470754667710L
decl_stmt|;
DECL|method|GpuDevice (int index, int minorNumber)
specifier|public
name|GpuDevice
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|minorNumber
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|minorNumber
operator|=
name|minorNumber
expr_stmt|;
block|}
DECL|method|getIndex ()
specifier|public
name|int
name|getIndex
parameter_list|()
block|{
return|return
name|index
return|;
block|}
DECL|method|getMinorNumber ()
specifier|public
name|int
name|getMinorNumber
parameter_list|()
block|{
return|return
name|minorNumber
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
operator|!
operator|(
name|obj
operator|instanceof
name|GpuDevice
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|GpuDevice
name|other
init|=
operator|(
name|GpuDevice
operator|)
name|obj
decl_stmt|;
return|return
name|index
operator|==
name|other
operator|.
name|index
operator|&&
name|minorNumber
operator|==
name|other
operator|.
name|minorNumber
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (Object obj)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
operator|(
operator|!
operator|(
name|obj
operator|instanceof
name|GpuDevice
operator|)
operator|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|GpuDevice
name|other
init|=
operator|(
name|GpuDevice
operator|)
name|obj
decl_stmt|;
name|int
name|result
init|=
name|Integer
operator|.
name|compare
argument_list|(
name|index
argument_list|,
name|other
operator|.
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|!=
name|result
condition|)
block|{
return|return
name|result
return|;
block|}
return|return
name|Integer
operator|.
name|compare
argument_list|(
name|minorNumber
argument_list|,
name|other
operator|.
name|minorNumber
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|47
decl_stmt|;
return|return
name|prime
operator|*
name|index
operator|+
name|minorNumber
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"(index="
operator|+
name|index
operator|+
literal|",minor_number="
operator|+
name|minorNumber
operator|+
literal|")"
return|;
block|}
block|}
end_class

end_unit

