begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.runtime.runc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|runc
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|DEFAULT_NM_RUNC_IMAGE_TOPLEVEL_DIR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|DEFAULT_NM_RUNC_STAT_CACHE_TIMEOUT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|DEFAULT_RUNC_STAT_CACHE_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|NM_RUNC_IMAGE_TOPLEVEL_DIR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|NM_RUNC_STAT_CACHE_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|NM_RUNC_STAT_CACHE_TIMEOUT
import|;
end_import

begin_comment
comment|/**  * This class is a plugin for the  * {@link org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.runtime.RuncContainerRuntime}  * that maps runC image manifests into their associated config and  * layers that are located in HDFS.  */
end_comment

begin_class
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|HdfsManifestToResourcesPlugin
specifier|public
class|class
name|HdfsManifestToResourcesPlugin
extends|extends
name|AbstractService
implements|implements
name|RuncManifestToResourcesPlugin
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|layersDir
specifier|private
name|String
name|layersDir
decl_stmt|;
DECL|field|configDir
specifier|private
name|String
name|configDir
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|statCache
specifier|private
name|LoadingCache
argument_list|<
name|Path
argument_list|,
name|FileStatus
argument_list|>
name|statCache
decl_stmt|;
DECL|field|CONFIG_MEDIA_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_MEDIA_TYPE
init|=
literal|"application/vnd.docker.container.image.v1+json"
decl_stmt|;
DECL|field|LAYER_TAR_GZIP_MEDIA_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|LAYER_TAR_GZIP_MEDIA_TYPE
init|=
literal|"application/vnd.docker.image.rootfs.diff.tar.gzip"
decl_stmt|;
DECL|field|SHA_256
specifier|private
specifier|static
specifier|final
name|String
name|SHA_256
init|=
literal|"sha256"
decl_stmt|;
DECL|field|CONFIG_HASH_ALGORITHM
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_HASH_ALGORITHM
init|=
name|SHA_256
decl_stmt|;
DECL|field|LAYER_HASH_ALGORITHM
specifier|private
specifier|static
specifier|final
name|String
name|LAYER_HASH_ALGORITHM
init|=
name|SHA_256
decl_stmt|;
DECL|field|SHA256_HASH_LENGTH
specifier|private
specifier|static
specifier|final
name|int
name|SHA256_HASH_LENGTH
init|=
literal|64
decl_stmt|;
DECL|field|ALPHA_NUMERIC
specifier|private
specifier|static
specifier|final
name|String
name|ALPHA_NUMERIC
init|=
literal|"[a-zA-Z0-9]+"
decl_stmt|;
DECL|method|HdfsManifestToResourcesPlugin ()
specifier|public
name|HdfsManifestToResourcesPlugin
parameter_list|()
block|{
name|super
argument_list|(
name|HdfsManifestToResourcesPlugin
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration configuration)
specifier|public
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|configuration
expr_stmt|;
name|String
name|toplevelDir
init|=
name|conf
operator|.
name|get
argument_list|(
name|NM_RUNC_IMAGE_TOPLEVEL_DIR
argument_list|,
name|DEFAULT_NM_RUNC_IMAGE_TOPLEVEL_DIR
argument_list|)
decl_stmt|;
name|this
operator|.
name|layersDir
operator|=
name|toplevelDir
operator|+
literal|"/layers/"
expr_stmt|;
name|this
operator|.
name|configDir
operator|=
name|toplevelDir
operator|+
literal|"/config/"
expr_stmt|;
name|CacheLoader
argument_list|<
name|Path
argument_list|,
name|FileStatus
argument_list|>
name|cacheLoader
init|=
operator|new
name|CacheLoader
argument_list|<
name|Path
argument_list|,
name|FileStatus
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileStatus
name|load
parameter_list|(
annotation|@
name|Nonnull
name|Path
name|path
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|statBlob
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|int
name|statCacheSize
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|NM_RUNC_STAT_CACHE_SIZE
argument_list|,
name|DEFAULT_RUNC_STAT_CACHE_SIZE
argument_list|)
decl_stmt|;
name|int
name|statCacheTimeout
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|NM_RUNC_STAT_CACHE_TIMEOUT
argument_list|,
name|DEFAULT_NM_RUNC_STAT_CACHE_TIMEOUT
argument_list|)
decl_stmt|;
name|this
operator|.
name|statCache
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|maximumSize
argument_list|(
name|statCacheSize
argument_list|)
operator|.
name|refreshAfterWrite
argument_list|(
name|statCacheTimeout
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|build
argument_list|(
name|cacheLoader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|public
name|void
name|serviceStart
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|layersDir
argument_list|)
decl_stmt|;
name|this
operator|.
name|fs
operator|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLayerResources (ImageManifest manifest)
specifier|public
name|List
argument_list|<
name|LocalResource
argument_list|>
name|getLayerResources
parameter_list|(
name|ImageManifest
name|manifest
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|LocalResource
argument_list|>
name|localRsrcs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ImageManifest
operator|.
name|Blob
name|blob
range|:
name|manifest
operator|.
name|getLayers
argument_list|()
control|)
block|{
name|LocalResource
name|rsrc
init|=
name|getResource
argument_list|(
name|blob
argument_list|,
name|layersDir
argument_list|,
name|LAYER_TAR_GZIP_MEDIA_TYPE
argument_list|,
name|LAYER_HASH_ALGORITHM
argument_list|,
literal|".sqsh"
argument_list|)
decl_stmt|;
name|localRsrcs
operator|.
name|add
argument_list|(
name|rsrc
argument_list|)
expr_stmt|;
block|}
return|return
name|localRsrcs
return|;
block|}
DECL|method|getConfigResource (ImageManifest manifest)
specifier|public
name|LocalResource
name|getConfigResource
parameter_list|(
name|ImageManifest
name|manifest
parameter_list|)
throws|throws
name|IOException
block|{
name|ImageManifest
operator|.
name|Blob
name|config
init|=
name|manifest
operator|.
name|getConfig
argument_list|()
decl_stmt|;
return|return
name|getResource
argument_list|(
name|config
argument_list|,
name|configDir
argument_list|,
name|CONFIG_MEDIA_TYPE
argument_list|,
name|CONFIG_HASH_ALGORITHM
argument_list|,
literal|""
argument_list|)
return|;
block|}
DECL|method|getResource (ImageManifest.Blob blob, String dir, String expectedMediaType, String expectedHashAlgorithm, String resourceSuffix)
specifier|public
name|LocalResource
name|getResource
parameter_list|(
name|ImageManifest
operator|.
name|Blob
name|blob
parameter_list|,
name|String
name|dir
parameter_list|,
name|String
name|expectedMediaType
parameter_list|,
name|String
name|expectedHashAlgorithm
parameter_list|,
name|String
name|resourceSuffix
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|mediaType
init|=
name|blob
operator|.
name|getMediaType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|mediaType
operator|.
name|equals
argument_list|(
name|expectedMediaType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid blob mediaType: "
operator|+
name|mediaType
argument_list|)
throw|;
block|}
name|String
index|[]
name|blobDigest
init|=
name|blob
operator|.
name|getDigest
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|String
name|algorithm
init|=
name|blobDigest
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|algorithm
operator|.
name|equals
argument_list|(
name|expectedHashAlgorithm
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid blob digest algorithm: "
operator|+
name|algorithm
argument_list|)
throw|;
block|}
name|String
name|hash
init|=
name|blobDigest
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|hash
operator|.
name|matches
argument_list|(
name|ALPHA_NUMERIC
argument_list|)
operator|||
name|hash
operator|.
name|length
argument_list|()
operator|!=
name|SHA256_HASH_LENGTH
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Malformed blob digest: "
operator|+
name|hash
argument_list|)
throw|;
block|}
name|long
name|size
init|=
name|blob
operator|.
name|getSize
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|hash
operator|+
name|resourceSuffix
argument_list|)
decl_stmt|;
name|LocalResource
name|rsrc
decl_stmt|;
try|try
block|{
name|FileStatus
name|stat
init|=
name|statCache
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|long
name|timestamp
init|=
name|stat
operator|.
name|getModificationTime
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
name|URL
operator|.
name|fromPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|rsrc
operator|=
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|url
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|size
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|rsrc
return|;
block|}
DECL|method|statBlob (Path path)
specifier|protected
name|FileStatus
name|statBlob
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_class

end_unit

