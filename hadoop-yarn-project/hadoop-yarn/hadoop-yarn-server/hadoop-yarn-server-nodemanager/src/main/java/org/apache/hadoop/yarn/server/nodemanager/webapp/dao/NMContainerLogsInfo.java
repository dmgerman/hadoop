begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.webapp.dao
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|webapp
operator|.
name|dao
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|ContainerLogAggregationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|ContainerLogFileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|webapp
operator|.
name|ContainerLogsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ContainerLogsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Times
import|;
end_import

begin_comment
comment|/**  * NMContainerLogsInfo represents the meta data for container logs  * which exist in NM local log directory.  * This class extends {@link ContainerLogsInfo}.  */
end_comment

begin_class
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"containerLogsInfo"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|NMContainerLogsInfo
specifier|public
class|class
name|NMContainerLogsInfo
extends|extends
name|ContainerLogsInfo
block|{
comment|//JAXB needs this
DECL|method|NMContainerLogsInfo ()
specifier|public
name|NMContainerLogsInfo
parameter_list|()
block|{}
DECL|method|NMContainerLogsInfo (final Context nmContext, final ContainerId containerId, String remoteUser, ContainerLogAggregationType logType)
specifier|public
name|NMContainerLogsInfo
parameter_list|(
specifier|final
name|Context
name|nmContext
parameter_list|,
specifier|final
name|ContainerId
name|containerId
parameter_list|,
name|String
name|remoteUser
parameter_list|,
name|ContainerLogAggregationType
name|logType
parameter_list|)
throws|throws
name|YarnException
block|{
name|this
operator|.
name|logType
operator|=
name|logType
operator|.
name|toString
argument_list|()
expr_stmt|;
name|this
operator|.
name|containerId
operator|=
name|containerId
operator|.
name|toString
argument_list|()
expr_stmt|;
name|this
operator|.
name|nodeId
operator|=
name|nmContext
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|this
operator|.
name|containerLogsInfo
operator|=
name|getContainerLogsInfo
argument_list|(
name|containerId
argument_list|,
name|remoteUser
argument_list|,
name|nmContext
argument_list|)
expr_stmt|;
block|}
DECL|method|getContainerLogsInfo ( ContainerId id, String remoteUser, Context nmContext)
specifier|private
specifier|static
name|List
argument_list|<
name|ContainerLogFileInfo
argument_list|>
name|getContainerLogsInfo
parameter_list|(
name|ContainerId
name|id
parameter_list|,
name|String
name|remoteUser
parameter_list|,
name|Context
name|nmContext
parameter_list|)
throws|throws
name|YarnException
block|{
name|List
argument_list|<
name|ContainerLogFileInfo
argument_list|>
name|logFiles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|logDirs
init|=
name|ContainerLogsUtils
operator|.
name|getContainerLogDirs
argument_list|(
name|id
argument_list|,
name|remoteUser
argument_list|,
name|nmContext
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|containerLogsDir
range|:
name|logDirs
control|)
block|{
name|File
index|[]
name|logs
init|=
name|containerLogsDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|logs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|log
range|:
name|logs
control|)
block|{
if|if
condition|(
name|log
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|ContainerLogFileInfo
name|logMeta
init|=
operator|new
name|ContainerLogFileInfo
argument_list|(
name|log
operator|.
name|getName
argument_list|()
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|log
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|Times
operator|.
name|format
argument_list|(
name|log
operator|.
name|lastModified
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|logFiles
operator|.
name|add
argument_list|(
name|logMeta
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|logFiles
return|;
block|}
block|}
end_class

end_unit

