begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ApplicationClassLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ApplicationInitializationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ApplicationTerminationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|AuxiliaryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ContainerInitializationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ContainerTerminationContext
import|;
end_import

begin_class
DECL|class|AuxiliaryServiceWithCustomClassLoader
specifier|final
class|class
name|AuxiliaryServiceWithCustomClassLoader
extends|extends
name|AuxiliaryService
block|{
DECL|field|wrapped
specifier|private
specifier|final
name|AuxiliaryService
name|wrapped
decl_stmt|;
DECL|field|customClassLoader
specifier|private
specifier|final
name|ClassLoader
name|customClassLoader
decl_stmt|;
DECL|method|AuxiliaryServiceWithCustomClassLoader (String name, AuxiliaryService wrapped, ClassLoader customClassLoader)
specifier|private
name|AuxiliaryServiceWithCustomClassLoader
parameter_list|(
name|String
name|name
parameter_list|,
name|AuxiliaryService
name|wrapped
parameter_list|,
name|ClassLoader
name|customClassLoader
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|wrapped
operator|=
name|wrapped
expr_stmt|;
name|this
operator|.
name|customClassLoader
operator|=
name|customClassLoader
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
comment|// We pass a shared configuration as part of serviceInit call.
comment|// To avoid the scenario that we could get a ClassNotFoundException
comment|// when we use customClassLoader to load the class, we create a copy
comment|// of the configuration.
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// reset the service configuration
name|setConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|config
operator|.
name|setClassLoader
argument_list|(
name|customClassLoader
argument_list|)
expr_stmt|;
name|ClassLoader
name|original
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|customClassLoader
argument_list|)
expr_stmt|;
try|try
block|{
name|wrapped
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|original
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|ClassLoader
name|original
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|customClassLoader
argument_list|)
expr_stmt|;
try|try
block|{
name|wrapped
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|original
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|ClassLoader
name|original
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|customClassLoader
argument_list|)
expr_stmt|;
try|try
block|{
name|wrapped
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|original
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|initializeApplication ( ApplicationInitializationContext initAppContext)
specifier|public
name|void
name|initializeApplication
parameter_list|(
name|ApplicationInitializationContext
name|initAppContext
parameter_list|)
block|{
name|ClassLoader
name|original
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|customClassLoader
argument_list|)
expr_stmt|;
try|try
block|{
name|wrapped
operator|.
name|initializeApplication
argument_list|(
name|initAppContext
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|original
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|stopApplication (ApplicationTerminationContext stopAppContext)
specifier|public
name|void
name|stopApplication
parameter_list|(
name|ApplicationTerminationContext
name|stopAppContext
parameter_list|)
block|{
name|ClassLoader
name|original
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|customClassLoader
argument_list|)
expr_stmt|;
try|try
block|{
name|wrapped
operator|.
name|stopApplication
argument_list|(
name|stopAppContext
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|original
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getMetaData ()
specifier|public
name|ByteBuffer
name|getMetaData
parameter_list|()
block|{
name|ClassLoader
name|original
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|customClassLoader
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|wrapped
operator|.
name|getMetaData
argument_list|()
return|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|original
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|initializeContainer (ContainerInitializationContext initContainerContext)
specifier|public
name|void
name|initializeContainer
parameter_list|(
name|ContainerInitializationContext
name|initContainerContext
parameter_list|)
block|{
name|ClassLoader
name|original
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|customClassLoader
argument_list|)
expr_stmt|;
try|try
block|{
name|wrapped
operator|.
name|initializeContainer
argument_list|(
name|initContainerContext
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|original
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|stopContainer (ContainerTerminationContext stopContainerContext)
specifier|public
name|void
name|stopContainer
parameter_list|(
name|ContainerTerminationContext
name|stopContainerContext
parameter_list|)
block|{
name|ClassLoader
name|original
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|customClassLoader
argument_list|)
expr_stmt|;
try|try
block|{
name|wrapped
operator|.
name|stopContainer
argument_list|(
name|stopContainerContext
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|original
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setRecoveryPath (Path recoveryPath)
specifier|public
name|void
name|setRecoveryPath
parameter_list|(
name|Path
name|recoveryPath
parameter_list|)
block|{
name|ClassLoader
name|original
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|customClassLoader
argument_list|)
expr_stmt|;
try|try
block|{
name|wrapped
operator|.
name|setRecoveryPath
argument_list|(
name|recoveryPath
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|original
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getInstance ( Configuration conf, String className, String appClassPath, String[] systemClasses)
specifier|public
specifier|static
name|AuxiliaryServiceWithCustomClassLoader
name|getInstance
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|className
parameter_list|,
name|String
name|appClassPath
parameter_list|,
name|String
index|[]
name|systemClasses
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|ClassLoader
name|customClassLoader
init|=
name|createAuxServiceClassLoader
argument_list|(
name|appClassPath
argument_list|,
name|systemClasses
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|,
literal|true
argument_list|,
name|customClassLoader
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|AuxiliaryService
argument_list|>
name|sClass
init|=
name|clazz
operator|.
name|asSubclass
argument_list|(
name|AuxiliaryService
operator|.
name|class
argument_list|)
decl_stmt|;
name|AuxiliaryService
name|wrapped
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|sClass
argument_list|,
name|conf
argument_list|)
decl_stmt|;
return|return
operator|new
name|AuxiliaryServiceWithCustomClassLoader
argument_list|(
name|className
operator|+
literal|" with custom class loader"
argument_list|,
name|wrapped
argument_list|,
name|customClassLoader
argument_list|)
return|;
block|}
DECL|method|createAuxServiceClassLoader ( final String appClasspath, final String[] systemClasses)
specifier|private
specifier|static
name|ClassLoader
name|createAuxServiceClassLoader
parameter_list|(
specifier|final
name|String
name|appClasspath
parameter_list|,
specifier|final
name|String
index|[]
name|systemClasses
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|ClassLoader
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClassLoader
name|run
parameter_list|()
throws|throws
name|MalformedURLException
block|{
return|return
operator|new
name|ApplicationClassLoader
argument_list|(
name|appClasspath
argument_list|,
name|AuxServices
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|systemClasses
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PrivilegedActionException
name|e
parameter_list|)
block|{
name|Throwable
name|t
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|MalformedURLException
condition|)
block|{
throw|throw
operator|(
name|MalformedURLException
operator|)
name|t
throw|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

