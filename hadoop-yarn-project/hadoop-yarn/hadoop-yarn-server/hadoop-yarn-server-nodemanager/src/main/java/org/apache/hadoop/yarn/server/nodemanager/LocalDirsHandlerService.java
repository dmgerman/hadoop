begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalDirAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DirectoryCollection
operator|.
name|DirsChangeListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|metrics
operator|.
name|NodeManagerMetrics
import|;
end_import

begin_comment
comment|/**  * The class which provides functionality of checking the health of the local  * directories of a node. This specifically manages nodemanager-local-dirs and  * nodemanager-log-dirs by periodically checking their health.  */
end_comment

begin_class
DECL|class|LocalDirsHandlerService
specifier|public
class|class
name|LocalDirsHandlerService
extends|extends
name|AbstractService
block|{
DECL|field|LOG
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LocalDirsHandlerService
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Timer used to schedule disk health monitoring code execution */
DECL|field|dirsHandlerScheduler
specifier|private
name|Timer
name|dirsHandlerScheduler
decl_stmt|;
DECL|field|diskHealthCheckInterval
specifier|private
name|long
name|diskHealthCheckInterval
decl_stmt|;
DECL|field|isDiskHealthCheckerEnabled
specifier|private
name|boolean
name|isDiskHealthCheckerEnabled
decl_stmt|;
comment|/**    * Minimum fraction of disks to be healthy for the node to be healthy in    * terms of disks. This applies to nm-local-dirs and nm-log-dirs.    */
DECL|field|minNeededHealthyDisksFactor
specifier|private
name|float
name|minNeededHealthyDisksFactor
decl_stmt|;
DECL|field|monitoringTimerTask
specifier|private
name|MonitoringTimerTask
name|monitoringTimerTask
decl_stmt|;
comment|/** Local dirs to store localized files in */
DECL|field|localDirs
specifier|private
name|DirectoryCollection
name|localDirs
init|=
literal|null
decl_stmt|;
comment|/** storage for container logs*/
DECL|field|logDirs
specifier|private
name|DirectoryCollection
name|logDirs
init|=
literal|null
decl_stmt|;
comment|/**    * Everybody should go through this LocalDirAllocator object for read/write    * of any local path corresponding to {@link YarnConfiguration#NM_LOCAL_DIRS}    * instead of creating his/her own LocalDirAllocator objects    */
DECL|field|localDirsAllocator
specifier|private
name|LocalDirAllocator
name|localDirsAllocator
decl_stmt|;
comment|/**    * Everybody should go through this LocalDirAllocator object for read/write    * of any local path corresponding to {@link YarnConfiguration#NM_LOG_DIRS}    * instead of creating his/her own LocalDirAllocator objects    */
DECL|field|logDirsAllocator
specifier|private
name|LocalDirAllocator
name|logDirsAllocator
decl_stmt|;
comment|/** when disk health checking code was last run */
DECL|field|lastDisksCheckTime
specifier|private
name|long
name|lastDisksCheckTime
decl_stmt|;
DECL|field|FILE_SCHEME
specifier|private
specifier|static
name|String
name|FILE_SCHEME
init|=
literal|"file"
decl_stmt|;
DECL|field|nodeManagerMetrics
specifier|private
name|NodeManagerMetrics
name|nodeManagerMetrics
init|=
literal|null
decl_stmt|;
comment|/**    * Class which is used by the {@link Timer} class to periodically execute the    * disks' health checker code.    */
DECL|class|MonitoringTimerTask
specifier|private
specifier|final
class|class
name|MonitoringTimerTask
extends|extends
name|TimerTask
block|{
DECL|method|MonitoringTimerTask (Configuration conf)
specifier|public
name|MonitoringTimerTask
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|YarnRuntimeException
block|{
name|float
name|maxUsableSpacePercentagePerDisk
init|=
name|conf
operator|.
name|getFloat
argument_list|(
name|YarnConfiguration
operator|.
name|NM_MAX_PER_DISK_UTILIZATION_PERCENTAGE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_MAX_PER_DISK_UTILIZATION_PERCENTAGE
argument_list|)
decl_stmt|;
name|long
name|minFreeSpacePerDiskMB
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_MIN_PER_DISK_FREE_SPACE_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_MIN_PER_DISK_FREE_SPACE_MB
argument_list|)
decl_stmt|;
name|localDirs
operator|=
operator|new
name|DirectoryCollection
argument_list|(
name|validatePaths
argument_list|(
name|conf
operator|.
name|getTrimmedStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|)
argument_list|)
argument_list|,
name|maxUsableSpacePercentagePerDisk
argument_list|,
name|minFreeSpacePerDiskMB
argument_list|)
expr_stmt|;
name|logDirs
operator|=
operator|new
name|DirectoryCollection
argument_list|(
name|validatePaths
argument_list|(
name|conf
operator|.
name|getTrimmedStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|)
argument_list|)
argument_list|,
name|maxUsableSpacePercentagePerDisk
argument_list|,
name|minFreeSpacePerDiskMB
argument_list|)
expr_stmt|;
name|localDirsAllocator
operator|=
operator|new
name|LocalDirAllocator
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|)
expr_stmt|;
name|logDirsAllocator
operator|=
operator|new
name|LocalDirAllocator
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|checkDirs
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|LocalDirsHandlerService ()
specifier|public
name|LocalDirsHandlerService
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|LocalDirsHandlerService (NodeManagerMetrics nodeManagerMetrics)
specifier|public
name|LocalDirsHandlerService
parameter_list|(
name|NodeManagerMetrics
name|nodeManagerMetrics
parameter_list|)
block|{
name|super
argument_list|(
name|LocalDirsHandlerService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeManagerMetrics
operator|=
name|nodeManagerMetrics
expr_stmt|;
block|}
comment|/**    * Method which initializes the timertask and its interval time.    *     */
annotation|@
name|Override
DECL|method|serviceInit (Configuration config)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|config
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Clone the configuration as we may do modifications to dirs-list
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|diskHealthCheckInterval
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DISK_HEALTH_CHECK_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_DISK_HEALTH_CHECK_INTERVAL_MS
argument_list|)
expr_stmt|;
name|monitoringTimerTask
operator|=
operator|new
name|MonitoringTimerTask
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|isDiskHealthCheckerEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DISK_HEALTH_CHECK_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|minNeededHealthyDisksFactor
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|YarnConfiguration
operator|.
name|NM_MIN_HEALTHY_DISKS_FRACTION
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_MIN_HEALTHY_DISKS_FRACTION
argument_list|)
expr_stmt|;
name|lastDisksCheckTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|FileContext
name|localFs
decl_stmt|;
try|try
block|{
name|localFs
operator|=
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Unable to get the local filesystem"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|FsPermission
name|perm
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
decl_stmt|;
name|boolean
name|createSucceeded
init|=
name|localDirs
operator|.
name|createNonExistentDirs
argument_list|(
name|localFs
argument_list|,
name|perm
argument_list|)
decl_stmt|;
name|createSucceeded
operator|&=
name|logDirs
operator|.
name|createNonExistentDirs
argument_list|(
name|localFs
argument_list|,
name|perm
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|createSucceeded
condition|)
block|{
name|updateDirsAfterTest
argument_list|()
expr_stmt|;
block|}
comment|// Check the disk health immediately to weed out bad directories
comment|// before other init code attempts to use them.
name|checkDirs
argument_list|()
expr_stmt|;
block|}
comment|/**    * Method used to start the disk health monitoring, if enabled.    */
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|isDiskHealthCheckerEnabled
condition|)
block|{
name|dirsHandlerScheduler
operator|=
operator|new
name|Timer
argument_list|(
literal|"DiskHealthMonitor-Timer"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dirsHandlerScheduler
operator|.
name|scheduleAtFixedRate
argument_list|(
name|monitoringTimerTask
argument_list|,
name|diskHealthCheckInterval
argument_list|,
name|diskHealthCheckInterval
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
comment|/**    * Method used to terminate the disk health monitoring service.    */
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|dirsHandlerScheduler
operator|!=
literal|null
condition|)
block|{
name|dirsHandlerScheduler
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
DECL|method|registerLocalDirsChangeListener (DirsChangeListener listener)
specifier|public
name|void
name|registerLocalDirsChangeListener
parameter_list|(
name|DirsChangeListener
name|listener
parameter_list|)
block|{
name|localDirs
operator|.
name|registerDirsChangeListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|registerLogDirsChangeListener (DirsChangeListener listener)
specifier|public
name|void
name|registerLogDirsChangeListener
parameter_list|(
name|DirsChangeListener
name|listener
parameter_list|)
block|{
name|logDirs
operator|.
name|registerDirsChangeListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|deregisterLocalDirsChangeListener (DirsChangeListener listener)
specifier|public
name|void
name|deregisterLocalDirsChangeListener
parameter_list|(
name|DirsChangeListener
name|listener
parameter_list|)
block|{
name|localDirs
operator|.
name|deregisterDirsChangeListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|deregisterLogDirsChangeListener (DirsChangeListener listener)
specifier|public
name|void
name|deregisterLogDirsChangeListener
parameter_list|(
name|DirsChangeListener
name|listener
parameter_list|)
block|{
name|logDirs
operator|.
name|deregisterDirsChangeListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return the good/valid local directories based on disks' health    */
DECL|method|getLocalDirs ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLocalDirs
parameter_list|()
block|{
return|return
name|localDirs
operator|.
name|getGoodDirs
argument_list|()
return|;
block|}
comment|/**    * @return the good/valid log directories based on disks' health    */
DECL|method|getLogDirs ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLogDirs
parameter_list|()
block|{
return|return
name|logDirs
operator|.
name|getGoodDirs
argument_list|()
return|;
block|}
comment|/**    * @return the local directories which have no disk space    */
DECL|method|getDiskFullLocalDirs ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDiskFullLocalDirs
parameter_list|()
block|{
return|return
name|localDirs
operator|.
name|getFullDirs
argument_list|()
return|;
block|}
comment|/**    * @return the log directories that have no disk space    */
DECL|method|getDiskFullLogDirs ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDiskFullLogDirs
parameter_list|()
block|{
return|return
name|logDirs
operator|.
name|getFullDirs
argument_list|()
return|;
block|}
comment|/**    * Function to get the local dirs which should be considered for reading    * existing files on disk. Contains the good local dirs and the local dirs    * that have reached the disk space limit    *    * @return the local dirs which should be considered for reading    */
DECL|method|getLocalDirsForRead ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLocalDirsForRead
parameter_list|()
block|{
return|return
name|DirectoryCollection
operator|.
name|concat
argument_list|(
name|localDirs
operator|.
name|getGoodDirs
argument_list|()
argument_list|,
name|localDirs
operator|.
name|getFullDirs
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Function to get the local dirs which should be considered when cleaning up    * resources. Contains the good local dirs and the local dirs that have reached    * the disk space limit    *    * @return the local dirs which should be considered for cleaning up    */
DECL|method|getLocalDirsForCleanup ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLocalDirsForCleanup
parameter_list|()
block|{
return|return
name|DirectoryCollection
operator|.
name|concat
argument_list|(
name|localDirs
operator|.
name|getGoodDirs
argument_list|()
argument_list|,
name|localDirs
operator|.
name|getFullDirs
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Function to get the log dirs which should be considered for reading    * existing files on disk. Contains the good log dirs and the log dirs that    * have reached the disk space limit    *    * @return the log dirs which should be considered for reading    */
DECL|method|getLogDirsForRead ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLogDirsForRead
parameter_list|()
block|{
return|return
name|DirectoryCollection
operator|.
name|concat
argument_list|(
name|logDirs
operator|.
name|getGoodDirs
argument_list|()
argument_list|,
name|logDirs
operator|.
name|getFullDirs
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Function to get the log dirs which should be considered when cleaning up    * resources. Contains the good log dirs and the log dirs that have reached    * the disk space limit    *    * @return the log dirs which should be considered for cleaning up    */
DECL|method|getLogDirsForCleanup ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLogDirsForCleanup
parameter_list|()
block|{
return|return
name|DirectoryCollection
operator|.
name|concat
argument_list|(
name|logDirs
operator|.
name|getGoodDirs
argument_list|()
argument_list|,
name|logDirs
operator|.
name|getFullDirs
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Function to generate a report on the state of the disks.    *    * @param listGoodDirs    *          flag to determine whether the report should report the state of    *          good dirs or failed dirs    * @return the health report of nm-local-dirs and nm-log-dirs    */
DECL|method|getDisksHealthReport (boolean listGoodDirs)
specifier|public
name|String
name|getDisksHealthReport
parameter_list|(
name|boolean
name|listGoodDirs
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isDiskHealthCheckerEnabled
condition|)
block|{
return|return
literal|""
return|;
block|}
name|StringBuilder
name|report
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|failedLocalDirsList
init|=
name|localDirs
operator|.
name|getFailedDirs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|failedLogDirsList
init|=
name|logDirs
operator|.
name|getFailedDirs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|goodLocalDirsList
init|=
name|localDirs
operator|.
name|getGoodDirs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|goodLogDirsList
init|=
name|logDirs
operator|.
name|getGoodDirs
argument_list|()
decl_stmt|;
name|int
name|numLocalDirs
init|=
name|goodLocalDirsList
operator|.
name|size
argument_list|()
operator|+
name|failedLocalDirsList
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numLogDirs
init|=
name|goodLogDirsList
operator|.
name|size
argument_list|()
operator|+
name|failedLogDirsList
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|listGoodDirs
condition|)
block|{
if|if
condition|(
operator|!
name|failedLocalDirsList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|report
operator|.
name|append
argument_list|(
name|failedLocalDirsList
operator|.
name|size
argument_list|()
operator|+
literal|"/"
operator|+
name|numLocalDirs
operator|+
literal|" local-dirs are bad: "
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|failedLocalDirsList
argument_list|)
operator|+
literal|"; "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|failedLogDirsList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|report
operator|.
name|append
argument_list|(
name|failedLogDirsList
operator|.
name|size
argument_list|()
operator|+
literal|"/"
operator|+
name|numLogDirs
operator|+
literal|" log-dirs are bad: "
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|failedLogDirsList
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|report
operator|.
name|append
argument_list|(
name|goodLocalDirsList
operator|.
name|size
argument_list|()
operator|+
literal|"/"
operator|+
name|numLocalDirs
operator|+
literal|" local-dirs are good: "
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|goodLocalDirsList
argument_list|)
operator|+
literal|"; "
argument_list|)
expr_stmt|;
name|report
operator|.
name|append
argument_list|(
name|goodLogDirsList
operator|.
name|size
argument_list|()
operator|+
literal|"/"
operator|+
name|numLogDirs
operator|+
literal|" log-dirs are good: "
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|goodLogDirsList
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|report
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * The minimum fraction of number of disks needed to be healthy for a node to    * be considered healthy in terms of disks is configured using    * {@link YarnConfiguration#NM_MIN_HEALTHY_DISKS_FRACTION}, with a default    * value of {@link YarnConfiguration#DEFAULT_NM_MIN_HEALTHY_DISKS_FRACTION}.    * @return<em>false</em> if either (a) more than the allowed percentage of    * nm-local-dirs failed or (b) more than the allowed percentage of    * nm-log-dirs failed.    */
DECL|method|areDisksHealthy ()
specifier|public
name|boolean
name|areDisksHealthy
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isDiskHealthCheckerEnabled
condition|)
block|{
return|return
literal|true
return|;
block|}
name|int
name|goodDirs
init|=
name|getLocalDirs
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|failedDirs
init|=
name|localDirs
operator|.
name|getFailedDirs
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|totalConfiguredDirs
init|=
name|goodDirs
operator|+
name|failedDirs
decl_stmt|;
if|if
condition|(
name|goodDirs
operator|/
operator|(
name|float
operator|)
name|totalConfiguredDirs
operator|<
name|minNeededHealthyDisksFactor
condition|)
block|{
return|return
literal|false
return|;
comment|// Not enough healthy local-dirs
block|}
name|goodDirs
operator|=
name|getLogDirs
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|failedDirs
operator|=
name|logDirs
operator|.
name|getFailedDirs
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|totalConfiguredDirs
operator|=
name|goodDirs
operator|+
name|failedDirs
expr_stmt|;
if|if
condition|(
name|goodDirs
operator|/
operator|(
name|float
operator|)
name|totalConfiguredDirs
operator|<
name|minNeededHealthyDisksFactor
condition|)
block|{
return|return
literal|false
return|;
comment|// Not enough healthy log-dirs
block|}
return|return
literal|true
return|;
block|}
DECL|method|getLastDisksCheckTime ()
specifier|public
name|long
name|getLastDisksCheckTime
parameter_list|()
block|{
return|return
name|lastDisksCheckTime
return|;
block|}
comment|/**    * Set good local dirs and good log dirs in the configuration so that the    * LocalDirAllocator objects will use this updated configuration only.    */
DECL|method|updateDirsAfterTest ()
specifier|private
name|void
name|updateDirsAfterTest
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|localDirs
init|=
name|getLocalDirs
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|localDirs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|localDirs
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|logDirs
init|=
name|getLogDirs
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|logDirs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|logDirs
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|areDisksHealthy
argument_list|()
condition|)
block|{
comment|// Just log.
name|LOG
operator|.
name|error
argument_list|(
literal|"Most of the disks failed. "
operator|+
name|getDisksHealthReport
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|logDiskStatus (boolean newDiskFailure, boolean diskTurnedGood)
specifier|private
name|void
name|logDiskStatus
parameter_list|(
name|boolean
name|newDiskFailure
parameter_list|,
name|boolean
name|diskTurnedGood
parameter_list|)
block|{
if|if
condition|(
name|newDiskFailure
condition|)
block|{
name|String
name|report
init|=
name|getDisksHealthReport
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Disk(s) failed: "
operator|+
name|report
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|diskTurnedGood
condition|)
block|{
name|String
name|report
init|=
name|getDisksHealthReport
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Disk(s) turned good: "
operator|+
name|report
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkDirs ()
specifier|private
name|void
name|checkDirs
parameter_list|()
block|{
name|boolean
name|disksStatusChange
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|failedLocalDirsPreCheck
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|localDirs
operator|.
name|getFailedDirs
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|failedLogDirsPreCheck
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|logDirs
operator|.
name|getFailedDirs
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|localDirs
operator|.
name|checkDirs
argument_list|()
condition|)
block|{
name|disksStatusChange
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|logDirs
operator|.
name|checkDirs
argument_list|()
condition|)
block|{
name|disksStatusChange
operator|=
literal|true
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|failedLocalDirsPostCheck
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|localDirs
operator|.
name|getFailedDirs
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|failedLogDirsPostCheck
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|logDirs
operator|.
name|getFailedDirs
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|disksFailed
init|=
literal|false
decl_stmt|;
name|boolean
name|disksTurnedGood
init|=
literal|false
decl_stmt|;
name|disksFailed
operator|=
name|disksTurnedBad
argument_list|(
name|failedLocalDirsPreCheck
argument_list|,
name|failedLocalDirsPostCheck
argument_list|)
expr_stmt|;
name|disksTurnedGood
operator|=
name|disksTurnedGood
argument_list|(
name|failedLocalDirsPreCheck
argument_list|,
name|failedLocalDirsPostCheck
argument_list|)
expr_stmt|;
comment|// skip check if we have new failed or good local dirs since we're going to
comment|// log anyway
if|if
condition|(
operator|!
name|disksFailed
condition|)
block|{
name|disksFailed
operator|=
name|disksTurnedBad
argument_list|(
name|failedLogDirsPreCheck
argument_list|,
name|failedLogDirsPostCheck
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|disksTurnedGood
condition|)
block|{
name|disksTurnedGood
operator|=
name|disksTurnedGood
argument_list|(
name|failedLogDirsPreCheck
argument_list|,
name|failedLogDirsPostCheck
argument_list|)
expr_stmt|;
block|}
name|logDiskStatus
argument_list|(
name|disksFailed
argument_list|,
name|disksTurnedGood
argument_list|)
expr_stmt|;
if|if
condition|(
name|disksStatusChange
condition|)
block|{
name|updateDirsAfterTest
argument_list|()
expr_stmt|;
block|}
name|updateMetrics
argument_list|()
expr_stmt|;
name|lastDisksCheckTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
DECL|method|disksTurnedBad (Set<String> preCheckFailedDirs, Set<String> postCheckDirs)
specifier|private
name|boolean
name|disksTurnedBad
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|preCheckFailedDirs
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|postCheckDirs
parameter_list|)
block|{
name|boolean
name|disksFailed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|dir
range|:
name|postCheckDirs
control|)
block|{
if|if
condition|(
operator|!
name|preCheckFailedDirs
operator|.
name|contains
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|disksFailed
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
return|return
name|disksFailed
return|;
block|}
DECL|method|disksTurnedGood (Set<String> preCheckDirs, Set<String> postCheckDirs)
specifier|private
name|boolean
name|disksTurnedGood
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|preCheckDirs
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|postCheckDirs
parameter_list|)
block|{
name|boolean
name|disksTurnedGood
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|dir
range|:
name|preCheckDirs
control|)
block|{
if|if
condition|(
operator|!
name|postCheckDirs
operator|.
name|contains
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|disksTurnedGood
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
return|return
name|disksTurnedGood
return|;
block|}
DECL|method|getLocalPathForWrite (String pathStr)
specifier|public
name|Path
name|getLocalPathForWrite
parameter_list|(
name|String
name|pathStr
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|localDirsAllocator
operator|.
name|getLocalPathForWrite
argument_list|(
name|pathStr
argument_list|,
name|getConfig
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getLocalPathForWrite (String pathStr, long size, boolean checkWrite)
specifier|public
name|Path
name|getLocalPathForWrite
parameter_list|(
name|String
name|pathStr
parameter_list|,
name|long
name|size
parameter_list|,
name|boolean
name|checkWrite
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|localDirsAllocator
operator|.
name|getLocalPathForWrite
argument_list|(
name|pathStr
argument_list|,
name|size
argument_list|,
name|getConfig
argument_list|()
argument_list|,
name|checkWrite
argument_list|)
return|;
block|}
DECL|method|getLogPathForWrite (String pathStr, boolean checkWrite)
specifier|public
name|Path
name|getLogPathForWrite
parameter_list|(
name|String
name|pathStr
parameter_list|,
name|boolean
name|checkWrite
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|logDirsAllocator
operator|.
name|getLocalPathForWrite
argument_list|(
name|pathStr
argument_list|,
name|LocalDirAllocator
operator|.
name|SIZE_UNKNOWN
argument_list|,
name|getConfig
argument_list|()
argument_list|,
name|checkWrite
argument_list|)
return|;
block|}
DECL|method|getLogPathToRead (String pathStr)
specifier|public
name|Path
name|getLogPathToRead
parameter_list|(
name|String
name|pathStr
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|logDirsAllocator
operator|.
name|getLocalPathToRead
argument_list|(
name|pathStr
argument_list|,
name|getConfig
argument_list|()
argument_list|)
return|;
block|}
DECL|method|validatePaths (String[] paths)
specifier|public
specifier|static
name|String
index|[]
name|validatePaths
parameter_list|(
name|String
index|[]
name|paths
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|validPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
try|try
block|{
name|URI
name|uriPath
init|=
operator|(
operator|new
name|Path
argument_list|(
name|paths
index|[
name|i
index|]
argument_list|)
operator|)
operator|.
name|toUri
argument_list|()
decl_stmt|;
if|if
condition|(
name|uriPath
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
operator|||
name|uriPath
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
name|FILE_SCHEME
argument_list|)
condition|)
block|{
name|validPaths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|uriPath
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|paths
index|[
name|i
index|]
operator|+
literal|" is not a valid path. Path should be with "
operator|+
name|FILE_SCHEME
operator|+
literal|" scheme or without scheme"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|paths
index|[
name|i
index|]
operator|+
literal|" is not a valid path. Path should be with "
operator|+
name|FILE_SCHEME
operator|+
literal|" scheme or without scheme"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|paths
index|[
name|i
index|]
operator|+
literal|" is not a valid path. Path should be with "
operator|+
name|FILE_SCHEME
operator|+
literal|" scheme or without scheme"
argument_list|)
throw|;
block|}
block|}
name|String
index|[]
name|arrValidPaths
init|=
operator|new
name|String
index|[
name|validPaths
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|validPaths
operator|.
name|toArray
argument_list|(
name|arrValidPaths
argument_list|)
expr_stmt|;
return|return
name|arrValidPaths
return|;
block|}
DECL|method|updateMetrics ()
specifier|protected
name|void
name|updateMetrics
parameter_list|()
block|{
if|if
condition|(
name|nodeManagerMetrics
operator|!=
literal|null
condition|)
block|{
name|nodeManagerMetrics
operator|.
name|setBadLocalDirs
argument_list|(
name|localDirs
operator|.
name|getFailedDirs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|nodeManagerMetrics
operator|.
name|setBadLogDirs
argument_list|(
name|logDirs
operator|.
name|getFailedDirs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|nodeManagerMetrics
operator|.
name|setGoodLocalDirsDiskUtilizationPerc
argument_list|(
name|localDirs
operator|.
name|getGoodDirsDiskUtilizationPercentage
argument_list|()
argument_list|)
expr_stmt|;
name|nodeManagerMetrics
operator|.
name|setGoodLogDirsDiskUtilizationPerc
argument_list|(
name|logDirs
operator|.
name|getGoodDirsDiskUtilizationPercentage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

