begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.deletion.task
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|deletion
operator|.
name|task
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnsupportedFileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|DeletionServiceDeleteTaskProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DeletionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|executor
operator|.
name|DeletionAsUserContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * {@link DeletionTask} handling the removal of files (and directories).  */
end_comment

begin_class
DECL|class|FileDeletionTask
specifier|public
class|class
name|FileDeletionTask
extends|extends
name|DeletionTask
implements|implements
name|Runnable
block|{
DECL|field|subDir
specifier|private
specifier|final
name|Path
name|subDir
decl_stmt|;
DECL|field|baseDirs
specifier|private
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|baseDirs
decl_stmt|;
DECL|field|lfs
specifier|private
specifier|static
specifier|final
name|FileContext
name|lfs
init|=
name|getLfs
argument_list|()
decl_stmt|;
DECL|method|getLfs ()
specifier|private
specifier|static
name|FileContext
name|getLfs
parameter_list|()
block|{
try|try
block|{
return|return
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedFileSystemException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Construct a FileDeletionTask with the default INVALID_TASK_ID.    *    * @param deletionService     the {@link DeletionService}.    * @param user                the user deleting the file.    * @param subDir              the subdirectory to delete.    * @param baseDirs            the base directories containing the subdir.    */
DECL|method|FileDeletionTask (DeletionService deletionService, String user, Path subDir, List<Path> baseDirs)
specifier|public
name|FileDeletionTask
parameter_list|(
name|DeletionService
name|deletionService
parameter_list|,
name|String
name|user
parameter_list|,
name|Path
name|subDir
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|baseDirs
parameter_list|)
block|{
name|this
argument_list|(
name|INVALID_TASK_ID
argument_list|,
name|deletionService
argument_list|,
name|user
argument_list|,
name|subDir
argument_list|,
name|baseDirs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a FileDeletionTask with the default INVALID_TASK_ID.    *    * @param taskId              the ID of the task, if previously set.    * @param deletionService     the {@link DeletionService}.    * @param user                the user deleting the file.    * @param subDir              the subdirectory to delete.    * @param baseDirs            the base directories containing the subdir.    */
DECL|method|FileDeletionTask (int taskId, DeletionService deletionService, String user, Path subDir, List<Path> baseDirs)
specifier|public
name|FileDeletionTask
parameter_list|(
name|int
name|taskId
parameter_list|,
name|DeletionService
name|deletionService
parameter_list|,
name|String
name|user
parameter_list|,
name|Path
name|subDir
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|baseDirs
parameter_list|)
block|{
name|super
argument_list|(
name|taskId
argument_list|,
name|deletionService
argument_list|,
name|user
argument_list|,
name|DeletionTaskType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|this
operator|.
name|subDir
operator|=
name|subDir
expr_stmt|;
name|this
operator|.
name|baseDirs
operator|=
name|baseDirs
expr_stmt|;
block|}
comment|/**    * Get the subdirectory to delete.    *    * @return the subDir for the FileDeletionTask.    */
DECL|method|getSubDir ()
specifier|public
name|Path
name|getSubDir
parameter_list|()
block|{
return|return
name|this
operator|.
name|subDir
return|;
block|}
comment|/**    * Get the base directories containing the subdirectory.    *    * @return the base directories for the FileDeletionTask.    */
DECL|method|getBaseDirs ()
specifier|public
name|List
argument_list|<
name|Path
argument_list|>
name|getBaseDirs
parameter_list|()
block|{
return|return
name|this
operator|.
name|baseDirs
return|;
block|}
comment|/**    * Delete the specified file/directory as the specified user.    */
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Running DeletionTask : %s"
argument_list|,
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
name|boolean
name|error
init|=
literal|false
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|getUser
argument_list|()
condition|)
block|{
if|if
condition|(
name|baseDirs
operator|==
literal|null
operator|||
name|baseDirs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"NM deleting absolute path : "
operator|+
name|subDir
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|lfs
operator|.
name|delete
argument_list|(
name|subDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|error
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to delete "
operator|+
name|subDir
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Path
name|baseDir
range|:
name|baseDirs
control|)
block|{
name|Path
name|del
init|=
name|subDir
operator|==
literal|null
condition|?
name|baseDir
else|:
operator|new
name|Path
argument_list|(
name|baseDir
argument_list|,
name|subDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"NM deleting path : "
operator|+
name|del
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|lfs
operator|.
name|delete
argument_list|(
name|del
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|error
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to delete "
operator|+
name|subDir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting path: ["
operator|+
name|subDir
operator|+
literal|"] as user: ["
operator|+
name|getUser
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|baseDirs
operator|==
literal|null
operator|||
name|baseDirs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|getDeletionService
argument_list|()
operator|.
name|getContainerExecutor
argument_list|()
operator|.
name|deleteAsUser
argument_list|(
operator|new
name|DeletionAsUserContext
operator|.
name|Builder
argument_list|()
operator|.
name|setUser
argument_list|(
name|getUser
argument_list|()
argument_list|)
operator|.
name|setSubDir
argument_list|(
name|subDir
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getDeletionService
argument_list|()
operator|.
name|getContainerExecutor
argument_list|()
operator|.
name|deleteAsUser
argument_list|(
operator|new
name|DeletionAsUserContext
operator|.
name|Builder
argument_list|()
operator|.
name|setUser
argument_list|(
name|getUser
argument_list|()
argument_list|)
operator|.
name|setSubDir
argument_list|(
name|subDir
argument_list|)
operator|.
name|setBasedirs
argument_list|(
name|baseDirs
operator|.
name|toArray
argument_list|(
operator|new
name|Path
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
name|error
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to delete as user "
operator|+
name|getUser
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|error
condition|)
block|{
name|setSuccess
argument_list|(
operator|!
name|error
argument_list|)
expr_stmt|;
block|}
name|deletionTaskFinished
argument_list|()
expr_stmt|;
block|}
comment|/**    * Convert the FileDeletionTask to a String representation.    *    * @return String representation of the FileDeletionTask.    */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"FileDeletionTask :"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"  id : "
argument_list|)
operator|.
name|append
argument_list|(
name|getTaskId
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"  user : "
argument_list|)
operator|.
name|append
argument_list|(
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"  subDir : "
argument_list|)
operator|.
name|append
argument_list|(
name|subDir
operator|==
literal|null
condition|?
literal|"null"
else|:
name|subDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"  baseDir : "
argument_list|)
expr_stmt|;
if|if
condition|(
name|baseDirs
operator|==
literal|null
operator|||
name|baseDirs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Path
name|baseDir
range|:
name|baseDirs
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|baseDir
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
return|;
block|}
comment|/**    * Convert the FileDeletionTask to the Protobuf representation for storing    * in the state store and recovery.    *    * @return the protobuf representation of the FileDeletionTask.    */
DECL|method|convertDeletionTaskToProto ()
specifier|public
name|DeletionServiceDeleteTaskProto
name|convertDeletionTaskToProto
parameter_list|()
block|{
name|DeletionServiceDeleteTaskProto
operator|.
name|Builder
name|builder
init|=
name|getBaseDeletionTaskProtoBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setTaskType
argument_list|(
name|DeletionTaskType
operator|.
name|FILE
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSubDir
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setSubdir
argument_list|(
name|getSubDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getBaseDirs
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Path
name|dir
range|:
name|getBaseDirs
argument_list|()
control|)
block|{
name|builder
operator|.
name|addBasedirs
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

