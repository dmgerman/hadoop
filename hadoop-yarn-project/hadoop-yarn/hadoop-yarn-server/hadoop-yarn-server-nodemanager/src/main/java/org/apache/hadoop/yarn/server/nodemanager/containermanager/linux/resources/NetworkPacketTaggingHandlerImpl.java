begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * *  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements. See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership. The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License. You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  * /  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.resources
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * The network packet tagging handler implementation.  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|NetworkPacketTaggingHandlerImpl
specifier|public
class|class
name|NetworkPacketTaggingHandlerImpl
implements|implements
name|ResourceHandler
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NetworkPacketTaggingHandlerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|cGroupsHandler
specifier|private
specifier|final
name|CGroupsHandler
name|cGroupsHandler
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|tagMappingManager
specifier|private
name|NetworkTagMappingManager
name|tagMappingManager
decl_stmt|;
DECL|method|NetworkPacketTaggingHandlerImpl ( PrivilegedOperationExecutor privilegedOperationExecutor, CGroupsHandler cGroupsHandler)
specifier|public
name|NetworkPacketTaggingHandlerImpl
parameter_list|(
name|PrivilegedOperationExecutor
name|privilegedOperationExecutor
parameter_list|,
name|CGroupsHandler
name|cGroupsHandler
parameter_list|)
block|{
name|this
operator|.
name|cGroupsHandler
operator|=
name|cGroupsHandler
expr_stmt|;
block|}
comment|/**    * Bootstrapping network-tagging-handler - mounts net_cls    * controller.    * @param configuration yarn configuration in use    * @return (potentially empty) list of privileged operations to execute.    * @throws ResourceHandlerException    */
annotation|@
name|Override
DECL|method|bootstrap (Configuration configuration)
specifier|public
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|bootstrap
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|conf
operator|=
name|configuration
expr_stmt|;
name|cGroupsHandler
operator|.
name|initializeCGroupController
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|NET_CLS
argument_list|)
expr_stmt|;
name|this
operator|.
name|tagMappingManager
operator|=
name|createNetworkTagMappingManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|tagMappingManager
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**    * Pre-start hook for network-tagging-handler. A cgroup is created    * and a net_cls classid is generated and written to a cgroup file.    *    * @param container Container being launched    * @return privileged operations for some cgroups operations.    * @throws ResourceHandlerException    */
annotation|@
name|Override
DECL|method|preStart (Container container)
specifier|public
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|preStart
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|String
name|containerIdStr
init|=
name|container
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|classIdStr
init|=
name|this
operator|.
name|tagMappingManager
operator|.
name|getNetworkTagHexID
argument_list|(
name|container
argument_list|)
decl_stmt|;
name|cGroupsHandler
operator|.
name|createCGroup
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|NET_CLS
argument_list|,
name|containerIdStr
argument_list|)
expr_stmt|;
name|cGroupsHandler
operator|.
name|updateCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|NET_CLS
argument_list|,
name|containerIdStr
argument_list|,
name|CGroupsHandler
operator|.
name|CGROUP_PARAM_CLASSID
argument_list|,
name|classIdStr
argument_list|)
expr_stmt|;
comment|//Now create a privileged operation in order to update the tasks file with
comment|//the pid of the running container process (root of process tree). This can
comment|//only be done at the time of launching the container, in a privileged
comment|//executable.
name|String
name|tasksFile
init|=
name|cGroupsHandler
operator|.
name|getPathForCGroupTasks
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|NET_CLS
argument_list|,
name|containerIdStr
argument_list|)
decl_stmt|;
name|String
name|opArg
init|=
operator|new
name|StringBuffer
argument_list|(
name|PrivilegedOperation
operator|.
name|CGROUP_ARG_PREFIX
argument_list|)
operator|.
name|append
argument_list|(
name|tasksFile
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|ops
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ops
operator|.
name|add
argument_list|(
operator|new
name|PrivilegedOperation
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|ADD_PID_TO_CGROUP
argument_list|,
name|opArg
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ops
return|;
block|}
comment|/**    * Reacquires state for a container - reads the classid from the cgroup    * being used for the container being reacquired.    * @param containerId if of the container being reacquired.    * @return (potentially empty) list of privileged operations    * @throws ResourceHandlerException    */
annotation|@
name|Override
DECL|method|reacquireContainer (ContainerId containerId)
specifier|public
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|reacquireContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|updateContainer (Container container)
specifier|public
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|updateContainer
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
return|return
literal|null
return|;
block|}
comment|/**    * Cleanup operation once container is completed - deletes cgroup.    *    * @param containerId of the container that was completed.    * @return a list of PrivilegedOperations.    * @throws ResourceHandlerException    */
annotation|@
name|Override
DECL|method|postComplete (ContainerId containerId)
specifier|public
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|postComplete
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"postComplete for container: "
operator|+
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|cGroupsHandler
operator|.
name|deleteCGroup
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|NET_CLS
argument_list|,
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|teardown ()
specifier|public
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|teardown
parameter_list|()
throws|throws
name|ResourceHandlerException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"teardown(): Nothing to do"
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|createNetworkTagMappingManager ( Configuration conf)
specifier|public
name|NetworkTagMappingManager
name|createNetworkTagMappingManager
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|NetworkTagMappingManagerFactory
operator|.
name|getManager
argument_list|(
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|NetworkPacketTaggingHandlerImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

