begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.resources.gpu
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|gpu
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|ResourceHandlerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|gpu
operator|.
name|GpuDevice
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
operator|.
name|GPU_URI
import|;
end_import

begin_comment
comment|/**  * Allocate GPU resources according to requirements  */
end_comment

begin_class
DECL|class|GpuResourceAllocator
specifier|public
class|class
name|GpuResourceAllocator
block|{
DECL|field|LOG
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GpuResourceAllocator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|allowedGpuDevices
specifier|private
name|Set
argument_list|<
name|GpuDevice
argument_list|>
name|allowedGpuDevices
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|usedDevices
specifier|private
name|Map
argument_list|<
name|GpuDevice
argument_list|,
name|ContainerId
argument_list|>
name|usedDevices
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|nmContext
specifier|private
name|Context
name|nmContext
decl_stmt|;
DECL|method|GpuResourceAllocator (Context ctx)
specifier|public
name|GpuResourceAllocator
parameter_list|(
name|Context
name|ctx
parameter_list|)
block|{
name|this
operator|.
name|nmContext
operator|=
name|ctx
expr_stmt|;
block|}
comment|/**    * Contains allowed and denied devices    * Denied devices will be useful for cgroups devices module to do blacklisting    */
DECL|class|GpuAllocation
specifier|static
class|class
name|GpuAllocation
block|{
DECL|field|allowed
specifier|private
name|Set
argument_list|<
name|GpuDevice
argument_list|>
name|allowed
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
DECL|field|denied
specifier|private
name|Set
argument_list|<
name|GpuDevice
argument_list|>
name|denied
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
DECL|method|GpuAllocation (Set<GpuDevice> allowed, Set<GpuDevice> denied)
name|GpuAllocation
parameter_list|(
name|Set
argument_list|<
name|GpuDevice
argument_list|>
name|allowed
parameter_list|,
name|Set
argument_list|<
name|GpuDevice
argument_list|>
name|denied
parameter_list|)
block|{
if|if
condition|(
name|allowed
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|allowed
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|allowed
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|denied
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|denied
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|denied
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getAllowedGPUs ()
specifier|public
name|Set
argument_list|<
name|GpuDevice
argument_list|>
name|getAllowedGPUs
parameter_list|()
block|{
return|return
name|allowed
return|;
block|}
DECL|method|getDeniedGPUs ()
specifier|public
name|Set
argument_list|<
name|GpuDevice
argument_list|>
name|getDeniedGPUs
parameter_list|()
block|{
return|return
name|denied
return|;
block|}
block|}
comment|/**    * Add GPU to allowed list    * @param gpuDevice gpu device    */
DECL|method|addGpu (GpuDevice gpuDevice)
specifier|public
specifier|synchronized
name|void
name|addGpu
parameter_list|(
name|GpuDevice
name|gpuDevice
parameter_list|)
block|{
name|allowedGpuDevices
operator|.
name|add
argument_list|(
name|gpuDevice
argument_list|)
expr_stmt|;
block|}
DECL|method|getResourceHandlerExceptionMessage (int numRequestedGpuDevices, ContainerId containerId)
specifier|private
name|String
name|getResourceHandlerExceptionMessage
parameter_list|(
name|int
name|numRequestedGpuDevices
parameter_list|,
name|ContainerId
name|containerId
parameter_list|)
block|{
return|return
literal|"Failed to find enough GPUs, requestor="
operator|+
name|containerId
operator|+
literal|", #RequestedGPUs="
operator|+
name|numRequestedGpuDevices
operator|+
literal|", #availableGpus="
operator|+
name|getAvailableGpus
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getAvailableGpus ()
specifier|public
specifier|synchronized
name|int
name|getAvailableGpus
parameter_list|()
block|{
return|return
name|allowedGpuDevices
operator|.
name|size
argument_list|()
operator|-
name|usedDevices
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|recoverAssignedGpus (ContainerId containerId)
specifier|public
specifier|synchronized
name|void
name|recoverAssignedGpus
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|Container
name|c
init|=
name|nmContext
operator|.
name|getContainers
argument_list|()
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|c
condition|)
block|{
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
literal|"This shouldn't happen, cannot find container with id="
operator|+
name|containerId
argument_list|)
throw|;
block|}
for|for
control|(
name|Serializable
name|gpuDeviceSerializable
range|:
name|c
operator|.
name|getResourceMappings
argument_list|()
operator|.
name|getAssignedResources
argument_list|(
name|GPU_URI
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|gpuDeviceSerializable
operator|instanceof
name|GpuDevice
operator|)
condition|)
block|{
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
literal|"Trying to recover device id, however it"
operator|+
literal|" is not GpuDevice, this shouldn't happen"
argument_list|)
throw|;
block|}
name|GpuDevice
name|gpuDevice
init|=
operator|(
name|GpuDevice
operator|)
name|gpuDeviceSerializable
decl_stmt|;
comment|// Make sure it is in allowed GPU device.
if|if
condition|(
operator|!
name|allowedGpuDevices
operator|.
name|contains
argument_list|(
name|gpuDevice
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
literal|"Try to recover device = "
operator|+
name|gpuDevice
operator|+
literal|" however it is not in allowed device list:"
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|allowedGpuDevices
argument_list|)
argument_list|)
throw|;
block|}
comment|// Make sure it is not occupied by anybody else
if|if
condition|(
name|usedDevices
operator|.
name|containsKey
argument_list|(
name|gpuDevice
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
literal|"Try to recover device id = "
operator|+
name|gpuDevice
operator|+
literal|" however it is already assigned to container="
operator|+
name|usedDevices
operator|.
name|get
argument_list|(
name|gpuDevice
argument_list|)
operator|+
literal|", please double check what happened."
argument_list|)
throw|;
block|}
name|usedDevices
operator|.
name|put
argument_list|(
name|gpuDevice
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get number of requested GPUs from resource.    * @param requestedResource requested resource    * @return #gpus.    */
DECL|method|getRequestedGpus (Resource requestedResource)
specifier|public
specifier|static
name|int
name|getRequestedGpus
parameter_list|(
name|Resource
name|requestedResource
parameter_list|)
block|{
try|try
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|requestedResource
operator|.
name|getResourceValue
argument_list|(
name|GPU_URI
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
comment|/**    * Assign GPU to requestor    * @param container container to allocate    * @return allocation results.    * @throws ResourceHandlerException When failed to assign GPUs.    */
DECL|method|assignGpus (Container container)
specifier|public
specifier|synchronized
name|GpuAllocation
name|assignGpus
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|Resource
name|requestedResource
init|=
name|container
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|container
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|int
name|numRequestedGpuDevices
init|=
name|getRequestedGpus
argument_list|(
name|requestedResource
argument_list|)
decl_stmt|;
comment|// Assign Gpus to container if requested some.
if|if
condition|(
name|numRequestedGpuDevices
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|numRequestedGpuDevices
operator|>
name|getAvailableGpus
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
name|getResourceHandlerExceptionMessage
argument_list|(
name|numRequestedGpuDevices
argument_list|,
name|containerId
argument_list|)
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|GpuDevice
argument_list|>
name|assignedGpus
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|GpuDevice
name|gpu
range|:
name|allowedGpuDevices
control|)
block|{
if|if
condition|(
operator|!
name|usedDevices
operator|.
name|containsKey
argument_list|(
name|gpu
argument_list|)
condition|)
block|{
name|usedDevices
operator|.
name|put
argument_list|(
name|gpu
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|assignedGpus
operator|.
name|add
argument_list|(
name|gpu
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignedGpus
operator|.
name|size
argument_list|()
operator|==
name|numRequestedGpuDevices
condition|)
block|{
break|break;
block|}
block|}
block|}
comment|// Record in state store if we allocated anything
if|if
condition|(
operator|!
name|assignedGpus
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
comment|// Update state store.
name|nmContext
operator|.
name|getNMStateStore
argument_list|()
operator|.
name|storeAssignedResources
argument_list|(
name|container
argument_list|,
name|GPU_URI
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|assignedGpus
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|cleanupAssignGpus
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|GpuAllocation
argument_list|(
name|assignedGpus
argument_list|,
name|Sets
operator|.
name|difference
argument_list|(
name|allowedGpuDevices
argument_list|,
name|assignedGpus
argument_list|)
argument_list|)
return|;
block|}
return|return
operator|new
name|GpuAllocation
argument_list|(
literal|null
argument_list|,
name|allowedGpuDevices
argument_list|)
return|;
block|}
comment|/**    * Clean up all Gpus assigned to containerId    * @param containerId containerId    */
DECL|method|cleanupAssignGpus (ContainerId containerId)
specifier|public
specifier|synchronized
name|void
name|cleanupAssignGpus
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|GpuDevice
argument_list|,
name|ContainerId
argument_list|>
argument_list|>
name|iter
init|=
name|usedDevices
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getDeviceAllocationMapping ()
specifier|public
specifier|synchronized
name|Map
argument_list|<
name|GpuDevice
argument_list|,
name|ContainerId
argument_list|>
name|getDeviceAllocationMapping
parameter_list|()
block|{
return|return
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|usedDevices
argument_list|)
return|;
block|}
block|}
end_class

end_unit

