begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|LocalResourcePBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|LocalResourceProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|LocalizedResourceProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DeletionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ResourceEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ResourceEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ResourceRecoveredEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ResourceReleaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * A collection of {@link LocalizedResource}s all of same  * {@link LocalResourceVisibility}.  *   */
end_comment

begin_class
DECL|class|LocalResourcesTrackerImpl
class|class
name|LocalResourcesTrackerImpl
implements|implements
name|LocalResourcesTracker
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LocalResourcesTrackerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|RANDOM_DIR_REGEX
specifier|private
specifier|static
specifier|final
name|String
name|RANDOM_DIR_REGEX
init|=
literal|"-?\\d+"
decl_stmt|;
DECL|field|RANDOM_DIR_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|RANDOM_DIR_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|RANDOM_DIR_REGEX
argument_list|)
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|String
name|user
decl_stmt|;
DECL|field|appId
specifier|private
specifier|final
name|ApplicationId
name|appId
decl_stmt|;
DECL|field|dispatcher
specifier|private
specifier|final
name|Dispatcher
name|dispatcher
decl_stmt|;
DECL|field|localrsrc
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|LocalResourceRequest
argument_list|,
name|LocalizedResource
argument_list|>
name|localrsrc
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
comment|/*    * This flag controls whether this resource tracker uses hierarchical    * directories or not. For PRIVATE and PUBLIC resource trackers it    * will be set whereas for APPLICATION resource tracker it would    * be false.    */
DECL|field|useLocalCacheDirectoryManager
specifier|private
specifier|final
name|boolean
name|useLocalCacheDirectoryManager
decl_stmt|;
DECL|field|directoryManagers
specifier|private
name|ConcurrentHashMap
argument_list|<
name|Path
argument_list|,
name|LocalCacheDirectoryManager
argument_list|>
name|directoryManagers
decl_stmt|;
comment|/*    * It is used to keep track of resource into hierarchical directory    * while it is getting downloaded. It is useful for reference counting    * in case resource localization fails.    */
specifier|private
name|ConcurrentHashMap
argument_list|<
name|LocalResourceRequest
argument_list|,
name|Path
argument_list|>
DECL|field|inProgressLocalResourcesMap
name|inProgressLocalResourcesMap
decl_stmt|;
comment|/*    * starting with 10 to accommodate 0-9 directories created as a part of    * LocalCacheDirectoryManager. So there will be one unique number generator    * per APPLICATION, USER and PUBLIC cache.    */
DECL|field|uniqueNumberGenerator
specifier|private
name|AtomicLong
name|uniqueNumberGenerator
init|=
operator|new
name|AtomicLong
argument_list|(
literal|9
argument_list|)
decl_stmt|;
DECL|field|stateStore
specifier|private
name|NMStateStoreService
name|stateStore
decl_stmt|;
DECL|method|LocalResourcesTrackerImpl (String user, ApplicationId appId, Dispatcher dispatcher, boolean useLocalCacheDirectoryManager, Configuration conf, NMStateStoreService stateStore)
specifier|public
name|LocalResourcesTrackerImpl
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|boolean
name|useLocalCacheDirectoryManager
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|NMStateStoreService
name|stateStore
parameter_list|)
block|{
name|this
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|dispatcher
argument_list|,
operator|new
name|ConcurrentHashMap
argument_list|<
name|LocalResourceRequest
argument_list|,
name|LocalizedResource
argument_list|>
argument_list|()
argument_list|,
name|useLocalCacheDirectoryManager
argument_list|,
name|conf
argument_list|,
name|stateStore
argument_list|)
expr_stmt|;
block|}
DECL|method|LocalResourcesTrackerImpl (String user, ApplicationId appId, Dispatcher dispatcher, ConcurrentMap<LocalResourceRequest,LocalizedResource> localrsrc, boolean useLocalCacheDirectoryManager, Configuration conf, NMStateStoreService stateStore)
name|LocalResourcesTrackerImpl
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|ConcurrentMap
argument_list|<
name|LocalResourceRequest
argument_list|,
name|LocalizedResource
argument_list|>
name|localrsrc
parameter_list|,
name|boolean
name|useLocalCacheDirectoryManager
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|NMStateStoreService
name|stateStore
parameter_list|)
block|{
name|this
operator|.
name|appId
operator|=
name|appId
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|dispatcher
operator|=
name|dispatcher
expr_stmt|;
name|this
operator|.
name|localrsrc
operator|=
name|localrsrc
expr_stmt|;
name|this
operator|.
name|useLocalCacheDirectoryManager
operator|=
name|useLocalCacheDirectoryManager
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|useLocalCacheDirectoryManager
condition|)
block|{
name|directoryManagers
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Path
argument_list|,
name|LocalCacheDirectoryManager
argument_list|>
argument_list|()
expr_stmt|;
name|inProgressLocalResourcesMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|LocalResourceRequest
argument_list|,
name|Path
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|stateStore
operator|=
name|stateStore
expr_stmt|;
block|}
comment|/*    * Synchronizing this method for avoiding races due to multiple ResourceEvent's    * coming to LocalResourcesTracker from Public/Private localizer and    * Resource Localization Service.    */
annotation|@
name|Override
DECL|method|handle (ResourceEvent event)
specifier|public
specifier|synchronized
name|void
name|handle
parameter_list|(
name|ResourceEvent
name|event
parameter_list|)
block|{
name|LocalResourceRequest
name|req
init|=
name|event
operator|.
name|getLocalResourceRequest
argument_list|()
decl_stmt|;
name|LocalizedResource
name|rsrc
init|=
name|localrsrc
operator|.
name|get
argument_list|(
name|req
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|LOCALIZED
case|:
if|if
condition|(
name|useLocalCacheDirectoryManager
condition|)
block|{
name|inProgressLocalResourcesMap
operator|.
name|remove
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|REQUEST
case|:
if|if
condition|(
name|rsrc
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|isResourcePresent
argument_list|(
name|rsrc
argument_list|)
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Resource "
operator|+
name|rsrc
operator|.
name|getLocalPath
argument_list|()
operator|+
literal|" is missing, localizing it again"
argument_list|)
expr_stmt|;
name|removeResource
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|rsrc
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|rsrc
condition|)
block|{
name|rsrc
operator|=
operator|new
name|LocalizedResource
argument_list|(
name|req
argument_list|,
name|dispatcher
argument_list|)
expr_stmt|;
name|localrsrc
operator|.
name|put
argument_list|(
name|req
argument_list|,
name|rsrc
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|RELEASE
case|:
if|if
condition|(
literal|null
operator|==
name|rsrc
condition|)
block|{
comment|// The container sent a release event on a resource which
comment|// 1) Failed
comment|// 2) Removed for some reason (ex. disk is no longer accessible)
name|ResourceReleaseEvent
name|relEvent
init|=
operator|(
name|ResourceReleaseEvent
operator|)
name|event
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Container "
operator|+
name|relEvent
operator|.
name|getContainer
argument_list|()
operator|+
literal|" sent RELEASE event on a resource request "
operator|+
name|req
operator|+
literal|" not present in cache."
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|LOCALIZATION_FAILED
case|:
comment|/*        * If resource localization fails then Localized resource will be        * removed from local cache.        */
name|removeResource
argument_list|(
name|req
argument_list|)
expr_stmt|;
break|break;
case|case
name|RECOVERED
case|:
if|if
condition|(
name|rsrc
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring attempt to recover existing resource "
operator|+
name|rsrc
argument_list|)
expr_stmt|;
return|return;
block|}
name|rsrc
operator|=
name|recoverResource
argument_list|(
name|req
argument_list|,
operator|(
name|ResourceRecoveredEvent
operator|)
name|event
argument_list|)
expr_stmt|;
name|localrsrc
operator|.
name|put
argument_list|(
name|req
argument_list|,
name|rsrc
argument_list|)
expr_stmt|;
break|break;
block|}
name|rsrc
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|ResourceEventType
operator|.
name|LOCALIZED
condition|)
block|{
if|if
condition|(
name|rsrc
operator|.
name|getLocalPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|stateStore
operator|.
name|finishResourceLocalization
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|buildLocalizedResourceProto
argument_list|(
name|rsrc
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error storing resource state for "
operator|+
name|rsrc
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Resource "
operator|+
name|rsrc
operator|+
literal|" localized without a location"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|recoverResource (LocalResourceRequest req, ResourceRecoveredEvent event)
specifier|private
name|LocalizedResource
name|recoverResource
parameter_list|(
name|LocalResourceRequest
name|req
parameter_list|,
name|ResourceRecoveredEvent
name|event
parameter_list|)
block|{
comment|// unique number for a resource is the directory of the resource
name|Path
name|localDir
init|=
name|event
operator|.
name|getLocalPath
argument_list|()
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|long
name|rsrcId
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|localDir
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// update ID generator to avoid conflicts with existing resources
while|while
condition|(
literal|true
condition|)
block|{
name|long
name|currentRsrcId
init|=
name|uniqueNumberGenerator
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|nextRsrcId
init|=
name|Math
operator|.
name|max
argument_list|(
name|currentRsrcId
argument_list|,
name|rsrcId
argument_list|)
decl_stmt|;
if|if
condition|(
name|uniqueNumberGenerator
operator|.
name|compareAndSet
argument_list|(
name|currentRsrcId
argument_list|,
name|nextRsrcId
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|incrementFileCountForLocalCacheDirectory
argument_list|(
name|localDir
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|LocalizedResource
argument_list|(
name|req
argument_list|,
name|dispatcher
argument_list|)
return|;
block|}
DECL|method|buildLocalizedResourceProto ( LocalizedResource rsrc)
specifier|private
name|LocalizedResourceProto
name|buildLocalizedResourceProto
parameter_list|(
name|LocalizedResource
name|rsrc
parameter_list|)
block|{
return|return
name|LocalizedResourceProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setResource
argument_list|(
name|buildLocalResourceProto
argument_list|(
name|rsrc
operator|.
name|getRequest
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setLocalPath
argument_list|(
name|rsrc
operator|.
name|getLocalPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setSize
argument_list|(
name|rsrc
operator|.
name|getSize
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|buildLocalResourceProto (LocalResource lr)
specifier|private
name|LocalResourceProto
name|buildLocalResourceProto
parameter_list|(
name|LocalResource
name|lr
parameter_list|)
block|{
name|LocalResourcePBImpl
name|lrpb
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|lr
operator|instanceof
name|LocalResourcePBImpl
operator|)
condition|)
block|{
name|lr
operator|=
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|lr
operator|.
name|getResource
argument_list|()
argument_list|,
name|lr
operator|.
name|getType
argument_list|()
argument_list|,
name|lr
operator|.
name|getVisibility
argument_list|()
argument_list|,
name|lr
operator|.
name|getSize
argument_list|()
argument_list|,
name|lr
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|lr
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|lrpb
operator|=
operator|(
name|LocalResourcePBImpl
operator|)
name|lr
expr_stmt|;
return|return
name|lrpb
operator|.
name|getProto
argument_list|()
return|;
block|}
DECL|method|incrementFileCountForLocalCacheDirectory (Path cacheDir)
specifier|public
name|void
name|incrementFileCountForLocalCacheDirectory
parameter_list|(
name|Path
name|cacheDir
parameter_list|)
block|{
if|if
condition|(
name|useLocalCacheDirectoryManager
condition|)
block|{
name|Path
name|cacheRoot
init|=
name|LocalCacheDirectoryManager
operator|.
name|getCacheDirectoryRoot
argument_list|(
name|cacheDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheRoot
operator|!=
literal|null
condition|)
block|{
name|LocalCacheDirectoryManager
name|dir
init|=
name|directoryManagers
operator|.
name|get
argument_list|(
name|cacheRoot
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|==
literal|null
condition|)
block|{
name|dir
operator|=
operator|new
name|LocalCacheDirectoryManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|LocalCacheDirectoryManager
name|otherDir
init|=
name|directoryManagers
operator|.
name|putIfAbsent
argument_list|(
name|cacheRoot
argument_list|,
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|otherDir
operator|!=
literal|null
condition|)
block|{
name|dir
operator|=
name|otherDir
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cacheDir
operator|.
name|equals
argument_list|(
name|cacheRoot
argument_list|)
condition|)
block|{
name|dir
operator|.
name|incrementFileCountForPath
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|dirStr
init|=
name|cacheDir
operator|.
name|toUri
argument_list|()
operator|.
name|getRawPath
argument_list|()
decl_stmt|;
name|String
name|rootStr
init|=
name|cacheRoot
operator|.
name|toUri
argument_list|()
operator|.
name|getRawPath
argument_list|()
decl_stmt|;
name|dir
operator|.
name|incrementFileCountForPath
argument_list|(
name|dirStr
operator|.
name|substring
argument_list|(
name|rootStr
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*    * Update the file-count statistics for a local cache-directory.    * This will retrieve the localized path for the resource from    * 1) inProgressRsrcMap if the resource was under localization and it    * failed.    * 2) LocalizedResource if the resource is already localized.    * From this path it will identify the local directory under which the    * resource was localized. Then rest of the path will be used to decrement    * file count for the HierarchicalSubDirectory pointing to this relative    * path.    */
DECL|method|decrementFileCountForLocalCacheDirectory (LocalResourceRequest req, LocalizedResource rsrc)
specifier|private
name|void
name|decrementFileCountForLocalCacheDirectory
parameter_list|(
name|LocalResourceRequest
name|req
parameter_list|,
name|LocalizedResource
name|rsrc
parameter_list|)
block|{
if|if
condition|(
name|useLocalCacheDirectoryManager
condition|)
block|{
name|Path
name|rsrcPath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|inProgressLocalResourcesMap
operator|.
name|containsKey
argument_list|(
name|req
argument_list|)
condition|)
block|{
comment|// This happens when localization of a resource fails.
name|rsrcPath
operator|=
name|inProgressLocalResourcesMap
operator|.
name|remove
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rsrc
operator|!=
literal|null
operator|&&
name|rsrc
operator|.
name|getLocalPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rsrcPath
operator|=
name|rsrc
operator|.
name|getLocalPath
argument_list|()
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rsrcPath
operator|!=
literal|null
condition|)
block|{
name|Path
name|parentPath
init|=
operator|new
name|Path
argument_list|(
name|rsrcPath
operator|.
name|toUri
argument_list|()
operator|.
name|getRawPath
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|directoryManagers
operator|.
name|containsKey
argument_list|(
name|parentPath
argument_list|)
condition|)
block|{
name|parentPath
operator|=
name|parentPath
operator|.
name|getParent
argument_list|()
expr_stmt|;
if|if
condition|(
name|parentPath
operator|==
literal|null
condition|)
block|{
return|return;
block|}
block|}
if|if
condition|(
name|parentPath
operator|!=
literal|null
condition|)
block|{
name|String
name|parentDir
init|=
name|parentPath
operator|.
name|toUri
argument_list|()
operator|.
name|getRawPath
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LocalCacheDirectoryManager
name|dir
init|=
name|directoryManagers
operator|.
name|get
argument_list|(
name|parentPath
argument_list|)
decl_stmt|;
name|String
name|rsrcDir
init|=
name|rsrcPath
operator|.
name|toUri
argument_list|()
operator|.
name|getRawPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|rsrcDir
operator|.
name|equals
argument_list|(
name|parentDir
argument_list|)
condition|)
block|{
name|dir
operator|.
name|decrementFileCountForPath
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|.
name|decrementFileCountForPath
argument_list|(
name|rsrcDir
operator|.
name|substring
argument_list|(
name|parentDir
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * This module checks if the resource which was localized is already present    * or not    *     * @param rsrc    * @return true/false based on resource is present or not    */
DECL|method|isResourcePresent (LocalizedResource rsrc)
specifier|public
name|boolean
name|isResourcePresent
parameter_list|(
name|LocalizedResource
name|rsrc
parameter_list|)
block|{
name|boolean
name|ret
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|rsrc
operator|.
name|getState
argument_list|()
operator|==
name|ResourceState
operator|.
name|LOCALIZED
condition|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|rsrc
operator|.
name|getLocalPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getRawPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|ret
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|remove (LocalizedResource rem, DeletionService delService)
specifier|public
name|boolean
name|remove
parameter_list|(
name|LocalizedResource
name|rem
parameter_list|,
name|DeletionService
name|delService
parameter_list|)
block|{
comment|// current synchronization guaranteed by crude RLS event for cleanup
name|LocalizedResource
name|rsrc
init|=
name|localrsrc
operator|.
name|get
argument_list|(
name|rem
operator|.
name|getRequest
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|rsrc
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Attempt to remove absent resource: "
operator|+
name|rem
operator|.
name|getRequest
argument_list|()
operator|+
literal|" from "
operator|+
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|rsrc
operator|.
name|getRefCount
argument_list|()
operator|>
literal|0
operator|||
name|ResourceState
operator|.
name|DOWNLOADING
operator|.
name|equals
argument_list|(
name|rsrc
operator|.
name|getState
argument_list|()
argument_list|)
operator|||
name|rsrc
operator|!=
name|rem
condition|)
block|{
comment|// internal error
name|LOG
operator|.
name|error
argument_list|(
literal|"Attempt to remove resource: "
operator|+
name|rsrc
operator|+
literal|" with non-zero refcount"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
comment|// ResourceState is LOCALIZED or INIT
if|if
condition|(
name|ResourceState
operator|.
name|LOCALIZED
operator|.
name|equals
argument_list|(
name|rsrc
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
name|delService
operator|.
name|delete
argument_list|(
name|getUser
argument_list|()
argument_list|,
name|getPathToDelete
argument_list|(
name|rsrc
operator|.
name|getLocalPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|removeResource
argument_list|(
name|rem
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removed "
operator|+
name|rsrc
operator|.
name|getLocalPath
argument_list|()
operator|+
literal|" from localized cache"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
DECL|method|removeResource (LocalResourceRequest req)
specifier|private
name|void
name|removeResource
parameter_list|(
name|LocalResourceRequest
name|req
parameter_list|)
block|{
name|LocalizedResource
name|rsrc
init|=
name|localrsrc
operator|.
name|remove
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|decrementFileCountForLocalCacheDirectory
argument_list|(
name|req
argument_list|,
name|rsrc
argument_list|)
expr_stmt|;
if|if
condition|(
name|rsrc
operator|!=
literal|null
condition|)
block|{
name|Path
name|localPath
init|=
name|rsrc
operator|.
name|getLocalPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|localPath
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|stateStore
operator|.
name|removeLocalizedResource
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|localPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to remove resource "
operator|+
name|rsrc
operator|+
literal|" from state store"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Returns the path up to the random directory component.    */
DECL|method|getPathToDelete (Path localPath)
specifier|private
name|Path
name|getPathToDelete
parameter_list|(
name|Path
name|localPath
parameter_list|)
block|{
name|Path
name|delPath
init|=
name|localPath
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|delPath
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Matcher
name|matcher
init|=
name|RANDOM_DIR_PATTERN
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
name|delPath
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Random directory component did not match. "
operator|+
literal|"Deleting localized path only"
argument_list|)
expr_stmt|;
return|return
name|localPath
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|LocalizedResource
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|localrsrc
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**    * @return {@link Path} absolute path for localization which includes local    *         directory path and the relative hierarchical path (if use local    *         cache directory manager is enabled)    *     * @param {@link LocalResourceRequest} Resource localization request to    *        localize the resource.    * @param {@link Path} local directory path    */
annotation|@
name|Override
specifier|public
name|Path
DECL|method|getPathForLocalization (LocalResourceRequest req, Path localDirPath)
name|getPathForLocalization
parameter_list|(
name|LocalResourceRequest
name|req
parameter_list|,
name|Path
name|localDirPath
parameter_list|)
block|{
name|Path
name|rPath
init|=
name|localDirPath
decl_stmt|;
if|if
condition|(
name|useLocalCacheDirectoryManager
operator|&&
name|localDirPath
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|directoryManagers
operator|.
name|containsKey
argument_list|(
name|localDirPath
argument_list|)
condition|)
block|{
name|directoryManagers
operator|.
name|putIfAbsent
argument_list|(
name|localDirPath
argument_list|,
operator|new
name|LocalCacheDirectoryManager
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LocalCacheDirectoryManager
name|dir
init|=
name|directoryManagers
operator|.
name|get
argument_list|(
name|localDirPath
argument_list|)
decl_stmt|;
name|rPath
operator|=
name|localDirPath
expr_stmt|;
name|String
name|hierarchicalPath
init|=
name|dir
operator|.
name|getRelativePathForLocalization
argument_list|()
decl_stmt|;
comment|// For most of the scenarios we will get root path only which
comment|// is an empty string
if|if
condition|(
operator|!
name|hierarchicalPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rPath
operator|=
operator|new
name|Path
argument_list|(
name|localDirPath
argument_list|,
name|hierarchicalPath
argument_list|)
expr_stmt|;
block|}
name|inProgressLocalResourcesMap
operator|.
name|put
argument_list|(
name|req
argument_list|,
name|rPath
argument_list|)
expr_stmt|;
block|}
name|rPath
operator|=
operator|new
name|Path
argument_list|(
name|rPath
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|uniqueNumberGenerator
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|localPath
init|=
operator|new
name|Path
argument_list|(
name|rPath
argument_list|,
name|req
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|LocalizedResource
name|rsrc
init|=
name|localrsrc
operator|.
name|get
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|rsrc
operator|.
name|setLocalPath
argument_list|(
name|localPath
argument_list|)
expr_stmt|;
name|LocalResource
name|lr
init|=
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|req
operator|.
name|getResource
argument_list|()
argument_list|,
name|req
operator|.
name|getType
argument_list|()
argument_list|,
name|req
operator|.
name|getVisibility
argument_list|()
argument_list|,
name|req
operator|.
name|getSize
argument_list|()
argument_list|,
name|req
operator|.
name|getTimestamp
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|stateStore
operator|.
name|startResourceLocalization
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
operator|(
operator|(
name|LocalResourcePBImpl
operator|)
name|lr
operator|)
operator|.
name|getProto
argument_list|()
argument_list|,
name|localPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to record localization start for "
operator|+
name|rsrc
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|rPath
return|;
block|}
annotation|@
name|Override
DECL|method|getLocalizedResource (LocalResourceRequest request)
specifier|public
name|LocalizedResource
name|getLocalizedResource
parameter_list|(
name|LocalResourceRequest
name|request
parameter_list|)
block|{
return|return
name|localrsrc
operator|.
name|get
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getDirectoryManager (Path localDirPath)
name|LocalCacheDirectoryManager
name|getDirectoryManager
parameter_list|(
name|Path
name|localDirPath
parameter_list|)
block|{
name|LocalCacheDirectoryManager
name|mgr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|useLocalCacheDirectoryManager
condition|)
block|{
name|mgr
operator|=
name|directoryManagers
operator|.
name|get
argument_list|(
name|localDirPath
argument_list|)
expr_stmt|;
block|}
return|return
name|mgr
return|;
block|}
block|}
end_class

end_unit

