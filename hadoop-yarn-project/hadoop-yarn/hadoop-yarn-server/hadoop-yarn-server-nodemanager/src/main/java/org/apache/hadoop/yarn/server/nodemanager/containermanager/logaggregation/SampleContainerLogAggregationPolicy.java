begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.logaggregation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|logaggregation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ContainerLogAggregationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ContainerLogContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ContainerType
import|;
end_import

begin_comment
comment|/**  * The sample policy samples logs of successful worker containers to aggregate.  * It always aggregates AM container and failed/killed worker  * containers' logs. To make sure small applications have enough logs, it only  * applies sampling beyond minimal number of containers. The parameters can be  * configured by SAMPLE_RATE and MIN_THRESHOLD. For example if SAMPLE_RATE is  * 0.2 and MIN_THRESHOLD is 20, for an application with 100 successful  * worker containers, 20 + (100-20) * 0.2 = 36 containers's logs will be  * aggregated.  */
end_comment

begin_class
annotation|@
name|Private
DECL|class|SampleContainerLogAggregationPolicy
specifier|public
class|class
name|SampleContainerLogAggregationPolicy
implements|implements
name|ContainerLogAggregationPolicy
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SampleContainerLogAggregationPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SAMPLE_RATE
specifier|static
name|String
name|SAMPLE_RATE
init|=
literal|"SR"
decl_stmt|;
DECL|field|DEFAULT_SAMPLE_RATE
specifier|public
specifier|static
specifier|final
name|float
name|DEFAULT_SAMPLE_RATE
init|=
literal|0.2f
decl_stmt|;
DECL|field|MIN_THRESHOLD
specifier|static
name|String
name|MIN_THRESHOLD
init|=
literal|"MIN"
decl_stmt|;
DECL|field|DEFAULT_SAMPLE_MIN_THRESHOLD
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SAMPLE_MIN_THRESHOLD
init|=
literal|20
decl_stmt|;
DECL|field|sampleRate
specifier|private
name|float
name|sampleRate
init|=
name|DEFAULT_SAMPLE_RATE
decl_stmt|;
DECL|field|minThreshold
specifier|private
name|int
name|minThreshold
init|=
name|DEFAULT_SAMPLE_MIN_THRESHOLD
decl_stmt|;
DECL|method|buildParameters (float sampleRate, int minThreshold)
specifier|static
specifier|public
name|String
name|buildParameters
parameter_list|(
name|float
name|sampleRate
parameter_list|,
name|int
name|minThreshold
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|SAMPLE_RATE
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|sampleRate
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|MIN_THRESHOLD
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|minThreshold
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// Parameters are comma separated properties, for example
comment|// "SR:0.5,MIN:50"
DECL|method|parseParameters (String parameters)
specifier|public
name|void
name|parseParameters
parameter_list|(
name|String
name|parameters
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|params
init|=
name|StringUtils
operator|.
name|getStringCollection
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|param
range|:
name|params
control|)
block|{
comment|// The first element is the property name.
comment|// The second element is the property value.
name|String
index|[]
name|property
init|=
name|StringUtils
operator|.
name|getStrings
argument_list|(
name|param
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|==
literal|null
operator|||
name|property
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|property
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|SAMPLE_RATE
argument_list|)
condition|)
block|{
try|try
block|{
name|float
name|sampleRate
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|property
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|sampleRate
operator|>=
literal|0.0
operator|&&
name|sampleRate
operator|<=
literal|1.0
condition|)
block|{
name|this
operator|.
name|sampleRate
operator|=
name|sampleRate
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The format isn't valid. Sample rate falls back to the "
operator|+
literal|"default value "
operator|+
name|DEFAULT_SAMPLE_RATE
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The format isn't valid. Sample rate falls back to the "
operator|+
literal|"default value "
operator|+
name|DEFAULT_SAMPLE_RATE
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|property
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|MIN_THRESHOLD
argument_list|)
condition|)
block|{
try|try
block|{
name|int
name|minThreshold
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|property
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|minThreshold
operator|>=
literal|0
condition|)
block|{
name|this
operator|.
name|minThreshold
operator|=
name|minThreshold
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The format isn't valid. Min threshold falls back to "
operator|+
literal|"the default value "
operator|+
name|DEFAULT_SAMPLE_MIN_THRESHOLD
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The format isn't valid. Min threshold falls back to the "
operator|+
literal|"default value "
operator|+
name|DEFAULT_SAMPLE_MIN_THRESHOLD
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|shouldDoLogAggregation (ContainerLogContext logContext)
specifier|public
name|boolean
name|shouldDoLogAggregation
parameter_list|(
name|ContainerLogContext
name|logContext
parameter_list|)
block|{
if|if
condition|(
name|logContext
operator|.
name|getContainerType
argument_list|()
operator|==
name|ContainerType
operator|.
name|APPLICATION_MASTER
operator|||
name|logContext
operator|.
name|getExitCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// If it is AM or failed or killed container, enable log aggregation.
return|return
literal|true
return|;
block|}
comment|// Only sample log aggregation for large applications.
comment|// We assume the container id is continuously allocated from number 1 and
comment|// Worker containers start from id 2. So logs of worker containers with ids
comment|// in [2, minThreshold + 1] will be aggregated.
if|if
condition|(
operator|(
name|logContext
operator|.
name|getContainerId
argument_list|()
operator|.
name|getContainerId
argument_list|()
operator|&
name|ContainerId
operator|.
name|CONTAINER_ID_BITMASK
operator|)
operator|<
name|minThreshold
operator|+
literal|2
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Sample log aggregation for the rest of successful worker containers
return|return
operator|(
name|sampleRate
operator|!=
literal|0
operator|&&
name|logContext
operator|.
name|getContainerId
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|%
operator|(
literal|1
operator|/
name|sampleRate
operator|)
operator|==
literal|0
operator|)
return|;
block|}
block|}
end_class

end_unit

