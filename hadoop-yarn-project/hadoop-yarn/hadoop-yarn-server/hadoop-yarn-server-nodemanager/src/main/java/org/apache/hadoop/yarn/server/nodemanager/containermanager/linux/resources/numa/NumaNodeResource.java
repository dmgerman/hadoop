begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.resources.numa
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|numa
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_comment
comment|/**  * NumaNodeResource class holds the NUMA node topology with the total and used  * resources.  */
end_comment

begin_class
DECL|class|NumaNodeResource
specifier|public
class|class
name|NumaNodeResource
block|{
DECL|field|nodeId
specifier|private
name|String
name|nodeId
decl_stmt|;
DECL|field|totalMemory
specifier|private
name|long
name|totalMemory
decl_stmt|;
DECL|field|totalCpus
specifier|private
name|int
name|totalCpus
decl_stmt|;
DECL|field|usedMemory
specifier|private
name|long
name|usedMemory
decl_stmt|;
DECL|field|usedCpus
specifier|private
name|int
name|usedCpus
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NumaNodeResource
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|containerVsMemUsage
specifier|private
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|Long
argument_list|>
name|containerVsMemUsage
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|containerVsCpusUsage
specifier|private
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|Integer
argument_list|>
name|containerVsCpusUsage
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|NumaNodeResource (String nodeId, long totalMemory, int totalCpus)
specifier|public
name|NumaNodeResource
parameter_list|(
name|String
name|nodeId
parameter_list|,
name|long
name|totalMemory
parameter_list|,
name|int
name|totalCpus
parameter_list|)
block|{
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
name|this
operator|.
name|totalMemory
operator|=
name|totalMemory
expr_stmt|;
name|this
operator|.
name|totalCpus
operator|=
name|totalCpus
expr_stmt|;
block|}
comment|/**    * Checks whether the specified resources available or not.    *    * @param resource resource    * @return whether the specified resources available or not    */
DECL|method|isResourcesAvailable (Resource resource)
specifier|public
name|boolean
name|isResourcesAvailable
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Memory available:"
operator|+
operator|(
name|totalMemory
operator|-
name|usedMemory
operator|)
operator|+
literal|", CPUs available:"
operator|+
operator|(
name|totalCpus
operator|-
name|usedCpus
operator|)
operator|+
literal|", requested:"
operator|+
name|resource
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|totalMemory
operator|-
name|usedMemory
operator|)
operator|>=
name|resource
operator|.
name|getMemorySize
argument_list|()
operator|&&
operator|(
name|totalCpus
operator|-
name|usedCpus
operator|)
operator|>=
name|resource
operator|.
name|getVirtualCores
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Assigns available memory and returns the remaining needed memory.    *    * @param memreq required memory    * @param containerId which container memory to assign    * @return remaining needed memory    */
DECL|method|assignAvailableMemory (long memreq, ContainerId containerId)
specifier|public
name|long
name|assignAvailableMemory
parameter_list|(
name|long
name|memreq
parameter_list|,
name|ContainerId
name|containerId
parameter_list|)
block|{
name|long
name|memAvailable
init|=
name|totalMemory
operator|-
name|usedMemory
decl_stmt|;
if|if
condition|(
name|memAvailable
operator|>=
name|memreq
condition|)
block|{
name|containerVsMemUsage
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|memreq
argument_list|)
expr_stmt|;
name|usedMemory
operator|+=
name|memreq
expr_stmt|;
return|return
literal|0
return|;
block|}
else|else
block|{
name|usedMemory
operator|+=
name|memAvailable
expr_stmt|;
name|containerVsMemUsage
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|memAvailable
argument_list|)
expr_stmt|;
return|return
name|memreq
operator|-
name|memAvailable
return|;
block|}
block|}
comment|/**    * Assigns available cpu's and returns the remaining needed cpu's.    *    * @param cpusreq required cpu's    * @param containerId which container cpu's to assign    * @return remaining needed cpu's    */
DECL|method|assignAvailableCpus (int cpusreq, ContainerId containerId)
specifier|public
name|int
name|assignAvailableCpus
parameter_list|(
name|int
name|cpusreq
parameter_list|,
name|ContainerId
name|containerId
parameter_list|)
block|{
name|int
name|cpusAvailable
init|=
name|totalCpus
operator|-
name|usedCpus
decl_stmt|;
if|if
condition|(
name|cpusAvailable
operator|>=
name|cpusreq
condition|)
block|{
name|containerVsCpusUsage
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|cpusreq
argument_list|)
expr_stmt|;
name|usedCpus
operator|+=
name|cpusreq
expr_stmt|;
return|return
literal|0
return|;
block|}
else|else
block|{
name|usedCpus
operator|+=
name|cpusAvailable
expr_stmt|;
name|containerVsCpusUsage
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|cpusAvailable
argument_list|)
expr_stmt|;
return|return
name|cpusreq
operator|-
name|cpusAvailable
return|;
block|}
block|}
comment|/**    * Assigns the requested resources for Container.    *    * @param resource resource to assign    * @param containerId to which container the resources to assign    */
DECL|method|assignResources (Resource resource, ContainerId containerId)
specifier|public
name|void
name|assignResources
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|ContainerId
name|containerId
parameter_list|)
block|{
name|containerVsMemUsage
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|resource
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|containerVsCpusUsage
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|resource
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|usedMemory
operator|+=
name|resource
operator|.
name|getMemorySize
argument_list|()
expr_stmt|;
name|usedCpus
operator|+=
name|resource
operator|.
name|getVirtualCores
argument_list|()
expr_stmt|;
block|}
comment|/**    * Releases the assigned resources for Container.    *    * @param containerId to which container the assigned resources to release    */
DECL|method|releaseResources (ContainerId containerId)
specifier|public
name|void
name|releaseResources
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
if|if
condition|(
name|containerVsMemUsage
operator|.
name|containsKey
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|usedMemory
operator|-=
name|containerVsMemUsage
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|containerVsMemUsage
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|containerVsCpusUsage
operator|.
name|containsKey
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|usedCpus
operator|-=
name|containerVsCpusUsage
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|containerVsCpusUsage
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Recovers the memory resources for Container.    *    * @param containerId recover the memory resources for the Container    * @param memory memory to recover    */
DECL|method|recoverMemory (ContainerId containerId, long memory)
specifier|public
name|void
name|recoverMemory
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|long
name|memory
parameter_list|)
block|{
name|containerVsMemUsage
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|memory
argument_list|)
expr_stmt|;
name|usedMemory
operator|+=
name|memory
expr_stmt|;
block|}
comment|/**    * Recovers the cpu's resources for Container.    *    * @param containerId recover the cpu's resources for the Container    * @param cpus cpu's to recover    */
DECL|method|recoverCpus (ContainerId containerId, int cpus)
specifier|public
name|void
name|recoverCpus
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|int
name|cpus
parameter_list|)
block|{
name|containerVsCpusUsage
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|cpus
argument_list|)
expr_stmt|;
name|usedCpus
operator|+=
name|cpus
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Node Id:"
operator|+
name|nodeId
operator|+
literal|"\tMemory:"
operator|+
name|totalMemory
operator|+
literal|"\tCPus:"
operator|+
name|totalCpus
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|nodeId
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|nodeId
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
call|(
name|int
call|)
argument_list|(
name|totalMemory
operator|^
operator|(
name|totalMemory
operator|>>>
literal|32
operator|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|totalCpus
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|NumaNodeResource
name|other
init|=
operator|(
name|NumaNodeResource
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|nodeId
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|nodeId
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|nodeId
operator|.
name|equals
argument_list|(
name|other
operator|.
name|nodeId
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|totalMemory
operator|!=
name|other
operator|.
name|totalMemory
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|totalCpus
operator|!=
name|other
operator|.
name|totalCpus
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|getNodeId ()
specifier|public
name|String
name|getNodeId
parameter_list|()
block|{
return|return
name|nodeId
return|;
block|}
block|}
end_class

end_unit

