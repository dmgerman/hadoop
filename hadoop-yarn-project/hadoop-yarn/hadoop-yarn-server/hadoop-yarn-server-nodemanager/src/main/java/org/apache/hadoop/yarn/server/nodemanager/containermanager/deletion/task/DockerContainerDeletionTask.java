begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.deletion.task
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|deletion
operator|.
name|task
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|DeletionServiceDeleteTaskProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DeletionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|LinuxContainerExecutor
import|;
end_import

begin_comment
comment|/**  * {@link DeletionTask} handling the removal of Docker containers.  */
end_comment

begin_class
DECL|class|DockerContainerDeletionTask
specifier|public
class|class
name|DockerContainerDeletionTask
extends|extends
name|DeletionTask
implements|implements
name|Runnable
block|{
DECL|field|containerId
specifier|private
name|String
name|containerId
decl_stmt|;
DECL|method|DockerContainerDeletionTask (DeletionService deletionService, String user, String containerId)
specifier|public
name|DockerContainerDeletionTask
parameter_list|(
name|DeletionService
name|deletionService
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|containerId
parameter_list|)
block|{
name|this
argument_list|(
name|INVALID_TASK_ID
argument_list|,
name|deletionService
argument_list|,
name|user
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
block|}
DECL|method|DockerContainerDeletionTask (int taskId, DeletionService deletionService, String user, String containerId)
specifier|public
name|DockerContainerDeletionTask
parameter_list|(
name|int
name|taskId
parameter_list|,
name|DeletionService
name|deletionService
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|containerId
parameter_list|)
block|{
name|super
argument_list|(
name|taskId
argument_list|,
name|deletionService
argument_list|,
name|user
argument_list|,
name|DeletionTaskType
operator|.
name|DOCKER_CONTAINER
argument_list|)
expr_stmt|;
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
block|}
comment|/**    * Get the id of the container to delete.    *    * @return the id of the container to delete.    */
DECL|method|getContainerId ()
specifier|public
name|String
name|getContainerId
parameter_list|()
block|{
return|return
name|containerId
return|;
block|}
comment|/**    * Delete the specified Docker container.    */
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running DeletionTask : {}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|LinuxContainerExecutor
name|exec
init|=
operator|(
operator|(
name|LinuxContainerExecutor
operator|)
name|getDeletionService
argument_list|()
operator|.
name|getContainerExecutor
argument_list|()
operator|)
decl_stmt|;
name|exec
operator|.
name|removeDockerContainer
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
comment|/**    * Convert the DockerContainerDeletionTask to a String representation.    *    * @return String representation of the DockerContainerDeletionTask.    */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"DockerContainerDeletionTask : "
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"  id : "
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getTaskId
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"  containerId : "
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|containerId
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
return|;
block|}
comment|/**    * Convert the DockerContainerDeletionTask to the Protobuf representation for    * storing in the state store and recovery.    *    * @return the protobuf representation of the DockerContainerDeletionTask.    */
DECL|method|convertDeletionTaskToProto ()
specifier|public
name|DeletionServiceDeleteTaskProto
name|convertDeletionTaskToProto
parameter_list|()
block|{
name|DeletionServiceDeleteTaskProto
operator|.
name|Builder
name|builder
init|=
name|getBaseDeletionTaskProtoBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setTaskType
argument_list|(
name|DeletionTaskType
operator|.
name|DOCKER_CONTAINER
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getContainerId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setDockerContainerId
argument_list|(
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

