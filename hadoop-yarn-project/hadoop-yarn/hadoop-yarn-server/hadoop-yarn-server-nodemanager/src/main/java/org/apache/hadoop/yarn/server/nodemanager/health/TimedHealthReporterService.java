begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.health
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|health
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_comment
comment|/**  * A {@link HealthReporter} skeleton for regularly checking a specific  * {@link TimerTask} and obtaining information about it.  *  * @see NodeHealthScriptRunner  */
end_comment

begin_class
DECL|class|TimedHealthReporterService
specifier|public
specifier|abstract
class|class
name|TimedHealthReporterService
extends|extends
name|AbstractService
implements|implements
name|HealthReporter
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TimedHealthReporterService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|isHealthy
specifier|private
name|boolean
name|isHealthy
decl_stmt|;
DECL|field|healthReport
specifier|private
name|String
name|healthReport
decl_stmt|;
DECL|field|lastReportedTime
specifier|private
name|long
name|lastReportedTime
decl_stmt|;
DECL|field|timer
specifier|private
name|Timer
name|timer
decl_stmt|;
DECL|field|task
specifier|private
name|TimerTask
name|task
decl_stmt|;
DECL|field|intervalMs
specifier|private
name|long
name|intervalMs
decl_stmt|;
DECL|method|TimedHealthReporterService (String name, long intervalMs)
name|TimedHealthReporterService
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|intervalMs
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|isHealthy
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|healthReport
operator|=
literal|""
expr_stmt|;
name|this
operator|.
name|lastReportedTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|this
operator|.
name|intervalMs
operator|=
name|intervalMs
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setTimerTask (TimerTask timerTask)
name|void
name|setTimerTask
parameter_list|(
name|TimerTask
name|timerTask
parameter_list|)
block|{
name|task
operator|=
name|timerTask
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getTimerTask ()
name|TimerTask
name|getTimerTask
parameter_list|()
block|{
return|return
name|task
return|;
block|}
comment|/**    * Method used to start the health monitoring.    */
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|public
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Health reporting task hasn't been set!"
argument_list|)
throw|;
block|}
name|timer
operator|=
operator|new
name|Timer
argument_list|(
literal|"HealthReporterService-Timer"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|timer
operator|.
name|scheduleAtFixedRate
argument_list|(
name|task
argument_list|,
literal|0
argument_list|,
name|intervalMs
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
comment|/**    * Method used to terminate the health monitoring service.    */
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|timer
operator|!=
literal|null
condition|)
block|{
name|timer
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isHealthy ()
specifier|public
name|boolean
name|isHealthy
parameter_list|()
block|{
return|return
name|isHealthy
return|;
block|}
comment|/**    * Sets if the node is healthy or not.    *    * @param healthy whether the node is healthy    */
DECL|method|setHealthy (boolean healthy)
specifier|protected
specifier|synchronized
name|void
name|setHealthy
parameter_list|(
name|boolean
name|healthy
parameter_list|)
block|{
name|this
operator|.
name|isHealthy
operator|=
name|healthy
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getHealthReport ()
specifier|public
name|String
name|getHealthReport
parameter_list|()
block|{
return|return
name|healthReport
return|;
block|}
comment|/**    * Sets the health report from the node health check. Also set the disks'    * health info obtained from DiskHealthCheckerService.    *    * @param report report String    */
DECL|method|setHealthReport (String report)
specifier|private
specifier|synchronized
name|void
name|setHealthReport
parameter_list|(
name|String
name|report
parameter_list|)
block|{
name|this
operator|.
name|healthReport
operator|=
name|report
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLastHealthReportTime ()
specifier|public
name|long
name|getLastHealthReportTime
parameter_list|()
block|{
return|return
name|lastReportedTime
return|;
block|}
comment|/**    * Sets the last run time of the node health check.    *    * @param lastReportedTime last reported time in long    */
DECL|method|setLastReportedTime (long lastReportedTime)
specifier|private
specifier|synchronized
name|void
name|setLastReportedTime
parameter_list|(
name|long
name|lastReportedTime
parameter_list|)
block|{
name|this
operator|.
name|lastReportedTime
operator|=
name|lastReportedTime
expr_stmt|;
block|}
DECL|method|setHealthyWithoutReport ()
specifier|synchronized
name|void
name|setHealthyWithoutReport
parameter_list|()
block|{
name|this
operator|.
name|setHealthy
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|setHealthReport
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|this
operator|.
name|setLastReportedTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setUnhealthyWithReport (String output)
specifier|synchronized
name|void
name|setUnhealthyWithReport
parameter_list|(
name|String
name|output
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Health status being set as: \""
operator|+
name|output
operator|+
literal|"\"."
argument_list|)
expr_stmt|;
name|this
operator|.
name|setHealthy
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|setHealthReport
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|this
operator|.
name|setLastReportedTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

