begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.runtime.docker
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|docker
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Encapsulates the docker rm command and its command  * line arguments.  */
end_comment

begin_class
DECL|class|DockerRmCommand
specifier|public
class|class
name|DockerRmCommand
extends|extends
name|DockerCommand
block|{
DECL|field|RM_COMMAND
specifier|private
specifier|static
specifier|final
name|String
name|RM_COMMAND
init|=
literal|"rm"
decl_stmt|;
DECL|field|CGROUP_HIERARCHY
specifier|private
specifier|static
specifier|final
name|String
name|CGROUP_HIERARCHY
init|=
literal|"hierarchy"
decl_stmt|;
DECL|field|cGroupArg
specifier|private
name|String
name|cGroupArg
decl_stmt|;
DECL|method|DockerRmCommand (String containerName, String hierarchy)
specifier|public
name|DockerRmCommand
parameter_list|(
name|String
name|containerName
parameter_list|,
name|String
name|hierarchy
parameter_list|)
block|{
name|super
argument_list|(
name|RM_COMMAND
argument_list|)
expr_stmt|;
name|super
operator|.
name|addCommandArguments
argument_list|(
literal|"name"
argument_list|,
name|containerName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|hierarchy
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|hierarchy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|super
operator|.
name|addCommandArguments
argument_list|(
name|CGROUP_HIERARCHY
argument_list|,
name|hierarchy
argument_list|)
expr_stmt|;
name|this
operator|.
name|cGroupArg
operator|=
name|hierarchy
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|preparePrivilegedOperation ( DockerCommand dockerCommand, String containerName, Map<String, String> env, Context nmContext)
specifier|public
name|PrivilegedOperation
name|preparePrivilegedOperation
parameter_list|(
name|DockerCommand
name|dockerCommand
parameter_list|,
name|String
name|containerName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|,
name|Context
name|nmContext
parameter_list|)
block|{
name|PrivilegedOperation
name|dockerOp
init|=
operator|new
name|PrivilegedOperation
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|REMOVE_DOCKER_CONTAINER
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|cGroupArg
operator|!=
literal|null
condition|)
block|{
name|dockerOp
operator|.
name|appendArgs
argument_list|(
name|cGroupArg
argument_list|)
expr_stmt|;
block|}
name|dockerOp
operator|.
name|appendArgs
argument_list|(
name|containerName
argument_list|)
expr_stmt|;
return|return
name|dockerOp
return|;
block|}
block|}
end_class

end_unit

