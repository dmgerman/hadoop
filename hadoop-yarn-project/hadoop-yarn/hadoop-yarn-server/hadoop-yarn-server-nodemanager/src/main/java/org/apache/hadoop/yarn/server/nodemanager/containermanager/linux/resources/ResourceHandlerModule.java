begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * *  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements. See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership. The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License. You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  * /  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.resources
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Provides mechanisms to get various resource handlers - cpu, memory, network,  * disk etc., - based on configuration  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|ResourceHandlerModule
specifier|public
class|class
name|ResourceHandlerModule
block|{
DECL|field|resourceHandlerChain
specifier|private
specifier|volatile
specifier|static
name|ResourceHandlerChain
name|resourceHandlerChain
decl_stmt|;
comment|/**    * This specific implementation might provide resource management as well    * as resource metrics functionality. We need to ensure that the same    * instance is used for both.    */
specifier|private
specifier|volatile
specifier|static
name|TrafficControlBandwidthHandlerImpl
DECL|field|trafficControlBandwidthHandler
name|trafficControlBandwidthHandler
decl_stmt|;
DECL|field|cGroupsHandler
specifier|private
specifier|volatile
specifier|static
name|CGroupsHandler
name|cGroupsHandler
decl_stmt|;
comment|/**    * Returns an initialized, thread-safe CGroupsHandler instance    */
DECL|method|getCGroupsHandler (Configuration conf)
specifier|public
specifier|static
name|CGroupsHandler
name|getCGroupsHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
if|if
condition|(
name|cGroupsHandler
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|CGroupsHandler
operator|.
name|class
init|)
block|{
if|if
condition|(
name|cGroupsHandler
operator|==
literal|null
condition|)
block|{
name|cGroupsHandler
operator|=
operator|new
name|CGroupsHandlerImpl
argument_list|(
name|conf
argument_list|,
name|PrivilegedOperationExecutor
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|cGroupsHandler
return|;
block|}
specifier|private
specifier|static
name|TrafficControlBandwidthHandlerImpl
DECL|method|getTrafficControlBandwidthHandler (Configuration conf)
name|getTrafficControlBandwidthHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NETWORK_RESOURCE_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_NETWORK_RESOURCE_ENABLED
argument_list|)
condition|)
block|{
if|if
condition|(
name|trafficControlBandwidthHandler
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|OutboundBandwidthResourceHandler
operator|.
name|class
init|)
block|{
if|if
condition|(
name|trafficControlBandwidthHandler
operator|==
literal|null
condition|)
block|{
name|trafficControlBandwidthHandler
operator|=
operator|new
name|TrafficControlBandwidthHandlerImpl
argument_list|(
name|PrivilegedOperationExecutor
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
argument_list|,
name|getCGroupsHandler
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|TrafficController
argument_list|(
name|conf
argument_list|,
name|PrivilegedOperationExecutor
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|trafficControlBandwidthHandler
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|OutboundBandwidthResourceHandler
DECL|method|getOutboundBandwidthResourceHandler (Configuration conf)
name|getOutboundBandwidthResourceHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
return|return
name|getTrafficControlBandwidthHandler
argument_list|(
name|conf
argument_list|)
return|;
block|}
DECL|method|addHandlerIfNotNull (List<ResourceHandler> handlerList, ResourceHandler handler)
specifier|private
specifier|static
name|void
name|addHandlerIfNotNull
parameter_list|(
name|List
argument_list|<
name|ResourceHandler
argument_list|>
name|handlerList
parameter_list|,
name|ResourceHandler
name|handler
parameter_list|)
block|{
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|handlerList
operator|.
name|add
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initializeConfiguredResourceHandlerChain ( Configuration conf)
specifier|private
specifier|static
name|void
name|initializeConfiguredResourceHandlerChain
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|ArrayList
argument_list|<
name|ResourceHandler
argument_list|>
name|handlerList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|addHandlerIfNotNull
argument_list|(
name|handlerList
argument_list|,
name|getOutboundBandwidthResourceHandler
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|resourceHandlerChain
operator|=
operator|new
name|ResourceHandlerChain
argument_list|(
name|handlerList
argument_list|)
expr_stmt|;
block|}
DECL|method|getConfiguredResourceHandlerChain (Configuration conf)
specifier|public
specifier|static
name|ResourceHandlerChain
name|getConfiguredResourceHandlerChain
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
if|if
condition|(
name|resourceHandlerChain
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|ResourceHandlerModule
operator|.
name|class
init|)
block|{
if|if
condition|(
name|resourceHandlerChain
operator|==
literal|null
condition|)
block|{
name|initializeConfiguredResourceHandlerChain
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|resourceHandlerChain
operator|.
name|getResourceHandlerList
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
return|return
name|resourceHandlerChain
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

