begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * *  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements. See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership. The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License. You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  * /  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.resources
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|ResourcePlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|ResourcePluginManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|util
operator|.
name|CgroupsLCEResourcesHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|util
operator|.
name|DefaultLCEResourcesHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Provides mechanisms to get various resource handlers - cpu, memory, network,  * disk etc., - based on configuration.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|ResourceHandlerModule
specifier|public
class|class
name|ResourceHandlerModule
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ResourceHandlerModule
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|resourceHandlerChain
specifier|private
specifier|static
specifier|volatile
name|ResourceHandlerChain
name|resourceHandlerChain
decl_stmt|;
comment|/**    * This specific implementation might provide resource management as well    * as resource metrics functionality. We need to ensure that the same    * instance is used for both.    */
specifier|private
specifier|static
specifier|volatile
name|TrafficControlBandwidthHandlerImpl
DECL|field|trafficControlBandwidthHandler
name|trafficControlBandwidthHandler
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|NetworkPacketTaggingHandlerImpl
DECL|field|networkPacketTaggingHandlerImpl
name|networkPacketTaggingHandlerImpl
decl_stmt|;
DECL|field|cGroupsHandler
specifier|private
specifier|static
specifier|volatile
name|CGroupsHandler
name|cGroupsHandler
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|CGroupsBlkioResourceHandlerImpl
DECL|field|cGroupsBlkioResourceHandler
name|cGroupsBlkioResourceHandler
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|CGroupsMemoryResourceHandlerImpl
DECL|field|cGroupsMemoryResourceHandler
name|cGroupsMemoryResourceHandler
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|CGroupsCpuResourceHandlerImpl
DECL|field|cGroupsCpuResourceHandler
name|cGroupsCpuResourceHandler
decl_stmt|;
comment|/**    * Returns an initialized, thread-safe CGroupsHandler instance.    */
DECL|method|getInitializedCGroupsHandler (Configuration conf)
specifier|private
specifier|static
name|CGroupsHandler
name|getInitializedCGroupsHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
if|if
condition|(
name|cGroupsHandler
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|CGroupsHandler
operator|.
name|class
init|)
block|{
if|if
condition|(
name|cGroupsHandler
operator|==
literal|null
condition|)
block|{
name|cGroupsHandler
operator|=
operator|new
name|CGroupsHandlerImpl
argument_list|(
name|conf
argument_list|,
name|PrivilegedOperationExecutor
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|cGroupsHandler
return|;
block|}
comment|/**    * Returns a (possibly null) reference to a cGroupsHandler. This handler is    * non-null only if one or more of the known cgroups-based resource    * handlers are in use and have been initialized.    */
DECL|method|getCGroupsHandler ()
specifier|public
specifier|static
name|CGroupsHandler
name|getCGroupsHandler
parameter_list|()
block|{
return|return
name|cGroupsHandler
return|;
block|}
DECL|method|getCGroupsCpuResourceHandler ( Configuration conf)
specifier|private
specifier|static
name|CGroupsCpuResourceHandlerImpl
name|getCGroupsCpuResourceHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|boolean
name|cgroupsCpuEnabled
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CPU_RESOURCE_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_CPU_RESOURCE_ENABLED
argument_list|)
decl_stmt|;
name|boolean
name|cgroupsLCEResourcesHandlerEnabled
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LINUX_CONTAINER_RESOURCES_HANDLER
argument_list|,
name|DefaultLCEResourcesHandler
operator|.
name|class
argument_list|)
operator|.
name|equals
argument_list|(
name|CgroupsLCEResourcesHandler
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|cgroupsCpuEnabled
operator|||
name|cgroupsLCEResourcesHandlerEnabled
condition|)
block|{
if|if
condition|(
name|cGroupsCpuResourceHandler
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|CpuResourceHandler
operator|.
name|class
init|)
block|{
if|if
condition|(
name|cGroupsCpuResourceHandler
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating new cgroups cpu handler"
argument_list|)
expr_stmt|;
name|cGroupsCpuResourceHandler
operator|=
operator|new
name|CGroupsCpuResourceHandlerImpl
argument_list|(
name|getInitializedCGroupsHandler
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cGroupsCpuResourceHandler
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|TrafficControlBandwidthHandlerImpl
DECL|method|getTrafficControlBandwidthHandler (Configuration conf)
name|getTrafficControlBandwidthHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NETWORK_RESOURCE_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_NETWORK_RESOURCE_ENABLED
argument_list|)
condition|)
block|{
if|if
condition|(
name|trafficControlBandwidthHandler
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|OutboundBandwidthResourceHandler
operator|.
name|class
init|)
block|{
if|if
condition|(
name|trafficControlBandwidthHandler
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating new traffic control bandwidth handler."
argument_list|)
expr_stmt|;
name|trafficControlBandwidthHandler
operator|=
operator|new
name|TrafficControlBandwidthHandlerImpl
argument_list|(
name|PrivilegedOperationExecutor
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
argument_list|,
name|getInitializedCGroupsHandler
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|TrafficController
argument_list|(
name|conf
argument_list|,
name|PrivilegedOperationExecutor
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|trafficControlBandwidthHandler
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|getNetworkResourceHandler (Configuration conf)
specifier|public
specifier|static
name|ResourceHandler
name|getNetworkResourceHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|boolean
name|useNetworkTagHandler
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NETWORK_TAG_HANDLER_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_NETWORK_TAG_HANDLER_ENABLED
argument_list|)
decl_stmt|;
if|if
condition|(
name|useNetworkTagHandler
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using network-tagging-handler."
argument_list|)
expr_stmt|;
return|return
name|getNetworkTaggingHandler
argument_list|(
name|conf
argument_list|)
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using traffic control bandwidth handler"
argument_list|)
expr_stmt|;
return|return
name|getTrafficControlBandwidthHandler
argument_list|(
name|conf
argument_list|)
return|;
block|}
block|}
DECL|method|getNetworkTaggingHandler (Configuration conf)
specifier|public
specifier|static
name|ResourceHandler
name|getNetworkTaggingHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
if|if
condition|(
name|networkPacketTaggingHandlerImpl
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|OutboundBandwidthResourceHandler
operator|.
name|class
init|)
block|{
if|if
condition|(
name|networkPacketTaggingHandlerImpl
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating new network-tagging-handler."
argument_list|)
expr_stmt|;
name|networkPacketTaggingHandlerImpl
operator|=
operator|new
name|NetworkPacketTaggingHandlerImpl
argument_list|(
name|PrivilegedOperationExecutor
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
argument_list|,
name|getInitializedCGroupsHandler
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|networkPacketTaggingHandlerImpl
return|;
block|}
specifier|public
specifier|static
name|OutboundBandwidthResourceHandler
DECL|method|getOutboundBandwidthResourceHandler (Configuration conf)
name|getOutboundBandwidthResourceHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
return|return
name|getTrafficControlBandwidthHandler
argument_list|(
name|conf
argument_list|)
return|;
block|}
DECL|method|getDiskResourceHandler (Configuration conf)
specifier|public
specifier|static
name|DiskResourceHandler
name|getDiskResourceHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DISK_RESOURCE_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_DISK_RESOURCE_ENABLED
argument_list|)
condition|)
block|{
return|return
name|getCgroupsBlkioResourceHandler
argument_list|(
name|conf
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getCgroupsBlkioResourceHandler ( Configuration conf)
specifier|private
specifier|static
name|CGroupsBlkioResourceHandlerImpl
name|getCgroupsBlkioResourceHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
if|if
condition|(
name|cGroupsBlkioResourceHandler
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|DiskResourceHandler
operator|.
name|class
init|)
block|{
if|if
condition|(
name|cGroupsBlkioResourceHandler
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating new cgroups blkio handler"
argument_list|)
expr_stmt|;
name|cGroupsBlkioResourceHandler
operator|=
operator|new
name|CGroupsBlkioResourceHandlerImpl
argument_list|(
name|getInitializedCGroupsHandler
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|cGroupsBlkioResourceHandler
return|;
block|}
DECL|method|getMemoryResourceHandler ( Configuration conf)
specifier|public
specifier|static
name|MemoryResourceHandler
name|getMemoryResourceHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_MEMORY_RESOURCE_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_MEMORY_RESOURCE_ENABLED
argument_list|)
condition|)
block|{
return|return
name|getCgroupsMemoryResourceHandler
argument_list|(
name|conf
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|CGroupsMemoryResourceHandlerImpl
DECL|method|getCgroupsMemoryResourceHandler ( Configuration conf)
name|getCgroupsMemoryResourceHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
if|if
condition|(
name|cGroupsMemoryResourceHandler
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|MemoryResourceHandler
operator|.
name|class
init|)
block|{
if|if
condition|(
name|cGroupsMemoryResourceHandler
operator|==
literal|null
condition|)
block|{
name|cGroupsMemoryResourceHandler
operator|=
operator|new
name|CGroupsMemoryResourceHandlerImpl
argument_list|(
name|getInitializedCGroupsHandler
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|cGroupsMemoryResourceHandler
return|;
block|}
DECL|method|addHandlerIfNotNull (List<ResourceHandler> handlerList, ResourceHandler handler)
specifier|private
specifier|static
name|void
name|addHandlerIfNotNull
parameter_list|(
name|List
argument_list|<
name|ResourceHandler
argument_list|>
name|handlerList
parameter_list|,
name|ResourceHandler
name|handler
parameter_list|)
block|{
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|handlerList
operator|.
name|add
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initializeConfiguredResourceHandlerChain ( Configuration conf, Context nmContext)
specifier|private
specifier|static
name|void
name|initializeConfiguredResourceHandlerChain
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Context
name|nmContext
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|ArrayList
argument_list|<
name|ResourceHandler
argument_list|>
name|handlerList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|addHandlerIfNotNull
argument_list|(
name|handlerList
argument_list|,
name|getNetworkResourceHandler
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|addHandlerIfNotNull
argument_list|(
name|handlerList
argument_list|,
name|getDiskResourceHandler
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|addHandlerIfNotNull
argument_list|(
name|handlerList
argument_list|,
name|getMemoryResourceHandler
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|addHandlerIfNotNull
argument_list|(
name|handlerList
argument_list|,
name|getCGroupsCpuResourceHandler
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|addHandlersFromConfiguredResourcePlugins
argument_list|(
name|handlerList
argument_list|,
name|conf
argument_list|,
name|nmContext
argument_list|)
expr_stmt|;
name|resourceHandlerChain
operator|=
operator|new
name|ResourceHandlerChain
argument_list|(
name|handlerList
argument_list|)
expr_stmt|;
block|}
DECL|method|addHandlersFromConfiguredResourcePlugins ( List<ResourceHandler> handlerList, Configuration conf, Context nmContext)
specifier|private
specifier|static
name|void
name|addHandlersFromConfiguredResourcePlugins
parameter_list|(
name|List
argument_list|<
name|ResourceHandler
argument_list|>
name|handlerList
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Context
name|nmContext
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|ResourcePluginManager
name|pluginManager
init|=
name|nmContext
operator|.
name|getResourcePluginManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|pluginManager
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ResourcePlugin
argument_list|>
name|pluginMap
init|=
name|pluginManager
operator|.
name|getNameToPlugins
argument_list|()
decl_stmt|;
if|if
condition|(
name|pluginMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ResourcePlugin
name|plugin
range|:
name|pluginMap
operator|.
name|values
argument_list|()
control|)
block|{
name|addHandlerIfNotNull
argument_list|(
name|handlerList
argument_list|,
name|plugin
operator|.
name|createResourceHandler
argument_list|(
name|nmContext
argument_list|,
name|getInitializedCGroupsHandler
argument_list|(
name|conf
argument_list|)
argument_list|,
name|PrivilegedOperationExecutor
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|getConfiguredResourceHandlerChain ( Configuration conf, Context nmContext)
specifier|public
specifier|static
name|ResourceHandlerChain
name|getConfiguredResourceHandlerChain
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Context
name|nmContext
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
if|if
condition|(
name|resourceHandlerChain
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|ResourceHandlerModule
operator|.
name|class
init|)
block|{
if|if
condition|(
name|resourceHandlerChain
operator|==
literal|null
condition|)
block|{
name|initializeConfiguredResourceHandlerChain
argument_list|(
name|conf
argument_list|,
name|nmContext
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|resourceHandlerChain
operator|.
name|getResourceHandlerList
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
return|return
name|resourceHandlerChain
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|nullifyResourceHandlerChain ()
specifier|static
name|void
name|nullifyResourceHandlerChain
parameter_list|()
throws|throws
name|ResourceHandlerException
block|{
name|resourceHandlerChain
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * If a cgroup mount directory is specified, it returns cgroup directories    * with valid names.    * The requirement is that each hierarchy has to be named with the comma    * separated names of subsystems supported.    * For example: /sys/fs/cgroup/cpu,cpuacct    * @param cgroupMountPath Root cgroup mount path (/sys/fs/cgroup in the    *                        example above)    * @return A path to cgroup subsystem set mapping in the same format as    *         {@link CGroupsHandlerImpl#parseMtab(String)}    * @throws IOException if the specified directory cannot be listed    */
DECL|method|parseConfiguredCGroupPath ( String cgroupMountPath)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|parseConfiguredCGroupPath
parameter_list|(
name|String
name|cgroupMountPath
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|cgroupDir
init|=
operator|new
name|File
argument_list|(
name|cgroupMountPath
argument_list|)
decl_stmt|;
name|File
index|[]
name|list
init|=
name|cgroupDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Empty cgroup mount directory specified: "
operator|+
name|cgroupMountPath
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|pathSubsystemMappings
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|validCGroups
init|=
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|getValidCGroups
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|candidate
range|:
name|list
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|cgroupList
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|candidate
operator|.
name|getName
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Collect the valid subsystem names
name|cgroupList
operator|.
name|retainAll
argument_list|(
name|validCGroups
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cgroupList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|candidate
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|pathSubsystemMappings
operator|.
name|put
argument_list|(
name|candidate
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|cgroupList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The following cgroup is not a directory "
operator|+
name|candidate
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|pathSubsystemMappings
return|;
block|}
block|}
end_class

end_unit

