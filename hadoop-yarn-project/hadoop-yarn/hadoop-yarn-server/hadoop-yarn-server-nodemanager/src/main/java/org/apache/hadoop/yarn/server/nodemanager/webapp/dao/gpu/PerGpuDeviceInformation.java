begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.webapp.dao.gpu
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|gpu
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|adapters
operator|.
name|XmlAdapter
import|;
end_import

begin_comment
comment|/**  * Capture single GPU device information such as memory size, temperature,  * utilization.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"gpu"
argument_list|)
DECL|class|PerGpuDeviceInformation
specifier|public
class|class
name|PerGpuDeviceInformation
block|{
DECL|field|productName
specifier|private
name|String
name|productName
init|=
literal|"N/A"
decl_stmt|;
DECL|field|uuid
specifier|private
name|String
name|uuid
init|=
literal|"N/A"
decl_stmt|;
DECL|field|minorNumber
specifier|private
name|int
name|minorNumber
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|gpuUtilizations
specifier|private
name|PerGpuUtilizations
name|gpuUtilizations
decl_stmt|;
DECL|field|gpuMemoryUsage
specifier|private
name|PerGpuMemoryUsage
name|gpuMemoryUsage
decl_stmt|;
DECL|field|temperature
specifier|private
name|PerGpuTemperature
name|temperature
decl_stmt|;
comment|/**    * Convert formats like "34 C", "75.6 %" to float.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|StrToFloatBeforeSpaceAdapter
specifier|static
class|class
name|StrToFloatBeforeSpaceAdapter
extends|extends
name|XmlAdapter
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
block|{
annotation|@
name|Override
DECL|method|marshal (Float v)
specifier|public
name|String
name|marshal
parameter_list|(
name|Float
name|v
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|v
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|unmarshal (String v)
specifier|public
name|Float
name|unmarshal
parameter_list|(
name|String
name|v
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1f
return|;
block|}
return|return
name|Float
operator|.
name|valueOf
argument_list|(
name|v
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
comment|/**    * Convert formats like "725 MiB" to long.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|StrToMemAdapter
specifier|static
class|class
name|StrToMemAdapter
extends|extends
name|XmlAdapter
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
block|{
annotation|@
name|Override
DECL|method|marshal (Long v)
specifier|public
name|String
name|marshal
parameter_list|(
name|Long
name|v
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|v
argument_list|)
operator|+
literal|" MiB"
return|;
block|}
annotation|@
name|Override
DECL|method|unmarshal (String v)
specifier|public
name|Long
name|unmarshal
parameter_list|(
name|String
name|v
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1L
return|;
block|}
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|v
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"temperature"
argument_list|)
DECL|method|getTemperature ()
specifier|public
name|PerGpuTemperature
name|getTemperature
parameter_list|()
block|{
return|return
name|temperature
return|;
block|}
DECL|method|setTemperature (PerGpuTemperature temperature)
specifier|public
name|void
name|setTemperature
parameter_list|(
name|PerGpuTemperature
name|temperature
parameter_list|)
block|{
name|this
operator|.
name|temperature
operator|=
name|temperature
expr_stmt|;
block|}
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"uuid"
argument_list|)
DECL|method|getUuid ()
specifier|public
name|String
name|getUuid
parameter_list|()
block|{
return|return
name|uuid
return|;
block|}
DECL|method|setUuid (String uuid)
specifier|public
name|void
name|setUuid
parameter_list|(
name|String
name|uuid
parameter_list|)
block|{
name|this
operator|.
name|uuid
operator|=
name|uuid
expr_stmt|;
block|}
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"product_name"
argument_list|)
DECL|method|getProductName ()
specifier|public
name|String
name|getProductName
parameter_list|()
block|{
return|return
name|productName
return|;
block|}
DECL|method|setProductName (String productName)
specifier|public
name|void
name|setProductName
parameter_list|(
name|String
name|productName
parameter_list|)
block|{
name|this
operator|.
name|productName
operator|=
name|productName
expr_stmt|;
block|}
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"minor_number"
argument_list|)
DECL|method|getMinorNumber ()
specifier|public
name|int
name|getMinorNumber
parameter_list|()
block|{
return|return
name|minorNumber
return|;
block|}
DECL|method|setMinorNumber (int minorNumber)
specifier|public
name|void
name|setMinorNumber
parameter_list|(
name|int
name|minorNumber
parameter_list|)
block|{
name|this
operator|.
name|minorNumber
operator|=
name|minorNumber
expr_stmt|;
block|}
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"utilization"
argument_list|)
DECL|method|getGpuUtilizations ()
specifier|public
name|PerGpuUtilizations
name|getGpuUtilizations
parameter_list|()
block|{
return|return
name|gpuUtilizations
return|;
block|}
DECL|method|setGpuUtilizations (PerGpuUtilizations utilizations)
specifier|public
name|void
name|setGpuUtilizations
parameter_list|(
name|PerGpuUtilizations
name|utilizations
parameter_list|)
block|{
name|this
operator|.
name|gpuUtilizations
operator|=
name|utilizations
expr_stmt|;
block|}
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"bar1_memory_usage"
argument_list|)
DECL|method|getGpuMemoryUsage ()
specifier|public
name|PerGpuMemoryUsage
name|getGpuMemoryUsage
parameter_list|()
block|{
return|return
name|gpuMemoryUsage
return|;
block|}
DECL|method|setGpuMemoryUsage (PerGpuMemoryUsage gpuMemoryUsage)
specifier|public
name|void
name|setGpuMemoryUsage
parameter_list|(
name|PerGpuMemoryUsage
name|gpuMemoryUsage
parameter_list|)
block|{
name|this
operator|.
name|gpuMemoryUsage
operator|=
name|gpuMemoryUsage
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ProductName="
argument_list|)
operator|.
name|append
argument_list|(
name|productName
argument_list|)
operator|.
name|append
argument_list|(
literal|", MinorNumber="
argument_list|)
operator|.
name|append
argument_list|(
name|minorNumber
argument_list|)
expr_stmt|;
if|if
condition|(
name|getGpuMemoryUsage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", TotalMemory="
argument_list|)
operator|.
name|append
argument_list|(
name|getGpuMemoryUsage
argument_list|()
operator|.
name|getTotalMemoryMiB
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"MiB"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getGpuUtilizations
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", Utilization="
argument_list|)
operator|.
name|append
argument_list|(
name|getGpuUtilizations
argument_list|()
operator|.
name|getOverallGpuUtilization
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"%"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

