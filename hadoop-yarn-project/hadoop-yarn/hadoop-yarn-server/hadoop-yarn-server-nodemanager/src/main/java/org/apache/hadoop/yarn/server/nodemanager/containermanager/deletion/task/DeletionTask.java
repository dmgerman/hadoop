begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.deletion.task
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|deletion
operator|.
name|task
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|DeletionServiceDeleteTaskProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DeletionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * DeletionTasks are supplied to the {@link DeletionService} for deletion.  */
end_comment

begin_class
DECL|class|DeletionTask
specifier|public
specifier|abstract
class|class
name|DeletionTask
implements|implements
name|Runnable
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DeletionTask
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|INVALID_TASK_ID
specifier|public
specifier|static
specifier|final
name|int
name|INVALID_TASK_ID
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|taskId
specifier|private
name|int
name|taskId
decl_stmt|;
DECL|field|user
specifier|private
name|String
name|user
decl_stmt|;
DECL|field|deletionTaskType
specifier|private
name|DeletionTaskType
name|deletionTaskType
decl_stmt|;
DECL|field|deletionService
specifier|private
name|DeletionService
name|deletionService
decl_stmt|;
DECL|field|numberOfPendingPredecessorTasks
specifier|private
specifier|final
name|AtomicInteger
name|numberOfPendingPredecessorTasks
decl_stmt|;
DECL|field|successorTaskSet
specifier|private
specifier|final
name|Set
argument_list|<
name|DeletionTask
argument_list|>
name|successorTaskSet
decl_stmt|;
comment|// By default all tasks will start as success=true; however if any of
comment|// the dependent task fails then it will be marked as false in
comment|// deletionTaskFinished().
DECL|field|success
specifier|private
name|boolean
name|success
decl_stmt|;
comment|/**    * Deletion task with taskId and default values.    *    * @param taskId              the ID of the task, if previously set.    * @param deletionService     the {@link DeletionService}.    * @param user                the user associated with the delete.    * @param deletionTaskType    the {@link DeletionTaskType}.    */
DECL|method|DeletionTask (int taskId, DeletionService deletionService, String user, DeletionTaskType deletionTaskType)
specifier|public
name|DeletionTask
parameter_list|(
name|int
name|taskId
parameter_list|,
name|DeletionService
name|deletionService
parameter_list|,
name|String
name|user
parameter_list|,
name|DeletionTaskType
name|deletionTaskType
parameter_list|)
block|{
name|this
argument_list|(
name|taskId
argument_list|,
name|deletionService
argument_list|,
name|user
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|HashSet
argument_list|<
name|DeletionTask
argument_list|>
argument_list|()
argument_list|,
name|deletionTaskType
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deletion task with taskId and user supplied values.    *    * @param taskId              the ID of the task, if previously set.    * @param deletionService     the {@link DeletionService}.    * @param user                the user associated with the delete.    * @param numberOfPendingPredecessorTasks  Number of pending tasks.    * @param successorTaskSet    the list of successor DeletionTasks    * @param deletionTaskType    the {@link DeletionTaskType}.    */
DECL|method|DeletionTask (int taskId, DeletionService deletionService, String user, AtomicInteger numberOfPendingPredecessorTasks, Set<DeletionTask> successorTaskSet, DeletionTaskType deletionTaskType)
specifier|public
name|DeletionTask
parameter_list|(
name|int
name|taskId
parameter_list|,
name|DeletionService
name|deletionService
parameter_list|,
name|String
name|user
parameter_list|,
name|AtomicInteger
name|numberOfPendingPredecessorTasks
parameter_list|,
name|Set
argument_list|<
name|DeletionTask
argument_list|>
name|successorTaskSet
parameter_list|,
name|DeletionTaskType
name|deletionTaskType
parameter_list|)
block|{
name|this
operator|.
name|taskId
operator|=
name|taskId
expr_stmt|;
name|this
operator|.
name|deletionService
operator|=
name|deletionService
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|numberOfPendingPredecessorTasks
operator|=
name|numberOfPendingPredecessorTasks
expr_stmt|;
name|this
operator|.
name|successorTaskSet
operator|=
name|successorTaskSet
expr_stmt|;
name|this
operator|.
name|deletionTaskType
operator|=
name|deletionTaskType
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Get the taskId for the DeletionTask.    *    * @return the taskId.    */
DECL|method|getTaskId ()
specifier|public
name|int
name|getTaskId
parameter_list|()
block|{
return|return
name|taskId
return|;
block|}
comment|/**    * Set the taskId for the DeletionTask.    *    * @param taskId the taskId.    */
DECL|method|setTaskId (int taskId)
specifier|public
name|void
name|setTaskId
parameter_list|(
name|int
name|taskId
parameter_list|)
block|{
name|this
operator|.
name|taskId
operator|=
name|taskId
expr_stmt|;
block|}
comment|/**    * The the user assoicated with the DeletionTask.    *    * @return the user name.    */
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
comment|/**    * Get the {@link DeletionService} for this DeletionTask.    *    * @return the {@link DeletionService}.    */
DECL|method|getDeletionService ()
specifier|public
name|DeletionService
name|getDeletionService
parameter_list|()
block|{
return|return
name|deletionService
return|;
block|}
comment|/**    * Get the {@link DeletionTaskType} for this DeletionTask.    *    * @return the {@link DeletionTaskType}.    */
DECL|method|getDeletionTaskType ()
specifier|public
name|DeletionTaskType
name|getDeletionTaskType
parameter_list|()
block|{
return|return
name|deletionTaskType
return|;
block|}
comment|/**    * Set the DeletionTask run status.    *    * @param success the status of the running DeletionTask.    */
DECL|method|setSuccess (boolean success)
specifier|public
specifier|synchronized
name|void
name|setSuccess
parameter_list|(
name|boolean
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
comment|/**    * Return the DeletionTask run status.    *    * @return the status of the running DeletionTask.    */
DECL|method|getSucess ()
specifier|public
specifier|synchronized
name|boolean
name|getSucess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
comment|/**    * Return the list of successor tasks for the DeletionTask.    *    * @return the list of successor tasks.    */
DECL|method|getSuccessorTasks ()
specifier|public
specifier|synchronized
name|DeletionTask
index|[]
name|getSuccessorTasks
parameter_list|()
block|{
name|DeletionTask
index|[]
name|successors
init|=
operator|new
name|DeletionTask
index|[
name|successorTaskSet
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
return|return
name|successorTaskSet
operator|.
name|toArray
argument_list|(
name|successors
argument_list|)
return|;
block|}
comment|/**    * Convert the DeletionTask to the Protobuf representation for storing in the    * state store and recovery.    *    * @return the protobuf representation of the DeletionTask.    */
DECL|method|convertDeletionTaskToProto ()
specifier|public
specifier|abstract
name|DeletionServiceDeleteTaskProto
name|convertDeletionTaskToProto
parameter_list|()
function_decl|;
comment|/**    * Add a dependent DeletionTask.    *    * If there is a task dependency between say tasks 1,2,3 such that    * task2 and task3 can be started only after task1 then we should define    * task2 and task3 as successor tasks for task1.    * Note:- Task dependency should be defined prior to calling delete.    *    * @param successorTask the DeletionTask the depends on this DeletionTask.    */
DECL|method|addDeletionTaskDependency ( DeletionTask successorTask)
specifier|public
specifier|synchronized
name|void
name|addDeletionTaskDependency
parameter_list|(
name|DeletionTask
name|successorTask
parameter_list|)
block|{
if|if
condition|(
name|successorTaskSet
operator|.
name|add
argument_list|(
name|successorTask
argument_list|)
condition|)
block|{
name|successorTask
operator|.
name|incrementAndGetPendingPredecessorTasks
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Increments and returns pending predecessor task count.    *    * @return the number of pending predecessor DeletionTasks.    */
DECL|method|incrementAndGetPendingPredecessorTasks ()
specifier|public
name|int
name|incrementAndGetPendingPredecessorTasks
parameter_list|()
block|{
return|return
name|numberOfPendingPredecessorTasks
operator|.
name|incrementAndGet
argument_list|()
return|;
block|}
comment|/**    * Decrements and returns pending predecessor task count.    *    * @return the number of pending predecessor DeletionTasks.    */
DECL|method|decrementAndGetPendingPredecessorTasks ()
specifier|public
name|int
name|decrementAndGetPendingPredecessorTasks
parameter_list|()
block|{
return|return
name|numberOfPendingPredecessorTasks
operator|.
name|decrementAndGet
argument_list|()
return|;
block|}
comment|/**    * Removes the DeletionTask from the state store and validates that successor    * tasks have been scheduled and completed.    *    * This is called when:    * 1) Current deletion task ran and finished.    * 2) When directly called by predecessor task if one of the    * dependent tasks of it has failed marking its success = false.    */
DECL|method|deletionTaskFinished ()
specifier|synchronized
name|void
name|deletionTaskFinished
parameter_list|()
block|{
try|try
block|{
name|NMStateStoreService
name|stateStore
init|=
name|deletionService
operator|.
name|getStateStore
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|removeDeletionTask
argument_list|(
name|taskId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to remove deletion task "
operator|+
name|taskId
operator|+
literal|" from state store"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|DeletionTask
argument_list|>
name|successorTaskI
init|=
name|this
operator|.
name|successorTaskSet
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|successorTaskI
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DeletionTask
name|successorTask
init|=
name|successorTaskI
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|successorTask
operator|.
name|setSuccess
argument_list|(
name|success
argument_list|)
expr_stmt|;
block|}
name|int
name|count
init|=
name|successorTask
operator|.
name|decrementAndGetPendingPredecessorTasks
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|successorTask
operator|.
name|getSucess
argument_list|()
condition|)
block|{
name|successorTask
operator|.
name|deletionService
operator|.
name|delete
argument_list|(
name|successorTask
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|successorTask
operator|.
name|deletionTaskFinished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Return the Protobuf builder with the base DeletionTask attributes.    *    * @return pre-populated Buidler with the base attributes.    */
DECL|method|getBaseDeletionTaskProtoBuilder ()
name|DeletionServiceDeleteTaskProto
operator|.
name|Builder
name|getBaseDeletionTaskProtoBuilder
parameter_list|()
block|{
name|DeletionServiceDeleteTaskProto
operator|.
name|Builder
name|builder
init|=
name|DeletionServiceDeleteTaskProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setId
argument_list|(
name|getTaskId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setUser
argument_list|(
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setDeletionTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|getDeletionService
argument_list|()
operator|.
name|getDebugDelay
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|DeletionTask
name|successor
range|:
name|getSuccessorTasks
argument_list|()
control|)
block|{
name|builder
operator|.
name|addSuccessorIds
argument_list|(
name|successor
operator|.
name|getTaskId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

