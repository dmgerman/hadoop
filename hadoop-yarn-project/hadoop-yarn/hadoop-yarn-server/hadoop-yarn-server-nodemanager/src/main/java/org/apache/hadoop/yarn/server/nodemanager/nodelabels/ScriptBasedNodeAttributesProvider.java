begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.nodelabels
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|nodelabels
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAttributeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|NodeLabelUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|NM_SCRIPT_BASED_NODE_ATTRIBUTES_PROVIDER_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|NM_SCRIPT_BASED_NODE_ATTRIBUTES_PROVIDER_OPTS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|NM_NODE_ATTRIBUTES_PROVIDER_FETCH_INTERVAL_MS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|NM_NODE_ATTRIBUTES_PROVIDER_FETCH_TIMEOUT_MS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|DEFAULT_NM_NODE_ATTRIBUTES_PROVIDER_FETCH_INTERVAL_MS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|DEFAULT_NM_NODE_ATTRIBUTES_PROVIDER_FETCH_TIMEOUT_MS
import|;
end_import

begin_comment
comment|/**  * Node attribute provider that periodically runs a script to collect  * node attributes.  */
end_comment

begin_class
DECL|class|ScriptBasedNodeAttributesProvider
specifier|public
class|class
name|ScriptBasedNodeAttributesProvider
extends|extends
name|NodeAttributesProvider
block|{
DECL|field|NODE_ATTRIBUTE_PATTERN
specifier|private
specifier|static
specifier|final
name|String
name|NODE_ATTRIBUTE_PATTERN
init|=
literal|"NODE_ATTRIBUTE:"
decl_stmt|;
DECL|field|NODE_ATTRIBUTE_DELIMITER
specifier|private
specifier|static
specifier|final
name|String
name|NODE_ATTRIBUTE_DELIMITER
init|=
literal|","
decl_stmt|;
DECL|field|runner
specifier|private
name|NodeAttributeScriptRunner
name|runner
decl_stmt|;
DECL|method|ScriptBasedNodeAttributesProvider ()
specifier|public
name|ScriptBasedNodeAttributesProvider
parameter_list|()
block|{
name|super
argument_list|(
name|ScriptBasedNodeAttributesProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|nodeAttributeProviderScript
init|=
name|conf
operator|.
name|get
argument_list|(
name|NM_SCRIPT_BASED_NODE_ATTRIBUTES_PROVIDER_PATH
argument_list|)
decl_stmt|;
name|long
name|scriptTimeout
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|NM_NODE_ATTRIBUTES_PROVIDER_FETCH_TIMEOUT_MS
argument_list|,
name|DEFAULT_NM_NODE_ATTRIBUTES_PROVIDER_FETCH_TIMEOUT_MS
argument_list|)
decl_stmt|;
name|String
index|[]
name|scriptArgs
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|NM_SCRIPT_BASED_NODE_ATTRIBUTES_PROVIDER_OPTS
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|verifyConfiguredScript
argument_list|(
name|nodeAttributeProviderScript
argument_list|)
expr_stmt|;
name|long
name|intervalTime
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|NM_NODE_ATTRIBUTES_PROVIDER_FETCH_INTERVAL_MS
argument_list|,
name|DEFAULT_NM_NODE_ATTRIBUTES_PROVIDER_FETCH_INTERVAL_MS
argument_list|)
decl_stmt|;
name|this
operator|.
name|setIntervalTime
argument_list|(
name|intervalTime
argument_list|)
expr_stmt|;
name|this
operator|.
name|runner
operator|=
operator|new
name|NodeAttributeScriptRunner
argument_list|(
name|nodeAttributeProviderScript
argument_list|,
name|scriptArgs
argument_list|,
name|scriptTimeout
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|cleanUp ()
specifier|protected
name|void
name|cleanUp
parameter_list|()
throws|throws
name|Exception
block|{
name|runner
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createTimerTask ()
specifier|public
name|TimerTask
name|createTimerTask
parameter_list|()
block|{
return|return
name|runner
return|;
block|}
DECL|class|NodeAttributeScriptRunner
specifier|private
specifier|static
class|class
name|NodeAttributeScriptRunner
extends|extends
name|NodeDescriptorsScriptRunner
argument_list|<
name|NodeAttribute
argument_list|>
block|{
DECL|method|NodeAttributeScriptRunner (String scriptPath, String[] scriptArgs, long scriptTimeout, ScriptBasedNodeAttributesProvider provider)
name|NodeAttributeScriptRunner
parameter_list|(
name|String
name|scriptPath
parameter_list|,
name|String
index|[]
name|scriptArgs
parameter_list|,
name|long
name|scriptTimeout
parameter_list|,
name|ScriptBasedNodeAttributesProvider
name|provider
parameter_list|)
block|{
name|super
argument_list|(
name|scriptPath
argument_list|,
name|scriptArgs
argument_list|,
name|scriptTimeout
argument_list|,
name|provider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parseOutput (String scriptOutput)
name|Set
argument_list|<
name|NodeAttribute
argument_list|>
name|parseOutput
parameter_list|(
name|String
name|scriptOutput
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|NodeAttribute
argument_list|>
name|attributeSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// TODO finalize format
comment|// each line is a record of ndoe attribute like following:
comment|// NODE_ATTRIBUTE:ATTRIBUTE_NAME,ATTRIBUTE_TYPE,ATTRIBUTE_VALUE
name|String
index|[]
name|splits
init|=
name|scriptOutput
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|splits
control|)
block|{
name|String
name|trimmedLine
init|=
name|line
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|trimmedLine
operator|.
name|startsWith
argument_list|(
name|NODE_ATTRIBUTE_PATTERN
argument_list|)
condition|)
block|{
name|String
name|nodeAttribute
init|=
name|trimmedLine
operator|.
name|substring
argument_list|(
name|NODE_ATTRIBUTE_PATTERN
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|attributeStrs
init|=
name|nodeAttribute
operator|.
name|split
argument_list|(
name|NODE_ATTRIBUTE_DELIMITER
argument_list|)
decl_stmt|;
if|if
condition|(
name|attributeStrs
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Malformed output, expecting format "
operator|+
name|NODE_ATTRIBUTE_PATTERN
operator|+
literal|":"
operator|+
literal|"ATTRIBUTE_NAME"
operator|+
name|NODE_ATTRIBUTE_DELIMITER
operator|+
literal|"ATTRIBUTE_TYPE"
operator|+
name|NODE_ATTRIBUTE_DELIMITER
operator|+
literal|"ATTRIBUTE_VALUE; but get "
operator|+
name|nodeAttribute
argument_list|)
throw|;
block|}
comment|// We don't allow script to overwrite our dist prefix,
comment|// so disallow any prefix set in the script.
if|if
condition|(
name|attributeStrs
index|[
literal|0
index|]
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Node attributes reported by script"
operator|+
literal|" should not contain any prefix."
argument_list|)
throw|;
block|}
comment|// Automatically setup prefix for collected attributes
name|NodeAttribute
name|na
init|=
name|NodeAttribute
operator|.
name|newInstance
argument_list|(
name|NodeAttribute
operator|.
name|PREFIX_DISTRIBUTED
argument_list|,
name|attributeStrs
index|[
literal|0
index|]
argument_list|,
name|NodeAttributeType
operator|.
name|valueOf
argument_list|(
name|attributeStrs
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|attributeStrs
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
comment|// Since a NodeAttribute is identical with another one as long as
comment|// their prefix and name are same, to avoid attributes getting
comment|// overwritten by ambiguous attribute, make sure it fails in such
comment|// case.
if|if
condition|(
operator|!
name|attributeSet
operator|.
name|add
argument_list|(
name|na
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Ambiguous node attribute is found: "
operator|+
name|na
operator|.
name|toString
argument_list|()
operator|+
literal|", a same attribute already exists"
argument_list|)
throw|;
block|}
block|}
block|}
comment|// Before updating the attributes to the provider,
comment|// verify if they are valid
try|try
block|{
name|NodeLabelUtil
operator|.
name|validateNodeAttributes
argument_list|(
name|attributeSet
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Node attributes collected by the script "
operator|+
literal|"contains some invalidate entries. Detail message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|attributeSet
return|;
block|}
block|}
block|}
end_class

end_unit

