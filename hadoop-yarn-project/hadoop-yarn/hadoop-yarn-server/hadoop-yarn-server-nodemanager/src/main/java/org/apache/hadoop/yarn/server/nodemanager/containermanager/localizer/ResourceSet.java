begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_comment
comment|/**  * All Resources requested by the container.  */
end_comment

begin_class
DECL|class|ResourceSet
specifier|public
class|class
name|ResourceSet
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ResourceSet
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// resources by localization state (localized, pending, failed)
DECL|field|localizedResources
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|localizedResources
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|pendingResources
specifier|private
name|Map
argument_list|<
name|LocalResourceRequest
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|pendingResources
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|resourcesFailedToBeLocalized
specifier|private
name|Set
argument_list|<
name|LocalResourceRequest
argument_list|>
name|resourcesFailedToBeLocalized
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// resources by visibility (public, private, app)
DECL|field|publicRsrcs
specifier|private
specifier|final
name|List
argument_list|<
name|LocalResourceRequest
argument_list|>
name|publicRsrcs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|privateRsrcs
specifier|private
specifier|final
name|List
argument_list|<
name|LocalResourceRequest
argument_list|>
name|privateRsrcs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|appRsrcs
specifier|private
specifier|final
name|List
argument_list|<
name|LocalResourceRequest
argument_list|>
name|appRsrcs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|resourcesToBeUploaded
specifier|private
specifier|final
name|Map
argument_list|<
name|LocalResourceRequest
argument_list|,
name|Path
argument_list|>
name|resourcesToBeUploaded
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|resourcesUploadPolicies
specifier|private
specifier|final
name|Map
argument_list|<
name|LocalResourceRequest
argument_list|,
name|Boolean
argument_list|>
name|resourcesUploadPolicies
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|Map
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
DECL|method|addResources (Map<String, LocalResource> localResourceMap)
name|addResources
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResourceMap
parameter_list|)
throws|throws
name|URISyntaxException
block|{
if|if
condition|(
name|localResourceMap
operator|==
literal|null
operator|||
name|localResourceMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|LocalResourceRequest
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|allResources
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LocalResourceRequest
argument_list|>
name|publicList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LocalResourceRequest
argument_list|>
name|privateList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LocalResourceRequest
argument_list|>
name|appList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|rsrc
range|:
name|localResourceMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LocalResource
name|resource
init|=
name|rsrc
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LocalResourceRequest
name|req
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|rsrc
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|allResources
operator|.
name|putIfAbsent
argument_list|(
name|req
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|allResources
operator|.
name|get
argument_list|(
name|req
argument_list|)
operator|.
name|add
argument_list|(
name|rsrc
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|storeSharedCacheUploadPolicy
argument_list|(
name|req
argument_list|,
name|resource
operator|.
name|getShouldBeUploadedToSharedCache
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|resource
operator|.
name|getVisibility
argument_list|()
condition|)
block|{
case|case
name|PUBLIC
case|:
name|publicList
operator|.
name|add
argument_list|(
name|req
argument_list|)
expr_stmt|;
break|break;
case|case
name|PRIVATE
case|:
name|privateList
operator|.
name|add
argument_list|(
name|req
argument_list|)
expr_stmt|;
break|break;
case|case
name|APPLICATION
case|:
name|appList
operator|.
name|add
argument_list|(
name|req
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
name|Map
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|req
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|publicList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|publicRsrcs
operator|.
name|addAll
argument_list|(
name|publicList
argument_list|)
expr_stmt|;
name|req
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|publicList
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|privateList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|privateRsrcs
operator|.
name|addAll
argument_list|(
name|privateList
argument_list|)
expr_stmt|;
name|req
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|privateList
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|appList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|appRsrcs
operator|.
name|addAll
argument_list|(
name|appList
argument_list|)
expr_stmt|;
name|req
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|,
name|appList
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|allResources
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|pendingResources
operator|.
name|putAll
argument_list|(
name|allResources
argument_list|)
expr_stmt|;
block|}
return|return
name|req
return|;
block|}
comment|/**    * Called when resource localized.    * @param request The original request for the localized resource    * @param location The path where the resource is localized    * @return The list of symlinks for the localized resources.    */
DECL|method|resourceLocalized (LocalResourceRequest request, Path location)
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|resourceLocalized
parameter_list|(
name|LocalResourceRequest
name|request
parameter_list|,
name|Path
name|location
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|symlinks
init|=
name|pendingResources
operator|.
name|remove
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|symlinks
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
for|for
control|(
name|String
name|symlink
range|:
name|symlinks
control|)
block|{
name|localizedResources
operator|.
name|put
argument_list|(
name|symlink
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
return|return
name|symlinks
return|;
block|}
block|}
DECL|method|resourceLocalizationFailed (LocalResourceRequest request)
specifier|public
name|void
name|resourceLocalizationFailed
parameter_list|(
name|LocalResourceRequest
name|request
parameter_list|)
block|{
name|pendingResources
operator|.
name|remove
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|resourcesFailedToBeLocalized
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|Map
argument_list|<
name|LocalResourceVisibility
argument_list|,
DECL|method|getAllResourcesByVisibility ()
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|getAllResourcesByVisibility
parameter_list|()
block|{
name|Map
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|rsrc
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|publicRsrcs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rsrc
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|publicRsrcs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|privateRsrcs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rsrc
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|privateRsrcs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|appRsrcs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rsrc
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|,
name|appRsrcs
argument_list|)
expr_stmt|;
block|}
return|return
name|rsrc
return|;
block|}
comment|/**    * Store the resource's shared cache upload policies    * Given LocalResourceRequest can be shared across containers in    * LocalResourcesTrackerImpl, we preserve the upload policies here.    * In addition, it is possible for the application to create several    * "identical" LocalResources as part of    * ContainerLaunchContext.setLocalResources with different symlinks.    * There is a corner case where these "identical" local resources have    * different upload policies. For that scenario, upload policy will be set to    * true as long as there is at least one LocalResource entry with    * upload policy set to true.    */
DECL|method|storeSharedCacheUploadPolicy ( LocalResourceRequest resourceRequest, Boolean uploadPolicy)
specifier|private
name|void
name|storeSharedCacheUploadPolicy
parameter_list|(
name|LocalResourceRequest
name|resourceRequest
parameter_list|,
name|Boolean
name|uploadPolicy
parameter_list|)
block|{
name|Boolean
name|storedUploadPolicy
init|=
name|resourcesUploadPolicies
operator|.
name|get
argument_list|(
name|resourceRequest
argument_list|)
decl_stmt|;
if|if
condition|(
name|storedUploadPolicy
operator|==
literal|null
operator|||
operator|(
operator|!
name|storedUploadPolicy
operator|&&
name|uploadPolicy
operator|)
condition|)
block|{
name|resourcesUploadPolicies
operator|.
name|put
argument_list|(
name|resourceRequest
argument_list|,
name|uploadPolicy
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getLocalizedResources ()
specifier|public
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getLocalizedResources
parameter_list|()
block|{
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|entry
range|:
name|localizedResources
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|map
operator|.
name|putIfAbsent
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
DECL|method|getResourcesToBeUploaded ()
specifier|public
name|Map
argument_list|<
name|LocalResourceRequest
argument_list|,
name|Path
argument_list|>
name|getResourcesToBeUploaded
parameter_list|()
block|{
return|return
name|resourcesToBeUploaded
return|;
block|}
DECL|method|getResourcesUploadPolicies ()
specifier|public
name|Map
argument_list|<
name|LocalResourceRequest
argument_list|,
name|Boolean
argument_list|>
name|getResourcesUploadPolicies
parameter_list|()
block|{
return|return
name|resourcesUploadPolicies
return|;
block|}
DECL|method|getPendingResources ()
specifier|public
name|Map
argument_list|<
name|LocalResourceRequest
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|getPendingResources
parameter_list|()
block|{
return|return
name|pendingResources
return|;
block|}
DECL|method|merge (ResourceSet... resourceSets)
specifier|public
specifier|static
name|ResourceSet
name|merge
parameter_list|(
name|ResourceSet
modifier|...
name|resourceSets
parameter_list|)
block|{
name|ResourceSet
name|merged
init|=
operator|new
name|ResourceSet
argument_list|()
decl_stmt|;
for|for
control|(
name|ResourceSet
name|rs
range|:
name|resourceSets
control|)
block|{
comment|// This should overwrite existing symlinks
name|merged
operator|.
name|localizedResources
operator|.
name|putAll
argument_list|(
name|rs
operator|.
name|localizedResources
argument_list|)
expr_stmt|;
name|merged
operator|.
name|resourcesToBeUploaded
operator|.
name|putAll
argument_list|(
name|rs
operator|.
name|resourcesToBeUploaded
argument_list|)
expr_stmt|;
name|merged
operator|.
name|resourcesUploadPolicies
operator|.
name|putAll
argument_list|(
name|rs
operator|.
name|resourcesUploadPolicies
argument_list|)
expr_stmt|;
comment|// TODO : START : Should we de-dup here ?
name|merged
operator|.
name|publicRsrcs
operator|.
name|addAll
argument_list|(
name|rs
operator|.
name|publicRsrcs
argument_list|)
expr_stmt|;
name|merged
operator|.
name|privateRsrcs
operator|.
name|addAll
argument_list|(
name|rs
operator|.
name|privateRsrcs
argument_list|)
expr_stmt|;
name|merged
operator|.
name|appRsrcs
operator|.
name|addAll
argument_list|(
name|rs
operator|.
name|appRsrcs
argument_list|)
expr_stmt|;
comment|// TODO : END
block|}
return|return
name|merged
return|;
block|}
block|}
end_class

end_unit

