begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.api.impl.pb
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|impl
operator|.
name|pb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ProtoBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|LocalResourcePBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|URLPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerServiceProtos
operator|.
name|ResourceLocalizationSpecProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerServiceProtos
operator|.
name|ResourceLocalizationSpecProtoOrBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|ResourceLocalizationSpec
import|;
end_import

begin_class
DECL|class|ResourceLocalizationSpecPBImpl
specifier|public
class|class
name|ResourceLocalizationSpecPBImpl
extends|extends
name|ProtoBase
argument_list|<
name|ResourceLocalizationSpecProto
argument_list|>
implements|implements
name|ResourceLocalizationSpec
block|{
DECL|field|proto
specifier|private
name|ResourceLocalizationSpecProto
name|proto
init|=
name|ResourceLocalizationSpecProto
operator|.
name|getDefaultInstance
argument_list|()
decl_stmt|;
DECL|field|builder
specifier|private
name|ResourceLocalizationSpecProto
operator|.
name|Builder
name|builder
init|=
literal|null
decl_stmt|;
DECL|field|viaProto
specifier|private
name|boolean
name|viaProto
decl_stmt|;
DECL|field|resource
specifier|private
name|LocalResource
name|resource
init|=
literal|null
decl_stmt|;
DECL|field|destinationDirectory
specifier|private
name|URL
name|destinationDirectory
init|=
literal|null
decl_stmt|;
DECL|method|ResourceLocalizationSpecPBImpl ()
specifier|public
name|ResourceLocalizationSpecPBImpl
parameter_list|()
block|{
name|builder
operator|=
name|ResourceLocalizationSpecProto
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
block|}
DECL|method|ResourceLocalizationSpecPBImpl (ResourceLocalizationSpecProto proto)
specifier|public
name|ResourceLocalizationSpecPBImpl
parameter_list|(
name|ResourceLocalizationSpecProto
name|proto
parameter_list|)
block|{
name|this
operator|.
name|proto
operator|=
name|proto
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getResource ()
specifier|public
name|LocalResource
name|getResource
parameter_list|()
block|{
name|ResourceLocalizationSpecProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
return|return
name|resource
return|;
block|}
if|if
condition|(
operator|!
name|p
operator|.
name|hasResource
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|resource
operator|=
operator|new
name|LocalResourcePBImpl
argument_list|(
name|p
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|resource
return|;
block|}
annotation|@
name|Override
DECL|method|setResource (LocalResource rsrc)
specifier|public
name|void
name|setResource
parameter_list|(
name|LocalResource
name|rsrc
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|resource
operator|=
name|rsrc
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDestinationDirectory ()
specifier|public
name|URL
name|getDestinationDirectory
parameter_list|()
block|{
name|ResourceLocalizationSpecProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
name|destinationDirectory
operator|!=
literal|null
condition|)
block|{
return|return
name|destinationDirectory
return|;
block|}
if|if
condition|(
operator|!
name|p
operator|.
name|hasDestinationDirectory
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|destinationDirectory
operator|=
operator|new
name|URLPBImpl
argument_list|(
name|p
operator|.
name|getDestinationDirectory
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|destinationDirectory
return|;
block|}
annotation|@
name|Override
DECL|method|setDestinationDirectory (URL destinationDirectory)
specifier|public
name|void
name|setDestinationDirectory
parameter_list|(
name|URL
name|destinationDirectory
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|this
operator|.
name|destinationDirectory
operator|=
name|destinationDirectory
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getProto ()
specifier|public
name|ResourceLocalizationSpecProto
name|getProto
parameter_list|()
block|{
name|mergeLocalToBuilder
argument_list|()
expr_stmt|;
name|proto
operator|=
name|viaProto
condition|?
name|proto
else|:
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
return|return
name|proto
return|;
block|}
DECL|method|maybeInitBuilder ()
specifier|private
specifier|synchronized
name|void
name|maybeInitBuilder
parameter_list|()
block|{
if|if
condition|(
name|builder
operator|==
literal|null
operator|||
name|viaProto
condition|)
block|{
name|builder
operator|=
name|ResourceLocalizationSpecProto
operator|.
name|newBuilder
argument_list|(
name|proto
argument_list|)
expr_stmt|;
block|}
name|viaProto
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|mergeLocalToBuilder ()
specifier|private
name|void
name|mergeLocalToBuilder
parameter_list|()
block|{
name|ResourceLocalizationSpecProtoOrBuilder
name|l
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|resource
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|l
operator|.
name|getResource
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|LocalResourcePBImpl
operator|)
name|resource
operator|)
operator|.
name|getProto
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setResource
argument_list|(
operator|(
operator|(
name|LocalResourcePBImpl
operator|)
name|resource
operator|)
operator|.
name|getProto
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|destinationDirectory
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|l
operator|.
name|getDestinationDirectory
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|URLPBImpl
operator|)
name|destinationDirectory
operator|)
operator|.
name|getProto
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setDestinationDirectory
argument_list|(
operator|(
operator|(
name|URLPBImpl
operator|)
name|destinationDirectory
operator|)
operator|.
name|getProto
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

