begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.nodelabels
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|nodelabels
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_comment
comment|/**  * A node descriptors script runner periodically runs a script,  * parses the output to collect desired descriptors, and then  * post these descriptors to the given {@link NodeDescriptorsProvider}.  * @param<T> a certain type of descriptor.  */
end_comment

begin_class
DECL|class|NodeDescriptorsScriptRunner
specifier|public
specifier|abstract
class|class
name|NodeDescriptorsScriptRunner
parameter_list|<
name|T
parameter_list|>
extends|extends
name|TimerTask
block|{
DECL|field|LOG
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NodeDescriptorsScriptRunner
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|exec
specifier|private
specifier|final
name|Shell
operator|.
name|ShellCommandExecutor
name|exec
decl_stmt|;
DECL|field|provider
specifier|private
specifier|final
name|NodeDescriptorsProvider
name|provider
decl_stmt|;
DECL|method|NodeDescriptorsScriptRunner (String scriptPath, String[] scriptArgs, long scriptTimeout, NodeDescriptorsProvider ndProvider)
specifier|public
name|NodeDescriptorsScriptRunner
parameter_list|(
name|String
name|scriptPath
parameter_list|,
name|String
index|[]
name|scriptArgs
parameter_list|,
name|long
name|scriptTimeout
parameter_list|,
name|NodeDescriptorsProvider
name|ndProvider
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|execScript
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|execScript
operator|.
name|add
argument_list|(
name|scriptPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|scriptArgs
operator|!=
literal|null
condition|)
block|{
name|execScript
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|scriptArgs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|provider
operator|=
name|ndProvider
expr_stmt|;
name|this
operator|.
name|exec
operator|=
operator|new
name|Shell
operator|.
name|ShellCommandExecutor
argument_list|(
name|execScript
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|execScript
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|scriptTimeout
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|exec
operator|.
name|execute
argument_list|()
expr_stmt|;
name|provider
operator|.
name|setDescriptors
argument_list|(
name|parseOutput
argument_list|(
name|exec
operator|.
name|getOutput
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|exec
operator|.
name|isTimedOut
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Node Labels script timed out, Caught exception : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Execution of Node Labels script failed, Caught exception : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
block|{
if|if
condition|(
name|exec
operator|!=
literal|null
condition|)
block|{
name|Process
name|p
init|=
name|exec
operator|.
name|getProcess
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|parseOutput (String scriptOutput)
specifier|abstract
name|Set
argument_list|<
name|T
argument_list|>
name|parseOutput
parameter_list|(
name|String
name|scriptOutput
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

