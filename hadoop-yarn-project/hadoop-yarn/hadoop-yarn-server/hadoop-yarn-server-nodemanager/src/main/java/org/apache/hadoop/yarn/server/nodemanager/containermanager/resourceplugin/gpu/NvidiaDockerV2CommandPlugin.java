begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.gpu
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|gpu
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ResourceMappings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|gpu
operator|.
name|GpuResourceAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|docker
operator|.
name|DockerRunCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|docker
operator|.
name|DockerVolumeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|DockerCommandPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|runtime
operator|.
name|ContainerExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Implementation to use nvidia-docker v2 as GPU docker command plugin.  */
end_comment

begin_class
DECL|class|NvidiaDockerV2CommandPlugin
specifier|public
class|class
name|NvidiaDockerV2CommandPlugin
implements|implements
name|DockerCommandPlugin
block|{
DECL|field|LOG
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NvidiaDockerV2CommandPlugin
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|nvidiaRuntime
specifier|private
name|String
name|nvidiaRuntime
init|=
literal|"nvidia"
decl_stmt|;
DECL|field|nvidiaVisibleDevices
specifier|private
name|String
name|nvidiaVisibleDevices
init|=
literal|"NVIDIA_VISIBLE_DEVICES"
decl_stmt|;
DECL|method|NvidiaDockerV2CommandPlugin ()
specifier|public
name|NvidiaDockerV2CommandPlugin
parameter_list|()
block|{}
DECL|method|getAssignedGpus (Container container)
specifier|private
name|Set
argument_list|<
name|GpuDevice
argument_list|>
name|getAssignedGpus
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
name|ResourceMappings
name|resourceMappings
init|=
name|container
operator|.
name|getResourceMappings
argument_list|()
decl_stmt|;
comment|// Copy of assigned Resources
name|Set
argument_list|<
name|GpuDevice
argument_list|>
name|assignedResources
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|resourceMappings
operator|!=
literal|null
condition|)
block|{
name|assignedResources
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Serializable
name|s
range|:
name|resourceMappings
operator|.
name|getAssignedResources
argument_list|(
name|ResourceInformation
operator|.
name|GPU_URI
argument_list|)
control|)
block|{
name|assignedResources
operator|.
name|add
argument_list|(
operator|(
name|GpuDevice
operator|)
name|s
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|assignedResources
operator|==
literal|null
operator|||
name|assignedResources
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// When no GPU resource assigned, don't need to update docker command.
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
return|return
name|assignedResources
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|requestsGpu (Container container)
specifier|protected
name|boolean
name|requestsGpu
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
return|return
name|GpuResourceAllocator
operator|.
name|getRequestedGpus
argument_list|(
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|updateDockerRunCommand ( DockerRunCommand dockerRunCommand, Container container)
specifier|public
specifier|synchronized
name|void
name|updateDockerRunCommand
parameter_list|(
name|DockerRunCommand
name|dockerRunCommand
parameter_list|,
name|Container
name|container
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
if|if
condition|(
operator|!
name|requestsGpu
argument_list|(
name|container
argument_list|)
condition|)
block|{
return|return;
block|}
name|Set
argument_list|<
name|GpuDevice
argument_list|>
name|assignedResources
init|=
name|getAssignedGpus
argument_list|(
name|container
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignedResources
operator|==
literal|null
operator|||
name|assignedResources
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|gpuIndexList
init|=
literal|""
decl_stmt|;
for|for
control|(
name|GpuDevice
name|gpuDevice
range|:
name|assignedResources
control|)
block|{
name|gpuIndexList
operator|=
name|gpuIndexList
operator|+
name|gpuDevice
operator|.
name|getIndex
argument_list|()
operator|+
literal|","
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"nvidia docker2 assigned gpu index: "
operator|+
name|gpuDevice
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dockerRunCommand
operator|.
name|addRuntime
argument_list|(
name|nvidiaRuntime
argument_list|)
expr_stmt|;
name|environment
operator|.
name|put
argument_list|(
name|nvidiaVisibleDevices
argument_list|,
name|gpuIndexList
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|gpuIndexList
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|dockerRunCommand
operator|.
name|addEnv
argument_list|(
name|environment
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCreateDockerVolumeCommand (Container container)
specifier|public
name|DockerVolumeCommand
name|getCreateDockerVolumeCommand
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
comment|// No Volume needed for nvidia-docker2.
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getCleanupDockerVolumesCommand (Container container)
specifier|public
name|DockerVolumeCommand
name|getCleanupDockerVolumesCommand
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
comment|// No cleanup needed.
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

