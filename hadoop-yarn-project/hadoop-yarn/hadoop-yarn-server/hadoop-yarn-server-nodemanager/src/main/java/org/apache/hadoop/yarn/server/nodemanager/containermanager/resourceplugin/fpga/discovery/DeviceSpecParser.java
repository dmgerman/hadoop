begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.fpga.discovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|fpga
operator|.
name|discovery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|ResourceHandlerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|fpga
operator|.
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
import|;
end_import

begin_comment
comment|/**  * Parses a string which specifies FPGA devices. Multiple devices should be  * separated by a comma. A device specification should contain the  * symbolic name of the device, major and minor device numbers.  *  * Example: "acl0/243:0,acl1/243:1".  */
end_comment

begin_class
DECL|class|DeviceSpecParser
specifier|public
specifier|final
class|class
name|DeviceSpecParser
block|{
DECL|field|DEVICE_SPEC_REGEX
specifier|private
specifier|static
specifier|final
name|String
name|DEVICE_SPEC_REGEX
init|=
literal|"(\\w+[0-31])(\\/)(\\d+)(\\:)(\\d+)"
decl_stmt|;
DECL|field|DEVICE_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|DEVICE_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|DEVICE_SPEC_REGEX
argument_list|)
decl_stmt|;
DECL|method|DeviceSpecParser ()
specifier|private
name|DeviceSpecParser
parameter_list|()
block|{
comment|// no instances
block|}
DECL|method|getDevicesFromString (String type, String devices)
specifier|static
name|List
argument_list|<
name|FpgaDevice
argument_list|>
name|getDevicesFromString
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|devices
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
if|if
condition|(
name|devices
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|String
index|[]
name|deviceList
init|=
name|devices
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FpgaDevice
argument_list|>
name|fpgaDevices
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|deviceSpec
range|:
name|deviceList
control|)
block|{
name|Matcher
name|matcher
init|=
name|DEVICE_PATTERN
operator|.
name|matcher
argument_list|(
name|deviceSpec
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
try|try
block|{
name|String
name|devName
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|int
name|major
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|minor
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|fpgaDevices
operator|.
name|add
argument_list|(
operator|new
name|FpgaDevice
argument_list|(
name|type
argument_list|,
name|major
argument_list|,
name|minor
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|devName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
literal|"Cannot parse major/minor number: "
operator|+
name|deviceSpec
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
literal|"Illegal device specification string: "
operator|+
name|deviceSpec
argument_list|)
throw|;
block|}
block|}
return|return
name|fpgaDevices
return|;
block|}
block|}
end_class

end_unit

