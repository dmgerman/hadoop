begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.fpga
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|fpga
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|ResourceHandlerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|fpga
operator|.
name|FpgaResourceAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|FpgaDiscoverer
specifier|public
class|class
name|FpgaDiscoverer
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FpgaDiscoverer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|instance
specifier|private
specifier|static
name|FpgaDiscoverer
name|instance
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
DECL|field|plugin
specifier|private
name|AbstractFpgaVendorPlugin
name|plugin
init|=
literal|null
decl_stmt|;
DECL|field|currentFpgaInfo
specifier|private
name|List
argument_list|<
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
argument_list|>
name|currentFpgaInfo
init|=
literal|null
decl_stmt|;
comment|// shell command timeout
DECL|field|MAX_EXEC_TIMEOUT_MS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_EXEC_TIMEOUT_MS
init|=
literal|10
operator|*
literal|1000
decl_stmt|;
static|static
block|{
name|instance
operator|=
operator|new
name|FpgaDiscoverer
argument_list|()
expr_stmt|;
block|}
DECL|method|getInstance ()
specifier|public
specifier|static
name|FpgaDiscoverer
name|getInstance
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setInstance (FpgaDiscoverer newInstance)
specifier|public
specifier|synchronized
specifier|static
name|FpgaDiscoverer
name|setInstance
parameter_list|(
name|FpgaDiscoverer
name|newInstance
parameter_list|)
block|{
name|instance
operator|=
name|newInstance
expr_stmt|;
return|return
name|instance
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setConf (Configuration conf)
specifier|public
specifier|synchronized
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
DECL|method|getCurrentFpgaInfo ()
specifier|public
name|List
argument_list|<
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
argument_list|>
name|getCurrentFpgaInfo
parameter_list|()
block|{
return|return
name|currentFpgaInfo
return|;
block|}
DECL|method|setResourceHanderPlugin (AbstractFpgaVendorPlugin plugin)
specifier|public
specifier|synchronized
name|void
name|setResourceHanderPlugin
parameter_list|(
name|AbstractFpgaVendorPlugin
name|plugin
parameter_list|)
block|{
name|this
operator|.
name|plugin
operator|=
name|plugin
expr_stmt|;
block|}
DECL|method|diagnose ()
specifier|public
specifier|synchronized
name|boolean
name|diagnose
parameter_list|()
block|{
return|return
name|this
operator|.
name|plugin
operator|.
name|diagnose
argument_list|(
name|MAX_EXEC_TIMEOUT_MS
argument_list|)
return|;
block|}
DECL|method|initialize (Configuration conf)
specifier|public
specifier|synchronized
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|YarnException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|plugin
operator|.
name|initPlugin
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Try to diagnose FPGA
name|LOG
operator|.
name|info
argument_list|(
literal|"Trying to diagnose FPGA information ..."
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|diagnose
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to pass FPGA devices diagnose"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * get avialable devices minor numbers from toolchain or static configuration    * */
DECL|method|discover ()
specifier|public
specifier|synchronized
name|List
argument_list|<
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
argument_list|>
name|discover
parameter_list|()
throws|throws
name|ResourceHandlerException
block|{
name|List
argument_list|<
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
argument_list|>
name|list
decl_stmt|;
name|String
name|allowed
init|=
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_ALLOWED_DEVICES
argument_list|)
decl_stmt|;
comment|// whatever static or auto discover, we always needs
comment|// the vendor plugin to discover. For instance, IntelFpgaOpenclPlugin need to
comment|// setup a mapping of<major:minor> to<aliasDevName>
name|list
operator|=
name|this
operator|.
name|plugin
operator|.
name|discover
argument_list|(
name|MAX_EXEC_TIMEOUT_MS
argument_list|)
expr_stmt|;
if|if
condition|(
literal|0
operator|==
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
literal|"No FPGA devices detected!"
argument_list|)
throw|;
block|}
name|currentFpgaInfo
operator|=
name|list
expr_stmt|;
if|if
condition|(
name|allowed
operator|.
name|equalsIgnoreCase
argument_list|(
name|YarnConfiguration
operator|.
name|AUTOMATICALLY_DISCOVER_GPU_DEVICES
argument_list|)
condition|)
block|{
return|return
name|list
return|;
block|}
elseif|else
if|if
condition|(
name|allowed
operator|.
name|matches
argument_list|(
literal|"(\\d,)*\\d"
argument_list|)
condition|)
block|{
name|String
index|[]
name|minors
init|=
name|allowed
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// remove the non-configured minor numbers
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
name|t
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|boolean
name|valid
init|=
literal|false
decl_stmt|;
name|t
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|minorNumber
range|:
name|minors
control|)
block|{
if|if
condition|(
name|t
operator|.
name|getMinor
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|minorNumber
argument_list|)
condition|)
block|{
name|valid
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|valid
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
comment|// if the count of user configured is still larger than actual
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|!=
name|minors
operator|.
name|length
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"We continue although there're mistakes in user's configuration "
operator|+
name|YarnConfiguration
operator|.
name|NM_FPGA_ALLOWED_DEVICES
operator|+
literal|"user configured:"
operator|+
name|allowed
operator|+
literal|", while the real:"
operator|+
name|list
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
literal|"Invalid value configured for "
operator|+
name|YarnConfiguration
operator|.
name|NM_FPGA_ALLOWED_DEVICES
operator|+
literal|":\""
operator|+
name|allowed
operator|+
literal|"\""
argument_list|)
throw|;
block|}
return|return
name|list
return|;
block|}
block|}
end_class

end_unit

