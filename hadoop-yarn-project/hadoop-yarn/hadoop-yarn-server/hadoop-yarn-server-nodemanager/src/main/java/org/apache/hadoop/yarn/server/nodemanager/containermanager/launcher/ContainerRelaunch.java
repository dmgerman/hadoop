begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.launcher
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|LocalDirsHandlerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|ContainerManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerExitEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ContainerLocalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|executor
operator|.
name|ContainerStartContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|executor
operator|.
name|DeletionAsUserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Relaunch container.  */
end_comment

begin_class
DECL|class|ContainerRelaunch
specifier|public
class|class
name|ContainerRelaunch
extends|extends
name|ContainerLaunch
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ContainerRelaunch
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|ContainerRelaunch (Context context, Configuration configuration, Dispatcher dispatcher, ContainerExecutor exec, Application app, Container container, LocalDirsHandlerService dirsHandler, ContainerManagerImpl containerManager)
specifier|public
name|ContainerRelaunch
parameter_list|(
name|Context
name|context
parameter_list|,
name|Configuration
name|configuration
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|ContainerExecutor
name|exec
parameter_list|,
name|Application
name|app
parameter_list|,
name|Container
name|container
parameter_list|,
name|LocalDirsHandlerService
name|dirsHandler
parameter_list|,
name|ContainerManagerImpl
name|containerManager
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|configuration
argument_list|,
name|dispatcher
argument_list|,
name|exec
argument_list|,
name|app
argument_list|,
name|container
argument_list|,
name|dirsHandler
argument_list|,
name|containerManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|call ()
specifier|public
name|Integer
name|call
parameter_list|()
block|{
if|if
condition|(
operator|!
name|validateContainerState
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
name|ContainerId
name|containerId
init|=
name|container
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|String
name|containerIdStr
init|=
name|containerId
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|ret
init|=
operator|-
literal|1
decl_stmt|;
name|Path
name|containerLogDir
decl_stmt|;
try|try
block|{
name|Path
name|containerWorkDir
init|=
name|getContainerWorkDir
argument_list|()
decl_stmt|;
name|cleanupPreviousContainerFiles
argument_list|(
name|containerWorkDir
argument_list|)
expr_stmt|;
name|containerLogDir
operator|=
name|getContainerLogDir
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|localResources
init|=
name|getLocalizedResources
argument_list|()
decl_stmt|;
name|String
name|appIdStr
init|=
name|app
operator|.
name|getAppId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Path
name|nmPrivateContainerScriptPath
init|=
name|getNmPrivateContainerScriptPath
argument_list|(
name|appIdStr
argument_list|,
name|containerIdStr
argument_list|)
decl_stmt|;
name|Path
name|nmPrivateTokensPath
init|=
name|getNmPrivateTokensPath
argument_list|(
name|appIdStr
argument_list|,
name|containerIdStr
argument_list|)
decl_stmt|;
name|pidFilePath
operator|=
name|getPidFilePath
argument_list|(
name|appIdStr
argument_list|,
name|containerIdStr
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Relaunch container with "
operator|+
literal|"workDir = "
operator|+
name|containerWorkDir
operator|.
name|toString
argument_list|()
operator|+
literal|", logDir = "
operator|+
name|containerLogDir
operator|.
name|toString
argument_list|()
operator|+
literal|", nmPrivateContainerScriptPath = "
operator|+
name|nmPrivateContainerScriptPath
operator|.
name|toString
argument_list|()
operator|+
literal|", nmPrivateTokensPath = "
operator|+
name|nmPrivateTokensPath
operator|.
name|toString
argument_list|()
operator|+
literal|", pidFilePath = "
operator|+
name|pidFilePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|localDirs
init|=
name|dirsHandler
operator|.
name|getLocalDirs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|logDirs
init|=
name|dirsHandler
operator|.
name|getLogDirs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|containerLocalDirs
init|=
name|getContainerLocalDirs
argument_list|(
name|localDirs
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|containerLogDirs
init|=
name|getContainerLogDirs
argument_list|(
name|logDirs
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dirsHandler
operator|.
name|areDisksHealthy
argument_list|()
condition|)
block|{
name|ret
operator|=
name|ContainerExitStatus
operator|.
name|DISKS_FAILED
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Most of the disks failed. "
operator|+
name|dirsHandler
operator|.
name|getDisksHealthReport
argument_list|(
literal|false
argument_list|)
argument_list|)
throw|;
block|}
name|ret
operator|=
name|launchContainer
argument_list|(
operator|new
name|ContainerStartContext
operator|.
name|Builder
argument_list|()
operator|.
name|setContainer
argument_list|(
name|container
argument_list|)
operator|.
name|setLocalizedResources
argument_list|(
name|localResources
argument_list|)
operator|.
name|setNmPrivateContainerScriptPath
argument_list|(
name|nmPrivateContainerScriptPath
argument_list|)
operator|.
name|setNmPrivateTokensPath
argument_list|(
name|nmPrivateTokensPath
argument_list|)
operator|.
name|setUser
argument_list|(
name|container
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|setAppId
argument_list|(
name|appIdStr
argument_list|)
operator|.
name|setContainerWorkDir
argument_list|(
name|containerWorkDir
argument_list|)
operator|.
name|setLocalDirs
argument_list|(
name|localDirs
argument_list|)
operator|.
name|setLogDirs
argument_list|(
name|logDirs
argument_list|)
operator|.
name|setContainerLocalDirs
argument_list|(
name|containerLocalDirs
argument_list|)
operator|.
name|setContainerLogDirs
argument_list|(
name|containerLogDirs
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to relaunch container."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerExitEvent
argument_list|(
name|containerId
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_FAILURE
argument_list|,
name|ret
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|setContainerCompletedStatus
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
name|handleContainerExitCode
argument_list|(
name|ret
argument_list|,
name|containerLogDir
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|getContainerWorkDir ()
specifier|private
name|Path
name|getContainerWorkDir
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|containerWorkDir
init|=
name|container
operator|.
name|getWorkDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|containerWorkDir
operator|==
literal|null
operator|||
operator|!
name|dirsHandler
operator|.
name|isGoodLocalDir
argument_list|(
name|containerWorkDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not find a good work dir "
operator|+
name|containerWorkDir
operator|+
literal|" for container "
operator|+
name|container
argument_list|)
throw|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|containerWorkDir
argument_list|)
return|;
block|}
DECL|method|getContainerLogDir ()
specifier|private
name|Path
name|getContainerLogDir
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|containerLogDir
init|=
name|container
operator|.
name|getLogDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|containerLogDir
operator|==
literal|null
operator|||
operator|!
name|dirsHandler
operator|.
name|isGoodLogDir
argument_list|(
name|containerLogDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not find a good log dir "
operator|+
name|containerLogDir
operator|+
literal|" for container "
operator|+
name|container
argument_list|)
throw|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|containerLogDir
argument_list|)
return|;
block|}
DECL|method|getNmPrivateContainerScriptPath (String appIdStr, String containerIdStr)
specifier|private
name|Path
name|getNmPrivateContainerScriptPath
parameter_list|(
name|String
name|appIdStr
parameter_list|,
name|String
name|containerIdStr
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|dirsHandler
operator|.
name|getLocalPathForRead
argument_list|(
name|getContainerPrivateDir
argument_list|(
name|appIdStr
argument_list|,
name|containerIdStr
argument_list|)
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|CONTAINER_SCRIPT
argument_list|)
return|;
block|}
DECL|method|getNmPrivateTokensPath (String appIdStr, String containerIdStr)
specifier|private
name|Path
name|getNmPrivateTokensPath
parameter_list|(
name|String
name|appIdStr
parameter_list|,
name|String
name|containerIdStr
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|dirsHandler
operator|.
name|getLocalPathForRead
argument_list|(
name|getContainerPrivateDir
argument_list|(
name|appIdStr
argument_list|,
name|containerIdStr
argument_list|)
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|String
operator|.
name|format
argument_list|(
name|ContainerLocalizer
operator|.
name|TOKEN_FILE_NAME_FMT
argument_list|,
name|containerIdStr
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getPidFilePath (String appIdStr, String containerIdStr)
specifier|private
name|Path
name|getPidFilePath
parameter_list|(
name|String
name|appIdStr
parameter_list|,
name|String
name|containerIdStr
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|dirsHandler
operator|.
name|getLocalPathForRead
argument_list|(
name|getPidFileSubpath
argument_list|(
name|appIdStr
argument_list|,
name|containerIdStr
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Clean up container's previous files for container relaunch.    */
DECL|method|cleanupPreviousContainerFiles (Path containerWorkDir)
specifier|private
name|void
name|cleanupPreviousContainerFiles
parameter_list|(
name|Path
name|containerWorkDir
parameter_list|)
block|{
comment|// delete ContainerScriptPath
name|deleteAsUser
argument_list|(
operator|new
name|Path
argument_list|(
name|containerWorkDir
argument_list|,
name|CONTAINER_SCRIPT
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete TokensPath
name|deleteAsUser
argument_list|(
operator|new
name|Path
argument_list|(
name|containerWorkDir
argument_list|,
name|FINAL_CONTAINER_TOKENS_FILE
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteAsUser (Path path)
specifier|private
name|void
name|deleteAsUser
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
try|try
block|{
name|exec
operator|.
name|deleteAsUser
argument_list|(
operator|new
name|DeletionAsUserContext
operator|.
name|Builder
argument_list|()
operator|.
name|setUser
argument_list|(
name|container
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|setSubDir
argument_list|(
name|path
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to delete "
operator|+
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

