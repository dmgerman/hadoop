begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * *  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  * /  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.runtime
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
operator|.
name|ContainerLaunch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|CGroupsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|ResourceHandlerModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|docker
operator|.
name|DockerClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|docker
operator|.
name|DockerInspectCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|docker
operator|.
name|DockerRunCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|docker
operator|.
name|DockerStopCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|runtime
operator|.
name|ContainerExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|runtime
operator|.
name|ContainerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|runtime
operator|.
name|ContainerRuntimeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|runtime
operator|.
name|ContainerRuntimeContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *<p>This class is a {@link ContainerRuntime} implementation that uses the  * native {@code container-executor} binary via a  * {@link PrivilegedOperationExecutor} instance to launch processes inside  * Docker containers.</p>  *  *<p>The following environment variables are used to configure the Docker  * engine:</p>  *  *<ul>  *<li>  *     {@code YARN_CONTAINER_RUNTIME_TYPE} ultimately determines whether a  *     Docker container will be used. If the value is {@code docker}, a Docker  *     container will be used. Otherwise a regular process tree container will  *     be used. This environment variable is checked by the  *     {@link #isDockerContainerRequested} method, which is called by the  *     {@link DelegatingLinuxContainerRuntime}.  *</li>  *<li>  *     {@code YARN_CONTAINER_RUNTIME_DOCKER_IMAGE} names which image  *     will be used to launch the Docker container.  *</li>  *<li>  *     {@code YARN_CONTAINER_RUNTIME_DOCKER_IMAGE_FILE} is currently ignored.  *</li>  *<li>  *     {@code YARN_CONTAINER_RUNTIME_DOCKER_RUN_OVERRIDE_DISABLE} controls  *     whether the Docker container's default command is overridden.  When set  *     to {@code true}, the Docker container's command will be  *     {@code bash<path_to_launch_script>}. When unset or set to {@code false}  *     the Docker container's default command is used.  *</li>  *<li>  *     {@code YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK} sets the  *     network type to be used by the Docker container. It must be a valid  *     value as determined by the  *     {@code yarn.nodemanager.runtime.linux.docker.allowed-container-networks}  *     property.  *</li>  *<li>  *     {@code YARN_CONTAINER_RUNTIME_DOCKER_RUN_PRIVILEGED_CONTAINER}  *     controls whether the Docker container is a privileged container. In order  *     to use privileged containers, the  *     {@code yarn.nodemanager.runtime.linux.docker.privileged-containers.allowed}  *     property must be set to {@code true}, and the application owner must  *     appear in the value of the  *     {@code yarn.nodemanager.runtime.linux.docker.privileged-containers.acl}  *     property. If this environment variable is set to {@code true}, a  *     privileged Docker container will be used if allowed. No other value is  *     allowed, so the environment variable should be left unset rather than  *     setting it to false.  *</li>  *<li>  *     {@code YARN_CONTAINER_RUNTIME_DOCKER_LOCAL_RESOURCE_MOUNTS} adds  *     additional volume mounts to the Docker container. The value of the  *     environment variable should be a comma-separated list of mounts.  *     All such mounts must be given as {@code source:dest}, where the  *     source is an absolute path that is not a symlink and that points to a  *     localized resource.  *</li>  *</ul>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|DockerLinuxContainerRuntime
specifier|public
class|class
name|DockerLinuxContainerRuntime
implements|implements
name|LinuxContainerRuntime
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DockerLinuxContainerRuntime
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// This validates that the image is a proper docker image
DECL|field|DOCKER_IMAGE_PATTERN
specifier|public
specifier|static
specifier|final
name|String
name|DOCKER_IMAGE_PATTERN
init|=
literal|"^(([a-zA-Z0-9.-]+)(:\\d+)?/)?([a-z0-9_./-]+)(:[\\w.-]+)?$"
decl_stmt|;
DECL|field|dockerImagePattern
specifier|private
specifier|static
specifier|final
name|Pattern
name|dockerImagePattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|DOCKER_IMAGE_PATTERN
argument_list|)
decl_stmt|;
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|field|ENV_DOCKER_CONTAINER_IMAGE
specifier|public
specifier|static
specifier|final
name|String
name|ENV_DOCKER_CONTAINER_IMAGE
init|=
literal|"YARN_CONTAINER_RUNTIME_DOCKER_IMAGE"
decl_stmt|;
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|field|ENV_DOCKER_CONTAINER_IMAGE_FILE
specifier|public
specifier|static
specifier|final
name|String
name|ENV_DOCKER_CONTAINER_IMAGE_FILE
init|=
literal|"YARN_CONTAINER_RUNTIME_DOCKER_IMAGE_FILE"
decl_stmt|;
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|field|ENV_DOCKER_CONTAINER_RUN_OVERRIDE_DISABLE
specifier|public
specifier|static
specifier|final
name|String
name|ENV_DOCKER_CONTAINER_RUN_OVERRIDE_DISABLE
init|=
literal|"YARN_CONTAINER_RUNTIME_DOCKER_RUN_OVERRIDE_DISABLE"
decl_stmt|;
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|field|ENV_DOCKER_CONTAINER_NETWORK
specifier|public
specifier|static
specifier|final
name|String
name|ENV_DOCKER_CONTAINER_NETWORK
init|=
literal|"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK"
decl_stmt|;
DECL|field|ENV_DOCKER_CONTAINER_RUN_PRIVILEGED_CONTAINER
specifier|public
specifier|static
specifier|final
name|String
name|ENV_DOCKER_CONTAINER_RUN_PRIVILEGED_CONTAINER
init|=
literal|"YARN_CONTAINER_RUNTIME_DOCKER_RUN_PRIVILEGED_CONTAINER"
decl_stmt|;
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|field|ENV_DOCKER_CONTAINER_LOCAL_RESOURCE_MOUNTS
specifier|public
specifier|static
specifier|final
name|String
name|ENV_DOCKER_CONTAINER_LOCAL_RESOURCE_MOUNTS
init|=
literal|"YARN_CONTAINER_RUNTIME_DOCKER_LOCAL_RESOURCE_MOUNTS"
decl_stmt|;
DECL|field|CGROUPS_ROOT_DIRECTORY
specifier|static
specifier|final
name|String
name|CGROUPS_ROOT_DIRECTORY
init|=
literal|"/sys/fs/cgroup"
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|dockerClient
specifier|private
name|DockerClient
name|dockerClient
decl_stmt|;
DECL|field|privilegedOperationExecutor
specifier|private
name|PrivilegedOperationExecutor
name|privilegedOperationExecutor
decl_stmt|;
DECL|field|allowedNetworks
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|allowedNetworks
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|defaultNetwork
specifier|private
name|String
name|defaultNetwork
decl_stmt|;
DECL|field|cGroupsHandler
specifier|private
name|CGroupsHandler
name|cGroupsHandler
decl_stmt|;
DECL|field|privilegedContainersAcl
specifier|private
name|AccessControlList
name|privilegedContainersAcl
decl_stmt|;
comment|/**    * Return whether the given environment variables indicate that the operation    * is requesting a Docker container.  If the environment contains a key    * called {@code YARN_CONTAINER_RUNTIME_TYPE} whose value is {@code docker},    * this method will return true.  Otherwise it will return false.    *    * @param env the environment variable settings for the operation    * @return whether a Docker container is requested    */
DECL|method|isDockerContainerRequested ( Map<String, String> env)
specifier|public
specifier|static
name|boolean
name|isDockerContainerRequested
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|)
block|{
if|if
condition|(
name|env
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|type
init|=
name|env
operator|.
name|get
argument_list|(
name|ContainerRuntimeConstants
operator|.
name|ENV_CONTAINER_TYPE
argument_list|)
decl_stmt|;
return|return
name|type
operator|!=
literal|null
operator|&&
name|type
operator|.
name|equals
argument_list|(
literal|"docker"
argument_list|)
return|;
block|}
comment|/**    * Create an instance using the given {@link PrivilegedOperationExecutor}    * instance for performing operations.    *    * @param privilegedOperationExecutor the {@link PrivilegedOperationExecutor}    * instance    */
DECL|method|DockerLinuxContainerRuntime (PrivilegedOperationExecutor privilegedOperationExecutor)
specifier|public
name|DockerLinuxContainerRuntime
parameter_list|(
name|PrivilegedOperationExecutor
name|privilegedOperationExecutor
parameter_list|)
block|{
name|this
argument_list|(
name|privilegedOperationExecutor
argument_list|,
name|ResourceHandlerModule
operator|.
name|getCGroupsHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an instance using the given {@link PrivilegedOperationExecutor}    * instance for performing operations and the given {@link CGroupsHandler}    * instance. This constructor is intended for use in testing.    *    * @param privilegedOperationExecutor the {@link PrivilegedOperationExecutor}    * instance    * @param cGroupsHandler the {@link CGroupsHandler} instance    */
annotation|@
name|VisibleForTesting
DECL|method|DockerLinuxContainerRuntime (PrivilegedOperationExecutor privilegedOperationExecutor, CGroupsHandler cGroupsHandler)
specifier|public
name|DockerLinuxContainerRuntime
parameter_list|(
name|PrivilegedOperationExecutor
name|privilegedOperationExecutor
parameter_list|,
name|CGroupsHandler
name|cGroupsHandler
parameter_list|)
block|{
name|this
operator|.
name|privilegedOperationExecutor
operator|=
name|privilegedOperationExecutor
expr_stmt|;
if|if
condition|(
name|cGroupsHandler
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"cGroupsHandler is null - cgroups not in use."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|cGroupsHandler
operator|=
name|cGroupsHandler
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|initialize (Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|dockerClient
operator|=
operator|new
name|DockerClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|allowedNetworks
operator|.
name|clear
argument_list|()
expr_stmt|;
name|allowedNetworks
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|conf
operator|.
name|getTrimmedStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_ALLOWED_CONTAINER_NETWORKS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|defaultNetwork
operator|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_DEFAULT_CONTAINER_NETWORK
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|allowedNetworks
operator|.
name|contains
argument_list|(
name|defaultNetwork
argument_list|)
condition|)
block|{
name|String
name|message
init|=
literal|"Default network: "
operator|+
name|defaultNetwork
operator|+
literal|" is not in the set of allowed networks: "
operator|+
name|allowedNetworks
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|message
operator|+
literal|". Please check "
operator|+
literal|"configuration"
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
name|message
argument_list|)
throw|;
block|}
name|privilegedContainersAcl
operator|=
operator|new
name|AccessControlList
argument_list|(
name|conf
operator|.
name|getTrimmed
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_PRIVILEGED_CONTAINERS_ACL
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prepareContainer (ContainerRuntimeContext ctx)
specifier|public
name|void
name|prepareContainer
parameter_list|(
name|ContainerRuntimeContext
name|ctx
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{   }
DECL|method|validateContainerNetworkType (String network)
specifier|private
name|void
name|validateContainerNetworkType
parameter_list|(
name|String
name|network
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
if|if
condition|(
name|allowedNetworks
operator|.
name|contains
argument_list|(
name|network
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|msg
init|=
literal|"Disallowed network:  '"
operator|+
name|network
operator|+
literal|"' specified. Allowed networks: are "
operator|+
name|allowedNetworks
operator|.
name|toString
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
comment|/**    * If CGROUPS in enabled and not set to none, then set the CGROUP parent for    * the command instance.    *    * @param resourcesOptions the resource options to check for "cgroups=none"    * @param containerIdStr the container ID    * @param runCommand the command to set with the CGROUP parent    */
annotation|@
name|VisibleForTesting
DECL|method|addCGroupParentIfRequired (String resourcesOptions, String containerIdStr, DockerRunCommand runCommand)
specifier|protected
name|void
name|addCGroupParentIfRequired
parameter_list|(
name|String
name|resourcesOptions
parameter_list|,
name|String
name|containerIdStr
parameter_list|,
name|DockerRunCommand
name|runCommand
parameter_list|)
block|{
if|if
condition|(
name|cGroupsHandler
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"cGroupsHandler is null. cgroups are not in use. nothing to"
operator|+
literal|" do."
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|resourcesOptions
operator|.
name|equals
argument_list|(
name|PrivilegedOperation
operator|.
name|CGROUP_ARG_PREFIX
operator|+
name|PrivilegedOperation
operator|.
name|CGROUP_ARG_NO_TASKS
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"no resource restrictions specified. not using docker's "
operator|+
literal|"cgroup options"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"using docker's cgroups options"
argument_list|)
expr_stmt|;
block|}
name|String
name|cGroupPath
init|=
literal|"/"
operator|+
name|cGroupsHandler
operator|.
name|getRelativePathForCGroup
argument_list|(
name|containerIdStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"using cgroup parent: "
operator|+
name|cGroupPath
argument_list|)
expr_stmt|;
block|}
name|runCommand
operator|.
name|setCGroupParent
argument_list|(
name|cGroupPath
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Return whether the YARN container is allowed to run in a privileged    * Docker container. For a privileged container to be allowed all of the    * following three conditions must be satisfied:    *    *<ol>    *<li>Submitting user must request for a privileged container</li>    *<li>Privileged containers must be enabled on the cluster</li>    *<li>Submitting user must be white-listed to run a privileged    *   container</li>    *</ol>    *    * @param container the target YARN container    * @return whether privileged container execution is allowed    * @throws ContainerExecutionException if privileged container execution    * is requested but is not allowed    */
DECL|method|allowPrivilegedContainerExecution (Container container)
specifier|private
name|boolean
name|allowPrivilegedContainerExecution
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
init|=
name|container
operator|.
name|getLaunchContext
argument_list|()
operator|.
name|getEnvironment
argument_list|()
decl_stmt|;
name|String
name|runPrivilegedContainerEnvVar
init|=
name|environment
operator|.
name|get
argument_list|(
name|ENV_DOCKER_CONTAINER_RUN_PRIVILEGED_CONTAINER
argument_list|)
decl_stmt|;
if|if
condition|(
name|runPrivilegedContainerEnvVar
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|runPrivilegedContainerEnvVar
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"NOT running a privileged container. Value of "
operator|+
name|ENV_DOCKER_CONTAINER_RUN_PRIVILEGED_CONTAINER
operator|+
literal|"is invalid: "
operator|+
name|runPrivilegedContainerEnvVar
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Privileged container requested for : "
operator|+
name|container
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//Ok, so we have been asked to run a privileged container. Security
comment|// checks need to be run. Each violation is an error.
comment|//check if privileged containers are enabled.
name|boolean
name|privilegedContainersEnabledOnCluster
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_ALLOW_PRIVILEGED_CONTAINERS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_DOCKER_ALLOW_PRIVILEGED_CONTAINERS
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|privilegedContainersEnabledOnCluster
condition|)
block|{
name|String
name|message
init|=
literal|"Privileged container being requested but privileged "
operator|+
literal|"containers are not enabled on this cluster"
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
name|message
argument_list|)
throw|;
block|}
comment|//check if submitting user is in the whitelist.
name|String
name|submittingUser
init|=
name|container
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|submitterUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|submittingUser
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|privilegedContainersAcl
operator|.
name|isUserAllowed
argument_list|(
name|submitterUgi
argument_list|)
condition|)
block|{
name|String
name|message
init|=
literal|"Cannot launch privileged container. Submitting user ("
operator|+
name|submittingUser
operator|+
literal|") fails ACL check."
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
name|message
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"All checks pass. Launching privileged container for : "
operator|+
name|container
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|validateMount (String mount, Map<Path, List<String>> localizedResources)
specifier|protected
name|String
name|validateMount
parameter_list|(
name|String
name|mount
parameter_list|,
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|localizedResources
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
for|for
control|(
name|Entry
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|resource
range|:
name|localizedResources
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|resource
operator|.
name|getValue
argument_list|()
operator|.
name|contains
argument_list|(
name|mount
argument_list|)
condition|)
block|{
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|path
init|=
name|Paths
operator|.
name|get
argument_list|(
name|resource
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
literal|"Mount must be absolute: "
operator|+
name|mount
argument_list|)
throw|;
block|}
if|if
condition|(
name|Files
operator|.
name|isSymbolicLink
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
literal|"Mount cannot be a symlink: "
operator|+
name|mount
argument_list|)
throw|;
block|}
return|return
name|path
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
literal|"Mount must be a localized "
operator|+
literal|"resource: "
operator|+
name|mount
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|launchContainer (ContainerRuntimeContext ctx)
specifier|public
name|void
name|launchContainer
parameter_list|(
name|ContainerRuntimeContext
name|ctx
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
name|Container
name|container
init|=
name|ctx
operator|.
name|getContainer
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
init|=
name|container
operator|.
name|getLaunchContext
argument_list|()
operator|.
name|getEnvironment
argument_list|()
decl_stmt|;
name|String
name|imageName
init|=
name|environment
operator|.
name|get
argument_list|(
name|ENV_DOCKER_CONTAINER_IMAGE
argument_list|)
decl_stmt|;
name|String
name|network
init|=
name|environment
operator|.
name|get
argument_list|(
name|ENV_DOCKER_CONTAINER_NETWORK
argument_list|)
decl_stmt|;
if|if
condition|(
name|network
operator|==
literal|null
operator|||
name|network
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|network
operator|=
name|defaultNetwork
expr_stmt|;
block|}
name|validateContainerNetworkType
argument_list|(
name|network
argument_list|)
expr_stmt|;
name|validateImageName
argument_list|(
name|imageName
argument_list|)
expr_stmt|;
name|String
name|containerIdStr
init|=
name|container
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|runAsUser
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|RUN_AS_USER
argument_list|)
decl_stmt|;
name|Path
name|containerWorkDir
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|CONTAINER_WORK_DIR
argument_list|)
decl_stmt|;
comment|//List<String> -> stored as List -> fetched/converted to List<String>
comment|//we can't do better here thanks to type-erasure
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|filecacheDirs
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|FILECACHE_DIRS
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|containerLocalDirs
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|CONTAINER_LOCAL_DIRS
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|containerLogDirs
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|CONTAINER_LOG_DIRS
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|localizedResources
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|LOCALIZED_RESOURCES
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|userLocalDirs
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|USER_LOCAL_DIRS
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|capabilities
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|conf
operator|.
name|getTrimmedStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_CONTAINER_CAPABILITIES
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_DOCKER_CONTAINER_CAPABILITIES
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|DockerRunCommand
name|runCommand
init|=
operator|new
name|DockerRunCommand
argument_list|(
name|containerIdStr
argument_list|,
name|runAsUser
argument_list|,
name|imageName
argument_list|)
operator|.
name|detachOnRun
argument_list|()
operator|.
name|setContainerWorkDir
argument_list|(
name|containerWorkDir
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setNetworkType
argument_list|(
name|network
argument_list|)
operator|.
name|setCapabilities
argument_list|(
name|capabilities
argument_list|)
operator|.
name|addMountLocation
argument_list|(
name|CGROUPS_ROOT_DIRECTORY
argument_list|,
name|CGROUPS_ROOT_DIRECTORY
operator|+
literal|":ro"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|allDirs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|containerLocalDirs
argument_list|)
decl_stmt|;
name|allDirs
operator|.
name|addAll
argument_list|(
name|filecacheDirs
argument_list|)
expr_stmt|;
name|allDirs
operator|.
name|add
argument_list|(
name|containerWorkDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|allDirs
operator|.
name|addAll
argument_list|(
name|containerLogDirs
argument_list|)
expr_stmt|;
name|allDirs
operator|.
name|addAll
argument_list|(
name|userLocalDirs
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|dir
range|:
name|allDirs
control|)
block|{
name|runCommand
operator|.
name|addMountLocation
argument_list|(
name|dir
argument_list|,
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|environment
operator|.
name|containsKey
argument_list|(
name|ENV_DOCKER_CONTAINER_LOCAL_RESOURCE_MOUNTS
argument_list|)
condition|)
block|{
name|String
name|mounts
init|=
name|environment
operator|.
name|get
argument_list|(
name|ENV_DOCKER_CONTAINER_LOCAL_RESOURCE_MOUNTS
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|mounts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|mount
range|:
name|StringUtils
operator|.
name|split
argument_list|(
name|mounts
argument_list|)
control|)
block|{
name|String
index|[]
name|dir
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|mount
argument_list|,
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
literal|"Invalid mount : "
operator|+
name|mount
argument_list|)
throw|;
block|}
name|String
name|src
init|=
name|validateMount
argument_list|(
name|dir
index|[
literal|0
index|]
argument_list|,
name|localizedResources
argument_list|)
decl_stmt|;
name|String
name|dst
init|=
name|dir
index|[
literal|1
index|]
decl_stmt|;
name|runCommand
operator|.
name|addMountLocation
argument_list|(
name|src
argument_list|,
name|dst
operator|+
literal|":ro"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|allowPrivilegedContainerExecution
argument_list|(
name|container
argument_list|)
condition|)
block|{
name|runCommand
operator|.
name|setPrivileged
argument_list|()
expr_stmt|;
block|}
name|String
name|resourcesOpts
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|RESOURCES_OPTIONS
argument_list|)
decl_stmt|;
name|addCGroupParentIfRequired
argument_list|(
name|resourcesOpts
argument_list|,
name|containerIdStr
argument_list|,
name|runCommand
argument_list|)
expr_stmt|;
name|String
name|disableOverride
init|=
name|environment
operator|.
name|get
argument_list|(
name|ENV_DOCKER_CONTAINER_RUN_OVERRIDE_DISABLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|disableOverride
operator|!=
literal|null
operator|&&
name|disableOverride
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"command override disabled"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|overrideCommands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Path
name|launchDst
init|=
operator|new
name|Path
argument_list|(
name|containerWorkDir
argument_list|,
name|ContainerLaunch
operator|.
name|CONTAINER_SCRIPT
argument_list|)
decl_stmt|;
name|overrideCommands
operator|.
name|add
argument_list|(
literal|"bash"
argument_list|)
expr_stmt|;
name|overrideCommands
operator|.
name|add
argument_list|(
name|launchDst
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|runCommand
operator|.
name|setOverrideCommandWithArgs
argument_list|(
name|overrideCommands
argument_list|)
expr_stmt|;
block|}
name|String
name|commandFile
init|=
name|dockerClient
operator|.
name|writeCommandToTempFile
argument_list|(
name|runCommand
argument_list|,
name|containerIdStr
argument_list|)
decl_stmt|;
name|PrivilegedOperation
name|launchOp
init|=
name|buildLaunchOp
argument_list|(
name|ctx
argument_list|,
name|commandFile
argument_list|,
name|runCommand
argument_list|)
decl_stmt|;
try|try
block|{
name|privilegedOperationExecutor
operator|.
name|executePrivilegedOperation
argument_list|(
literal|null
argument_list|,
name|launchOp
argument_list|,
literal|null
argument_list|,
name|container
operator|.
name|getLaunchContext
argument_list|()
operator|.
name|getEnvironment
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PrivilegedOperationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Launch container failed. Exception: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Docker command used: "
operator|+
name|runCommand
operator|.
name|getCommandWithArguments
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
literal|"Launch container failed"
argument_list|,
name|e
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|e
operator|.
name|getOutput
argument_list|()
argument_list|,
name|e
operator|.
name|getErrorOutput
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|signalContainer (ContainerRuntimeContext ctx)
specifier|public
name|void
name|signalContainer
parameter_list|(
name|ContainerRuntimeContext
name|ctx
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
name|Container
name|container
init|=
name|ctx
operator|.
name|getContainer
argument_list|()
decl_stmt|;
name|ContainerExecutor
operator|.
name|Signal
name|signal
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|SIGNAL
argument_list|)
decl_stmt|;
name|PrivilegedOperation
name|privOp
init|=
literal|null
decl_stmt|;
comment|// Handle liveliness checks, send null signal to pid
if|if
condition|(
name|ContainerExecutor
operator|.
name|Signal
operator|.
name|NULL
operator|.
name|equals
argument_list|(
name|signal
argument_list|)
condition|)
block|{
name|privOp
operator|=
operator|new
name|PrivilegedOperation
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|SIGNAL_CONTAINER
argument_list|)
expr_stmt|;
name|privOp
operator|.
name|appendArgs
argument_list|(
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|RUN_AS_USER
argument_list|)
argument_list|,
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|USER
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|PrivilegedOperation
operator|.
name|RunAsUserCommand
operator|.
name|SIGNAL_CONTAINER
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|PID
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|SIGNAL
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// All other signals handled as docker stop
block|}
else|else
block|{
name|String
name|containerId
init|=
name|ctx
operator|.
name|getContainer
argument_list|()
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|DockerStopCommand
name|stopCommand
init|=
operator|new
name|DockerStopCommand
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|String
name|commandFile
init|=
name|dockerClient
operator|.
name|writeCommandToTempFile
argument_list|(
name|stopCommand
argument_list|,
name|containerId
argument_list|)
decl_stmt|;
name|privOp
operator|=
operator|new
name|PrivilegedOperation
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|RUN_DOCKER_CMD
argument_list|)
expr_stmt|;
name|privOp
operator|.
name|appendArgs
argument_list|(
name|commandFile
argument_list|)
expr_stmt|;
block|}
comment|//Some failures here are acceptable. Let the calling executor decide.
name|privOp
operator|.
name|disableFailureLogging
argument_list|()
expr_stmt|;
try|try
block|{
name|privilegedOperationExecutor
operator|.
name|executePrivilegedOperation
argument_list|(
literal|null
argument_list|,
name|privOp
argument_list|,
literal|null
argument_list|,
name|container
operator|.
name|getLaunchContext
argument_list|()
operator|.
name|getEnvironment
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PrivilegedOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
literal|"Signal container failed"
argument_list|,
name|e
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|e
operator|.
name|getOutput
argument_list|()
argument_list|,
name|e
operator|.
name|getErrorOutput
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|reapContainer (ContainerRuntimeContext ctx)
specifier|public
name|void
name|reapContainer
parameter_list|(
name|ContainerRuntimeContext
name|ctx
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{   }
comment|// ipAndHost[0] contains comma separated list of IPs
comment|// ipAndHost[1] contains the hostname.
annotation|@
name|Override
DECL|method|getIpAndHost (Container container)
specifier|public
name|String
index|[]
name|getIpAndHost
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
name|String
name|containerId
init|=
name|container
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|DockerInspectCommand
name|inspectCommand
init|=
operator|new
name|DockerInspectCommand
argument_list|(
name|containerId
argument_list|)
operator|.
name|getIpAndHost
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|commandFile
init|=
name|dockerClient
operator|.
name|writeCommandToTempFile
argument_list|(
name|inspectCommand
argument_list|,
name|containerId
argument_list|)
decl_stmt|;
name|PrivilegedOperation
name|privOp
init|=
operator|new
name|PrivilegedOperation
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|RUN_DOCKER_CMD
argument_list|)
decl_stmt|;
name|privOp
operator|.
name|appendArgs
argument_list|(
name|commandFile
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|privilegedOperationExecutor
operator|.
name|executePrivilegedOperation
argument_list|(
literal|null
argument_list|,
name|privOp
argument_list|,
literal|null
argument_list|,
name|container
operator|.
name|getLaunchContext
argument_list|()
operator|.
name|getEnvironment
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Docker inspect output for "
operator|+
name|containerId
operator|+
literal|": "
operator|+
name|output
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|output
operator|.
name|lastIndexOf
argument_list|(
literal|','
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Incorrect format for ip and host"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
name|ips
init|=
name|output
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|host
init|=
name|output
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
index|[]
name|ipAndHost
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|ipAndHost
index|[
literal|0
index|]
operator|=
name|ips
expr_stmt|;
name|ipAndHost
index|[
literal|1
index|]
operator|=
name|host
expr_stmt|;
return|return
name|ipAndHost
return|;
block|}
catch|catch
parameter_list|(
name|ContainerExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error when writing command to temp file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PrivilegedOperationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error when executing command."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|buildLaunchOp (ContainerRuntimeContext ctx, String commandFile, DockerRunCommand runCommand)
specifier|private
name|PrivilegedOperation
name|buildLaunchOp
parameter_list|(
name|ContainerRuntimeContext
name|ctx
parameter_list|,
name|String
name|commandFile
parameter_list|,
name|DockerRunCommand
name|runCommand
parameter_list|)
block|{
name|String
name|runAsUser
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|RUN_AS_USER
argument_list|)
decl_stmt|;
name|String
name|containerIdStr
init|=
name|ctx
operator|.
name|getContainer
argument_list|()
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Path
name|nmPrivateContainerScriptPath
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|NM_PRIVATE_CONTAINER_SCRIPT_PATH
argument_list|)
decl_stmt|;
name|Path
name|containerWorkDir
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|CONTAINER_WORK_DIR
argument_list|)
decl_stmt|;
comment|//we can't do better here thanks to type-erasure
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|localDirs
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|LOCAL_DIRS
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|logDirs
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|LOG_DIRS
argument_list|)
decl_stmt|;
name|String
name|resourcesOpts
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|RESOURCES_OPTIONS
argument_list|)
decl_stmt|;
name|PrivilegedOperation
name|launchOp
init|=
operator|new
name|PrivilegedOperation
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|LAUNCH_DOCKER_CONTAINER
argument_list|)
decl_stmt|;
name|launchOp
operator|.
name|appendArgs
argument_list|(
name|runAsUser
argument_list|,
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|USER
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|PrivilegedOperation
operator|.
name|RunAsUserCommand
operator|.
name|LAUNCH_DOCKER_CONTAINER
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|APPID
argument_list|)
argument_list|,
name|containerIdStr
argument_list|,
name|containerWorkDir
operator|.
name|toString
argument_list|()
argument_list|,
name|nmPrivateContainerScriptPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|NM_PRIVATE_TOKENS_PATH
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|PID_FILE_PATH
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|PrivilegedOperation
operator|.
name|LINUX_FILE_PATH_SEPARATOR
argument_list|,
name|localDirs
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|PrivilegedOperation
operator|.
name|LINUX_FILE_PATH_SEPARATOR
argument_list|,
name|logDirs
argument_list|)
argument_list|,
name|commandFile
argument_list|,
name|resourcesOpts
argument_list|)
expr_stmt|;
name|String
name|tcCommandFile
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|TC_COMMAND_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|tcCommandFile
operator|!=
literal|null
condition|)
block|{
name|launchOp
operator|.
name|appendArgs
argument_list|(
name|tcCommandFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Launching container with cmd: "
operator|+
name|runCommand
operator|.
name|getCommandWithArguments
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|launchOp
return|;
block|}
DECL|method|validateImageName (String imageName)
specifier|public
specifier|static
name|void
name|validateImageName
parameter_list|(
name|String
name|imageName
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
if|if
condition|(
name|imageName
operator|==
literal|null
operator|||
name|imageName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
name|ENV_DOCKER_CONTAINER_IMAGE
operator|+
literal|" not set!"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|dockerImagePattern
operator|.
name|matcher
argument_list|(
name|imageName
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
literal|"Image name '"
operator|+
name|imageName
operator|+
literal|"' doesn't match docker image name pattern"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

