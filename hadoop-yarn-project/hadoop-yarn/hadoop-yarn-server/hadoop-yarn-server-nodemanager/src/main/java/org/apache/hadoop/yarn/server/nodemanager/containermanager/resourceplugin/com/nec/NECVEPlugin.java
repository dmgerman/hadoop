begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.com.nec
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|com
operator|.
name|nec
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|CommandExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|Device
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|DevicePlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|DevicePluginScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|DeviceRegisterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|DeviceRuntimeSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|YarnRuntimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|ResourceHandlerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_comment
comment|/**  * A device framework plugin which supports NEC Vector Engine.  *  */
end_comment

begin_class
DECL|class|NECVEPlugin
specifier|public
class|class
name|NECVEPlugin
implements|implements
name|DevicePlugin
implements|,
name|DevicePluginScheduler
block|{
DECL|field|HADOOP_COMMON_HOME
specifier|private
specifier|static
specifier|final
name|String
name|HADOOP_COMMON_HOME
init|=
literal|"HADOOP_COMMON_HOME"
decl_stmt|;
DECL|field|ENV_SCRIPT_PATH
specifier|private
specifier|static
specifier|final
name|String
name|ENV_SCRIPT_PATH
init|=
literal|"NEC_VE_GET_SCRIPT_PATH"
decl_stmt|;
DECL|field|ENV_SCRIPT_NAME
specifier|private
specifier|static
specifier|final
name|String
name|ENV_SCRIPT_NAME
init|=
literal|"NEC_VE_GET_SCRIPT_NAME"
decl_stmt|;
DECL|field|ENV_USE_UDEV
specifier|private
specifier|static
specifier|final
name|String
name|ENV_USE_UDEV
init|=
literal|"NEC_USE_UDEV"
decl_stmt|;
DECL|field|DEFAULT_SCRIPT_NAME
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_SCRIPT_NAME
init|=
literal|"nec-ve-get.py"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NECVEPlugin
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_BINARY_SEARCH_DIRS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|DEFAULT_BINARY_SEARCH_DIRS
init|=
operator|new
name|String
index|[]
block|{
literal|"/usr/bin"
block|,
literal|"/bin"
block|,
literal|"/opt/nec/ve/bin"
block|}
decl_stmt|;
DECL|field|binaryPath
specifier|private
name|String
name|binaryPath
decl_stmt|;
DECL|field|useUdev
specifier|private
name|boolean
name|useUdev
decl_stmt|;
DECL|field|discoverer
specifier|private
name|VEDeviceDiscoverer
name|discoverer
decl_stmt|;
specifier|private
name|Function
argument_list|<
name|String
index|[]
argument_list|,
name|CommandExecutor
argument_list|>
DECL|field|commandExecutorProvider
name|commandExecutorProvider
init|=
name|this
operator|::
name|createCommandExecutor
decl_stmt|;
DECL|method|NECVEPlugin ()
specifier|public
name|NECVEPlugin
parameter_list|()
throws|throws
name|ResourceHandlerException
block|{
name|this
argument_list|(
name|System
operator|::
name|getenv
argument_list|,
name|DEFAULT_BINARY_SEARCH_DIRS
argument_list|,
operator|new
name|UdevUtil
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|NECVEPlugin (Function<String, String> envProvider, String[] scriptPaths, UdevUtil udev)
name|NECVEPlugin
parameter_list|(
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envProvider
parameter_list|,
name|String
index|[]
name|scriptPaths
parameter_list|,
name|UdevUtil
name|udev
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
if|if
condition|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|envProvider
operator|.
name|apply
argument_list|(
name|ENV_USE_UDEV
argument_list|)
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using libudev to retrieve syspath& device status"
argument_list|)
expr_stmt|;
name|useUdev
operator|=
literal|true
expr_stmt|;
name|udev
operator|.
name|init
argument_list|()
expr_stmt|;
name|discoverer
operator|=
operator|new
name|VEDeviceDiscoverer
argument_list|(
name|udev
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scriptBasedInit
argument_list|(
name|envProvider
argument_list|,
name|scriptPaths
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|scriptBasedInit (Function<String, String> envProvider, String[] scriptPaths)
specifier|private
name|void
name|scriptBasedInit
parameter_list|(
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envProvider
parameter_list|,
name|String
index|[]
name|scriptPaths
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|String
name|binaryName
init|=
name|DEFAULT_SCRIPT_NAME
decl_stmt|;
name|String
name|envScriptName
init|=
name|envProvider
operator|.
name|apply
argument_list|(
name|ENV_SCRIPT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|envScriptName
operator|!=
literal|null
condition|)
block|{
name|binaryName
operator|=
name|envScriptName
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Use {} as script name."
argument_list|,
name|binaryName
argument_list|)
expr_stmt|;
comment|// Try to find the script based on an environment variable, if set
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|String
name|envBinaryPath
init|=
name|envProvider
operator|.
name|apply
argument_list|(
name|ENV_SCRIPT_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|envBinaryPath
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|binaryPath
operator|=
name|getScriptFromEnvSetting
argument_list|(
name|envBinaryPath
argument_list|)
expr_stmt|;
name|found
operator|=
name|binaryPath
operator|!=
literal|null
expr_stmt|;
block|}
comment|// Try $HADOOP_COMMON_HOME
if|if
condition|(
operator|!
name|found
condition|)
block|{
comment|// print a warning only if the env variable was defined
if|if
condition|(
name|envBinaryPath
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Script {} does not exist, falling back "
operator|+
literal|"to $HADOOP_COMMON_HOME/sbin/DevicePluginScript/"
argument_list|,
name|envBinaryPath
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|binaryPath
operator|=
name|getScriptFromHadoopCommon
argument_list|(
name|envProvider
argument_list|,
name|binaryName
argument_list|)
expr_stmt|;
name|found
operator|=
name|binaryPath
operator|!=
literal|null
expr_stmt|;
block|}
comment|// Try the default search directories
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Script not found under"
operator|+
literal|" $HADOOP_COMMON_HOME/sbin/DevicePluginScript/,"
operator|+
literal|" falling back to default search directories"
argument_list|)
expr_stmt|;
name|this
operator|.
name|binaryPath
operator|=
name|getScriptFromSearchDirs
argument_list|(
name|binaryName
argument_list|,
name|scriptPaths
argument_list|)
expr_stmt|;
name|found
operator|=
name|binaryPath
operator|!=
literal|null
expr_stmt|;
block|}
comment|// Script not found
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Script not found in "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|scriptPaths
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
literal|"No binary found for "
operator|+
name|NECVEPlugin
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getRegisterRequestInfo ()
specifier|public
name|DeviceRegisterRequest
name|getRegisterRequestInfo
parameter_list|()
block|{
return|return
name|DeviceRegisterRequest
operator|.
name|Builder
operator|.
name|newInstance
argument_list|()
operator|.
name|setResourceName
argument_list|(
literal|"nec.com/ve"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getDevices ()
specifier|public
name|Set
argument_list|<
name|Device
argument_list|>
name|getDevices
parameter_list|()
block|{
name|Set
argument_list|<
name|Device
argument_list|>
name|devices
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|useUdev
condition|)
block|{
try|try
block|{
name|devices
operator|=
name|discoverer
operator|.
name|getDevicesFromPath
argument_list|(
literal|"/dev"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during scanning devices"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|CommandExecutor
name|executor
init|=
name|commandExecutorProvider
operator|.
name|apply
argument_list|(
operator|new
name|String
index|[]
block|{
name|this
operator|.
name|binaryPath
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|executor
operator|.
name|execute
argument_list|()
expr_stmt|;
name|String
name|output
init|=
name|executor
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|devices
operator|=
name|parseOutput
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during executing external binary"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|devices
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Found devices:"
argument_list|)
expr_stmt|;
name|devices
operator|.
name|forEach
argument_list|(
name|dev
lambda|->
name|LOG
operator|.
name|info
argument_list|(
literal|"{}"
argument_list|,
name|dev
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|devices
return|;
block|}
annotation|@
name|Override
DECL|method|onDevicesAllocated (Set<Device> set, YarnRuntimeType yarnRuntimeType)
specifier|public
name|DeviceRuntimeSpec
name|onDevicesAllocated
parameter_list|(
name|Set
argument_list|<
name|Device
argument_list|>
name|set
parameter_list|,
name|YarnRuntimeType
name|yarnRuntimeType
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|/**    * Parses the output of the external Python script.    *    * Sample line:    * id=0, dev=/dev/ve0, state=ONLINE, busId=0000:65:00.0, major=243, minor=0    */
DECL|method|parseOutput (String output)
specifier|private
name|Set
argument_list|<
name|Device
argument_list|>
name|parseOutput
parameter_list|(
name|String
name|output
parameter_list|)
block|{
name|Set
argument_list|<
name|Device
argument_list|>
name|devices
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Parsing output: {}"
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|String
index|[]
name|lines
init|=
name|output
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
name|outer
label|:
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|Device
operator|.
name|Builder
name|builder
init|=
name|Device
operator|.
name|Builder
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|// map key --> builder calls
name|Map
argument_list|<
name|String
argument_list|,
name|Consumer
argument_list|<
name|String
argument_list|>
argument_list|>
name|builderInvocations
init|=
name|getBuilderInvocationsMap
argument_list|(
name|builder
argument_list|)
decl_stmt|;
name|String
index|[]
name|keyValues
init|=
name|line
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|keyValue
range|:
name|keyValues
control|)
block|{
name|String
index|[]
name|tokens
init|=
name|keyValue
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unknown format of script output! Skipping this line"
argument_list|)
expr_stmt|;
continue|continue
name|outer
continue|;
block|}
specifier|final
name|String
name|key
init|=
name|tokens
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|String
name|value
init|=
name|tokens
index|[
literal|1
index|]
decl_stmt|;
name|Consumer
argument_list|<
name|String
argument_list|>
name|builderInvocation
init|=
name|builderInvocations
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|builderInvocation
operator|!=
literal|null
condition|)
block|{
name|builderInvocation
operator|.
name|accept
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unknown key {}, ignored"
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
comment|// for key value pairs
name|Device
name|device
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|device
operator|.
name|isHealthy
argument_list|()
condition|)
block|{
name|devices
operator|.
name|add
argument_list|(
name|device
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skipping device {} because it's not healthy"
argument_list|,
name|device
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|devices
return|;
block|}
annotation|@
name|Override
DECL|method|onDevicesReleased (Set<Device> releasedDevices)
specifier|public
name|void
name|onDevicesReleased
parameter_list|(
name|Set
argument_list|<
name|Device
argument_list|>
name|releasedDevices
parameter_list|)
block|{
comment|// nop
block|}
annotation|@
name|Override
DECL|method|allocateDevices (Set<Device> availableDevices, int count, Map<String, String> env)
specifier|public
name|Set
argument_list|<
name|Device
argument_list|>
name|allocateDevices
parameter_list|(
name|Set
argument_list|<
name|Device
argument_list|>
name|availableDevices
parameter_list|,
name|int
name|count
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|)
block|{
comment|// Can consider topology, utilization.etc
name|Set
argument_list|<
name|Device
argument_list|>
name|allocated
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|number
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Device
name|d
range|:
name|availableDevices
control|)
block|{
name|allocated
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|number
operator|++
expr_stmt|;
if|if
condition|(
name|number
operator|==
name|count
condition|)
block|{
break|break;
block|}
block|}
return|return
name|allocated
return|;
block|}
DECL|method|createCommandExecutor (String[] command)
specifier|private
name|CommandExecutor
name|createCommandExecutor
parameter_list|(
name|String
index|[]
name|command
parameter_list|)
block|{
return|return
operator|new
name|Shell
operator|.
name|ShellCommandExecutor
argument_list|(
name|command
argument_list|)
return|;
block|}
DECL|method|getScriptFromEnvSetting (String envBinaryPath)
specifier|private
name|String
name|getScriptFromEnvSetting
parameter_list|(
name|String
name|envBinaryPath
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking script path: {}"
argument_list|,
name|envBinaryPath
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|envBinaryPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Script {} does not exist"
argument_list|,
name|envBinaryPath
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Specified path {} is a directory"
argument_list|,
name|envBinaryPath
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|FileUtil
operator|.
name|canExecute
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Script {} is not executable"
argument_list|,
name|envBinaryPath
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Found script: {}"
argument_list|,
name|envBinaryPath
argument_list|)
expr_stmt|;
return|return
name|envBinaryPath
return|;
block|}
DECL|method|getScriptFromHadoopCommon ( Function<String, String> envProvider, String binaryName)
specifier|private
name|String
name|getScriptFromHadoopCommon
parameter_list|(
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envProvider
parameter_list|,
name|String
name|binaryName
parameter_list|)
block|{
name|String
name|scriptPath
init|=
literal|null
decl_stmt|;
name|String
name|hadoopCommon
init|=
name|envProvider
operator|.
name|apply
argument_list|(
name|HADOOP_COMMON_HOME
argument_list|)
decl_stmt|;
if|if
condition|(
name|hadoopCommon
operator|!=
literal|null
condition|)
block|{
name|String
name|targetPath
init|=
name|hadoopCommon
operator|+
literal|"/sbin/DevicePluginScript/"
operator|+
name|binaryName
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking script {}: "
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
if|if
condition|(
operator|new
name|File
argument_list|(
name|targetPath
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Found script: {}"
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
name|scriptPath
operator|=
name|targetPath
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"$HADOOP_COMMON_HOME is not set"
argument_list|)
expr_stmt|;
block|}
return|return
name|scriptPath
return|;
block|}
DECL|method|getScriptFromSearchDirs (String binaryName, String[] scriptPaths)
specifier|private
name|String
name|getScriptFromSearchDirs
parameter_list|(
name|String
name|binaryName
parameter_list|,
name|String
index|[]
name|scriptPaths
parameter_list|)
block|{
name|String
name|scriptPath
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|dir
range|:
name|scriptPaths
control|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|binaryName
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Found script: {}"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|scriptPath
operator|=
name|f
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
return|return
name|scriptPath
return|;
block|}
DECL|method|getBuilderInvocationsMap ( Device.Builder builder)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Consumer
argument_list|<
name|String
argument_list|>
argument_list|>
name|getBuilderInvocationsMap
parameter_list|(
name|Device
operator|.
name|Builder
name|builder
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Consumer
argument_list|<
name|String
argument_list|>
argument_list|>
name|builderInvocations
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|builderInvocations
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
name|v
lambda|->
name|builder
operator|.
name|setId
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|v
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builderInvocations
operator|.
name|put
argument_list|(
literal|"dev"
argument_list|,
name|v
lambda|->
name|builder
operator|.
name|setDevPath
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|builderInvocations
operator|.
name|put
argument_list|(
literal|"state"
argument_list|,
name|v
lambda|->
block|{
if|if
condition|(
name|v
operator|.
name|equals
argument_list|(
literal|"ONLINE"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setHealthy
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setStatus
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|builderInvocations
operator|.
name|put
argument_list|(
literal|"busId"
argument_list|,
name|v
lambda|->
name|builder
operator|.
name|setBusID
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|builderInvocations
operator|.
name|put
argument_list|(
literal|"major"
argument_list|,
name|v
lambda|->
name|builder
operator|.
name|setMajorNumber
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|v
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builderInvocations
operator|.
name|put
argument_list|(
literal|"minor"
argument_list|,
name|v
lambda|->
name|builder
operator|.
name|setMinorNumber
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|v
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builderInvocations
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setCommandExecutorProvider ( Function<String[], CommandExecutor> provider)
name|void
name|setCommandExecutorProvider
parameter_list|(
name|Function
argument_list|<
name|String
index|[]
argument_list|,
name|CommandExecutor
argument_list|>
name|provider
parameter_list|)
block|{
name|this
operator|.
name|commandExecutorProvider
operator|=
name|provider
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setVeDeviceDiscoverer (VEDeviceDiscoverer veDeviceDiscoverer)
name|void
name|setVeDeviceDiscoverer
parameter_list|(
name|VEDeviceDiscoverer
name|veDeviceDiscoverer
parameter_list|)
block|{
name|this
operator|.
name|discoverer
operator|=
name|veDeviceDiscoverer
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getBinaryPath ()
name|String
name|getBinaryPath
parameter_list|()
block|{
return|return
name|binaryPath
return|;
block|}
block|}
end_class

end_unit

