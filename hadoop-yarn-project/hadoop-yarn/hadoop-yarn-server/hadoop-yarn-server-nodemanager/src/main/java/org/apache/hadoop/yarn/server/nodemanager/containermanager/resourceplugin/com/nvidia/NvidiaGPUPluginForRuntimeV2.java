begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.com.nvidia
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|com
operator|.
name|nvidia
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|Device
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|DevicePlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|DevicePluginScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|DeviceRegisterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|DeviceRuntimeSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|YarnRuntimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * Nvidia GPU plugin supporting both Nvidia container runtime v2 for Docker and  * non-Docker container.  * It has topology aware as well as simple scheduling ability.  * */
end_comment

begin_class
DECL|class|NvidiaGPUPluginForRuntimeV2
specifier|public
class|class
name|NvidiaGPUPluginForRuntimeV2
implements|implements
name|DevicePlugin
implements|,
name|DevicePluginScheduler
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NV_RESOURCE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|NV_RESOURCE_NAME
init|=
literal|"nvidia.com/gpu"
decl_stmt|;
DECL|field|shellExecutor
specifier|private
name|NvidiaCommandExecutor
name|shellExecutor
init|=
operator|new
name|NvidiaCommandExecutor
argument_list|()
decl_stmt|;
DECL|field|environment
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// If this environment is set, use it directly
DECL|field|ENV_BINARY_PATH
specifier|private
specifier|static
specifier|final
name|String
name|ENV_BINARY_PATH
init|=
literal|"NVIDIA_SMI_PATH"
decl_stmt|;
DECL|field|DEFAULT_BINARY_NAME
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_BINARY_NAME
init|=
literal|"nvidia-smi"
decl_stmt|;
DECL|field|DEV_NAME_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|DEV_NAME_PREFIX
init|=
literal|"nvidia"
decl_stmt|;
DECL|field|pathOfGpuBinary
specifier|private
name|String
name|pathOfGpuBinary
init|=
literal|null
decl_stmt|;
comment|// command should not run more than 10 sec.
DECL|field|MAX_EXEC_TIMEOUT_MS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_EXEC_TIMEOUT_MS
init|=
literal|10
operator|*
literal|1000
decl_stmt|;
comment|// When executable path not set, try to search default dirs
comment|// By default search /usr/bin, /bin, and /usr/local/nvidia/bin (when
comment|// launched by nvidia-docker.
DECL|field|DEFAULT_BINARY_SEARCH_DIRS
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|DEFAULT_BINARY_SEARCH_DIRS
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"/usr/bin"
argument_list|,
literal|"/bin"
argument_list|,
literal|"/usr/local/nvidia/bin"
argument_list|)
decl_stmt|;
DECL|field|topoInitialized
specifier|private
name|boolean
name|topoInitialized
init|=
literal|false
decl_stmt|;
DECL|field|lastTimeFoundDevices
specifier|private
name|Set
argument_list|<
name|Device
argument_list|>
name|lastTimeFoundDevices
decl_stmt|;
comment|/**    * It caches the combination of different devices and the communication cost.    * The key is device count    * The value is an ordered list of map entry whose key is device combination,    * value is cost. The list is sorted by cost in ascending order.    * For instance:    * { 2=> [[device1,device2]=>0, [device1,device3]=>10]    *   3 => [[device1,device2,device3]=>10, [device2,device3,device5]=>20],    * }    * */
DECL|field|costTable
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Set
argument_list|<
name|Device
argument_list|>
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|costTable
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * The key is a pair of minors. For instance, "0-1" indicates 0 to 1    * The value is weight between the two devices.    * */
DECL|field|devicePairToWeight
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|devicePairToWeight
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * The container can set this environment variable.    * To tell the scheduler what's the policy to use when do scheduling    * */
DECL|field|TOPOLOGY_POLICY_ENV_KEY
specifier|public
specifier|static
specifier|final
name|String
name|TOPOLOGY_POLICY_ENV_KEY
init|=
literal|"NVIDIA_TOPO_POLICY"
decl_stmt|;
comment|/**    * Schedule policy that prefer the faster GPU-GPU communication.    * Suitable for heavy GPU computation workload generally.    * */
DECL|field|TOPOLOGY_POLICY_PACK
specifier|public
specifier|static
specifier|final
name|String
name|TOPOLOGY_POLICY_PACK
init|=
literal|"PACK"
decl_stmt|;
comment|/**    * Schedule policy that prefer the faster CPU-GPU communication.    * Suitable for heavy CPU-GPU IO operations generally.    * */
DECL|field|TOPOLOGY_POLICY_SPREAD
specifier|public
specifier|static
specifier|final
name|String
name|TOPOLOGY_POLICY_SPREAD
init|=
literal|"SPREAD"
decl_stmt|;
annotation|@
name|Override
DECL|method|getRegisterRequestInfo ()
specifier|public
name|DeviceRegisterRequest
name|getRegisterRequestInfo
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|DeviceRegisterRequest
operator|.
name|Builder
operator|.
name|newInstance
argument_list|()
operator|.
name|setResourceName
argument_list|(
name|NV_RESOURCE_NAME
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getDevices ()
specifier|public
name|Set
argument_list|<
name|Device
argument_list|>
name|getDevices
parameter_list|()
throws|throws
name|Exception
block|{
name|shellExecutor
operator|.
name|searchBinary
argument_list|()
expr_stmt|;
name|TreeSet
argument_list|<
name|Device
argument_list|>
name|r
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|output
decl_stmt|;
try|try
block|{
name|output
operator|=
name|shellExecutor
operator|.
name|getDeviceInfo
argument_list|()
expr_stmt|;
name|String
index|[]
name|lines
init|=
name|output
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|oneLine
range|:
name|lines
control|)
block|{
name|String
index|[]
name|tokensEachLine
init|=
name|oneLine
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokensEachLine
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Cannot parse the output to get device info. "
operator|+
literal|"Unexpected format in it:"
operator|+
name|oneLine
argument_list|)
throw|;
block|}
name|String
name|minorNumber
init|=
name|tokensEachLine
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|busId
init|=
name|tokensEachLine
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|majorNumber
init|=
name|getMajorNumber
argument_list|(
name|DEV_NAME_PREFIX
operator|+
name|minorNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|majorNumber
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|add
argument_list|(
name|Device
operator|.
name|Builder
operator|.
name|newInstance
argument_list|()
operator|.
name|setId
argument_list|(
name|id
argument_list|)
operator|.
name|setMajorNumber
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|majorNumber
argument_list|)
argument_list|)
operator|.
name|setMinorNumber
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|minorNumber
argument_list|)
argument_list|)
operator|.
name|setBusID
argument_list|(
name|busId
argument_list|)
operator|.
name|setDevPath
argument_list|(
literal|"/dev/"
operator|+
name|DEV_NAME_PREFIX
operator|+
name|minorNumber
argument_list|)
operator|.
name|setHealthy
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
block|}
comment|// cache it which help to topology scheduling
name|lastTimeFoundDevices
operator|=
name|r
expr_stmt|;
return|return
name|r
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to get output from {}"
argument_list|,
name|pathOfGpuBinary
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|onDevicesAllocated (Set<Device> allocatedDevices, YarnRuntimeType yarnRuntime)
specifier|public
name|DeviceRuntimeSpec
name|onDevicesAllocated
parameter_list|(
name|Set
argument_list|<
name|Device
argument_list|>
name|allocatedDevices
parameter_list|,
name|YarnRuntimeType
name|yarnRuntime
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Generating runtime spec for allocated devices: {}, {}"
argument_list|,
name|allocatedDevices
argument_list|,
name|yarnRuntime
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|yarnRuntime
operator|==
name|YarnRuntimeType
operator|.
name|RUNTIME_DOCKER
condition|)
block|{
name|String
name|nvidiaRuntime
init|=
literal|"nvidia"
decl_stmt|;
name|String
name|nvidiaVisibleDevices
init|=
literal|"NVIDIA_VISIBLE_DEVICES"
decl_stmt|;
name|StringBuffer
name|gpuMinorNumbersSB
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Device
name|device
range|:
name|allocatedDevices
control|)
block|{
name|gpuMinorNumbersSB
operator|.
name|append
argument_list|(
name|device
operator|.
name|getMinorNumber
argument_list|()
operator|+
literal|","
argument_list|)
expr_stmt|;
block|}
name|String
name|minorNumbers
init|=
name|gpuMinorNumbersSB
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Nvidia Docker v2 assigned GPU: "
operator|+
name|minorNumbers
argument_list|)
expr_stmt|;
return|return
name|DeviceRuntimeSpec
operator|.
name|Builder
operator|.
name|newInstance
argument_list|()
operator|.
name|addEnv
argument_list|(
name|nvidiaVisibleDevices
argument_list|,
name|minorNumbers
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|minorNumbers
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|setContainerRuntime
argument_list|(
name|nvidiaRuntime
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|onDevicesReleased (Set<Device> releasedDevices)
specifier|public
name|void
name|onDevicesReleased
parameter_list|(
name|Set
argument_list|<
name|Device
argument_list|>
name|releasedDevices
parameter_list|)
throws|throws
name|Exception
block|{
comment|// do nothing
block|}
comment|// Get major number from device name.
DECL|method|getMajorNumber (String devName)
specifier|private
name|String
name|getMajorNumber
parameter_list|(
name|String
name|devName
parameter_list|)
block|{
name|String
name|output
init|=
literal|null
decl_stmt|;
comment|// output "major:minor" in hex
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Get major numbers from /dev/{}"
argument_list|,
name|devName
argument_list|)
expr_stmt|;
name|output
operator|=
name|shellExecutor
operator|.
name|getMajorMinorInfo
argument_list|(
name|devName
argument_list|)
expr_stmt|;
name|String
index|[]
name|strs
init|=
name|output
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"stat output:{}"
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|output
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|strs
index|[
literal|0
index|]
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Failed to get major number from reading /dev/"
operator|+
name|devName
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to parse device major number from stat output"
argument_list|)
expr_stmt|;
name|output
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|output
return|;
block|}
annotation|@
name|Override
DECL|method|allocateDevices (Set<Device> availableDevices, int count, Map<String, String> envs)
specifier|public
name|Set
argument_list|<
name|Device
argument_list|>
name|allocateDevices
parameter_list|(
name|Set
argument_list|<
name|Device
argument_list|>
name|availableDevices
parameter_list|,
name|int
name|count
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envs
parameter_list|)
block|{
name|Set
argument_list|<
name|Device
argument_list|>
name|allocation
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * corner cases.      * if allocate 1 device or all devices, no topo scheduling needed.      * if total available devices is less than 3, no topo scheduling needed.      * */
if|if
condition|(
name|availableDevices
operator|.
name|size
argument_list|()
operator|<
literal|3
operator|||
name|count
operator|==
literal|1
operator|||
name|availableDevices
operator|.
name|size
argument_list|()
operator|==
name|count
condition|)
block|{
name|basicSchedule
argument_list|(
name|allocation
argument_list|,
name|count
argument_list|,
name|availableDevices
argument_list|)
expr_stmt|;
return|return
name|allocation
return|;
block|}
try|try
block|{
if|if
condition|(
operator|!
name|topoInitialized
condition|)
block|{
name|initCostTable
argument_list|()
expr_stmt|;
block|}
comment|// topology aware scheduling
name|topologyAwareSchedule
argument_list|(
name|allocation
argument_list|,
name|count
argument_list|,
name|envs
argument_list|,
name|availableDevices
argument_list|,
name|this
operator|.
name|costTable
argument_list|)
expr_stmt|;
if|if
condition|(
name|allocation
operator|.
name|size
argument_list|()
operator|==
name|count
condition|)
block|{
return|return
name|allocation
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to do topology scheduling. Skip to use basic "
operator|+
literal|"scheduling"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in getting GPU topology info. "
operator|+
literal|"Skip topology aware scheduling"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// basic scheduling
name|basicSchedule
argument_list|(
name|allocation
argument_list|,
name|count
argument_list|,
name|availableDevices
argument_list|)
expr_stmt|;
return|return
name|allocation
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|initCostTable ()
specifier|public
name|void
name|initCostTable
parameter_list|()
throws|throws
name|IOException
block|{
comment|// get topology
name|String
name|topo
init|=
name|shellExecutor
operator|.
name|getTopologyInfo
argument_list|()
decl_stmt|;
comment|// build the graph
name|parseTopo
argument_list|(
name|topo
argument_list|,
name|devicePairToWeight
argument_list|)
expr_stmt|;
comment|// build the cost table of different device combinations
if|if
condition|(
name|lastTimeFoundDevices
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|getDevices
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to get devices!"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|buildCostTable
argument_list|(
name|costTable
argument_list|,
name|lastTimeFoundDevices
argument_list|)
expr_stmt|;
name|loggingCostTable
argument_list|(
name|costTable
argument_list|)
expr_stmt|;
name|this
operator|.
name|topoInitialized
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|loggingCostTable ( Map<Integer, List<Map.Entry<Set<Device>, Integer>>> cTable)
specifier|private
name|void
name|loggingCostTable
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Set
argument_list|<
name|Device
argument_list|>
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|cTable
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"The costTable is:"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n{"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Set
argument_list|<
name|Device
argument_list|>
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|entry
range|:
name|cTable
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n\t"
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" => ["
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Set
argument_list|<
name|Device
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|e
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n\t\t"
argument_list|)
operator|.
name|append
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\t\t]\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Generate combination of devices and its cost.    * costTable    * */
DECL|method|buildCostTable ( Map<Integer, List<Map.Entry<Set<Device>, Integer>>> cTable, Set<Device> ltfDevices)
specifier|private
name|void
name|buildCostTable
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Set
argument_list|<
name|Device
argument_list|>
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|cTable
parameter_list|,
name|Set
argument_list|<
name|Device
argument_list|>
name|ltfDevices
parameter_list|)
block|{
name|Device
index|[]
name|deviceList
init|=
operator|new
name|Device
index|[
name|ltfDevices
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|ltfDevices
operator|.
name|toArray
argument_list|(
name|deviceList
argument_list|)
expr_stmt|;
name|generateAllDeviceCombination
argument_list|(
name|cTable
argument_list|,
name|deviceList
argument_list|,
name|deviceList
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * For every possible combination of i elements.    * We generate a map whose key is the combination, value is cost.    */
DECL|method|generateAllDeviceCombination ( Map<Integer, List<Map.Entry<Set<Device>, Integer>>> cTable, Device[] allDevices, int n)
specifier|private
name|void
name|generateAllDeviceCombination
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Set
argument_list|<
name|Device
argument_list|>
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|cTable
parameter_list|,
name|Device
index|[]
name|allDevices
parameter_list|,
name|int
name|n
parameter_list|)
block|{
comment|// allocated devices count range from 1 to n-1
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|Map
argument_list|<
name|Set
argument_list|<
name|Device
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|combinationToCost
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|buildCombination
argument_list|(
name|combinationToCost
argument_list|,
name|allDevices
argument_list|,
name|n
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// sort the map entry by cost ascending order
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Set
argument_list|<
name|Device
argument_list|>
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|listSortedByCost
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|combinationToCost
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|listSortedByCost
argument_list|,
parameter_list|(
name|o1
parameter_list|,
name|o2
parameter_list|)
lambda|->
operator|(
name|o1
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cTable
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|listSortedByCost
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|buildCombination (Map<Set<Device>, Integer> combinationToCost, Device[] allDevices, int n, int r)
specifier|private
name|void
name|buildCombination
parameter_list|(
name|Map
argument_list|<
name|Set
argument_list|<
name|Device
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|combinationToCost
parameter_list|,
name|Device
index|[]
name|allDevices
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|r
parameter_list|)
block|{
comment|// A temporary list to store all combination one by one
name|Device
index|[]
name|subDeviceList
init|=
operator|new
name|Device
index|[
name|r
index|]
decl_stmt|;
name|combinationRecursive
argument_list|(
name|combinationToCost
argument_list|,
name|allDevices
argument_list|,
name|subDeviceList
argument_list|,
literal|0
argument_list|,
name|n
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
comment|/**    * Populate combination to cost map recursively.    *    * @param cTc           combinationToCost map.    *                      The key is device set, the value is cost    * @param allDevices    all devices used to assign value to subDevicelist    * @param subDeviceList store a subset of devices temporary    * @param start         start index in the allDevices    * @param end           last index in the allDevices    * @param index         dynamic index in subDeviceList need to be assigned    * @param r             the length of the subDeviceList    */
DECL|method|combinationRecursive (Map<Set<Device>, Integer> cTc, Device[] allDevices, Device[] subDeviceList, int start, int end, int index, int r)
name|void
name|combinationRecursive
parameter_list|(
name|Map
argument_list|<
name|Set
argument_list|<
name|Device
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|cTc
parameter_list|,
name|Device
index|[]
name|allDevices
parameter_list|,
name|Device
index|[]
name|subDeviceList
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|r
parameter_list|)
block|{
comment|// sub device list's length is ready to compute the cost
if|if
condition|(
name|index
operator|==
name|r
condition|)
block|{
name|Set
argument_list|<
name|Device
argument_list|>
name|oneSet
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|subDeviceList
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|cost
init|=
name|computeCostOfDevices
argument_list|(
name|subDeviceList
argument_list|)
decl_stmt|;
name|cTc
operator|.
name|put
argument_list|(
name|oneSet
argument_list|,
name|cost
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<=
name|end
condition|;
name|i
operator|++
control|)
block|{
name|subDeviceList
index|[
name|index
index|]
operator|=
name|allDevices
index|[
name|i
index|]
expr_stmt|;
name|combinationRecursive
argument_list|(
name|cTc
argument_list|,
name|allDevices
argument_list|,
name|subDeviceList
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|end
argument_list|,
name|index
operator|+
literal|1
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * The cost function used to calculate costs of a sub set of devices.    * It calculate link weight of each pair in non-duplicated combination of    * devices.    */
annotation|@
name|VisibleForTesting
DECL|method|computeCostOfDevices (Device[] devices)
specifier|public
name|int
name|computeCostOfDevices
parameter_list|(
name|Device
index|[]
name|devices
parameter_list|)
block|{
name|int
name|cost
init|=
literal|0
decl_stmt|;
name|String
name|gpuIndex0
decl_stmt|;
name|String
name|gpuIndex1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|devices
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|gpuIndex0
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|devices
index|[
name|i
index|]
operator|.
name|getMinorNumber
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|devices
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|gpuIndex1
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|devices
index|[
name|j
index|]
operator|.
name|getMinorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|cost
operator|+=
name|this
operator|.
name|devicePairToWeight
operator|.
name|get
argument_list|(
name|gpuIndex0
operator|+
literal|"-"
operator|+
name|gpuIndex1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cost
return|;
block|}
comment|/**    * Topology Aware schedule algorithm.    * It doesn't consider CPU affinity or NUMA or bus bandwidths.    * It support two plicy: "spread" and "pack" which can be set by container's    * environment variable. Use pack by default which means prefer the faster    * GPU-GPU. "Spread" means prefer the faster CPU-GPU.    * It can potentially be extend to take GPU attribute like GPU chip memory    * into consideration.    * */
annotation|@
name|VisibleForTesting
DECL|method|topologyAwareSchedule (Set<Device> allocation, int count, Map<String, String> envs, Set<Device> availableDevices, Map<Integer, List<Map.Entry<Set<Device>, Integer>>> cTable)
specifier|public
name|void
name|topologyAwareSchedule
parameter_list|(
name|Set
argument_list|<
name|Device
argument_list|>
name|allocation
parameter_list|,
name|int
name|count
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envs
parameter_list|,
name|Set
argument_list|<
name|Device
argument_list|>
name|availableDevices
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Set
argument_list|<
name|Device
argument_list|>
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|cTable
parameter_list|)
block|{
name|int
name|num
init|=
literal|0
decl_stmt|;
name|String
name|policy
init|=
name|envs
operator|.
name|get
argument_list|(
name|TOPOLOGY_POLICY_ENV_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|policy
operator|==
literal|null
condition|)
block|{
name|policy
operator|=
name|TOPOLOGY_POLICY_PACK
expr_stmt|;
block|}
comment|/**      * Get combinations from costTable given the count of device want to      * allocate.      * */
if|if
condition|(
name|cTable
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No cost table initialized!"
argument_list|)
expr_stmt|;
return|return;
block|}
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Set
argument_list|<
name|Device
argument_list|>
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|combinationsToCost
init|=
name|cTable
operator|.
name|get
argument_list|(
name|count
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Set
argument_list|<
name|Device
argument_list|>
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|iterator
init|=
name|combinationsToCost
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// the container needs spread policy
if|if
condition|(
name|policy
operator|.
name|equalsIgnoreCase
argument_list|(
name|TOPOLOGY_POLICY_SPREAD
argument_list|)
condition|)
block|{
comment|// loop from high cost to low cost
name|iterator
operator|=
operator|(
operator|(
name|LinkedList
operator|)
name|combinationsToCost
operator|)
operator|.
name|descendingIterator
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Set
argument_list|<
name|Device
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|element
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|availableDevices
operator|.
name|containsAll
argument_list|(
name|element
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|allocation
operator|.
name|addAll
argument_list|(
name|element
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Topology scheduler allocated: "
operator|+
name|allocation
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Unknown error happened in topology scheduler"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|basicSchedule (Set<Device> allocation, int count, Set<Device> availableDevices)
specifier|public
name|void
name|basicSchedule
parameter_list|(
name|Set
argument_list|<
name|Device
argument_list|>
name|allocation
parameter_list|,
name|int
name|count
parameter_list|,
name|Set
argument_list|<
name|Device
argument_list|>
name|availableDevices
parameter_list|)
block|{
comment|// Basic scheduling
comment|// allocate all available
if|if
condition|(
name|count
operator|==
name|availableDevices
operator|.
name|size
argument_list|()
condition|)
block|{
name|allocation
operator|.
name|addAll
argument_list|(
name|availableDevices
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|number
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Device
name|d
range|:
name|availableDevices
control|)
block|{
name|allocation
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|number
operator|++
expr_stmt|;
if|if
condition|(
name|number
operator|==
name|count
condition|)
block|{
break|break;
block|}
block|}
block|}
comment|/**    * A typical sample topo output:    *     GPU0  GPU1  GPU2  GPU3  CPU Affinity    * GPU0  X  PHB  SOC  SOC  0-31    * GPU1 PHB  X   SOC  SOC  0-31    * GPU2 SOC SOC  X    PHB  0-31    * GPU3 SOC SOC  PHB   X   0-31    *    *    * Legend:    *    *   X   = Self    *   SOC  = Connection traversing PCIe as well as the SMP link between    *   CPU sockets(e.g. QPI)    *   PHB  = Connection traversing PCIe as well as a PCIe Host Bridge    *   (typically the CPU)    *   PXB  = Connection traversing multiple PCIe switches    *   (without traversing the PCIe Host Bridge)    *   PIX  = Connection traversing a single PCIe switch    *   NV#  = Connection traversing a bonded set of # NVLinksã    * */
DECL|method|parseTopo (String topo, Map<String, Integer> deviceLinkToWeight)
specifier|public
name|void
name|parseTopo
parameter_list|(
name|String
name|topo
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|deviceLinkToWeight
parameter_list|)
block|{
name|String
index|[]
name|lines
init|=
name|topo
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
name|int
name|rowMinor
decl_stmt|;
name|int
name|colMinor
decl_stmt|;
name|String
name|legend
decl_stmt|;
name|String
name|tempType
decl_stmt|;
for|for
control|(
name|String
name|oneLine
range|:
name|lines
control|)
block|{
name|oneLine
operator|=
name|oneLine
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|oneLine
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
comment|// To the end. No more metrics info
if|if
condition|(
name|oneLine
operator|.
name|startsWith
argument_list|(
literal|"Legend"
argument_list|)
condition|)
block|{
break|break;
block|}
comment|// Skip header
if|if
condition|(
name|oneLine
operator|.
name|contains
argument_list|(
literal|"Affinity"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
index|[]
name|tokens
init|=
name|oneLine
operator|.
name|split
argument_list|(
operator|(
literal|"\\s+"
operator|)
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|tokens
index|[
literal|0
index|]
decl_stmt|;
name|rowMinor
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|"U"
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|tokens
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|tempType
operator|=
name|tokens
index|[
name|i
index|]
expr_stmt|;
name|colMinor
operator|=
name|i
operator|-
literal|1
expr_stmt|;
comment|// self, skip
if|if
condition|(
name|tempType
operator|.
name|equals
argument_list|(
literal|"X"
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|tempType
operator|.
name|equals
argument_list|(
literal|"SOC"
argument_list|)
operator|||
name|tempType
operator|.
name|equals
argument_list|(
literal|"SYS"
argument_list|)
condition|)
block|{
name|populateGraphEdgeWeight
argument_list|(
name|DeviceLinkType
operator|.
name|P2PLinkCrossCPUSocket
argument_list|,
name|rowMinor
argument_list|,
name|colMinor
argument_list|,
name|deviceLinkToWeight
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tempType
operator|.
name|equals
argument_list|(
literal|"PHB"
argument_list|)
operator|||
name|tempType
operator|.
name|equals
argument_list|(
literal|"NODE"
argument_list|)
condition|)
block|{
name|populateGraphEdgeWeight
argument_list|(
name|DeviceLinkType
operator|.
name|P2PLinkSameCPUSocket
argument_list|,
name|rowMinor
argument_list|,
name|colMinor
argument_list|,
name|deviceLinkToWeight
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tempType
operator|.
name|equals
argument_list|(
literal|"PXB"
argument_list|)
condition|)
block|{
name|populateGraphEdgeWeight
argument_list|(
name|DeviceLinkType
operator|.
name|P2PLinkMultiSwitch
argument_list|,
name|rowMinor
argument_list|,
name|colMinor
argument_list|,
name|deviceLinkToWeight
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tempType
operator|.
name|equals
argument_list|(
literal|"PIX"
argument_list|)
condition|)
block|{
name|populateGraphEdgeWeight
argument_list|(
name|DeviceLinkType
operator|.
name|P2PLinkSingleSwitch
argument_list|,
name|rowMinor
argument_list|,
name|colMinor
argument_list|,
name|deviceLinkToWeight
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tempType
operator|.
name|equals
argument_list|(
literal|"NV1"
argument_list|)
condition|)
block|{
name|populateGraphEdgeWeight
argument_list|(
name|DeviceLinkType
operator|.
name|P2PLinkNVLink1
argument_list|,
name|rowMinor
argument_list|,
name|colMinor
argument_list|,
name|deviceLinkToWeight
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tempType
operator|.
name|equals
argument_list|(
literal|"NV2"
argument_list|)
condition|)
block|{
name|populateGraphEdgeWeight
argument_list|(
name|DeviceLinkType
operator|.
name|P2PLinkNVLink2
argument_list|,
name|rowMinor
argument_list|,
name|colMinor
argument_list|,
name|deviceLinkToWeight
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tempType
operator|.
name|equals
argument_list|(
literal|"NV3"
argument_list|)
condition|)
block|{
name|populateGraphEdgeWeight
argument_list|(
name|DeviceLinkType
operator|.
name|P2PLinkNVLink3
argument_list|,
name|rowMinor
argument_list|,
name|colMinor
argument_list|,
name|deviceLinkToWeight
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tempType
operator|.
name|equals
argument_list|(
literal|"NV4"
argument_list|)
condition|)
block|{
name|populateGraphEdgeWeight
argument_list|(
name|DeviceLinkType
operator|.
name|P2PLinkNVLink4
argument_list|,
name|rowMinor
argument_list|,
name|colMinor
argument_list|,
name|deviceLinkToWeight
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tempType
operator|.
name|equals
argument_list|(
literal|"NV5"
argument_list|)
condition|)
block|{
name|populateGraphEdgeWeight
argument_list|(
name|DeviceLinkType
operator|.
name|P2PLinkNVLink5
argument_list|,
name|rowMinor
argument_list|,
name|colMinor
argument_list|,
name|deviceLinkToWeight
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tempType
operator|.
name|equals
argument_list|(
literal|"NV6"
argument_list|)
condition|)
block|{
name|populateGraphEdgeWeight
argument_list|(
name|DeviceLinkType
operator|.
name|P2PLinkNVLink6
argument_list|,
name|rowMinor
argument_list|,
name|colMinor
argument_list|,
name|deviceLinkToWeight
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tempType
operator|.
name|equals
argument_list|(
literal|"NV7"
argument_list|)
condition|)
block|{
name|populateGraphEdgeWeight
argument_list|(
name|DeviceLinkType
operator|.
name|P2PLinkNVLink7
argument_list|,
name|rowMinor
argument_list|,
name|colMinor
argument_list|,
name|deviceLinkToWeight
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tempType
operator|.
name|equals
argument_list|(
literal|"NV8"
argument_list|)
condition|)
block|{
name|populateGraphEdgeWeight
argument_list|(
name|DeviceLinkType
operator|.
name|P2PLinkNVLink8
argument_list|,
name|rowMinor
argument_list|,
name|colMinor
argument_list|,
name|deviceLinkToWeight
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|tempType
operator|.
name|equals
argument_list|(
literal|"NV9"
argument_list|)
condition|)
block|{
name|populateGraphEdgeWeight
argument_list|(
name|DeviceLinkType
operator|.
name|P2PLinkNVLink9
argument_list|,
name|rowMinor
argument_list|,
name|colMinor
argument_list|,
name|deviceLinkToWeight
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
comment|// end one line handling
block|}
block|}
DECL|method|populateGraphEdgeWeight ( DeviceLinkType linkType, int leftVertex, int rightVertex, Map<String, Integer> deviceLinkToWeight)
specifier|private
name|void
name|populateGraphEdgeWeight
parameter_list|(
name|DeviceLinkType
name|linkType
parameter_list|,
name|int
name|leftVertex
parameter_list|,
name|int
name|rightVertex
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|deviceLinkToWeight
parameter_list|)
block|{
name|deviceLinkToWeight
operator|.
name|put
argument_list|(
name|leftVertex
operator|+
literal|"-"
operator|+
name|rightVertex
argument_list|,
name|linkType
operator|.
name|getWeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Different type of link.    * The weight of each link is a relative value.    * The higher weight, the higher cost between the GPUs    * */
DECL|enum|DeviceLinkType
specifier|public
enum|enum
name|DeviceLinkType
block|{
comment|/**      * For Nvdia GPU NVLink.      * */
DECL|enumConstant|P2PLinkNVLink9
name|P2PLinkNVLink9
argument_list|(
literal|10
argument_list|)
block|,
DECL|enumConstant|P2PLinkNVLink8
name|P2PLinkNVLink8
argument_list|(
literal|20
argument_list|)
block|,
DECL|enumConstant|P2PLinkNVLink7
name|P2PLinkNVLink7
argument_list|(
literal|30
argument_list|)
block|,
DECL|enumConstant|P2PLinkNVLink6
name|P2PLinkNVLink6
argument_list|(
literal|40
argument_list|)
block|,
DECL|enumConstant|P2PLinkNVLink5
name|P2PLinkNVLink5
argument_list|(
literal|50
argument_list|)
block|,
DECL|enumConstant|P2PLinkNVLink4
name|P2PLinkNVLink4
argument_list|(
literal|60
argument_list|)
block|,
DECL|enumConstant|P2PLinkNVLink3
name|P2PLinkNVLink3
argument_list|(
literal|70
argument_list|)
block|,
DECL|enumConstant|P2PLinkNVLink2
name|P2PLinkNVLink2
argument_list|(
literal|80
argument_list|)
block|,
DECL|enumConstant|P2PLinkNVLink1
name|P2PLinkNVLink1
argument_list|(
literal|90
argument_list|)
block|,
comment|/**      * Connected to same CPU (Same NUMA node).      * */
DECL|enumConstant|P2PLinkSameCPUSocket
name|P2PLinkSameCPUSocket
argument_list|(
literal|200
argument_list|)
block|,
comment|/**      * Cross CPU through socket-level link (e.g. QPI).      * Usually cross NUMA node      * */
DECL|enumConstant|P2PLinkCrossCPUSocket
name|P2PLinkCrossCPUSocket
argument_list|(
literal|300
argument_list|)
block|,
comment|/**      * Just need to traverse one PCIe switch to talk.      * */
DECL|enumConstant|P2PLinkSingleSwitch
name|P2PLinkSingleSwitch
argument_list|(
literal|600
argument_list|)
block|,
comment|/**      * Need to traverse multiple PCIe switch to talk.      * */
DECL|enumConstant|P2PLinkMultiSwitch
name|P2PLinkMultiSwitch
argument_list|(
literal|1200
argument_list|)
block|;
comment|// A higher link level means slower communication.
DECL|field|weight
specifier|private
name|int
name|weight
decl_stmt|;
DECL|method|getWeight ()
specifier|public
name|int
name|getWeight
parameter_list|()
block|{
return|return
name|weight
return|;
block|}
DECL|method|DeviceLinkType (int w)
name|DeviceLinkType
parameter_list|(
name|int
name|w
parameter_list|)
block|{
name|this
operator|.
name|weight
operator|=
name|w
expr_stmt|;
block|}
block|}
comment|/**    * A shell wrapper class easy for test.    * */
DECL|class|NvidiaCommandExecutor
specifier|public
class|class
name|NvidiaCommandExecutor
block|{
DECL|method|getDeviceInfo ()
specifier|public
name|String
name|getDeviceInfo
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|Shell
operator|.
name|execCommand
argument_list|(
name|environment
argument_list|,
operator|new
name|String
index|[]
block|{
name|pathOfGpuBinary
block|,
literal|"--query-gpu=index,pci.bus_id"
block|,
literal|"--format=csv,noheader"
block|}
argument_list|,
name|MAX_EXEC_TIMEOUT_MS
argument_list|)
return|;
block|}
DECL|method|getMajorMinorInfo (String devName)
specifier|public
name|String
name|getMajorMinorInfo
parameter_list|(
name|String
name|devName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// output "major:minor" in hex
name|Shell
operator|.
name|ShellCommandExecutor
name|shexec
init|=
operator|new
name|Shell
operator|.
name|ShellCommandExecutor
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"stat"
block|,
literal|"-c"
block|,
literal|"%t:%T"
block|,
literal|"/dev/"
operator|+
name|devName
block|}
argument_list|)
decl_stmt|;
name|shexec
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|shexec
operator|.
name|getOutput
argument_list|()
return|;
block|}
comment|// Get the topology metrics info from nvdia-smi
DECL|method|getTopologyInfo ()
specifier|public
name|String
name|getTopologyInfo
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|Shell
operator|.
name|execCommand
argument_list|(
name|environment
argument_list|,
operator|new
name|String
index|[]
block|{
name|pathOfGpuBinary
block|,
literal|"topo"
block|,
literal|"-m"
block|}
argument_list|,
name|MAX_EXEC_TIMEOUT_MS
argument_list|)
return|;
block|}
DECL|method|searchBinary ()
specifier|public
name|void
name|searchBinary
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|pathOfGpuBinary
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skip searching, the nvidia gpu binary is already set: "
operator|+
name|pathOfGpuBinary
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// search env for the binary
name|String
name|envBinaryPath
init|=
name|System
operator|.
name|getenv
argument_list|(
name|ENV_BINARY_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|envBinaryPath
condition|)
block|{
if|if
condition|(
operator|new
name|File
argument_list|(
name|envBinaryPath
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|pathOfGpuBinary
operator|=
name|envBinaryPath
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Use nvidia gpu binary: "
operator|+
name|pathOfGpuBinary
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Search binary.."
argument_list|)
expr_stmt|;
comment|// search if binary exists in default folders
name|File
name|binaryFile
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|dir
range|:
name|DEFAULT_BINARY_SEARCH_DIRS
control|)
block|{
name|binaryFile
operator|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|DEFAULT_BINARY_NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|binaryFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|pathOfGpuBinary
operator|=
name|binaryFile
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Found binary:"
operator|+
name|pathOfGpuBinary
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No binary found from env variable: "
operator|+
name|ENV_BINARY_PATH
operator|+
literal|" or path "
operator|+
name|DEFAULT_BINARY_SEARCH_DIRS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No binary found for "
operator|+
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|setPathOfGpuBinary (String pOfGpuBinary)
specifier|public
name|void
name|setPathOfGpuBinary
parameter_list|(
name|String
name|pOfGpuBinary
parameter_list|)
block|{
name|this
operator|.
name|pathOfGpuBinary
operator|=
name|pOfGpuBinary
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setShellExecutor ( NvidiaCommandExecutor shellExecutor)
specifier|public
name|void
name|setShellExecutor
parameter_list|(
name|NvidiaCommandExecutor
name|shellExecutor
parameter_list|)
block|{
name|this
operator|.
name|shellExecutor
operator|=
name|shellExecutor
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|isTopoInitialized ()
specifier|public
name|boolean
name|isTopoInitialized
parameter_list|()
block|{
return|return
name|topoInitialized
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getCostTable ()
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Set
argument_list|<
name|Device
argument_list|>
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|getCostTable
parameter_list|()
block|{
return|return
name|costTable
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getDevicePairToWeight ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|getDevicePairToWeight
parameter_list|()
block|{
return|return
name|devicePairToWeight
return|;
block|}
block|}
end_class

end_unit

