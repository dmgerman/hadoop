begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.com.nvidia
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|com
operator|.
name|nvidia
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|Device
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|DevicePlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|DeviceRegisterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|DeviceRuntimeSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|YarnRuntimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * Nvidia GPU plugin supporting both Nvidia container runtime v2 for Docker and  * non-Docker container.  * */
end_comment

begin_class
DECL|class|NvidiaGPUPluginForRuntimeV2
specifier|public
class|class
name|NvidiaGPUPluginForRuntimeV2
implements|implements
name|DevicePlugin
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NV_RESOURCE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|NV_RESOURCE_NAME
init|=
literal|"nvidia.com/gpu"
decl_stmt|;
DECL|field|shellExecutor
specifier|private
name|NvidiaCommandExecutor
name|shellExecutor
init|=
operator|new
name|NvidiaCommandExecutor
argument_list|()
decl_stmt|;
DECL|field|environment
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// If this environment is set, use it directly
DECL|field|ENV_BINARY_PATH
specifier|private
specifier|static
specifier|final
name|String
name|ENV_BINARY_PATH
init|=
literal|"NVIDIA_SMI_PATH"
decl_stmt|;
DECL|field|DEFAULT_BINARY_NAME
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_BINARY_NAME
init|=
literal|"nvidia-smi"
decl_stmt|;
DECL|field|DEV_NAME_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|DEV_NAME_PREFIX
init|=
literal|"nvidia"
decl_stmt|;
DECL|field|pathOfGpuBinary
specifier|private
name|String
name|pathOfGpuBinary
init|=
literal|null
decl_stmt|;
comment|// command should not run more than 10 sec.
DECL|field|MAX_EXEC_TIMEOUT_MS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_EXEC_TIMEOUT_MS
init|=
literal|10
operator|*
literal|1000
decl_stmt|;
comment|// When executable path not set, try to search default dirs
comment|// By default search /usr/bin, /bin, and /usr/local/nvidia/bin (when
comment|// launched by nvidia-docker.
DECL|field|DEFAULT_BINARY_SEARCH_DIRS
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|DEFAULT_BINARY_SEARCH_DIRS
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"/usr/bin"
argument_list|,
literal|"/bin"
argument_list|,
literal|"/usr/local/nvidia/bin"
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|getRegisterRequestInfo ()
specifier|public
name|DeviceRegisterRequest
name|getRegisterRequestInfo
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|DeviceRegisterRequest
operator|.
name|Builder
operator|.
name|newInstance
argument_list|()
operator|.
name|setResourceName
argument_list|(
name|NV_RESOURCE_NAME
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getDevices ()
specifier|public
name|Set
argument_list|<
name|Device
argument_list|>
name|getDevices
parameter_list|()
throws|throws
name|Exception
block|{
name|shellExecutor
operator|.
name|searchBinary
argument_list|()
expr_stmt|;
name|TreeSet
argument_list|<
name|Device
argument_list|>
name|r
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|output
decl_stmt|;
try|try
block|{
name|output
operator|=
name|shellExecutor
operator|.
name|getDeviceInfo
argument_list|()
expr_stmt|;
name|String
index|[]
name|lines
init|=
name|output
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|oneLine
range|:
name|lines
control|)
block|{
name|String
index|[]
name|tokensEachLine
init|=
name|oneLine
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokensEachLine
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Cannot parse the output to get device info. "
operator|+
literal|"Unexpected format in it:"
operator|+
name|oneLine
argument_list|)
throw|;
block|}
name|String
name|minorNumber
init|=
name|tokensEachLine
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|busId
init|=
name|tokensEachLine
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|majorNumber
init|=
name|getMajorNumber
argument_list|(
name|DEV_NAME_PREFIX
operator|+
name|minorNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|majorNumber
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|add
argument_list|(
name|Device
operator|.
name|Builder
operator|.
name|newInstance
argument_list|()
operator|.
name|setId
argument_list|(
name|id
argument_list|)
operator|.
name|setMajorNumber
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|majorNumber
argument_list|)
argument_list|)
operator|.
name|setMinorNumber
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|minorNumber
argument_list|)
argument_list|)
operator|.
name|setBusID
argument_list|(
name|busId
argument_list|)
operator|.
name|setDevPath
argument_list|(
literal|"/dev/"
operator|+
name|DEV_NAME_PREFIX
operator|+
name|minorNumber
argument_list|)
operator|.
name|setHealthy
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to get output from "
operator|+
name|pathOfGpuBinary
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|onDevicesAllocated (Set<Device> allocatedDevices, YarnRuntimeType yarnRuntime)
specifier|public
name|DeviceRuntimeSpec
name|onDevicesAllocated
parameter_list|(
name|Set
argument_list|<
name|Device
argument_list|>
name|allocatedDevices
parameter_list|,
name|YarnRuntimeType
name|yarnRuntime
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Generating runtime spec for allocated devices: "
operator|+
name|allocatedDevices
operator|+
literal|", "
operator|+
name|yarnRuntime
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|yarnRuntime
operator|==
name|YarnRuntimeType
operator|.
name|RUNTIME_DOCKER
condition|)
block|{
name|String
name|nvidiaRuntime
init|=
literal|"nvidia"
decl_stmt|;
name|String
name|nvidiaVisibleDevices
init|=
literal|"NVIDIA_VISIBLE_DEVICES"
decl_stmt|;
name|StringBuffer
name|gpuMinorNumbersSB
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Device
name|device
range|:
name|allocatedDevices
control|)
block|{
name|gpuMinorNumbersSB
operator|.
name|append
argument_list|(
name|device
operator|.
name|getMinorNumber
argument_list|()
operator|+
literal|","
argument_list|)
expr_stmt|;
block|}
name|String
name|minorNumbers
init|=
name|gpuMinorNumbersSB
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Nvidia Docker v2 assigned GPU: "
operator|+
name|minorNumbers
argument_list|)
expr_stmt|;
return|return
name|DeviceRuntimeSpec
operator|.
name|Builder
operator|.
name|newInstance
argument_list|()
operator|.
name|addEnv
argument_list|(
name|nvidiaVisibleDevices
argument_list|,
name|minorNumbers
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|minorNumbers
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|setContainerRuntime
argument_list|(
name|nvidiaRuntime
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|onDevicesReleased (Set<Device> releasedDevices)
specifier|public
name|void
name|onDevicesReleased
parameter_list|(
name|Set
argument_list|<
name|Device
argument_list|>
name|releasedDevices
parameter_list|)
throws|throws
name|Exception
block|{
comment|// do nothing
block|}
comment|// Get major number from device name.
DECL|method|getMajorNumber (String devName)
specifier|private
name|String
name|getMajorNumber
parameter_list|(
name|String
name|devName
parameter_list|)
block|{
name|String
name|output
init|=
literal|null
decl_stmt|;
comment|// output "major:minor" in hex
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Get major numbers from /dev/"
operator|+
name|devName
argument_list|)
expr_stmt|;
block|}
name|output
operator|=
name|shellExecutor
operator|.
name|getMajorMinorInfo
argument_list|(
name|devName
argument_list|)
expr_stmt|;
name|String
index|[]
name|strs
init|=
name|output
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"stat output:"
operator|+
name|output
argument_list|)
expr_stmt|;
block|}
name|output
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|strs
index|[
literal|0
index|]
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Failed to get major number from reading /dev/"
operator|+
name|devName
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to parse device major number from stat output"
argument_list|)
expr_stmt|;
name|output
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|output
return|;
block|}
comment|/**    * A shell wrapper class easy for test.    * */
DECL|class|NvidiaCommandExecutor
specifier|public
class|class
name|NvidiaCommandExecutor
block|{
DECL|method|getDeviceInfo ()
specifier|public
name|String
name|getDeviceInfo
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|Shell
operator|.
name|execCommand
argument_list|(
name|environment
argument_list|,
operator|new
name|String
index|[]
block|{
name|pathOfGpuBinary
block|,
literal|"--query-gpu=index,pci.bus_id"
block|,
literal|"--format=csv,noheader"
block|}
argument_list|,
name|MAX_EXEC_TIMEOUT_MS
argument_list|)
return|;
block|}
DECL|method|getMajorMinorInfo (String devName)
specifier|public
name|String
name|getMajorMinorInfo
parameter_list|(
name|String
name|devName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// output "major:minor" in hex
name|Shell
operator|.
name|ShellCommandExecutor
name|shexec
init|=
operator|new
name|Shell
operator|.
name|ShellCommandExecutor
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"stat"
block|,
literal|"-c"
block|,
literal|"%t:%T"
block|,
literal|"/dev/"
operator|+
name|devName
block|}
argument_list|)
decl_stmt|;
name|shexec
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|shexec
operator|.
name|getOutput
argument_list|()
return|;
block|}
DECL|method|searchBinary ()
specifier|public
name|void
name|searchBinary
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|pathOfGpuBinary
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skip searching, the nvidia gpu binary is already set: "
operator|+
name|pathOfGpuBinary
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// search env for the binary
name|String
name|envBinaryPath
init|=
name|System
operator|.
name|getenv
argument_list|(
name|ENV_BINARY_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|envBinaryPath
condition|)
block|{
if|if
condition|(
operator|new
name|File
argument_list|(
name|envBinaryPath
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|pathOfGpuBinary
operator|=
name|envBinaryPath
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Use nvidia gpu binary: "
operator|+
name|pathOfGpuBinary
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Search binary.."
argument_list|)
expr_stmt|;
comment|// search if binary exists in default folders
name|File
name|binaryFile
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|dir
range|:
name|DEFAULT_BINARY_SEARCH_DIRS
control|)
block|{
name|binaryFile
operator|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|DEFAULT_BINARY_NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|binaryFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|pathOfGpuBinary
operator|=
name|binaryFile
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Found binary:"
operator|+
name|pathOfGpuBinary
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No binary found from env variable: "
operator|+
name|ENV_BINARY_PATH
operator|+
literal|" or path "
operator|+
name|DEFAULT_BINARY_SEARCH_DIRS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No binary found for "
operator|+
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|setPathOfGpuBinary (String pathOfGpuBinary)
specifier|public
name|void
name|setPathOfGpuBinary
parameter_list|(
name|String
name|pathOfGpuBinary
parameter_list|)
block|{
name|this
operator|.
name|pathOfGpuBinary
operator|=
name|pathOfGpuBinary
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setShellExecutor ( NvidiaCommandExecutor shellExecutor)
specifier|public
name|void
name|setShellExecutor
parameter_list|(
name|NvidiaCommandExecutor
name|shellExecutor
parameter_list|)
block|{
name|this
operator|.
name|shellExecutor
operator|=
name|shellExecutor
expr_stmt|;
block|}
block|}
end_class

end_unit

