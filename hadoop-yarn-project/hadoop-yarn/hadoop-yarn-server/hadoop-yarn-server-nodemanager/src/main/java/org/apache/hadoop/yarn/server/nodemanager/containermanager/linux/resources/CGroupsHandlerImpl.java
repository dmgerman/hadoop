begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * *  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements. See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership. The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License. You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  * /  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.resources
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Support for interacting with various CGroup subsystems. Thread-safe.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|CGroupsHandlerImpl
class|class
name|CGroupsHandlerImpl
implements|implements
name|CGroupsHandler
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CGroupsHandlerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MTAB_FILE
specifier|private
specifier|static
specifier|final
name|String
name|MTAB_FILE
init|=
literal|"/proc/mounts"
decl_stmt|;
DECL|field|CGROUPS_FSTYPE
specifier|private
specifier|static
specifier|final
name|String
name|CGROUPS_FSTYPE
init|=
literal|"cgroup"
decl_stmt|;
DECL|field|mtabFile
specifier|private
name|String
name|mtabFile
decl_stmt|;
DECL|field|cGroupPrefix
specifier|private
specifier|final
name|String
name|cGroupPrefix
decl_stmt|;
DECL|field|enableCGroupMount
specifier|private
specifier|final
name|boolean
name|enableCGroupMount
decl_stmt|;
DECL|field|cGroupMountPath
specifier|private
specifier|final
name|String
name|cGroupMountPath
decl_stmt|;
DECL|field|deleteCGroupTimeout
specifier|private
specifier|final
name|long
name|deleteCGroupTimeout
decl_stmt|;
DECL|field|deleteCGroupDelay
specifier|private
specifier|final
name|long
name|deleteCGroupDelay
decl_stmt|;
DECL|field|controllerPaths
specifier|private
name|Map
argument_list|<
name|CGroupController
argument_list|,
name|String
argument_list|>
name|controllerPaths
decl_stmt|;
DECL|field|parsedMtab
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|parsedMtab
decl_stmt|;
DECL|field|rwLock
specifier|private
specifier|final
name|ReadWriteLock
name|rwLock
decl_stmt|;
DECL|field|privilegedOperationExecutor
specifier|private
specifier|final
name|PrivilegedOperationExecutor
name|privilegedOperationExecutor
decl_stmt|;
DECL|field|clock
specifier|private
specifier|final
name|Clock
name|clock
decl_stmt|;
comment|/**    * Create cgroup handler object.    * @param conf configuration    * @param privilegedOperationExecutor provides mechanisms to execute    *                                    PrivilegedContainerOperations    * @param mtab mount file location    * @throws ResourceHandlerException if initialization failed    */
DECL|method|CGroupsHandlerImpl (Configuration conf, PrivilegedOperationExecutor privilegedOperationExecutor, String mtab)
name|CGroupsHandlerImpl
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|PrivilegedOperationExecutor
name|privilegedOperationExecutor
parameter_list|,
name|String
name|mtab
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|this
operator|.
name|cGroupPrefix
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LINUX_CONTAINER_CGROUPS_HIERARCHY
argument_list|,
literal|"/hadoop-yarn"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"^/"
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"$/"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|this
operator|.
name|enableCGroupMount
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LINUX_CONTAINER_CGROUPS_MOUNT
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|cGroupMountPath
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LINUX_CONTAINER_CGROUPS_MOUNT_PATH
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|deleteCGroupTimeout
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LINUX_CONTAINER_CGROUPS_DELETE_TIMEOUT
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LINUX_CONTAINER_CGROUPS_DELETE_TIMEOUT
argument_list|)
operator|+
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_SLEEP_DELAY_BEFORE_SIGKILL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_SLEEP_DELAY_BEFORE_SIGKILL_MS
argument_list|)
operator|+
literal|1000
expr_stmt|;
name|this
operator|.
name|deleteCGroupDelay
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LINUX_CONTAINER_CGROUPS_DELETE_DELAY
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LINUX_CONTAINER_CGROUPS_DELETE_DELAY
argument_list|)
expr_stmt|;
name|this
operator|.
name|controllerPaths
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|parsedMtab
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|rwLock
operator|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|privilegedOperationExecutor
operator|=
name|privilegedOperationExecutor
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|SystemClock
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|mtabFile
operator|=
name|mtab
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
comment|/**    * Create cgroup handler object.    * @param conf configuration    * @param privilegedOperationExecutor provides mechanisms to execute    *                                    PrivilegedContainerOperations    * @throws ResourceHandlerException if initialization failed    */
DECL|method|CGroupsHandlerImpl (Configuration conf, PrivilegedOperationExecutor privilegedOperationExecutor)
name|CGroupsHandlerImpl
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|PrivilegedOperationExecutor
name|privilegedOperationExecutor
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|privilegedOperationExecutor
argument_list|,
name|MTAB_FILE
argument_list|)
expr_stmt|;
block|}
DECL|method|init ()
specifier|private
name|void
name|init
parameter_list|()
throws|throws
name|ResourceHandlerException
block|{
name|initializeControllerPaths
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getControllerPath (CGroupController controller)
specifier|public
name|String
name|getControllerPath
parameter_list|(
name|CGroupController
name|controller
parameter_list|)
block|{
try|try
block|{
name|rwLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|controllerPaths
operator|.
name|get
argument_list|(
name|controller
argument_list|)
return|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|initializeControllerPaths ()
specifier|private
name|void
name|initializeControllerPaths
parameter_list|()
throws|throws
name|ResourceHandlerException
block|{
comment|// Cluster admins may have some subsystems mounted in specific locations
comment|// We'll attempt to figure out mount points. We do this even if we plan
comment|// to mount cgroups into our own tree to control the path permissions or
comment|// to mount subsystems that are not mounted previously.
comment|// The subsystems for new and existing mount points have to match, and
comment|// the same hierarchy will be mounted at each mount point with the same
comment|// subsystem set.
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|newMtab
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|CGroupController
argument_list|,
name|String
argument_list|>
name|cPaths
decl_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|cGroupMountPath
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|enableCGroupMount
condition|)
block|{
name|newMtab
operator|=
name|ResourceHandlerModule
operator|.
name|parseConfiguredCGroupPath
argument_list|(
name|this
operator|.
name|cGroupMountPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newMtab
operator|==
literal|null
condition|)
block|{
comment|// parse mtab
name|newMtab
operator|=
name|parseMtab
argument_list|(
name|mtabFile
argument_list|)
expr_stmt|;
block|}
comment|// find cgroup controller paths
name|cPaths
operator|=
name|initializeControllerPathsFromMtab
argument_list|(
name|newMtab
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to initialize controller paths! Exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
literal|"Failed to initialize controller paths!"
argument_list|)
throw|;
block|}
comment|// we want to do a bulk update without the paths changing concurrently
try|try
block|{
name|rwLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|controllerPaths
operator|=
name|cPaths
expr_stmt|;
name|parsedMtab
operator|=
name|newMtab
expr_stmt|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|initializeControllerPathsFromMtab ( Map<String, Set<String>> parsedMtab)
specifier|static
name|Map
argument_list|<
name|CGroupController
argument_list|,
name|String
argument_list|>
name|initializeControllerPathsFromMtab
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|parsedMtab
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|Map
argument_list|<
name|CGroupController
argument_list|,
name|String
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|CGroupController
name|controller
range|:
name|CGroupController
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|subsystemName
init|=
name|controller
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|controllerPath
init|=
name|findControllerInMtab
argument_list|(
name|subsystemName
argument_list|,
name|parsedMtab
argument_list|)
decl_stmt|;
if|if
condition|(
name|controllerPath
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|controller
argument_list|,
name|controllerPath
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/* We are looking for entries of the form:    * none /cgroup/path/mem cgroup rw,memory 0 0    *    * Use a simple pattern that splits on the five spaces, and    * grabs the 2, 3, and 4th fields.    */
DECL|field|MTAB_FILE_FORMAT
specifier|private
specifier|static
specifier|final
name|Pattern
name|MTAB_FILE_FORMAT
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^[^\\s]+\\s([^\\s]+)\\s([^\\s]+)\\s([^\\s]+)\\s[^\\s]+\\s[^\\s]+$"
argument_list|)
decl_stmt|;
comment|/*    * Returns a map: path -> mount options    * for mounts with type "cgroup". Cgroup controllers will    * appear in the list of options for a path.    */
annotation|@
name|VisibleForTesting
DECL|method|parseMtab (String mtab)
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|parseMtab
parameter_list|(
name|String
name|mtab
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|BufferedReader
name|in
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|validCgroups
init|=
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|getValidCGroups
argument_list|()
decl_stmt|;
try|try
block|{
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
operator|new
name|File
argument_list|(
name|mtab
argument_list|)
argument_list|)
decl_stmt|;
name|in
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|fis
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|str
init|=
name|in
operator|.
name|readLine
argument_list|()
init|;
name|str
operator|!=
literal|null
condition|;
name|str
operator|=
name|in
operator|.
name|readLine
argument_list|()
control|)
block|{
name|Matcher
name|m
init|=
name|MTAB_FILE_FORMAT
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
decl_stmt|;
name|boolean
name|mat
init|=
name|m
operator|.
name|find
argument_list|()
decl_stmt|;
if|if
condition|(
name|mat
condition|)
block|{
name|String
name|path
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|options
init|=
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|CGROUPS_FSTYPE
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|cgroupList
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|options
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Collect the valid subsystem names
name|cgroupList
operator|.
name|retainAll
argument_list|(
name|validCgroups
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|cgroupList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|Shell
operator|.
name|LINUX
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error while reading "
operator|+
name|mtab
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
comment|// Ignore the error, if we are running on an os other than Linux
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while reading "
operator|+
name|mtab
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Find the hierarchy of the subsystem.    * The kernel ensures that a subsystem can only be part of a single hierarchy.    * The subsystem can be part of multiple mount points, if they belong to the    * same hierarchy.    * @param controller subsystem like cpu, cpuset, etc...    * @param entries map of paths to mount options    * @return the first mount path that has the requested subsystem    */
annotation|@
name|VisibleForTesting
DECL|method|findControllerInMtab (String controller, Map<String, Set<String>> entries)
specifier|static
name|String
name|findControllerInMtab
parameter_list|(
name|String
name|controller
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entries
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|entries
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|contains
argument_list|(
name|controller
argument_list|)
condition|)
block|{
if|if
condition|(
operator|new
name|File
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|canRead
argument_list|()
condition|)
block|{
return|return
name|e
operator|.
name|getKey
argument_list|()
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Skipping inaccessible cgroup mount point %s"
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|mountCGroupController (CGroupController controller)
specifier|private
name|void
name|mountCGroupController
parameter_list|(
name|CGroupController
name|controller
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
if|if
condition|(
name|cGroupMountPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cgroups mount path not specified in %s."
argument_list|,
name|YarnConfiguration
operator|.
name|NM_LINUX_CONTAINER_CGROUPS_MOUNT_PATH
argument_list|)
argument_list|)
throw|;
block|}
name|String
name|existingMountPath
init|=
name|getControllerPath
argument_list|(
name|controller
argument_list|)
decl_stmt|;
name|String
name|requestedMountPath
init|=
operator|new
name|File
argument_list|(
name|cGroupMountPath
argument_list|,
name|controller
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|existingMountPath
operator|==
literal|null
operator|||
operator|!
name|requestedMountPath
operator|.
name|equals
argument_list|(
name|existingMountPath
argument_list|)
condition|)
block|{
try|try
block|{
comment|//lock out other readers/writers till we are done
name|rwLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// If the controller was already mounted we have to mount it
comment|// with the same options to clone the mount point otherwise
comment|// the operation will fail
name|String
name|mountOptions
decl_stmt|;
if|if
condition|(
name|existingMountPath
operator|!=
literal|null
condition|)
block|{
name|mountOptions
operator|=
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|join
argument_list|(
name|parsedMtab
operator|.
name|get
argument_list|(
name|existingMountPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mountOptions
operator|=
name|controller
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|String
name|cGroupKV
init|=
name|mountOptions
operator|+
literal|"="
operator|+
name|requestedMountPath
decl_stmt|;
name|PrivilegedOperation
operator|.
name|OperationType
name|opType
init|=
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|MOUNT_CGROUPS
decl_stmt|;
name|PrivilegedOperation
name|op
init|=
operator|new
name|PrivilegedOperation
argument_list|(
name|opType
argument_list|)
decl_stmt|;
name|op
operator|.
name|appendArgs
argument_list|(
name|cGroupPrefix
argument_list|,
name|cGroupKV
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Mounting controller "
operator|+
name|controller
operator|.
name|getName
argument_list|()
operator|+
literal|" at "
operator|+
name|requestedMountPath
argument_list|)
expr_stmt|;
name|privilegedOperationExecutor
operator|.
name|executePrivilegedOperation
argument_list|(
name|op
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//if privileged operation succeeds, update controller paths
name|controllerPaths
operator|.
name|put
argument_list|(
name|controller
argument_list|,
name|requestedMountPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PrivilegedOperationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to mount controller: "
operator|+
name|controller
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
literal|"Failed to mount controller: "
operator|+
name|controller
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"CGroup controller already mounted at: "
operator|+
name|existingMountPath
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getRelativePathForCGroup (String cGroupId)
specifier|public
name|String
name|getRelativePathForCGroup
parameter_list|(
name|String
name|cGroupId
parameter_list|)
block|{
return|return
name|cGroupPrefix
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|cGroupId
return|;
block|}
annotation|@
name|Override
DECL|method|getPathForCGroup (CGroupController controller, String cGroupId)
specifier|public
name|String
name|getPathForCGroup
parameter_list|(
name|CGroupController
name|controller
parameter_list|,
name|String
name|cGroupId
parameter_list|)
block|{
return|return
name|getControllerPath
argument_list|(
name|controller
argument_list|)
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|cGroupPrefix
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|cGroupId
return|;
block|}
annotation|@
name|Override
DECL|method|getPathForCGroupTasks (CGroupController controller, String cGroupId)
specifier|public
name|String
name|getPathForCGroupTasks
parameter_list|(
name|CGroupController
name|controller
parameter_list|,
name|String
name|cGroupId
parameter_list|)
block|{
return|return
name|getPathForCGroup
argument_list|(
name|controller
argument_list|,
name|cGroupId
argument_list|)
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|CGROUP_PROCS_FILE
return|;
block|}
annotation|@
name|Override
DECL|method|getPathForCGroupParam (CGroupController controller, String cGroupId, String param)
specifier|public
name|String
name|getPathForCGroupParam
parameter_list|(
name|CGroupController
name|controller
parameter_list|,
name|String
name|cGroupId
parameter_list|,
name|String
name|param
parameter_list|)
block|{
return|return
name|getPathForCGroup
argument_list|(
name|controller
argument_list|,
name|cGroupId
argument_list|)
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|controller
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|param
return|;
block|}
comment|/**    * Mount cgroup or use existing mount point based on configuration.    * @param controller - the controller being initialized    * @throws ResourceHandlerException yarn hierarchy cannot be created or    *   accessed for any reason    */
annotation|@
name|Override
DECL|method|initializeCGroupController (CGroupController controller)
specifier|public
name|void
name|initializeCGroupController
parameter_list|(
name|CGroupController
name|controller
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
if|if
condition|(
name|enableCGroupMount
condition|)
block|{
comment|// We have a controller that needs to be mounted
name|mountCGroupController
argument_list|(
name|controller
argument_list|)
expr_stmt|;
block|}
comment|// We are working with a pre-mounted contoller
comment|// Make sure that YARN cgroup hierarchy path exists
name|initializePreMountedCGroupController
argument_list|(
name|controller
argument_list|)
expr_stmt|;
block|}
comment|/**    * This function is called when the administrator opted    * to use a pre-mounted cgroup controller.    * There are two options.    * 1. YARN hierarchy already exists. We verify, whether we have write access    * in this case.    * 2. YARN hierarchy does not exist, yet. We create it in this case.    * @param controller the controller being initialized    * @throws ResourceHandlerException yarn hierarchy cannot be created or    *   accessed for any reason    */
DECL|method|initializePreMountedCGroupController (CGroupController controller)
specifier|private
name|void
name|initializePreMountedCGroupController
parameter_list|(
name|CGroupController
name|controller
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
comment|// Check permissions to cgroup hierarchy and
comment|// create YARN cgroup if it does not exist, yet
name|String
name|controllerPath
init|=
name|getControllerPath
argument_list|(
name|controller
argument_list|)
decl_stmt|;
if|if
condition|(
name|controllerPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Controller %s not mounted."
operator|+
literal|" You either need to mount it with %s"
operator|+
literal|" or mount cgroups before launching Yarn"
argument_list|,
name|controller
operator|.
name|getName
argument_list|()
argument_list|,
name|YarnConfiguration
operator|.
name|NM_LINUX_CONTAINER_CGROUPS_MOUNT
argument_list|)
argument_list|)
throw|;
block|}
name|File
name|rootHierarchy
init|=
operator|new
name|File
argument_list|(
name|controllerPath
argument_list|)
decl_stmt|;
name|File
name|yarnHierarchy
init|=
operator|new
name|File
argument_list|(
name|rootHierarchy
argument_list|,
name|cGroupPrefix
argument_list|)
decl_stmt|;
name|String
name|subsystemName
init|=
name|controller
operator|.
name|getName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing mounted controller "
operator|+
name|controller
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
literal|"at "
operator|+
name|yarnHierarchy
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rootHierarchy
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
name|getErrorWithDetails
argument_list|(
literal|"Cgroups mount point does not exist or not accessible"
argument_list|,
name|subsystemName
argument_list|,
name|rootHierarchy
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|yarnHierarchy
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Yarn control group does not exist. Creating "
operator|+
name|yarnHierarchy
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|yarnHierarchy
operator|.
name|mkdir
argument_list|()
condition|)
block|{
comment|// Unexpected: we just checked that it was missing
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
name|getErrorWithDetails
argument_list|(
literal|"Unexpected: Cannot create yarn cgroup"
argument_list|,
name|subsystemName
argument_list|,
name|yarnHierarchy
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
name|getErrorWithDetails
argument_list|(
literal|"No permissions to create yarn cgroup"
argument_list|,
name|subsystemName
argument_list|,
name|yarnHierarchy
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|FileUtil
operator|.
name|canWrite
argument_list|(
name|yarnHierarchy
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
name|getErrorWithDetails
argument_list|(
literal|"Yarn control group not writable"
argument_list|,
name|subsystemName
argument_list|,
name|yarnHierarchy
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * Creates an actionable error message for mtab parsing.    * @param errorMessage message to use    * @param subsystemName cgroup subsystem    * @param yarnCgroupPath cgroup path that failed    * @return a string builder that can be appended by the caller    */
DECL|method|getErrorWithDetails ( String errorMessage, String subsystemName, String yarnCgroupPath)
specifier|private
name|String
name|getErrorWithDetails
parameter_list|(
name|String
name|errorMessage
parameter_list|,
name|String
name|subsystemName
parameter_list|,
name|String
name|yarnCgroupPath
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s Subsystem:%s Mount points:%s User:%s Path:%s "
argument_list|,
name|errorMessage
argument_list|,
name|subsystemName
argument_list|,
name|mtabFile
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
name|yarnCgroupPath
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createCGroup (CGroupController controller, String cGroupId)
specifier|public
name|String
name|createCGroup
parameter_list|(
name|CGroupController
name|controller
parameter_list|,
name|String
name|cGroupId
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|String
name|path
init|=
name|getPathForCGroup
argument_list|(
name|controller
argument_list|,
name|cGroupId
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"createCgroup: "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|new
name|File
argument_list|(
name|path
argument_list|)
operator|.
name|mkdir
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
literal|"Failed to create cgroup at "
operator|+
name|path
argument_list|)
throw|;
block|}
return|return
name|path
return|;
block|}
comment|/*   * Utility routine to print first line from cgroup tasks file   */
DECL|method|logLineFromTasksFile (File cgf)
specifier|private
name|void
name|logLineFromTasksFile
parameter_list|(
name|File
name|cgf
parameter_list|)
block|{
name|String
name|str
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
try|try
init|(
name|BufferedReader
name|inl
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|cgf
operator|+
literal|"/tasks"
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
init|)
block|{
name|str
operator|=
name|inl
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|str
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"First line in cgroup tasks file: "
operator|+
name|cgf
operator|+
literal|" "
operator|+
name|str
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to read cgroup tasks file. "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * If tasks file is empty, delete the cgroup.    *    * @param cgf object referring to the cgroup to be deleted    * @return Boolean indicating whether cgroup was deleted    */
DECL|method|checkAndDeleteCgroup (File cgf)
specifier|private
name|boolean
name|checkAndDeleteCgroup
parameter_list|(
name|File
name|cgf
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|boolean
name|deleted
init|=
literal|false
decl_stmt|;
comment|// FileInputStream in = null;
if|if
condition|(
name|cgf
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
init|(
name|FileInputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|cgf
operator|+
literal|"/tasks"
argument_list|)
init|)
block|{
if|if
condition|(
name|in
operator|.
name|read
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
comment|/*          * "tasks" file is empty, sleep a bit more and then try to delete the          * cgroup. Some versions of linux will occasionally panic due to a race          * condition in this area, hence the paranoia.          */
name|Thread
operator|.
name|sleep
argument_list|(
name|deleteCGroupDelay
argument_list|)
expr_stmt|;
name|deleted
operator|=
name|cgf
operator|.
name|delete
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|deleted
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed attempt to delete cgroup: "
operator|+
name|cgf
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logLineFromTasksFile
argument_list|(
name|cgf
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to read cgroup tasks file. "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Parent Cgroups directory {} does not exist. Skipping "
operator|+
literal|"deletion"
argument_list|,
name|cgf
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|deleted
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|deleted
return|;
block|}
annotation|@
name|Override
DECL|method|deleteCGroup (CGroupController controller, String cGroupId)
specifier|public
name|void
name|deleteCGroup
parameter_list|(
name|CGroupController
name|controller
parameter_list|,
name|String
name|cGroupId
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|boolean
name|deleted
init|=
literal|false
decl_stmt|;
name|String
name|cGroupPath
init|=
name|getPathForCGroup
argument_list|(
name|controller
argument_list|,
name|cGroupId
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"deleteCGroup: "
operator|+
name|cGroupPath
argument_list|)
expr_stmt|;
block|}
name|long
name|start
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
do|do
block|{
try|try
block|{
name|deleted
operator|=
name|checkAndDeleteCgroup
argument_list|(
operator|new
name|File
argument_list|(
name|cGroupPath
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|deleted
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|deleteCGroupDelay
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// NOP
block|}
block|}
do|while
condition|(
operator|!
name|deleted
operator|&&
operator|(
name|clock
operator|.
name|getTime
argument_list|()
operator|-
name|start
operator|)
operator|<
name|deleteCGroupTimeout
condition|)
do|;
if|if
condition|(
operator|!
name|deleted
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to delete  %s, tried to delete for %d ms"
argument_list|,
name|cGroupPath
argument_list|,
name|deleteCGroupTimeout
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|updateCGroupParam (CGroupController controller, String cGroupId, String param, String value)
specifier|public
name|void
name|updateCGroupParam
parameter_list|(
name|CGroupController
name|controller
parameter_list|,
name|String
name|cGroupId
parameter_list|,
name|String
name|param
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|String
name|cGroupParamPath
init|=
name|getPathForCGroupParam
argument_list|(
name|controller
argument_list|,
name|cGroupId
argument_list|,
name|param
argument_list|)
decl_stmt|;
name|PrintWriter
name|pw
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"updateCGroupParam for path: %s with value %s"
argument_list|,
name|cGroupParamPath
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|cGroupParamPath
argument_list|)
decl_stmt|;
name|Writer
name|w
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|pw
operator|=
operator|new
name|PrintWriter
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|pw
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to write to %s with value: %s"
argument_list|,
name|cGroupParamPath
argument_list|,
name|value
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|pw
operator|!=
literal|null
condition|)
block|{
name|boolean
name|hasError
init|=
name|pw
operator|.
name|checkError
argument_list|()
decl_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasError
condition|)
block|{
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"PrintWriter unable to write to %s with value: %s"
argument_list|,
name|cGroupParamPath
argument_list|,
name|value
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|pw
operator|.
name|checkError
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error while closing cgroup file %s"
argument_list|,
name|cGroupParamPath
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getCGroupParam (CGroupController controller, String cGroupId, String param)
specifier|public
name|String
name|getCGroupParam
parameter_list|(
name|CGroupController
name|controller
parameter_list|,
name|String
name|cGroupId
parameter_list|,
name|String
name|param
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|String
name|cGroupParamPath
init|=
name|param
operator|.
name|equals
argument_list|(
name|CGROUP_PROCS_FILE
argument_list|)
condition|?
name|getPathForCGroup
argument_list|(
name|controller
argument_list|,
name|cGroupId
argument_list|)
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|param
else|:
name|getPathForCGroupParam
argument_list|(
name|controller
argument_list|,
name|cGroupId
argument_list|,
name|param
argument_list|)
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|contents
init|=
name|Files
operator|.
name|readAllBytes
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|cGroupParamPath
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|String
argument_list|(
name|contents
argument_list|,
literal|"UTF-8"
argument_list|)
operator|.
name|trim
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
literal|"Unable to read from "
operator|+
name|cGroupParamPath
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getCGroupMountPath ()
specifier|public
name|String
name|getCGroupMountPath
parameter_list|()
block|{
return|return
name|cGroupMountPath
return|;
block|}
block|}
end_class

end_unit

