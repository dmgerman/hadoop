begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_comment
comment|/**  * {@link LocalCacheDirectoryManager} is used for managing hierarchical  * directories for local cache. It will allow to restrict the number of files in  * a directory to  * {@link YarnConfiguration#NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY} which  * includes 36 sub-directories (named from 0 to 9 and a to z). Root directory is  * represented by an empty string. It internally maintains a vacant directory  * queue. As soon as the file count for the directory reaches its limit; new  * files will not be created in it until at least one file is deleted from it.  * New sub directories are not created unless a  * {@link LocalCacheDirectoryManager#getRelativePathForLocalization()} request  * is made and nonFullDirectories are empty.  *   * Note : this structure only returns relative localization path but doesn't  * create one on disk.  */
end_comment

begin_class
DECL|class|LocalCacheDirectoryManager
specifier|public
class|class
name|LocalCacheDirectoryManager
block|{
DECL|field|perDirectoryFileLimit
specifier|private
specifier|final
name|int
name|perDirectoryFileLimit
decl_stmt|;
comment|// total 36 = a to z plus 0 to 9
DECL|field|DIRECTORIES_PER_LEVEL
specifier|public
specifier|static
specifier|final
name|int
name|DIRECTORIES_PER_LEVEL
init|=
literal|36
decl_stmt|;
DECL|field|nonFullDirectories
specifier|private
name|Queue
argument_list|<
name|Directory
argument_list|>
name|nonFullDirectories
decl_stmt|;
DECL|field|knownDirectories
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|Directory
argument_list|>
name|knownDirectories
decl_stmt|;
DECL|field|totalSubDirectories
specifier|private
name|int
name|totalSubDirectories
decl_stmt|;
DECL|method|LocalCacheDirectoryManager (Configuration conf)
specifier|public
name|LocalCacheDirectoryManager
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|totalSubDirectories
operator|=
literal|0
expr_stmt|;
name|Directory
name|rootDir
init|=
operator|new
name|Directory
argument_list|(
name|totalSubDirectories
argument_list|)
decl_stmt|;
name|nonFullDirectories
operator|=
operator|new
name|LinkedList
argument_list|<
name|Directory
argument_list|>
argument_list|()
expr_stmt|;
name|knownDirectories
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Directory
argument_list|>
argument_list|()
expr_stmt|;
name|knownDirectories
operator|.
name|put
argument_list|(
literal|""
argument_list|,
name|rootDir
argument_list|)
expr_stmt|;
name|nonFullDirectories
operator|.
name|add
argument_list|(
name|rootDir
argument_list|)
expr_stmt|;
name|this
operator|.
name|perDirectoryFileLimit
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY
argument_list|)
operator|-
literal|36
expr_stmt|;
block|}
comment|/**    * This method will return relative path from the first available vacant    * directory.    *     * @return {@link String} relative path for localization    */
DECL|method|getRelativePathForLocalization ()
specifier|public
specifier|synchronized
name|String
name|getRelativePathForLocalization
parameter_list|()
block|{
if|if
condition|(
name|nonFullDirectories
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|totalSubDirectories
operator|++
expr_stmt|;
name|Directory
name|newDir
init|=
operator|new
name|Directory
argument_list|(
name|totalSubDirectories
argument_list|)
decl_stmt|;
name|nonFullDirectories
operator|.
name|add
argument_list|(
name|newDir
argument_list|)
expr_stmt|;
name|knownDirectories
operator|.
name|put
argument_list|(
name|newDir
operator|.
name|getRelativePath
argument_list|()
argument_list|,
name|newDir
argument_list|)
expr_stmt|;
block|}
name|Directory
name|subDir
init|=
name|nonFullDirectories
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|subDir
operator|.
name|incrementAndGetCount
argument_list|()
operator|>=
name|perDirectoryFileLimit
condition|)
block|{
name|nonFullDirectories
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
return|return
name|subDir
operator|.
name|getRelativePath
argument_list|()
return|;
block|}
comment|/**    * This method will reduce the file count for the directory represented by    * path. The root directory of this Local cache directory manager is    * represented by an empty string.    */
DECL|method|decrementFileCountForPath (String relPath)
specifier|public
specifier|synchronized
name|void
name|decrementFileCountForPath
parameter_list|(
name|String
name|relPath
parameter_list|)
block|{
name|relPath
operator|=
name|relPath
operator|==
literal|null
condition|?
literal|""
else|:
name|relPath
operator|.
name|trim
argument_list|()
expr_stmt|;
name|Directory
name|subDir
init|=
name|knownDirectories
operator|.
name|get
argument_list|(
name|relPath
argument_list|)
decl_stmt|;
name|int
name|oldCount
init|=
name|subDir
operator|.
name|getCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|subDir
operator|.
name|decrementAndGetCount
argument_list|()
operator|<
name|perDirectoryFileLimit
operator|&&
name|oldCount
operator|>=
name|perDirectoryFileLimit
condition|)
block|{
name|nonFullDirectories
operator|.
name|add
argument_list|(
name|subDir
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * It limits the number of files and sub directories in the directory to the    * limit LocalCacheDirectoryManager#perDirectoryFileLimit.    */
DECL|class|Directory
specifier|static
class|class
name|Directory
block|{
DECL|field|relativePath
specifier|private
specifier|final
name|String
name|relativePath
decl_stmt|;
DECL|field|fileCount
specifier|private
name|int
name|fileCount
decl_stmt|;
DECL|method|Directory (int directoryNo)
specifier|public
name|Directory
parameter_list|(
name|int
name|directoryNo
parameter_list|)
block|{
name|fileCount
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|directoryNo
operator|==
literal|0
condition|)
block|{
name|relativePath
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|String
name|tPath
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|directoryNo
operator|-
literal|1
argument_list|,
name|DIRECTORIES_PER_LEVEL
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|tPath
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|tPath
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// this is done to make sure we also reuse 0th sub directory
name|sb
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|tPath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|DIRECTORIES_PER_LEVEL
argument_list|)
operator|-
literal|1
argument_list|,
name|DIRECTORIES_PER_LEVEL
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|tPath
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|tPath
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|relativePath
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|incrementAndGetCount ()
specifier|public
name|int
name|incrementAndGetCount
parameter_list|()
block|{
return|return
operator|++
name|fileCount
return|;
block|}
DECL|method|decrementAndGetCount ()
specifier|public
name|int
name|decrementAndGetCount
parameter_list|()
block|{
return|return
operator|--
name|fileCount
return|;
block|}
DECL|method|getRelativePath ()
specifier|public
name|String
name|getRelativePath
parameter_list|()
block|{
return|return
name|relativePath
return|;
block|}
DECL|method|getCount ()
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|fileCount
return|;
block|}
block|}
block|}
end_class

end_unit

