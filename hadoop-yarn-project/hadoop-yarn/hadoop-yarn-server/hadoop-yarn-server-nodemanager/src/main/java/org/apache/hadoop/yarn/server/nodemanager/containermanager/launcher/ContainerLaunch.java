begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.launcher
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
operator|.
name|CREATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
operator|.
name|OVERWRITE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalDirAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|LocalDirsHandlerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
operator|.
name|DelayedProcessKiller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
operator|.
name|ExitCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
operator|.
name|Signal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerExitEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ContainerLocalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ResourceLocalizationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|util
operator|.
name|ProcessIdFileReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Apps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_class
DECL|class|ContainerLaunch
specifier|public
class|class
name|ContainerLaunch
implements|implements
name|Callable
argument_list|<
name|Integer
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ContainerLaunch
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CONTAINER_SCRIPT
specifier|public
specifier|static
specifier|final
name|String
name|CONTAINER_SCRIPT
init|=
name|Shell
operator|.
name|appendScriptExtension
argument_list|(
literal|"launch_container"
argument_list|)
decl_stmt|;
DECL|field|FINAL_CONTAINER_TOKENS_FILE
specifier|public
specifier|static
specifier|final
name|String
name|FINAL_CONTAINER_TOKENS_FILE
init|=
literal|"container_tokens"
decl_stmt|;
DECL|field|PID_FILE_NAME_FMT
specifier|private
specifier|static
specifier|final
name|String
name|PID_FILE_NAME_FMT
init|=
literal|"%s.pid"
decl_stmt|;
DECL|field|dispatcher
specifier|private
specifier|final
name|Dispatcher
name|dispatcher
decl_stmt|;
DECL|field|exec
specifier|private
specifier|final
name|ContainerExecutor
name|exec
decl_stmt|;
DECL|field|app
specifier|private
specifier|final
name|Application
name|app
decl_stmt|;
DECL|field|container
specifier|private
specifier|final
name|Container
name|container
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|shouldLaunchContainer
specifier|private
specifier|volatile
name|AtomicBoolean
name|shouldLaunchContainer
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|completed
specifier|private
specifier|volatile
name|AtomicBoolean
name|completed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|sleepDelayBeforeSigKill
specifier|private
name|long
name|sleepDelayBeforeSigKill
init|=
literal|250
decl_stmt|;
DECL|field|maxKillWaitTime
specifier|private
name|long
name|maxKillWaitTime
init|=
literal|2000
decl_stmt|;
DECL|field|pidFilePath
specifier|private
name|Path
name|pidFilePath
init|=
literal|null
decl_stmt|;
DECL|field|dirsHandler
specifier|private
specifier|final
name|LocalDirsHandlerService
name|dirsHandler
decl_stmt|;
DECL|method|ContainerLaunch (Configuration configuration, Dispatcher dispatcher, ContainerExecutor exec, Application app, Container container, LocalDirsHandlerService dirsHandler)
specifier|public
name|ContainerLaunch
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|ContainerExecutor
name|exec
parameter_list|,
name|Application
name|app
parameter_list|,
name|Container
name|container
parameter_list|,
name|LocalDirsHandlerService
name|dirsHandler
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|app
operator|=
name|app
expr_stmt|;
name|this
operator|.
name|exec
operator|=
name|exec
expr_stmt|;
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
name|this
operator|.
name|dispatcher
operator|=
name|dispatcher
expr_stmt|;
name|this
operator|.
name|dirsHandler
operator|=
name|dirsHandler
expr_stmt|;
name|this
operator|.
name|sleepDelayBeforeSigKill
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_SLEEP_DELAY_BEFORE_SIGKILL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_SLEEP_DELAY_BEFORE_SIGKILL_MS
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxKillWaitTime
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_PROCESS_KILL_WAIT_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_PROCESS_KILL_WAIT_MS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dispatcher not typed
DECL|method|call ()
specifier|public
name|Integer
name|call
parameter_list|()
block|{
specifier|final
name|ContainerLaunchContext
name|launchContext
init|=
name|container
operator|.
name|getLaunchContext
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|localResources
init|=
name|container
operator|.
name|getLocalizedResources
argument_list|()
decl_stmt|;
name|ContainerId
name|containerID
init|=
name|container
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|String
name|containerIdStr
init|=
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|containerID
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|command
init|=
name|launchContext
operator|.
name|getCommands
argument_list|()
decl_stmt|;
name|int
name|ret
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
specifier|final
name|String
name|user
init|=
name|container
operator|.
name|getUser
argument_list|()
decl_stmt|;
comment|// /////////////////////////// Variable expansion
comment|// Before the container script gets written out.
name|List
argument_list|<
name|String
argument_list|>
name|newCmds
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|command
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|appIdStr
init|=
name|app
operator|.
name|getAppId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Path
name|containerLogDir
init|=
name|dirsHandler
operator|.
name|getLogPathForWrite
argument_list|(
name|ContainerLaunch
operator|.
name|getRelativeContainerLogDir
argument_list|(
name|appIdStr
argument_list|,
name|containerIdStr
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|str
range|:
name|command
control|)
block|{
comment|// TODO: Should we instead work via symlinks without this grammar?
name|newCmds
operator|.
name|add
argument_list|(
name|str
operator|.
name|replace
argument_list|(
name|ApplicationConstants
operator|.
name|LOG_DIR_EXPANSION_VAR
argument_list|,
name|containerLogDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|launchContext
operator|.
name|setCommands
argument_list|(
name|newCmds
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
init|=
name|launchContext
operator|.
name|getEnvironment
argument_list|()
decl_stmt|;
comment|// Make a copy of env to iterate& do variable expansion
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|environment
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setValue
argument_list|(
name|value
operator|.
name|replace
argument_list|(
name|ApplicationConstants
operator|.
name|LOG_DIR_EXPANSION_VAR
argument_list|,
name|containerLogDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// /////////////////////////// End of variable expansion
name|FileContext
name|lfs
init|=
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
decl_stmt|;
name|Path
name|nmPrivateContainerScriptPath
init|=
name|dirsHandler
operator|.
name|getLocalPathForWrite
argument_list|(
name|getContainerPrivateDir
argument_list|(
name|appIdStr
argument_list|,
name|containerIdStr
argument_list|)
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|CONTAINER_SCRIPT
argument_list|)
decl_stmt|;
name|Path
name|nmPrivateTokensPath
init|=
name|dirsHandler
operator|.
name|getLocalPathForWrite
argument_list|(
name|getContainerPrivateDir
argument_list|(
name|appIdStr
argument_list|,
name|containerIdStr
argument_list|)
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|String
operator|.
name|format
argument_list|(
name|ContainerLocalizer
operator|.
name|TOKEN_FILE_NAME_FMT
argument_list|,
name|containerIdStr
argument_list|)
argument_list|)
decl_stmt|;
name|DataOutputStream
name|containerScriptOutStream
init|=
literal|null
decl_stmt|;
name|DataOutputStream
name|tokensOutStream
init|=
literal|null
decl_stmt|;
comment|// Select the working directory for the container
name|Path
name|containerWorkDir
init|=
name|dirsHandler
operator|.
name|getLocalPathForWrite
argument_list|(
name|ContainerLocalizer
operator|.
name|USERCACHE
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|user
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|ContainerLocalizer
operator|.
name|APPCACHE
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|appIdStr
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|containerIdStr
argument_list|,
name|LocalDirAllocator
operator|.
name|SIZE_UNKNOWN
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|pidFileSuffix
init|=
name|String
operator|.
name|format
argument_list|(
name|ContainerLaunch
operator|.
name|PID_FILE_NAME_FMT
argument_list|,
name|containerIdStr
argument_list|)
decl_stmt|;
comment|// pid file should be in nm private dir so that it is not
comment|// accessible by users
name|pidFilePath
operator|=
name|dirsHandler
operator|.
name|getLocalPathForWrite
argument_list|(
name|ResourceLocalizationService
operator|.
name|NM_PRIVATE_DIR
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|pidFileSuffix
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|localDirs
init|=
name|dirsHandler
operator|.
name|getLocalDirs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|logDirs
init|=
name|dirsHandler
operator|.
name|getLogDirs
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dirsHandler
operator|.
name|areDisksHealthy
argument_list|()
condition|)
block|{
name|ret
operator|=
name|ContainerExitStatus
operator|.
name|DISKS_FAILED
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Most of the disks failed. "
operator|+
name|dirsHandler
operator|.
name|getDisksHealthReport
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
comment|// /////////// Write out the container-script in the nmPrivate space.
name|List
argument_list|<
name|Path
argument_list|>
name|appDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|(
name|localDirs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|localDir
range|:
name|localDirs
control|)
block|{
name|Path
name|usersdir
init|=
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|ContainerLocalizer
operator|.
name|USERCACHE
argument_list|)
decl_stmt|;
name|Path
name|userdir
init|=
operator|new
name|Path
argument_list|(
name|usersdir
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|Path
name|appsdir
init|=
operator|new
name|Path
argument_list|(
name|userdir
argument_list|,
name|ContainerLocalizer
operator|.
name|APPCACHE
argument_list|)
decl_stmt|;
name|appDirs
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|appsdir
argument_list|,
name|appIdStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|containerScriptOutStream
operator|=
name|lfs
operator|.
name|create
argument_list|(
name|nmPrivateContainerScriptPath
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CREATE
argument_list|,
name|OVERWRITE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set the token location too.
name|environment
operator|.
name|put
argument_list|(
name|ApplicationConstants
operator|.
name|CONTAINER_TOKEN_FILE_ENV_NAME
argument_list|,
operator|new
name|Path
argument_list|(
name|containerWorkDir
argument_list|,
name|FINAL_CONTAINER_TOKENS_FILE
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Sanitize the container's environment
name|sanitizeEnv
argument_list|(
name|environment
argument_list|,
name|containerWorkDir
argument_list|,
name|appDirs
argument_list|,
name|localResources
argument_list|)
expr_stmt|;
comment|// Write out the environment
name|writeLaunchEnv
argument_list|(
name|containerScriptOutStream
argument_list|,
name|environment
argument_list|,
name|localResources
argument_list|,
name|launchContext
operator|.
name|getCommands
argument_list|()
argument_list|)
expr_stmt|;
comment|// /////////// End of writing out container-script
comment|// /////////// Write out the container-tokens in the nmPrivate space.
name|tokensOutStream
operator|=
name|lfs
operator|.
name|create
argument_list|(
name|nmPrivateTokensPath
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CREATE
argument_list|,
name|OVERWRITE
argument_list|)
argument_list|)
expr_stmt|;
name|Credentials
name|creds
init|=
name|container
operator|.
name|getCredentials
argument_list|()
decl_stmt|;
name|creds
operator|.
name|writeTokenStorageToStream
argument_list|(
name|tokensOutStream
argument_list|)
expr_stmt|;
comment|// /////////// End of writing out container-tokens
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|containerScriptOutStream
argument_list|,
name|tokensOutStream
argument_list|)
expr_stmt|;
block|}
comment|// LaunchContainer is a blocking call. We are here almost means the
comment|// container is launched, so send out the event.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerEvent
argument_list|(
name|containerID
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_LAUNCHED
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check if the container is signalled to be killed.
if|if
condition|(
operator|!
name|shouldLaunchContainer
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Container "
operator|+
name|containerIdStr
operator|+
literal|" not launched as "
operator|+
literal|"cleanup already called"
argument_list|)
expr_stmt|;
name|ret
operator|=
name|ExitCode
operator|.
name|TERMINATED
operator|.
name|getExitCode
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|exec
operator|.
name|activateContainer
argument_list|(
name|containerID
argument_list|,
name|pidFilePath
argument_list|)
expr_stmt|;
name|ret
operator|=
name|exec
operator|.
name|launchContainer
argument_list|(
name|container
argument_list|,
name|nmPrivateContainerScriptPath
argument_list|,
name|nmPrivateTokensPath
argument_list|,
name|user
argument_list|,
name|appIdStr
argument_list|,
name|containerWorkDir
argument_list|,
name|localDirs
argument_list|,
name|logDirs
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to launch container."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerExitEvent
argument_list|(
name|containerID
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_FAILURE
argument_list|,
name|ret
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|completed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|exec
operator|.
name|deactivateContainer
argument_list|(
name|containerID
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Container "
operator|+
name|containerIdStr
operator|+
literal|" completed with exit code "
operator|+
name|ret
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|==
name|ExitCode
operator|.
name|FORCE_KILLED
operator|.
name|getExitCode
argument_list|()
operator|||
name|ret
operator|==
name|ExitCode
operator|.
name|TERMINATED
operator|.
name|getExitCode
argument_list|()
condition|)
block|{
comment|// If the process was killed, Send container_cleanedup_after_kill and
comment|// just break out of this method.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerExitEvent
argument_list|(
name|containerID
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_KILLED_ON_REQUEST
argument_list|,
name|ret
argument_list|,
literal|"Container exited with a non-zero exit code "
operator|+
name|ret
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Container exited with a non-zero exit code "
operator|+
name|ret
argument_list|)
expr_stmt|;
name|this
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerExitEvent
argument_list|(
name|containerID
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_FAILURE
argument_list|,
name|ret
argument_list|,
literal|"Container exited with a non-zero exit code "
operator|+
name|ret
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Container "
operator|+
name|containerIdStr
operator|+
literal|" succeeded "
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerEvent
argument_list|(
name|containerID
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * Cleanup the container.    * Cancels the launch if launch has not started yet or signals    * the executor to not execute the process if not already done so.    * Also, sends a SIGTERM followed by a SIGKILL to the process if    * the process id is available.    * @throws IOException    */
DECL|method|cleanupContainer ()
specifier|public
name|void
name|cleanupContainer
parameter_list|()
throws|throws
name|IOException
block|{
name|ContainerId
name|containerId
init|=
name|container
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|String
name|containerIdStr
init|=
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cleaning up container "
operator|+
name|containerIdStr
argument_list|)
expr_stmt|;
comment|// launch flag will be set to true if process already launched
name|boolean
name|alreadyLaunched
init|=
operator|!
name|shouldLaunchContainer
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|alreadyLaunched
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Container "
operator|+
name|containerIdStr
operator|+
literal|" not launched."
operator|+
literal|" No cleanup needed to be done"
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Marking container "
operator|+
name|containerIdStr
operator|+
literal|" as inactive"
argument_list|)
expr_stmt|;
comment|// this should ensure that if the container process has not launched
comment|// by this time, it will never be launched
name|exec
operator|.
name|deactivateContainer
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting pid for container "
operator|+
name|containerIdStr
operator|+
literal|" to kill"
operator|+
literal|" from pid file "
operator|+
operator|(
name|pidFilePath
operator|!=
literal|null
condition|?
name|pidFilePath
operator|.
name|toString
argument_list|()
else|:
literal|"null"
operator|)
argument_list|)
expr_stmt|;
block|}
comment|// however the container process may have already started
try|try
block|{
comment|// get process id from pid file if available
comment|// else if shell is still active, get it from the shell
name|String
name|processId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pidFilePath
operator|!=
literal|null
condition|)
block|{
name|processId
operator|=
name|getContainerPid
argument_list|(
name|pidFilePath
argument_list|)
expr_stmt|;
block|}
comment|// kill process
if|if
condition|(
name|processId
operator|!=
literal|null
condition|)
block|{
name|String
name|user
init|=
name|container
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Sending signal to pid "
operator|+
name|processId
operator|+
literal|" as user "
operator|+
name|user
operator|+
literal|" for container "
operator|+
name|containerIdStr
argument_list|)
expr_stmt|;
if|if
condition|(
name|sleepDelayBeforeSigKill
operator|>
literal|0
condition|)
block|{
name|boolean
name|result
init|=
name|exec
operator|.
name|signalContainer
argument_list|(
name|user
argument_list|,
name|processId
argument_list|,
name|Signal
operator|.
name|TERM
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Sent signal to pid "
operator|+
name|processId
operator|+
literal|" as user "
operator|+
name|user
operator|+
literal|" for container "
operator|+
name|containerIdStr
operator|+
literal|", result="
operator|+
operator|(
name|result
condition|?
literal|"success"
else|:
literal|"failed"
operator|)
argument_list|)
expr_stmt|;
operator|new
name|DelayedProcessKiller
argument_list|(
name|user
argument_list|,
name|processId
argument_list|,
name|sleepDelayBeforeSigKill
argument_list|,
name|Signal
operator|.
name|KILL
argument_list|,
name|exec
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got error when trying to cleanup container "
operator|+
name|containerIdStr
operator|+
literal|", error="
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// cleanup pid file if present
if|if
condition|(
name|pidFilePath
operator|!=
literal|null
condition|)
block|{
name|FileContext
name|lfs
init|=
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
decl_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|pidFilePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Loop through for a time-bounded interval waiting to    * read the process id from a file generated by a running process.    * @param pidFilePath File from which to read the process id    * @return Process ID    * @throws Exception    */
DECL|method|getContainerPid (Path pidFilePath)
specifier|private
name|String
name|getContainerPid
parameter_list|(
name|Path
name|pidFilePath
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|containerIdStr
init|=
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|container
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|processId
init|=
literal|null
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Accessing pid for container "
operator|+
name|containerIdStr
operator|+
literal|" from pid file "
operator|+
name|pidFilePath
argument_list|)
expr_stmt|;
name|int
name|sleepCounter
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|sleepInterval
init|=
literal|100
decl_stmt|;
comment|// loop waiting for pid file to show up
comment|// until either the completed flag is set which means something bad
comment|// happened or our timer expires in which case we admit defeat
while|while
condition|(
operator|!
name|completed
operator|.
name|get
argument_list|()
condition|)
block|{
name|processId
operator|=
name|ProcessIdFileReader
operator|.
name|getProcessId
argument_list|(
name|pidFilePath
argument_list|)
expr_stmt|;
if|if
condition|(
name|processId
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got pid "
operator|+
name|processId
operator|+
literal|" for container "
operator|+
name|containerIdStr
argument_list|)
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
operator|(
name|sleepCounter
operator|*
name|sleepInterval
operator|)
operator|>
name|maxKillWaitTime
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Could not get pid for "
operator|+
name|containerIdStr
operator|+
literal|". Waited for "
operator|+
name|maxKillWaitTime
operator|+
literal|" ms."
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
operator|++
name|sleepCounter
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepInterval
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|processId
return|;
block|}
DECL|method|getRelativeContainerLogDir (String appIdStr, String containerIdStr)
specifier|public
specifier|static
name|String
name|getRelativeContainerLogDir
parameter_list|(
name|String
name|appIdStr
parameter_list|,
name|String
name|containerIdStr
parameter_list|)
block|{
return|return
name|appIdStr
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|containerIdStr
return|;
block|}
DECL|method|getContainerPrivateDir (String appIdStr, String containerIdStr)
specifier|private
name|String
name|getContainerPrivateDir
parameter_list|(
name|String
name|appIdStr
parameter_list|,
name|String
name|containerIdStr
parameter_list|)
block|{
return|return
name|getAppPrivateDir
argument_list|(
name|appIdStr
argument_list|)
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|containerIdStr
operator|+
name|Path
operator|.
name|SEPARATOR
return|;
block|}
DECL|method|getAppPrivateDir (String appIdStr)
specifier|private
name|String
name|getAppPrivateDir
parameter_list|(
name|String
name|appIdStr
parameter_list|)
block|{
return|return
name|ResourceLocalizationService
operator|.
name|NM_PRIVATE_DIR
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|appIdStr
return|;
block|}
DECL|class|ShellScriptBuilder
specifier|private
specifier|static
specifier|abstract
class|class
name|ShellScriptBuilder
block|{
DECL|field|LINE_SEPARATOR
specifier|private
specifier|static
specifier|final
name|String
name|LINE_SEPARATOR
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
DECL|field|sb
specifier|private
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
DECL|method|command (List<String> command)
specifier|public
specifier|abstract
name|void
name|command
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|command
parameter_list|)
function_decl|;
DECL|method|env (String key, String value)
specifier|public
specifier|abstract
name|void
name|env
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
function_decl|;
DECL|method|symlink (Path src, Path dst)
specifier|public
specifier|final
name|void
name|symlink
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|src
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Source must be absolute"
argument_list|)
throw|;
block|}
if|if
condition|(
name|dst
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Destination must be relative"
argument_list|)
throw|;
block|}
if|if
condition|(
name|dst
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|mkdir
argument_list|(
name|dst
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|link
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|write (PrintStream out)
specifier|public
specifier|final
name|void
name|write
parameter_list|(
name|PrintStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|append
argument_list|(
name|sb
argument_list|)
expr_stmt|;
block|}
DECL|method|line (String... command)
specifier|protected
specifier|final
name|void
name|line
parameter_list|(
name|String
modifier|...
name|command
parameter_list|)
block|{
for|for
control|(
name|String
name|s
range|:
name|command
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
block|}
DECL|method|link (Path src, Path dst)
specifier|protected
specifier|abstract
name|void
name|link
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|mkdir (Path path)
specifier|protected
specifier|abstract
name|void
name|mkdir
parameter_list|(
name|Path
name|path
parameter_list|)
function_decl|;
block|}
DECL|class|UnixShellScriptBuilder
specifier|private
specifier|static
specifier|final
class|class
name|UnixShellScriptBuilder
extends|extends
name|ShellScriptBuilder
block|{
DECL|method|UnixShellScriptBuilder ()
specifier|public
name|UnixShellScriptBuilder
parameter_list|()
block|{
name|line
argument_list|(
literal|"#!/bin/bash"
argument_list|)
expr_stmt|;
name|line
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|command (List<String> command)
specifier|public
name|void
name|command
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|command
parameter_list|)
block|{
name|line
argument_list|(
literal|"exec /bin/bash -c \""
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
literal|" "
argument_list|,
name|command
argument_list|)
argument_list|,
literal|"\""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|env (String key, String value)
specifier|public
name|void
name|env
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|line
argument_list|(
literal|"export "
argument_list|,
name|key
argument_list|,
literal|"=\""
argument_list|,
name|value
argument_list|,
literal|"\""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|link (Path src, Path dst)
specifier|protected
name|void
name|link
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|line
argument_list|(
literal|"ln -sf \""
argument_list|,
name|src
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"\" \""
argument_list|,
name|dst
operator|.
name|toString
argument_list|()
argument_list|,
literal|"\""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|mkdir (Path path)
specifier|protected
name|void
name|mkdir
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|line
argument_list|(
literal|"mkdir -p "
argument_list|,
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|WindowsShellScriptBuilder
specifier|private
specifier|static
specifier|final
class|class
name|WindowsShellScriptBuilder
extends|extends
name|ShellScriptBuilder
block|{
DECL|method|WindowsShellScriptBuilder ()
specifier|public
name|WindowsShellScriptBuilder
parameter_list|()
block|{
name|line
argument_list|(
literal|"@setlocal"
argument_list|)
expr_stmt|;
name|line
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|command (List<String> command)
specifier|public
name|void
name|command
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|command
parameter_list|)
block|{
name|line
argument_list|(
literal|"@call "
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
literal|" "
argument_list|,
name|command
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|env (String key, String value)
specifier|public
name|void
name|env
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|line
argument_list|(
literal|"@set "
argument_list|,
name|key
argument_list|,
literal|"="
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|link (Path src, Path dst)
specifier|protected
name|void
name|link
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|srcFile
init|=
operator|new
name|File
argument_list|(
name|src
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|srcFileStr
init|=
name|srcFile
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|dstFileStr
init|=
operator|new
name|File
argument_list|(
name|dst
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// If not on Java7+ on Windows, then copy file instead of symlinking.
comment|// See also FileUtil#symLink for full explanation.
if|if
condition|(
operator|!
name|Shell
operator|.
name|isJava7OrAbove
argument_list|()
operator|&&
name|srcFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|line
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"@copy \"%s\" \"%s\""
argument_list|,
name|srcFileStr
argument_list|,
name|dstFileStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|line
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"@%s symlink \"%s\" \"%s\""
argument_list|,
name|Shell
operator|.
name|WINUTILS
argument_list|,
name|dstFileStr
argument_list|,
name|srcFileStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|mkdir (Path path)
specifier|protected
name|void
name|mkdir
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|line
argument_list|(
literal|"@if not exist "
argument_list|,
name|path
operator|.
name|toString
argument_list|()
argument_list|,
literal|" mkdir "
argument_list|,
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|putEnvIfNotNull ( Map<String, String> environment, String variable, String value)
specifier|private
specifier|static
name|void
name|putEnvIfNotNull
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
parameter_list|,
name|String
name|variable
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|environment
operator|.
name|put
argument_list|(
name|variable
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|putEnvIfAbsent ( Map<String, String> environment, String variable)
specifier|private
specifier|static
name|void
name|putEnvIfAbsent
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
parameter_list|,
name|String
name|variable
parameter_list|)
block|{
if|if
condition|(
name|environment
operator|.
name|get
argument_list|(
name|variable
argument_list|)
operator|==
literal|null
condition|)
block|{
name|putEnvIfNotNull
argument_list|(
name|environment
argument_list|,
name|variable
argument_list|,
name|System
operator|.
name|getenv
argument_list|(
name|variable
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sanitizeEnv (Map<String, String> environment, Path pwd, List<Path> appDirs, Map<Path, List<String>> resources)
specifier|public
name|void
name|sanitizeEnv
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
parameter_list|,
name|Path
name|pwd
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|appDirs
parameter_list|,
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|resources
parameter_list|)
throws|throws
name|IOException
block|{
comment|/**      * Non-modifiable environment variables      */
name|environment
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|CONTAINER_ID
operator|.
name|name
argument_list|()
argument_list|,
name|container
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|environment
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|NM_PORT
operator|.
name|name
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|container
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|environment
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|NM_HOST
operator|.
name|name
argument_list|()
argument_list|,
name|container
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|environment
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|NM_HTTP_PORT
operator|.
name|name
argument_list|()
argument_list|,
name|container
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeHttpAddress
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|environment
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|LOCAL_DIRS
operator|.
name|name
argument_list|()
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|appDirs
argument_list|)
argument_list|)
expr_stmt|;
name|putEnvIfNotNull
argument_list|(
name|environment
argument_list|,
name|Environment
operator|.
name|USER
operator|.
name|name
argument_list|()
argument_list|,
name|container
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|putEnvIfNotNull
argument_list|(
name|environment
argument_list|,
name|Environment
operator|.
name|LOGNAME
operator|.
name|name
argument_list|()
argument_list|,
name|container
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|putEnvIfNotNull
argument_list|(
name|environment
argument_list|,
name|Environment
operator|.
name|HOME
operator|.
name|name
argument_list|()
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_USER_HOME_DIR
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_USER_HOME_DIR
argument_list|)
argument_list|)
expr_stmt|;
name|putEnvIfNotNull
argument_list|(
name|environment
argument_list|,
name|Environment
operator|.
name|PWD
operator|.
name|name
argument_list|()
argument_list|,
name|pwd
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|putEnvIfNotNull
argument_list|(
name|environment
argument_list|,
name|Environment
operator|.
name|HADOOP_CONF_DIR
operator|.
name|name
argument_list|()
argument_list|,
name|System
operator|.
name|getenv
argument_list|(
name|Environment
operator|.
name|HADOOP_CONF_DIR
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|environment
operator|.
name|put
argument_list|(
literal|"JVM_PID"
argument_list|,
literal|"$$"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Modifiable environment variables      */
comment|// allow containers to override these variables
name|String
index|[]
name|whitelist
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_ENV_WHITELIST
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_ENV_WHITELIST
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|whitelistEnvVariable
range|:
name|whitelist
control|)
block|{
name|putEnvIfAbsent
argument_list|(
name|environment
argument_list|,
name|whitelistEnvVariable
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// variables here will be forced in, even if the container has specified them.
name|Apps
operator|.
name|setEnvFromInputString
argument_list|(
name|environment
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_ADMIN_USER_ENV
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_ADMIN_USER_ENV
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: Remove Windows check and use this approach on all platforms after
comment|// additional testing.  See YARN-358.
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|String
name|inputClassPath
init|=
name|environment
operator|.
name|get
argument_list|(
name|Environment
operator|.
name|CLASSPATH
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputClassPath
operator|!=
literal|null
operator|&&
operator|!
name|inputClassPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|StringBuilder
name|newClassPath
init|=
operator|new
name|StringBuilder
argument_list|(
name|inputClassPath
argument_list|)
decl_stmt|;
comment|// Localized resources do not exist at the desired paths yet, because the
comment|// container launch script has not run to create symlinks yet.  This
comment|// means that FileUtil.createJarWithClassPath can't automatically expand
comment|// wildcards to separate classpath entries for each file in the manifest.
comment|// To resolve this, append classpath entries explicitly for each
comment|// resource.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|resources
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|boolean
name|targetIsDirectory
init|=
operator|new
name|File
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|isDirectory
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|linkName
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
comment|// Append resource.
name|newClassPath
operator|.
name|append
argument_list|(
name|File
operator|.
name|pathSeparator
argument_list|)
operator|.
name|append
argument_list|(
name|pwd
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|linkName
argument_list|)
expr_stmt|;
comment|// FileUtil.createJarWithClassPath must use File.toURI to convert
comment|// each file to a URI to write into the manifest's classpath.  For
comment|// directories, the classpath must have a trailing '/', but
comment|// File.toURI only appends the trailing '/' if it is a directory that
comment|// already exists.  To resolve this, add the classpath entries with
comment|// explicit trailing '/' here for any localized resource that targets
comment|// a directory.  Then, FileUtil.createJarWithClassPath will guarantee
comment|// that the resulting entry in the manifest's classpath will have a
comment|// trailing '/', and thus refer to a directory instead of a file.
if|if
condition|(
name|targetIsDirectory
condition|)
block|{
name|newClassPath
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// When the container launches, it takes the parent process's environment
comment|// and then adds/overwrites with the entries from the container launch
comment|// context.  Do the same thing here for correct substitution of
comment|// environment variables in the classpath jar manifest.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mergedEnv
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|System
operator|.
name|getenv
argument_list|()
argument_list|)
decl_stmt|;
name|mergedEnv
operator|.
name|putAll
argument_list|(
name|environment
argument_list|)
expr_stmt|;
name|String
name|classPathJar
init|=
name|FileUtil
operator|.
name|createJarWithClassPath
argument_list|(
name|newClassPath
operator|.
name|toString
argument_list|()
argument_list|,
name|pwd
argument_list|,
name|mergedEnv
argument_list|)
decl_stmt|;
name|environment
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|CLASSPATH
operator|.
name|name
argument_list|()
argument_list|,
name|classPathJar
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|writeLaunchEnv (OutputStream out, Map<String,String> environment, Map<Path,List<String>> resources, List<String> command)
specifier|static
name|void
name|writeLaunchEnv
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
parameter_list|,
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|resources
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|ShellScriptBuilder
name|sb
init|=
name|Shell
operator|.
name|WINDOWS
condition|?
operator|new
name|WindowsShellScriptBuilder
argument_list|()
else|:
operator|new
name|UnixShellScriptBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|environment
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
range|:
name|environment
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|env
argument_list|(
name|env
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|env
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|resources
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|resources
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|linkName
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|sb
operator|.
name|symlink
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|linkName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|sb
operator|.
name|command
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|PrintStream
name|pout
init|=
literal|null
decl_stmt|;
try|try
block|{
name|pout
operator|=
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|sb
operator|.
name|write
argument_list|(
name|pout
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

