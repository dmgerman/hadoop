begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.amrmproxy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|amrmproxy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_comment
comment|/**  * Encapsulates the information about one application that is needed by the  * request intercepters.  *  */
end_comment

begin_class
DECL|class|AMRMProxyApplicationContextImpl
specifier|public
class|class
name|AMRMProxyApplicationContextImpl
implements|implements
name|AMRMProxyApplicationContext
block|{
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|nmContext
specifier|private
specifier|final
name|Context
name|nmContext
decl_stmt|;
DECL|field|applicationAttemptId
specifier|private
specifier|final
name|ApplicationAttemptId
name|applicationAttemptId
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|String
name|user
decl_stmt|;
DECL|field|localTokenKeyId
specifier|private
name|Integer
name|localTokenKeyId
decl_stmt|;
DECL|field|amrmToken
specifier|private
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|amrmToken
decl_stmt|;
DECL|field|localToken
specifier|private
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|localToken
decl_stmt|;
comment|/**    * Create an instance of the AMRMProxyApplicationContext.    *    * @param nmContext NM context    * @param conf configuration    * @param applicationAttemptId attempt id    * @param user user name of the application    * @param amrmToken amrmToken issued by RM    * @param localToken amrmToken issued by AMRMProxy    */
DECL|method|AMRMProxyApplicationContextImpl (Context nmContext, Configuration conf, ApplicationAttemptId applicationAttemptId, String user, Token<AMRMTokenIdentifier> amrmToken, Token<AMRMTokenIdentifier> localToken)
specifier|public
name|AMRMProxyApplicationContextImpl
parameter_list|(
name|Context
name|nmContext
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|String
name|user
parameter_list|,
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|amrmToken
parameter_list|,
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|localToken
parameter_list|)
block|{
name|this
operator|.
name|nmContext
operator|=
name|nmContext
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|applicationAttemptId
operator|=
name|applicationAttemptId
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|amrmToken
operator|=
name|amrmToken
expr_stmt|;
name|this
operator|.
name|localToken
operator|=
name|localToken
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationAttemptId ()
specifier|public
name|ApplicationAttemptId
name|getApplicationAttemptId
parameter_list|()
block|{
return|return
name|applicationAttemptId
return|;
block|}
annotation|@
name|Override
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
annotation|@
name|Override
DECL|method|getAMRMToken ()
specifier|public
specifier|synchronized
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|getAMRMToken
parameter_list|()
block|{
return|return
name|amrmToken
return|;
block|}
comment|/**    * Sets the application's AMRMToken.    *    * @param amrmToken amrmToken issued by RM    */
DECL|method|setAMRMToken ( Token<AMRMTokenIdentifier> amrmToken)
specifier|public
specifier|synchronized
name|void
name|setAMRMToken
parameter_list|(
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|amrmToken
parameter_list|)
block|{
name|this
operator|.
name|amrmToken
operator|=
name|amrmToken
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLocalAMRMToken ()
specifier|public
specifier|synchronized
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|getLocalAMRMToken
parameter_list|()
block|{
return|return
name|this
operator|.
name|localToken
return|;
block|}
comment|/**    * Sets the application's AMRMToken.    *    * @param localToken amrmToken issued by AMRMProxy    */
DECL|method|setLocalAMRMToken ( Token<AMRMTokenIdentifier> localToken)
specifier|public
specifier|synchronized
name|void
name|setLocalAMRMToken
parameter_list|(
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|localToken
parameter_list|)
block|{
name|this
operator|.
name|localToken
operator|=
name|localToken
expr_stmt|;
name|this
operator|.
name|localTokenKeyId
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Private
DECL|method|getLocalAMRMTokenKeyId ()
specifier|public
specifier|synchronized
name|int
name|getLocalAMRMTokenKeyId
parameter_list|()
block|{
name|Integer
name|keyId
init|=
name|this
operator|.
name|localTokenKeyId
decl_stmt|;
if|if
condition|(
name|keyId
operator|==
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|this
operator|.
name|localToken
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Missing AMRM token for "
operator|+
name|this
operator|.
name|applicationAttemptId
argument_list|)
throw|;
block|}
name|keyId
operator|=
name|this
operator|.
name|localToken
operator|.
name|decodeIdentifier
argument_list|()
operator|.
name|getKeyId
argument_list|()
expr_stmt|;
name|this
operator|.
name|localTokenKeyId
operator|=
name|keyId
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"AMRM token decode error for "
operator|+
name|this
operator|.
name|applicationAttemptId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|keyId
return|;
block|}
annotation|@
name|Override
DECL|method|getNMCotext ()
specifier|public
name|Context
name|getNMCotext
parameter_list|()
block|{
return|return
name|nmContext
return|;
block|}
block|}
end_class

end_unit

