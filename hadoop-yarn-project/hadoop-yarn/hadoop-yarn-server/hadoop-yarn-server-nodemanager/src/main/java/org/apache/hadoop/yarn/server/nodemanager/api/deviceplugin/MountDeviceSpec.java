begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.api.deviceplugin
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Describe one device mount.  * */
end_comment

begin_class
DECL|class|MountDeviceSpec
specifier|public
specifier|final
class|class
name|MountDeviceSpec
implements|implements
name|Serializable
implements|,
name|Comparable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|160806358136943052L
decl_stmt|;
DECL|field|devicePathInHost
specifier|private
specifier|final
name|String
name|devicePathInHost
decl_stmt|;
DECL|field|devicePathInContainer
specifier|private
specifier|final
name|String
name|devicePathInContainer
decl_stmt|;
comment|// r for only read, rw can do read and write
DECL|field|devicePermission
specifier|private
specifier|final
name|String
name|devicePermission
decl_stmt|;
DECL|field|RO
specifier|public
specifier|final
specifier|static
name|String
name|RO
init|=
literal|"r"
decl_stmt|;
DECL|field|RW
specifier|public
specifier|final
specifier|static
name|String
name|RW
init|=
literal|"rw"
decl_stmt|;
DECL|method|MountDeviceSpec (Builder builder)
specifier|private
name|MountDeviceSpec
parameter_list|(
name|Builder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|devicePathInContainer
operator|=
name|builder
operator|.
name|devicePathInContainer
expr_stmt|;
name|this
operator|.
name|devicePathInHost
operator|=
name|builder
operator|.
name|devicePathInHost
expr_stmt|;
name|this
operator|.
name|devicePermission
operator|=
name|builder
operator|.
name|devicePermission
expr_stmt|;
block|}
DECL|method|getDevicePathInHost ()
specifier|public
name|String
name|getDevicePathInHost
parameter_list|()
block|{
return|return
name|devicePathInHost
return|;
block|}
DECL|method|getDevicePathInContainer ()
specifier|public
name|String
name|getDevicePathInContainer
parameter_list|()
block|{
return|return
name|devicePathInContainer
return|;
block|}
DECL|method|getDevicePermission ()
specifier|public
name|String
name|getDevicePermission
parameter_list|()
block|{
return|return
name|devicePermission
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|MountDeviceSpec
name|other
init|=
operator|(
name|MountDeviceSpec
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|devicePathInHost
argument_list|,
name|other
operator|.
name|getDevicePathInHost
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|devicePathInContainer
argument_list|,
name|other
operator|.
name|getDevicePathInContainer
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|devicePermission
argument_list|,
name|other
operator|.
name|getDevicePermission
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|devicePathInContainer
argument_list|,
name|devicePathInHost
argument_list|,
name|devicePermission
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (Object o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|(
operator|!
operator|(
name|o
operator|instanceof
name|MountDeviceSpec
operator|)
operator|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|MountDeviceSpec
name|other
init|=
operator|(
name|MountDeviceSpec
operator|)
name|o
decl_stmt|;
name|int
name|result
init|=
name|devicePathInContainer
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getDevicePathInContainer
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|!=
name|result
condition|)
block|{
return|return
name|result
return|;
block|}
name|result
operator|=
name|devicePathInHost
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getDevicePathInHost
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|0
operator|!=
name|result
condition|)
block|{
return|return
name|result
return|;
block|}
return|return
name|devicePermission
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getDevicePermission
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Builder for MountDeviceSpec.    * */
DECL|class|Builder
specifier|public
specifier|final
specifier|static
class|class
name|Builder
block|{
DECL|field|devicePathInHost
specifier|private
name|String
name|devicePathInHost
decl_stmt|;
DECL|field|devicePathInContainer
specifier|private
name|String
name|devicePathInContainer
decl_stmt|;
DECL|field|devicePermission
specifier|private
name|String
name|devicePermission
decl_stmt|;
DECL|method|Builder ()
specifier|private
name|Builder
parameter_list|()
block|{}
DECL|method|newInstance ()
specifier|public
specifier|static
name|Builder
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
DECL|method|build ()
specifier|public
name|MountDeviceSpec
name|build
parameter_list|()
block|{
return|return
operator|new
name|MountDeviceSpec
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|setDevicePermission (String permission)
specifier|public
name|Builder
name|setDevicePermission
parameter_list|(
name|String
name|permission
parameter_list|)
block|{
name|this
operator|.
name|devicePermission
operator|=
name|permission
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setDevicePathInContainer (String pathInContainer)
specifier|public
name|Builder
name|setDevicePathInContainer
parameter_list|(
name|String
name|pathInContainer
parameter_list|)
block|{
name|this
operator|.
name|devicePathInContainer
operator|=
name|pathInContainer
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setDevicePathInHost (String pathInHost)
specifier|public
name|Builder
name|setDevicePathInHost
parameter_list|(
name|String
name|pathInHost
parameter_list|)
block|{
name|this
operator|.
name|devicePathInHost
operator|=
name|pathInHost
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
block|}
end_class

end_unit

