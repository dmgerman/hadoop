begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.amrmproxy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|amrmproxy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationMasterProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|scheduler
operator|.
name|DistributedScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|MasterKeyData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|YarnServerSecurityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * AMRMProxyService is a service that runs on each node manager that can be used  * to intercept and inspect messages from application master to the cluster  * resource manager. It listens to messages from the application master and  * creates a request intercepting pipeline instance for each application. The  * pipeline is a chain of interceptor instances that can inspect and modify the  * request/response as needed.  */
end_comment

begin_class
DECL|class|AMRMProxyService
specifier|public
class|class
name|AMRMProxyService
extends|extends
name|AbstractService
implements|implements
name|ApplicationMasterProtocol
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AMRMProxyService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|server
specifier|private
name|Server
name|server
decl_stmt|;
DECL|field|nmContext
specifier|private
specifier|final
name|Context
name|nmContext
decl_stmt|;
DECL|field|dispatcher
specifier|private
specifier|final
name|AsyncDispatcher
name|dispatcher
decl_stmt|;
DECL|field|listenerEndpoint
specifier|private
name|InetSocketAddress
name|listenerEndpoint
decl_stmt|;
DECL|field|secretManager
specifier|private
name|AMRMProxyTokenSecretManager
name|secretManager
decl_stmt|;
DECL|field|applPipelineMap
specifier|private
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|RequestInterceptorChainWrapper
argument_list|>
name|applPipelineMap
decl_stmt|;
comment|/**    * Creates an instance of the service.    *     * @param nmContext    * @param dispatcher    */
DECL|method|AMRMProxyService (Context nmContext, AsyncDispatcher dispatcher)
specifier|public
name|AMRMProxyService
parameter_list|(
name|Context
name|nmContext
parameter_list|,
name|AsyncDispatcher
name|dispatcher
parameter_list|)
block|{
name|super
argument_list|(
name|AMRMProxyService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|nmContext
operator|!=
literal|null
argument_list|,
literal|"nmContext is null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|dispatcher
operator|!=
literal|null
argument_list|,
literal|"dispatcher is null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|nmContext
operator|=
name|nmContext
expr_stmt|;
name|this
operator|.
name|dispatcher
operator|=
name|dispatcher
expr_stmt|;
name|this
operator|.
name|applPipelineMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|RequestInterceptorChainWrapper
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|dispatcher
operator|.
name|register
argument_list|(
name|ApplicationEventType
operator|.
name|class
argument_list|,
operator|new
name|ApplicationEventHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting AMRMProxyService"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|listenerEndpoint
operator|=
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|AMRM_PROXY_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_AMRM_PROXY_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_AMRM_PROXY_PORT
argument_list|)
expr_stmt|;
name|Configuration
name|serverConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|serverConf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
name|SaslRpcServer
operator|.
name|AuthMethod
operator|.
name|TOKEN
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numWorkerThreads
init|=
name|serverConf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|AMRM_PROXY_CLIENT_THREAD_COUNT
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_AMRM_PROXY_CLIENT_THREAD_COUNT
argument_list|)
decl_stmt|;
name|this
operator|.
name|secretManager
operator|=
operator|new
name|AMRMProxyTokenSecretManager
argument_list|(
name|serverConf
argument_list|)
expr_stmt|;
name|this
operator|.
name|secretManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|rpc
operator|.
name|getServer
argument_list|(
name|ApplicationMasterProtocol
operator|.
name|class
argument_list|,
name|this
argument_list|,
name|listenerEndpoint
argument_list|,
name|serverConf
argument_list|,
name|this
operator|.
name|secretManager
argument_list|,
name|numWorkerThreads
argument_list|)
expr_stmt|;
name|this
operator|.
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"AMRMProxyService listening on address: "
operator|+
name|this
operator|.
name|server
operator|.
name|getListenerAddress
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping AMRMProxyService"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|server
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|secretManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
comment|/**    * This is called by the AMs started on this node to register with the RM.    * This method does the initial authorization and then forwards the request to    * the application instance specific intercepter chain.    */
annotation|@
name|Override
DECL|method|registerApplicationMaster ( RegisterApplicationMasterRequest request)
specifier|public
name|RegisterApplicationMasterResponse
name|registerApplicationMaster
parameter_list|(
name|RegisterApplicationMasterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Registering application master."
operator|+
literal|" Host:"
operator|+
name|request
operator|.
name|getHost
argument_list|()
operator|+
literal|" Port:"
operator|+
name|request
operator|.
name|getRpcPort
argument_list|()
operator|+
literal|" Tracking Url:"
operator|+
name|request
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|authorizeAndGetInterceptorChain
argument_list|()
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|registerApplicationMaster
argument_list|(
name|request
argument_list|)
return|;
block|}
comment|/**    * This is called by the AMs started on this node to unregister from the RM.    * This method does the initial authorization and then forwards the request to    * the application instance specific intercepter chain.    */
annotation|@
name|Override
DECL|method|finishApplicationMaster ( FinishApplicationMasterRequest request)
specifier|public
name|FinishApplicationMasterResponse
name|finishApplicationMaster
parameter_list|(
name|FinishApplicationMasterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Finishing application master. Tracking Url:"
operator|+
name|request
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|authorizeAndGetInterceptorChain
argument_list|()
decl_stmt|;
return|return
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|finishApplicationMaster
argument_list|(
name|request
argument_list|)
return|;
block|}
comment|/**    * This is called by the AMs started on this node to send heart beat to RM.    * This method does the initial authorization and then forwards the request to    * the application instance specific pipeline, which is a chain of request    * intercepter objects. One application request processing pipeline is created    * per AM instance.    */
annotation|@
name|Override
DECL|method|allocate (AllocateRequest request)
specifier|public
name|AllocateResponse
name|allocate
parameter_list|(
name|AllocateRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|AMRMTokenIdentifier
name|amrmTokenIdentifier
init|=
name|YarnServerSecurityUtils
operator|.
name|authorizeRequest
argument_list|()
decl_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|getInterceptorChain
argument_list|(
name|amrmTokenIdentifier
argument_list|)
decl_stmt|;
name|AllocateResponse
name|allocateResponse
init|=
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|allocate
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|updateAMRMTokens
argument_list|(
name|amrmTokenIdentifier
argument_list|,
name|pipeline
argument_list|,
name|allocateResponse
argument_list|)
expr_stmt|;
return|return
name|allocateResponse
return|;
block|}
comment|/**    * Callback from the ContainerManager implementation for initializing the    * application request processing pipeline.    *    * @param request - encapsulates information for starting an AM    * @throws IOException    * @throws YarnException    */
DECL|method|processApplicationStartRequest (StartContainerRequest request)
specifier|public
name|void
name|processApplicationStartRequest
parameter_list|(
name|StartContainerRequest
name|request
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Callback received for initializing request "
operator|+
literal|"processing pipeline for an AM"
argument_list|)
expr_stmt|;
name|ContainerTokenIdentifier
name|containerTokenIdentifierForKey
init|=
name|BuilderUtils
operator|.
name|newContainerTokenIdentifier
argument_list|(
name|request
operator|.
name|getContainerToken
argument_list|()
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|containerTokenIdentifierForKey
operator|.
name|getContainerID
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
name|Credentials
name|credentials
init|=
name|YarnServerSecurityUtils
operator|.
name|parseCredentials
argument_list|(
name|request
operator|.
name|getContainerLaunchContext
argument_list|()
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|amrmToken
init|=
name|getFirstAMRMToken
argument_list|(
name|credentials
operator|.
name|getAllTokens
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|amrmToken
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"AMRMToken not found in the start container request for application:"
operator|+
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|// Substitute the existing AMRM Token with a local one. Keep the rest of the
comment|// tokens in the credentials intact.
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|localToken
init|=
name|this
operator|.
name|secretManager
operator|.
name|createAndGetAMRMToken
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
name|credentials
operator|.
name|addToken
argument_list|(
name|localToken
operator|.
name|getService
argument_list|()
argument_list|,
name|localToken
argument_list|)
expr_stmt|;
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|credentials
operator|.
name|writeTokenStorageToStream
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|request
operator|.
name|getContainerLaunchContext
argument_list|()
operator|.
name|setTokens
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|initializePipeline
argument_list|(
name|containerTokenIdentifierForKey
operator|.
name|getContainerID
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|containerTokenIdentifierForKey
operator|.
name|getApplicationSubmitter
argument_list|()
argument_list|,
name|amrmToken
argument_list|,
name|localToken
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initializes the request intercepter pipeline for the specified application.    *     * @param applicationAttemptId    * @param user    * @param amrmToken    */
DECL|method|initializePipeline ( ApplicationAttemptId applicationAttemptId, String user, Token<AMRMTokenIdentifier> amrmToken, Token<AMRMTokenIdentifier> localToken)
specifier|protected
name|void
name|initializePipeline
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|String
name|user
parameter_list|,
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|amrmToken
parameter_list|,
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|localToken
parameter_list|)
block|{
name|RequestInterceptorChainWrapper
name|chainWrapper
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|applPipelineMap
init|)
block|{
if|if
condition|(
name|applPipelineMap
operator|.
name|containsKey
argument_list|(
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Request to start an already existing appId was received. "
operator|+
literal|" This can happen if an application failed and a new attempt "
operator|+
literal|"was created on this machine.  ApplicationId: "
operator|+
name|applicationAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|chainWrapper
operator|=
operator|new
name|RequestInterceptorChainWrapper
argument_list|()
expr_stmt|;
name|this
operator|.
name|applPipelineMap
operator|.
name|put
argument_list|(
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|chainWrapper
argument_list|)
expr_stmt|;
block|}
comment|// We register the pipeline instance in the map first and then initialize it
comment|// later because chain initialization can be expensive and we would like to
comment|// release the lock as soon as possible to prevent other applications from
comment|// blocking when one application's chain is initializing
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing request processing pipeline for application. "
operator|+
literal|" ApplicationId:"
operator|+
name|applicationAttemptId
operator|+
literal|" for the user: "
operator|+
name|user
argument_list|)
expr_stmt|;
name|RequestInterceptor
name|interceptorChain
init|=
name|this
operator|.
name|createRequestInterceptorChain
argument_list|()
decl_stmt|;
name|interceptorChain
operator|.
name|init
argument_list|(
name|createApplicationMasterContext
argument_list|(
name|applicationAttemptId
argument_list|,
name|user
argument_list|,
name|amrmToken
argument_list|,
name|localToken
argument_list|)
argument_list|)
expr_stmt|;
name|chainWrapper
operator|.
name|init
argument_list|(
name|interceptorChain
argument_list|,
name|applicationAttemptId
argument_list|)
expr_stmt|;
block|}
comment|/**    * Shuts down the request processing pipeline for the specified application    * attempt id.    *    * @param applicationId    */
DECL|method|stopApplication (ApplicationId applicationId)
specifier|protected
name|void
name|stopApplication
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|applicationId
operator|!=
literal|null
argument_list|,
literal|"applicationId is null"
argument_list|)
expr_stmt|;
name|RequestInterceptorChainWrapper
name|pipeline
init|=
name|this
operator|.
name|applPipelineMap
operator|.
name|remove
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
if|if
condition|(
name|pipeline
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Request to stop an application that does not exist. Id:"
operator|+
name|applicationId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Remove the appAttempt in AMRMTokenSecretManager
name|this
operator|.
name|secretManager
operator|.
name|applicationMasterFinished
argument_list|(
name|pipeline
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping the request processing pipeline for application: "
operator|+
name|applicationId
argument_list|)
expr_stmt|;
try|try
block|{
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to shutdown the request processing pipeline for app:"
operator|+
name|applicationId
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|updateAMRMTokens (AMRMTokenIdentifier amrmTokenIdentifier, RequestInterceptorChainWrapper pipeline, AllocateResponse allocateResponse)
specifier|private
name|void
name|updateAMRMTokens
parameter_list|(
name|AMRMTokenIdentifier
name|amrmTokenIdentifier
parameter_list|,
name|RequestInterceptorChainWrapper
name|pipeline
parameter_list|,
name|AllocateResponse
name|allocateResponse
parameter_list|)
block|{
name|AMRMProxyApplicationContextImpl
name|context
init|=
operator|(
name|AMRMProxyApplicationContextImpl
operator|)
name|pipeline
operator|.
name|getRootInterceptor
argument_list|()
operator|.
name|getApplicationContext
argument_list|()
decl_stmt|;
comment|// check to see if the RM has issued a new AMRMToken& accordingly update
comment|// the real ARMRMToken in the current context
if|if
condition|(
name|allocateResponse
operator|.
name|getAMRMToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"RM rolled master-key for amrm-tokens"
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|token
init|=
name|allocateResponse
operator|.
name|getAMRMToken
argument_list|()
decl_stmt|;
comment|// Do not propagate this info back to AM
name|allocateResponse
operator|.
name|setAMRMToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|newTokenId
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|token
operator|.
name|getPassword
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
name|token
operator|.
name|getKind
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|token
operator|.
name|getService
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|context
operator|.
name|setAMRMToken
argument_list|(
name|newTokenId
argument_list|)
expr_stmt|;
block|}
comment|// Check if the local AMRMToken is rolled up and update the context and
comment|// response accordingly
name|MasterKeyData
name|nextMasterKey
init|=
name|this
operator|.
name|secretManager
operator|.
name|getNextMasterKeyData
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextMasterKey
operator|!=
literal|null
operator|&&
name|nextMasterKey
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
operator|!=
name|amrmTokenIdentifier
operator|.
name|getKeyId
argument_list|()
condition|)
block|{
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|localToken
init|=
name|context
operator|.
name|getLocalAMRMToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextMasterKey
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
operator|!=
name|context
operator|.
name|getLocalAMRMTokenKeyId
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"The local AMRMToken has been rolled-over."
operator|+
literal|" Send new local AMRMToken back to application: "
operator|+
name|pipeline
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|localToken
operator|=
name|this
operator|.
name|secretManager
operator|.
name|createAndGetAMRMToken
argument_list|(
name|pipeline
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setLocalAMRMToken
argument_list|(
name|localToken
argument_list|)
expr_stmt|;
block|}
name|allocateResponse
operator|.
name|setAMRMToken
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
operator|.
name|newInstance
argument_list|(
name|localToken
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|localToken
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|localToken
operator|.
name|getPassword
argument_list|()
argument_list|,
name|localToken
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createApplicationMasterContext ( ApplicationAttemptId applicationAttemptId, String user, Token<AMRMTokenIdentifier> amrmToken, Token<AMRMTokenIdentifier> localToken)
specifier|private
name|AMRMProxyApplicationContext
name|createApplicationMasterContext
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|String
name|user
parameter_list|,
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|amrmToken
parameter_list|,
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|localToken
parameter_list|)
block|{
name|AMRMProxyApplicationContextImpl
name|appContext
init|=
operator|new
name|AMRMProxyApplicationContextImpl
argument_list|(
name|this
operator|.
name|nmContext
argument_list|,
name|getConfig
argument_list|()
argument_list|,
name|applicationAttemptId
argument_list|,
name|user
argument_list|,
name|amrmToken
argument_list|,
name|localToken
argument_list|)
decl_stmt|;
return|return
name|appContext
return|;
block|}
comment|/**    * Gets the Request intercepter chains for all the applications.    *     * @return the request intercepter chains.    */
DECL|method|getPipelines ()
specifier|protected
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|RequestInterceptorChainWrapper
argument_list|>
name|getPipelines
parameter_list|()
block|{
return|return
name|this
operator|.
name|applPipelineMap
return|;
block|}
comment|/**    * This method creates and returns reference of the first intercepter in the    * chain of request intercepter instances.    *    * @return the reference of the first intercepter in the chain    */
DECL|method|createRequestInterceptorChain ()
specifier|protected
name|RequestInterceptor
name|createRequestInterceptorChain
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|interceptorClassNames
init|=
name|getInterceptorClassNames
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|RequestInterceptor
name|pipeline
init|=
literal|null
decl_stmt|;
name|RequestInterceptor
name|current
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|interceptorClassName
range|:
name|interceptorClassNames
control|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|interceptorClass
init|=
name|conf
operator|.
name|getClassByName
argument_list|(
name|interceptorClassName
argument_list|)
decl_stmt|;
if|if
condition|(
name|RequestInterceptor
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|interceptorClass
argument_list|)
condition|)
block|{
name|RequestInterceptor
name|interceptorInstance
init|=
operator|(
name|RequestInterceptor
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|interceptorClass
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|pipeline
operator|==
literal|null
condition|)
block|{
name|pipeline
operator|=
name|interceptorInstance
expr_stmt|;
name|current
operator|=
name|interceptorInstance
expr_stmt|;
continue|continue;
block|}
else|else
block|{
name|current
operator|.
name|setNextInterceptor
argument_list|(
name|interceptorInstance
argument_list|)
expr_stmt|;
name|current
operator|=
name|interceptorInstance
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Class: "
operator|+
name|interceptorClassName
operator|+
literal|" not instance of "
operator|+
name|RequestInterceptor
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Could not instantiate ApplicationMasterRequestInterceptor: "
operator|+
name|interceptorClassName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|pipeline
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"RequestInterceptor pipeline is not configured in the system"
argument_list|)
throw|;
block|}
return|return
name|pipeline
return|;
block|}
comment|/**    * Returns the comma separated intercepter class names from the configuration.    *    * @param conf    * @return the intercepter class names as an instance of ArrayList    */
DECL|method|getInterceptorClassNames (Configuration conf)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getInterceptorClassNames
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|configuredInterceptorClassNames
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|AMRM_PROXY_INTERCEPTOR_CLASS_PIPELINE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_AMRM_PROXY_INTERCEPTOR_CLASS_PIPELINE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|interceptorClassNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|tempList
init|=
name|StringUtils
operator|.
name|getStringCollection
argument_list|(
name|configuredInterceptorClassNames
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|item
range|:
name|tempList
control|)
block|{
name|interceptorClassNames
operator|.
name|add
argument_list|(
name|item
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Make sure DistributedScheduler is present at the beginning of the chain.
if|if
condition|(
name|this
operator|.
name|nmContext
operator|.
name|isDistributedSchedulingEnabled
argument_list|()
condition|)
block|{
name|interceptorClassNames
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|DistributedScheduler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|interceptorClassNames
return|;
block|}
comment|/**    * Authorizes the request and returns the application specific request    * processing pipeline.    *    * @return the the intercepter wrapper instance    * @throws YarnException    */
DECL|method|authorizeAndGetInterceptorChain ()
specifier|private
name|RequestInterceptorChainWrapper
name|authorizeAndGetInterceptorChain
parameter_list|()
throws|throws
name|YarnException
block|{
name|AMRMTokenIdentifier
name|tokenIdentifier
init|=
name|YarnServerSecurityUtils
operator|.
name|authorizeRequest
argument_list|()
decl_stmt|;
return|return
name|getInterceptorChain
argument_list|(
name|tokenIdentifier
argument_list|)
return|;
block|}
DECL|method|getInterceptorChain ( AMRMTokenIdentifier tokenIdentifier)
specifier|private
name|RequestInterceptorChainWrapper
name|getInterceptorChain
parameter_list|(
name|AMRMTokenIdentifier
name|tokenIdentifier
parameter_list|)
throws|throws
name|YarnException
block|{
name|ApplicationAttemptId
name|appAttemptId
init|=
name|tokenIdentifier
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|applPipelineMap
init|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|applPipelineMap
operator|.
name|containsKey
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"The AM request processing pipeline is not initialized for app: "
operator|+
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
name|applPipelineMap
operator|.
name|get
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getFirstAMRMToken ( Collection<Token<? extends TokenIdentifier>> allTokens)
specifier|private
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|getFirstAMRMToken
parameter_list|(
name|Collection
argument_list|<
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
argument_list|>
name|allTokens
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
argument_list|>
name|iter
init|=
name|allTokens
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
name|AMRMTokenIdentifier
operator|.
name|KIND_NAME
argument_list|)
condition|)
block|{
return|return
operator|(
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
operator|)
name|token
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Private
DECL|method|getBindAddress ()
specifier|public
name|InetSocketAddress
name|getBindAddress
parameter_list|()
block|{
return|return
name|this
operator|.
name|listenerEndpoint
return|;
block|}
annotation|@
name|Private
DECL|method|getSecretManager ()
specifier|public
name|AMRMProxyTokenSecretManager
name|getSecretManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|secretManager
return|;
block|}
comment|/**    * Private class for handling application stop events.    *    */
DECL|class|ApplicationEventHandler
class|class
name|ApplicationEventHandler
implements|implements
name|EventHandler
argument_list|<
name|ApplicationEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (ApplicationEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|ApplicationEvent
name|event
parameter_list|)
block|{
name|Application
name|app
init|=
name|AMRMProxyService
operator|.
name|this
operator|.
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|get
argument_list|(
name|event
operator|.
name|getApplicationID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|app
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|APPLICATION_RESOURCES_CLEANEDUP
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"Application stop event received for stopping AppId:"
operator|+
name|event
operator|.
name|getApplicationID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|AMRMProxyService
operator|.
name|this
operator|.
name|stopApplication
argument_list|(
name|event
operator|.
name|getApplicationID
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"AMRMProxy is ignoring event: "
operator|+
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Event "
operator|+
name|event
operator|+
literal|" sent to absent application "
operator|+
name|event
operator|.
name|getApplicationID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Private structure for encapsulating RequestInterceptor and    * ApplicationAttemptId instances.    *    */
annotation|@
name|Private
DECL|class|RequestInterceptorChainWrapper
specifier|public
specifier|static
class|class
name|RequestInterceptorChainWrapper
block|{
DECL|field|rootInterceptor
specifier|private
name|RequestInterceptor
name|rootInterceptor
decl_stmt|;
DECL|field|applicationAttemptId
specifier|private
name|ApplicationAttemptId
name|applicationAttemptId
decl_stmt|;
comment|/**      * Initializes the wrapper with the specified parameters.      *       * @param rootInterceptor      * @param applicationAttemptId      */
DECL|method|init (RequestInterceptor rootInterceptor, ApplicationAttemptId applicationAttemptId)
specifier|public
specifier|synchronized
name|void
name|init
parameter_list|(
name|RequestInterceptor
name|rootInterceptor
parameter_list|,
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|)
block|{
name|this
operator|.
name|rootInterceptor
operator|=
name|rootInterceptor
expr_stmt|;
name|this
operator|.
name|applicationAttemptId
operator|=
name|applicationAttemptId
expr_stmt|;
block|}
comment|/**      * Gets the root request intercepter.      *       * @return the root request intercepter      */
DECL|method|getRootInterceptor ()
specifier|public
specifier|synchronized
name|RequestInterceptor
name|getRootInterceptor
parameter_list|()
block|{
return|return
name|rootInterceptor
return|;
block|}
comment|/**      * Gets the application attempt identifier.      *       * @return the application attempt identifier      */
DECL|method|getApplicationAttemptId ()
specifier|public
specifier|synchronized
name|ApplicationAttemptId
name|getApplicationAttemptId
parameter_list|()
block|{
return|return
name|applicationAttemptId
return|;
block|}
comment|/**      * Gets the application identifier.      *       * @return the application identifier      */
DECL|method|getApplicationId ()
specifier|public
specifier|synchronized
name|ApplicationId
name|getApplicationId
parameter_list|()
block|{
return|return
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

