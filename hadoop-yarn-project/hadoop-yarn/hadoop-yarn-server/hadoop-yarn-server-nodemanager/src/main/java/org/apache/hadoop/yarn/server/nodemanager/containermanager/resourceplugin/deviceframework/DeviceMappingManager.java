begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.deviceframework
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|deviceframework
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|Device
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|DevicePluginScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|ResourceHandlerException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_comment
comment|/**  * Schedule device resource based on requirements and do book keeping  * It holds all device type resource and can do scheduling as a default  * scheduler.  * */
end_comment

begin_class
DECL|class|DeviceMappingManager
specifier|public
class|class
name|DeviceMappingManager
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DeviceMappingManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|nmContext
specifier|private
name|Context
name|nmContext
decl_stmt|;
DECL|field|WAIT_MS_PER_LOOP
specifier|private
specifier|static
specifier|final
name|int
name|WAIT_MS_PER_LOOP
init|=
literal|1000
decl_stmt|;
comment|// Holds vendor implemented scheduler
DECL|field|devicePluginSchedulers
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|DevicePluginScheduler
argument_list|>
name|devicePluginSchedulers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Hold all type of devices.    * key is the device resource name    * value is a sorted set of {@link Device}    * */
DECL|field|allAllowedDevices
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Device
argument_list|>
argument_list|>
name|allAllowedDevices
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Hold used devices.    * key is the device resource name    * value is a sorted map of {@link Device} and {@link ContainerId} pairs    * */
DECL|field|allUsedDevices
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Device
argument_list|,
name|ContainerId
argument_list|>
argument_list|>
name|allUsedDevices
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|DeviceMappingManager (Context context)
specifier|public
name|DeviceMappingManager
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|nmContext
operator|=
name|context
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getAllAllowedDevices ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Device
argument_list|>
argument_list|>
name|getAllAllowedDevices
parameter_list|()
block|{
return|return
name|allAllowedDevices
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getAllUsedDevices ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Device
argument_list|,
name|ContainerId
argument_list|>
argument_list|>
name|getAllUsedDevices
parameter_list|()
block|{
return|return
name|allUsedDevices
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getDevicePluginSchedulers ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|DevicePluginScheduler
argument_list|>
name|getDevicePluginSchedulers
parameter_list|()
block|{
return|return
name|devicePluginSchedulers
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getAllocatedDevices (String resourceName, ContainerId cId)
specifier|public
name|Set
argument_list|<
name|Device
argument_list|>
name|getAllocatedDevices
parameter_list|(
name|String
name|resourceName
parameter_list|,
name|ContainerId
name|cId
parameter_list|)
block|{
name|Set
argument_list|<
name|Device
argument_list|>
name|assigned
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Device
argument_list|,
name|ContainerId
argument_list|>
name|assignedMap
init|=
name|this
operator|.
name|getAllUsedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Device
argument_list|,
name|ContainerId
argument_list|>
name|entry
range|:
name|assignedMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|cId
argument_list|)
condition|)
block|{
name|assigned
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|assigned
return|;
block|}
DECL|method|addDeviceSet (String resourceName, Set<Device> deviceSet)
specifier|public
specifier|synchronized
name|void
name|addDeviceSet
parameter_list|(
name|String
name|resourceName
parameter_list|,
name|Set
argument_list|<
name|Device
argument_list|>
name|deviceSet
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding new resource: "
operator|+
literal|"type:"
operator|+
name|resourceName
operator|+
literal|","
operator|+
name|deviceSet
argument_list|)
expr_stmt|;
name|allAllowedDevices
operator|.
name|put
argument_list|(
name|resourceName
argument_list|,
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|deviceSet
argument_list|)
argument_list|)
expr_stmt|;
name|allUsedDevices
operator|.
name|put
argument_list|(
name|resourceName
argument_list|,
operator|new
name|TreeMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assignDevices (String resourceName, Container container)
specifier|public
name|DeviceAllocation
name|assignDevices
parameter_list|(
name|String
name|resourceName
parameter_list|,
name|Container
name|container
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|DeviceAllocation
name|allocation
init|=
name|internalAssignDevices
argument_list|(
name|resourceName
argument_list|,
name|container
argument_list|)
decl_stmt|;
comment|// Wait for a maximum of 120 seconds if no available Devices are there
comment|// which are yet to be released.
specifier|final
name|int
name|timeoutMsecs
init|=
literal|120
operator|*
name|WAIT_MS_PER_LOOP
decl_stmt|;
name|int
name|timeWaiting
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|allocation
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|timeWaiting
operator|>=
name|timeoutMsecs
condition|)
block|{
break|break;
block|}
comment|// Sleep for 1 sec to ensure there are some free devices which are
comment|// getting released.
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Container : "
operator|+
name|container
operator|.
name|getContainerId
argument_list|()
operator|+
literal|" is waiting for free "
operator|+
name|resourceName
operator|+
literal|" devices."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|WAIT_MS_PER_LOOP
argument_list|)
expr_stmt|;
name|timeWaiting
operator|+=
name|WAIT_MS_PER_LOOP
expr_stmt|;
name|allocation
operator|=
name|internalAssignDevices
argument_list|(
name|resourceName
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// On any interrupt, break the loop and continue execution.
break|break;
block|}
block|}
if|if
condition|(
name|allocation
operator|==
literal|null
condition|)
block|{
name|String
name|message
init|=
literal|"Could not get valid "
operator|+
name|resourceName
operator|+
literal|" device for container '"
operator|+
name|container
operator|.
name|getContainerId
argument_list|()
operator|+
literal|"' as some other containers might not releasing them."
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
name|message
argument_list|)
throw|;
block|}
return|return
name|allocation
return|;
block|}
DECL|method|internalAssignDevices ( String resourceName, Container container)
specifier|private
specifier|synchronized
name|DeviceAllocation
name|internalAssignDevices
parameter_list|(
name|String
name|resourceName
parameter_list|,
name|Container
name|container
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|Resource
name|requestedResource
init|=
name|container
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|container
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|int
name|requestedDeviceCount
init|=
name|getRequestedDeviceCount
argument_list|(
name|resourceName
argument_list|,
name|requestedResource
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Try allocating "
operator|+
name|requestedDeviceCount
operator|+
literal|" "
operator|+
name|resourceName
argument_list|)
expr_stmt|;
block|}
comment|// Assign devices to container if requested some.
if|if
condition|(
name|requestedDeviceCount
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|requestedDeviceCount
operator|>
name|getAvailableDevices
argument_list|(
name|resourceName
argument_list|)
condition|)
block|{
comment|// If there are some devices which are getting released, wait for few
comment|// seconds to get it.
if|if
condition|(
name|requestedDeviceCount
operator|<=
name|getReleasingDevices
argument_list|(
name|resourceName
argument_list|)
operator|+
name|getAvailableDevices
argument_list|(
name|resourceName
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
name|int
name|availableDeviceCount
init|=
name|getAvailableDevices
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|requestedDeviceCount
operator|>
name|availableDeviceCount
condition|)
block|{
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
literal|"Failed to find enough "
operator|+
name|resourceName
operator|+
literal|", requestor="
operator|+
name|containerId
operator|+
literal|", #Requested="
operator|+
name|requestedDeviceCount
operator|+
literal|", #available="
operator|+
name|availableDeviceCount
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|Device
argument_list|>
name|assignedDevices
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Device
argument_list|,
name|ContainerId
argument_list|>
name|usedDevices
init|=
name|allUsedDevices
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Device
argument_list|>
name|allowedDevices
init|=
name|allAllowedDevices
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
name|DevicePluginScheduler
name|dps
init|=
name|devicePluginSchedulers
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
comment|// Prefer DevicePluginScheduler logic
name|pickAndDoSchedule
argument_list|(
name|allowedDevices
argument_list|,
name|usedDevices
argument_list|,
name|assignedDevices
argument_list|,
name|container
argument_list|,
name|requestedDeviceCount
argument_list|,
name|resourceName
argument_list|,
name|dps
argument_list|)
expr_stmt|;
comment|// Record in state store if we allocated anything
if|if
condition|(
operator|!
name|assignedDevices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
comment|// Update state store.
name|nmContext
operator|.
name|getNMStateStore
argument_list|()
operator|.
name|storeAssignedResources
argument_list|(
name|container
argument_list|,
name|resourceName
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|assignedDevices
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|cleanupAssignedDevices
argument_list|(
name|resourceName
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|DeviceAllocation
argument_list|(
name|resourceName
argument_list|,
name|assignedDevices
argument_list|,
name|Sets
operator|.
name|difference
argument_list|(
name|allowedDevices
argument_list|,
name|assignedDevices
argument_list|)
argument_list|)
return|;
block|}
return|return
operator|new
name|DeviceAllocation
argument_list|(
name|resourceName
argument_list|,
literal|null
argument_list|,
name|allAllowedDevices
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
argument_list|)
return|;
block|}
DECL|method|recoverAssignedDevices (String resourceName, ContainerId containerId)
specifier|public
specifier|synchronized
name|void
name|recoverAssignedDevices
parameter_list|(
name|String
name|resourceName
parameter_list|,
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|Container
name|c
init|=
name|nmContext
operator|.
name|getContainers
argument_list|()
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Device
argument_list|,
name|ContainerId
argument_list|>
name|usedDevices
init|=
name|allUsedDevices
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Device
argument_list|>
name|allowedDevices
init|=
name|allAllowedDevices
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|c
condition|)
block|{
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
literal|"This shouldn't happen, cannot find container with id="
operator|+
name|containerId
argument_list|)
throw|;
block|}
for|for
control|(
name|Serializable
name|deviceSerializable
range|:
name|c
operator|.
name|getResourceMappings
argument_list|()
operator|.
name|getAssignedResources
argument_list|(
name|resourceName
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|deviceSerializable
operator|instanceof
name|Device
operator|)
condition|)
block|{
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
literal|"Trying to recover device id, however it"
operator|+
literal|" is not Device instance, this shouldn't happen"
argument_list|)
throw|;
block|}
name|Device
name|device
init|=
operator|(
name|Device
operator|)
name|deviceSerializable
decl_stmt|;
comment|// Make sure it is in allowed device.
if|if
condition|(
operator|!
name|allowedDevices
operator|.
name|contains
argument_list|(
name|device
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
literal|"Try to recover device = "
operator|+
name|device
operator|+
literal|" however it is not in allowed device list:"
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|allowedDevices
argument_list|)
argument_list|)
throw|;
block|}
comment|// Make sure it is not occupied by anybody else
if|if
condition|(
name|usedDevices
operator|.
name|containsKey
argument_list|(
name|device
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
literal|"Try to recover device id = "
operator|+
name|device
operator|+
literal|" however it is already assigned to container="
operator|+
name|usedDevices
operator|.
name|get
argument_list|(
name|device
argument_list|)
operator|+
literal|", please double check what happened."
argument_list|)
throw|;
block|}
name|usedDevices
operator|.
name|put
argument_list|(
name|device
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|cleanupAssignedDevices (String resourceName, ContainerId containerId)
specifier|public
specifier|synchronized
name|void
name|cleanupAssignedDevices
parameter_list|(
name|String
name|resourceName
parameter_list|,
name|ContainerId
name|containerId
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Device
argument_list|,
name|ContainerId
argument_list|>
argument_list|>
name|iter
init|=
name|allUsedDevices
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Map
operator|.
name|Entry
argument_list|<
name|Device
argument_list|,
name|ContainerId
argument_list|>
name|entry
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|entry
operator|=
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Recycle devices: "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|", type: "
operator|+
name|resourceName
operator|+
literal|" from "
operator|+
name|containerId
argument_list|)
expr_stmt|;
block|}
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|getRequestedDeviceCount (String resName, Resource requestedResource)
specifier|public
specifier|static
name|int
name|getRequestedDeviceCount
parameter_list|(
name|String
name|resName
parameter_list|,
name|Resource
name|requestedResource
parameter_list|)
block|{
try|try
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|requestedResource
operator|.
name|getResourceValue
argument_list|(
name|resName
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
DECL|method|getAvailableDevices (String resourceName)
specifier|public
name|int
name|getAvailableDevices
parameter_list|(
name|String
name|resourceName
parameter_list|)
block|{
return|return
name|allAllowedDevices
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|size
argument_list|()
operator|-
name|allUsedDevices
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getReleasingDevices (String resourceName)
specifier|private
name|long
name|getReleasingDevices
parameter_list|(
name|String
name|resourceName
parameter_list|)
block|{
name|long
name|releasingDevices
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|Device
argument_list|,
name|ContainerId
argument_list|>
name|used
init|=
name|allUsedDevices
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
for|for
control|(
name|ContainerId
name|containerId
range|:
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|used
operator|.
name|values
argument_list|()
argument_list|)
control|)
block|{
name|Container
name|container
init|=
name|nmContext
operator|.
name|getContainers
argument_list|()
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|container
operator|.
name|isContainerInFinalStates
argument_list|()
condition|)
block|{
name|releasingDevices
operator|=
name|releasingDevices
operator|+
name|container
operator|.
name|getResource
argument_list|()
operator|.
name|getResourceInformation
argument_list|(
name|resourceName
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|releasingDevices
return|;
block|}
comment|/**    * If device plugin has own scheduler, then use it.    * Otherwise, pick our default scheduler to do scheduling.    * */
DECL|method|pickAndDoSchedule (Set<Device> allowed, Map<Device, ContainerId> used, Set<Device> assigned, Container c, int count, String resourceName, DevicePluginScheduler dps)
specifier|private
name|void
name|pickAndDoSchedule
parameter_list|(
name|Set
argument_list|<
name|Device
argument_list|>
name|allowed
parameter_list|,
name|Map
argument_list|<
name|Device
argument_list|,
name|ContainerId
argument_list|>
name|used
parameter_list|,
name|Set
argument_list|<
name|Device
argument_list|>
name|assigned
parameter_list|,
name|Container
name|c
parameter_list|,
name|int
name|count
parameter_list|,
name|String
name|resourceName
parameter_list|,
name|DevicePluginScheduler
name|dps
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|ContainerId
name|containerId
init|=
name|c
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
name|c
operator|.
name|getLaunchContext
argument_list|()
operator|.
name|getEnvironment
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|dps
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Customized device plugin scheduler is preferred "
operator|+
literal|"but not implemented, use default logic"
argument_list|)
expr_stmt|;
block|}
name|defaultScheduleAction
argument_list|(
name|allowed
argument_list|,
name|used
argument_list|,
name|assigned
argument_list|,
name|containerId
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Customized device plugin implemented,"
operator|+
literal|"use customized logic"
argument_list|)
expr_stmt|;
comment|// Use customized device scheduler
name|LOG
operator|.
name|debug
argument_list|(
literal|"Try to schedule "
operator|+
name|count
operator|+
literal|"("
operator|+
name|resourceName
operator|+
literal|") using "
operator|+
name|dps
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Pass in unmodifiable set
name|Set
argument_list|<
name|Device
argument_list|>
name|dpsAllocated
init|=
name|dps
operator|.
name|allocateDevices
argument_list|(
name|Sets
operator|.
name|difference
argument_list|(
name|allowed
argument_list|,
name|used
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|,
name|count
argument_list|,
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|env
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|dpsAllocated
operator|.
name|size
argument_list|()
operator|!=
name|count
condition|)
block|{
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
name|dps
operator|.
name|getClass
argument_list|()
operator|+
literal|" should allocate "
operator|+
name|count
operator|+
literal|" of "
operator|+
name|resourceName
operator|+
literal|", but actual: "
operator|+
name|assigned
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
comment|// copy
name|assigned
operator|.
name|addAll
argument_list|(
name|dpsAllocated
argument_list|)
expr_stmt|;
comment|// Store assigned devices into usedDevices
for|for
control|(
name|Device
name|device
range|:
name|assigned
control|)
block|{
name|used
operator|.
name|put
argument_list|(
name|device
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Default scheduling logic
DECL|method|defaultScheduleAction (Set<Device> allowed, Map<Device, ContainerId> used, Set<Device> assigned, ContainerId containerId, int count)
specifier|private
name|void
name|defaultScheduleAction
parameter_list|(
name|Set
argument_list|<
name|Device
argument_list|>
name|allowed
parameter_list|,
name|Map
argument_list|<
name|Device
argument_list|,
name|ContainerId
argument_list|>
name|used
parameter_list|,
name|Set
argument_list|<
name|Device
argument_list|>
name|assigned
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using default scheduler. Allowed:"
operator|+
name|allowed
operator|+
literal|",Used:"
operator|+
name|used
operator|+
literal|", containerId:"
operator|+
name|containerId
argument_list|)
expr_stmt|;
for|for
control|(
name|Device
name|device
range|:
name|allowed
control|)
block|{
if|if
condition|(
operator|!
name|used
operator|.
name|containsKey
argument_list|(
name|device
argument_list|)
condition|)
block|{
name|used
operator|.
name|put
argument_list|(
name|device
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|assigned
operator|.
name|add
argument_list|(
name|device
argument_list|)
expr_stmt|;
if|if
condition|(
name|assigned
operator|.
name|size
argument_list|()
operator|==
name|count
condition|)
block|{
return|return;
block|}
block|}
block|}
comment|// end for
block|}
DECL|class|DeviceAllocation
specifier|static
class|class
name|DeviceAllocation
block|{
DECL|field|resourceName
specifier|private
name|String
name|resourceName
decl_stmt|;
DECL|field|allowed
specifier|private
name|Set
argument_list|<
name|Device
argument_list|>
name|allowed
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
DECL|field|denied
specifier|private
name|Set
argument_list|<
name|Device
argument_list|>
name|denied
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
DECL|method|DeviceAllocation (String resName, Set<Device> a, Set<Device> d)
name|DeviceAllocation
parameter_list|(
name|String
name|resName
parameter_list|,
name|Set
argument_list|<
name|Device
argument_list|>
name|a
parameter_list|,
name|Set
argument_list|<
name|Device
argument_list|>
name|d
parameter_list|)
block|{
name|this
operator|.
name|resourceName
operator|=
name|resName
expr_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|allowed
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|denied
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getAllowed ()
specifier|public
name|Set
argument_list|<
name|Device
argument_list|>
name|getAllowed
parameter_list|()
block|{
return|return
name|allowed
return|;
block|}
DECL|method|getDenied ()
specifier|public
name|Set
argument_list|<
name|Device
argument_list|>
name|getDenied
parameter_list|()
block|{
return|return
name|denied
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ResourceType: "
operator|+
name|resourceName
operator|+
literal|", Allowed Devices: "
operator|+
name|allowed
operator|+
literal|", Denied Devices: "
operator|+
name|denied
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|addDevicePluginScheduler (String resourceName, DevicePluginScheduler s)
specifier|public
specifier|synchronized
name|void
name|addDevicePluginScheduler
parameter_list|(
name|String
name|resourceName
parameter_list|,
name|DevicePluginScheduler
name|s
parameter_list|)
block|{
name|this
operator|.
name|devicePluginSchedulers
operator|.
name|put
argument_list|(
name|resourceName
argument_list|,
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

