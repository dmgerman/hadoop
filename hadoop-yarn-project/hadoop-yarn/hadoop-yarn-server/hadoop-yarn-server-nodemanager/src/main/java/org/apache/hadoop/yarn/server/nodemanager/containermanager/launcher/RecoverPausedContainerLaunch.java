begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.launcher
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|LocalDirsHandlerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|ContainerManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|executor
operator|.
name|ContainerReacquisitionContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_comment
comment|/**  * This is a ContainerLaunch which has been recovered after an NM restart for  * pause containers (for rolling upgrades)  */
end_comment

begin_class
DECL|class|RecoverPausedContainerLaunch
specifier|public
class|class
name|RecoverPausedContainerLaunch
extends|extends
name|ContainerLaunch
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RecoveredContainerLaunch
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|RecoverPausedContainerLaunch (Context context, Configuration configuration, Dispatcher dispatcher, ContainerExecutor exec, Application app, Container container, LocalDirsHandlerService dirsHandler, ContainerManagerImpl containerManager)
specifier|public
name|RecoverPausedContainerLaunch
parameter_list|(
name|Context
name|context
parameter_list|,
name|Configuration
name|configuration
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|ContainerExecutor
name|exec
parameter_list|,
name|Application
name|app
parameter_list|,
name|Container
name|container
parameter_list|,
name|LocalDirsHandlerService
name|dirsHandler
parameter_list|,
name|ContainerManagerImpl
name|containerManager
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|configuration
argument_list|,
name|dispatcher
argument_list|,
name|exec
argument_list|,
name|app
argument_list|,
name|container
argument_list|,
name|dirsHandler
argument_list|,
name|containerManager
argument_list|)
expr_stmt|;
block|}
comment|/**    * Cleanup the paused container by issuing a kill on it.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|Integer
name|call
parameter_list|()
block|{
name|int
name|retCode
init|=
name|ContainerExecutor
operator|.
name|ExitCode
operator|.
name|LOST
operator|.
name|getExitCode
argument_list|()
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|container
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|String
name|appIdStr
init|=
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|containerIdStr
init|=
name|containerId
operator|.
name|toString
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerEvent
argument_list|(
name|containerId
argument_list|,
name|ContainerEventType
operator|.
name|RECOVER_PAUSED_CONTAINER
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|notInterrupted
init|=
literal|true
decl_stmt|;
try|try
block|{
name|File
name|pidFile
init|=
name|locatePidFile
argument_list|(
name|appIdStr
argument_list|,
name|containerIdStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|pidFile
operator|!=
literal|null
condition|)
block|{
name|String
name|pidPathStr
init|=
name|pidFile
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|pidFilePath
operator|=
operator|new
name|Path
argument_list|(
name|pidPathStr
argument_list|)
expr_stmt|;
name|exec
operator|.
name|activateContainer
argument_list|(
name|containerId
argument_list|,
name|pidFilePath
argument_list|)
expr_stmt|;
name|retCode
operator|=
name|exec
operator|.
name|reacquireContainer
argument_list|(
operator|new
name|ContainerReacquisitionContext
operator|.
name|Builder
argument_list|()
operator|.
name|setContainer
argument_list|(
name|container
argument_list|)
operator|.
name|setUser
argument_list|(
name|container
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|setContainerId
argument_list|(
name|containerId
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to locate pid file for container "
operator|+
name|containerIdStr
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|InterruptedIOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted while waiting for exit code from "
operator|+
name|containerId
argument_list|)
expr_stmt|;
name|notInterrupted
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to kill the paused container "
operator|+
name|containerIdStr
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|notInterrupted
condition|)
block|{
name|this
operator|.
name|completed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|exec
operator|.
name|deactivateContainer
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
try|try
block|{
name|getContext
argument_list|()
operator|.
name|getNMStateStore
argument_list|()
operator|.
name|storeContainerCompleted
argument_list|(
name|containerId
argument_list|,
name|retCode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to set exit code for container "
operator|+
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|retCode
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Recovered container exited with a non-zero exit code "
operator|+
name|retCode
argument_list|)
expr_stmt|;
name|this
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerExitEvent
argument_list|(
name|containerId
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_FAILURE
argument_list|,
name|retCode
argument_list|,
literal|"Container exited with a non-zero exit code "
operator|+
name|retCode
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|retCode
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovered container "
operator|+
name|containerId
operator|+
literal|" succeeded"
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerEvent
argument_list|(
name|containerId
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|locatePidFile (String appIdStr, String containerIdStr)
specifier|private
name|File
name|locatePidFile
parameter_list|(
name|String
name|appIdStr
parameter_list|,
name|String
name|containerIdStr
parameter_list|)
block|{
name|String
name|pidSubpath
init|=
name|getPidFileSubpath
argument_list|(
name|appIdStr
argument_list|,
name|containerIdStr
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|dir
range|:
name|getContext
argument_list|()
operator|.
name|getLocalDirsHandler
argument_list|()
operator|.
name|getLocalDirsForRead
argument_list|()
control|)
block|{
name|File
name|pidFile
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|pidSubpath
argument_list|)
decl_stmt|;
if|if
condition|(
name|pidFile
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|pidFile
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

