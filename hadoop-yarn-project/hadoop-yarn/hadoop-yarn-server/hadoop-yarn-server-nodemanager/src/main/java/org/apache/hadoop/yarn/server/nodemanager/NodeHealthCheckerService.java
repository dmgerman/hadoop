begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|NodeHealthScriptRunner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_comment
comment|/**  * The class which provides functionality of checking the health of the node and  * reporting back to the service for which the health checker has been asked to  * report.  */
end_comment

begin_class
DECL|class|NodeHealthCheckerService
specifier|public
class|class
name|NodeHealthCheckerService
extends|extends
name|CompositeService
block|{
DECL|field|nodeHealthScriptRunner
specifier|private
name|NodeHealthScriptRunner
name|nodeHealthScriptRunner
decl_stmt|;
DECL|field|dirsHandler
specifier|private
name|LocalDirsHandlerService
name|dirsHandler
decl_stmt|;
DECL|field|nodeHealthException
specifier|private
name|Exception
name|nodeHealthException
decl_stmt|;
DECL|field|nodeHealthExceptionReportTime
specifier|private
name|long
name|nodeHealthExceptionReportTime
decl_stmt|;
DECL|field|SEPARATOR
specifier|static
specifier|final
name|String
name|SEPARATOR
init|=
literal|";"
decl_stmt|;
DECL|method|NodeHealthCheckerService (NodeHealthScriptRunner scriptRunner, LocalDirsHandlerService dirHandlerService)
specifier|public
name|NodeHealthCheckerService
parameter_list|(
name|NodeHealthScriptRunner
name|scriptRunner
parameter_list|,
name|LocalDirsHandlerService
name|dirHandlerService
parameter_list|)
block|{
name|super
argument_list|(
name|NodeHealthCheckerService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|nodeHealthScriptRunner
operator|=
name|scriptRunner
expr_stmt|;
name|dirsHandler
operator|=
name|dirHandlerService
expr_stmt|;
name|nodeHealthException
operator|=
literal|null
expr_stmt|;
name|nodeHealthExceptionReportTime
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|nodeHealthScriptRunner
operator|!=
literal|null
condition|)
block|{
name|addService
argument_list|(
name|nodeHealthScriptRunner
argument_list|)
expr_stmt|;
block|}
name|addService
argument_list|(
name|dirsHandler
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return the reporting string of health of the node    */
DECL|method|getHealthReport ()
name|String
name|getHealthReport
parameter_list|()
block|{
name|String
name|scriptReport
init|=
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|nodeHealthScriptRunner
operator|==
literal|null
condition|?
literal|null
else|:
name|nodeHealthScriptRunner
operator|.
name|getHealthReport
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|discReport
init|=
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|dirsHandler
operator|.
name|getDisksHealthReport
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|exceptionReport
init|=
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|nodeHealthException
operator|==
literal|null
condition|?
literal|null
else|:
name|nodeHealthException
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Joiner
operator|.
name|on
argument_list|(
name|SEPARATOR
argument_list|)
operator|.
name|skipNulls
argument_list|()
operator|.
name|join
argument_list|(
name|scriptReport
argument_list|,
name|discReport
argument_list|,
name|exceptionReport
argument_list|)
return|;
block|}
comment|/**    * @return<em>true</em> if the node is healthy    */
DECL|method|isHealthy ()
name|boolean
name|isHealthy
parameter_list|()
block|{
name|boolean
name|scriptHealthy
init|=
name|nodeHealthScriptRunner
operator|==
literal|null
operator|||
name|nodeHealthScriptRunner
operator|.
name|isHealthy
argument_list|()
decl_stmt|;
return|return
name|nodeHealthException
operator|==
literal|null
operator|&&
name|scriptHealthy
operator|&&
name|dirsHandler
operator|.
name|areDisksHealthy
argument_list|()
return|;
block|}
comment|/**    * @return when the last time the node health status is reported    */
DECL|method|getLastHealthReportTime ()
name|long
name|getLastHealthReportTime
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|max
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|dirsHandler
operator|.
name|getLastDisksCheckTime
argument_list|()
argument_list|,
name|nodeHealthScriptRunner
operator|==
literal|null
condition|?
literal|0
else|:
name|nodeHealthScriptRunner
operator|.
name|getLastReportedTime
argument_list|()
argument_list|,
name|nodeHealthExceptionReportTime
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @return the disk handler    */
DECL|method|getDiskHandler ()
specifier|public
name|LocalDirsHandlerService
name|getDiskHandler
parameter_list|()
block|{
return|return
name|dirsHandler
return|;
block|}
comment|/**    * @return the node health script runner    */
DECL|method|getNodeHealthScriptRunner ()
name|NodeHealthScriptRunner
name|getNodeHealthScriptRunner
parameter_list|()
block|{
return|return
name|nodeHealthScriptRunner
return|;
block|}
comment|/**    * Report an exception to mark the node as unhealthy.    * @param ex the exception that makes the node unhealthy    */
DECL|method|reportException (Exception ex)
name|void
name|reportException
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|nodeHealthException
operator|=
name|ex
expr_stmt|;
name|nodeHealthExceptionReportTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

