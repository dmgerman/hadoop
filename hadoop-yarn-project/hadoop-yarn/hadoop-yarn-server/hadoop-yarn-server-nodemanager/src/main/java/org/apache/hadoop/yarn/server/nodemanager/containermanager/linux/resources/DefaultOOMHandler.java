begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.resources
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|executor
operator|.
name|ContainerSignalContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|CGroupsHandler
operator|.
name|CGROUP_FILE_TASKS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|CGroupsHandler
operator|.
name|CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|CGroupsHandler
operator|.
name|CGROUP_PARAM_MEMORY_OOM_CONTROL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|CGroupsHandler
operator|.
name|CGROUP_PARAM_MEMORY_USAGE_BYTES
import|;
end_import

begin_comment
comment|/**  * A very basic OOM handler implementation.  * See the javadoc on the run() method for details.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|DefaultOOMHandler
specifier|public
class|class
name|DefaultOOMHandler
implements|implements
name|Runnable
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DefaultOOMHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|context
specifier|private
name|Context
name|context
decl_stmt|;
DECL|field|virtual
specifier|private
name|boolean
name|virtual
decl_stmt|;
DECL|field|cgroups
specifier|private
name|CGroupsHandler
name|cgroups
decl_stmt|;
comment|/**    * Create an OOM handler.    * This has to be public to be able to construct through reflection.    * @param context node manager context to work with    * @param testVirtual Test virtual memory or physical    */
DECL|method|DefaultOOMHandler (Context context, boolean testVirtual)
specifier|public
name|DefaultOOMHandler
parameter_list|(
name|Context
name|context
parameter_list|,
name|boolean
name|testVirtual
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|virtual
operator|=
name|testVirtual
expr_stmt|;
name|this
operator|.
name|cgroups
operator|=
name|ResourceHandlerModule
operator|.
name|getCGroupsHandler
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setCGroupsHandler (CGroupsHandler handler)
name|void
name|setCGroupsHandler
parameter_list|(
name|CGroupsHandler
name|handler
parameter_list|)
block|{
name|cgroups
operator|=
name|handler
expr_stmt|;
block|}
comment|/**    * Kill the container, if it has exceeded its request.    *    * @param container Container to check    * @param fileName  CGroup filename (physical or swap/virtual)    * @return true, if the container was preempted    */
DECL|method|killContainerIfOOM (Container container, String fileName)
specifier|private
name|boolean
name|killContainerIfOOM
parameter_list|(
name|Container
name|container
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
name|String
name|value
init|=
literal|null
decl_stmt|;
try|try
block|{
name|value
operator|=
name|cgroups
operator|.
name|getCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|MEMORY
argument_list|,
name|container
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|long
name|usage
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|long
name|request
init|=
name|container
operator|.
name|getResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|// Check if the container has exceeded its limits.
if|if
condition|(
name|usage
operator|>
name|request
condition|)
block|{
comment|// Kill the container
comment|// We could call the regular cleanup but that sends a
comment|// SIGTERM first that cannot be handled by frozen processes.
comment|// Walk through the cgroup
comment|// tasks file and kill all processes in it
name|sigKill
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Container %s was killed by elastic cgroups OOM handler using %d "
operator|+
literal|"when requested only %d"
argument_list|,
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|usage
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ResourceHandlerException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Could not access memory resource for %s"
argument_list|,
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Could not parse %s in %s"
argument_list|,
name|value
argument_list|,
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * SIGKILL the specified container. We do this not using the standard    * container logic. The reason is that the processes are frozen by    * the cgroups OOM handler, so they cannot respond to SIGTERM.    * On the other hand we have to be as fast as possible.    * We walk through the list of active processes in the container.    * This is needed because frozen parents cannot signal their children.    * We kill each process and then try again until the whole cgroup    * is cleaned up. This logic avoids leaking processes in a cgroup.    * Currently the killing only succeeds for PGIDS.    *    * @param container Container to clean up    */
DECL|method|sigKill (Container container)
specifier|private
name|void
name|sigKill
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
name|boolean
name|finished
init|=
literal|false
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|finished
condition|)
block|{
name|String
index|[]
name|pids
init|=
name|cgroups
operator|.
name|getCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|MEMORY
argument_list|,
name|container
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|CGROUP_FILE_TASKS
argument_list|)
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
name|finished
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|String
name|pid
range|:
name|pids
control|)
block|{
comment|// Note: this kills only PGIDs currently
if|if
condition|(
name|pid
operator|!=
literal|null
operator|&&
operator|!
name|pid
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Terminating container %s Sending SIGKILL to -%s"
argument_list|,
name|container
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|pid
argument_list|)
argument_list|)
expr_stmt|;
name|finished
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|context
operator|.
name|getContainerExecutor
argument_list|()
operator|.
name|signalContainer
argument_list|(
operator|new
name|ContainerSignalContext
operator|.
name|Builder
argument_list|()
operator|.
name|setContainer
argument_list|(
name|container
argument_list|)
operator|.
name|setUser
argument_list|(
name|container
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|setPid
argument_list|(
name|pid
argument_list|)
operator|.
name|setSignal
argument_list|(
name|ContainerExecutor
operator|.
name|Signal
operator|.
name|KILL
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot kill container %s pid -%s."
argument_list|,
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|pid
argument_list|)
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Interrupted while waiting for processes to disappear"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ResourceHandlerException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot list more tasks in container %s to kill."
argument_list|,
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * It is called when the node is under an OOM condition. All processes in    * all sub-cgroups are suspended. We need to act fast, so that we do not    * affect the overall system utilization.    * In general we try to find a newly run container that exceeded its limits.    * The justification is cost, since probably this is the one that has    * accumulated the least amount of uncommitted data so far.    * We continue the process until the OOM is resolved.    */
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// Reverse order by start time
name|Comparator
argument_list|<
name|Container
argument_list|>
name|comparator
init|=
parameter_list|(
name|Container
name|o1
parameter_list|,
name|Container
name|o2
parameter_list|)
lambda|->
block|{
name|long
name|order
init|=
name|o1
operator|.
name|getContainerStartTime
argument_list|()
operator|-
name|o2
operator|.
name|getContainerStartTime
argument_list|()
decl_stmt|;
return|return
name|order
operator|>
literal|0
condition|?
operator|-
literal|1
else|:
name|order
operator|<
literal|0
condition|?
literal|1
else|:
literal|0
return|;
block|}
decl_stmt|;
comment|// We kill containers until the kernel reports the OOM situation resolved
comment|// Note: If the kernel has a delay this may kill more than necessary
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|status
init|=
name|cgroups
operator|.
name|getCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|MEMORY
argument_list|,
literal|""
argument_list|,
name|CGROUP_PARAM_MEMORY_OOM_CONTROL
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|status
operator|.
name|contains
argument_list|(
name|CGroupsHandler
operator|.
name|UNDER_OOM
argument_list|)
condition|)
block|{
break|break;
block|}
comment|// The first pass kills a recent container
comment|// that uses more than its request
name|ArrayList
argument_list|<
name|Container
argument_list|>
name|containers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|containers
operator|.
name|addAll
argument_list|(
name|context
operator|.
name|getContainers
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
comment|// Note: Sorting may take a long time with 10K+ containers
comment|// but it is acceptable now with low number of containers per node
name|containers
operator|.
name|sort
argument_list|(
name|comparator
argument_list|)
expr_stmt|;
comment|// Kill the latest container that exceeded its request
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Container
name|container
range|:
name|containers
control|)
block|{
if|if
condition|(
operator|!
name|virtual
condition|)
block|{
if|if
condition|(
name|killContainerIfOOM
argument_list|(
name|container
argument_list|,
name|CGROUP_PARAM_MEMORY_USAGE_BYTES
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
if|if
condition|(
name|killContainerIfOOM
argument_list|(
name|container
argument_list|,
name|CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|found
condition|)
block|{
continue|continue;
block|}
comment|// We have not found any containers that ran out of their limit,
comment|// so we will kill the latest one. This can happen, if all use
comment|// close to their request and one of them requests a big block
comment|// triggering the OOM freeze.
comment|// Currently there is no other way to identify the outstanding one.
if|if
condition|(
name|containers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Container
name|container
init|=
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|sigKill
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Newest container %s killed by elastic cgroups OOM handler using"
argument_list|,
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// This can happen, if SIGKILL did not clean up
comment|// non-PGID or containers or containers launched by other users
comment|// or if a process was put to the root YARN cgroup.
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Could not find any containers but CGroups "
operator|+
literal|"reserved for containers ran out of memory. "
operator|+
literal|"I am giving up"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ResourceHandlerException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not fecth OOM status. "
operator|+
literal|"This is expected at shutdown. Exiting."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

