begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.logaggregation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|logaggregation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnsupportedFileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LogAggregationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LogAggregationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|AggregatedLogFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|AggregatedLogFormat
operator|.
name|LogKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|AggregatedLogFormat
operator|.
name|LogValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|filecontroller
operator|.
name|LogAggregationDFSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|filecontroller
operator|.
name|LogAggregationFileController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|filecontroller
operator|.
name|LogAggregationFileControllerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|filecontroller
operator|.
name|tfile
operator|.
name|LogAggregationTFileController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|LogAggregationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ContainerLogAggregationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ContainerLogContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ContainerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LogAggregationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DeletionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|LocalDirsHandlerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|deletion
operator|.
name|task
operator|.
name|DeletionTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|deletion
operator|.
name|task
operator|.
name|FileDeletionTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Times
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
DECL|class|AppLogAggregatorImpl
specifier|public
class|class
name|AppLogAggregatorImpl
implements|implements
name|AppLogAggregator
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AppLogAggregatorImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|THREAD_SLEEP_TIME
specifier|private
specifier|static
specifier|final
name|int
name|THREAD_SLEEP_TIME
init|=
literal|1000
decl_stmt|;
DECL|field|dirsHandler
specifier|private
specifier|final
name|LocalDirsHandlerService
name|dirsHandler
decl_stmt|;
DECL|field|dispatcher
specifier|private
specifier|final
name|Dispatcher
name|dispatcher
decl_stmt|;
DECL|field|appId
specifier|private
specifier|final
name|ApplicationId
name|appId
decl_stmt|;
DECL|field|applicationId
specifier|private
specifier|final
name|String
name|applicationId
decl_stmt|;
DECL|field|logAggregationDisabled
specifier|private
name|boolean
name|logAggregationDisabled
init|=
literal|false
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|delService
specifier|private
specifier|final
name|DeletionService
name|delService
decl_stmt|;
DECL|field|userUgi
specifier|private
specifier|final
name|UserGroupInformation
name|userUgi
decl_stmt|;
DECL|field|remoteNodeLogFileForApp
specifier|private
specifier|final
name|Path
name|remoteNodeLogFileForApp
decl_stmt|;
DECL|field|remoteNodeTmpLogFileForApp
specifier|private
specifier|final
name|Path
name|remoteNodeTmpLogFileForApp
decl_stmt|;
DECL|field|pendingContainers
specifier|private
specifier|final
name|BlockingQueue
argument_list|<
name|ContainerId
argument_list|>
name|pendingContainers
decl_stmt|;
DECL|field|appFinishing
specifier|private
specifier|final
name|AtomicBoolean
name|appFinishing
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|appAggregationFinished
specifier|private
specifier|final
name|AtomicBoolean
name|appAggregationFinished
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|aborted
specifier|private
specifier|final
name|AtomicBoolean
name|aborted
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|appAcls
specifier|private
specifier|final
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|appAcls
decl_stmt|;
DECL|field|lfs
specifier|private
specifier|final
name|FileContext
name|lfs
decl_stmt|;
DECL|field|logAggregationContext
specifier|private
specifier|final
name|LogAggregationContext
name|logAggregationContext
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|Context
name|context
decl_stmt|;
DECL|field|nodeId
specifier|private
specifier|final
name|NodeId
name|nodeId
decl_stmt|;
DECL|field|logControllerContext
specifier|private
specifier|final
name|LogAggregationFileControllerContext
name|logControllerContext
decl_stmt|;
comment|// These variables are only for testing
DECL|field|waiting
specifier|private
specifier|final
name|AtomicBoolean
name|waiting
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|logAggregationTimes
specifier|private
name|int
name|logAggregationTimes
init|=
literal|0
decl_stmt|;
DECL|field|cleanupOldLogTimes
specifier|private
name|int
name|cleanupOldLogTimes
init|=
literal|0
decl_stmt|;
DECL|field|renameTemporaryLogFileFailed
specifier|private
name|boolean
name|renameTemporaryLogFileFailed
init|=
literal|false
decl_stmt|;
DECL|field|containerLogAggregators
specifier|private
specifier|final
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|ContainerLogAggregator
argument_list|>
name|containerLogAggregators
init|=
operator|new
name|HashMap
argument_list|<
name|ContainerId
argument_list|,
name|ContainerLogAggregator
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|logAggPolicy
specifier|private
specifier|final
name|ContainerLogAggregationPolicy
name|logAggPolicy
decl_stmt|;
DECL|field|logAggregationFileController
specifier|private
specifier|final
name|LogAggregationFileController
name|logAggregationFileController
decl_stmt|;
comment|/**    * The value recovered from state store to determine the age of application    * log files if log retention is enabled. Files older than retention policy    * will not be uploaded but scheduled for cleaning up. -1 if not recovered.    */
DECL|field|recoveredLogInitedTime
specifier|private
specifier|final
name|long
name|recoveredLogInitedTime
decl_stmt|;
DECL|method|AppLogAggregatorImpl (Dispatcher dispatcher, DeletionService deletionService, Configuration conf, ApplicationId appId, UserGroupInformation userUgi, NodeId nodeId, LocalDirsHandlerService dirsHandler, Path remoteNodeLogFileForApp, Map<ApplicationAccessType, String> appAcls, LogAggregationContext logAggregationContext, Context context, FileContext lfs, long rollingMonitorInterval)
specifier|public
name|AppLogAggregatorImpl
parameter_list|(
name|Dispatcher
name|dispatcher
parameter_list|,
name|DeletionService
name|deletionService
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|UserGroupInformation
name|userUgi
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|LocalDirsHandlerService
name|dirsHandler
parameter_list|,
name|Path
name|remoteNodeLogFileForApp
parameter_list|,
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|appAcls
parameter_list|,
name|LogAggregationContext
name|logAggregationContext
parameter_list|,
name|Context
name|context
parameter_list|,
name|FileContext
name|lfs
parameter_list|,
name|long
name|rollingMonitorInterval
parameter_list|)
block|{
name|this
argument_list|(
name|dispatcher
argument_list|,
name|deletionService
argument_list|,
name|conf
argument_list|,
name|appId
argument_list|,
name|userUgi
argument_list|,
name|nodeId
argument_list|,
name|dirsHandler
argument_list|,
name|remoteNodeLogFileForApp
argument_list|,
name|appAcls
argument_list|,
name|logAggregationContext
argument_list|,
name|context
argument_list|,
name|lfs
argument_list|,
name|rollingMonitorInterval
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|AppLogAggregatorImpl (Dispatcher dispatcher, DeletionService deletionService, Configuration conf, ApplicationId appId, UserGroupInformation userUgi, NodeId nodeId, LocalDirsHandlerService dirsHandler, Path remoteNodeLogFileForApp, Map<ApplicationAccessType, String> appAcls, LogAggregationContext logAggregationContext, Context context, FileContext lfs, long rollingMonitorInterval, long recoveredLogInitedTime)
specifier|public
name|AppLogAggregatorImpl
parameter_list|(
name|Dispatcher
name|dispatcher
parameter_list|,
name|DeletionService
name|deletionService
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|UserGroupInformation
name|userUgi
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|LocalDirsHandlerService
name|dirsHandler
parameter_list|,
name|Path
name|remoteNodeLogFileForApp
parameter_list|,
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|appAcls
parameter_list|,
name|LogAggregationContext
name|logAggregationContext
parameter_list|,
name|Context
name|context
parameter_list|,
name|FileContext
name|lfs
parameter_list|,
name|long
name|rollingMonitorInterval
parameter_list|,
name|long
name|recoveredLogInitedTime
parameter_list|)
block|{
name|this
argument_list|(
name|dispatcher
argument_list|,
name|deletionService
argument_list|,
name|conf
argument_list|,
name|appId
argument_list|,
name|userUgi
argument_list|,
name|nodeId
argument_list|,
name|dirsHandler
argument_list|,
name|remoteNodeLogFileForApp
argument_list|,
name|appAcls
argument_list|,
name|logAggregationContext
argument_list|,
name|context
argument_list|,
name|lfs
argument_list|,
name|rollingMonitorInterval
argument_list|,
name|recoveredLogInitedTime
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|AppLogAggregatorImpl (Dispatcher dispatcher, DeletionService deletionService, Configuration conf, ApplicationId appId, UserGroupInformation userUgi, NodeId nodeId, LocalDirsHandlerService dirsHandler, Path remoteNodeLogFileForApp, Map<ApplicationAccessType, String> appAcls, LogAggregationContext logAggregationContext, Context context, FileContext lfs, long rollingMonitorInterval, long recoveredLogInitedTime, LogAggregationFileController logAggregationFileController)
specifier|public
name|AppLogAggregatorImpl
parameter_list|(
name|Dispatcher
name|dispatcher
parameter_list|,
name|DeletionService
name|deletionService
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|UserGroupInformation
name|userUgi
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|LocalDirsHandlerService
name|dirsHandler
parameter_list|,
name|Path
name|remoteNodeLogFileForApp
parameter_list|,
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|appAcls
parameter_list|,
name|LogAggregationContext
name|logAggregationContext
parameter_list|,
name|Context
name|context
parameter_list|,
name|FileContext
name|lfs
parameter_list|,
name|long
name|rollingMonitorInterval
parameter_list|,
name|long
name|recoveredLogInitedTime
parameter_list|,
name|LogAggregationFileController
name|logAggregationFileController
parameter_list|)
block|{
name|this
operator|.
name|dispatcher
operator|=
name|dispatcher
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|delService
operator|=
name|deletionService
expr_stmt|;
name|this
operator|.
name|appId
operator|=
name|appId
expr_stmt|;
name|this
operator|.
name|applicationId
operator|=
name|appId
operator|.
name|toString
argument_list|()
expr_stmt|;
name|this
operator|.
name|userUgi
operator|=
name|userUgi
expr_stmt|;
name|this
operator|.
name|dirsHandler
operator|=
name|dirsHandler
expr_stmt|;
name|this
operator|.
name|pendingContainers
operator|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|appAcls
operator|=
name|appAcls
expr_stmt|;
name|this
operator|.
name|lfs
operator|=
name|lfs
expr_stmt|;
name|this
operator|.
name|logAggregationContext
operator|=
name|logAggregationContext
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
name|this
operator|.
name|logAggPolicy
operator|=
name|getLogAggPolicy
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|recoveredLogInitedTime
operator|=
name|recoveredLogInitedTime
expr_stmt|;
if|if
condition|(
name|logAggregationFileController
operator|==
literal|null
condition|)
block|{
comment|// by default, use T-File Controller
name|this
operator|.
name|logAggregationFileController
operator|=
operator|new
name|LogAggregationTFileController
argument_list|()
expr_stmt|;
name|this
operator|.
name|logAggregationFileController
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|"TFile"
argument_list|)
expr_stmt|;
name|this
operator|.
name|logAggregationFileController
operator|.
name|verifyAndCreateRemoteLogDir
argument_list|()
expr_stmt|;
name|this
operator|.
name|logAggregationFileController
operator|.
name|createAppDir
argument_list|(
name|this
operator|.
name|userUgi
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|appId
argument_list|,
name|userUgi
argument_list|)
expr_stmt|;
name|this
operator|.
name|remoteNodeLogFileForApp
operator|=
name|this
operator|.
name|logAggregationFileController
operator|.
name|getRemoteNodeLogFileForApp
argument_list|(
name|appId
argument_list|,
name|this
operator|.
name|userUgi
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
name|this
operator|.
name|remoteNodeTmpLogFileForApp
operator|=
name|getRemoteNodeTmpLogFileForApp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|logAggregationFileController
operator|=
name|logAggregationFileController
expr_stmt|;
name|this
operator|.
name|remoteNodeLogFileForApp
operator|=
name|remoteNodeLogFileForApp
expr_stmt|;
name|this
operator|.
name|remoteNodeTmpLogFileForApp
operator|=
name|getRemoteNodeTmpLogFileForApp
argument_list|()
expr_stmt|;
block|}
name|boolean
name|logAggregationInRolling
init|=
name|rollingMonitorInterval
operator|<=
literal|0
operator|||
name|this
operator|.
name|logAggregationContext
operator|==
literal|null
operator|||
name|this
operator|.
name|logAggregationContext
operator|.
name|getRolledLogsIncludePattern
argument_list|()
operator|==
literal|null
operator|||
name|this
operator|.
name|logAggregationContext
operator|.
name|getRolledLogsIncludePattern
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|false
else|:
literal|true
decl_stmt|;
name|logControllerContext
operator|=
operator|new
name|LogAggregationFileControllerContext
argument_list|(
name|this
operator|.
name|remoteNodeLogFileForApp
argument_list|,
name|this
operator|.
name|remoteNodeTmpLogFileForApp
argument_list|,
name|logAggregationInRolling
argument_list|,
name|rollingMonitorInterval
argument_list|,
name|this
operator|.
name|appId
argument_list|,
name|this
operator|.
name|appAcls
argument_list|,
name|this
operator|.
name|nodeId
argument_list|,
name|this
operator|.
name|userUgi
argument_list|)
expr_stmt|;
block|}
DECL|method|getLogAggPolicy (Configuration conf)
specifier|private
name|ContainerLogAggregationPolicy
name|getLogAggPolicy
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|ContainerLogAggregationPolicy
name|policy
init|=
name|getLogAggPolicyInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|params
init|=
name|getLogAggPolicyParameters
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|policy
operator|.
name|parseParameters
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
return|return
name|policy
return|;
block|}
comment|// Use the policy class specified in LogAggregationContext if available.
comment|// Otherwise use the cluster-wide default policy class.
DECL|method|getLogAggPolicyInstance ( Configuration conf)
specifier|private
name|ContainerLogAggregationPolicy
name|getLogAggPolicyInstance
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|ContainerLogAggregationPolicy
argument_list|>
name|policyClass
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|logAggregationContext
operator|!=
literal|null
condition|)
block|{
name|String
name|className
init|=
name|this
operator|.
name|logAggregationContext
operator|.
name|getLogAggregationPolicyClassName
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|policyFromContext
init|=
name|conf
operator|.
name|getClassByName
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|ContainerLogAggregationPolicy
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|policyFromContext
argument_list|)
condition|)
block|{
name|policyClass
operator|=
name|policyFromContext
operator|.
name|asSubclass
argument_list|(
name|ContainerLogAggregationPolicy
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|this
operator|.
name|appId
operator|+
literal|" specified invalid log aggregation policy "
operator|+
name|className
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
comment|// We don't fail the app if the policy class isn't valid.
name|LOG
operator|.
name|warn
argument_list|(
name|this
operator|.
name|appId
operator|+
literal|" specified invalid log aggregation policy "
operator|+
name|className
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|policyClass
operator|==
literal|null
condition|)
block|{
name|policyClass
operator|=
name|conf
operator|.
name|getClass
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_AGG_POLICY_CLASS
argument_list|,
name|AllContainerLogAggregationPolicy
operator|.
name|class
argument_list|,
name|ContainerLogAggregationPolicy
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|this
operator|.
name|appId
operator|+
literal|" specifies ContainerLogAggregationPolicy of "
operator|+
name|policyClass
argument_list|)
expr_stmt|;
block|}
return|return
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|policyClass
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|// Use the policy parameters specified in LogAggregationContext if available.
comment|// Otherwise use the cluster-wide default policy parameters.
DECL|method|getLogAggPolicyParameters (Configuration conf)
specifier|private
name|String
name|getLogAggPolicyParameters
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|params
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|logAggregationContext
operator|!=
literal|null
condition|)
block|{
name|params
operator|=
name|this
operator|.
name|logAggregationContext
operator|.
name|getLogAggregationPolicyParameters
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|==
literal|null
condition|)
block|{
name|params
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_AGG_POLICY_CLASS_PARAMETERS
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
DECL|method|uploadLogsForContainers (boolean appFinished)
specifier|private
name|void
name|uploadLogsForContainers
parameter_list|(
name|boolean
name|appFinished
parameter_list|)
throws|throws
name|LogAggregationDFSException
block|{
if|if
condition|(
name|this
operator|.
name|logAggregationDisabled
condition|)
block|{
return|return;
block|}
name|addCredentials
argument_list|()
expr_stmt|;
comment|// Create a set of Containers whose logs will be uploaded in this cycle.
comment|// It includes:
comment|// a) all containers in pendingContainers: those containers are finished
comment|//    and satisfy the ContainerLogAggregationPolicy.
comment|// b) some set of running containers: For all the Running containers,
comment|//    we use exitCode of 0 to find those which satisfy the
comment|//    ContainerLogAggregationPolicy.
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|pendingContainerInThisCycle
init|=
operator|new
name|HashSet
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
name|this
operator|.
name|pendingContainers
operator|.
name|drainTo
argument_list|(
name|pendingContainerInThisCycle
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|finishedContainers
init|=
operator|new
name|HashSet
argument_list|<
name|ContainerId
argument_list|>
argument_list|(
name|pendingContainerInThisCycle
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|get
argument_list|(
name|this
operator|.
name|appId
argument_list|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Container
name|container
range|:
name|this
operator|.
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|get
argument_list|(
name|this
operator|.
name|appId
argument_list|)
operator|.
name|getContainers
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|ContainerType
name|containerType
init|=
name|container
operator|.
name|getContainerTokenIdentifier
argument_list|()
operator|.
name|getContainerType
argument_list|()
decl_stmt|;
if|if
condition|(
name|shouldUploadLogs
argument_list|(
operator|new
name|ContainerLogContext
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|containerType
argument_list|,
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|pendingContainerInThisCycle
operator|.
name|add
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|pendingContainerInThisCycle
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sendLogAggregationReport
argument_list|(
literal|true
argument_list|,
literal|""
argument_list|,
name|appFinished
argument_list|)
expr_stmt|;
return|return;
block|}
name|logAggregationTimes
operator|++
expr_stmt|;
name|String
name|diagnosticMessage
init|=
literal|""
decl_stmt|;
name|boolean
name|logAggregationSucceedInThisCycle
init|=
literal|true
decl_stmt|;
name|DeletionTask
name|deletionTask
init|=
literal|null
decl_stmt|;
try|try
block|{
try|try
block|{
name|logAggregationFileController
operator|.
name|initializeWriter
argument_list|(
name|logControllerContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|logAggregationSucceedInThisCycle
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot create writer for app "
operator|+
name|this
operator|.
name|applicationId
operator|+
literal|". Skip log upload this time. "
argument_list|,
name|e1
argument_list|)
expr_stmt|;
return|return;
block|}
name|boolean
name|uploadedLogsInThisCycle
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ContainerId
name|container
range|:
name|pendingContainerInThisCycle
control|)
block|{
name|ContainerLogAggregator
name|aggregator
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|containerLogAggregators
operator|.
name|containsKey
argument_list|(
name|container
argument_list|)
condition|)
block|{
name|aggregator
operator|=
name|containerLogAggregators
operator|.
name|get
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|aggregator
operator|=
operator|new
name|ContainerLogAggregator
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|containerLogAggregators
operator|.
name|put
argument_list|(
name|container
argument_list|,
name|aggregator
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Path
argument_list|>
name|uploadedFilePathsInThisCycle
init|=
name|aggregator
operator|.
name|doContainerLogAggregation
argument_list|(
name|logAggregationFileController
argument_list|,
name|appFinished
argument_list|,
name|finishedContainers
operator|.
name|contains
argument_list|(
name|container
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|uploadedFilePathsInThisCycle
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|uploadedLogsInThisCycle
operator|=
literal|true
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|uploadedFilePathsInThisCycleList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|uploadedFilePathsInThisCycleList
operator|.
name|addAll
argument_list|(
name|uploadedFilePathsInThisCycle
argument_list|)
expr_stmt|;
name|deletionTask
operator|=
operator|new
name|FileDeletionTask
argument_list|(
name|delService
argument_list|,
name|this
operator|.
name|userUgi
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|uploadedFilePathsInThisCycleList
argument_list|)
expr_stmt|;
block|}
comment|// This container is finished, and all its logs have been uploaded,
comment|// remove it from containerLogAggregators.
if|if
condition|(
name|finishedContainers
operator|.
name|contains
argument_list|(
name|container
argument_list|)
condition|)
block|{
name|containerLogAggregators
operator|.
name|remove
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
block|}
name|logControllerContext
operator|.
name|setUploadedLogsInThisCycle
argument_list|(
name|uploadedLogsInThisCycle
argument_list|)
expr_stmt|;
name|logControllerContext
operator|.
name|setLogUploadTimeStamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|logControllerContext
operator|.
name|increLogAggregationTimes
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|logAggregationFileController
operator|.
name|postWrite
argument_list|(
name|logControllerContext
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|=
literal|"Log uploaded successfully for Application: "
operator|+
name|appId
operator|+
literal|" in NodeManager: "
operator|+
name|LogAggregationUtils
operator|.
name|getNodeString
argument_list|(
name|nodeId
argument_list|)
operator|+
literal|" at "
operator|+
name|Times
operator|.
name|format
argument_list|(
name|logControllerContext
operator|.
name|getLogUploadTimeStamp
argument_list|()
argument_list|)
operator|+
literal|"\n"
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|diagnosticMessage
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|renameTemporaryLogFileFailed
operator|=
literal|true
expr_stmt|;
name|logAggregationSucceedInThisCycle
operator|=
literal|false
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|LogAggregationDFSException
name|exc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|this
operator|.
name|logAggregationFileController
operator|.
name|closeWriter
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LogAggregationDFSException
name|e
parameter_list|)
block|{
name|diagnosticMessage
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|renameTemporaryLogFileFailed
operator|=
literal|true
expr_stmt|;
name|logAggregationSucceedInThisCycle
operator|=
literal|false
expr_stmt|;
name|exc
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
name|logAggregationSucceedInThisCycle
operator|&&
name|deletionTask
operator|!=
literal|null
condition|)
block|{
name|delService
operator|.
name|delete
argument_list|(
name|deletionTask
argument_list|)
expr_stmt|;
block|}
name|sendLogAggregationReport
argument_list|(
name|logAggregationSucceedInThisCycle
argument_list|,
name|diagnosticMessage
argument_list|,
name|appFinished
argument_list|)
expr_stmt|;
if|if
condition|(
name|exc
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exc
throw|;
block|}
block|}
block|}
DECL|method|addCredentials ()
specifier|private
name|void
name|addCredentials
parameter_list|()
block|{
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|Credentials
name|systemCredentials
init|=
name|context
operator|.
name|getSystemCredentialsForApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|systemCredentials
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding new framework-token for "
operator|+
name|appId
operator|+
literal|" for log-aggregation: "
operator|+
name|systemCredentials
operator|.
name|getAllTokens
argument_list|()
operator|+
literal|"; userUgi="
operator|+
name|userUgi
argument_list|)
expr_stmt|;
block|}
comment|// this will replace old token
name|userUgi
operator|.
name|addCredentials
argument_list|(
name|systemCredentials
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|sendLogAggregationReport ( boolean logAggregationSucceedInThisCycle, String diagnosticMessage, boolean appFinished)
specifier|private
name|void
name|sendLogAggregationReport
parameter_list|(
name|boolean
name|logAggregationSucceedInThisCycle
parameter_list|,
name|String
name|diagnosticMessage
parameter_list|,
name|boolean
name|appFinished
parameter_list|)
block|{
name|LogAggregationStatus
name|logAggregationStatus
init|=
name|logAggregationSucceedInThisCycle
condition|?
name|LogAggregationStatus
operator|.
name|RUNNING
else|:
name|LogAggregationStatus
operator|.
name|RUNNING_WITH_FAILURE
decl_stmt|;
name|sendLogAggregationReportInternal
argument_list|(
name|logAggregationStatus
argument_list|,
name|diagnosticMessage
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|appFinished
condition|)
block|{
comment|// If the app is finished, one extra final report with log aggregation
comment|// status SUCCEEDED/FAILED will be sent to RM to inform the RM
comment|// that the log aggregation in this NM is completed.
name|LogAggregationStatus
name|finalLogAggregationStatus
init|=
name|renameTemporaryLogFileFailed
operator|||
operator|!
name|logAggregationSucceedInThisCycle
condition|?
name|LogAggregationStatus
operator|.
name|FAILED
else|:
name|LogAggregationStatus
operator|.
name|SUCCEEDED
decl_stmt|;
name|sendLogAggregationReportInternal
argument_list|(
name|finalLogAggregationStatus
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sendLogAggregationReportInternal ( LogAggregationStatus logAggregationStatus, String diagnosticMessage, boolean finalized)
specifier|private
name|void
name|sendLogAggregationReportInternal
parameter_list|(
name|LogAggregationStatus
name|logAggregationStatus
parameter_list|,
name|String
name|diagnosticMessage
parameter_list|,
name|boolean
name|finalized
parameter_list|)
block|{
name|LogAggregationReport
name|report
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|LogAggregationReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|report
operator|.
name|setApplicationId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|report
operator|.
name|setDiagnosticMessage
argument_list|(
name|diagnosticMessage
argument_list|)
expr_stmt|;
name|report
operator|.
name|setLogAggregationStatus
argument_list|(
name|logAggregationStatus
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|.
name|getLogAggregationStatusForApps
argument_list|()
operator|.
name|add
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|.
name|getNMLogAggregationStatusTracker
argument_list|()
operator|.
name|updateLogAggregationStatus
argument_list|(
name|appId
argument_list|,
name|logAggregationStatus
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|diagnosticMessage
argument_list|,
name|finalized
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|doAppLogAggregation
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LogAggregationDFSException
name|e
parameter_list|)
block|{
comment|// if the log aggregation could not be performed due to DFS issues
comment|// let's not clean up the log files, since that can result in
comment|// loss of logs
name|LOG
operator|.
name|error
argument_list|(
literal|"Error occurred while aggregating the log for the application "
operator|+
name|appId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// do post clean up of log directories on any other exception
name|LOG
operator|.
name|error
argument_list|(
literal|"Error occurred while aggregating the log for the application "
operator|+
name|appId
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|doAppLogAggregationPostCleanUp
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|appAggregationFinished
operator|.
name|get
argument_list|()
operator|&&
operator|!
name|this
operator|.
name|aborted
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Log aggregation did not complete for application "
operator|+
name|appId
argument_list|)
expr_stmt|;
name|this
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationEvent
argument_list|(
name|this
operator|.
name|appId
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_FAILED
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|appAggregationFinished
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doAppLogAggregation ()
specifier|private
name|void
name|doAppLogAggregation
parameter_list|()
throws|throws
name|LogAggregationDFSException
block|{
while|while
condition|(
operator|!
name|this
operator|.
name|appFinishing
operator|.
name|get
argument_list|()
operator|&&
operator|!
name|this
operator|.
name|aborted
operator|.
name|get
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
try|try
block|{
name|waiting
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|logControllerContext
operator|.
name|isLogAggregationInRolling
argument_list|()
condition|)
block|{
name|wait
argument_list|(
name|logControllerContext
operator|.
name|getRollingMonitorInterval
argument_list|()
operator|*
literal|1000
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|appFinishing
operator|.
name|get
argument_list|()
operator|||
name|this
operator|.
name|aborted
operator|.
name|get
argument_list|()
condition|)
block|{
break|break;
block|}
name|uploadLogsForContainers
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|wait
argument_list|(
name|THREAD_SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"PendingContainers queue is interrupted"
argument_list|)
expr_stmt|;
name|this
operator|.
name|appFinishing
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LogAggregationDFSException
name|e
parameter_list|)
block|{
name|this
operator|.
name|appFinishing
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
if|if
condition|(
name|this
operator|.
name|aborted
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
try|try
block|{
comment|// App is finished, upload the container logs.
name|uploadLogsForContainers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|doAppLogAggregationPostCleanUp
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LogAggregationDFSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during log aggregation"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationEvent
argument_list|(
name|this
operator|.
name|appId
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_FINISHED
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|appAggregationFinished
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|doAppLogAggregationPostCleanUp ()
specifier|private
name|void
name|doAppLogAggregationPostCleanUp
parameter_list|()
block|{
comment|// Remove the local app-log-dirs
name|List
argument_list|<
name|Path
argument_list|>
name|localAppLogDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|rootLogDir
range|:
name|dirsHandler
operator|.
name|getLogDirsForCleanup
argument_list|()
control|)
block|{
name|Path
name|logPath
init|=
operator|new
name|Path
argument_list|(
name|rootLogDir
argument_list|,
name|applicationId
argument_list|)
decl_stmt|;
try|try
block|{
comment|// check if log dir exists
name|lfs
operator|.
name|getFileStatus
argument_list|(
name|logPath
argument_list|)
expr_stmt|;
name|localAppLogDirs
operator|.
name|add
argument_list|(
name|logPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedFileSystemException
name|ue
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Log dir "
operator|+
name|rootLogDir
operator|+
literal|"is an unsupported file system"
argument_list|,
name|ue
argument_list|)
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
name|IOException
name|fe
parameter_list|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|localAppLogDirs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|localAppLogDirsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|localAppLogDirsList
operator|.
name|addAll
argument_list|(
name|localAppLogDirs
argument_list|)
expr_stmt|;
name|DeletionTask
name|deletionTask
init|=
operator|new
name|FileDeletionTask
argument_list|(
name|delService
argument_list|,
name|this
operator|.
name|userUgi
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|localAppLogDirsList
argument_list|)
decl_stmt|;
name|this
operator|.
name|delService
operator|.
name|delete
argument_list|(
name|deletionTask
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getRemoteNodeTmpLogFileForApp ()
specifier|private
name|Path
name|getRemoteNodeTmpLogFileForApp
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
name|remoteNodeLogFileForApp
operator|.
name|getParent
argument_list|()
argument_list|,
operator|(
name|remoteNodeLogFileForApp
operator|.
name|getName
argument_list|()
operator|+
name|LogAggregationUtils
operator|.
name|TMP_FILE_SUFFIX
operator|)
argument_list|)
return|;
block|}
DECL|method|shouldUploadLogs (ContainerLogContext logContext)
specifier|private
name|boolean
name|shouldUploadLogs
parameter_list|(
name|ContainerLogContext
name|logContext
parameter_list|)
block|{
return|return
name|logAggPolicy
operator|.
name|shouldDoLogAggregation
argument_list|(
name|logContext
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|startContainerLogAggregation (ContainerLogContext logContext)
specifier|public
name|void
name|startContainerLogAggregation
parameter_list|(
name|ContainerLogContext
name|logContext
parameter_list|)
block|{
if|if
condition|(
name|shouldUploadLogs
argument_list|(
name|logContext
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Considering container "
operator|+
name|logContext
operator|.
name|getContainerId
argument_list|()
operator|+
literal|" for log-aggregation"
argument_list|)
expr_stmt|;
name|this
operator|.
name|pendingContainers
operator|.
name|add
argument_list|(
name|logContext
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|finishLogAggregation ()
specifier|public
specifier|synchronized
name|void
name|finishLogAggregation
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Application just finished : "
operator|+
name|this
operator|.
name|applicationId
argument_list|)
expr_stmt|;
name|this
operator|.
name|appFinishing
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|abortLogAggregation ()
specifier|public
specifier|synchronized
name|void
name|abortLogAggregation
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Aborting log aggregation for "
operator|+
name|this
operator|.
name|applicationId
argument_list|)
expr_stmt|;
name|this
operator|.
name|aborted
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|disableLogAggregation ()
specifier|public
name|void
name|disableLogAggregation
parameter_list|()
block|{
name|this
operator|.
name|logAggregationDisabled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|enableLogAggregation ()
specifier|public
name|void
name|enableLogAggregation
parameter_list|()
block|{
name|this
operator|.
name|logAggregationDisabled
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isAggregationEnabled ()
specifier|public
name|boolean
name|isAggregationEnabled
parameter_list|()
block|{
return|return
operator|!
name|logAggregationDisabled
return|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
comment|// This is only used for testing.
comment|// This will wake the log aggregation thread that is waiting for
comment|// rollingMonitorInterval.
comment|// To use this method, make sure the log aggregation thread is running
comment|// and waiting for rollingMonitorInterval.
DECL|method|doLogAggregationOutOfBand ()
specifier|public
specifier|synchronized
name|void
name|doLogAggregationOutOfBand
parameter_list|()
block|{
while|while
condition|(
operator|!
name|waiting
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
name|wait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Do Nothing
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Do OutOfBand log aggregation"
argument_list|)
expr_stmt|;
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
DECL|class|ContainerLogAggregator
class|class
name|ContainerLogAggregator
block|{
DECL|field|retentionContext
specifier|private
specifier|final
name|AggregatedLogFormat
operator|.
name|LogRetentionContext
name|retentionContext
decl_stmt|;
DECL|field|containerId
specifier|private
specifier|final
name|ContainerId
name|containerId
decl_stmt|;
DECL|field|uploadedFileMeta
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|uploadedFileMeta
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|ContainerLogAggregator (ContainerId containerId)
specifier|public
name|ContainerLogAggregator
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
name|this
operator|.
name|retentionContext
operator|=
name|getRetentionContext
argument_list|()
expr_stmt|;
block|}
DECL|method|getRetentionContext ()
specifier|private
name|AggregatedLogFormat
operator|.
name|LogRetentionContext
name|getRetentionContext
parameter_list|()
block|{
specifier|final
name|long
name|logRetentionSecs
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_RETAIN_SECONDS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_LOG_AGGREGATION_RETAIN_SECONDS
argument_list|)
decl_stmt|;
return|return
operator|new
name|AggregatedLogFormat
operator|.
name|LogRetentionContext
argument_list|(
name|recoveredLogInitedTime
argument_list|,
name|logRetentionSecs
operator|*
literal|1000
argument_list|)
return|;
block|}
DECL|method|doContainerLogAggregation ( LogAggregationFileController logAggregationFileController, boolean appFinished, boolean containerFinished)
specifier|public
name|Set
argument_list|<
name|Path
argument_list|>
name|doContainerLogAggregation
parameter_list|(
name|LogAggregationFileController
name|logAggregationFileController
parameter_list|,
name|boolean
name|appFinished
parameter_list|,
name|boolean
name|containerFinished
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Uploading logs for container "
operator|+
name|containerId
operator|+
literal|". Current good log dirs are "
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|dirsHandler
operator|.
name|getLogDirsForRead
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|LogKey
name|logKey
init|=
operator|new
name|LogKey
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
specifier|final
name|LogValue
name|logValue
init|=
operator|new
name|LogValue
argument_list|(
name|dirsHandler
operator|.
name|getLogDirsForRead
argument_list|()
argument_list|,
name|containerId
argument_list|,
name|userUgi
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|logAggregationContext
argument_list|,
name|this
operator|.
name|uploadedFileMeta
argument_list|,
name|retentionContext
argument_list|,
name|appFinished
argument_list|,
name|containerFinished
argument_list|)
decl_stmt|;
try|try
block|{
name|logAggregationFileController
operator|.
name|write
argument_list|(
name|logKey
argument_list|,
name|logValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't upload logs for "
operator|+
name|containerId
operator|+
literal|". Skipping this container."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|HashSet
argument_list|<
name|Path
argument_list|>
argument_list|()
return|;
block|}
name|this
operator|.
name|uploadedFileMeta
operator|.
name|addAll
argument_list|(
name|logValue
operator|.
name|getCurrentUpLoadedFileMeta
argument_list|()
argument_list|)
expr_stmt|;
comment|// if any of the previous uploaded logs have been deleted,
comment|// we need to remove them from alreadyUploadedLogs
name|Iterable
argument_list|<
name|String
argument_list|>
name|mask
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|uploadedFileMeta
argument_list|,
operator|new
name|Predicate
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|next
parameter_list|)
block|{
return|return
name|logValue
operator|.
name|getAllExistingFilesMeta
argument_list|()
operator|.
name|contains
argument_list|(
name|next
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|this
operator|.
name|uploadedFileMeta
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|mask
argument_list|)
expr_stmt|;
comment|// need to return files uploaded or older-than-retention clean up.
return|return
name|Sets
operator|.
name|union
argument_list|(
name|logValue
operator|.
name|getCurrentUpLoadedFilesPath
argument_list|()
argument_list|,
name|logValue
operator|.
name|getObsoleteRetentionLogFiles
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|// only for test
annotation|@
name|VisibleForTesting
DECL|method|getUgi ()
specifier|public
name|UserGroupInformation
name|getUgi
parameter_list|()
block|{
return|return
name|this
operator|.
name|userUgi
return|;
block|}
DECL|method|updateCredentials (Credentials cred)
specifier|public
name|UserGroupInformation
name|updateCredentials
parameter_list|(
name|Credentials
name|cred
parameter_list|)
block|{
name|this
operator|.
name|userUgi
operator|.
name|addCredentials
argument_list|(
name|cred
argument_list|)
expr_stmt|;
return|return
name|userUgi
return|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|getLogAggregationTimes ()
specifier|public
name|int
name|getLogAggregationTimes
parameter_list|()
block|{
return|return
name|this
operator|.
name|logAggregationTimes
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getCleanupOldLogTimes ()
name|int
name|getCleanupOldLogTimes
parameter_list|()
block|{
return|return
name|this
operator|.
name|cleanupOldLogTimes
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getLogAggregationFileController ()
specifier|public
name|LogAggregationFileController
name|getLogAggregationFileController
parameter_list|()
block|{
return|return
name|this
operator|.
name|logAggregationFileController
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|LogAggregationFileControllerContext
DECL|method|getLogAggregationFileControllerContext ()
name|getLogAggregationFileControllerContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|logControllerContext
return|;
block|}
block|}
end_class

end_unit

