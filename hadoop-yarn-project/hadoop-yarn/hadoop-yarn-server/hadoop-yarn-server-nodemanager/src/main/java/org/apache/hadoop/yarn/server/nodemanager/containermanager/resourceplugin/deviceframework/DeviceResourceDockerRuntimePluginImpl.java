begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.deviceframework
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|deviceframework
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|Device
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|DevicePlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|DeviceRuntimeSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|MountDeviceSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|MountVolumeSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|VolumeSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|YarnRuntimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|docker
operator|.
name|DockerRunCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|docker
operator|.
name|DockerVolumeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|DockerCommandPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|runtime
operator|.
name|ContainerExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|LRUCacheHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Bridge DevicePlugin and the hooks related to lunch Docker container.  * When launching Docker container, DockerLinuxContainerRuntime will invoke  * this class's methods which get needed info back from DevicePlugin.  * */
end_comment

begin_class
DECL|class|DeviceResourceDockerRuntimePluginImpl
specifier|public
class|class
name|DeviceResourceDockerRuntimePluginImpl
implements|implements
name|DockerCommandPlugin
block|{
DECL|field|LOG
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DeviceResourceDockerRuntimePluginImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|resourceName
specifier|private
name|String
name|resourceName
decl_stmt|;
DECL|field|devicePlugin
specifier|private
name|DevicePlugin
name|devicePlugin
decl_stmt|;
DECL|field|devicePluginAdapter
specifier|private
name|DevicePluginAdapter
name|devicePluginAdapter
decl_stmt|;
DECL|field|maxCacheSize
specifier|private
name|int
name|maxCacheSize
init|=
literal|100
decl_stmt|;
comment|// LRU to avoid memory leak if getCleanupDockerVolumesCommand not invoked.
DECL|field|cachedAllocation
specifier|private
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|Set
argument_list|<
name|Device
argument_list|>
argument_list|>
name|cachedAllocation
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|LRUCacheHashMap
argument_list|(
name|maxCacheSize
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|cachedSpec
specifier|private
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|DeviceRuntimeSpec
argument_list|>
name|cachedSpec
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|LRUCacheHashMap
argument_list|<>
argument_list|(
name|maxCacheSize
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
DECL|method|DeviceResourceDockerRuntimePluginImpl (String resourceName, DevicePlugin devicePlugin, DevicePluginAdapter devicePluginAdapter)
specifier|public
name|DeviceResourceDockerRuntimePluginImpl
parameter_list|(
name|String
name|resourceName
parameter_list|,
name|DevicePlugin
name|devicePlugin
parameter_list|,
name|DevicePluginAdapter
name|devicePluginAdapter
parameter_list|)
block|{
name|this
operator|.
name|resourceName
operator|=
name|resourceName
expr_stmt|;
name|this
operator|.
name|devicePlugin
operator|=
name|devicePlugin
expr_stmt|;
name|this
operator|.
name|devicePluginAdapter
operator|=
name|devicePluginAdapter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateDockerRunCommand (DockerRunCommand dockerRunCommand, Container container)
specifier|public
name|void
name|updateDockerRunCommand
parameter_list|(
name|DockerRunCommand
name|dockerRunCommand
parameter_list|,
name|Container
name|container
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
name|String
name|containerId
init|=
name|container
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Try to update docker run command for: {}"
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|requestedDevice
argument_list|(
name|resourceName
argument_list|,
name|container
argument_list|)
condition|)
block|{
return|return;
block|}
name|DeviceRuntimeSpec
name|deviceRuntimeSpec
init|=
name|getRuntimeSpec
argument_list|(
name|container
argument_list|)
decl_stmt|;
if|if
condition|(
name|deviceRuntimeSpec
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The device plugin: "
operator|+
name|devicePlugin
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|" returns null device runtime spec value for container: "
operator|+
name|containerId
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// handle runtime
name|dockerRunCommand
operator|.
name|addRuntime
argument_list|(
name|deviceRuntimeSpec
operator|.
name|getContainerRuntime
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Handle docker container runtime type: {} for container: {}"
argument_list|,
name|deviceRuntimeSpec
operator|.
name|getContainerRuntime
argument_list|()
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
comment|// handle device mounts
name|Set
argument_list|<
name|MountDeviceSpec
argument_list|>
name|deviceMounts
init|=
name|deviceRuntimeSpec
operator|.
name|getDeviceMounts
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Handle device mounts: {} for container: {}"
argument_list|,
name|deviceMounts
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
for|for
control|(
name|MountDeviceSpec
name|mountDeviceSpec
range|:
name|deviceMounts
control|)
block|{
name|dockerRunCommand
operator|.
name|addDevice
argument_list|(
name|mountDeviceSpec
operator|.
name|getDevicePathInHost
argument_list|()
argument_list|,
name|mountDeviceSpec
operator|.
name|getDevicePathInContainer
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// handle volume mounts
name|Set
argument_list|<
name|MountVolumeSpec
argument_list|>
name|mountVolumeSpecs
init|=
name|deviceRuntimeSpec
operator|.
name|getVolumeMounts
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Handle volume mounts: {} for container: {}"
argument_list|,
name|mountVolumeSpecs
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
for|for
control|(
name|MountVolumeSpec
name|mountVolumeSpec
range|:
name|mountVolumeSpecs
control|)
block|{
if|if
condition|(
name|mountVolumeSpec
operator|.
name|getReadOnly
argument_list|()
condition|)
block|{
name|dockerRunCommand
operator|.
name|addReadOnlyMountLocation
argument_list|(
name|mountVolumeSpec
operator|.
name|getHostPath
argument_list|()
argument_list|,
name|mountVolumeSpec
operator|.
name|getMountPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dockerRunCommand
operator|.
name|addReadWriteMountLocation
argument_list|(
name|mountVolumeSpec
operator|.
name|getHostPath
argument_list|()
argument_list|,
name|mountVolumeSpec
operator|.
name|getMountPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// handle envs
name|dockerRunCommand
operator|.
name|addEnv
argument_list|(
name|deviceRuntimeSpec
operator|.
name|getEnvs
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Handle envs: {} for container: {}"
argument_list|,
name|deviceRuntimeSpec
operator|.
name|getEnvs
argument_list|()
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCreateDockerVolumeCommand (Container container)
specifier|public
name|DockerVolumeCommand
name|getCreateDockerVolumeCommand
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
if|if
condition|(
operator|!
name|requestedDevice
argument_list|(
name|resourceName
argument_list|,
name|container
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|DeviceRuntimeSpec
name|deviceRuntimeSpec
init|=
name|getRuntimeSpec
argument_list|(
name|container
argument_list|)
decl_stmt|;
if|if
condition|(
name|deviceRuntimeSpec
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Set
argument_list|<
name|VolumeSpec
argument_list|>
name|volumeClaims
init|=
name|deviceRuntimeSpec
operator|.
name|getVolumeSpecs
argument_list|()
decl_stmt|;
for|for
control|(
name|VolumeSpec
name|volumeSec
range|:
name|volumeClaims
control|)
block|{
if|if
condition|(
name|volumeSec
operator|.
name|getVolumeOperation
argument_list|()
operator|.
name|equals
argument_list|(
name|VolumeSpec
operator|.
name|CREATE
argument_list|)
condition|)
block|{
name|DockerVolumeCommand
name|command
init|=
operator|new
name|DockerVolumeCommand
argument_list|(
name|DockerVolumeCommand
operator|.
name|VOLUME_CREATE_SUB_COMMAND
argument_list|)
decl_stmt|;
name|command
operator|.
name|setDriverName
argument_list|(
name|volumeSec
operator|.
name|getVolumeDriver
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|setVolumeName
argument_list|(
name|volumeSec
operator|.
name|getVolumeName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Get volume create request from plugin:{} for container: {}"
argument_list|,
name|volumeClaims
argument_list|,
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|command
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getCleanupDockerVolumesCommand (Container container)
specifier|public
name|DockerVolumeCommand
name|getCleanupDockerVolumesCommand
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
if|if
condition|(
operator|!
name|requestedDevice
argument_list|(
name|resourceName
argument_list|,
name|container
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Set
argument_list|<
name|Device
argument_list|>
name|allocated
init|=
name|getAllocatedDevices
argument_list|(
name|container
argument_list|)
decl_stmt|;
try|try
block|{
name|devicePlugin
operator|.
name|onDevicesReleased
argument_list|(
name|allocated
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception thrown in onDeviceReleased of "
operator|+
name|devicePlugin
operator|.
name|getClass
argument_list|()
operator|+
literal|"for container: "
operator|+
name|container
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// remove cache
name|ContainerId
name|containerId
init|=
name|container
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|cachedAllocation
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|cachedSpec
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
DECL|method|requestedDevice (String resName, Container container)
specifier|protected
name|boolean
name|requestedDevice
parameter_list|(
name|String
name|resName
parameter_list|,
name|Container
name|container
parameter_list|)
block|{
return|return
name|DeviceMappingManager
operator|.
name|getRequestedDeviceCount
argument_list|(
name|resName
argument_list|,
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
operator|>
literal|0
return|;
block|}
DECL|method|getAllocatedDevices (Container container)
specifier|private
name|Set
argument_list|<
name|Device
argument_list|>
name|getAllocatedDevices
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
comment|// get allocated devices
name|Set
argument_list|<
name|Device
argument_list|>
name|allocated
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|container
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|allocated
operator|=
name|cachedAllocation
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
if|if
condition|(
name|allocated
operator|!=
literal|null
condition|)
block|{
return|return
name|allocated
return|;
block|}
name|allocated
operator|=
name|devicePluginAdapter
operator|.
name|getDeviceMappingManager
argument_list|()
operator|.
name|getAllocatedDevices
argument_list|(
name|resourceName
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Get allocation from deviceMappingManager: {}, {} for"
operator|+
literal|" container: {}"
argument_list|,
name|allocated
argument_list|,
name|resourceName
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|cachedAllocation
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|allocated
argument_list|)
expr_stmt|;
return|return
name|allocated
return|;
block|}
DECL|method|getRuntimeSpec (Container container)
specifier|public
specifier|synchronized
name|DeviceRuntimeSpec
name|getRuntimeSpec
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
name|ContainerId
name|containerId
init|=
name|container
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|DeviceRuntimeSpec
name|deviceRuntimeSpec
init|=
name|cachedSpec
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|deviceRuntimeSpec
operator|==
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Device
argument_list|>
name|allocated
init|=
name|getAllocatedDevices
argument_list|(
name|container
argument_list|)
decl_stmt|;
if|if
condition|(
name|allocated
operator|==
literal|null
operator|||
name|allocated
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot get allocation for container:"
operator|+
name|containerId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
try|try
block|{
name|deviceRuntimeSpec
operator|=
name|devicePlugin
operator|.
name|onDevicesAllocated
argument_list|(
name|allocated
argument_list|,
name|YarnRuntimeType
operator|.
name|RUNTIME_DOCKER
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception thrown in onDeviceAllocated of "
operator|+
name|devicePlugin
operator|.
name|getClass
argument_list|()
operator|+
literal|" for container: "
operator|+
name|containerId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deviceRuntimeSpec
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Null DeviceRuntimeSpec value got from "
operator|+
name|devicePlugin
operator|.
name|getClass
argument_list|()
operator|+
literal|" for container: "
operator|+
name|containerId
operator|+
literal|", please check plugin logic"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|cachedSpec
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|deviceRuntimeSpec
argument_list|)
expr_stmt|;
block|}
return|return
name|deviceRuntimeSpec
return|;
block|}
block|}
end_class

end_unit

