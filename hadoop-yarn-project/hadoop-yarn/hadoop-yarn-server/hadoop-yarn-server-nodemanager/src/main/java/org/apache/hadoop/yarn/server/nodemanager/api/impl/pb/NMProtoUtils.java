begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.api.impl.pb
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|impl
operator|.
name|pb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|DeletionServiceDeleteTaskProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DeletionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|deletion
operator|.
name|recovery
operator|.
name|DeletionTaskRecoveryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|deletion
operator|.
name|task
operator|.
name|DeletionTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|deletion
operator|.
name|task
operator|.
name|DeletionTaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|deletion
operator|.
name|task
operator|.
name|FileDeletionTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Utilities for converting from PB representations.  */
end_comment

begin_class
DECL|class|NMProtoUtils
specifier|public
specifier|final
class|class
name|NMProtoUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NMProtoUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|NMProtoUtils ()
specifier|private
name|NMProtoUtils
parameter_list|()
block|{ }
comment|/**    * Convert the Protobuf representation into a {@link DeletionTask}.    *    * @param proto             the Protobuf representation for the DeletionTask    * @param deletionService   the {@link DeletionService}    * @return the converted {@link DeletionTask}    */
DECL|method|convertProtoToDeletionTask ( DeletionServiceDeleteTaskProto proto, DeletionService deletionService)
specifier|public
specifier|static
name|DeletionTask
name|convertProtoToDeletionTask
parameter_list|(
name|DeletionServiceDeleteTaskProto
name|proto
parameter_list|,
name|DeletionService
name|deletionService
parameter_list|)
block|{
name|int
name|taskId
init|=
name|proto
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasTaskType
argument_list|()
operator|&&
name|proto
operator|.
name|getTaskType
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|proto
operator|.
name|getTaskType
argument_list|()
operator|.
name|equals
argument_list|(
name|DeletionTaskType
operator|.
name|FILE
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Converting recovered FileDeletionTask"
argument_list|)
expr_stmt|;
return|return
name|convertProtoToFileDeletionTask
argument_list|(
name|proto
argument_list|,
name|deletionService
argument_list|,
name|taskId
argument_list|)
return|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unable to get task type, trying FileDeletionTask"
argument_list|)
expr_stmt|;
return|return
name|convertProtoToFileDeletionTask
argument_list|(
name|proto
argument_list|,
name|deletionService
argument_list|,
name|taskId
argument_list|)
return|;
block|}
comment|/**    * Convert the Protobuf representation into the {@link FileDeletionTask}.    *    * @param proto the Protobuf representation of the {@link FileDeletionTask}    * @param deletionService the {@link DeletionService}.    * @param taskId the ID of the {@link DeletionTask}.    * @return the populated {@link FileDeletionTask}.    */
DECL|method|convertProtoToFileDeletionTask ( DeletionServiceDeleteTaskProto proto, DeletionService deletionService, int taskId)
specifier|public
specifier|static
name|FileDeletionTask
name|convertProtoToFileDeletionTask
parameter_list|(
name|DeletionServiceDeleteTaskProto
name|proto
parameter_list|,
name|DeletionService
name|deletionService
parameter_list|,
name|int
name|taskId
parameter_list|)
block|{
name|String
name|user
init|=
name|proto
operator|.
name|hasUser
argument_list|()
condition|?
name|proto
operator|.
name|getUser
argument_list|()
else|:
literal|null
decl_stmt|;
name|Path
name|subdir
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasSubdir
argument_list|()
condition|)
block|{
name|subdir
operator|=
operator|new
name|Path
argument_list|(
name|proto
operator|.
name|getSubdir
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Path
argument_list|>
name|basePaths
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|basedirs
init|=
name|proto
operator|.
name|getBasedirsList
argument_list|()
decl_stmt|;
if|if
condition|(
name|basedirs
operator|!=
literal|null
operator|&&
name|basedirs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|basePaths
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|basedirs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|basedir
range|:
name|basedirs
control|)
block|{
name|basePaths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|basedir
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|FileDeletionTask
argument_list|(
name|taskId
argument_list|,
name|deletionService
argument_list|,
name|user
argument_list|,
name|subdir
argument_list|,
name|basePaths
argument_list|)
return|;
block|}
comment|/**    * Convert the Protobuf representation to the {@link DeletionTaskRecoveryInfo}    * representation.    *    * @param proto the Protobuf representation of the {@link DeletionTask}    * @param deletionService the {@link DeletionService}    * @return the populated {@link DeletionTaskRecoveryInfo}    */
DECL|method|convertProtoToDeletionTaskRecoveryInfo ( DeletionServiceDeleteTaskProto proto, DeletionService deletionService)
specifier|public
specifier|static
name|DeletionTaskRecoveryInfo
name|convertProtoToDeletionTaskRecoveryInfo
parameter_list|(
name|DeletionServiceDeleteTaskProto
name|proto
parameter_list|,
name|DeletionService
name|deletionService
parameter_list|)
block|{
name|DeletionTask
name|deletionTask
init|=
name|NMProtoUtils
operator|.
name|convertProtoToDeletionTask
argument_list|(
name|proto
argument_list|,
name|deletionService
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|successorTaskIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|getSuccessorIdsList
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|proto
operator|.
name|getSuccessorIdsList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|successorTaskIds
operator|=
name|proto
operator|.
name|getSuccessorIdsList
argument_list|()
expr_stmt|;
block|}
name|long
name|deletionTimestamp
init|=
name|proto
operator|.
name|getDeletionTime
argument_list|()
decl_stmt|;
return|return
operator|new
name|DeletionTaskRecoveryInfo
argument_list|(
name|deletionTask
argument_list|,
name|successorTaskIds
argument_list|,
name|deletionTimestamp
argument_list|)
return|;
block|}
block|}
end_class

end_unit

