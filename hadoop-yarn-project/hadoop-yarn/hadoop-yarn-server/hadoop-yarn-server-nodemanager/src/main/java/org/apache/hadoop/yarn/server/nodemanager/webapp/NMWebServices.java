begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|records
operator|.
name|AuxServiceRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|ResourcePlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|ResourcePluginManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AuxiliaryServicesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NMResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|GenericEntity
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|StreamingOutput
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|JettyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|ServiceStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|ContainerLogMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|ContainerLogsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|ContainerLogAggregationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|LogToolUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|filecontroller
operator|.
name|LogAggregationFileControllerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ResourceView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NMContainerLogsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ContainersInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|YarnWebServiceParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ContainerLogsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Times
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|util
operator|.
name|WebAppUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_class
annotation|@
name|Singleton
annotation|@
name|Path
argument_list|(
literal|"/ws/v1/node"
argument_list|)
DECL|class|NMWebServices
specifier|public
class|class
name|NMWebServices
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NMWebServices
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|nmContext
specifier|private
name|Context
name|nmContext
decl_stmt|;
DECL|field|rview
specifier|private
name|ResourceView
name|rview
decl_stmt|;
DECL|field|webapp
specifier|private
name|WebApp
name|webapp
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|static
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|redirectWSUrl
specifier|private
specifier|final
name|String
name|redirectWSUrl
decl_stmt|;
DECL|field|factory
specifier|private
specifier|final
name|LogAggregationFileControllerFactory
name|factory
decl_stmt|;
DECL|field|filterAppsByUser
specifier|private
name|boolean
name|filterAppsByUser
init|=
literal|false
decl_stmt|;
specifier|private
annotation|@
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
DECL|field|request
name|HttpServletRequest
name|request
decl_stmt|;
specifier|private
annotation|@
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
DECL|field|response
name|HttpServletResponse
name|response
decl_stmt|;
annotation|@
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
DECL|field|uriInfo
name|UriInfo
name|uriInfo
decl_stmt|;
annotation|@
name|Inject
DECL|method|NMWebServices (final Context nm, final ResourceView view, final WebApp webapp)
specifier|public
name|NMWebServices
parameter_list|(
specifier|final
name|Context
name|nm
parameter_list|,
specifier|final
name|ResourceView
name|view
parameter_list|,
specifier|final
name|WebApp
name|webapp
parameter_list|)
block|{
name|this
operator|.
name|nmContext
operator|=
name|nm
expr_stmt|;
name|this
operator|.
name|rview
operator|=
name|view
expr_stmt|;
name|this
operator|.
name|webapp
operator|=
name|webapp
expr_stmt|;
name|this
operator|.
name|redirectWSUrl
operator|=
name|this
operator|.
name|nmContext
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_LOG_SERVER_WEBSERVICE_URL
argument_list|)
expr_stmt|;
name|this
operator|.
name|factory
operator|=
operator|new
name|LogAggregationFileControllerFactory
argument_list|(
name|this
operator|.
name|nmContext
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|filterAppsByUser
operator|=
name|this
operator|.
name|nmContext
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|FILTER_ENTITY_LIST_BY_USER
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_DISPLAY_APPS_FOR_LOGGED_IN_USER
argument_list|)
expr_stmt|;
block|}
DECL|method|NMWebServices (final Context nm, final ResourceView view, final WebApp webapp, HttpServletResponse response)
specifier|public
name|NMWebServices
parameter_list|(
specifier|final
name|Context
name|nm
parameter_list|,
specifier|final
name|ResourceView
name|view
parameter_list|,
specifier|final
name|WebApp
name|webapp
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
block|{
name|this
argument_list|(
name|nm
argument_list|,
name|view
argument_list|,
name|webapp
argument_list|)
expr_stmt|;
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
block|}
DECL|method|init ()
specifier|private
name|void
name|init
parameter_list|()
block|{
comment|//clear content type
name|response
operator|.
name|setContentType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
DECL|method|get ()
specifier|public
name|NodeInfo
name|get
parameter_list|()
block|{
return|return
name|getNodeInfo
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/info"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
DECL|method|getNodeInfo ()
specifier|public
name|NodeInfo
name|getNodeInfo
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
return|return
operator|new
name|NodeInfo
argument_list|(
name|this
operator|.
name|nmContext
argument_list|,
name|this
operator|.
name|rview
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/apps"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
DECL|method|getNodeApps (@avax.ws.rs.core.Context HttpServletRequest hsr, @QueryParam(R) String stateQuery, @QueryParam(R) String userQuery)
specifier|public
name|AppsInfo
name|getNodeApps
parameter_list|(
annotation|@
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"state"
argument_list|)
name|String
name|stateQuery
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"user"
argument_list|)
name|String
name|userQuery
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|AppsInfo
name|allApps
init|=
operator|new
name|AppsInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ApplicationId
argument_list|,
name|Application
argument_list|>
name|entry
range|:
name|this
operator|.
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|AppInfo
name|appInfo
init|=
operator|new
name|AppInfo
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|stateQuery
operator|!=
literal|null
operator|&&
operator|!
name|stateQuery
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ApplicationState
operator|.
name|valueOf
argument_list|(
name|stateQuery
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|appInfo
operator|.
name|getState
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|stateQuery
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|userQuery
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|userQuery
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"Error: You must specify a non-empty string for the user"
decl_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|appInfo
operator|.
name|getUser
argument_list|()
operator|.
name|equals
argument_list|(
name|userQuery
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
comment|// Allow only application-owner/admin for any type of access on the
comment|// application.
if|if
condition|(
name|filterAppsByUser
operator|&&
operator|!
name|hasAccess
argument_list|(
name|appInfo
operator|.
name|getUser
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|hsr
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|allApps
operator|.
name|add
argument_list|(
name|appInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|allApps
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/apps/{appid}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
DECL|method|getNodeApp (@athParamR) String appId)
specifier|public
name|AppInfo
name|getNodeApp
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|ApplicationId
name|id
init|=
name|WebAppUtils
operator|.
name|parseApplicationId
argument_list|(
name|recordFactory
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|Application
name|app
init|=
name|this
operator|.
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|app
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"app with id "
operator|+
name|appId
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
return|return
operator|new
name|AppInfo
argument_list|(
name|app
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/containers"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
DECL|method|getNodeContainers (@avax.ws.rs.core.Context HttpServletRequest hsr)
specifier|public
name|ContainersInfo
name|getNodeContainers
parameter_list|(
annotation|@
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|ContainersInfo
name|allContainers
init|=
operator|new
name|ContainersInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
name|entry
range|:
name|this
operator|.
name|nmContext
operator|.
name|getContainers
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// just skip it
continue|continue;
block|}
name|ContainerInfo
name|info
init|=
operator|new
name|ContainerInfo
argument_list|(
name|this
operator|.
name|nmContext
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|uriInfo
operator|.
name|getBaseUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|webapp
operator|.
name|name
argument_list|()
argument_list|,
name|hsr
operator|.
name|getRemoteUser
argument_list|()
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
comment|// Allow only application-owner/admin for any type of access on the
comment|// application.
if|if
condition|(
name|filterAppsByUser
operator|&&
operator|!
name|hasAccess
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getUser
argument_list|()
argument_list|,
name|appId
argument_list|,
name|hsr
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|allContainers
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|allContainers
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/containers/{containerid}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
DECL|method|getNodeContainer (@avax.ws.rs.core.Context HttpServletRequest hsr, @PathParam(R) String id)
specifier|public
name|ContainerInfo
name|getNodeContainer
parameter_list|(
annotation|@
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"containerid"
argument_list|)
name|String
name|id
parameter_list|)
block|{
name|ContainerId
name|containerId
init|=
literal|null
decl_stmt|;
name|init
argument_list|()
expr_stmt|;
try|try
block|{
name|containerId
operator|=
name|ContainerId
operator|.
name|fromString
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"invalid container id, "
operator|+
name|id
argument_list|)
throw|;
block|}
name|Container
name|container
init|=
name|nmContext
operator|.
name|getContainers
argument_list|()
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|container
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"container with id, "
operator|+
name|id
operator|+
literal|", not found"
argument_list|)
throw|;
block|}
return|return
operator|new
name|ContainerInfo
argument_list|(
name|this
operator|.
name|nmContext
argument_list|,
name|container
argument_list|,
name|uriInfo
operator|.
name|getBaseUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|webapp
operator|.
name|name
argument_list|()
argument_list|,
name|hsr
operator|.
name|getRemoteUser
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns log file's name as well as current file size for a container.    *    * @param hsr    *    HttpServletRequest    * @param res    *    HttpServletResponse    * @param containerIdStr    *    The container ID    * @return    *    The log file's name and current file size    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/containers/{containerid}/logs"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
DECL|method|getContainerLogsInfo ( @avax.ws.rs.core.Context HttpServletRequest hsr, @javax.ws.rs.core.Context HttpServletResponse res, @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr)
specifier|public
name|Response
name|getContainerLogsInfo
parameter_list|(
annotation|@
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
name|HttpServletRequest
name|hsr
parameter_list|,
annotation|@
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|CONTAINER_ID
argument_list|)
name|String
name|containerIdStr
parameter_list|)
block|{
name|ContainerId
name|containerId
init|=
literal|null
decl_stmt|;
name|init
argument_list|()
expr_stmt|;
try|try
block|{
name|containerId
operator|=
name|ContainerId
operator|.
name|fromString
argument_list|(
name|containerIdStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"invalid container id, "
operator|+
name|containerIdStr
argument_list|)
throw|;
block|}
try|try
block|{
name|List
argument_list|<
name|ContainerLogsInfo
argument_list|>
name|containersLogsInfo
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|containersLogsInfo
operator|.
name|add
argument_list|(
operator|new
name|NMContainerLogsInfo
argument_list|(
name|this
operator|.
name|nmContext
argument_list|,
name|containerId
argument_list|,
name|hsr
operator|.
name|getRemoteUser
argument_list|()
argument_list|,
name|ContainerLogAggregationType
operator|.
name|LOCAL
argument_list|)
argument_list|)
expr_stmt|;
comment|// check whether we have aggregated logs in RemoteFS. If exists, show the
comment|// the log meta for the aggregated logs as well.
name|ApplicationId
name|appId
init|=
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|Application
name|app
init|=
name|this
operator|.
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|String
name|appOwner
init|=
name|app
operator|==
literal|null
condition|?
literal|null
else|:
name|app
operator|.
name|getUser
argument_list|()
decl_stmt|;
try|try
block|{
name|ContainerLogsRequest
name|logRequest
init|=
operator|new
name|ContainerLogsRequest
argument_list|()
decl_stmt|;
name|logRequest
operator|.
name|setAppId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|logRequest
operator|.
name|setAppOwner
argument_list|(
name|appOwner
argument_list|)
expr_stmt|;
name|logRequest
operator|.
name|setContainerId
argument_list|(
name|containerIdStr
argument_list|)
expr_stmt|;
name|logRequest
operator|.
name|setNodeId
argument_list|(
name|this
operator|.
name|nmContext
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerLogMeta
argument_list|>
name|containerLogMeta
init|=
name|factory
operator|.
name|getFileControllerForRead
argument_list|(
name|appId
argument_list|,
name|appOwner
argument_list|)
operator|.
name|readAggregatedLogsMeta
argument_list|(
name|logRequest
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|containerLogMeta
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ContainerLogMeta
name|logMeta
range|:
name|containerLogMeta
control|)
block|{
name|containersLogsInfo
operator|.
name|add
argument_list|(
operator|new
name|ContainerLogsInfo
argument_list|(
name|logMeta
argument_list|,
name|ContainerLogAggregationType
operator|.
name|AGGREGATED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// Something wrong with we tries to access the remote fs for the logs.
comment|// Skip it and do nothing
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|GenericEntity
argument_list|<
name|List
argument_list|<
name|ContainerLogsInfo
argument_list|>
argument_list|>
name|meta
init|=
operator|new
name|GenericEntity
argument_list|<
name|List
argument_list|<
name|ContainerLogsInfo
argument_list|>
argument_list|>
argument_list|(
name|containersLogsInfo
argument_list|)
block|{}
decl_stmt|;
name|ResponseBuilder
name|resp
init|=
name|Response
operator|.
name|ok
argument_list|(
name|meta
argument_list|)
decl_stmt|;
comment|// Sending the X-Content-Type-Options response header with the value
comment|// nosniff will prevent Internet Explorer from MIME-sniffing a response
comment|// away from the declared content-type.
name|resp
operator|.
name|header
argument_list|(
literal|"X-Content-Type-Options"
argument_list|,
literal|"nosniff"
argument_list|)
expr_stmt|;
return|return
name|resp
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|redirectWSUrl
operator|==
literal|null
operator|||
name|redirectWSUrl
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
comment|// redirect the request to the configured log server
name|String
name|redirectURI
init|=
literal|"/containers/"
operator|+
name|containerIdStr
operator|+
literal|"/logs"
decl_stmt|;
return|return
name|createRedirectResponse
argument_list|(
name|hsr
argument_list|,
name|redirectWSUrl
argument_list|,
name|redirectURI
argument_list|)
return|;
block|}
block|}
comment|/**    * Returns the contents of a container's log file in plain text.    *    * Only works for containers that are still in the NodeManager's memory, so    * logs are no longer available after the corresponding application is no    * longer running.    *    * @param containerIdStr    *    The container ID    * @param filename    *    The name of the log file    * @param format    *    The content type    * @param size    *    the size of the log file    * @return    *    The contents of the container's log file    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/containers/{containerid}/logs/{filename}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|TEXT_PLAIN
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getContainerLogFile ( @athParamYarnWebServiceParams.CONTAINER_ID) final String containerIdStr, @PathParam(YarnWebServiceParams.CONTAINER_LOG_FILE_NAME) String filename, @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_FORMAT) String format, @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_SIZE) String size)
specifier|public
name|Response
name|getContainerLogFile
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|CONTAINER_ID
argument_list|)
specifier|final
name|String
name|containerIdStr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|CONTAINER_LOG_FILE_NAME
argument_list|)
name|String
name|filename
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|RESPONSE_CONTENT_FORMAT
argument_list|)
name|String
name|format
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|RESPONSE_CONTENT_SIZE
argument_list|)
name|String
name|size
parameter_list|)
block|{
return|return
name|getLogs
argument_list|(
name|containerIdStr
argument_list|,
name|filename
argument_list|,
name|format
argument_list|,
name|size
argument_list|)
return|;
block|}
comment|/**    * Returns the contents of a container's log file in plain text.     *    * Only works for containers that are still in the NodeManager's memory, so    * logs are no longer available after the corresponding application is no    * longer running.    *     * @param containerIdStr    *    The container ID    * @param filename    *    The name of the log file    * @param format    *    The content type    * @param size    *    the size of the log file    * @return    *    The contents of the container's log file    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/containerlogs/{containerid}/{filename}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|TEXT_PLAIN
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getLogs ( @athParamYarnWebServiceParams.CONTAINER_ID) final String containerIdStr, @PathParam(YarnWebServiceParams.CONTAINER_LOG_FILE_NAME) String filename, @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_FORMAT) String format, @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_SIZE) String size)
specifier|public
name|Response
name|getLogs
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|CONTAINER_ID
argument_list|)
specifier|final
name|String
name|containerIdStr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|CONTAINER_LOG_FILE_NAME
argument_list|)
name|String
name|filename
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|RESPONSE_CONTENT_FORMAT
argument_list|)
name|String
name|format
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|RESPONSE_CONTENT_SIZE
argument_list|)
name|String
name|size
parameter_list|)
block|{
name|ContainerId
name|tempContainerId
decl_stmt|;
try|try
block|{
name|tempContainerId
operator|=
name|ContainerId
operator|.
name|fromString
argument_list|(
name|containerIdStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|final
name|ContainerId
name|containerId
init|=
name|tempContainerId
decl_stmt|;
name|boolean
name|tempIsRunning
init|=
literal|false
decl_stmt|;
comment|// check what is the status for container
try|try
block|{
name|Container
name|container
init|=
name|nmContext
operator|.
name|getContainers
argument_list|()
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|tempIsRunning
operator|=
operator|(
name|container
operator|.
name|getContainerState
argument_list|()
operator|==
name|ContainerState
operator|.
name|RUNNING
operator|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// This NM does not have this container any more. We
comment|// assume the container has already finished.
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Can not find the container:"
operator|+
name|containerId
operator|+
literal|" in this node."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|boolean
name|isRunning
init|=
name|tempIsRunning
decl_stmt|;
name|File
name|logFile
init|=
literal|null
decl_stmt|;
try|try
block|{
name|logFile
operator|=
name|ContainerLogsUtils
operator|.
name|getContainerLogFile
argument_list|(
name|containerId
argument_list|,
name|filename
argument_list|,
name|request
operator|.
name|getRemoteUser
argument_list|()
argument_list|,
name|nmContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|redirectWSUrl
operator|==
literal|null
operator|||
name|redirectWSUrl
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|entity
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|// redirect the request to the configured log server
name|String
name|redirectURI
init|=
literal|"/containers/"
operator|+
name|containerIdStr
operator|+
literal|"/logs/"
operator|+
name|filename
decl_stmt|;
return|return
name|createRedirectResponse
argument_list|(
name|request
argument_list|,
name|redirectWSUrl
argument_list|,
name|redirectURI
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ex
parameter_list|)
block|{
return|return
name|Response
operator|.
name|serverError
argument_list|()
operator|.
name|entity
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|final
name|long
name|bytes
init|=
name|parseLongParam
argument_list|(
name|size
argument_list|)
decl_stmt|;
specifier|final
name|String
name|lastModifiedTime
init|=
name|Times
operator|.
name|format
argument_list|(
name|logFile
operator|.
name|lastModified
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|outputFileName
init|=
name|filename
decl_stmt|;
name|String
name|contentType
init|=
name|WebAppUtils
operator|.
name|getDefaultLogContentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|format
operator|!=
literal|null
operator|&&
operator|!
name|format
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|contentType
operator|=
name|WebAppUtils
operator|.
name|getSupportedLogContentType
argument_list|(
name|format
argument_list|)
expr_stmt|;
if|if
condition|(
name|contentType
operator|==
literal|null
condition|)
block|{
name|String
name|errorMessage
init|=
literal|"The valid values for the parameter : format "
operator|+
literal|"are "
operator|+
name|WebAppUtils
operator|.
name|listSupportedLogContentType
argument_list|()
decl_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|errorMessage
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
try|try
block|{
specifier|final
name|FileInputStream
name|fis
init|=
name|ContainerLogsUtils
operator|.
name|openLogFileForRead
argument_list|(
name|containerIdStr
argument_list|,
name|logFile
argument_list|,
name|nmContext
argument_list|)
decl_stmt|;
specifier|final
name|long
name|fileLength
init|=
name|logFile
operator|.
name|length
argument_list|()
decl_stmt|;
name|StreamingOutput
name|stream
init|=
operator|new
name|StreamingOutput
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
try|try
block|{
name|LogToolUtils
operator|.
name|outputContainerLogThroughZeroCopy
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|,
name|nmContext
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|outputFileName
argument_list|,
name|fileLength
argument_list|,
name|bytes
argument_list|,
name|lastModifiedTime
argument_list|,
name|fis
argument_list|,
name|os
argument_list|,
name|ContainerLogAggregationType
operator|.
name|LOCAL
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|endOfFile
init|=
literal|"End of LogType:"
operator|+
name|outputFileName
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|endOfFile
operator|+
literal|"."
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRunning
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"This log file belongs to a running container ("
operator|+
name|containerIdStr
operator|+
literal|") and so may not be complete."
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"*"
argument_list|,
name|endOfFile
operator|.
name|length
argument_list|()
operator|+
literal|50
argument_list|)
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// If we have aggregated logs for this container,
comment|// output the aggregation logs as well.
name|ApplicationId
name|appId
init|=
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|Application
name|app
init|=
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|String
name|appOwner
init|=
name|app
operator|==
literal|null
condition|?
literal|null
else|:
name|app
operator|.
name|getUser
argument_list|()
decl_stmt|;
try|try
block|{
name|ContainerLogsRequest
name|logRequest
init|=
operator|new
name|ContainerLogsRequest
argument_list|()
decl_stmt|;
name|logRequest
operator|.
name|setAppId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|logRequest
operator|.
name|setAppOwner
argument_list|(
name|appOwner
argument_list|)
expr_stmt|;
name|logRequest
operator|.
name|setContainerId
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|logRequest
operator|.
name|setNodeId
argument_list|(
name|nmContext
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|logRequest
operator|.
name|setBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|logTypes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|logTypes
operator|.
name|add
argument_list|(
name|outputFileName
argument_list|)
expr_stmt|;
name|logRequest
operator|.
name|setLogTypes
argument_list|(
name|logTypes
argument_list|)
expr_stmt|;
name|factory
operator|.
name|getFileControllerForRead
argument_list|(
name|appId
argument_list|,
name|appOwner
argument_list|)
operator|.
name|readAggregatedLogs
argument_list|(
name|logRequest
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// Something wrong when we try to access the aggregated log.
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Can not access the aggregated log for "
operator|+
literal|"the container:"
operator|+
name|containerId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|fis
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|ResponseBuilder
name|resp
init|=
name|Response
operator|.
name|ok
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|resp
operator|.
name|header
argument_list|(
literal|"Content-Type"
argument_list|,
name|contentType
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
comment|// Sending the X-Content-Type-Options response header with the value
comment|// nosniff will prevent Internet Explorer from MIME-sniffing a response
comment|// away from the declared content-type.
name|resp
operator|.
name|header
argument_list|(
literal|"X-Content-Type-Options"
argument_list|,
literal|"nosniff"
argument_list|)
expr_stmt|;
return|return
name|resp
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
return|return
name|Response
operator|.
name|serverError
argument_list|()
operator|.
name|entity
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/resources/{resourcename}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
DECL|method|getNMResourceInfo ( @athParamR) String resourceName)
specifier|public
name|Object
name|getNMResourceInfo
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"resourcename"
argument_list|)
name|String
name|resourceName
parameter_list|)
throws|throws
name|YarnException
block|{
name|init
argument_list|()
expr_stmt|;
name|ResourcePluginManager
name|rpm
init|=
name|this
operator|.
name|nmContext
operator|.
name|getResourcePluginManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|rpm
operator|!=
literal|null
operator|&&
name|rpm
operator|.
name|getNameToPlugins
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ResourcePlugin
name|plugin
init|=
name|rpm
operator|.
name|getNameToPlugins
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|plugin
operator|!=
literal|null
condition|)
block|{
name|NMResourceInfo
name|nmResourceInfo
init|=
name|plugin
operator|.
name|getNMResourceInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|nmResourceInfo
operator|!=
literal|null
condition|)
block|{
return|return
name|nmResourceInfo
return|;
block|}
block|}
block|}
return|return
operator|new
name|NMResourceInfo
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/auxiliaryservices"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
DECL|method|getAuxiliaryServices (@avax.ws.rs.core.Context HttpServletRequest hsr)
specifier|public
name|AuxiliaryServicesInfo
name|getAuxiliaryServices
parameter_list|(
annotation|@
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
name|HttpServletRequest
name|hsr
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|AuxiliaryServicesInfo
name|auxiliaryServices
init|=
operator|new
name|AuxiliaryServicesInfo
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|AuxServiceRecord
argument_list|>
name|loadedServices
init|=
name|nmContext
operator|.
name|getAuxServices
argument_list|()
operator|.
name|getServiceRecords
argument_list|()
decl_stmt|;
if|if
condition|(
name|loadedServices
operator|!=
literal|null
condition|)
block|{
name|auxiliaryServices
operator|.
name|addAll
argument_list|(
name|loadedServices
argument_list|)
expr_stmt|;
block|}
return|return
name|auxiliaryServices
return|;
block|}
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
literal|"/yarn/sysfs/{user}/{appId}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_XML
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
DECL|method|syncYarnSysFS (@avax.ws.rs.core.Context HttpServletRequest req, @PathParam(R) String user, @PathParam(R) String appId, String spec)
specifier|public
name|Response
name|syncYarnSysFS
parameter_list|(
annotation|@
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"user"
argument_list|)
name|String
name|user
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appId"
argument_list|)
name|String
name|appId
parameter_list|,
name|String
name|spec
parameter_list|)
block|{
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|req
operator|.
name|getRemoteUser
argument_list|()
operator|.
name|equals
argument_list|(
name|user
argument_list|)
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
try|try
block|{
name|nmContext
operator|.
name|getContainerExecutor
argument_list|()
operator|.
name|updateYarnSysFS
argument_list|(
name|nmContext
argument_list|,
name|user
argument_list|,
name|appId
argument_list|,
name|spec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|ServiceStateException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to sync yarn sysfs for application ID: {}, reason: "
argument_list|,
name|appId
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
name|e
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|parseLongParam (String bytes)
specifier|private
name|long
name|parseLongParam
parameter_list|(
name|String
name|bytes
parameter_list|)
block|{
if|if
condition|(
name|bytes
operator|==
literal|null
operator|||
name|bytes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|bytes
argument_list|)
return|;
block|}
DECL|method|createRedirectResponse (HttpServletRequest httpRequest, String redirectWSUrlPrefix, String uri)
specifier|private
name|Response
name|createRedirectResponse
parameter_list|(
name|HttpServletRequest
name|httpRequest
parameter_list|,
name|String
name|redirectWSUrlPrefix
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
comment|// redirect the request to the configured log server
name|StringBuilder
name|redirectPath
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|redirectWSUrlPrefix
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|redirectWSUrlPrefix
operator|=
name|redirectWSUrlPrefix
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|redirectWSUrlPrefix
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|redirectPath
operator|.
name|append
argument_list|(
name|redirectWSUrlPrefix
operator|+
name|uri
argument_list|)
expr_stmt|;
comment|// append all the request query parameters except nodeId parameter
name|String
name|requestParams
init|=
name|WebAppUtils
operator|.
name|removeQueryParams
argument_list|(
name|httpRequest
argument_list|,
name|YarnWebServiceParams
operator|.
name|NM_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|requestParams
operator|!=
literal|null
operator|&&
operator|!
name|requestParams
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|redirectPath
operator|.
name|append
argument_list|(
literal|"?"
operator|+
name|requestParams
operator|+
literal|"&"
operator|+
name|YarnWebServiceParams
operator|.
name|REDIRECTED_FROM_NODE
operator|+
literal|"=true"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|redirectPath
operator|.
name|append
argument_list|(
literal|"?"
operator|+
name|YarnWebServiceParams
operator|.
name|REDIRECTED_FROM_NODE
operator|+
literal|"=true"
argument_list|)
expr_stmt|;
block|}
name|ResponseBuilder
name|res
init|=
name|Response
operator|.
name|status
argument_list|(
name|HttpServletResponse
operator|.
name|SC_TEMPORARY_REDIRECT
argument_list|)
decl_stmt|;
name|res
operator|.
name|header
argument_list|(
literal|"Location"
argument_list|,
name|redirectPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|res
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|hasAccess (String user, ApplicationId appId, HttpServletRequest hsr)
specifier|protected
name|Boolean
name|hasAccess
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|HttpServletRequest
name|hsr
parameter_list|)
block|{
comment|// Check for the authorization.
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|callerUGI
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|this
operator|.
name|nmContext
operator|.
name|getApplicationACLsManager
argument_list|()
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|user
argument_list|,
name|appId
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|hasAdminAccess (HttpServletRequest hsr)
specifier|protected
name|Boolean
name|hasAdminAccess
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|)
block|{
comment|// Check for the authorization.
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUserGroupInformation
argument_list|(
name|hsr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|nmContext
operator|.
name|getApplicationACLsManager
argument_list|()
operator|.
name|isAdmin
argument_list|(
name|callerUGI
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|getCallerUserGroupInformation ( HttpServletRequest hsr, boolean usePrincipal)
specifier|private
name|UserGroupInformation
name|getCallerUserGroupInformation
parameter_list|(
name|HttpServletRequest
name|hsr
parameter_list|,
name|boolean
name|usePrincipal
parameter_list|)
block|{
name|String
name|remoteUser
init|=
name|hsr
operator|.
name|getRemoteUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|usePrincipal
condition|)
block|{
name|Principal
name|princ
init|=
name|hsr
operator|.
name|getUserPrincipal
argument_list|()
decl_stmt|;
name|remoteUser
operator|=
name|princ
operator|==
literal|null
condition|?
literal|null
else|:
name|princ
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|UserGroupInformation
name|callerUGI
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|remoteUser
operator|!=
literal|null
condition|)
block|{
name|callerUGI
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|remoteUser
argument_list|)
expr_stmt|;
block|}
return|return
name|callerUGI
return|;
block|}
block|}
end_class

end_unit

