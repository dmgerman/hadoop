begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * *  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  * /  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.runtime
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|ContainerRuntimeContext
specifier|public
specifier|final
class|class
name|ContainerRuntimeContext
block|{
DECL|field|container
specifier|private
specifier|final
name|Container
name|container
decl_stmt|;
DECL|field|executionAttributes
specifier|private
specifier|final
name|Map
argument_list|<
name|Attribute
argument_list|<
name|?
argument_list|>
argument_list|,
name|Object
argument_list|>
name|executionAttributes
decl_stmt|;
comment|/** An attribute class that attempts to provide better type safety as compared    * with using a map of string to object.    * @param<T>    */
DECL|class|Attribute
specifier|public
specifier|static
specifier|final
class|class
name|Attribute
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|valueClass
specifier|private
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|valueClass
decl_stmt|;
DECL|field|id
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
DECL|method|Attribute (Class<T> valueClass, String id)
specifier|private
name|Attribute
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|valueClass
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|valueClass
operator|=
name|valueClass
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|valueClass
operator|.
name|hashCode
argument_list|()
operator|+
literal|31
operator|*
name|id
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
operator|!
operator|(
name|obj
operator|instanceof
name|Attribute
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Attribute
argument_list|<
name|?
argument_list|>
name|attribute
init|=
operator|(
name|Attribute
argument_list|<
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
return|return
name|valueClass
operator|.
name|equals
argument_list|(
name|attribute
operator|.
name|valueClass
argument_list|)
operator|&&
name|id
operator|.
name|equals
argument_list|(
name|attribute
operator|.
name|id
argument_list|)
return|;
block|}
DECL|method|attribute (Class<T> valueClass, String id)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Attribute
argument_list|<
name|T
argument_list|>
name|attribute
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|valueClass
parameter_list|,
name|String
name|id
parameter_list|)
block|{
return|return
operator|new
name|Attribute
argument_list|<
name|T
argument_list|>
argument_list|(
name|valueClass
argument_list|,
name|id
argument_list|)
return|;
block|}
block|}
DECL|class|Builder
specifier|public
specifier|static
specifier|final
class|class
name|Builder
block|{
DECL|field|container
specifier|private
specifier|final
name|Container
name|container
decl_stmt|;
DECL|field|executionAttributes
specifier|private
name|Map
argument_list|<
name|Attribute
argument_list|<
name|?
argument_list|>
argument_list|,
name|Object
argument_list|>
name|executionAttributes
decl_stmt|;
DECL|method|Builder (Container container)
specifier|public
name|Builder
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
name|executionAttributes
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
block|}
DECL|method|setExecutionAttribute (Attribute<E> attribute, E value)
specifier|public
parameter_list|<
name|E
parameter_list|>
name|Builder
name|setExecutionAttribute
parameter_list|(
name|Attribute
argument_list|<
name|E
argument_list|>
name|attribute
parameter_list|,
name|E
name|value
parameter_list|)
block|{
name|this
operator|.
name|executionAttributes
operator|.
name|put
argument_list|(
name|attribute
argument_list|,
name|attribute
operator|.
name|valueClass
operator|.
name|cast
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|ContainerRuntimeContext
name|build
parameter_list|()
block|{
return|return
operator|new
name|ContainerRuntimeContext
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|ContainerRuntimeContext (Builder builder)
specifier|private
name|ContainerRuntimeContext
parameter_list|(
name|Builder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|container
operator|=
name|builder
operator|.
name|container
expr_stmt|;
name|this
operator|.
name|executionAttributes
operator|=
name|builder
operator|.
name|executionAttributes
expr_stmt|;
block|}
DECL|method|getContainer ()
specifier|public
name|Container
name|getContainer
parameter_list|()
block|{
return|return
name|this
operator|.
name|container
return|;
block|}
DECL|method|getExecutionAttributes ()
specifier|public
name|Map
argument_list|<
name|Attribute
argument_list|<
name|?
argument_list|>
argument_list|,
name|Object
argument_list|>
name|getExecutionAttributes
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|this
operator|.
name|executionAttributes
argument_list|)
return|;
block|}
DECL|method|getExecutionAttribute (Attribute<E> attribute)
specifier|public
parameter_list|<
name|E
parameter_list|>
name|E
name|getExecutionAttribute
parameter_list|(
name|Attribute
argument_list|<
name|E
argument_list|>
name|attribute
parameter_list|)
block|{
return|return
name|attribute
operator|.
name|valueClass
operator|.
name|cast
argument_list|(
name|executionAttributes
operator|.
name|get
argument_list|(
name|attribute
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

