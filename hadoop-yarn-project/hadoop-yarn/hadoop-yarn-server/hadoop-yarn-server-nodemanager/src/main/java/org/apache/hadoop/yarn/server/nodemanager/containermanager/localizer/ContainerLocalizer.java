begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|getAllShells
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalDirAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskValidatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|concurrent
operator|.
name|HadoopExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnUncaughtExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|SerializedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|LocalizationProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|ResourceLocalizationSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LocalResourceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LocalizerHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LocalizerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ResourceStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|security
operator|.
name|LocalizerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|FSDownload
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_class
DECL|class|ContainerLocalizer
specifier|public
class|class
name|ContainerLocalizer
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ContainerLocalizer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|FILECACHE
specifier|public
specifier|static
specifier|final
name|String
name|FILECACHE
init|=
literal|"filecache"
decl_stmt|;
DECL|field|APPCACHE
specifier|public
specifier|static
specifier|final
name|String
name|APPCACHE
init|=
literal|"appcache"
decl_stmt|;
DECL|field|USERCACHE
specifier|public
specifier|static
specifier|final
name|String
name|USERCACHE
init|=
literal|"usercache"
decl_stmt|;
DECL|field|OUTPUTDIR
specifier|public
specifier|static
specifier|final
name|String
name|OUTPUTDIR
init|=
literal|"output"
decl_stmt|;
DECL|field|TOKEN_FILE_NAME_FMT
specifier|public
specifier|static
specifier|final
name|String
name|TOKEN_FILE_NAME_FMT
init|=
literal|"%s.tokens"
decl_stmt|;
DECL|field|WORKDIR
specifier|public
specifier|static
specifier|final
name|String
name|WORKDIR
init|=
literal|"work"
decl_stmt|;
DECL|field|APPCACHE_CTXT_FMT
specifier|private
specifier|static
specifier|final
name|String
name|APPCACHE_CTXT_FMT
init|=
literal|"%s.app.cache.dirs"
decl_stmt|;
DECL|field|USERCACHE_CTXT_FMT
specifier|private
specifier|static
specifier|final
name|String
name|USERCACHE_CTXT_FMT
init|=
literal|"%s.user.cache.dirs"
decl_stmt|;
DECL|field|FILECACHE_PERMS
specifier|private
specifier|static
specifier|final
name|FsPermission
name|FILECACHE_PERMS
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0710
argument_list|)
decl_stmt|;
DECL|field|USERCACHE_FOLDER_PERMS
specifier|private
specifier|static
specifier|final
name|FsPermission
name|USERCACHE_FOLDER_PERMS
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|String
name|user
decl_stmt|;
DECL|field|appId
specifier|private
specifier|final
name|String
name|appId
decl_stmt|;
DECL|field|localDirs
specifier|private
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|localDirs
decl_stmt|;
DECL|field|localizerId
specifier|private
specifier|final
name|String
name|localizerId
decl_stmt|;
DECL|field|lfs
specifier|private
specifier|final
name|FileContext
name|lfs
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|final
name|RecordFactory
name|recordFactory
decl_stmt|;
DECL|field|pendingResources
specifier|private
specifier|final
name|Map
argument_list|<
name|LocalResource
argument_list|,
name|Future
argument_list|<
name|Path
argument_list|>
argument_list|>
name|pendingResources
decl_stmt|;
DECL|field|appCacheDirContextName
specifier|private
specifier|final
name|String
name|appCacheDirContextName
decl_stmt|;
DECL|field|diskValidator
specifier|private
specifier|final
name|DiskValidator
name|diskValidator
decl_stmt|;
DECL|field|localizingThreads
specifier|private
name|Set
argument_list|<
name|Thread
argument_list|>
name|localizingThreads
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|ContainerLocalizer (FileContext lfs, String user, String appId, String localizerId, List<Path> localDirs, RecordFactory recordFactory)
specifier|public
name|ContainerLocalizer
parameter_list|(
name|FileContext
name|lfs
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|appId
parameter_list|,
name|String
name|localizerId
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|localDirs
parameter_list|,
name|RecordFactory
name|recordFactory
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|user
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot initialize for null user"
argument_list|)
throw|;
block|}
if|if
condition|(
literal|null
operator|==
name|localizerId
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot initialize for null containerId"
argument_list|)
throw|;
block|}
name|this
operator|.
name|lfs
operator|=
name|lfs
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|appId
operator|=
name|appId
expr_stmt|;
name|this
operator|.
name|localDirs
operator|=
name|localDirs
expr_stmt|;
name|this
operator|.
name|localizerId
operator|=
name|localizerId
expr_stmt|;
name|this
operator|.
name|recordFactory
operator|=
name|recordFactory
expr_stmt|;
name|this
operator|.
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|diskValidator
operator|=
name|DiskValidatorFactory
operator|.
name|getInstance
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|DISK_VALIDATOR
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_DISK_VALIDATOR
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Disk Validator: "
operator|+
name|YarnConfiguration
operator|.
name|DISK_VALIDATOR
operator|+
literal|" is loaded."
argument_list|)
expr_stmt|;
name|this
operator|.
name|appCacheDirContextName
operator|=
name|String
operator|.
name|format
argument_list|(
name|APPCACHE_CTXT_FMT
argument_list|,
name|appId
argument_list|)
expr_stmt|;
name|this
operator|.
name|pendingResources
operator|=
operator|new
name|HashMap
argument_list|<
name|LocalResource
argument_list|,
name|Future
argument_list|<
name|Path
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|getProxy (final InetSocketAddress nmAddr)
specifier|public
name|LocalizationProtocol
name|getProxy
parameter_list|(
specifier|final
name|InetSocketAddress
name|nmAddr
parameter_list|)
block|{
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
operator|(
name|LocalizationProtocol
operator|)
name|rpc
operator|.
name|getProxy
argument_list|(
name|LocalizationProtocol
operator|.
name|class
argument_list|,
name|nmAddr
argument_list|,
name|conf
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|runLocalization (final InetSocketAddress nmAddr)
specifier|public
name|void
name|runLocalization
parameter_list|(
specifier|final
name|InetSocketAddress
name|nmAddr
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// load credentials
name|initDirs
argument_list|(
name|conf
argument_list|,
name|user
argument_list|,
name|appId
argument_list|,
name|lfs
argument_list|,
name|localDirs
argument_list|)
expr_stmt|;
specifier|final
name|Credentials
name|creds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|DataInputStream
name|credFile
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// assume credentials in cwd
comment|// TODO: Fix
name|Path
name|tokenPath
init|=
operator|new
name|Path
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|TOKEN_FILE_NAME_FMT
argument_list|,
name|localizerId
argument_list|)
argument_list|)
decl_stmt|;
name|credFile
operator|=
name|lfs
operator|.
name|open
argument_list|(
name|tokenPath
argument_list|)
expr_stmt|;
name|creds
operator|.
name|readTokenStorageStream
argument_list|(
name|credFile
argument_list|)
expr_stmt|;
comment|// Explicitly deleting token file.
name|lfs
operator|.
name|delete
argument_list|(
name|tokenPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|credFile
operator|!=
literal|null
condition|)
block|{
name|credFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// create localizer context
name|UserGroupInformation
name|remoteUser
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|remoteUser
operator|.
name|addToken
argument_list|(
name|creds
operator|.
name|getToken
argument_list|(
name|LocalizerTokenIdentifier
operator|.
name|KIND
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|LocalizationProtocol
name|nodeManager
init|=
name|remoteUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|LocalizationProtocol
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|LocalizationProtocol
name|run
parameter_list|()
block|{
return|return
name|getProxy
argument_list|(
name|nmAddr
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// create user context
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user
argument_list|)
decl_stmt|;
for|for
control|(
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
range|:
name|creds
operator|.
name|getAllTokens
argument_list|()
control|)
block|{
name|ugi
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
name|ExecutorService
name|exec
init|=
literal|null
decl_stmt|;
try|try
block|{
name|exec
operator|=
name|createDownloadThreadPool
argument_list|()
expr_stmt|;
name|CompletionService
argument_list|<
name|Path
argument_list|>
name|ecs
init|=
name|createCompletionService
argument_list|(
name|exec
argument_list|)
decl_stmt|;
name|localizeFiles
argument_list|(
name|nodeManager
argument_list|,
name|ecs
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|exec
operator|!=
literal|null
condition|)
block|{
name|exec
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|destroyShellProcesses
argument_list|(
name|getAllShells
argument_list|()
argument_list|)
expr_stmt|;
name|exec
operator|.
name|awaitTermination
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
name|LocalDirAllocator
operator|.
name|removeContext
argument_list|(
name|appCacheDirContextName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|closeFileSystems
argument_list|(
name|ugi
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createDownloadThreadPool ()
name|ExecutorService
name|createDownloadThreadPool
parameter_list|()
block|{
return|return
name|HadoopExecutors
operator|.
name|newSingleThreadExecutor
argument_list|(
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"ContainerLocalizer Downloader"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createCompletionService (ExecutorService exec)
name|CompletionService
argument_list|<
name|Path
argument_list|>
name|createCompletionService
parameter_list|(
name|ExecutorService
name|exec
parameter_list|)
block|{
return|return
operator|new
name|ExecutorCompletionService
argument_list|<
name|Path
argument_list|>
argument_list|(
name|exec
argument_list|)
return|;
block|}
DECL|class|FSDownloadWrapper
class|class
name|FSDownloadWrapper
extends|extends
name|FSDownload
block|{
DECL|method|FSDownloadWrapper (FileContext files, UserGroupInformation ugi, Configuration conf, Path destDirPath, LocalResource resource)
name|FSDownloadWrapper
parameter_list|(
name|FileContext
name|files
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Path
name|destDirPath
parameter_list|,
name|LocalResource
name|resource
parameter_list|)
block|{
name|super
argument_list|(
name|files
argument_list|,
name|ugi
argument_list|,
name|conf
argument_list|,
name|destDirPath
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|Path
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|Thread
name|currentThread
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
name|localizingThreads
operator|.
name|add
argument_list|(
name|currentThread
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|doDownloadCall
argument_list|()
return|;
block|}
finally|finally
block|{
name|localizingThreads
operator|.
name|remove
argument_list|(
name|currentThread
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doDownloadCall ()
name|Path
name|doDownloadCall
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|super
operator|.
name|call
argument_list|()
return|;
block|}
block|}
DECL|method|download (Path destDirPath, LocalResource rsrc, UserGroupInformation ugi)
name|Callable
argument_list|<
name|Path
argument_list|>
name|download
parameter_list|(
name|Path
name|destDirPath
parameter_list|,
name|LocalResource
name|rsrc
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|IOException
block|{
comment|// For private localization FsDownload creates folder in destDirPath. Parent
comment|// directories till user filecache folder is created here.
if|if
condition|(
name|rsrc
operator|.
name|getVisibility
argument_list|()
operator|==
name|LocalResourceVisibility
operator|.
name|PRIVATE
condition|)
block|{
name|createParentDirs
argument_list|(
name|destDirPath
argument_list|)
expr_stmt|;
block|}
name|diskValidator
operator|.
name|checkStatus
argument_list|(
operator|new
name|File
argument_list|(
name|destDirPath
operator|.
name|toUri
argument_list|()
operator|.
name|getRawPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|FSDownloadWrapper
argument_list|(
name|lfs
argument_list|,
name|ugi
argument_list|,
name|conf
argument_list|,
name|destDirPath
argument_list|,
name|rsrc
argument_list|)
return|;
block|}
DECL|method|createParentDirs (Path destDirPath)
specifier|private
name|void
name|createParentDirs
parameter_list|(
name|Path
name|destDirPath
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|parent
init|=
name|destDirPath
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Path
name|cacheRoot
init|=
name|LocalCacheDirectoryManager
operator|.
name|getCacheDirectoryRoot
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|Stack
argument_list|<
name|Path
argument_list|>
name|dirs
init|=
operator|new
name|Stack
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|parent
operator|.
name|equals
argument_list|(
name|cacheRoot
argument_list|)
condition|)
block|{
name|dirs
operator|.
name|push
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|parent
operator|=
name|parent
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
comment|// Create directories with user cache permission
while|while
condition|(
operator|!
name|dirs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|createDir
argument_list|(
name|lfs
argument_list|,
name|dirs
operator|.
name|pop
argument_list|()
argument_list|,
name|USERCACHE_FOLDER_PERMS
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getEstimatedSize (LocalResource rsrc)
specifier|static
name|long
name|getEstimatedSize
parameter_list|(
name|LocalResource
name|rsrc
parameter_list|)
block|{
if|if
condition|(
name|rsrc
operator|.
name|getSize
argument_list|()
operator|<
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
switch|switch
condition|(
name|rsrc
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|ARCHIVE
case|:
case|case
name|PATTERN
case|:
return|return
literal|5
operator|*
name|rsrc
operator|.
name|getSize
argument_list|()
return|;
case|case
name|FILE
case|:
default|default:
return|return
name|rsrc
operator|.
name|getSize
argument_list|()
return|;
block|}
block|}
DECL|method|sleep (int duration)
name|void
name|sleep
parameter_list|(
name|int
name|duration
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
name|duration
argument_list|)
expr_stmt|;
block|}
DECL|method|closeFileSystems (UserGroupInformation ugi)
specifier|protected
name|void
name|closeFileSystems
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|)
block|{
try|try
block|{
name|FileSystem
operator|.
name|closeAllForUGI
argument_list|(
name|ugi
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to close filesystems: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|localizeFiles (LocalizationProtocol nodemanager, CompletionService<Path> cs, UserGroupInformation ugi)
specifier|protected
name|void
name|localizeFiles
parameter_list|(
name|LocalizationProtocol
name|nodemanager
parameter_list|,
name|CompletionService
argument_list|<
name|Path
argument_list|>
name|cs
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|LocalizerStatus
name|status
init|=
name|createStatus
argument_list|()
decl_stmt|;
name|LocalizerHeartbeatResponse
name|response
init|=
name|nodemanager
operator|.
name|heartbeat
argument_list|(
name|status
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|response
operator|.
name|getLocalizerAction
argument_list|()
condition|)
block|{
case|case
name|LIVE
case|:
name|List
argument_list|<
name|ResourceLocalizationSpec
argument_list|>
name|newRsrcs
init|=
name|response
operator|.
name|getResourceSpecs
argument_list|()
decl_stmt|;
for|for
control|(
name|ResourceLocalizationSpec
name|newRsrc
range|:
name|newRsrcs
control|)
block|{
if|if
condition|(
operator|!
name|pendingResources
operator|.
name|containsKey
argument_list|(
name|newRsrc
operator|.
name|getResource
argument_list|()
argument_list|)
condition|)
block|{
name|pendingResources
operator|.
name|put
argument_list|(
name|newRsrc
operator|.
name|getResource
argument_list|()
argument_list|,
name|cs
operator|.
name|submit
argument_list|(
name|download
argument_list|(
operator|new
name|Path
argument_list|(
name|newRsrc
operator|.
name|getDestinationDirectory
argument_list|()
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|,
name|newRsrc
operator|.
name|getResource
argument_list|()
argument_list|,
name|ugi
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|DIE
case|:
comment|// killall running localizations
for|for
control|(
name|Future
argument_list|<
name|Path
argument_list|>
name|pending
range|:
name|pendingResources
operator|.
name|values
argument_list|()
control|)
block|{
name|pending
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|status
operator|=
name|createStatus
argument_list|()
expr_stmt|;
comment|// ignore response while dying.
try|try
block|{
name|nodemanager
operator|.
name|heartbeat
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
comment|// Cannot do anything about this during death stage, let's just log
comment|// it.
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Heartbeat failed while dying: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|cs
operator|.
name|poll
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
comment|// TODO cleanup
throw|throw
name|e
throw|;
block|}
block|}
block|}
comment|/**    * Create the payload for the HeartBeat. Mainly the list of    * {@link LocalResourceStatus}es    *     * @return a {@link LocalizerStatus} that can be sent via heartbeat.    * @throws InterruptedException    */
DECL|method|createStatus ()
specifier|private
name|LocalizerStatus
name|createStatus
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|List
argument_list|<
name|LocalResourceStatus
argument_list|>
name|currentResources
init|=
operator|new
name|ArrayList
argument_list|<
name|LocalResourceStatus
argument_list|>
argument_list|()
decl_stmt|;
comment|// TODO: Synchronization??
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|LocalResource
argument_list|,
name|Future
argument_list|<
name|Path
argument_list|>
argument_list|>
argument_list|>
name|i
init|=
name|pendingResources
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|LocalResource
argument_list|,
name|Future
argument_list|<
name|Path
argument_list|>
argument_list|>
name|mapEntry
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|LocalResourceStatus
name|stat
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalResourceStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|stat
operator|.
name|setResource
argument_list|(
name|mapEntry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|Path
argument_list|>
name|fPath
init|=
name|mapEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|fPath
operator|.
name|isDone
argument_list|()
condition|)
block|{
try|try
block|{
name|Path
name|localPath
init|=
name|fPath
operator|.
name|get
argument_list|()
decl_stmt|;
name|stat
operator|.
name|setLocalPath
argument_list|(
name|URL
operator|.
name|fromPath
argument_list|(
name|localPath
argument_list|)
argument_list|)
expr_stmt|;
name|stat
operator|.
name|setLocalSize
argument_list|(
name|FileUtil
operator|.
name|getDU
argument_list|(
operator|new
name|File
argument_list|(
name|localPath
operator|.
name|getParent
argument_list|()
operator|.
name|toUri
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|stat
operator|.
name|setStatus
argument_list|(
name|ResourceStatusType
operator|.
name|FETCH_SUCCESS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|stat
operator|.
name|setStatus
argument_list|(
name|ResourceStatusType
operator|.
name|FETCH_FAILURE
argument_list|)
expr_stmt|;
name|stat
operator|.
name|setException
argument_list|(
name|SerializedException
operator|.
name|newInstance
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|e
parameter_list|)
block|{
name|stat
operator|.
name|setStatus
argument_list|(
name|ResourceStatusType
operator|.
name|FETCH_FAILURE
argument_list|)
expr_stmt|;
name|stat
operator|.
name|setException
argument_list|(
name|SerializedException
operator|.
name|newInstance
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO shouldn't remove until ACK
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|stat
operator|.
name|setStatus
argument_list|(
name|ResourceStatusType
operator|.
name|FETCH_PENDING
argument_list|)
expr_stmt|;
block|}
name|currentResources
operator|.
name|add
argument_list|(
name|stat
argument_list|)
expr_stmt|;
block|}
name|LocalizerStatus
name|status
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalizerStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|status
operator|.
name|setLocalizerId
argument_list|(
name|localizerId
argument_list|)
expr_stmt|;
name|status
operator|.
name|addAllResources
argument_list|(
name|currentResources
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
comment|/**    * Returns the JVM options to to launch the resource localizer.    * @param conf the configuration properties to launch the resource localizer.    */
DECL|method|getJavaOpts (Configuration conf)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getJavaOpts
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|opts
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CONTAINER_LOCALIZER_JAVA_OPTS_KEY
argument_list|,
name|YarnConfiguration
operator|.
name|NM_CONTAINER_LOCALIZER_JAVA_OPTS_DEFAULT
argument_list|)
decl_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|opts
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Adds the ContainerLocalizer arguments for a @{link ShellCommandExecutor},    * as expected by ContainerLocalizer.main    * @param command the current ShellCommandExecutor command line    * @param user localization user    * @param appId localized app id    * @param locId localizer id    * @param nmAddr nodemanager address    * @param localDirs list of local dirs    */
DECL|method|buildMainArgs (List<String> command, String user, String appId, String locId, InetSocketAddress nmAddr, List<String> localDirs, Configuration conf)
specifier|public
specifier|static
name|void
name|buildMainArgs
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|command
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|appId
parameter_list|,
name|String
name|locId
parameter_list|,
name|InetSocketAddress
name|nmAddr
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|localDirs
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|logLevel
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CONTAINER_LOCALIZER_LOG_LEVEL
argument_list|,
name|YarnConfiguration
operator|.
name|NM_CONTAINER_LOCALIZER_LOG_LEVEL_DEFAULT
argument_list|)
decl_stmt|;
name|addLog4jSystemProperties
argument_list|(
name|logLevel
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|command
operator|.
name|add
argument_list|(
name|ContainerLocalizer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|add
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|command
operator|.
name|add
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|command
operator|.
name|add
argument_list|(
name|locId
argument_list|)
expr_stmt|;
name|command
operator|.
name|add
argument_list|(
name|nmAddr
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|nmAddr
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|dir
range|:
name|localDirs
control|)
block|{
name|command
operator|.
name|add
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addLog4jSystemProperties ( String logLevel, List<String> command)
specifier|private
specifier|static
name|void
name|addLog4jSystemProperties
parameter_list|(
name|String
name|logLevel
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|command
parameter_list|)
block|{
name|command
operator|.
name|add
argument_list|(
literal|"-Dlog4j.configuration=container-log4j.properties"
argument_list|)
expr_stmt|;
name|command
operator|.
name|add
argument_list|(
literal|"-D"
operator|+
name|YarnConfiguration
operator|.
name|YARN_APP_CONTAINER_LOG_DIR
operator|+
literal|"="
operator|+
name|ApplicationConstants
operator|.
name|LOG_DIR_EXPANSION_VAR
argument_list|)
expr_stmt|;
name|command
operator|.
name|add
argument_list|(
literal|"-D"
operator|+
name|YarnConfiguration
operator|.
name|YARN_APP_CONTAINER_LOG_SIZE
operator|+
literal|"=0"
argument_list|)
expr_stmt|;
name|command
operator|.
name|add
argument_list|(
literal|"-Dhadoop.root.logger="
operator|+
name|logLevel
operator|+
literal|",CLA"
argument_list|)
expr_stmt|;
name|command
operator|.
name|add
argument_list|(
literal|"-Dhadoop.root.logfile=container-localizer-syslog"
argument_list|)
expr_stmt|;
block|}
DECL|method|main (String[] argv)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Throwable
block|{
name|Thread
operator|.
name|setDefaultUncaughtExceptionHandler
argument_list|(
operator|new
name|YarnUncaughtExceptionHandler
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|nRet
init|=
literal|0
decl_stmt|;
comment|// usage: $0 user appId locId host port app_log_dir user_dir [user_dir]*
comment|// let $x = $x/usercache for $local.dir
comment|// MKDIR $x/$user/appcache/$appid
comment|// MKDIR $x/$user/appcache/$appid/output
comment|// MKDIR $x/$user/appcache/$appid/filecache
comment|// LOAD $x/$user/appcache/$appid/appTokens
try|try
block|{
name|String
name|user
init|=
name|argv
index|[
literal|0
index|]
decl_stmt|;
name|String
name|appId
init|=
name|argv
index|[
literal|1
index|]
decl_stmt|;
name|String
name|locId
init|=
name|argv
index|[
literal|2
index|]
decl_stmt|;
name|InetSocketAddress
name|nmAddr
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|argv
index|[
literal|3
index|]
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|argv
index|[
literal|4
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|String
index|[]
name|sLocaldirs
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|argv
argument_list|,
literal|5
argument_list|,
name|argv
operator|.
name|length
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|localDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|(
name|sLocaldirs
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|sLocaldir
range|:
name|sLocaldirs
control|)
block|{
name|localDirs
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|sLocaldir
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|uid
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|user
operator|.
name|equals
argument_list|(
name|uid
argument_list|)
condition|)
block|{
comment|// TODO: fail localization
name|LOG
operator|.
name|warn
argument_list|(
literal|"Localization running as "
operator|+
name|uid
operator|+
literal|" not "
operator|+
name|user
argument_list|)
expr_stmt|;
block|}
name|ContainerLocalizer
name|localizer
init|=
operator|new
name|ContainerLocalizer
argument_list|(
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
argument_list|,
name|user
argument_list|,
name|appId
argument_list|,
name|locId
argument_list|,
name|localDirs
argument_list|,
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|localizer
operator|.
name|runLocalization
argument_list|(
name|nmAddr
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// Print traces to stdout so that they can be logged by the NM address
comment|// space in both DefaultCE and LCE cases
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in main:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|nRet
operator|=
operator|-
literal|1
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|exit
argument_list|(
name|nRet
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initDirs (Configuration conf, String user, String appId, FileContext lfs, List<Path> localDirs)
specifier|private
specifier|static
name|void
name|initDirs
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|appId
parameter_list|,
name|FileContext
name|lfs
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|localDirs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|localDirs
operator|||
literal|0
operator|==
name|localDirs
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot initialize without local dirs"
argument_list|)
throw|;
block|}
name|String
index|[]
name|appsFileCacheDirs
init|=
operator|new
name|String
index|[
name|localDirs
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|String
index|[]
name|usersFileCacheDirs
init|=
operator|new
name|String
index|[
name|localDirs
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|localDirs
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
comment|// $x/usercache/$user
name|Path
name|base
init|=
name|lfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|localDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|USERCACHE
argument_list|)
argument_list|,
name|user
argument_list|)
argument_list|)
decl_stmt|;
comment|// $x/usercache/$user/filecache
name|Path
name|userFileCacheDir
init|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
name|FILECACHE
argument_list|)
decl_stmt|;
name|usersFileCacheDirs
index|[
name|i
index|]
operator|=
name|userFileCacheDir
operator|.
name|toString
argument_list|()
expr_stmt|;
name|createDir
argument_list|(
name|lfs
argument_list|,
name|userFileCacheDir
argument_list|,
name|FILECACHE_PERMS
argument_list|)
expr_stmt|;
comment|// $x/usercache/$user/appcache/$appId
name|Path
name|appBase
init|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
operator|new
name|Path
argument_list|(
name|APPCACHE
argument_list|,
name|appId
argument_list|)
argument_list|)
decl_stmt|;
comment|// $x/usercache/$user/appcache/$appId/filecache
name|Path
name|appFileCacheDir
init|=
operator|new
name|Path
argument_list|(
name|appBase
argument_list|,
name|FILECACHE
argument_list|)
decl_stmt|;
name|appsFileCacheDirs
index|[
name|i
index|]
operator|=
name|appFileCacheDir
operator|.
name|toString
argument_list|()
expr_stmt|;
name|createDir
argument_list|(
name|lfs
argument_list|,
name|appFileCacheDir
argument_list|,
name|FILECACHE_PERMS
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setStrings
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|APPCACHE_CTXT_FMT
argument_list|,
name|appId
argument_list|)
argument_list|,
name|appsFileCacheDirs
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|USERCACHE_CTXT_FMT
argument_list|,
name|user
argument_list|)
argument_list|,
name|usersFileCacheDirs
argument_list|)
expr_stmt|;
block|}
DECL|method|createDir (FileContext lfs, Path dirPath, FsPermission perms)
specifier|private
specifier|static
name|void
name|createDir
parameter_list|(
name|FileContext
name|lfs
parameter_list|,
name|Path
name|dirPath
parameter_list|,
name|FsPermission
name|perms
parameter_list|)
throws|throws
name|IOException
block|{
name|lfs
operator|.
name|mkdir
argument_list|(
name|dirPath
argument_list|,
name|perms
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|perms
operator|.
name|equals
argument_list|(
name|perms
operator|.
name|applyUMask
argument_list|(
name|lfs
operator|.
name|getUMask
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|lfs
operator|.
name|setPermission
argument_list|(
name|dirPath
argument_list|,
name|perms
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|destroyShellProcesses (Set<Shell> shells)
specifier|private
name|void
name|destroyShellProcesses
parameter_list|(
name|Set
argument_list|<
name|Shell
argument_list|>
name|shells
parameter_list|)
block|{
for|for
control|(
name|Shell
name|shell
range|:
name|shells
control|)
block|{
if|if
condition|(
name|localizingThreads
operator|.
name|contains
argument_list|(
name|shell
operator|.
name|getWaitingThread
argument_list|()
argument_list|)
condition|)
block|{
name|shell
operator|.
name|getProcess
argument_list|()
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

