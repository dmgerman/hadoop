begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.container
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_comment
comment|/**  * This class is used to store assigned resource to a single container by  * resource types.  *  * Assigned resource could be list of String  *  * For example, we can assign container to:  * "numa": ["numa0"]  * "gpu": ["0", "1", "2", "3"]  * "fpga": ["1", "3"]  *  * This will be used for NM restart container recovery.  */
end_comment

begin_class
DECL|class|ResourceMappings
specifier|public
class|class
name|ResourceMappings
block|{
DECL|field|assignedResourcesMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|AssignedResources
argument_list|>
name|assignedResourcesMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Get all resource mappings.    * @param resourceType resourceType    * @return map of resource mapping    */
DECL|method|getAssignedResources (String resourceType)
specifier|public
name|List
argument_list|<
name|Serializable
argument_list|>
name|getAssignedResources
parameter_list|(
name|String
name|resourceType
parameter_list|)
block|{
name|AssignedResources
name|ar
init|=
name|assignedResourcesMap
operator|.
name|get
argument_list|(
name|resourceType
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ar
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
return|return
name|ar
operator|.
name|getAssignedResources
argument_list|()
return|;
block|}
comment|/**    * Adds the resources for a given resource type.    *    * @param resourceType Resource Type    * @param assigned Assigned resources to add    */
DECL|method|addAssignedResources (String resourceType, AssignedResources assigned)
specifier|public
name|void
name|addAssignedResources
parameter_list|(
name|String
name|resourceType
parameter_list|,
name|AssignedResources
name|assigned
parameter_list|)
block|{
name|assignedResourcesMap
operator|.
name|put
argument_list|(
name|resourceType
argument_list|,
name|assigned
argument_list|)
expr_stmt|;
block|}
comment|/**    * Stores resources assigned to a container for a given resource type.    */
DECL|class|AssignedResources
specifier|public
specifier|static
class|class
name|AssignedResources
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|1059491941955757926L
decl_stmt|;
DECL|field|resources
specifier|private
name|List
argument_list|<
name|Serializable
argument_list|>
name|resources
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|method|getAssignedResources ()
specifier|public
name|List
argument_list|<
name|Serializable
argument_list|>
name|getAssignedResources
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|resources
argument_list|)
return|;
block|}
DECL|method|updateAssignedResources (List<Serializable> list)
specifier|public
name|void
name|updateAssignedResources
parameter_list|(
name|List
argument_list|<
name|Serializable
argument_list|>
name|list
parameter_list|)
block|{
name|this
operator|.
name|resources
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|fromBytes (byte[] bytes)
specifier|public
specifier|static
name|AssignedResources
name|fromBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectInputStream
name|ois
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Serializable
argument_list|>
name|resources
decl_stmt|;
try|try
block|{
name|ByteArrayInputStream
name|bis
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|ois
operator|=
operator|new
name|ObjectInputStream
argument_list|(
name|bis
argument_list|)
expr_stmt|;
name|resources
operator|=
operator|(
name|List
argument_list|<
name|Serializable
argument_list|>
operator|)
name|ois
operator|.
name|readObject
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|ois
argument_list|)
expr_stmt|;
block|}
name|AssignedResources
name|ar
init|=
operator|new
name|AssignedResources
argument_list|()
decl_stmt|;
name|ar
operator|.
name|updateAssignedResources
argument_list|(
name|resources
argument_list|)
expr_stmt|;
return|return
name|ar
return|;
block|}
DECL|method|toBytes ()
specifier|public
name|byte
index|[]
name|toBytes
parameter_list|()
throws|throws
name|IOException
block|{
name|ObjectOutputStream
name|oos
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|bytes
decl_stmt|;
try|try
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|oos
operator|=
operator|new
name|ObjectOutputStream
argument_list|(
name|bos
argument_list|)
expr_stmt|;
name|oos
operator|.
name|writeObject
argument_list|(
name|resources
argument_list|)
expr_stmt|;
name|bytes
operator|=
name|bos
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|oos
argument_list|)
expr_stmt|;
block|}
return|return
name|bytes
return|;
block|}
block|}
block|}
end_class

end_unit

