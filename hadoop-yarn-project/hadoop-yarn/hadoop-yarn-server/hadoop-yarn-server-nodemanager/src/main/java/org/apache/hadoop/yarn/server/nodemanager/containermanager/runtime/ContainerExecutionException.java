begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * *  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  * /  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.runtime
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_comment
comment|/** Exception caused in a container runtime impl. 'Runtime' is not used in  * the class name to avoid confusion with a java RuntimeException  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|ContainerExecutionException
specifier|public
class|class
name|ContainerExecutionException
extends|extends
name|YarnException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|EXIT_CODE_UNSET
specifier|private
specifier|static
specifier|final
name|Integer
name|EXIT_CODE_UNSET
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|OUTPUT_UNSET
specifier|private
specifier|static
specifier|final
name|String
name|OUTPUT_UNSET
init|=
literal|"<unknown>"
decl_stmt|;
DECL|field|exitCode
specifier|private
name|Integer
name|exitCode
decl_stmt|;
DECL|field|output
specifier|private
name|String
name|output
decl_stmt|;
DECL|field|errorOutput
specifier|private
name|String
name|errorOutput
decl_stmt|;
DECL|method|ContainerExecutionException (String message)
specifier|public
name|ContainerExecutionException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|EXIT_CODE_UNSET
expr_stmt|;
name|output
operator|=
name|OUTPUT_UNSET
expr_stmt|;
name|errorOutput
operator|=
name|OUTPUT_UNSET
expr_stmt|;
block|}
DECL|method|ContainerExecutionException (Throwable throwable)
specifier|public
name|ContainerExecutionException
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|super
argument_list|(
name|throwable
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|EXIT_CODE_UNSET
expr_stmt|;
name|output
operator|=
name|OUTPUT_UNSET
expr_stmt|;
name|errorOutput
operator|=
name|OUTPUT_UNSET
expr_stmt|;
block|}
DECL|method|ContainerExecutionException (String message, Integer exitCode, String output, String errorOutput)
specifier|public
name|ContainerExecutionException
parameter_list|(
name|String
name|message
parameter_list|,
name|Integer
name|exitCode
parameter_list|,
name|String
name|output
parameter_list|,
name|String
name|errorOutput
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|this
operator|.
name|exitCode
operator|=
name|exitCode
expr_stmt|;
name|this
operator|.
name|output
operator|=
name|output
expr_stmt|;
name|this
operator|.
name|errorOutput
operator|=
name|errorOutput
expr_stmt|;
block|}
DECL|method|ContainerExecutionException (Throwable cause, Integer exitCode, String output, String errorOutput)
specifier|public
name|ContainerExecutionException
parameter_list|(
name|Throwable
name|cause
parameter_list|,
name|Integer
name|exitCode
parameter_list|,
name|String
name|output
parameter_list|,
name|String
name|errorOutput
parameter_list|)
block|{
name|super
argument_list|(
name|cause
argument_list|)
expr_stmt|;
name|this
operator|.
name|exitCode
operator|=
name|exitCode
expr_stmt|;
name|this
operator|.
name|output
operator|=
name|output
expr_stmt|;
name|this
operator|.
name|errorOutput
operator|=
name|errorOutput
expr_stmt|;
block|}
DECL|method|getExitCode ()
specifier|public
name|Integer
name|getExitCode
parameter_list|()
block|{
return|return
name|exitCode
return|;
block|}
DECL|method|getOutput ()
specifier|public
name|String
name|getOutput
parameter_list|()
block|{
return|return
name|output
return|;
block|}
DECL|method|getErrorOutput ()
specifier|public
name|String
name|getErrorOutput
parameter_list|()
block|{
return|return
name|errorOutput
return|;
block|}
block|}
end_class

end_unit

