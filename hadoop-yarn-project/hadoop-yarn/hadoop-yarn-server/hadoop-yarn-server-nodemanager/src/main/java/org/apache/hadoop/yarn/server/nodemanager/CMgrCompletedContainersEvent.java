begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_class
DECL|class|CMgrCompletedContainersEvent
specifier|public
class|class
name|CMgrCompletedContainersEvent
extends|extends
name|ContainerManagerEvent
block|{
DECL|field|containerToCleanup
specifier|private
specifier|final
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containerToCleanup
decl_stmt|;
DECL|field|reason
specifier|private
specifier|final
name|Reason
name|reason
decl_stmt|;
DECL|method|CMgrCompletedContainersEvent (List<ContainerId> containersToCleanup, Reason reason)
specifier|public
name|CMgrCompletedContainersEvent
parameter_list|(
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containersToCleanup
parameter_list|,
name|Reason
name|reason
parameter_list|)
block|{
name|super
argument_list|(
name|ContainerManagerEventType
operator|.
name|FINISH_CONTAINERS
argument_list|)
expr_stmt|;
name|this
operator|.
name|containerToCleanup
operator|=
name|containersToCleanup
expr_stmt|;
name|this
operator|.
name|reason
operator|=
name|reason
expr_stmt|;
block|}
DECL|method|getContainersToCleanup ()
specifier|public
name|List
argument_list|<
name|ContainerId
argument_list|>
name|getContainersToCleanup
parameter_list|()
block|{
return|return
name|this
operator|.
name|containerToCleanup
return|;
block|}
DECL|method|getReason ()
specifier|public
name|Reason
name|getReason
parameter_list|()
block|{
return|return
name|reason
return|;
block|}
DECL|enum|Reason
specifier|public
enum|enum
name|Reason
block|{
comment|/**      * Container is killed as NodeManager is shutting down      */
DECL|enumConstant|ON_SHUTDOWN
name|ON_SHUTDOWN
block|,
comment|/**      * Container is killed as the Nodemanager is re-syncing with the      * ResourceManager      */
DECL|enumConstant|ON_NODEMANAGER_RESYNC
name|ON_NODEMANAGER_RESYNC
block|,
comment|/**      * Container is killed on request by the ResourceManager      */
DECL|enumConstant|BY_RESOURCEMANAGER
name|BY_RESOURCEMANAGER
block|}
block|}
end_class

end_unit

