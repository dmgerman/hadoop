begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.nodelabels
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|nodelabels
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|EnumUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAttributeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|NodeLabelUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Configuration based node attributes provider.  */
end_comment

begin_class
DECL|class|ConfigurationNodeAttributesProvider
specifier|public
class|class
name|ConfigurationNodeAttributesProvider
extends|extends
name|NodeAttributesProvider
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConfigurationNodeAttributesProvider
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NODE_ATTRIBUTES_DELIMITER
specifier|private
specifier|static
specifier|final
name|String
name|NODE_ATTRIBUTES_DELIMITER
init|=
literal|":"
decl_stmt|;
DECL|field|NODE_ATTRIBUTE_DELIMITER
specifier|private
specifier|static
specifier|final
name|String
name|NODE_ATTRIBUTE_DELIMITER
init|=
literal|","
decl_stmt|;
DECL|method|ConfigurationNodeAttributesProvider ()
specifier|public
name|ConfigurationNodeAttributesProvider
parameter_list|()
block|{
name|super
argument_list|(
literal|"Configuration Based Node Attributes Provider"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|taskInterval
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NODE_ATTRIBUTES_PROVIDER_FETCH_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_NODE_ATTRIBUTES_PROVIDER_FETCH_INTERVAL_MS
argument_list|)
decl_stmt|;
name|this
operator|.
name|setIntervalTime
argument_list|(
name|taskInterval
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|updateNodeAttributesFromConfig (Configuration conf)
specifier|private
name|void
name|updateNodeAttributesFromConfig
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|configuredNodeAttributes
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_PROVIDER_CONFIGURED_NODE_ATTRIBUTES
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|setDescriptors
argument_list|(
name|parseAttributes
argument_list|(
name|configuredNodeAttributes
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|parseAttributes (String config)
specifier|public
name|Set
argument_list|<
name|NodeAttribute
argument_list|>
name|parseAttributes
parameter_list|(
name|String
name|config
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|config
argument_list|)
condition|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
name|Set
argument_list|<
name|NodeAttribute
argument_list|>
name|attributeSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Configuration value should be in one line, format:
comment|// "ATTRIBUTE_NAME,ATTRIBUTE_TYPE,ATTRIBUTE_VALUE",
comment|// multiple node-attributes are delimited by ":".
comment|// Each attribute str should not container any space.
name|String
index|[]
name|attributeStrs
init|=
name|config
operator|.
name|split
argument_list|(
name|NODE_ATTRIBUTES_DELIMITER
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|attributeStr
range|:
name|attributeStrs
control|)
block|{
name|String
index|[]
name|fields
init|=
name|attributeStr
operator|.
name|split
argument_list|(
name|NODE_ATTRIBUTE_DELIMITER
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid value for "
operator|+
name|YarnConfiguration
operator|.
name|NM_PROVIDER_CONFIGURED_NODE_ATTRIBUTES
operator|+
literal|"="
operator|+
name|config
argument_list|)
throw|;
block|}
comment|// We don't allow user config to overwrite our dist prefix,
comment|// so disallow any prefix set in the configuration.
if|if
condition|(
name|fields
index|[
literal|0
index|]
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Node attribute set in "
operator|+
name|YarnConfiguration
operator|.
name|NM_PROVIDER_CONFIGURED_NODE_ATTRIBUTES
operator|+
literal|" should not contain any prefix."
argument_list|)
throw|;
block|}
comment|// Make sure attribute type is valid.
if|if
condition|(
operator|!
name|EnumUtils
operator|.
name|isValidEnum
argument_list|(
name|NodeAttributeType
operator|.
name|class
argument_list|,
name|fields
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid node attribute type: "
operator|+
name|fields
index|[
literal|1
index|]
operator|+
literal|", valid values are "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|NodeAttributeType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
comment|// Automatically setup prefix for collected attributes
name|NodeAttribute
name|na
init|=
name|NodeAttribute
operator|.
name|newInstance
argument_list|(
name|NodeAttribute
operator|.
name|PREFIX_DISTRIBUTED
argument_list|,
name|fields
index|[
literal|0
index|]
argument_list|,
name|NodeAttributeType
operator|.
name|valueOf
argument_list|(
name|fields
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|fields
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
comment|// Since a NodeAttribute is identical with another one as long as
comment|// their prefix and name are same, to avoid attributes getting
comment|// overwritten by ambiguous attribute, make sure it fails in such
comment|// case.
if|if
condition|(
operator|!
name|attributeSet
operator|.
name|add
argument_list|(
name|na
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Ambiguous node attribute is found: "
operator|+
name|na
operator|.
name|toString
argument_list|()
operator|+
literal|", a same attribute already exists"
argument_list|)
throw|;
block|}
block|}
comment|// Before updating the attributes to the provider,
comment|// verify if they are valid
try|try
block|{
name|NodeLabelUtil
operator|.
name|validateNodeAttributes
argument_list|(
name|attributeSet
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Node attributes set by configuration property: "
operator|+
name|YarnConfiguration
operator|.
name|NM_PROVIDER_CONFIGURED_NODE_ATTRIBUTES
operator|+
literal|" is not valid. Detail message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|attributeSet
return|;
block|}
DECL|class|ConfigurationMonitorTimerTask
specifier|private
class|class
name|ConfigurationMonitorTimerTask
extends|extends
name|TimerTask
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|updateNodeAttributesFromConfig
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to update node attributes from "
operator|+
name|YarnConfiguration
operator|.
name|NM_PROVIDER_CONFIGURED_NODE_ATTRIBUTES
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|cleanUp ()
specifier|protected
name|void
name|cleanUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Nothing to cleanup
block|}
annotation|@
name|Override
DECL|method|createTimerTask ()
specifier|public
name|TimerTask
name|createTimerTask
parameter_list|()
block|{
return|return
operator|new
name|ConfigurationMonitorTimerTask
argument_list|()
return|;
block|}
block|}
end_class

end_unit

