begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|ShellCommandExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DefaultContainerExecutor
operator|.
name|LocalWrapperScriptBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ContainerLocalizer
import|;
end_import

begin_comment
comment|/**  * Windows secure container executor. Uses winutils task createAsUser.  *  */
end_comment

begin_class
DECL|class|WindowsSecureContainerExecutor
specifier|public
class|class
name|WindowsSecureContainerExecutor
extends|extends
name|DefaultContainerExecutor
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|WindowsSecureContainerExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|WindowsSecureWrapperScriptBuilder
specifier|private
class|class
name|WindowsSecureWrapperScriptBuilder
extends|extends
name|LocalWrapperScriptBuilder
block|{
DECL|method|WindowsSecureWrapperScriptBuilder (Path containerWorkDir)
specifier|public
name|WindowsSecureWrapperScriptBuilder
parameter_list|(
name|Path
name|containerWorkDir
parameter_list|)
block|{
name|super
argument_list|(
name|containerWorkDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeLocalWrapperScript (Path launchDst, Path pidFile, PrintStream pout)
specifier|protected
name|void
name|writeLocalWrapperScript
parameter_list|(
name|Path
name|launchDst
parameter_list|,
name|Path
name|pidFile
parameter_list|,
name|PrintStream
name|pout
parameter_list|)
block|{
name|pout
operator|.
name|format
argument_list|(
literal|"@call \"%s\""
argument_list|,
name|launchDst
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|nodeManagerGroup
specifier|private
name|String
name|nodeManagerGroup
decl_stmt|;
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nodeManagerGroup
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_WINDOWS_SECURE_CONTAINER_GROUP
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRunCommand (String command, String groupId, String userName, Path pidFile, Configuration conf)
specifier|protected
name|String
index|[]
name|getRunCommand
parameter_list|(
name|String
name|command
parameter_list|,
name|String
name|groupId
parameter_list|,
name|String
name|userName
parameter_list|,
name|Path
name|pidFile
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|String
index|[]
block|{
name|Shell
operator|.
name|WINUTILS
block|,
literal|"task"
block|,
literal|"createAsUser"
block|,
name|groupId
block|,
name|userName
block|,
name|pidFile
operator|.
name|toString
argument_list|()
block|,
literal|"cmd /c "
operator|+
name|command
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|getLocalWrapperScriptBuilder ( String containerIdStr, Path containerWorkDir)
specifier|protected
name|LocalWrapperScriptBuilder
name|getLocalWrapperScriptBuilder
parameter_list|(
name|String
name|containerIdStr
parameter_list|,
name|Path
name|containerWorkDir
parameter_list|)
block|{
return|return
operator|new
name|WindowsSecureWrapperScriptBuilder
argument_list|(
name|containerWorkDir
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|copyFile (Path src, Path dst, String owner)
specifier|protected
name|void
name|copyFile
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|,
name|String
name|owner
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|copyFile
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
name|owner
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|setOwner
argument_list|(
name|dst
argument_list|,
name|owner
argument_list|,
name|nodeManagerGroup
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createDir (Path dirPath, FsPermission perms, boolean createParent, String owner)
specifier|protected
name|void
name|createDir
parameter_list|(
name|Path
name|dirPath
parameter_list|,
name|FsPermission
name|perms
parameter_list|,
name|boolean
name|createParent
parameter_list|,
name|String
name|owner
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|createDir
argument_list|(
name|dirPath
argument_list|,
name|perms
argument_list|,
name|createParent
argument_list|,
name|owner
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|setOwner
argument_list|(
name|dirPath
argument_list|,
name|owner
argument_list|,
name|nodeManagerGroup
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setScriptExecutable (Path script, String owner)
specifier|protected
name|void
name|setScriptExecutable
parameter_list|(
name|Path
name|script
parameter_list|,
name|String
name|owner
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|setScriptExecutable
argument_list|(
name|script
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|setOwner
argument_list|(
name|script
argument_list|,
name|owner
argument_list|,
name|nodeManagerGroup
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|localizeClasspathJar (Path classpathJar, String owner)
specifier|public
name|void
name|localizeClasspathJar
parameter_list|(
name|Path
name|classpathJar
parameter_list|,
name|String
name|owner
parameter_list|)
throws|throws
name|IOException
block|{
name|lfs
operator|.
name|setOwner
argument_list|(
name|classpathJar
argument_list|,
name|owner
argument_list|,
name|nodeManagerGroup
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startLocalizer (Path nmPrivateContainerTokens, InetSocketAddress nmAddr, String user, String appId, String locId, List<String> localDirs, List<String> logDirs)
specifier|public
name|void
name|startLocalizer
parameter_list|(
name|Path
name|nmPrivateContainerTokens
parameter_list|,
name|InetSocketAddress
name|nmAddr
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|appId
parameter_list|,
name|String
name|locId
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|localDirs
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|logDirs
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|createUserLocalDirs
argument_list|(
name|localDirs
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|createUserCacheDirs
argument_list|(
name|localDirs
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|createAppDirs
argument_list|(
name|localDirs
argument_list|,
name|user
argument_list|,
name|appId
argument_list|)
expr_stmt|;
name|createAppLogDirs
argument_list|(
name|appId
argument_list|,
name|logDirs
argument_list|,
name|user
argument_list|)
expr_stmt|;
comment|// TODO: Why pick first app dir. The same in LCE why not random?
name|Path
name|appStorageDir
init|=
name|getFirstApplicationDir
argument_list|(
name|localDirs
argument_list|,
name|user
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|String
name|tokenFn
init|=
name|String
operator|.
name|format
argument_list|(
name|ContainerLocalizer
operator|.
name|TOKEN_FILE_NAME_FMT
argument_list|,
name|locId
argument_list|)
decl_stmt|;
name|Path
name|tokenDst
init|=
operator|new
name|Path
argument_list|(
name|appStorageDir
argument_list|,
name|tokenFn
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Copying from "
operator|+
name|nmPrivateContainerTokens
operator|+
literal|" to "
operator|+
name|tokenDst
argument_list|)
expr_stmt|;
name|copyFile
argument_list|(
name|nmPrivateContainerTokens
argument_list|,
name|tokenDst
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|command
decl_stmt|;
name|String
index|[]
name|commandArray
decl_stmt|;
name|ShellCommandExecutor
name|shExec
decl_stmt|;
name|File
name|cwdApp
init|=
operator|new
name|File
argument_list|(
name|appStorageDir
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"cwdApp: %s"
argument_list|,
name|cwdApp
argument_list|)
argument_list|)
expr_stmt|;
name|command
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|command
operator|.
name|add
argument_list|(
name|Shell
operator|.
name|WINUTILS
argument_list|)
expr_stmt|;
name|command
operator|.
name|add
argument_list|(
literal|"task"
argument_list|)
expr_stmt|;
name|command
operator|.
name|add
argument_list|(
literal|"createAsUser"
argument_list|)
expr_stmt|;
name|command
operator|.
name|add
argument_list|(
literal|"START_LOCALIZER_"
operator|+
name|locId
argument_list|)
expr_stmt|;
name|command
operator|.
name|add
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|command
operator|.
name|add
argument_list|(
literal|"nul:"
argument_list|)
expr_stmt|;
comment|// PID file
comment|//use same jvm as parent
name|File
name|jvm
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
argument_list|,
literal|"bin"
argument_list|)
argument_list|,
literal|"java.exe"
argument_list|)
decl_stmt|;
name|command
operator|.
name|add
argument_list|(
name|jvm
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Build a temp classpath jar. See ContainerLaunch.sanitizeEnv().
comment|// Passing CLASSPATH explicitly is *way* too long for command line.
name|String
name|classPath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|System
operator|.
name|getenv
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|classPathJar
init|=
name|FileUtil
operator|.
name|createJarWithClassPath
argument_list|(
name|classPath
argument_list|,
name|appStorageDir
argument_list|,
name|env
argument_list|)
decl_stmt|;
name|localizeClasspathJar
argument_list|(
operator|new
name|Path
argument_list|(
name|classPathJar
argument_list|)
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|command
operator|.
name|add
argument_list|(
literal|"-classpath"
argument_list|)
expr_stmt|;
name|command
operator|.
name|add
argument_list|(
name|classPathJar
argument_list|)
expr_stmt|;
name|String
name|javaLibPath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.library.path"
argument_list|)
decl_stmt|;
if|if
condition|(
name|javaLibPath
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|add
argument_list|(
literal|"-Djava.library.path="
operator|+
name|javaLibPath
argument_list|)
expr_stmt|;
block|}
name|ContainerLocalizer
operator|.
name|buildMainArgs
argument_list|(
name|command
argument_list|,
name|user
argument_list|,
name|appId
argument_list|,
name|locId
argument_list|,
name|nmAddr
argument_list|,
name|localDirs
argument_list|)
expr_stmt|;
name|commandArray
operator|=
name|command
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|command
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|shExec
operator|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|commandArray
argument_list|,
name|cwdApp
argument_list|)
expr_stmt|;
name|shExec
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

