begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|DelegateToFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RawLocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
operator|.
name|Windows
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|NativeCodeLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|CommandExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ContainerLocalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ResourceLocalizationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|executor
operator|.
name|LocalizerStartContext
import|;
end_import

begin_comment
comment|/**  * Windows secure container executor (WSCE).  * This class offers a secure container executor on Windows, similar to the   * LinuxContainerExecutor. As the NM does not run on a high privileged context,   * this class delegates elevated operations to the helper hadoopwintuilsvc,   * implemented by the winutils.exe running as a service.  * JNI and LRPC is used to communicate with the privileged service.  */
end_comment

begin_class
DECL|class|WindowsSecureContainerExecutor
specifier|public
class|class
name|WindowsSecureContainerExecutor
extends|extends
name|DefaultContainerExecutor
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|WindowsSecureContainerExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|LOCALIZER_PID_FORMAT
specifier|public
specifier|static
specifier|final
name|String
name|LOCALIZER_PID_FORMAT
init|=
literal|"STAR_LOCALIZER_%s"
decl_stmt|;
comment|/**    * This class is a container for the JNI Win32 native methods used by WSCE.    */
DECL|class|Native
specifier|private
specifier|static
class|class
name|Native
block|{
DECL|field|nativeLoaded
specifier|private
specifier|static
name|boolean
name|nativeLoaded
init|=
literal|false
decl_stmt|;
static|static
block|{
if|if
condition|(
name|NativeCodeLoader
operator|.
name|isNativeCodeLoaded
argument_list|()
condition|)
block|{
try|try
block|{
name|initWsceNative
argument_list|()
expr_stmt|;
name|nativeLoaded
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unable to initialize WSCE Native libraries"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Initialize the JNI method ID and class ID cache */
DECL|method|initWsceNative ()
specifier|private
specifier|static
specifier|native
name|void
name|initWsceNative
parameter_list|()
function_decl|;
comment|/**      * This class contains methods used by the WindowsSecureContainerExecutor      * file system operations.      */
DECL|class|Elevated
specifier|public
specifier|static
class|class
name|Elevated
block|{
DECL|field|MOVE_FILE
specifier|private
specifier|static
specifier|final
name|int
name|MOVE_FILE
init|=
literal|1
decl_stmt|;
DECL|field|COPY_FILE
specifier|private
specifier|static
specifier|final
name|int
name|COPY_FILE
init|=
literal|2
decl_stmt|;
DECL|method|mkdir (Path dirName)
specifier|public
specifier|static
name|void
name|mkdir
parameter_list|(
name|Path
name|dirName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|nativeLoaded
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Native WSCE libraries are required for mkdir"
argument_list|)
throw|;
block|}
name|elevatedMkDirImpl
argument_list|(
name|dirName
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|elevatedMkDirImpl (String dirName)
specifier|private
specifier|static
specifier|native
name|void
name|elevatedMkDirImpl
parameter_list|(
name|String
name|dirName
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|chown (Path fileName, String user, String group)
specifier|public
specifier|static
name|void
name|chown
parameter_list|(
name|Path
name|fileName
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|group
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|nativeLoaded
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Native WSCE libraries are required for chown"
argument_list|)
throw|;
block|}
name|elevatedChownImpl
argument_list|(
name|fileName
operator|.
name|toString
argument_list|()
argument_list|,
name|user
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
DECL|method|elevatedChownImpl (String fileName, String user, String group)
specifier|private
specifier|static
specifier|native
name|void
name|elevatedChownImpl
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|group
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|move (Path src, Path dst, boolean replaceExisting)
specifier|public
specifier|static
name|void
name|move
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|,
name|boolean
name|replaceExisting
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|nativeLoaded
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Native WSCE libraries are required for move"
argument_list|)
throw|;
block|}
name|elevatedCopyImpl
argument_list|(
name|MOVE_FILE
argument_list|,
name|src
operator|.
name|toString
argument_list|()
argument_list|,
name|dst
operator|.
name|toString
argument_list|()
argument_list|,
name|replaceExisting
argument_list|)
expr_stmt|;
block|}
DECL|method|copy (Path src, Path dst, boolean replaceExisting)
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|,
name|boolean
name|replaceExisting
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|nativeLoaded
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Native WSCE libraries are required for copy"
argument_list|)
throw|;
block|}
name|elevatedCopyImpl
argument_list|(
name|COPY_FILE
argument_list|,
name|src
operator|.
name|toString
argument_list|()
argument_list|,
name|dst
operator|.
name|toString
argument_list|()
argument_list|,
name|replaceExisting
argument_list|)
expr_stmt|;
block|}
DECL|method|elevatedCopyImpl (int operation, String src, String dst, boolean replaceExisting)
specifier|private
specifier|static
specifier|native
name|void
name|elevatedCopyImpl
parameter_list|(
name|int
name|operation
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|dst
parameter_list|,
name|boolean
name|replaceExisting
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|chmod (Path fileName, int mode)
specifier|public
specifier|static
name|void
name|chmod
parameter_list|(
name|Path
name|fileName
parameter_list|,
name|int
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|nativeLoaded
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Native WSCE libraries are required for chmod"
argument_list|)
throw|;
block|}
name|elevatedChmodImpl
argument_list|(
name|fileName
operator|.
name|toString
argument_list|()
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
DECL|method|elevatedChmodImpl (String path, int mode)
specifier|private
specifier|static
specifier|native
name|void
name|elevatedChmodImpl
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|mode
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|killTask (String containerName)
specifier|public
specifier|static
name|void
name|killTask
parameter_list|(
name|String
name|containerName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|nativeLoaded
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Native WSCE libraries are required for killTask"
argument_list|)
throw|;
block|}
name|elevatedKillTaskImpl
argument_list|(
name|containerName
argument_list|)
expr_stmt|;
block|}
DECL|method|elevatedKillTaskImpl (String containerName)
specifier|private
specifier|static
specifier|native
name|void
name|elevatedKillTaskImpl
parameter_list|(
name|String
name|containerName
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|create (Path f, boolean append)
specifier|public
specifier|static
name|OutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|append
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|nativeLoaded
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Native WSCE libraries are required for create"
argument_list|)
throw|;
block|}
name|long
name|desiredAccess
init|=
name|Windows
operator|.
name|GENERIC_WRITE
decl_stmt|;
name|long
name|shareMode
init|=
literal|0L
decl_stmt|;
name|long
name|creationDisposition
init|=
name|append
condition|?
name|Windows
operator|.
name|OPEN_ALWAYS
else|:
name|Windows
operator|.
name|CREATE_ALWAYS
decl_stmt|;
name|long
name|flags
init|=
name|Windows
operator|.
name|FILE_ATTRIBUTE_NORMAL
decl_stmt|;
name|String
name|fileName
init|=
name|f
operator|.
name|toString
argument_list|()
decl_stmt|;
name|fileName
operator|=
name|fileName
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'\\'
argument_list|)
expr_stmt|;
name|long
name|hFile
init|=
name|elevatedCreateImpl
argument_list|(
name|fileName
argument_list|,
name|desiredAccess
argument_list|,
name|shareMode
argument_list|,
name|creationDisposition
argument_list|,
name|flags
argument_list|)
decl_stmt|;
return|return
operator|new
name|FileOutputStream
argument_list|(
name|WinutilsProcessStub
operator|.
name|getFileDescriptorFromHandle
argument_list|(
name|hFile
argument_list|)
argument_list|)
return|;
block|}
DECL|method|elevatedCreateImpl (String path, long desiredAccess, long shareMode, long creationDisposition, long flags)
specifier|private
specifier|static
specifier|native
name|long
name|elevatedCreateImpl
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|desiredAccess
parameter_list|,
name|long
name|shareMode
parameter_list|,
name|long
name|creationDisposition
parameter_list|,
name|long
name|flags
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|deleteFile (Path path)
specifier|public
specifier|static
name|boolean
name|deleteFile
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|nativeLoaded
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Native WSCE libraries are required for deleteFile"
argument_list|)
throw|;
block|}
return|return
name|elevatedDeletePathImpl
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|deleteDirectory (Path path)
specifier|public
specifier|static
name|boolean
name|deleteDirectory
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|nativeLoaded
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Native WSCE libraries are required for deleteDirectory"
argument_list|)
throw|;
block|}
return|return
name|elevatedDeletePathImpl
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|elevatedDeletePathImpl (String path, boolean isDir)
specifier|public
specifier|native
specifier|static
name|boolean
name|elevatedDeletePathImpl
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|isDir
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**      * Wraps a process started by the winutils service helper.      *      */
DECL|class|WinutilsProcessStub
specifier|public
specifier|static
class|class
name|WinutilsProcessStub
extends|extends
name|Process
block|{
DECL|field|hProcess
specifier|private
specifier|final
name|long
name|hProcess
decl_stmt|;
DECL|field|hThread
specifier|private
specifier|final
name|long
name|hThread
decl_stmt|;
DECL|field|disposed
specifier|private
name|boolean
name|disposed
init|=
literal|false
decl_stmt|;
DECL|field|stdErr
specifier|private
specifier|final
name|InputStream
name|stdErr
decl_stmt|;
DECL|field|stdOut
specifier|private
specifier|final
name|InputStream
name|stdOut
decl_stmt|;
DECL|field|stdIn
specifier|private
specifier|final
name|OutputStream
name|stdIn
decl_stmt|;
DECL|method|WinutilsProcessStub (long hProcess, long hThread, long hStdIn, long hStdOut, long hStdErr)
specifier|public
name|WinutilsProcessStub
parameter_list|(
name|long
name|hProcess
parameter_list|,
name|long
name|hThread
parameter_list|,
name|long
name|hStdIn
parameter_list|,
name|long
name|hStdOut
parameter_list|,
name|long
name|hStdErr
parameter_list|)
block|{
name|this
operator|.
name|hProcess
operator|=
name|hProcess
expr_stmt|;
name|this
operator|.
name|hThread
operator|=
name|hThread
expr_stmt|;
name|this
operator|.
name|stdIn
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|getFileDescriptorFromHandle
argument_list|(
name|hStdIn
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|stdOut
operator|=
operator|new
name|FileInputStream
argument_list|(
name|getFileDescriptorFromHandle
argument_list|(
name|hStdOut
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|stdErr
operator|=
operator|new
name|FileInputStream
argument_list|(
name|getFileDescriptorFromHandle
argument_list|(
name|hStdErr
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getFileDescriptorFromHandle (long handle)
specifier|public
specifier|static
specifier|native
name|FileDescriptor
name|getFileDescriptorFromHandle
parameter_list|(
name|long
name|handle
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|destroy ()
specifier|public
specifier|native
name|void
name|destroy
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|exitValue ()
specifier|public
specifier|native
name|int
name|exitValue
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|getErrorStream ()
specifier|public
name|InputStream
name|getErrorStream
parameter_list|()
block|{
return|return
name|stdErr
return|;
block|}
annotation|@
name|Override
DECL|method|getInputStream ()
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
block|{
return|return
name|stdOut
return|;
block|}
annotation|@
name|Override
DECL|method|getOutputStream ()
specifier|public
name|OutputStream
name|getOutputStream
parameter_list|()
block|{
return|return
name|stdIn
return|;
block|}
annotation|@
name|Override
DECL|method|waitFor ()
specifier|public
specifier|native
name|int
name|waitFor
parameter_list|()
throws|throws
name|InterruptedException
function_decl|;
DECL|method|dispose ()
specifier|public
specifier|synchronized
specifier|native
name|void
name|dispose
parameter_list|()
function_decl|;
DECL|method|resume ()
specifier|public
specifier|native
name|void
name|resume
parameter_list|()
throws|throws
name|NativeIOException
function_decl|;
block|}
DECL|method|createTaskAsUser ( String cwd, String jobName, String user, String pidFile, String cmdLine)
specifier|public
specifier|synchronized
specifier|static
name|WinutilsProcessStub
name|createTaskAsUser
parameter_list|(
name|String
name|cwd
parameter_list|,
name|String
name|jobName
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|pidFile
parameter_list|,
name|String
name|cmdLine
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|nativeLoaded
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Native WSCE  libraries are required for createTaskAsUser"
argument_list|)
throw|;
block|}
synchronized|synchronized
init|(
name|Shell
operator|.
name|WindowsProcessLaunchLock
init|)
block|{
return|return
name|createTaskAsUser0
argument_list|(
name|cwd
argument_list|,
name|jobName
argument_list|,
name|user
argument_list|,
name|pidFile
argument_list|,
name|cmdLine
argument_list|)
return|;
block|}
block|}
DECL|method|createTaskAsUser0 ( String cwd, String jobName, String user, String pidFile, String cmdLine)
specifier|private
specifier|static
specifier|native
name|WinutilsProcessStub
name|createTaskAsUser0
parameter_list|(
name|String
name|cwd
parameter_list|,
name|String
name|jobName
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|pidFile
parameter_list|,
name|String
name|cmdLine
parameter_list|)
throws|throws
name|NativeIOException
function_decl|;
block|}
comment|/**    * A shell script wrapper builder for WSCE.      * Overwrites the default behavior to remove the creation of the PID file in     * the script wrapper. WSCE creates the pid file as part of launching the     * task in winutils.    */
DECL|class|WindowsSecureWrapperScriptBuilder
specifier|private
class|class
name|WindowsSecureWrapperScriptBuilder
extends|extends
name|LocalWrapperScriptBuilder
block|{
DECL|method|WindowsSecureWrapperScriptBuilder (Path containerWorkDir)
specifier|public
name|WindowsSecureWrapperScriptBuilder
parameter_list|(
name|Path
name|containerWorkDir
parameter_list|)
block|{
name|super
argument_list|(
name|containerWorkDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeLocalWrapperScript (Path launchDst, Path pidFile, PrintStream pout)
specifier|protected
name|void
name|writeLocalWrapperScript
parameter_list|(
name|Path
name|launchDst
parameter_list|,
name|Path
name|pidFile
parameter_list|,
name|PrintStream
name|pout
parameter_list|)
block|{
name|pout
operator|.
name|format
argument_list|(
literal|"@call \"%s\""
argument_list|,
name|launchDst
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This is a skeleton file system used to elevate certain operations.    * WSCE has to create container dirs under local/userchache/$user but    * this dir itself is owned by $user, with chmod 750. As ther NM has no    * write access, it must delegate the write operations to the privileged    * hadoopwintuilsvc.    */
DECL|class|ElevatedFileSystem
specifier|private
specifier|static
class|class
name|ElevatedFileSystem
extends|extends
name|DelegateToFileSystem
block|{
comment|/**      * This overwrites certain RawLocalSystem operations to be performed by a       * privileged process.      *       */
DECL|class|ElevatedRawLocalFilesystem
specifier|private
specifier|static
class|class
name|ElevatedRawLocalFilesystem
extends|extends
name|RawLocalFileSystem
block|{
annotation|@
name|Override
DECL|method|mkOneDirWithMode (Path path, File p2f, FsPermission permission)
specifier|protected
name|boolean
name|mkOneDirWithMode
parameter_list|(
name|Path
name|path
parameter_list|,
name|File
name|p2f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"EFS:mkOneDirWithMode: %s %s"
argument_list|,
name|path
argument_list|,
name|permission
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
comment|// File.mkdir returns false, does not throw. Must mimic it.
try|try
block|{
name|Native
operator|.
name|Elevated
operator|.
name|mkdir
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|setPermission
argument_list|(
name|path
argument_list|,
name|permission
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"EFS:mkOneDirWithMode: %s"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|setPermission (Path p, FsPermission permission)
specifier|public
name|void
name|setPermission
parameter_list|(
name|Path
name|p
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"EFS:setPermission: %s %s"
argument_list|,
name|p
argument_list|,
name|permission
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Native
operator|.
name|Elevated
operator|.
name|chmod
argument_list|(
name|p
argument_list|,
name|permission
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setOwner (Path p, String username, String groupname)
specifier|public
name|void
name|setOwner
parameter_list|(
name|Path
name|p
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|groupname
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"EFS:setOwner: %s %s %s"
argument_list|,
name|p
argument_list|,
name|username
argument_list|,
name|groupname
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Native
operator|.
name|Elevated
operator|.
name|chown
argument_list|(
name|p
argument_list|,
name|username
argument_list|,
name|groupname
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createOutputStreamWithMode (Path f, boolean append, FsPermission permission)
specifier|protected
name|OutputStream
name|createOutputStreamWithMode
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|append
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"EFS:createOutputStreamWithMode: %s %b %s"
argument_list|,
name|f
argument_list|,
name|append
argument_list|,
name|permission
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|OutputStream
name|os
init|=
name|Native
operator|.
name|Elevated
operator|.
name|create
argument_list|(
name|f
argument_list|,
name|append
argument_list|)
decl_stmt|;
try|try
block|{
name|setPermission
argument_list|(
name|f
argument_list|,
name|permission
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|os
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|delete (Path p, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|p
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"EFS:delete: %s %b"
argument_list|,
name|p
argument_list|,
name|recursive
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// The super delete uses the FileUtil.fullyDelete,
comment|// but we cannot rely on that because we need to use the elevated
comment|// operations to remove the files
comment|//
name|File
name|f
init|=
name|pathToFile
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|//no path, return false "nothing to delete"
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|f
operator|.
name|isFile
argument_list|()
condition|)
block|{
return|return
name|Native
operator|.
name|Elevated
operator|.
name|deleteFile
argument_list|(
name|p
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// This is a best-effort attempt. There are race conditions in that
comment|// child files can be created/deleted after we snapped the list.
comment|// No need to protect against that case.
name|File
index|[]
name|files
init|=
name|FileUtil
operator|.
name|listFiles
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|int
name|childCount
init|=
name|files
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|recursive
condition|)
block|{
for|for
control|(
name|File
name|child
range|:
name|files
control|)
block|{
if|if
condition|(
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|child
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|recursive
argument_list|)
condition|)
block|{
operator|--
name|childCount
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|childCount
operator|==
literal|0
condition|)
block|{
return|return
name|Native
operator|.
name|Elevated
operator|.
name|deleteDirectory
argument_list|(
name|p
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Directory "
operator|+
name|f
operator|.
name|toString
argument_list|()
operator|+
literal|" is not empty"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// This can happen under race conditions if an external agent
comment|// is messing with the file type between IFs
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Path "
operator|+
name|f
operator|.
name|toString
argument_list|()
operator|+
literal|" exists, but is neither a file nor a directory"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|ElevatedFileSystem ()
specifier|protected
name|ElevatedFileSystem
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|super
argument_list|(
name|FsConstants
operator|.
name|LOCAL_FS_URI
argument_list|,
operator|new
name|ElevatedRawLocalFilesystem
argument_list|()
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|,
name|FsConstants
operator|.
name|LOCAL_FS_URI
operator|.
name|getScheme
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|WintuilsProcessStubExecutor
specifier|private
specifier|static
class|class
name|WintuilsProcessStubExecutor
implements|implements
name|Shell
operator|.
name|CommandExecutor
block|{
DECL|field|processStub
specifier|private
name|Native
operator|.
name|WinutilsProcessStub
name|processStub
decl_stmt|;
DECL|field|output
specifier|private
name|StringBuilder
name|output
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
DECL|field|exitCode
specifier|private
name|int
name|exitCode
decl_stmt|;
DECL|enum|State
specifier|private
enum|enum
name|State
block|{
DECL|enumConstant|INIT
name|INIT
block|,
DECL|enumConstant|RUNNING
name|RUNNING
block|,
DECL|enumConstant|COMPLETE
name|COMPLETE
block|}
empty_stmt|;
DECL|field|state
specifier|private
name|State
name|state
decl_stmt|;
empty_stmt|;
DECL|field|cwd
specifier|private
specifier|final
name|String
name|cwd
decl_stmt|;
DECL|field|jobName
specifier|private
specifier|final
name|String
name|jobName
decl_stmt|;
DECL|field|userName
specifier|private
specifier|final
name|String
name|userName
decl_stmt|;
DECL|field|pidFile
specifier|private
specifier|final
name|String
name|pidFile
decl_stmt|;
DECL|field|cmdLine
specifier|private
specifier|final
name|String
name|cmdLine
decl_stmt|;
DECL|method|WintuilsProcessStubExecutor ( String cwd, String jobName, String userName, String pidFile, String cmdLine)
specifier|public
name|WintuilsProcessStubExecutor
parameter_list|(
name|String
name|cwd
parameter_list|,
name|String
name|jobName
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|pidFile
parameter_list|,
name|String
name|cmdLine
parameter_list|)
block|{
name|this
operator|.
name|cwd
operator|=
name|cwd
expr_stmt|;
name|this
operator|.
name|jobName
operator|=
name|jobName
expr_stmt|;
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
name|this
operator|.
name|pidFile
operator|=
name|pidFile
expr_stmt|;
name|this
operator|.
name|cmdLine
operator|=
name|cmdLine
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|State
operator|.
name|INIT
expr_stmt|;
block|}
DECL|method|assertComplete ()
specifier|private
name|void
name|assertComplete
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|state
operator|!=
name|State
operator|.
name|COMPLETE
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Process is not complete"
argument_list|)
throw|;
block|}
block|}
DECL|method|getOutput ()
specifier|public
name|String
name|getOutput
parameter_list|()
throws|throws
name|IOException
block|{
name|assertComplete
argument_list|()
expr_stmt|;
return|return
name|output
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getExitCode ()
specifier|public
name|int
name|getExitCode
parameter_list|()
throws|throws
name|IOException
block|{
name|assertComplete
argument_list|()
expr_stmt|;
return|return
name|exitCode
return|;
block|}
DECL|method|validateResult ()
specifier|public
name|void
name|validateResult
parameter_list|()
throws|throws
name|IOException
block|{
name|assertComplete
argument_list|()
expr_stmt|;
if|if
condition|(
literal|0
operator|!=
name|exitCode
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|output
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Processs exit code is:"
operator|+
name|exitCode
argument_list|)
throw|;
block|}
block|}
DECL|method|startStreamReader (final InputStream stream)
specifier|private
name|Thread
name|startStreamReader
parameter_list|(
specifier|final
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|Thread
name|streamReaderThread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
init|(
name|BufferedReader
name|lines
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|stream
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|char
index|[]
name|buf
init|=
operator|new
name|char
index|[
literal|512
index|]
decl_stmt|;
name|int
name|nRead
decl_stmt|;
while|while
condition|(
operator|(
name|nRead
operator|=
name|lines
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|append
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|nRead
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error occurred reading the process stdout"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|streamReaderThread
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|streamReaderThread
return|;
block|}
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|state
operator|!=
name|State
operator|.
name|INIT
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Process is already started"
argument_list|)
throw|;
block|}
name|processStub
operator|=
name|Native
operator|.
name|createTaskAsUser
argument_list|(
name|cwd
argument_list|,
name|jobName
argument_list|,
name|userName
argument_list|,
name|pidFile
argument_list|,
name|cmdLine
argument_list|)
expr_stmt|;
name|state
operator|=
name|State
operator|.
name|RUNNING
expr_stmt|;
name|Thread
name|stdOutReader
init|=
name|startStreamReader
argument_list|(
name|processStub
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|Thread
name|stdErrReader
init|=
name|startStreamReader
argument_list|(
name|processStub
operator|.
name|getErrorStream
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|processStub
operator|.
name|resume
argument_list|()
expr_stmt|;
name|processStub
operator|.
name|waitFor
argument_list|()
expr_stmt|;
name|stdOutReader
operator|.
name|join
argument_list|()
expr_stmt|;
name|stdErrReader
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
name|exitCode
operator|=
name|processStub
operator|.
name|exitValue
argument_list|()
expr_stmt|;
name|state
operator|=
name|State
operator|.
name|COMPLETE
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|processStub
operator|!=
literal|null
condition|)
block|{
name|processStub
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|field|nodeManagerGroup
specifier|private
name|String
name|nodeManagerGroup
decl_stmt|;
comment|/**     * Permissions for user WSCE dirs.    */
DECL|field|DIR_PERM
specifier|static
specifier|final
name|short
name|DIR_PERM
init|=
operator|(
name|short
operator|)
literal|0750
decl_stmt|;
DECL|method|WindowsSecureContainerExecutor ()
specifier|public
name|WindowsSecureContainerExecutor
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|super
argument_list|(
name|FileContext
operator|.
name|getFileContext
argument_list|(
operator|new
name|ElevatedFileSystem
argument_list|()
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nodeManagerGroup
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_WINDOWS_SECURE_CONTAINER_GROUP
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRunCommand (String command, String groupId, String userName, Path pidFile, Configuration conf)
specifier|protected
name|String
index|[]
name|getRunCommand
parameter_list|(
name|String
name|command
parameter_list|,
name|String
name|groupId
parameter_list|,
name|String
name|userName
parameter_list|,
name|Path
name|pidFile
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|command
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"getRunCommand: %s exists:%b"
argument_list|,
name|command
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|String
index|[]
block|{
name|Shell
operator|.
name|getWinUtilsPath
argument_list|()
block|,
literal|"task"
block|,
literal|"createAsUser"
block|,
name|groupId
block|,
name|userName
block|,
name|pidFile
operator|.
name|toString
argument_list|()
block|,
literal|"cmd /c "
operator|+
name|command
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|getLocalWrapperScriptBuilder ( String containerIdStr, Path containerWorkDir)
specifier|protected
name|LocalWrapperScriptBuilder
name|getLocalWrapperScriptBuilder
parameter_list|(
name|String
name|containerIdStr
parameter_list|,
name|Path
name|containerWorkDir
parameter_list|)
block|{
return|return
operator|new
name|WindowsSecureWrapperScriptBuilder
argument_list|(
name|containerWorkDir
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|copyFile (Path src, Path dst, String owner)
specifier|protected
name|void
name|copyFile
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|,
name|String
name|owner
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"copyFile: %s -> %s owner:%s"
argument_list|,
name|src
operator|.
name|toString
argument_list|()
argument_list|,
name|dst
operator|.
name|toString
argument_list|()
argument_list|,
name|owner
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Native
operator|.
name|Elevated
operator|.
name|copy
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Native
operator|.
name|Elevated
operator|.
name|chown
argument_list|(
name|dst
argument_list|,
name|owner
argument_list|,
name|nodeManagerGroup
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createDir (Path dirPath, FsPermission perms, boolean createParent, String owner)
specifier|protected
name|void
name|createDir
parameter_list|(
name|Path
name|dirPath
parameter_list|,
name|FsPermission
name|perms
parameter_list|,
name|boolean
name|createParent
parameter_list|,
name|String
name|owner
parameter_list|)
throws|throws
name|IOException
block|{
comment|// WSCE requires dirs to be 750, not 710 as DCE.
comment|// This is similar to how LCE creates dirs
comment|//
name|perms
operator|=
operator|new
name|FsPermission
argument_list|(
name|DIR_PERM
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"createDir: %s perm:%s owner:%s"
argument_list|,
name|dirPath
operator|.
name|toString
argument_list|()
argument_list|,
name|perms
operator|.
name|toString
argument_list|()
argument_list|,
name|owner
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|createDir
argument_list|(
name|dirPath
argument_list|,
name|perms
argument_list|,
name|createParent
argument_list|,
name|owner
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|setOwner
argument_list|(
name|dirPath
argument_list|,
name|owner
argument_list|,
name|nodeManagerGroup
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setScriptExecutable (Path script, String owner)
specifier|protected
name|void
name|setScriptExecutable
parameter_list|(
name|Path
name|script
parameter_list|,
name|String
name|owner
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"setScriptExecutable: %s owner:%s"
argument_list|,
name|script
operator|.
name|toString
argument_list|()
argument_list|,
name|owner
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|setScriptExecutable
argument_list|(
name|script
argument_list|,
name|owner
argument_list|)
expr_stmt|;
name|Native
operator|.
name|Elevated
operator|.
name|chown
argument_list|(
name|script
argument_list|,
name|owner
argument_list|,
name|nodeManagerGroup
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|localizeClasspathJar (Path jarPath, Path target, String owner)
specifier|public
name|Path
name|localizeClasspathJar
parameter_list|(
name|Path
name|jarPath
parameter_list|,
name|Path
name|target
parameter_list|,
name|String
name|owner
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"localizeClasspathJar: %s %s o:%s"
argument_list|,
name|jarPath
argument_list|,
name|target
argument_list|,
name|owner
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|createDir
argument_list|(
name|target
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|DIR_PERM
argument_list|)
argument_list|,
literal|true
argument_list|,
name|owner
argument_list|)
expr_stmt|;
name|String
name|fileName
init|=
name|jarPath
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Path
name|dst
init|=
operator|new
name|Path
argument_list|(
name|target
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|Native
operator|.
name|Elevated
operator|.
name|move
argument_list|(
name|jarPath
argument_list|,
name|dst
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Native
operator|.
name|Elevated
operator|.
name|chown
argument_list|(
name|dst
argument_list|,
name|owner
argument_list|,
name|nodeManagerGroup
argument_list|)
expr_stmt|;
return|return
name|dst
return|;
block|}
annotation|@
name|Override
DECL|method|startLocalizer (LocalizerStartContext ctx)
specifier|public
name|void
name|startLocalizer
parameter_list|(
name|LocalizerStartContext
name|ctx
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Path
name|nmPrivateContainerTokensPath
init|=
name|ctx
operator|.
name|getNmPrivateContainerTokens
argument_list|()
decl_stmt|;
name|InetSocketAddress
name|nmAddr
init|=
name|ctx
operator|.
name|getNmAddr
argument_list|()
decl_stmt|;
name|String
name|user
init|=
name|ctx
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|String
name|appId
init|=
name|ctx
operator|.
name|getAppId
argument_list|()
decl_stmt|;
name|String
name|locId
init|=
name|ctx
operator|.
name|getLocId
argument_list|()
decl_stmt|;
name|LocalDirsHandlerService
name|dirsHandler
init|=
name|ctx
operator|.
name|getDirsHandler
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|localDirs
init|=
name|dirsHandler
operator|.
name|getLocalDirs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|logDirs
init|=
name|dirsHandler
operator|.
name|getLogDirs
argument_list|()
decl_stmt|;
name|Path
name|classpathJarPrivateDir
init|=
name|dirsHandler
operator|.
name|getLocalPathForWrite
argument_list|(
name|ResourceLocalizationService
operator|.
name|NM_PRIVATE_DIR
argument_list|)
decl_stmt|;
name|createUserLocalDirs
argument_list|(
name|localDirs
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|createUserCacheDirs
argument_list|(
name|localDirs
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|createAppDirs
argument_list|(
name|localDirs
argument_list|,
name|user
argument_list|,
name|appId
argument_list|)
expr_stmt|;
name|createAppLogDirs
argument_list|(
name|appId
argument_list|,
name|logDirs
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|Path
name|appStorageDir
init|=
name|getWorkingDir
argument_list|(
name|localDirs
argument_list|,
name|user
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|String
name|tokenFn
init|=
name|String
operator|.
name|format
argument_list|(
name|ContainerLocalizer
operator|.
name|TOKEN_FILE_NAME_FMT
argument_list|,
name|locId
argument_list|)
decl_stmt|;
name|Path
name|tokenDst
init|=
operator|new
name|Path
argument_list|(
name|appStorageDir
argument_list|,
name|tokenFn
argument_list|)
decl_stmt|;
name|copyFile
argument_list|(
name|nmPrivateContainerTokensPath
argument_list|,
name|tokenDst
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|File
name|cwdApp
init|=
operator|new
name|File
argument_list|(
name|appStorageDir
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"cwdApp: %s"
argument_list|,
name|cwdApp
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|command
decl_stmt|;
name|command
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
comment|//use same jvm as parent
name|File
name|jvm
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
argument_list|,
literal|"bin"
argument_list|)
argument_list|,
literal|"java.exe"
argument_list|)
decl_stmt|;
name|command
operator|.
name|add
argument_list|(
name|jvm
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|cwdPath
init|=
operator|new
name|Path
argument_list|(
name|cwdApp
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
comment|// Build a temp classpath jar. See ContainerLaunch.sanitizeEnv().
comment|// Passing CLASSPATH explicitly is *way* too long for command line.
name|String
name|classPath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|System
operator|.
name|getenv
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|jarCp
index|[]
init|=
name|FileUtil
operator|.
name|createJarWithClassPath
argument_list|(
name|classPath
argument_list|,
name|classpathJarPrivateDir
argument_list|,
name|cwdPath
argument_list|,
name|env
argument_list|)
decl_stmt|;
name|String
name|classPathJar
init|=
name|localizeClasspathJar
argument_list|(
operator|new
name|Path
argument_list|(
name|jarCp
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|cwdPath
argument_list|,
name|user
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|command
operator|.
name|add
argument_list|(
literal|"-classpath"
argument_list|)
expr_stmt|;
name|command
operator|.
name|add
argument_list|(
name|classPathJar
operator|+
name|jarCp
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|String
name|javaLibPath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.library.path"
argument_list|)
decl_stmt|;
if|if
condition|(
name|javaLibPath
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|add
argument_list|(
literal|"-Djava.library.path="
operator|+
name|javaLibPath
argument_list|)
expr_stmt|;
block|}
name|command
operator|.
name|addAll
argument_list|(
name|ContainerLocalizer
operator|.
name|getJavaOpts
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerLocalizer
operator|.
name|buildMainArgs
argument_list|(
name|command
argument_list|,
name|user
argument_list|,
name|appId
argument_list|,
name|locId
argument_list|,
name|nmAddr
argument_list|,
name|localDirs
argument_list|)
expr_stmt|;
name|String
name|cmdLine
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|command
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
name|String
name|localizerPid
init|=
name|String
operator|.
name|format
argument_list|(
name|LOCALIZER_PID_FORMAT
argument_list|,
name|locId
argument_list|)
decl_stmt|;
name|WintuilsProcessStubExecutor
name|stubExecutor
init|=
operator|new
name|WintuilsProcessStubExecutor
argument_list|(
name|cwdApp
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|localizerPid
argument_list|,
name|user
argument_list|,
literal|"nul:"
argument_list|,
name|cmdLine
argument_list|)
decl_stmt|;
try|try
block|{
name|stubExecutor
operator|.
name|execute
argument_list|()
expr_stmt|;
name|stubExecutor
operator|.
name|validateResult
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|stubExecutor
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|killContainer
argument_list|(
name|localizerPid
argument_list|,
name|Signal
operator|.
name|KILL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"An exception occurred during the cleanup of localizer job %s:%n%s"
argument_list|,
name|localizerPid
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|buildCommandExecutor (String wrapperScriptPath, String containerIdStr, String userName, Path pidFile, Resource resource, File wordDir, Map<String, String> environment)
specifier|protected
name|CommandExecutor
name|buildCommandExecutor
parameter_list|(
name|String
name|wrapperScriptPath
parameter_list|,
name|String
name|containerIdStr
parameter_list|,
name|String
name|userName
parameter_list|,
name|Path
name|pidFile
parameter_list|,
name|Resource
name|resource
parameter_list|,
name|File
name|wordDir
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
parameter_list|)
block|{
return|return
operator|new
name|WintuilsProcessStubExecutor
argument_list|(
name|wordDir
operator|.
name|toString
argument_list|()
argument_list|,
name|containerIdStr
argument_list|,
name|userName
argument_list|,
name|pidFile
operator|.
name|toString
argument_list|()
argument_list|,
literal|"cmd /c "
operator|+
name|wrapperScriptPath
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|killContainer (String pid, Signal signal)
specifier|protected
name|void
name|killContainer
parameter_list|(
name|String
name|pid
parameter_list|,
name|Signal
name|signal
parameter_list|)
throws|throws
name|IOException
block|{
name|Native
operator|.
name|Elevated
operator|.
name|killTask
argument_list|(
name|pid
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

