begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|DistSchedAllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|DistSchedAllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|DistSchedRegisterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NMToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceBlacklistRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|amrmproxy
operator|.
name|AMRMProxyApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|amrmproxy
operator|.
name|AbstractRequestInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|security
operator|.
name|NMTokenSecretManagerInNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  *<p>The LocalScheduler runs on the NodeManager and is modelled as an  *<code>AMRMProxy</code> request interceptor. It is responsible for the  * following :</p>  *<ul>  *<li>Intercept<code>ApplicationMasterProtocol</code> calls and unwrap the  *   response objects to extract instructions from the  *<code>ClusterManager</code> running on the ResourceManager to aid in making  *   Scheduling scheduling decisions</li>  *<li>Call the<code>OpportunisticContainerAllocator</code> to allocate  *   containers for the opportunistic resource outstandingOpReqs</li>  *</ul>  */
end_comment

begin_class
DECL|class|LocalScheduler
specifier|public
specifier|final
class|class
name|LocalScheduler
extends|extends
name|AbstractRequestInterceptor
block|{
DECL|class|PartitionedResourceRequests
specifier|static
class|class
name|PartitionedResourceRequests
block|{
DECL|field|guaranteed
specifier|private
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|guaranteed
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|opportunistic
specifier|private
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|opportunistic
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|getGuaranteed ()
specifier|public
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|getGuaranteed
parameter_list|()
block|{
return|return
name|guaranteed
return|;
block|}
DECL|method|getOpportunistic ()
specifier|public
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|getOpportunistic
parameter_list|()
block|{
return|return
name|opportunistic
return|;
block|}
block|}
DECL|class|DistSchedulerParams
specifier|static
class|class
name|DistSchedulerParams
block|{
DECL|field|maxResource
name|Resource
name|maxResource
decl_stmt|;
DECL|field|minResource
name|Resource
name|minResource
decl_stmt|;
DECL|field|incrementResource
name|Resource
name|incrementResource
decl_stmt|;
DECL|field|containerTokenExpiryInterval
name|int
name|containerTokenExpiryInterval
decl_stmt|;
block|}
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LocalScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|RECORD_FACTORY
specifier|private
specifier|final
specifier|static
name|RecordFactory
name|RECORD_FACTORY
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// Currently just used to keep track of allocated Containers
comment|// Can be used for reporting stats later
DECL|field|containersAllocated
specifier|private
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|containersAllocated
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|appParams
specifier|private
name|DistSchedulerParams
name|appParams
init|=
operator|new
name|DistSchedulerParams
argument_list|()
decl_stmt|;
DECL|field|containerIdCounter
specifier|private
specifier|final
name|OpportunisticContainerAllocator
operator|.
name|ContainerIdCounter
name|containerIdCounter
init|=
operator|new
name|OpportunisticContainerAllocator
operator|.
name|ContainerIdCounter
argument_list|()
decl_stmt|;
DECL|field|nodeList
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|NodeId
argument_list|>
name|nodeList
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Mapping of NodeId to NodeTokens. Populated either from RM response or
comment|// generated locally if required.
DECL|field|nodeTokens
specifier|private
name|Map
argument_list|<
name|NodeId
argument_list|,
name|NMToken
argument_list|>
name|nodeTokens
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|blacklist
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|blacklist
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// This maintains a map of outstanding OPPORTUNISTIC Reqs. Key-ed by Priority,
comment|// Resource Name (Host/rack/any) and capability. This mapping is required
comment|// to match a received Container to an outstanding OPPORTUNISTIC
comment|// ResourceRequests (ask)
specifier|final
name|TreeMap
argument_list|<
name|Priority
argument_list|,
name|Map
argument_list|<
name|Resource
argument_list|,
name|ResourceRequest
argument_list|>
argument_list|>
DECL|field|outstandingOpReqs
name|outstandingOpReqs
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|applicationAttemptId
specifier|private
name|ApplicationAttemptId
name|applicationAttemptId
decl_stmt|;
DECL|field|containerAllocator
specifier|private
name|OpportunisticContainerAllocator
name|containerAllocator
decl_stmt|;
DECL|field|nmSecretManager
specifier|private
name|NMTokenSecretManagerInNM
name|nmSecretManager
decl_stmt|;
DECL|field|appSubmitter
specifier|private
name|String
name|appSubmitter
decl_stmt|;
DECL|method|init (AMRMProxyApplicationContext appContext)
specifier|public
name|void
name|init
parameter_list|(
name|AMRMProxyApplicationContext
name|appContext
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|appContext
argument_list|)
expr_stmt|;
name|initLocal
argument_list|(
name|appContext
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|appContext
operator|.
name|getNMCotext
argument_list|()
operator|.
name|getContainerAllocator
argument_list|()
argument_list|,
name|appContext
operator|.
name|getNMCotext
argument_list|()
operator|.
name|getNMTokenSecretManager
argument_list|()
argument_list|,
name|appContext
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|initLocal (ApplicationAttemptId applicationAttemptId, OpportunisticContainerAllocator containerAllocator, NMTokenSecretManagerInNM nmSecretManager, String appSubmitter)
name|void
name|initLocal
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|OpportunisticContainerAllocator
name|containerAllocator
parameter_list|,
name|NMTokenSecretManagerInNM
name|nmSecretManager
parameter_list|,
name|String
name|appSubmitter
parameter_list|)
block|{
name|this
operator|.
name|applicationAttemptId
operator|=
name|applicationAttemptId
expr_stmt|;
name|this
operator|.
name|containerAllocator
operator|=
name|containerAllocator
expr_stmt|;
name|this
operator|.
name|nmSecretManager
operator|=
name|nmSecretManager
expr_stmt|;
name|this
operator|.
name|appSubmitter
operator|=
name|appSubmitter
expr_stmt|;
block|}
comment|/**    * Route register call to the corresponding distributed scheduling method viz.    * registerApplicationMasterForDistributedScheduling, and return response to    * the caller after stripping away Distributed Scheduling information.    *    * @param request    *          registration request    * @return Allocate Response    * @throws YarnException    * @throws IOException    */
annotation|@
name|Override
DECL|method|registerApplicationMaster (RegisterApplicationMasterRequest request)
specifier|public
name|RegisterApplicationMasterResponse
name|registerApplicationMaster
parameter_list|(
name|RegisterApplicationMasterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|registerApplicationMasterForDistributedScheduling
argument_list|(
name|request
argument_list|)
operator|.
name|getRegisterResponse
argument_list|()
return|;
block|}
comment|/**    * Route allocate call to the allocateForDistributedScheduling method and    * return response to the caller after stripping away Distributed Scheduling    * information.    *    * @param request    *          allocation request    * @return Allocate Response    * @throws YarnException    * @throws IOException    */
annotation|@
name|Override
DECL|method|allocate (AllocateRequest request)
specifier|public
name|AllocateResponse
name|allocate
parameter_list|(
name|AllocateRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|DistSchedAllocateRequest
name|distRequest
init|=
name|RECORD_FACTORY
operator|.
name|newRecordInstance
argument_list|(
name|DistSchedAllocateRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|distRequest
operator|.
name|setAllocateRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
name|allocateForDistributedScheduling
argument_list|(
name|distRequest
argument_list|)
operator|.
name|getAllocateResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|finishApplicationMaster (FinishApplicationMasterRequest request)
specifier|public
name|FinishApplicationMasterResponse
name|finishApplicationMaster
parameter_list|(
name|FinishApplicationMasterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|getNextInterceptor
argument_list|()
operator|.
name|finishApplicationMaster
argument_list|(
name|request
argument_list|)
return|;
block|}
comment|/**    * Check if we already have a NMToken. if Not, generate the Token and    * add it to the response    * @param response    * @param nmTokens    * @param allocatedContainers    */
DECL|method|updateResponseWithNMTokens (AllocateResponse response, List<NMToken> nmTokens, List<Container> allocatedContainers)
specifier|private
name|void
name|updateResponseWithNMTokens
parameter_list|(
name|AllocateResponse
name|response
parameter_list|,
name|List
argument_list|<
name|NMToken
argument_list|>
name|nmTokens
parameter_list|,
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
parameter_list|)
block|{
name|List
argument_list|<
name|NMToken
argument_list|>
name|newTokens
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|allocatedContainers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|response
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|addAll
argument_list|(
name|allocatedContainers
argument_list|)
expr_stmt|;
for|for
control|(
name|Container
name|alloc
range|:
name|allocatedContainers
control|)
block|{
if|if
condition|(
operator|!
name|nodeTokens
operator|.
name|containsKey
argument_list|(
name|alloc
operator|.
name|getNodeId
argument_list|()
argument_list|)
condition|)
block|{
name|newTokens
operator|.
name|add
argument_list|(
name|nmSecretManager
operator|.
name|generateNMToken
argument_list|(
name|appSubmitter
argument_list|,
name|alloc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|NMToken
argument_list|>
name|retTokens
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nmTokens
argument_list|)
decl_stmt|;
name|retTokens
operator|.
name|addAll
argument_list|(
name|newTokens
argument_list|)
expr_stmt|;
name|response
operator|.
name|setNMTokens
argument_list|(
name|retTokens
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|partitionAskList (List<ResourceRequest> askList)
specifier|private
name|PartitionedResourceRequests
name|partitionAskList
parameter_list|(
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|askList
parameter_list|)
block|{
name|PartitionedResourceRequests
name|partitionedRequests
init|=
operator|new
name|PartitionedResourceRequests
argument_list|()
decl_stmt|;
for|for
control|(
name|ResourceRequest
name|rr
range|:
name|askList
control|)
block|{
if|if
condition|(
name|rr
operator|.
name|getExecutionTypeRequest
argument_list|()
operator|.
name|getExecutionType
argument_list|()
operator|==
name|ExecutionType
operator|.
name|OPPORTUNISTIC
condition|)
block|{
name|partitionedRequests
operator|.
name|getOpportunistic
argument_list|()
operator|.
name|add
argument_list|(
name|rr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|partitionedRequests
operator|.
name|getGuaranteed
argument_list|()
operator|.
name|add
argument_list|(
name|rr
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|partitionedRequests
return|;
block|}
DECL|method|updateParameters ( DistSchedRegisterResponse registerResponse)
specifier|private
name|void
name|updateParameters
parameter_list|(
name|DistSchedRegisterResponse
name|registerResponse
parameter_list|)
block|{
name|appParams
operator|.
name|minResource
operator|=
name|registerResponse
operator|.
name|getMinAllocatableCapabilty
argument_list|()
expr_stmt|;
name|appParams
operator|.
name|maxResource
operator|=
name|registerResponse
operator|.
name|getMaxAllocatableCapabilty
argument_list|()
expr_stmt|;
name|appParams
operator|.
name|incrementResource
operator|=
name|registerResponse
operator|.
name|getIncrAllocatableCapabilty
argument_list|()
expr_stmt|;
if|if
condition|(
name|appParams
operator|.
name|incrementResource
operator|==
literal|null
condition|)
block|{
name|appParams
operator|.
name|incrementResource
operator|=
name|appParams
operator|.
name|minResource
expr_stmt|;
block|}
name|appParams
operator|.
name|containerTokenExpiryInterval
operator|=
name|registerResponse
operator|.
name|getContainerTokenExpiryInterval
argument_list|()
expr_stmt|;
name|containerIdCounter
operator|.
name|resetContainerIdCounter
argument_list|(
name|registerResponse
operator|.
name|getContainerIdStart
argument_list|()
argument_list|)
expr_stmt|;
name|setNodeList
argument_list|(
name|registerResponse
operator|.
name|getNodesForScheduling
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Takes a list of ResourceRequests (asks), extracts the key information viz.    * (Priority, ResourceName, Capability) and adds it the outstanding    * OPPORTUNISTIC outstandingOpReqs map. The nested map is required to enforce    * the current YARN constraint that only a single ResourceRequest can exist at    * a give Priority and Capability    * @param resourceAsks    */
DECL|method|addToOutstandingReqs (List<ResourceRequest> resourceAsks)
specifier|public
name|void
name|addToOutstandingReqs
parameter_list|(
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|resourceAsks
parameter_list|)
block|{
for|for
control|(
name|ResourceRequest
name|request
range|:
name|resourceAsks
control|)
block|{
name|Priority
name|priority
init|=
name|request
operator|.
name|getPriority
argument_list|()
decl_stmt|;
comment|// TODO: Extend for Node/Rack locality. We only handle ANY requests now
if|if
condition|(
operator|!
name|ResourceRequest
operator|.
name|isAnyLocation
argument_list|(
name|request
operator|.
name|getResourceName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|request
operator|.
name|getNumContainers
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|Map
argument_list|<
name|Resource
argument_list|,
name|ResourceRequest
argument_list|>
name|reqMap
init|=
name|this
operator|.
name|outstandingOpReqs
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
if|if
condition|(
name|reqMap
operator|==
literal|null
condition|)
block|{
name|reqMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|outstandingOpReqs
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|reqMap
argument_list|)
expr_stmt|;
block|}
name|ResourceRequest
name|resourceRequest
init|=
name|reqMap
operator|.
name|get
argument_list|(
name|request
operator|.
name|getCapability
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceRequest
operator|==
literal|null
condition|)
block|{
name|resourceRequest
operator|=
name|request
expr_stmt|;
name|reqMap
operator|.
name|put
argument_list|(
name|request
operator|.
name|getCapability
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resourceRequest
operator|.
name|setNumContainers
argument_list|(
name|resourceRequest
operator|.
name|getNumContainers
argument_list|()
operator|+
name|request
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ResourceRequest
operator|.
name|isAnyLocation
argument_list|(
name|request
operator|.
name|getResourceName
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"# of outstandingOpReqs in ANY (at priority = "
operator|+
name|priority
operator|+
literal|", with capability = "
operator|+
name|request
operator|.
name|getCapability
argument_list|()
operator|+
literal|" ) : "
operator|+
name|resourceRequest
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * This method matches a returned list of Container Allocations to any    * outstanding OPPORTUNISTIC ResourceRequest    * @param capability    * @param allocatedContainers    */
DECL|method|matchAllocationToOutstandingRequest (Resource capability, List<Container> allocatedContainers)
specifier|public
name|void
name|matchAllocationToOutstandingRequest
parameter_list|(
name|Resource
name|capability
parameter_list|,
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
parameter_list|)
block|{
for|for
control|(
name|Container
name|c
range|:
name|allocatedContainers
control|)
block|{
name|containersAllocated
operator|.
name|add
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Resource
argument_list|,
name|ResourceRequest
argument_list|>
name|asks
init|=
name|outstandingOpReqs
operator|.
name|get
argument_list|(
name|c
operator|.
name|getPriority
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|asks
operator|==
literal|null
condition|)
continue|continue;
name|ResourceRequest
name|rr
init|=
name|asks
operator|.
name|get
argument_list|(
name|capability
argument_list|)
decl_stmt|;
if|if
condition|(
name|rr
operator|!=
literal|null
condition|)
block|{
name|rr
operator|.
name|setNumContainers
argument_list|(
name|rr
operator|.
name|getNumContainers
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|rr
operator|.
name|getNumContainers
argument_list|()
operator|==
literal|0
condition|)
block|{
name|asks
operator|.
name|remove
argument_list|(
name|capability
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|setNodeList (List<NodeId> nodeList)
specifier|private
name|void
name|setNodeList
parameter_list|(
name|List
argument_list|<
name|NodeId
argument_list|>
name|nodeList
parameter_list|)
block|{
name|this
operator|.
name|nodeList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|addToNodeList
argument_list|(
name|nodeList
argument_list|)
expr_stmt|;
block|}
DECL|method|addToNodeList (List<NodeId> nodes)
specifier|private
name|void
name|addToNodeList
parameter_list|(
name|List
argument_list|<
name|NodeId
argument_list|>
name|nodes
parameter_list|)
block|{
for|for
control|(
name|NodeId
name|n
range|:
name|nodes
control|)
block|{
name|this
operator|.
name|nodeList
operator|.
name|put
argument_list|(
name|n
operator|.
name|getHost
argument_list|()
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DistSchedRegisterResponse
DECL|method|registerApplicationMasterForDistributedScheduling ( RegisterApplicationMasterRequest request)
name|registerApplicationMasterForDistributedScheduling
parameter_list|(
name|RegisterApplicationMasterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Forwarding registration request to the"
operator|+
literal|"Distributed Scheduler Service on YARN RM"
argument_list|)
expr_stmt|;
name|DistSchedRegisterResponse
name|dsResp
init|=
name|getNextInterceptor
argument_list|()
operator|.
name|registerApplicationMasterForDistributedScheduling
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|updateParameters
argument_list|(
name|dsResp
argument_list|)
expr_stmt|;
return|return
name|dsResp
return|;
block|}
annotation|@
name|Override
DECL|method|allocateForDistributedScheduling ( DistSchedAllocateRequest request)
specifier|public
name|DistSchedAllocateResponse
name|allocateForDistributedScheduling
parameter_list|(
name|DistSchedAllocateRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Forwarding allocate request to the"
operator|+
literal|"Distributed Scheduler Service on YARN RM"
argument_list|)
expr_stmt|;
block|}
comment|// Partition requests into GUARANTEED and OPPORTUNISTIC reqs
name|PartitionedResourceRequests
name|partitionedAsks
init|=
name|partitionAskList
argument_list|(
name|request
operator|.
name|getAllocateRequest
argument_list|()
operator|.
name|getAskList
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|releasedContainers
init|=
name|request
operator|.
name|getAllocateRequest
argument_list|()
operator|.
name|getReleaseList
argument_list|()
decl_stmt|;
name|int
name|numReleasedContainers
init|=
name|releasedContainers
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numReleasedContainers
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"AttemptID: "
operator|+
name|applicationAttemptId
operator|+
literal|" released: "
operator|+
name|numReleasedContainers
argument_list|)
expr_stmt|;
name|containersAllocated
operator|.
name|removeAll
argument_list|(
name|releasedContainers
argument_list|)
expr_stmt|;
block|}
comment|// Also, update black list
name|ResourceBlacklistRequest
name|rbr
init|=
name|request
operator|.
name|getAllocateRequest
argument_list|()
operator|.
name|getResourceBlacklistRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|rbr
operator|!=
literal|null
condition|)
block|{
name|blacklist
operator|.
name|removeAll
argument_list|(
name|rbr
operator|.
name|getBlacklistRemovals
argument_list|()
argument_list|)
expr_stmt|;
name|blacklist
operator|.
name|addAll
argument_list|(
name|rbr
operator|.
name|getBlacklistAdditions
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Add OPPORTUNISTIC reqs to the outstanding reqs
name|addToOutstandingReqs
argument_list|(
name|partitionedAsks
operator|.
name|getOpportunistic
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Priority
name|priority
range|:
name|outstandingOpReqs
operator|.
name|descendingKeySet
argument_list|()
control|)
block|{
comment|// Allocated containers :
comment|//  Key = Requested Capability,
comment|//  Value = List of Containers of given Cap (The actual container size
comment|//          might be different than what is requested.. which is why
comment|//          we need the requested capability (key) to match against
comment|//          the outstanding reqs)
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Container
argument_list|>
argument_list|>
name|allocated
init|=
name|containerAllocator
operator|.
name|allocate
argument_list|(
name|this
operator|.
name|appParams
argument_list|,
name|containerIdCounter
argument_list|,
name|outstandingOpReqs
operator|.
name|get
argument_list|(
name|priority
argument_list|)
operator|.
name|values
argument_list|()
argument_list|,
name|blacklist
argument_list|,
name|applicationAttemptId
argument_list|,
name|nodeList
argument_list|,
name|appSubmitter
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Container
argument_list|>
argument_list|>
name|e
range|:
name|allocated
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|matchAllocationToOutstandingRequest
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|allocatedContainers
operator|.
name|addAll
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|request
operator|.
name|setAllocatedContainers
argument_list|(
name|allocatedContainers
argument_list|)
expr_stmt|;
comment|// Send all the GUARANTEED Reqs to RM
name|request
operator|.
name|getAllocateRequest
argument_list|()
operator|.
name|setAskList
argument_list|(
name|partitionedAsks
operator|.
name|getGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|DistSchedAllocateResponse
name|dsResp
init|=
name|getNextInterceptor
argument_list|()
operator|.
name|allocateForDistributedScheduling
argument_list|(
name|request
argument_list|)
decl_stmt|;
comment|// Update host to nodeId mapping
name|setNodeList
argument_list|(
name|dsResp
operator|.
name|getNodesForScheduling
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NMToken
argument_list|>
name|nmTokens
init|=
name|dsResp
operator|.
name|getAllocateResponse
argument_list|()
operator|.
name|getNMTokens
argument_list|()
decl_stmt|;
for|for
control|(
name|NMToken
name|nmToken
range|:
name|nmTokens
control|)
block|{
name|nodeTokens
operator|.
name|put
argument_list|(
name|nmToken
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nmToken
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|completedContainers
init|=
name|dsResp
operator|.
name|getAllocateResponse
argument_list|()
operator|.
name|getCompletedContainersStatuses
argument_list|()
decl_stmt|;
comment|// Only account for opportunistic containers
for|for
control|(
name|ContainerStatus
name|cs
range|:
name|completedContainers
control|)
block|{
if|if
condition|(
name|cs
operator|.
name|getExecutionType
argument_list|()
operator|==
name|ExecutionType
operator|.
name|OPPORTUNISTIC
condition|)
block|{
name|containersAllocated
operator|.
name|remove
argument_list|(
name|cs
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check if we have NM tokens for all the allocated containers. If not
comment|// generate one and update the response.
name|updateResponseWithNMTokens
argument_list|(
name|dsResp
operator|.
name|getAllocateResponse
argument_list|()
argument_list|,
name|nmTokens
argument_list|,
name|allocatedContainers
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Number of opportunistic containers currently allocated by"
operator|+
literal|"application: "
operator|+
name|containersAllocated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|dsResp
return|;
block|}
block|}
end_class

end_unit

