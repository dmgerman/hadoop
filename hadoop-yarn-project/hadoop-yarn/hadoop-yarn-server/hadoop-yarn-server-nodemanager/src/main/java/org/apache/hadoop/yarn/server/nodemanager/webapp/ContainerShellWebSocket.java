begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|LinuxContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|executor
operator|.
name|ContainerExecContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|websocket
operator|.
name|api
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|websocket
operator|.
name|api
operator|.
name|annotations
operator|.
name|OnWebSocketClose
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|websocket
operator|.
name|api
operator|.
name|annotations
operator|.
name|OnWebSocketConnect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|websocket
operator|.
name|api
operator|.
name|annotations
operator|.
name|OnWebSocketMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|websocket
operator|.
name|api
operator|.
name|annotations
operator|.
name|WebSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|IOStreamPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Web socket for establishing interactive command shell connection through  * Node Manage to container executor.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|,
literal|"MapReduce"
block|,
literal|"YARN"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Unstable
annotation|@
name|WebSocket
DECL|class|ContainerShellWebSocket
specifier|public
class|class
name|ContainerShellWebSocket
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ContainerShellWebSocket
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|exec
specifier|private
specifier|final
name|ContainerExecutor
name|exec
init|=
operator|new
name|LinuxContainerExecutor
argument_list|()
decl_stmt|;
DECL|field|pair
specifier|private
name|IOStreamPair
name|pair
decl_stmt|;
annotation|@
name|OnWebSocketMessage
DECL|method|onText (Session session, String message)
specifier|public
name|void
name|onText
parameter_list|(
name|Session
name|session
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Message received: "
operator|+
name|message
argument_list|)
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|4000
index|]
decl_stmt|;
if|if
condition|(
name|session
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|int
name|ni
init|=
name|message
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|ni
operator|>
literal|0
condition|)
block|{
name|pair
operator|.
name|out
operator|.
name|write
argument_list|(
name|message
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pair
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|int
name|no
init|=
name|pair
operator|.
name|in
operator|.
name|available
argument_list|()
decl_stmt|;
name|pair
operator|.
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|no
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|formatted
init|=
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
literal|"\r\n"
argument_list|)
decl_stmt|;
name|session
operator|.
name|getRemote
argument_list|()
operator|.
name|sendString
argument_list|(
name|formatted
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to parse WebSocket message from Client"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|OnWebSocketConnect
DECL|method|onConnect (Session session)
specifier|public
name|void
name|onConnect
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|session
operator|.
name|getRemoteAddress
argument_list|()
operator|.
name|getHostString
argument_list|()
operator|+
literal|" connected!"
argument_list|)
expr_stmt|;
try|try
block|{
name|URI
name|containerURI
init|=
name|session
operator|.
name|getUpgradeRequest
argument_list|()
operator|.
name|getRequestURI
argument_list|()
decl_stmt|;
name|String
index|[]
name|containerPath
init|=
name|containerURI
operator|.
name|getPath
argument_list|()
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|cId
init|=
name|containerPath
index|[
literal|2
index|]
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Making interactive connection to running docker container with ID: "
operator|+
name|cId
argument_list|)
expr_stmt|;
name|ContainerExecContext
name|execContext
init|=
operator|new
name|ContainerExecContext
operator|.
name|Builder
argument_list|()
operator|.
name|setContainer
argument_list|(
name|cId
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|pair
operator|=
name|exec
operator|.
name|execContainer
argument_list|(
name|execContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to establish WebSocket connection with Client"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|OnWebSocketClose
DECL|method|onClose (Session session, int status, String reason)
specifier|public
name|void
name|onClose
parameter_list|(
name|Session
name|session
parameter_list|,
name|int
name|status
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|session
operator|.
name|getRemoteAddress
argument_list|()
operator|.
name|getHostString
argument_list|()
operator|+
literal|" closed!"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

