begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.deviceframework
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|deviceframework
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|Device
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|DevicePlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|YarnRuntimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|CGroupsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|ResourceHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|ResourceHandlerException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * The Hooks into container lifecycle.  * Get device list from device plugin in {@code bootstrap}  * Assign devices for a container in {@code preStart}  * Restore statue in {@code reacquireContainer}  * Recycle devices from container in {@code postComplete}  * */
end_comment

begin_class
DECL|class|DeviceResourceHandlerImpl
specifier|public
class|class
name|DeviceResourceHandlerImpl
implements|implements
name|ResourceHandler
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DeviceResourceHandlerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|resourceName
specifier|private
specifier|final
name|String
name|resourceName
decl_stmt|;
DECL|field|devicePlugin
specifier|private
specifier|final
name|DevicePlugin
name|devicePlugin
decl_stmt|;
DECL|field|deviceMappingManager
specifier|private
specifier|final
name|DeviceMappingManager
name|deviceMappingManager
decl_stmt|;
DECL|field|cGroupsHandler
specifier|private
specifier|final
name|CGroupsHandler
name|cGroupsHandler
decl_stmt|;
DECL|field|privilegedOperationExecutor
specifier|private
specifier|final
name|PrivilegedOperationExecutor
name|privilegedOperationExecutor
decl_stmt|;
DECL|field|devicePluginAdapter
specifier|private
specifier|final
name|DevicePluginAdapter
name|devicePluginAdapter
decl_stmt|;
DECL|method|DeviceResourceHandlerImpl (String reseName, DevicePlugin devPlugin, DevicePluginAdapter devPluginAdapter, DeviceMappingManager devMappingManager, CGroupsHandler cgHandler, PrivilegedOperationExecutor operation)
specifier|public
name|DeviceResourceHandlerImpl
parameter_list|(
name|String
name|reseName
parameter_list|,
name|DevicePlugin
name|devPlugin
parameter_list|,
name|DevicePluginAdapter
name|devPluginAdapter
parameter_list|,
name|DeviceMappingManager
name|devMappingManager
parameter_list|,
name|CGroupsHandler
name|cgHandler
parameter_list|,
name|PrivilegedOperationExecutor
name|operation
parameter_list|)
block|{
name|this
operator|.
name|devicePluginAdapter
operator|=
name|devPluginAdapter
expr_stmt|;
name|this
operator|.
name|resourceName
operator|=
name|reseName
expr_stmt|;
name|this
operator|.
name|devicePlugin
operator|=
name|devPlugin
expr_stmt|;
name|this
operator|.
name|cGroupsHandler
operator|=
name|cgHandler
expr_stmt|;
name|this
operator|.
name|privilegedOperationExecutor
operator|=
name|operation
expr_stmt|;
name|this
operator|.
name|deviceMappingManager
operator|=
name|devMappingManager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|bootstrap (Configuration configuration)
specifier|public
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|bootstrap
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|Set
argument_list|<
name|Device
argument_list|>
name|availableDevices
init|=
literal|null
decl_stmt|;
try|try
block|{
name|availableDevices
operator|=
name|devicePlugin
operator|.
name|getDevices
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
literal|"Exception thrown from"
operator|+
literal|" plugin's \"getDevices\""
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
comment|/**      * We won't fail the NM if plugin returns invalid value here.      * */
if|if
condition|(
name|availableDevices
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Bootstrap "
operator|+
name|resourceName
operator|+
literal|" failed. Null value got from plugin's getDevices method"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Add device set. Here we trust the plugin's return value
name|deviceMappingManager
operator|.
name|addDeviceSet
argument_list|(
name|resourceName
argument_list|,
name|availableDevices
argument_list|)
expr_stmt|;
comment|// TODO: Init cgroups
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|preStart (Container container)
specifier|public
specifier|synchronized
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|preStart
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|String
name|containerIdStr
init|=
name|container
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|DeviceMappingManager
operator|.
name|DeviceAllocation
name|allocation
init|=
name|deviceMappingManager
operator|.
name|assignDevices
argument_list|(
name|resourceName
argument_list|,
name|container
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Allocated to "
operator|+
name|containerIdStr
operator|+
literal|": "
operator|+
name|allocation
argument_list|)
expr_stmt|;
try|try
block|{
name|devicePlugin
operator|.
name|onDevicesAllocated
argument_list|(
name|allocation
operator|.
name|getAllowed
argument_list|()
argument_list|,
name|YarnRuntimeType
operator|.
name|RUNTIME_DEFAULT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
literal|"Exception thrown from"
operator|+
literal|" plugin's \"onDeviceAllocated\""
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
comment|// cgroups operation based on allocation
comment|/**      * TODO: implement a general container-executor device module      * */
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|reacquireContainer ( ContainerId containerId)
specifier|public
specifier|synchronized
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|reacquireContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|deviceMappingManager
operator|.
name|recoverAssignedDevices
argument_list|(
name|resourceName
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|updateContainer (Container container)
specifier|public
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|updateContainer
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|postComplete ( ContainerId containerId)
specifier|public
specifier|synchronized
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|postComplete
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|deviceMappingManager
operator|.
name|cleanupAssignedDevices
argument_list|(
name|resourceName
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|teardown ()
specifier|public
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|teardown
parameter_list|()
throws|throws
name|ResourceHandlerException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|DeviceResourceHandlerImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"{"
operator|+
literal|"resourceName='"
operator|+
name|resourceName
operator|+
literal|'\''
operator|+
literal|", devicePlugin="
operator|+
name|devicePlugin
operator|+
literal|", devicePluginAdapter="
operator|+
name|devicePluginAdapter
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

