begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.api.deviceplugin
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * This is a spec used to prepare& run container.  * It's return value of onDeviceAllocated invoked by the framework.  * For preparation, if volumeSpecs is populated then the framework will  * create the volume before using the device  * When running container, the envs indicates environment variable needed.  * The containerRuntime indicates what Docker runtime to use.  * The volume& device mounts describes key isolation requirements  * */
end_comment

begin_class
DECL|class|DeviceRuntimeSpec
specifier|public
specifier|final
class|class
name|DeviceRuntimeSpec
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|554704120015467660L
decl_stmt|;
comment|/**    * The containerRuntime gives device framework a hint (not forced to).    * On which containerRuntime be used    * (if empty then default "runc" is used).    * For instance, it could be "nvidia" in Nvidia GPU Docker v2.    * The "nvidia" will be passed as a parameter to docker run    * with --runtime "nvidia"    */
DECL|field|containerRuntime
specifier|private
specifier|final
name|String
name|containerRuntime
decl_stmt|;
DECL|field|envs
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envs
decl_stmt|;
DECL|field|volumeMounts
specifier|private
specifier|final
name|Set
argument_list|<
name|MountVolumeSpec
argument_list|>
name|volumeMounts
decl_stmt|;
DECL|field|deviceMounts
specifier|private
specifier|final
name|Set
argument_list|<
name|MountDeviceSpec
argument_list|>
name|deviceMounts
decl_stmt|;
DECL|field|volumeSpecs
specifier|private
specifier|final
name|Set
argument_list|<
name|VolumeSpec
argument_list|>
name|volumeSpecs
decl_stmt|;
DECL|method|DeviceRuntimeSpec (Builder builder)
specifier|private
name|DeviceRuntimeSpec
parameter_list|(
name|Builder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|containerRuntime
operator|=
name|builder
operator|.
name|containerRuntime
expr_stmt|;
name|this
operator|.
name|deviceMounts
operator|=
name|builder
operator|.
name|deviceMounts
expr_stmt|;
name|this
operator|.
name|envs
operator|=
name|builder
operator|.
name|envs
expr_stmt|;
name|this
operator|.
name|volumeSpecs
operator|=
name|builder
operator|.
name|volumeSpecs
expr_stmt|;
name|this
operator|.
name|volumeMounts
operator|=
name|builder
operator|.
name|volumeMounts
expr_stmt|;
block|}
DECL|method|getContainerRuntime ()
specifier|public
name|String
name|getContainerRuntime
parameter_list|()
block|{
return|return
name|containerRuntime
return|;
block|}
DECL|method|getEnvs ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getEnvs
parameter_list|()
block|{
return|return
name|envs
return|;
block|}
DECL|method|getVolumeMounts ()
specifier|public
name|Set
argument_list|<
name|MountVolumeSpec
argument_list|>
name|getVolumeMounts
parameter_list|()
block|{
return|return
name|volumeMounts
return|;
block|}
DECL|method|getDeviceMounts ()
specifier|public
name|Set
argument_list|<
name|MountDeviceSpec
argument_list|>
name|getDeviceMounts
parameter_list|()
block|{
return|return
name|deviceMounts
return|;
block|}
DECL|method|getVolumeSpecs ()
specifier|public
name|Set
argument_list|<
name|VolumeSpec
argument_list|>
name|getVolumeSpecs
parameter_list|()
block|{
return|return
name|volumeSpecs
return|;
block|}
comment|/**    * Builder for DeviceRuntimeSpec.    * */
DECL|class|Builder
specifier|public
specifier|final
specifier|static
class|class
name|Builder
block|{
DECL|field|containerRuntime
specifier|private
name|String
name|containerRuntime
decl_stmt|;
DECL|field|envs
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envs
decl_stmt|;
DECL|field|volumeMounts
specifier|private
name|Set
argument_list|<
name|MountVolumeSpec
argument_list|>
name|volumeMounts
decl_stmt|;
DECL|field|deviceMounts
specifier|private
name|Set
argument_list|<
name|MountDeviceSpec
argument_list|>
name|deviceMounts
decl_stmt|;
DECL|field|volumeSpecs
specifier|private
name|Set
argument_list|<
name|VolumeSpec
argument_list|>
name|volumeSpecs
decl_stmt|;
DECL|method|Builder ()
specifier|private
name|Builder
parameter_list|()
block|{
name|containerRuntime
operator|=
literal|""
expr_stmt|;
name|envs
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|volumeSpecs
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
name|deviceMounts
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
name|volumeMounts
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|newInstance ()
specifier|public
specifier|static
name|Builder
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
DECL|method|build ()
specifier|public
name|DeviceRuntimeSpec
name|build
parameter_list|()
block|{
return|return
operator|new
name|DeviceRuntimeSpec
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|setContainerRuntime (String cRuntime)
specifier|public
name|Builder
name|setContainerRuntime
parameter_list|(
name|String
name|cRuntime
parameter_list|)
block|{
name|this
operator|.
name|containerRuntime
operator|=
name|cRuntime
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addVolumeSpec (VolumeSpec spec)
specifier|public
name|Builder
name|addVolumeSpec
parameter_list|(
name|VolumeSpec
name|spec
parameter_list|)
block|{
name|this
operator|.
name|volumeSpecs
operator|.
name|add
argument_list|(
name|spec
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addMountVolumeSpec (MountVolumeSpec spec)
specifier|public
name|Builder
name|addMountVolumeSpec
parameter_list|(
name|MountVolumeSpec
name|spec
parameter_list|)
block|{
name|this
operator|.
name|volumeMounts
operator|.
name|add
argument_list|(
name|spec
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addMountDeviceSpec (MountDeviceSpec spec)
specifier|public
name|Builder
name|addMountDeviceSpec
parameter_list|(
name|MountDeviceSpec
name|spec
parameter_list|)
block|{
name|this
operator|.
name|deviceMounts
operator|.
name|add
argument_list|(
name|spec
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addEnv (String key, String value)
specifier|public
name|Builder
name|addEnv
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|envs
operator|.
name|put
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|key
argument_list|)
argument_list|,
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
block|}
end_class

end_unit

