begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.nodelabels
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|nodelabels
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|ShellCommandExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_comment
comment|/**  * The class which provides functionality of getting the labels of the node  * using the configured node labels provider script. "NODE_PARTITION:" is the  * pattern which will be used to search node label partition from the out put of  * the NodeLabels provider script  */
end_comment

begin_class
DECL|class|ScriptBasedNodeLabelsProvider
specifier|public
class|class
name|ScriptBasedNodeLabelsProvider
extends|extends
name|AbstractNodeLabelsProvider
block|{
comment|/** Absolute path to the node labels script. */
DECL|field|nodeLabelsScriptPath
specifier|private
name|String
name|nodeLabelsScriptPath
decl_stmt|;
comment|/** Time after which the script should be timed out */
DECL|field|scriptTimeout
specifier|private
name|long
name|scriptTimeout
decl_stmt|;
comment|/** ShellCommandExecutor used to execute monitoring script */
DECL|field|shexec
name|ShellCommandExecutor
name|shexec
init|=
literal|null
decl_stmt|;
comment|/** Pattern used for searching in the output of the node labels script */
DECL|field|NODE_LABEL_PARTITION_PATTERN
specifier|public
specifier|static
specifier|final
name|String
name|NODE_LABEL_PARTITION_PATTERN
init|=
literal|"NODE_PARTITION:"
decl_stmt|;
DECL|field|scriptArgs
specifier|private
name|String
index|[]
name|scriptArgs
decl_stmt|;
DECL|method|ScriptBasedNodeLabelsProvider ()
specifier|public
name|ScriptBasedNodeLabelsProvider
parameter_list|()
block|{
name|super
argument_list|(
name|ScriptBasedNodeLabelsProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*    * Method which initializes the values for the script path and interval time.    */
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeLabelsScriptPath
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_SCRIPT_BASED_NODE_LABELS_PROVIDER_PATH
argument_list|)
expr_stmt|;
name|this
operator|.
name|scriptTimeout
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NODE_LABELS_PROVIDER_FETCH_TIMEOUT_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_NODE_LABELS_PROVIDER_FETCH_TIMEOUT_MS
argument_list|)
expr_stmt|;
name|scriptArgs
operator|=
name|conf
operator|.
name|getStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_SCRIPT_BASED_NODE_LABELS_PROVIDER_SCRIPT_OPTS
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|verifyConfiguredScript
argument_list|()
expr_stmt|;
block|}
comment|/**    * Method used to determine if or not node labels fetching script is    * configured and whether it is fit to run. Returns true if following    * conditions are met:    *    *<ol>    *<li>Path to Node Labels fetch script is not empty</li>    *<li>Node Labels fetch script file exists</li>    *</ol>    *    * @param conf    * @return true if node labels script can be run.    * @throws IOException    */
DECL|method|verifyConfiguredScript ()
specifier|private
name|void
name|verifyConfiguredScript
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|invalidConfiguration
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|nodeLabelsScriptPath
operator|==
literal|null
operator|||
name|nodeLabelsScriptPath
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|invalidConfiguration
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|nodeLabelsScriptPath
argument_list|)
decl_stmt|;
name|invalidConfiguration
operator|=
operator|!
name|f
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|FileUtil
operator|.
name|canExecute
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|invalidConfiguration
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Distributed Node labels provider script \""
operator|+
name|nodeLabelsScriptPath
operator|+
literal|"\" is not configured properly. Please check whether the script "
operator|+
literal|"path exists, owner and the access rights are suitable for NM "
operator|+
literal|"process to execute it"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Method used to terminate the Node Labels Fetch script.    *    * @throws Exception    */
annotation|@
name|Override
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
block|{
if|if
condition|(
name|shexec
operator|!=
literal|null
condition|)
block|{
name|Process
name|p
init|=
name|shexec
operator|.
name|getProcess
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|createTimerTask ()
specifier|public
name|TimerTask
name|createTimerTask
parameter_list|()
block|{
return|return
operator|new
name|NodeLabelsScriptRunner
argument_list|()
return|;
block|}
comment|/**    * Class which is used by the {@link Timer} class to periodically execute the    * node labels script.    */
DECL|class|NodeLabelsScriptRunner
specifier|private
class|class
name|NodeLabelsScriptRunner
extends|extends
name|TimerTask
block|{
DECL|field|LOG
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NodeLabelsScriptRunner
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|NodeLabelsScriptRunner ()
specifier|public
name|NodeLabelsScriptRunner
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|execScript
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|execScript
operator|.
name|add
argument_list|(
name|nodeLabelsScriptPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|scriptArgs
operator|!=
literal|null
condition|)
block|{
name|execScript
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|scriptArgs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|shexec
operator|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|execScript
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|execScript
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|scriptTimeout
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|shexec
operator|.
name|execute
argument_list|()
expr_stmt|;
name|setNodeLabels
argument_list|(
name|fetchLabelsFromScriptOutput
argument_list|(
name|shexec
operator|.
name|getOutput
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|shexec
operator|.
name|isTimedOut
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Node Labels script timed out, Caught exception : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Execution of Node Labels script failed, Caught exception : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Method which collect lines from the output string which begins with      * Patterns provided.      *      * @param scriptOutput string      * @return true if output string has error pattern in it.      * @throws IOException      */
DECL|method|fetchLabelsFromScriptOutput (String scriptOutput)
specifier|private
name|Set
argument_list|<
name|NodeLabel
argument_list|>
name|fetchLabelsFromScriptOutput
parameter_list|(
name|String
name|scriptOutput
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|nodePartitionLabel
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|splits
init|=
name|scriptOutput
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|splits
control|)
block|{
name|String
name|trimmedLine
init|=
name|line
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|trimmedLine
operator|.
name|startsWith
argument_list|(
name|NODE_LABEL_PARTITION_PATTERN
argument_list|)
condition|)
block|{
name|nodePartitionLabel
operator|=
name|trimmedLine
operator|.
name|substring
argument_list|(
name|NODE_LABEL_PARTITION_PATTERN
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|convertToNodeLabelSet
argument_list|(
name|nodePartitionLabel
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

