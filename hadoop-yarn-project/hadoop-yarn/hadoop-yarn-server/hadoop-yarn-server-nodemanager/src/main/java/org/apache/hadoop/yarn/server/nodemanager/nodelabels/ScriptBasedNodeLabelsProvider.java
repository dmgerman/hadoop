begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.nodelabels
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|nodelabels
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_comment
comment|/**  * The class which provides functionality of getting the labels of the node  * using the configured node labels provider script. "NODE_PARTITION:" is the  * pattern which will be used to search node label partition from the out put of  * the NodeLabels provider script  */
end_comment

begin_class
DECL|class|ScriptBasedNodeLabelsProvider
specifier|public
class|class
name|ScriptBasedNodeLabelsProvider
extends|extends
name|NodeLabelsProvider
block|{
comment|/** Pattern used for searching in the output of the node labels script */
DECL|field|NODE_LABEL_PARTITION_PATTERN
specifier|public
specifier|static
specifier|final
name|String
name|NODE_LABEL_PARTITION_PATTERN
init|=
literal|"NODE_PARTITION:"
decl_stmt|;
DECL|field|runner
specifier|private
name|NodeDescriptorsScriptRunner
name|runner
decl_stmt|;
DECL|method|ScriptBasedNodeLabelsProvider ()
specifier|public
name|ScriptBasedNodeLabelsProvider
parameter_list|()
block|{
name|super
argument_list|(
name|ScriptBasedNodeLabelsProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*    * Method which initializes the values for the script path and interval time.    */
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|nodeLabelsScriptPath
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_SCRIPT_BASED_NODE_LABELS_PROVIDER_PATH
argument_list|)
decl_stmt|;
name|long
name|scriptTimeout
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NODE_LABELS_PROVIDER_FETCH_TIMEOUT_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_NODE_LABELS_PROVIDER_FETCH_TIMEOUT_MS
argument_list|)
decl_stmt|;
name|String
index|[]
name|scriptArgs
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_SCRIPT_BASED_NODE_LABELS_PROVIDER_SCRIPT_OPTS
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|verifyConfiguredScript
argument_list|(
name|nodeLabelsScriptPath
argument_list|)
expr_stmt|;
name|long
name|taskInterval
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NODE_LABELS_PROVIDER_FETCH_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_NODE_LABELS_PROVIDER_FETCH_INTERVAL_MS
argument_list|)
decl_stmt|;
name|this
operator|.
name|setIntervalTime
argument_list|(
name|taskInterval
argument_list|)
expr_stmt|;
name|this
operator|.
name|runner
operator|=
operator|new
name|NodeLabelScriptRunner
argument_list|(
name|nodeLabelsScriptPath
argument_list|,
name|scriptArgs
argument_list|,
name|scriptTimeout
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Method used to terminate the Node Labels Fetch script.    */
annotation|@
name|Override
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
block|{
if|if
condition|(
name|runner
operator|!=
literal|null
condition|)
block|{
name|runner
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
block|}
block|}
comment|// A script runner periodically runs a script to get node labels,
comment|// and sets these labels to the given provider.
DECL|class|NodeLabelScriptRunner
specifier|private
specifier|static
class|class
name|NodeLabelScriptRunner
extends|extends
name|NodeDescriptorsScriptRunner
argument_list|<
name|NodeLabel
argument_list|>
block|{
DECL|method|NodeLabelScriptRunner (String scriptPath, String[] scriptArgs, long scriptTimeout, ScriptBasedNodeLabelsProvider provider)
name|NodeLabelScriptRunner
parameter_list|(
name|String
name|scriptPath
parameter_list|,
name|String
index|[]
name|scriptArgs
parameter_list|,
name|long
name|scriptTimeout
parameter_list|,
name|ScriptBasedNodeLabelsProvider
name|provider
parameter_list|)
block|{
name|super
argument_list|(
name|scriptPath
argument_list|,
name|scriptArgs
argument_list|,
name|scriptTimeout
argument_list|,
name|provider
argument_list|)
expr_stmt|;
block|}
comment|/**      * Method which collect lines from the output string which begins with      * Patterns provided.      *      * @param scriptOutput string      * @return true if output string has error pattern in it.      * @throws IOException      */
annotation|@
name|Override
DECL|method|parseOutput (String scriptOutput)
name|Set
argument_list|<
name|NodeLabel
argument_list|>
name|parseOutput
parameter_list|(
name|String
name|scriptOutput
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|nodePartitionLabel
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|splits
init|=
name|scriptOutput
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|splits
control|)
block|{
name|String
name|trimmedLine
init|=
name|line
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|trimmedLine
operator|.
name|startsWith
argument_list|(
name|NODE_LABEL_PARTITION_PATTERN
argument_list|)
condition|)
block|{
name|nodePartitionLabel
operator|=
name|trimmedLine
operator|.
name|substring
argument_list|(
name|NODE_LABEL_PARTITION_PATTERN
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|convertToNodeLabelSet
argument_list|(
name|nodePartitionLabel
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|createTimerTask ()
specifier|public
name|TimerTask
name|createTimerTask
parameter_list|()
block|{
return|return
name|runner
return|;
block|}
block|}
end_class

end_unit

