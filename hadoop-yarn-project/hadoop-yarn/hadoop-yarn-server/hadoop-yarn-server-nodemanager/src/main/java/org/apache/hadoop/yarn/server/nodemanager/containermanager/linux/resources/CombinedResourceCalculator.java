begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.resources
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ProcfsBasedProcessTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ResourceCalculatorProcessTree
import|;
end_import

begin_comment
comment|/**  * CombinedResourceCalculator is a resource calculator that uses cgroups but  * it is backward compatible with procfs in terms of virtual memory usage.  */
end_comment

begin_class
DECL|class|CombinedResourceCalculator
specifier|public
class|class
name|CombinedResourceCalculator
extends|extends
name|ResourceCalculatorProcessTree
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CombinedResourceCalculator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|procfs
specifier|private
name|ProcfsBasedProcessTree
name|procfs
decl_stmt|;
DECL|field|cgroup
specifier|private
name|CGroupsResourceCalculator
name|cgroup
decl_stmt|;
DECL|method|CombinedResourceCalculator (String pid)
specifier|public
name|CombinedResourceCalculator
parameter_list|(
name|String
name|pid
parameter_list|)
block|{
name|super
argument_list|(
name|pid
argument_list|)
expr_stmt|;
name|procfs
operator|=
operator|new
name|ProcfsBasedProcessTree
argument_list|(
name|pid
argument_list|)
expr_stmt|;
name|cgroup
operator|=
operator|new
name|CGroupsResourceCalculator
argument_list|(
name|pid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initialize ()
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|YarnException
block|{
name|procfs
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|cgroup
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateProcessTree ()
specifier|public
name|void
name|updateProcessTree
parameter_list|()
block|{
name|procfs
operator|.
name|updateProcessTree
argument_list|()
expr_stmt|;
name|cgroup
operator|.
name|updateProcessTree
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getProcessTreeDump ()
specifier|public
name|String
name|getProcessTreeDump
parameter_list|()
block|{
return|return
name|procfs
operator|.
name|getProcessTreeDump
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getCpuUsagePercent ()
specifier|public
name|float
name|getCpuUsagePercent
parameter_list|()
block|{
name|float
name|cgroupUsage
init|=
name|cgroup
operator|.
name|getCpuUsagePercent
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|float
name|procfsUsage
init|=
name|procfs
operator|.
name|getCpuUsagePercent
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"CPU Comparison:"
operator|+
name|procfsUsage
operator|+
literal|" "
operator|+
name|cgroupUsage
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Jiffy Comparison:"
operator|+
name|procfs
operator|.
name|getCumulativeCpuTime
argument_list|()
operator|+
literal|" "
operator|+
name|cgroup
operator|.
name|getCumulativeCpuTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|cgroupUsage
return|;
block|}
annotation|@
name|Override
DECL|method|checkPidPgrpidForMatch ()
specifier|public
name|boolean
name|checkPidPgrpidForMatch
parameter_list|()
block|{
return|return
name|procfs
operator|.
name|checkPidPgrpidForMatch
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getCumulativeCpuTime ()
specifier|public
name|long
name|getCumulativeCpuTime
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"CPU Comparison:"
operator|+
name|procfs
operator|.
name|getCumulativeCpuTime
argument_list|()
operator|+
literal|" "
operator|+
name|cgroup
operator|.
name|getCumulativeCpuTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|cgroup
operator|.
name|getCumulativeCpuTime
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getRssMemorySize (int olderThanAge)
specifier|public
name|long
name|getRssMemorySize
parameter_list|(
name|int
name|olderThanAge
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"MEM Comparison:"
operator|+
name|procfs
operator|.
name|getRssMemorySize
argument_list|(
name|olderThanAge
argument_list|)
operator|+
literal|" "
operator|+
name|cgroup
operator|.
name|getRssMemorySize
argument_list|(
name|olderThanAge
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|cgroup
operator|.
name|getRssMemorySize
argument_list|(
name|olderThanAge
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getVirtualMemorySize (int olderThanAge)
specifier|public
name|long
name|getVirtualMemorySize
parameter_list|(
name|int
name|olderThanAge
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"VMEM Comparison:"
operator|+
name|procfs
operator|.
name|getVirtualMemorySize
argument_list|(
name|olderThanAge
argument_list|)
operator|+
literal|" "
operator|+
name|cgroup
operator|.
name|getVirtualMemorySize
argument_list|(
name|olderThanAge
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|procfs
operator|.
name|getVirtualMemorySize
argument_list|(
name|olderThanAge
argument_list|)
return|;
block|}
block|}
end_class

end_unit

