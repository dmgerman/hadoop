begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  * /  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.runtime
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|IOStreamPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|concurrent
operator|.
name|HadoopExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
operator|.
name|ContainerLaunch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|CGroupsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|ResourceHandlerModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|runc
operator|.
name|ImageManifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|runc
operator|.
name|RuncContainerExecutorConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|runc
operator|.
name|RuncContainerExecutorConfig
operator|.
name|OCILayer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|runc
operator|.
name|RuncContainerExecutorConfig
operator|.
name|OCIRuntimeConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|runc
operator|.
name|RuncContainerExecutorConfig
operator|.
name|OCIRuntimeConfig
operator|.
name|OCILinuxConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|runc
operator|.
name|RuncContainerExecutorConfig
operator|.
name|OCIRuntimeConfig
operator|.
name|OCIMount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|runc
operator|.
name|RuncContainerExecutorConfig
operator|.
name|OCIRuntimeConfig
operator|.
name|OCIProcessConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|runc
operator|.
name|RuncImageTagToManifestPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|runc
operator|.
name|RuncManifestToResourcesPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|LocalResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|LocalizedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ResourceLocalizationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|runtime
operator|.
name|ContainerExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|runtime
operator|.
name|ContainerRuntimeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|runtime
operator|.
name|ContainerRuntimeContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|volume
operator|.
name|csi
operator|.
name|ContainerVolumePublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|executor
operator|.
name|ContainerExecContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|DEFAULT_NM_RUNC_IMAGE_TAG_TO_MANIFEST_PLUGIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|DEFAULT_NM_RUNC_LAYER_MOUNTS_TO_KEEP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|DEFAULT_NM_REAP_RUNC_LAYER_MOUNTS_INTERVAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|DEFAULT_NM_RUNC_MANIFEST_TO_RESOURCES_PLUGIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|NM_RUNC_IMAGE_TAG_TO_MANIFEST_PLUGIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|NM_RUNC_LAYER_MOUNTS_TO_KEEP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|NM_RUNC_MANIFEST_TO_RESOURCES_PLUGIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|NM_REAP_RUNC_LAYER_MOUNTS_INTERVAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *<p>This class is an extension of {@link OCIContainerRuntime} that uses the  * native {@code container-executor} binary via a  * {@link PrivilegedOperationExecutor} instance to launch processes inside  * Runc containers.</p>  *  *<p>The following environment variables are used to configure the Runc  * engine:</p>  *  *<ul>  *<li>  *     {@code YARN_CONTAINER_RUNTIME_TYPE} ultimately determines whether a  *     runC container will be used. If the value is {@code runc}, a runC  *     container will be used. Otherwise a regular process tree container will  *     be used. This environment variable is checked by the  *     {@link #isRuncContainerRequested} method, which is called by the  *     {@link DelegatingLinuxContainerRuntime}.  *</li>  *<li>  *     {@code YARN_CONTAINER_RUNTIME_RUNC_IMAGE} names which image  *     will be used to launch the Runc container.  *</li>  *<li>  *     {@code YARN_CONTAINER_RUNTIME_RUNC_MOUNTS} allows users to specify  *     additional volume mounts for the runC container. The value of the  *     environment variable should be a comma-separated list of mounts.  *     All such mounts must be given as {@code source:dest[:mode]} and the mode  *     must be "ro" (read-only) or "rw" (read-write) to specify the type of  *     access being requested. If neither is specified, read-write will be  *     assumed. The requested mounts will be validated by  *     container-executor based on the values set in container-executor.cfg for  *     {@code runc.allowed.ro-mounts} and {@code runc.allowed.rw-mounts}.  *</li>  *<li>  *     {@code YARN_CONTAINER_RUNTIME_RUNC_CONTAINER_HOSTNAME} sets the  *     hostname to be used by the Runc container. If not specified, a  *     hostname will be derived from the container ID and set as default  *     hostname for networks other than 'host'.  *</li>  *</ul>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|RuncContainerRuntime
specifier|public
class|class
name|RuncContainerRuntime
extends|extends
name|OCIContainerRuntime
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RuncContainerRuntime
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|field|RUNTIME_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|RUNTIME_TYPE
init|=
literal|"RUNC"
decl_stmt|;
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|field|ENV_RUNC_CONTAINER_IMAGE
specifier|public
specifier|static
specifier|final
name|String
name|ENV_RUNC_CONTAINER_IMAGE
init|=
literal|"YARN_CONTAINER_RUNTIME_RUNC_IMAGE"
decl_stmt|;
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|field|ENV_RUNC_CONTAINER_MOUNTS
specifier|public
specifier|static
specifier|final
name|String
name|ENV_RUNC_CONTAINER_MOUNTS
init|=
literal|"YARN_CONTAINER_RUNTIME_RUNC_MOUNTS"
decl_stmt|;
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|field|ENV_RUNC_CONTAINER_HOSTNAME
specifier|public
specifier|static
specifier|final
name|String
name|ENV_RUNC_CONTAINER_HOSTNAME
init|=
literal|"YARN_CONTAINER_RUNTIME_RUNC_CONTAINER_HOSTNAME"
decl_stmt|;
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|field|ENV_RUNC_CONTAINER_PID_NAMESPACE
specifier|public
specifier|final
specifier|static
name|String
name|ENV_RUNC_CONTAINER_PID_NAMESPACE
init|=
name|formatOciEnvKey
argument_list|(
name|RUNTIME_TYPE
argument_list|,
name|CONTAINER_PID_NAMESPACE_SUFFIX
argument_list|)
decl_stmt|;
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|field|ENV_RUNC_CONTAINER_RUN_PRIVILEGED_CONTAINER
specifier|public
specifier|final
specifier|static
name|String
name|ENV_RUNC_CONTAINER_RUN_PRIVILEGED_CONTAINER
init|=
name|formatOciEnvKey
argument_list|(
name|RUNTIME_TYPE
argument_list|,
name|RUN_PRIVILEGED_CONTAINER_SUFFIX
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|nmContext
specifier|private
name|Context
name|nmContext
decl_stmt|;
DECL|field|privilegedOperationExecutor
specifier|private
name|PrivilegedOperationExecutor
name|privilegedOperationExecutor
decl_stmt|;
DECL|field|cGroupsHandler
specifier|private
name|CGroupsHandler
name|cGroupsHandler
decl_stmt|;
DECL|field|imageTagToManifestPlugin
specifier|private
name|RuncImageTagToManifestPlugin
name|imageTagToManifestPlugin
decl_stmt|;
DECL|field|manifestToResourcesPlugin
specifier|private
name|RuncManifestToResourcesPlugin
name|manifestToResourcesPlugin
decl_stmt|;
DECL|field|mapper
specifier|private
name|ObjectMapper
name|mapper
decl_stmt|;
DECL|field|seccomp
specifier|private
name|String
name|seccomp
decl_stmt|;
DECL|field|layersToKeep
specifier|private
name|int
name|layersToKeep
decl_stmt|;
DECL|field|defaultRuncImage
specifier|private
name|String
name|defaultRuncImage
decl_stmt|;
DECL|field|exec
specifier|private
name|ScheduledExecutorService
name|exec
decl_stmt|;
DECL|field|seccompProfile
specifier|private
name|String
name|seccompProfile
decl_stmt|;
DECL|field|defaultROMounts
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|defaultROMounts
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|defaultRWMounts
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|defaultRWMounts
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|allowedNetworks
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|allowedNetworks
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|allowedRuntimes
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|allowedRuntimes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|privilegedContainersAcl
specifier|private
name|AccessControlList
name|privilegedContainersAcl
decl_stmt|;
DECL|method|RuncContainerRuntime (PrivilegedOperationExecutor privilegedOperationExecutor)
specifier|public
name|RuncContainerRuntime
parameter_list|(
name|PrivilegedOperationExecutor
name|privilegedOperationExecutor
parameter_list|)
block|{
name|this
argument_list|(
name|privilegedOperationExecutor
argument_list|,
name|ResourceHandlerModule
operator|.
name|getCGroupsHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//A constructor with an injected cGroupsHandler primarily used for testing.
annotation|@
name|VisibleForTesting
DECL|method|RuncContainerRuntime (PrivilegedOperationExecutor privilegedOperationExecutor, CGroupsHandler cGroupsHandler)
specifier|public
name|RuncContainerRuntime
parameter_list|(
name|PrivilegedOperationExecutor
name|privilegedOperationExecutor
parameter_list|,
name|CGroupsHandler
name|cGroupsHandler
parameter_list|)
block|{
name|super
argument_list|(
name|privilegedOperationExecutor
argument_list|,
name|cGroupsHandler
argument_list|)
expr_stmt|;
name|this
operator|.
name|privilegedOperationExecutor
operator|=
name|privilegedOperationExecutor
expr_stmt|;
if|if
condition|(
name|cGroupsHandler
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"cGroupsHandler is null - cgroups not in use."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|cGroupsHandler
operator|=
name|cGroupsHandler
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|initialize (Configuration configuration, Context nmCtx)
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|Context
name|nmCtx
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|configuration
argument_list|,
name|nmCtx
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|nmContext
operator|=
name|nmCtx
expr_stmt|;
name|imageTagToManifestPlugin
operator|=
name|chooseImageTagToManifestPlugin
argument_list|()
expr_stmt|;
name|imageTagToManifestPlugin
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|manifestToResourcesPlugin
operator|=
name|chooseManifestToResourcesPlugin
argument_list|()
expr_stmt|;
name|manifestToResourcesPlugin
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|mapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
expr_stmt|;
name|defaultRuncImage
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RUNC_IMAGE_NAME
argument_list|)
expr_stmt|;
name|allowedNetworks
operator|.
name|clear
argument_list|()
expr_stmt|;
name|allowedRuntimes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|allowedNetworks
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|conf
operator|.
name|getTrimmedStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RUNC_ALLOWED_CONTAINER_NETWORKS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_RUNC_ALLOWED_CONTAINER_NETWORKS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|allowedRuntimes
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|conf
operator|.
name|getTrimmedStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RUNC_ALLOWED_CONTAINER_RUNTIMES
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_RUNC_ALLOWED_CONTAINER_RUNTIMES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|privilegedContainersAcl
operator|=
operator|new
name|AccessControlList
argument_list|(
name|conf
operator|.
name|getTrimmed
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RUNC_PRIVILEGED_CONTAINERS_ACL
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_RUNC_PRIVILEGED_CONTAINERS_ACL
argument_list|)
argument_list|)
expr_stmt|;
name|seccompProfile
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RUNC_SECCOMP_PROFILE
argument_list|)
expr_stmt|;
name|defaultROMounts
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|conf
operator|.
name|getTrimmedStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RUNC_DEFAULT_RO_MOUNTS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|defaultRWMounts
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|conf
operator|.
name|getTrimmedStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RUNC_DEFAULT_RW_MOUNTS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
comment|//TODO Remove whitespace in seccomp that gets output to config.json
if|if
condition|(
name|seccompProfile
operator|!=
literal|null
condition|)
block|{
name|seccomp
operator|=
operator|new
name|String
argument_list|(
name|Files
operator|.
name|readAllBytes
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|seccompProfile
argument_list|)
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
name|layersToKeep
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|NM_RUNC_LAYER_MOUNTS_TO_KEEP
argument_list|,
name|DEFAULT_NM_RUNC_LAYER_MOUNTS_TO_KEEP
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|int
name|reapRuncLayerMountsInterval
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|NM_REAP_RUNC_LAYER_MOUNTS_INTERVAL
argument_list|,
name|DEFAULT_NM_REAP_RUNC_LAYER_MOUNTS_INTERVAL
argument_list|)
decl_stmt|;
name|exec
operator|=
name|HadoopExecutors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|exec
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|PrivilegedOperation
name|launchOp
init|=
operator|new
name|PrivilegedOperation
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|REAP_RUNC_LAYER_MOUNTS
argument_list|)
decl_stmt|;
name|launchOp
operator|.
name|appendArgs
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|layersToKeep
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|stdout
init|=
name|privilegedOperationExecutor
operator|.
name|executePrivilegedOperation
argument_list|(
literal|null
argument_list|,
name|launchOp
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|stdout
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Reap layer mounts thread: "
operator|+
name|stdout
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PrivilegedOperationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to reap old runc layer mounts"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Reap layer mount thread caught an exception: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
literal|0
argument_list|,
name|reapRuncLayerMountsInterval
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|imageTagToManifestPlugin
operator|.
name|start
argument_list|()
expr_stmt|;
name|manifestToResourcesPlugin
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|exec
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|imageTagToManifestPlugin
operator|.
name|stop
argument_list|()
expr_stmt|;
name|manifestToResourcesPlugin
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|launchContainer (ContainerRuntimeContext ctx)
specifier|public
name|void
name|launchContainer
parameter_list|(
name|ContainerRuntimeContext
name|ctx
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|env
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Container
name|container
init|=
name|ctx
operator|.
name|getContainer
argument_list|()
decl_stmt|;
name|String
name|runAsUser
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|RUN_AS_USER
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|USER
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|container
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
init|=
name|container
operator|.
name|getLaunchContext
argument_list|()
operator|.
name|getEnvironment
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|OCIMount
argument_list|>
name|mounts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|OCILayer
argument_list|>
name|layers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|hostname
init|=
name|environment
operator|.
name|get
argument_list|(
name|ENV_RUNC_CONTAINER_HOSTNAME
argument_list|)
decl_stmt|;
name|validateHostname
argument_list|(
name|hostname
argument_list|)
expr_stmt|;
name|String
name|containerIdStr
init|=
name|containerId
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|applicationId
init|=
name|appId
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Path
name|containerWorkDir
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|CONTAINER_WORK_DIR
argument_list|)
decl_stmt|;
name|RuncRuntimeObject
name|runcRuntimeObject
init|=
name|container
operator|.
name|getContainerRuntimeData
argument_list|(
name|RuncRuntimeObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LocalResource
argument_list|>
name|layerResources
init|=
name|runcRuntimeObject
operator|.
name|getOCILayers
argument_list|()
decl_stmt|;
name|ResourceLocalizationService
name|localizationService
init|=
name|nmContext
operator|.
name|getContainerManager
argument_list|()
operator|.
name|getResourceLocalizationService
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
try|try
block|{
name|LocalResource
name|rsrc
init|=
name|runcRuntimeObject
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|LocalResourceRequest
name|req
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|rsrc
argument_list|)
decl_stmt|;
name|LocalizedResource
name|localRsrc
init|=
name|localizationService
operator|.
name|getLocalizedResource
argument_list|(
name|req
argument_list|,
name|user
argument_list|,
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|localRsrc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
literal|"Could not successfully "
operator|+
literal|"localize layers. rsrc: "
operator|+
name|rsrc
operator|.
name|getResource
argument_list|()
operator|.
name|getFile
argument_list|()
argument_list|)
throw|;
block|}
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|localRsrc
operator|.
name|getLocalPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|imageEnv
init|=
name|extractImageEnv
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|imageEnv
operator|!=
literal|null
operator|&&
operator|!
name|imageEnv
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|env
operator|.
name|addAll
argument_list|(
name|imageEnv
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|entrypoint
init|=
name|extractImageEntrypoint
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|entrypoint
operator|!=
literal|null
operator|&&
operator|!
name|entrypoint
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|args
operator|.
name|addAll
argument_list|(
name|entrypoint
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
for|for
control|(
name|LocalResource
name|rsrc
range|:
name|layerResources
control|)
block|{
name|LocalResourceRequest
name|req
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|rsrc
argument_list|)
decl_stmt|;
name|LocalizedResource
name|localRsrc
init|=
name|localizationService
operator|.
name|getLocalizedResource
argument_list|(
name|req
argument_list|,
name|user
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|OCILayer
name|layer
init|=
operator|new
name|OCILayer
argument_list|(
literal|"application/vnd.squashfs"
argument_list|,
name|localRsrc
operator|.
name|getLocalPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|layers
operator|.
name|add
argument_list|(
name|layer
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|setContainerMounts
argument_list|(
name|mounts
argument_list|,
name|ctx
argument_list|,
name|containerWorkDir
argument_list|,
name|environment
argument_list|)
expr_stmt|;
name|String
name|resourcesOpts
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|RESOURCES_OPTIONS
argument_list|)
decl_stmt|;
name|Path
name|nmPrivateContainerScriptPath
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|NM_PRIVATE_CONTAINER_SCRIPT_PATH
argument_list|)
decl_stmt|;
name|Path
name|nmPrivateTokensPath
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|NM_PRIVATE_TOKENS_PATH
argument_list|)
decl_stmt|;
name|int
name|cpuShares
init|=
name|container
operator|.
name|getResource
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
decl_stmt|;
comment|// Zero sets to default of 1024.  2 is the minimum value otherwise
if|if
condition|(
name|cpuShares
operator|<
literal|2
condition|)
block|{
name|cpuShares
operator|=
literal|2
expr_stmt|;
block|}
name|Path
name|launchDst
init|=
operator|new
name|Path
argument_list|(
name|containerWorkDir
argument_list|,
name|ContainerLaunch
operator|.
name|CONTAINER_SCRIPT
argument_list|)
decl_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"bash"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|launchDst
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|cgroupPath
init|=
name|getCgroupPath
argument_list|(
name|resourcesOpts
argument_list|,
literal|"runc-"
operator|+
name|containerIdStr
argument_list|)
decl_stmt|;
name|String
name|pidFile
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|PID_FILE_PATH
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|localDirs
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|LOCAL_DIRS
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|logDirs
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|LOG_DIRS
argument_list|)
decl_stmt|;
name|Path
name|keystorePath
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|NM_PRIVATE_KEYSTORE_PATH
argument_list|)
decl_stmt|;
name|Path
name|truststorePath
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|NM_PRIVATE_TRUSTSTORE_PATH
argument_list|)
decl_stmt|;
name|int
name|https
init|=
literal|0
decl_stmt|;
name|String
name|keystore
init|=
literal|null
decl_stmt|;
name|String
name|truststore
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|keystorePath
operator|!=
literal|null
operator|&&
name|truststorePath
operator|!=
literal|null
condition|)
block|{
name|https
operator|=
literal|1
expr_stmt|;
name|keystore
operator|=
name|keystorePath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|truststore
operator|=
name|truststorePath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
name|OCIProcessConfig
name|processConfig
init|=
name|createOCIProcessConfig
argument_list|(
name|containerWorkDir
operator|.
name|toString
argument_list|()
argument_list|,
name|env
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|OCILinuxConfig
name|linuxConfig
init|=
name|createOCILinuxConfig
argument_list|(
name|cpuShares
argument_list|,
name|cgroupPath
argument_list|,
name|seccomp
argument_list|)
decl_stmt|;
name|OCIRuntimeConfig
name|ociRuntimeConfig
init|=
operator|new
name|OCIRuntimeConfig
argument_list|(
literal|null
argument_list|,
name|mounts
argument_list|,
name|processConfig
argument_list|,
name|hostname
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|linuxConfig
argument_list|)
decl_stmt|;
name|RuncContainerExecutorConfig
name|runcContainerExecutorConfig
init|=
name|createRuncContainerExecutorConfig
argument_list|(
name|runAsUser
argument_list|,
name|user
argument_list|,
name|containerIdStr
argument_list|,
name|applicationId
argument_list|,
name|pidFile
argument_list|,
name|nmPrivateContainerScriptPath
operator|.
name|toString
argument_list|()
argument_list|,
name|nmPrivateTokensPath
operator|.
name|toString
argument_list|()
argument_list|,
name|https
argument_list|,
name|keystore
argument_list|,
name|truststore
argument_list|,
name|localDirs
argument_list|,
name|logDirs
argument_list|,
name|layers
argument_list|,
name|ociRuntimeConfig
argument_list|)
decl_stmt|;
name|String
name|commandFile
init|=
name|writeCommandToFile
argument_list|(
name|runcContainerExecutorConfig
argument_list|,
name|container
argument_list|)
decl_stmt|;
name|PrivilegedOperation
name|launchOp
init|=
operator|new
name|PrivilegedOperation
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|RUN_RUNC_CONTAINER
argument_list|)
decl_stmt|;
name|launchOp
operator|.
name|appendArgs
argument_list|(
name|commandFile
argument_list|)
expr_stmt|;
try|try
block|{
name|privilegedOperationExecutor
operator|.
name|executePrivilegedOperation
argument_list|(
literal|null
argument_list|,
name|launchOp
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PrivilegedOperationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Launch container failed: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"config.json used: "
operator|+
name|mapper
operator|.
name|writeValueAsString
argument_list|(
name|runcContainerExecutorConfig
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Json Generation Exception"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
literal|"Launch container failed"
argument_list|,
name|e
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|e
operator|.
name|getOutput
argument_list|()
argument_list|,
name|e
operator|.
name|getErrorOutput
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|getCgroupPath (String resourcesOptions, String containerIdStr)
specifier|private
name|String
name|getCgroupPath
parameter_list|(
name|String
name|resourcesOptions
parameter_list|,
name|String
name|containerIdStr
parameter_list|)
block|{
if|if
condition|(
name|cGroupsHandler
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"cGroupsHandler is null. cgroups are not in use. nothing to"
operator|+
literal|" do."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|resourcesOptions
operator|.
name|equals
argument_list|(
operator|(
name|PrivilegedOperation
operator|.
name|CGROUP_ARG_PREFIX
operator|+
name|PrivilegedOperation
operator|.
name|CGROUP_ARG_NO_TASKS
operator|)
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"no resource restrictions specified. not using runc's "
operator|+
literal|"cgroup options"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"using runc's cgroups options"
argument_list|)
expr_stmt|;
name|String
name|cGroupPath
init|=
literal|"/"
operator|+
name|cGroupsHandler
operator|.
name|getRelativePathForCGroup
argument_list|(
name|containerIdStr
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"using cgroup parent: "
operator|+
name|cGroupPath
argument_list|)
expr_stmt|;
return|return
name|cGroupPath
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|addUserMounts (List<OCIMount> mounts, Map<String, String> environment, Map<Path, List<String>> localizedResources)
specifier|private
name|void
name|addUserMounts
parameter_list|(
name|List
argument_list|<
name|OCIMount
argument_list|>
name|mounts
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
parameter_list|,
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|localizedResources
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
if|if
condition|(
name|environment
operator|.
name|containsKey
argument_list|(
name|ENV_RUNC_CONTAINER_MOUNTS
argument_list|)
condition|)
block|{
name|Matcher
name|parsedMounts
init|=
name|USER_MOUNT_PATTERN
operator|.
name|matcher
argument_list|(
name|environment
operator|.
name|get
argument_list|(
name|ENV_RUNC_CONTAINER_MOUNTS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|parsedMounts
operator|.
name|find
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
literal|"Unable to parse user supplied mount list: "
operator|+
name|environment
operator|.
name|get
argument_list|(
name|ENV_RUNC_CONTAINER_MOUNTS
argument_list|)
argument_list|)
throw|;
block|}
name|parsedMounts
operator|.
name|reset
argument_list|()
expr_stmt|;
name|long
name|mountCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|parsedMounts
operator|.
name|find
argument_list|()
condition|)
block|{
name|mountCount
operator|++
expr_stmt|;
name|String
name|src
init|=
name|parsedMounts
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|srcPath
init|=
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
operator|.
name|get
argument_list|(
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|srcPath
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|src
operator|=
name|mountReadOnlyPath
argument_list|(
name|src
argument_list|,
name|localizedResources
argument_list|)
expr_stmt|;
block|}
name|String
name|dst
init|=
name|parsedMounts
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|mode
init|=
name|parsedMounts
operator|.
name|group
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|boolean
name|isReadWrite
decl_stmt|;
if|if
condition|(
name|mode
operator|==
literal|null
condition|)
block|{
name|isReadWrite
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|.
name|equals
argument_list|(
literal|"rw"
argument_list|)
condition|)
block|{
name|isReadWrite
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|.
name|equals
argument_list|(
literal|"ro"
argument_list|)
condition|)
block|{
name|isReadWrite
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
literal|"Unable to parse mode of some mounts in user supplied "
operator|+
literal|"mount list: "
operator|+
name|environment
operator|.
name|get
argument_list|(
name|ENV_RUNC_CONTAINER_MOUNTS
argument_list|)
argument_list|)
throw|;
block|}
name|addRuncMountLocation
argument_list|(
name|mounts
argument_list|,
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
name|isReadWrite
argument_list|)
expr_stmt|;
block|}
name|long
name|commaCount
init|=
name|environment
operator|.
name|get
argument_list|(
name|ENV_RUNC_CONTAINER_MOUNTS
argument_list|)
operator|.
name|chars
argument_list|()
operator|.
name|filter
argument_list|(
name|c
lambda|->
name|c
operator|==
literal|','
argument_list|)
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|mountCount
operator|!=
name|commaCount
operator|+
literal|1
condition|)
block|{
comment|// this means the matcher skipped an improperly formatted mount
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
literal|"Unable to parse some mounts in user supplied mount list: "
operator|+
name|environment
operator|.
name|get
argument_list|(
name|ENV_RUNC_CONTAINER_MOUNTS
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|addDefaultMountLocation (List<OCIMount> mounts, Set<String> defaultMounts, boolean createSource, boolean isReadWrite)
specifier|private
name|void
name|addDefaultMountLocation
parameter_list|(
name|List
argument_list|<
name|OCIMount
argument_list|>
name|mounts
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|defaultMounts
parameter_list|,
name|boolean
name|createSource
parameter_list|,
name|boolean
name|isReadWrite
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
if|if
condition|(
name|defaultMounts
operator|!=
literal|null
operator|&&
operator|!
name|defaultMounts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|mount
range|:
name|defaultMounts
control|)
block|{
name|String
index|[]
name|dir
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|mount
argument_list|,
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
literal|"Invalid mount : "
operator|+
name|mount
argument_list|)
throw|;
block|}
name|String
name|src
init|=
name|dir
index|[
literal|0
index|]
decl_stmt|;
name|String
name|dst
init|=
name|dir
index|[
literal|1
index|]
decl_stmt|;
name|addRuncMountLocation
argument_list|(
name|mounts
argument_list|,
name|src
argument_list|,
name|dst
argument_list|,
name|createSource
argument_list|,
name|isReadWrite
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addRuncMountLocation (List<OCIMount> mounts, String srcPath, String dstPath, boolean createSource, boolean isReadWrite)
specifier|private
name|void
name|addRuncMountLocation
parameter_list|(
name|List
argument_list|<
name|OCIMount
argument_list|>
name|mounts
parameter_list|,
name|String
name|srcPath
parameter_list|,
name|String
name|dstPath
parameter_list|,
name|boolean
name|createSource
parameter_list|,
name|boolean
name|isReadWrite
parameter_list|)
block|{
if|if
condition|(
operator|!
name|createSource
condition|)
block|{
name|boolean
name|sourceExists
init|=
operator|new
name|File
argument_list|(
name|srcPath
argument_list|)
operator|.
name|exists
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|sourceExists
condition|)
block|{
return|return;
block|}
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isReadWrite
condition|)
block|{
name|options
operator|.
name|add
argument_list|(
literal|"rw"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|options
operator|.
name|add
argument_list|(
literal|"ro"
argument_list|)
expr_stmt|;
block|}
name|options
operator|.
name|add
argument_list|(
literal|"rbind"
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"rprivate"
argument_list|)
expr_stmt|;
name|mounts
operator|.
name|add
argument_list|(
operator|new
name|OCIMount
argument_list|(
name|dstPath
argument_list|,
literal|"bind"
argument_list|,
name|srcPath
argument_list|,
name|options
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addAllRuncMountLocations (List<OCIMount> mounts, List<String> paths, boolean createSource, boolean isReadWrite)
specifier|private
name|void
name|addAllRuncMountLocations
parameter_list|(
name|List
argument_list|<
name|OCIMount
argument_list|>
name|mounts
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|,
name|boolean
name|createSource
parameter_list|,
name|boolean
name|isReadWrite
parameter_list|)
block|{
for|for
control|(
name|String
name|dir
range|:
name|paths
control|)
block|{
name|this
operator|.
name|addRuncMountLocation
argument_list|(
name|mounts
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|createSource
argument_list|,
name|isReadWrite
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getLocalResources ( Container container)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|getLocalResources
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|containerLocalRsrc
init|=
name|container
operator|.
name|getLaunchContext
argument_list|()
operator|.
name|getLocalResources
argument_list|()
decl_stmt|;
name|long
name|layerCount
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
init|=
name|container
operator|.
name|getLaunchContext
argument_list|()
operator|.
name|getEnvironment
argument_list|()
decl_stmt|;
name|String
name|imageName
init|=
name|environment
operator|.
name|get
argument_list|(
name|ENV_RUNC_CONTAINER_IMAGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|imageName
operator|==
literal|null
operator|||
name|imageName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|environment
operator|.
name|put
argument_list|(
name|ENV_RUNC_CONTAINER_IMAGE
argument_list|,
name|defaultRuncImage
argument_list|)
expr_stmt|;
name|imageName
operator|=
name|defaultRuncImage
expr_stmt|;
block|}
name|ImageManifest
name|manifest
init|=
name|imageTagToManifestPlugin
operator|.
name|getManifestFromImageTag
argument_list|(
name|imageName
argument_list|)
decl_stmt|;
name|LocalResource
name|config
init|=
name|manifestToResourcesPlugin
operator|.
name|getConfigResource
argument_list|(
name|manifest
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LocalResource
argument_list|>
name|layers
init|=
name|manifestToResourcesPlugin
operator|.
name|getLayerResources
argument_list|(
name|manifest
argument_list|)
decl_stmt|;
name|RuncRuntimeObject
name|runcRuntimeObject
init|=
operator|new
name|RuncRuntimeObject
argument_list|(
name|config
argument_list|,
name|layers
argument_list|)
decl_stmt|;
name|container
operator|.
name|setContainerRuntimeData
argument_list|(
name|runcRuntimeObject
argument_list|)
expr_stmt|;
for|for
control|(
name|LocalResource
name|localRsrc
range|:
name|layers
control|)
block|{
while|while
condition|(
name|containerLocalRsrc
operator|.
name|putIfAbsent
argument_list|(
literal|"runc-layer"
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|layerCount
argument_list|)
argument_list|,
name|localRsrc
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|layerCount
operator|++
expr_stmt|;
block|}
block|}
while|while
condition|(
name|containerLocalRsrc
operator|.
name|putIfAbsent
argument_list|(
literal|"runc-config"
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|layerCount
argument_list|)
argument_list|,
name|config
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|layerCount
operator|++
expr_stmt|;
block|}
return|return
name|containerLocalRsrc
return|;
block|}
DECL|method|chooseImageTagToManifestPlugin ()
specifier|protected
name|RuncImageTagToManifestPlugin
name|chooseImageTagToManifestPlugin
parameter_list|()
throws|throws
name|ContainerExecutionException
block|{
name|String
name|pluginName
init|=
name|conf
operator|.
name|get
argument_list|(
name|NM_RUNC_IMAGE_TAG_TO_MANIFEST_PLUGIN
argument_list|,
name|DEFAULT_NM_RUNC_IMAGE_TAG_TO_MANIFEST_PLUGIN
argument_list|)
decl_stmt|;
name|RuncImageTagToManifestPlugin
name|runcImageTagToManifestPlugin
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|pluginName
argument_list|)
decl_stmt|;
name|runcImageTagToManifestPlugin
operator|=
operator|(
name|RuncImageTagToManifestPlugin
operator|)
name|clazz
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|runcImageTagToManifestPlugin
return|;
block|}
DECL|method|chooseManifestToResourcesPlugin ()
specifier|protected
name|RuncManifestToResourcesPlugin
name|chooseManifestToResourcesPlugin
parameter_list|()
throws|throws
name|ContainerExecutionException
block|{
name|String
name|pluginName
init|=
name|conf
operator|.
name|get
argument_list|(
name|NM_RUNC_MANIFEST_TO_RESOURCES_PLUGIN
argument_list|,
name|DEFAULT_NM_RUNC_MANIFEST_TO_RESOURCES_PLUGIN
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"pluginName = "
operator|+
name|pluginName
argument_list|)
expr_stmt|;
name|RuncManifestToResourcesPlugin
name|runcManifestToResourcesPlugin
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|pluginName
argument_list|)
decl_stmt|;
name|runcManifestToResourcesPlugin
operator|=
operator|(
name|RuncManifestToResourcesPlugin
operator|)
name|clazz
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|runcManifestToResourcesPlugin
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|extractImageEnv (File config)
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|extractImageEnv
parameter_list|(
name|File
name|config
parameter_list|)
throws|throws
name|IOException
block|{
name|JsonNode
name|node
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|JsonNode
name|envNode
init|=
name|node
operator|.
name|path
argument_list|(
literal|"config"
argument_list|)
operator|.
name|path
argument_list|(
literal|"Env"
argument_list|)
decl_stmt|;
if|if
condition|(
name|envNode
operator|.
name|isMissingNode
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|mapper
operator|.
name|readValue
argument_list|(
name|envNode
argument_list|,
name|List
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|extractImageEntrypoint (File config)
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|extractImageEntrypoint
parameter_list|(
name|File
name|config
parameter_list|)
throws|throws
name|IOException
block|{
name|JsonNode
name|node
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|JsonNode
name|entrypointNode
init|=
name|node
operator|.
name|path
argument_list|(
literal|"config"
argument_list|)
operator|.
name|path
argument_list|(
literal|"Entrypoint"
argument_list|)
decl_stmt|;
if|if
condition|(
name|entrypointNode
operator|.
name|isMissingNode
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|mapper
operator|.
name|readValue
argument_list|(
name|entrypointNode
argument_list|,
name|List
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|createRuncContainerExecutorConfig ( String runAsUser, String username, String containerId, String applicationId, String pidFile, String containerScriptPath, String containerCredentialsPath, int https, String keystorePath, String truststorePath, List<String> localDirs, List<String> logDirs, List<OCILayer> layers, OCIRuntimeConfig ociRuntimeConfig)
specifier|private
name|RuncContainerExecutorConfig
name|createRuncContainerExecutorConfig
parameter_list|(
name|String
name|runAsUser
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|containerId
parameter_list|,
name|String
name|applicationId
parameter_list|,
name|String
name|pidFile
parameter_list|,
name|String
name|containerScriptPath
parameter_list|,
name|String
name|containerCredentialsPath
parameter_list|,
name|int
name|https
parameter_list|,
name|String
name|keystorePath
parameter_list|,
name|String
name|truststorePath
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|localDirs
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|logDirs
parameter_list|,
name|List
argument_list|<
name|OCILayer
argument_list|>
name|layers
parameter_list|,
name|OCIRuntimeConfig
name|ociRuntimeConfig
parameter_list|)
block|{
return|return
operator|new
name|RuncContainerExecutorConfig
argument_list|(
name|runAsUser
argument_list|,
name|username
argument_list|,
name|containerId
argument_list|,
name|applicationId
argument_list|,
name|pidFile
argument_list|,
name|containerScriptPath
argument_list|,
name|containerCredentialsPath
argument_list|,
name|https
argument_list|,
name|keystorePath
argument_list|,
name|truststorePath
argument_list|,
name|localDirs
argument_list|,
name|logDirs
argument_list|,
name|layers
argument_list|,
name|layersToKeep
argument_list|,
name|ociRuntimeConfig
argument_list|)
return|;
block|}
DECL|method|createOCIProcessConfig (String cwd, List<String> env, List<String> args)
specifier|private
name|OCIProcessConfig
name|createOCIProcessConfig
parameter_list|(
name|String
name|cwd
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|env
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
return|return
operator|new
name|OCIProcessConfig
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|,
name|cwd
argument_list|,
name|env
argument_list|,
name|args
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createOCILinuxConfig (long cpuShares, String cgroupsPath, String seccompProf)
specifier|private
name|OCILinuxConfig
name|createOCILinuxConfig
parameter_list|(
name|long
name|cpuShares
parameter_list|,
name|String
name|cgroupsPath
parameter_list|,
name|String
name|seccompProf
parameter_list|)
block|{
name|OCILinuxConfig
operator|.
name|Resources
operator|.
name|CPU
name|cgroupCPU
init|=
operator|new
name|OCILinuxConfig
operator|.
name|Resources
operator|.
name|CPU
argument_list|(
name|cpuShares
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|OCILinuxConfig
operator|.
name|Resources
name|cgroupResources
init|=
operator|new
name|OCILinuxConfig
operator|.
name|Resources
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|cgroupCPU
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
operator|new
name|OCILinuxConfig
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|cgroupsPath
argument_list|,
name|cgroupResources
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|seccompProf
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|setContainerMounts (ArrayList<OCIMount> mounts, ContainerRuntimeContext ctx, Path containerWorkDir, Map<String, String> environment)
specifier|private
name|void
name|setContainerMounts
parameter_list|(
name|ArrayList
argument_list|<
name|OCIMount
argument_list|>
name|mounts
parameter_list|,
name|ContainerRuntimeContext
name|ctx
parameter_list|,
name|Path
name|containerWorkDir
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|filecacheDirs
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|FILECACHE_DIRS
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|containerLogDirs
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|CONTAINER_LOG_DIRS
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|userFilecacheDirs
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|USER_FILECACHE_DIRS
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|applicationLocalDirs
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|APPLICATION_LOCAL_DIRS
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|localizedResources
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|LOCALIZED_RESOURCES
argument_list|)
decl_stmt|;
name|addRuncMountLocation
argument_list|(
name|mounts
argument_list|,
name|containerWorkDir
operator|.
name|toString
argument_list|()
operator|+
literal|"/private_slash_tmp"
argument_list|,
literal|"/tmp"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addRuncMountLocation
argument_list|(
name|mounts
argument_list|,
name|containerWorkDir
operator|.
name|toString
argument_list|()
operator|+
literal|"/private_var_slash_tmp"
argument_list|,
literal|"/var/tmp"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addAllRuncMountLocations
argument_list|(
name|mounts
argument_list|,
name|containerLogDirs
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addAllRuncMountLocations
argument_list|(
name|mounts
argument_list|,
name|applicationLocalDirs
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addAllRuncMountLocations
argument_list|(
name|mounts
argument_list|,
name|filecacheDirs
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addAllRuncMountLocations
argument_list|(
name|mounts
argument_list|,
name|userFilecacheDirs
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addDefaultMountLocation
argument_list|(
name|mounts
argument_list|,
name|defaultROMounts
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addDefaultMountLocation
argument_list|(
name|mounts
argument_list|,
name|defaultRWMounts
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addUserMounts
argument_list|(
name|mounts
argument_list|,
name|environment
argument_list|,
name|localizedResources
argument_list|)
expr_stmt|;
block|}
DECL|method|writeCommandToFile ( RuncContainerExecutorConfig runcContainerExecutorConfig, Container container)
specifier|public
name|String
name|writeCommandToFile
parameter_list|(
name|RuncContainerExecutorConfig
name|runcContainerExecutorConfig
parameter_list|,
name|Container
name|container
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
name|ContainerId
name|containerId
init|=
name|container
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|String
name|filePrefix
init|=
name|containerId
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|File
name|commandFile
decl_stmt|;
try|try
block|{
name|File
name|cmdDir
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|nmContext
operator|!=
literal|null
operator|&&
name|nmContext
operator|.
name|getLocalDirsHandler
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|cmdDirStr
init|=
name|nmContext
operator|.
name|getLocalDirsHandler
argument_list|()
operator|.
name|getLocalPathForWrite
argument_list|(
name|ResourceLocalizationService
operator|.
name|NM_PRIVATE_DIR
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|appId
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|filePrefix
operator|+
name|Path
operator|.
name|SEPARATOR
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|cmdDir
operator|=
operator|new
name|File
argument_list|(
name|cmdDirStr
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cmdDir
operator|.
name|mkdirs
argument_list|()
operator|&&
operator|!
name|cmdDir
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create container private directory "
operator|+
name|cmdDir
argument_list|)
throw|;
block|}
block|}
name|commandFile
operator|=
operator|new
name|File
argument_list|(
name|cmdDir
operator|+
literal|"/runc-config.json"
argument_list|)
expr_stmt|;
try|try
block|{
name|mapper
operator|.
name|writeValue
argument_list|(
name|commandFile
argument_list|,
name|runcContainerExecutorConfig
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
name|commandFile
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to write runc config.json to temporary file!"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getExposedPorts (Container container)
specifier|public
name|String
name|getExposedPorts
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|getIpAndHost (Container container)
specifier|public
name|String
index|[]
name|getIpAndHost
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|execContainer (ContainerExecContext ctx)
specifier|public
name|IOStreamPair
name|execContainer
parameter_list|(
name|ContainerExecContext
name|ctx
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
return|return
literal|null
return|;
block|}
DECL|method|reapContainer (ContainerRuntimeContext ctx)
specifier|public
name|void
name|reapContainer
parameter_list|(
name|ContainerRuntimeContext
name|ctx
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{   }
DECL|method|relaunchContainer (ContainerRuntimeContext ctx)
specifier|public
name|void
name|relaunchContainer
parameter_list|(
name|ContainerRuntimeContext
name|ctx
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{   }
comment|/**    * Return whether the given environment variables indicate that the operation    * is requesting a Runc container.  If the environment contains a key    * called {@code YARN_CONTAINER_RUNTIME_TYPE} whose value is {@code runc},    * this method will return true.  Otherwise it will return false.    *    * @param daemonConf the NodeManager daemon configuration    * @param env the environment variable settings for the operation    * @return whether a Runc container is requested    */
DECL|method|isRuncContainerRequested (Configuration daemonConf, Map<String, String> env)
specifier|public
specifier|static
name|boolean
name|isRuncContainerRequested
parameter_list|(
name|Configuration
name|daemonConf
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|)
block|{
name|String
name|type
init|=
operator|(
name|env
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|env
operator|.
name|get
argument_list|(
name|ContainerRuntimeConstants
operator|.
name|ENV_CONTAINER_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|daemonConf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|LINUX_CONTAINER_RUNTIME_TYPE
argument_list|)
expr_stmt|;
block|}
return|return
name|type
operator|!=
literal|null
operator|&&
name|type
operator|.
name|equals
argument_list|(
name|ContainerRuntimeConstants
operator|.
name|CONTAINER_RUNTIME_RUNC
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isRuntimeRequested (Map<String, String> env)
specifier|public
name|boolean
name|isRuntimeRequested
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|)
block|{
return|return
name|isRuncContainerRequested
argument_list|(
name|conf
argument_list|,
name|env
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|signalContainer (ContainerRuntimeContext ctx)
specifier|public
name|void
name|signalContainer
parameter_list|(
name|ContainerRuntimeContext
name|ctx
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
name|ContainerExecutor
operator|.
name|Signal
name|signal
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|SIGNAL
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
name|ctx
operator|.
name|getContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|signal
operator|==
name|ContainerExecutor
operator|.
name|Signal
operator|.
name|KILL
operator|||
name|signal
operator|==
name|ContainerExecutor
operator|.
name|Signal
operator|.
name|TERM
condition|)
block|{
name|ContainerVolumePublisher
name|publisher
init|=
operator|new
name|ContainerVolumePublisher
argument_list|(
name|container
argument_list|,
name|container
operator|.
name|getCsiVolumesRootDir
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
try|try
block|{
name|publisher
operator|.
name|unpublishVolumes
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|PrivilegedOperation
name|signalOp
init|=
operator|new
name|PrivilegedOperation
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|SIGNAL_CONTAINER
argument_list|)
decl_stmt|;
name|signalOp
operator|.
name|appendArgs
argument_list|(
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|RUN_AS_USER
argument_list|)
argument_list|,
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|USER
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|PrivilegedOperation
operator|.
name|RunAsUserCommand
operator|.
name|SIGNAL_CONTAINER
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|PID
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|signal
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//Some failures here are acceptable. Let the calling executor decide.
name|signalOp
operator|.
name|disableFailureLogging
argument_list|()
expr_stmt|;
try|try
block|{
name|PrivilegedOperationExecutor
name|executor
init|=
name|PrivilegedOperationExecutor
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|executor
operator|.
name|executePrivilegedOperation
argument_list|(
literal|null
argument_list|,
name|signalOp
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PrivilegedOperationException
name|e
parameter_list|)
block|{
comment|//Don't log the failure here. Some kinds of signaling failures are
comment|// acceptable. Let the calling executor decide what to do.
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
literal|"Signal container failed"
argument_list|,
name|e
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|e
operator|.
name|getOutput
argument_list|()
argument_list|,
name|e
operator|.
name|getErrorOutput
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|RuncRuntimeObject
specifier|static
class|class
name|RuncRuntimeObject
block|{
DECL|field|layers
specifier|private
specifier|final
name|List
argument_list|<
name|LocalResource
argument_list|>
name|layers
decl_stmt|;
DECL|field|config
specifier|private
specifier|final
name|LocalResource
name|config
decl_stmt|;
DECL|method|RuncRuntimeObject (LocalResource config, List<LocalResource> layers)
name|RuncRuntimeObject
parameter_list|(
name|LocalResource
name|config
parameter_list|,
name|List
argument_list|<
name|LocalResource
argument_list|>
name|layers
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|layers
operator|=
name|layers
expr_stmt|;
block|}
DECL|method|getConfig ()
specifier|public
name|LocalResource
name|getConfig
parameter_list|()
block|{
return|return
name|this
operator|.
name|config
return|;
block|}
DECL|method|getOCILayers ()
specifier|public
name|List
argument_list|<
name|LocalResource
argument_list|>
name|getOCILayers
parameter_list|()
block|{
return|return
name|this
operator|.
name|layers
return|;
block|}
block|}
DECL|method|getHostPidNamespaceEnabled ()
name|boolean
name|getHostPidNamespaceEnabled
parameter_list|()
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RUNC_ALLOW_HOST_PID_NAMESPACE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_RUNC_ALLOW_HOST_PID_NAMESPACE
argument_list|)
return|;
block|}
DECL|method|getPrivilegedContainersEnabledOnCluster ()
name|boolean
name|getPrivilegedContainersEnabledOnCluster
parameter_list|()
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RUNC_ALLOW_PRIVILEGED_CONTAINERS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_RUNC_ALLOW_PRIVILEGED_CONTAINERS
argument_list|)
return|;
block|}
DECL|method|getAllowedNetworks ()
name|Set
argument_list|<
name|String
argument_list|>
name|getAllowedNetworks
parameter_list|()
block|{
return|return
name|allowedNetworks
return|;
block|}
DECL|method|getAllowedRuntimes ()
name|Set
argument_list|<
name|String
argument_list|>
name|getAllowedRuntimes
parameter_list|()
block|{
return|return
name|allowedRuntimes
return|;
block|}
DECL|method|getPrivilegedContainersAcl ()
name|AccessControlList
name|getPrivilegedContainersAcl
parameter_list|()
block|{
return|return
name|privilegedContainersAcl
return|;
block|}
DECL|method|getEnvOciContainerPidNamespace ()
name|String
name|getEnvOciContainerPidNamespace
parameter_list|()
block|{
return|return
name|ENV_RUNC_CONTAINER_PID_NAMESPACE
return|;
block|}
DECL|method|getEnvOciContainerRunPrivilegedContainer ()
name|String
name|getEnvOciContainerRunPrivilegedContainer
parameter_list|()
block|{
return|return
name|ENV_RUNC_CONTAINER_RUN_PRIVILEGED_CONTAINER
return|;
block|}
block|}
end_class

end_unit

