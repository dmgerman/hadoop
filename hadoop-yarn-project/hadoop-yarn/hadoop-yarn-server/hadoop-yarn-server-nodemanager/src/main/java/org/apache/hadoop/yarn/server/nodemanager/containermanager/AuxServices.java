begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|DeserializationFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|records
operator|.
name|AuxServiceConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|records
operator|.
name|AuxServiceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|records
operator|.
name|AuxServiceRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|records
operator|.
name|AuxServiceRecords
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|ServiceStateChangeListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ApplicationInitializationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ApplicationTerminationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|AuxiliaryLocalPathHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|AuxiliaryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ContainerInitializationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ContainerTerminationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DeletionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|LocalDirsHandlerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|deletion
operator|.
name|task
operator|.
name|FileDeletionTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|FSDownload
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_class
DECL|class|AuxServices
specifier|public
class|class
name|AuxServices
extends|extends
name|AbstractService
implements|implements
name|ServiceStateChangeListener
implements|,
name|EventHandler
argument_list|<
name|AuxServicesEvent
argument_list|>
block|{
DECL|field|NM_AUX_SERVICE_DIR
specifier|public
specifier|static
specifier|final
name|String
name|NM_AUX_SERVICE_DIR
init|=
literal|"nmAuxService"
decl_stmt|;
DECL|field|NM_AUX_SERVICE_DIR_PERM
specifier|public
specifier|static
specifier|final
name|FsPermission
name|NM_AUX_SERVICE_DIR_PERM
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
decl_stmt|;
DECL|field|CLASS_NAME
specifier|public
specifier|static
specifier|final
name|String
name|CLASS_NAME
init|=
literal|"class.name"
decl_stmt|;
DECL|field|SYSTEM_CLASSES
specifier|public
specifier|static
specifier|final
name|String
name|SYSTEM_CLASSES
init|=
literal|"system.classes"
decl_stmt|;
DECL|field|STATE_STORE_ROOT_NAME
specifier|static
specifier|final
name|String
name|STATE_STORE_ROOT_NAME
init|=
literal|"nm-aux-services"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AuxServices
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEL_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|DEL_SUFFIX
init|=
literal|"_DEL_"
decl_stmt|;
DECL|field|serviceMap
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AuxiliaryService
argument_list|>
name|serviceMap
decl_stmt|;
DECL|field|serviceRecordMap
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AuxServiceRecord
argument_list|>
name|serviceRecordMap
decl_stmt|;
DECL|field|serviceMetaData
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|serviceMetaData
decl_stmt|;
DECL|field|auxiliaryLocalPathHandler
specifier|private
specifier|final
name|AuxiliaryLocalPathHandler
name|auxiliaryLocalPathHandler
decl_stmt|;
DECL|field|dirsHandler
specifier|private
specifier|final
name|LocalDirsHandlerService
name|dirsHandler
decl_stmt|;
DECL|field|delService
specifier|private
specifier|final
name|DeletionService
name|delService
decl_stmt|;
DECL|field|userUGI
specifier|private
specifier|final
name|UserGroupInformation
name|userUGI
decl_stmt|;
DECL|field|storeDirPerms
specifier|private
specifier|final
name|FsPermission
name|storeDirPerms
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
decl_stmt|;
DECL|field|stateStoreRoot
specifier|private
name|Path
name|stateStoreRoot
init|=
literal|null
decl_stmt|;
DECL|field|stateStoreFs
specifier|private
name|FileSystem
name|stateStoreFs
init|=
literal|null
decl_stmt|;
DECL|field|manifest
specifier|private
name|Path
name|manifest
decl_stmt|;
DECL|field|manifestFS
specifier|private
name|FileSystem
name|manifestFS
decl_stmt|;
DECL|field|manifestReloadTimer
specifier|private
name|Timer
name|manifestReloadTimer
decl_stmt|;
DECL|field|manifestReloadTask
specifier|private
name|TimerTask
name|manifestReloadTask
decl_stmt|;
DECL|field|manifestReloadInterval
specifier|private
name|long
name|manifestReloadInterval
decl_stmt|;
DECL|field|manifestModifyTS
specifier|private
name|long
name|manifestModifyTS
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|mapper
specifier|private
specifier|final
name|ObjectMapper
name|mapper
decl_stmt|;
DECL|field|p
specifier|private
specifier|final
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^[A-Za-z_]+[A-Za-z0-9_]*$"
argument_list|)
decl_stmt|;
DECL|method|AuxServices (AuxiliaryLocalPathHandler auxiliaryLocalPathHandler, Context nmContext, DeletionService deletionService)
name|AuxServices
parameter_list|(
name|AuxiliaryLocalPathHandler
name|auxiliaryLocalPathHandler
parameter_list|,
name|Context
name|nmContext
parameter_list|,
name|DeletionService
name|deletionService
parameter_list|)
block|{
name|super
argument_list|(
name|AuxServices
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|serviceMap
operator|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|AuxiliaryService
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|serviceRecordMap
operator|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|AuxServiceRecord
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|serviceMetaData
operator|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|auxiliaryLocalPathHandler
operator|=
name|auxiliaryLocalPathHandler
expr_stmt|;
name|this
operator|.
name|dirsHandler
operator|=
name|nmContext
operator|.
name|getLocalDirsHandler
argument_list|()
expr_stmt|;
name|this
operator|.
name|delService
operator|=
name|deletionService
expr_stmt|;
name|this
operator|.
name|userUGI
operator|=
name|getRemoteUgi
argument_list|()
expr_stmt|;
name|this
operator|.
name|mapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
expr_stmt|;
name|mapper
operator|.
name|configure
argument_list|(
name|DeserializationFeature
operator|.
name|FAIL_ON_UNKNOWN_PROPERTIES
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Obtain services from configuration in init()
block|}
comment|/**    * Adds a service to the service map.    *    * @param name aux service name    * @param service aux service    * @param serviceRecord aux service record    */
DECL|method|addService (String name, AuxiliaryService service, AuxServiceRecord serviceRecord)
specifier|protected
specifier|final
specifier|synchronized
name|void
name|addService
parameter_list|(
name|String
name|name
parameter_list|,
name|AuxiliaryService
name|service
parameter_list|,
name|AuxServiceRecord
name|serviceRecord
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding auxiliary service "
operator|+
name|serviceRecord
operator|.
name|getName
argument_list|()
operator|+
literal|" version "
operator|+
name|serviceRecord
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|serviceMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|serviceRecordMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|serviceRecord
argument_list|)
expr_stmt|;
block|}
DECL|method|getServices ()
name|Collection
argument_list|<
name|AuxiliaryService
argument_list|>
name|getServices
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|serviceMap
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Gets current aux service records.    *    * @return a collection of service records    */
DECL|method|getServiceRecords ()
specifier|public
name|Collection
argument_list|<
name|AuxServiceRecord
argument_list|>
name|getServiceRecords
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|serviceRecordMap
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @return the meta data for all registered services, that have been started.    * If a service has not been started no metadata will be available. The key    * is the name of the service as defined in the configuration.    */
DECL|method|getMetaData ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|getMetaData
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|metaClone
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|serviceMetaData
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|serviceMetaData
init|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|entry
range|:
name|serviceMetaData
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|metaClone
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|duplicate
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|metaClone
return|;
block|}
comment|/**    * Creates an auxiliary service from a specification using the Configuration    * classloader.    *    * @param service aux service record    * @return auxiliary service    */
DECL|method|createAuxServiceFromConfiguration (AuxServiceRecord service)
specifier|private
name|AuxiliaryService
name|createAuxServiceFromConfiguration
parameter_list|(
name|AuxServiceRecord
name|service
parameter_list|)
block|{
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
name|CLASS_NAME
argument_list|,
name|getClassName
argument_list|(
name|service
argument_list|)
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|AuxiliaryService
argument_list|>
name|sClass
init|=
name|c
operator|.
name|getClass
argument_list|(
name|CLASS_NAME
argument_list|,
literal|null
argument_list|,
name|AuxiliaryService
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|sClass
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"No class defined for auxiliary "
operator|+
literal|"service"
operator|+
name|service
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|sClass
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Creates an auxiliary service from a specification using a custom local    * classpath.    *    * @param service aux service record    * @param appLocalClassPath local class path    * @param conf configuration    * @return auxiliary service    * @throws IOException    * @throws ClassNotFoundException    */
DECL|method|createAuxServiceFromLocalClasspath ( AuxServiceRecord service, String appLocalClassPath, Configuration conf)
specifier|private
name|AuxiliaryService
name|createAuxServiceFromLocalClasspath
parameter_list|(
name|AuxServiceRecord
name|service
parameter_list|,
name|String
name|appLocalClassPath
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|appLocalClassPath
operator|!=
literal|null
operator|&&
operator|!
name|appLocalClassPath
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"local classpath was null in createAuxServiceFromLocalClasspath"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|sName
init|=
name|service
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|className
init|=
name|getClassName
argument_list|(
name|service
argument_list|)
decl_stmt|;
if|if
condition|(
name|service
operator|.
name|getConfiguration
argument_list|()
operator|!=
literal|null
operator|&&
name|service
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getFiles
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"The aux service:"
operator|+
name|sName
operator|+
literal|" has configured local classpath:"
operator|+
name|appLocalClassPath
operator|+
literal|" and config files:"
operator|+
name|service
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getFiles
argument_list|()
operator|+
literal|". Only one of them should be configured."
argument_list|)
throw|;
block|}
return|return
name|AuxiliaryServiceWithCustomClassLoader
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|,
name|className
argument_list|,
name|appLocalClassPath
argument_list|,
name|getSystemClasses
argument_list|(
name|service
argument_list|,
name|className
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Creates an auxiliary service from a specification.    *    * @param service aux service record    * @param conf configuration    * @param fromConfiguration true if from configuration, false if from manifest    * @return auxiliary service    * @throws IOException    * @throws ClassNotFoundException    */
DECL|method|createAuxService (AuxServiceRecord service, Configuration conf, boolean fromConfiguration)
specifier|private
name|AuxiliaryService
name|createAuxService
parameter_list|(
name|AuxServiceRecord
name|service
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|fromConfiguration
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
specifier|final
name|String
name|sName
init|=
name|service
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|className
init|=
name|getClassName
argument_list|(
name|service
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|==
literal|null
operator|||
name|className
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Class name not provided for auxiliary "
operator|+
literal|"service "
operator|+
name|sName
argument_list|)
throw|;
block|}
if|if
condition|(
name|fromConfiguration
condition|)
block|{
comment|// aux services from the configuration have an additional configuration
comment|// option specifying a local classpath that will not be localized
specifier|final
name|String
name|appLocalClassPath
init|=
name|conf
operator|.
name|get
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICES_CLASSPATH
argument_list|,
name|sName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|appLocalClassPath
operator|!=
literal|null
operator|&&
operator|!
name|appLocalClassPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|createAuxServiceFromLocalClasspath
argument_list|(
name|service
argument_list|,
name|appLocalClassPath
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
name|AuxServiceConfiguration
name|serviceConf
init|=
name|service
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|destFiles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|serviceConf
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|AuxServiceFile
argument_list|>
name|files
init|=
name|serviceConf
operator|.
name|getFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AuxServiceFile
name|file
range|:
name|files
control|)
block|{
comment|// localize file (if needed) and add it to the list of paths that
comment|// will become the classpath
name|destFiles
operator|.
name|add
argument_list|(
name|maybeDownloadJars
argument_list|(
name|sName
argument_list|,
name|className
argument_list|,
name|file
operator|.
name|getSrcFile
argument_list|()
argument_list|,
name|file
operator|.
name|getType
argument_list|()
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|destFiles
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// create aux service using a custom localized classpath
name|LOG
operator|.
name|info
argument_list|(
literal|"The aux service:"
operator|+
name|sName
operator|+
literal|" is using the custom classloader with classpath "
operator|+
name|destFiles
argument_list|)
expr_stmt|;
return|return
name|AuxiliaryServiceWithCustomClassLoader
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|,
name|className
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|File
operator|.
name|pathSeparatorChar
argument_list|,
name|destFiles
argument_list|)
argument_list|,
name|getSystemClasses
argument_list|(
name|service
argument_list|,
name|className
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|createAuxServiceFromConfiguration
argument_list|(
name|service
argument_list|)
return|;
block|}
block|}
comment|/**    * Copies the specified remote file to local NM aux service directory. If the    * same file already exists (as determined by modification time), the file    * will not be copied again.    *    * @param sName service name    * @param className service class name    * @param remoteFile location of the file to download    * @param type type of file (STATIC for a jar or ARCHIVE for a tarball)    * @param conf configuration    * @return path of the downloaded file    * @throws IOException    */
DECL|method|maybeDownloadJars (String sName, String className, String remoteFile, AuxServiceFile.TypeEnum type, Configuration conf)
specifier|private
name|Path
name|maybeDownloadJars
parameter_list|(
name|String
name|sName
parameter_list|,
name|String
name|className
parameter_list|,
name|String
name|remoteFile
parameter_list|,
name|AuxServiceFile
operator|.
name|TypeEnum
name|type
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// load AuxiliaryService from remote classpath
name|FileContext
name|localLFS
init|=
name|getLocalFileContext
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// create NM aux-service dir in NM localdir if it does not exist.
name|Path
name|nmAuxDir
init|=
name|dirsHandler
operator|.
name|getLocalPathForWrite
argument_list|(
literal|"."
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|NM_AUX_SERVICE_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|localLFS
operator|.
name|util
argument_list|()
operator|.
name|exists
argument_list|(
name|nmAuxDir
argument_list|)
condition|)
block|{
try|try
block|{
name|localLFS
operator|.
name|mkdir
argument_list|(
name|nmAuxDir
argument_list|,
name|NM_AUX_SERVICE_DIR_PERM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Fail to create dir:"
operator|+
name|nmAuxDir
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
name|remoteFile
argument_list|)
decl_stmt|;
name|FileContext
name|remoteLFS
init|=
name|getRemoteFileContext
argument_list|(
name|src
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
name|scFileStatus
init|=
name|remoteLFS
operator|.
name|getFileStatus
argument_list|(
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|scFileStatus
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|userUGI
operator|.
name|getShortUserName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"The remote jarfile owner:"
operator|+
name|scFileStatus
operator|.
name|getOwner
argument_list|()
operator|+
literal|" is not the same as the NM user:"
operator|+
name|this
operator|.
name|userUGI
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|"."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|scFileStatus
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
operator|&
literal|0022
operator|)
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"The remote jarfile should not "
operator|+
literal|"be writable by group or others. "
operator|+
literal|"The current Permission is "
operator|+
name|scFileStatus
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|)
throw|;
block|}
name|Path
name|downloadDest
init|=
operator|new
name|Path
argument_list|(
name|nmAuxDir
argument_list|,
name|className
operator|+
literal|"_"
operator|+
name|scFileStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|)
decl_stmt|;
comment|// check whether we need to re-download the jar
comment|// from remote directory
name|Path
name|targetDirPath
init|=
operator|new
name|Path
argument_list|(
name|downloadDest
argument_list|,
name|scFileStatus
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|allSubDirs
init|=
name|localLFS
operator|.
name|util
argument_list|()
operator|.
name|listStatus
argument_list|(
name|nmAuxDir
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|sub
range|:
name|allSubDirs
control|)
block|{
if|if
condition|(
name|sub
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|downloadDest
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|targetDirPath
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"*"
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|sub
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
name|className
argument_list|)
operator|&&
operator|!
name|sub
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|DEL_SUFFIX
argument_list|)
condition|)
block|{
name|Path
name|delPath
init|=
operator|new
name|Path
argument_list|(
name|sub
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|,
name|sub
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
name|DEL_SUFFIX
argument_list|)
decl_stmt|;
name|localLFS
operator|.
name|rename
argument_list|(
name|sub
operator|.
name|getPath
argument_list|()
argument_list|,
name|delPath
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"delete old aux service jar dir:"
operator|+
name|delPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|FileDeletionTask
name|deletionTask
init|=
operator|new
name|FileDeletionTask
argument_list|(
name|this
operator|.
name|delService
argument_list|,
literal|null
argument_list|,
name|delPath
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|this
operator|.
name|delService
operator|.
name|delete
argument_list|(
name|deletionTask
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|LocalResourceType
name|srcType
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|AuxServiceFile
operator|.
name|TypeEnum
operator|.
name|STATIC
condition|)
block|{
name|srcType
operator|=
name|LocalResourceType
operator|.
name|FILE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|AuxServiceFile
operator|.
name|TypeEnum
operator|.
name|ARCHIVE
condition|)
block|{
name|srcType
operator|=
name|LocalResourceType
operator|.
name|ARCHIVE
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Cannot unpack file of type "
operator|+
name|type
operator|+
literal|" from remote-file-path:"
operator|+
name|src
operator|+
literal|"for aux-service:"
operator|+
literal|".\n"
argument_list|)
throw|;
block|}
name|LocalResource
name|scRsrc
init|=
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|URL
operator|.
name|fromURI
argument_list|(
name|src
operator|.
name|toUri
argument_list|()
argument_list|)
argument_list|,
name|srcType
argument_list|,
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|scFileStatus
operator|.
name|getLen
argument_list|()
argument_list|,
name|scFileStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|)
decl_stmt|;
name|FSDownload
name|download
init|=
operator|new
name|FSDownload
argument_list|(
name|localLFS
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|,
name|downloadDest
argument_list|,
name|scRsrc
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
comment|// don't need to convert downloaded path into a dir
comment|// since it's already a jar path.
return|return
name|download
operator|.
name|call
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Exception happend while downloading files "
operator|+
literal|"for aux-service:"
operator|+
name|sName
operator|+
literal|" and remote-file-path:"
operator|+
name|src
operator|+
literal|".\n"
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * If recovery is enabled, creates a recovery directory for the named    * service and sets it on the service.    *    * @param sName name of the service    * @param s auxiliary service    * @throws IOException    */
DECL|method|setStateStoreDir (String sName, AuxiliaryService s)
specifier|private
name|void
name|setStateStoreDir
parameter_list|(
name|String
name|sName
parameter_list|,
name|AuxiliaryService
name|s
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|stateStoreRoot
operator|!=
literal|null
condition|)
block|{
name|Path
name|storePath
init|=
operator|new
name|Path
argument_list|(
name|stateStoreRoot
argument_list|,
name|sName
argument_list|)
decl_stmt|;
name|stateStoreFs
operator|.
name|mkdirs
argument_list|(
name|storePath
argument_list|,
name|storeDirPerms
argument_list|)
expr_stmt|;
name|s
operator|.
name|setRecoveryPath
argument_list|(
name|storePath
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Removes a service from the service map and stops it, if it exists.    *    * @param sName name of the service    */
DECL|method|maybeRemoveAuxService (String sName)
specifier|private
specifier|synchronized
name|void
name|maybeRemoveAuxService
parameter_list|(
name|String
name|sName
parameter_list|)
block|{
name|AuxiliaryService
name|s
decl_stmt|;
name|s
operator|=
name|serviceMap
operator|.
name|remove
argument_list|(
name|sName
argument_list|)
expr_stmt|;
name|serviceRecordMap
operator|.
name|remove
argument_list|(
name|sName
argument_list|)
expr_stmt|;
name|serviceMetaData
operator|.
name|remove
argument_list|(
name|sName
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing aux service "
operator|+
name|sName
argument_list|)
expr_stmt|;
name|stopAuxService
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Constructs an AuxiliaryService then configures and initializes it based    * on a service specification.    *    * @param service aux service record    * @param conf configuration    * @param fromConfiguration true if from configuration, false if from manifest    * @return aux service    * @throws IOException    */
DECL|method|initAuxService (AuxServiceRecord service, Configuration conf, boolean fromConfiguration)
specifier|private
name|AuxiliaryService
name|initAuxService
parameter_list|(
name|AuxServiceRecord
name|service
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|fromConfiguration
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|sName
init|=
name|service
operator|.
name|getName
argument_list|()
decl_stmt|;
name|AuxiliaryService
name|s
decl_stmt|;
try|try
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|validateAuxServiceName
argument_list|(
name|sName
argument_list|)
argument_list|,
literal|"The auxiliary service name: "
operator|+
name|sName
operator|+
literal|" is invalid. "
operator|+
literal|"The valid service name should only contain a-zA-Z0-9_ "
operator|+
literal|"and cannot start with numbers."
argument_list|)
expr_stmt|;
name|s
operator|=
name|createAuxService
argument_list|(
name|service
argument_list|,
name|conf
argument_list|,
name|fromConfiguration
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"No auxiliary service class loaded for"
operator|+
literal|" "
operator|+
name|sName
argument_list|)
throw|;
block|}
comment|// TODO better use s.getName()?
if|if
condition|(
operator|!
name|sName
operator|.
name|equals
argument_list|(
name|s
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The Auxiliary Service named '"
operator|+
name|sName
operator|+
literal|"' in the "
operator|+
literal|"configuration is for "
operator|+
name|s
operator|.
name|getClass
argument_list|()
operator|+
literal|" which has "
operator|+
literal|"a name of '"
operator|+
name|s
operator|.
name|getName
argument_list|()
operator|+
literal|"'. Because these are "
operator|+
literal|"not the same tools trying to send ServiceData and read "
operator|+
literal|"Service Meta Data may have issues unless the refer to "
operator|+
literal|"the name in the config."
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|setAuxiliaryLocalPathHandler
argument_list|(
name|auxiliaryLocalPathHandler
argument_list|)
expr_stmt|;
name|setStateStoreDir
argument_list|(
name|sName
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|Configuration
name|customConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|service
operator|.
name|getConfiguration
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|service
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|customConf
operator|.
name|set
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|s
operator|.
name|init
argument_list|(
name|customConf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialized auxiliary service "
operator|+
name|sName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to initialize "
operator|+
name|sName
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|s
return|;
block|}
comment|/**    * Reloads auxiliary services manifest. Must be called after service init.    *    * @throws IOException if manifest can't be loaded    */
DECL|method|reloadManifest ()
specifier|private
name|void
name|reloadManifest
parameter_list|()
throws|throws
name|IOException
block|{
name|loadManifest
argument_list|(
name|getConfig
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Reloads auxiliary services. Must be called after service init.    *    * @param services a list of auxiliary services    * @throws IOException if aux services have not been started yet    */
DECL|method|reload (AuxServiceRecords services)
specifier|public
name|void
name|reload
parameter_list|(
name|AuxServiceRecords
name|services
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|getServiceState
argument_list|()
operator|!=
name|Service
operator|.
name|STATE
operator|.
name|STARTED
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Auxiliary services have not been started yet, "
operator|+
literal|"please retry later"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Received list of auxiliary services: "
operator|+
name|mapper
operator|.
name|writeValueAsString
argument_list|(
name|services
argument_list|)
argument_list|)
expr_stmt|;
name|loadServices
argument_list|(
name|services
argument_list|,
name|getConfig
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|checkManifestPermissions (FileStatus status)
specifier|private
name|boolean
name|checkManifestPermissions
parameter_list|(
name|FileStatus
name|status
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|status
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
operator|&
literal|0022
operator|)
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Manifest file and parents must not be writable by group or "
operator|+
literal|"others. The current Permission of "
operator|+
name|status
operator|.
name|getPath
argument_list|()
operator|+
literal|" is "
operator|+
name|status
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|Path
name|parent
init|=
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|checkManifestPermissions
argument_list|(
name|manifestFS
operator|.
name|getFileStatus
argument_list|(
name|parent
argument_list|)
argument_list|)
return|;
block|}
DECL|method|checkManifestOwnerAndPermissions (FileStatus status)
specifier|private
name|boolean
name|checkManifestOwnerAndPermissions
parameter_list|(
name|FileStatus
name|status
parameter_list|)
throws|throws
name|IOException
block|{
name|AccessControlList
name|yarnAdminAcl
init|=
operator|new
name|AccessControlList
argument_list|(
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_ADMIN_ACL
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|yarnAdminAcl
operator|.
name|isUserAllowed
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|status
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Manifest must be owned by YARN admin: "
operator|+
name|manifest
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|checkManifestPermissions
argument_list|(
name|status
argument_list|)
return|;
block|}
comment|/**    * Reads the manifest file if it is configured, exists, and has not been    * modified since the last read.    *    * @return aux service records    * @throws IOException    */
DECL|method|maybeReadManifestFile ()
specifier|private
specifier|synchronized
name|AuxServiceRecords
name|maybeReadManifestFile
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|manifest
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|manifestFS
operator|.
name|exists
argument_list|(
name|manifest
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Manifest file "
operator|+
name|manifest
operator|+
literal|" doesn't exist"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|FileStatus
name|status
decl_stmt|;
try|try
block|{
name|status
operator|=
name|manifestFS
operator|.
name|getFileStatus
argument_list|(
name|manifest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Manifest file "
operator|+
name|manifest
operator|+
literal|" doesn't exist"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|status
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Manifest file "
operator|+
name|manifest
operator|+
literal|" is not a file"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|checkManifestOwnerAndPermissions
argument_list|(
name|status
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|status
operator|.
name|getModificationTime
argument_list|()
operator|==
name|manifestModifyTS
condition|)
block|{
return|return
literal|null
return|;
block|}
name|manifestModifyTS
operator|=
name|status
operator|.
name|getModificationTime
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading auxiliary services manifest "
operator|+
name|manifest
argument_list|)
expr_stmt|;
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|manifestFS
operator|.
name|open
argument_list|(
name|manifest
argument_list|)
init|)
block|{
return|return
name|mapper
operator|.
name|readValue
argument_list|(
operator|(
name|InputStream
operator|)
name|in
argument_list|,
name|AuxServiceRecords
operator|.
name|class
argument_list|)
return|;
block|}
block|}
comment|/**    * Updates current aux services based on changes found in the manifest.    *    * @param conf configuration    * @param startServices if true starts services, otherwise only inits services    * @throws IOException    */
annotation|@
name|VisibleForTesting
DECL|method|loadManifest (Configuration conf, boolean startServices)
specifier|protected
specifier|synchronized
name|void
name|loadManifest
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|startServices
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|manifest
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|manifestFS
operator|.
name|exists
argument_list|(
name|manifest
argument_list|)
condition|)
block|{
if|if
condition|(
name|serviceMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Manifest file "
operator|+
name|manifest
operator|+
literal|" doesn't exist, stopping "
operator|+
literal|"auxiliary services"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|servicesToRemove
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|serviceMap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|sName
range|:
name|servicesToRemove
control|)
block|{
name|maybeRemoveAuxService
argument_list|(
name|sName
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|AuxServiceRecords
name|services
init|=
name|maybeReadManifestFile
argument_list|()
decl_stmt|;
name|loadServices
argument_list|(
name|services
argument_list|,
name|conf
argument_list|,
name|startServices
argument_list|)
expr_stmt|;
block|}
comment|/**    * Updates current aux services based on changes found in the service list.    *    * @param services list of auxiliary services    * @param conf configuration    * @param startServices if true starts services, otherwise only inits services    * @throws IOException    */
DECL|method|loadServices (AuxServiceRecords services, Configuration conf, boolean startServices)
specifier|private
specifier|synchronized
name|void
name|loadServices
parameter_list|(
name|AuxServiceRecords
name|services
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|startServices
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|services
operator|==
literal|null
condition|)
block|{
comment|// read did not occur or no changes detected
return|return;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|loadedAuxServices
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|foundChanges
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|services
operator|.
name|getServices
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AuxServiceRecord
name|service
range|:
name|services
operator|.
name|getServices
argument_list|()
control|)
block|{
name|AuxServiceRecord
name|existingService
init|=
name|serviceRecordMap
operator|.
name|get
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|loadedAuxServices
operator|.
name|add
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|existingService
operator|!=
literal|null
operator|&&
name|existingService
operator|.
name|equals
argument_list|(
name|service
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Auxiliary service already loaded: "
operator|+
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|foundChanges
operator|=
literal|true
expr_stmt|;
try|try
block|{
comment|// stop aux service
name|maybeRemoveAuxService
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// init aux service
name|AuxiliaryService
name|s
init|=
name|initAuxService
argument_list|(
name|service
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|startServices
condition|)
block|{
comment|// start aux service
name|startAuxService
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|,
name|s
argument_list|,
name|service
argument_list|)
expr_stmt|;
block|}
comment|// add aux service to serviceMap
name|addService
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|,
name|s
argument_list|,
name|service
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to load auxiliary service "
operator|+
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// remove aux services that do not appear in the new list
name|Set
argument_list|<
name|String
argument_list|>
name|servicesToRemove
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|serviceMap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|servicesToRemove
operator|.
name|removeAll
argument_list|(
name|loadedAuxServices
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|sName
range|:
name|servicesToRemove
control|)
block|{
name|foundChanges
operator|=
literal|true
expr_stmt|;
name|maybeRemoveAuxService
argument_list|(
name|sName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|foundChanges
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No auxiliary services changes detected"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getClassName (AuxServiceRecord service)
specifier|private
specifier|static
name|String
name|getClassName
parameter_list|(
name|AuxServiceRecord
name|service
parameter_list|)
block|{
name|AuxServiceConfiguration
name|serviceConf
init|=
name|service
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|serviceConf
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|serviceConf
operator|.
name|getProperty
argument_list|(
name|CLASS_NAME
argument_list|)
return|;
block|}
DECL|method|getSystemClasses (AuxServiceRecord service, String className)
specifier|private
specifier|static
name|String
index|[]
name|getSystemClasses
parameter_list|(
name|AuxServiceRecord
name|service
parameter_list|,
name|String
name|className
parameter_list|)
block|{
name|AuxServiceConfiguration
name|serviceConf
init|=
name|service
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|serviceConf
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|String
index|[]
block|{
name|className
block|}
return|;
block|}
return|return
name|StringUtils
operator|.
name|split
argument_list|(
name|serviceConf
operator|.
name|getProperty
argument_list|(
name|SYSTEM_CLASSES
argument_list|,
name|className
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Translates an aux service specified in the Configuration to an aux    * service record.    *    * @param sName aux service name    * @param conf configuration    * @return    */
DECL|method|createServiceRecordFromConfiguration (String sName, Configuration conf)
specifier|private
specifier|static
name|AuxServiceRecord
name|createServiceRecordFromConfiguration
parameter_list|(
name|String
name|sName
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|className
init|=
name|conf
operator|.
name|get
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICE_FMT
argument_list|,
name|sName
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|remoteClassPath
init|=
name|conf
operator|.
name|get
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICE_REMOTE_CLASSPATH
argument_list|,
name|sName
argument_list|)
argument_list|)
decl_stmt|;
name|String
index|[]
name|systemClasses
init|=
name|conf
operator|.
name|getTrimmedStrings
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICES_SYSTEM_CLASSES
argument_list|,
name|sName
argument_list|)
argument_list|)
decl_stmt|;
name|AuxServiceConfiguration
name|serviceConf
init|=
operator|new
name|AuxServiceConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
condition|)
block|{
name|serviceConf
operator|.
name|setProperty
argument_list|(
name|CLASS_NAME
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|systemClasses
operator|!=
literal|null
condition|)
block|{
name|serviceConf
operator|.
name|setProperty
argument_list|(
name|SYSTEM_CLASSES
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|systemClasses
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|remoteClassPath
operator|!=
literal|null
condition|)
block|{
name|AuxServiceFile
operator|.
name|TypeEnum
name|type
decl_stmt|;
name|String
name|lcClassPath
init|=
name|StringUtils
operator|.
name|toLowerCase
argument_list|(
name|remoteClassPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|lcClassPath
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
condition|)
block|{
name|type
operator|=
name|AuxServiceFile
operator|.
name|TypeEnum
operator|.
name|STATIC
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lcClassPath
operator|.
name|endsWith
argument_list|(
literal|".zip"
argument_list|)
operator|||
name|lcClassPath
operator|.
name|endsWith
argument_list|(
literal|".tar.gz"
argument_list|)
operator|||
name|lcClassPath
operator|.
name|endsWith
argument_list|(
literal|".tgz"
argument_list|)
operator|||
name|lcClassPath
operator|.
name|endsWith
argument_list|(
literal|".tar"
argument_list|)
condition|)
block|{
name|type
operator|=
name|AuxServiceFile
operator|.
name|TypeEnum
operator|.
name|ARCHIVE
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Cannot unpack file from "
operator|+
literal|"remote-file-path:"
operator|+
name|remoteClassPath
operator|+
literal|"for aux-service:"
operator|+
name|sName
operator|+
literal|".\n"
argument_list|)
throw|;
block|}
name|AuxServiceFile
name|file
init|=
operator|new
name|AuxServiceFile
argument_list|()
operator|.
name|srcFile
argument_list|(
name|remoteClassPath
argument_list|)
operator|.
name|type
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|serviceConf
operator|.
name|getFiles
argument_list|()
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|AuxServiceRecord
argument_list|()
operator|.
name|name
argument_list|(
name|sName
argument_list|)
operator|.
name|configuration
argument_list|(
name|serviceConf
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|public
specifier|synchronized
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|recoveryEnabled
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_RECOVERY_ENABLED
argument_list|)
decl_stmt|;
if|if
condition|(
name|recoveryEnabled
condition|)
block|{
name|stateStoreRoot
operator|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_DIR
argument_list|)
argument_list|,
name|STATE_STORE_ROOT_NAME
argument_list|)
expr_stmt|;
name|stateStoreFs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|String
name|manifestStr
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICES_MANIFEST
argument_list|)
decl_stmt|;
if|if
condition|(
name|manifestStr
operator|==
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|auxNames
init|=
name|conf
operator|.
name|getStringCollection
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICES
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|sName
range|:
name|auxNames
control|)
block|{
name|AuxServiceRecord
name|service
init|=
name|createServiceRecordFromConfiguration
argument_list|(
name|sName
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|maybeRemoveAuxService
argument_list|(
name|sName
argument_list|)
expr_stmt|;
name|AuxiliaryService
name|s
init|=
name|initAuxService
argument_list|(
name|service
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|addService
argument_list|(
name|sName
argument_list|,
name|s
argument_list|,
name|service
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|manifest
operator|=
operator|new
name|Path
argument_list|(
name|manifestStr
argument_list|)
expr_stmt|;
name|manifestFS
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
name|manifestStr
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|loadManifest
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|manifestReloadInterval
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICES_MANIFEST_RELOAD_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_AUX_SERVICES_MANIFEST_RELOAD_MS
argument_list|)
expr_stmt|;
name|manifestReloadTask
operator|=
operator|new
name|ManifestReloadTask
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|startAuxService (String name, AuxiliaryService service, AuxServiceRecord serviceRecord)
specifier|private
name|void
name|startAuxService
parameter_list|(
name|String
name|name
parameter_list|,
name|AuxiliaryService
name|service
parameter_list|,
name|AuxServiceRecord
name|serviceRecord
parameter_list|)
block|{
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|service
operator|.
name|registerServiceListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|ByteBuffer
name|meta
init|=
name|service
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
if|if
condition|(
name|meta
operator|!=
literal|null
condition|)
block|{
name|serviceMetaData
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|meta
argument_list|)
expr_stmt|;
block|}
name|serviceRecord
operator|.
name|setLaunchTime
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|stopAuxService (Service service)
specifier|private
name|void
name|stopAuxService
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
if|if
condition|(
name|service
operator|.
name|getServiceState
argument_list|()
operator|==
name|Service
operator|.
name|STATE
operator|.
name|STARTED
condition|)
block|{
name|service
operator|.
name|unregisterServiceListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|service
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|public
specifier|synchronized
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO fork(?) services running as configured user
comment|//      monitor for health, shutdown/restart(?) if any should die
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|AuxiliaryService
argument_list|>
name|entry
range|:
name|serviceMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|AuxiliaryService
name|service
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|startAuxService
argument_list|(
name|name
argument_list|,
name|service
argument_list|,
name|serviceRecordMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|manifest
operator|!=
literal|null
operator|&&
name|manifestReloadInterval
operator|>
literal|0
condition|)
block|{
name|manifestReloadTimer
operator|=
operator|new
name|Timer
argument_list|(
literal|"AuxServicesManifestRelaod-Timer"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|manifestReloadTimer
operator|.
name|schedule
argument_list|(
name|manifestReloadTask
argument_list|,
name|manifestReloadInterval
argument_list|,
name|manifestReloadInterval
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|public
specifier|synchronized
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
for|for
control|(
name|Service
name|service
range|:
name|serviceMap
operator|.
name|values
argument_list|()
control|)
block|{
name|stopAuxService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
name|serviceMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|serviceRecordMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|serviceMetaData
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|manifestFS
operator|!=
literal|null
condition|)
block|{
name|manifestFS
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|manifestReloadTimer
operator|!=
literal|null
condition|)
block|{
name|manifestReloadTimer
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|stateChanged (Service service)
specifier|public
name|void
name|stateChanged
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
comment|// services changing state is expected on reload
name|LOG
operator|.
name|info
argument_list|(
literal|"Service "
operator|+
name|service
operator|.
name|getName
argument_list|()
operator|+
literal|" changed state: "
operator|+
name|service
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (AuxServicesEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|AuxServicesEvent
name|event
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got event "
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|" for appId "
operator|+
name|event
operator|.
name|getApplicationID
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|APPLICATION_INIT
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"Got APPLICATION_INIT for service "
operator|+
name|event
operator|.
name|getServiceID
argument_list|()
argument_list|)
expr_stmt|;
name|AuxiliaryService
name|service
init|=
literal|null
decl_stmt|;
try|try
block|{
name|service
operator|=
name|serviceMap
operator|.
name|get
argument_list|(
name|event
operator|.
name|getServiceID
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|initializeApplication
argument_list|(
operator|new
name|ApplicationInitializationContext
argument_list|(
name|event
operator|.
name|getUser
argument_list|()
argument_list|,
name|event
operator|.
name|getApplicationID
argument_list|()
argument_list|,
name|event
operator|.
name|getServiceData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|logWarningWhenAuxServiceThrowExceptions
argument_list|(
name|service
argument_list|,
name|AuxServicesEventType
operator|.
name|APPLICATION_INIT
argument_list|,
name|th
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|APPLICATION_STOP
case|:
for|for
control|(
name|AuxiliaryService
name|serv
range|:
name|serviceMap
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|serv
operator|.
name|stopApplication
argument_list|(
operator|new
name|ApplicationTerminationContext
argument_list|(
name|event
operator|.
name|getApplicationID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|logWarningWhenAuxServiceThrowExceptions
argument_list|(
name|serv
argument_list|,
name|AuxServicesEventType
operator|.
name|APPLICATION_STOP
argument_list|,
name|th
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|CONTAINER_INIT
case|:
for|for
control|(
name|AuxiliaryService
name|serv
range|:
name|serviceMap
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|serv
operator|.
name|initializeContainer
argument_list|(
operator|new
name|ContainerInitializationContext
argument_list|(
name|event
operator|.
name|getContainer
argument_list|()
operator|.
name|getUser
argument_list|()
argument_list|,
name|event
operator|.
name|getContainer
argument_list|()
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|event
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|,
name|event
operator|.
name|getContainer
argument_list|()
operator|.
name|getContainerTokenIdentifier
argument_list|()
operator|.
name|getContainerType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|logWarningWhenAuxServiceThrowExceptions
argument_list|(
name|serv
argument_list|,
name|AuxServicesEventType
operator|.
name|CONTAINER_INIT
argument_list|,
name|th
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|CONTAINER_STOP
case|:
for|for
control|(
name|AuxiliaryService
name|serv
range|:
name|serviceMap
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|serv
operator|.
name|stopContainer
argument_list|(
operator|new
name|ContainerTerminationContext
argument_list|(
name|event
operator|.
name|getUser
argument_list|()
argument_list|,
name|event
operator|.
name|getContainer
argument_list|()
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|event
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|,
name|event
operator|.
name|getContainer
argument_list|()
operator|.
name|getContainerTokenIdentifier
argument_list|()
operator|.
name|getContainerType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|logWarningWhenAuxServiceThrowExceptions
argument_list|(
name|serv
argument_list|,
name|AuxServicesEventType
operator|.
name|CONTAINER_STOP
argument_list|,
name|th
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown type: "
operator|+
name|event
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|validateAuxServiceName (String name)
specifier|private
name|boolean
name|validateAuxServiceName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|p
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
DECL|method|logWarningWhenAuxServiceThrowExceptions (AuxiliaryService service, AuxServicesEventType eventType, Throwable th)
specifier|private
name|void
name|logWarningWhenAuxServiceThrowExceptions
parameter_list|(
name|AuxiliaryService
name|service
parameter_list|,
name|AuxServicesEventType
name|eventType
parameter_list|,
name|Throwable
name|th
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
operator|(
literal|null
operator|==
name|service
condition|?
literal|"The auxService is null"
else|:
literal|"The auxService name is "
operator|+
name|service
operator|.
name|getName
argument_list|()
operator|)
operator|+
literal|" and it got an error at event: "
operator|+
name|eventType
argument_list|,
name|th
argument_list|)
expr_stmt|;
block|}
DECL|method|getLocalFileContext (Configuration conf)
name|FileContext
name|getLocalFileContext
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
try|try
block|{
return|return
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|(
name|conf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Failed to access local fs"
argument_list|)
throw|;
block|}
block|}
DECL|method|getRemoteFileContext (final URI path, Configuration conf)
name|FileContext
name|getRemoteFileContext
parameter_list|(
specifier|final
name|URI
name|path
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
try|try
block|{
return|return
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|path
argument_list|,
name|conf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Failed to access remote fs"
argument_list|)
throw|;
block|}
block|}
DECL|method|getRemoteUgi ()
specifier|private
name|UserGroupInformation
name|getRemoteUgi
parameter_list|()
block|{
name|UserGroupInformation
name|remoteUgi
decl_stmt|;
try|try
block|{
name|remoteUgi
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Cannot obtain the user-name. Got exception: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
return|return
name|remoteUgi
return|;
block|}
DECL|method|newAuxService (String name, String className)
specifier|protected
specifier|static
name|AuxServiceRecord
name|newAuxService
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|className
parameter_list|)
block|{
name|AuxServiceConfiguration
name|serviceConf
init|=
operator|new
name|AuxServiceConfiguration
argument_list|()
decl_stmt|;
name|serviceConf
operator|.
name|setProperty
argument_list|(
name|CLASS_NAME
argument_list|,
name|className
argument_list|)
expr_stmt|;
return|return
operator|new
name|AuxServiceRecord
argument_list|()
operator|.
name|name
argument_list|(
name|name
argument_list|)
operator|.
name|configuration
argument_list|(
name|serviceConf
argument_list|)
return|;
block|}
DECL|method|setClasspath (AuxServiceRecord service, String classpath)
specifier|protected
specifier|static
name|void
name|setClasspath
parameter_list|(
name|AuxServiceRecord
name|service
parameter_list|,
name|String
name|classpath
parameter_list|)
block|{
name|service
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getFiles
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|AuxServiceFile
argument_list|()
operator|.
name|srcFile
argument_list|(
name|classpath
argument_list|)
operator|.
name|type
argument_list|(
name|AuxServiceFile
operator|.
name|TypeEnum
operator|.
name|STATIC
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setSystemClasses (AuxServiceRecord service, String systemClasses)
specifier|protected
specifier|static
name|void
name|setSystemClasses
parameter_list|(
name|AuxServiceRecord
name|service
parameter_list|,
name|String
name|systemClasses
parameter_list|)
block|{
name|service
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setProperty
argument_list|(
name|SYSTEM_CLASSES
argument_list|,
name|systemClasses
argument_list|)
expr_stmt|;
block|}
comment|/**    * Class which is used by the {@link Timer} class to periodically execute the    * manifest reload.    */
DECL|class|ManifestReloadTask
specifier|private
specifier|final
class|class
name|ManifestReloadTask
extends|extends
name|TimerTask
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|reloadManifest
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Prevent uncaught exceptions from killing this thread
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while reloading manifest: "
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

