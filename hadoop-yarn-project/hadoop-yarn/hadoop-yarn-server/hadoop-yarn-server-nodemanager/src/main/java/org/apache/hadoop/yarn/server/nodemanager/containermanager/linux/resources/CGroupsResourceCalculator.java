begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.resources
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|CpuTimeTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|SysInfoLinux
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ResourceCalculatorProcessTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * A cgroups file-system based Resource calculator without the process tree  * features.  *  * CGroups has its limitations. It can only be enabled, if both CPU and memory  * cgroups are enabled with yarn.nodemanager.resource.cpu.enabled and  * yarn.nodemanager.resource.memory.enabled respectively. This means that  * memory limits are enforced by default. You can turn this off and keep  * memory reporting only with yarn.nodemanager.resource.memory.enforced.  *  * Another limitation is virtual memory measurement. CGroups does not have the  * ability to measure virtual memory usage. This includes memory reserved but  * not used. CGroups measures used memory as sa sum of  * physical memory and swap usage. This will be returned in the virtual  * memory counters.  * If the real virtual memory is required please use the legacy procfs based  * resource calculator or CombinedResourceCalculator.  */
end_comment

begin_class
DECL|class|CGroupsResourceCalculator
specifier|public
class|class
name|CGroupsResourceCalculator
extends|extends
name|ResourceCalculatorProcessTree
block|{
DECL|enum|Result
enum|enum
name|Result
block|{
DECL|enumConstant|Continue
name|Continue
block|,
DECL|enumConstant|Exit
name|Exit
block|}
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CGroupsResourceCalculator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PROCFS
specifier|private
specifier|static
specifier|final
name|String
name|PROCFS
init|=
literal|"/proc"
decl_stmt|;
DECL|field|CGROUP
specifier|static
specifier|final
name|String
name|CGROUP
init|=
literal|"cgroup"
decl_stmt|;
DECL|field|CPU_STAT
specifier|static
specifier|final
name|String
name|CPU_STAT
init|=
literal|"cpuacct.stat"
decl_stmt|;
DECL|field|MEM_STAT
specifier|static
specifier|final
name|String
name|MEM_STAT
init|=
literal|"memory.usage_in_bytes"
decl_stmt|;
DECL|field|MEMSW_STAT
specifier|static
specifier|final
name|String
name|MEMSW_STAT
init|=
literal|"memory.memsw.usage_in_bytes"
decl_stmt|;
DECL|field|USER
specifier|private
specifier|static
specifier|final
name|String
name|USER
init|=
literal|"user "
decl_stmt|;
DECL|field|SYSTEM
specifier|private
specifier|static
specifier|final
name|String
name|SYSTEM
init|=
literal|"system "
decl_stmt|;
DECL|field|CGROUP_FILE_FORMAT
specifier|private
specifier|static
specifier|final
name|Pattern
name|CGROUP_FILE_FORMAT
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(\\d+):([^:]+):/(.*)$"
argument_list|)
decl_stmt|;
DECL|field|procfsDir
specifier|private
specifier|final
name|String
name|procfsDir
decl_stmt|;
DECL|field|cGroupsHandler
specifier|private
name|CGroupsHandler
name|cGroupsHandler
decl_stmt|;
DECL|field|pid
specifier|private
name|String
name|pid
decl_stmt|;
DECL|field|cpuStat
specifier|private
name|File
name|cpuStat
decl_stmt|;
DECL|field|memStat
specifier|private
name|File
name|memStat
decl_stmt|;
DECL|field|memswStat
specifier|private
name|File
name|memswStat
decl_stmt|;
DECL|field|processTotalJiffies
specifier|private
name|BigInteger
name|processTotalJiffies
decl_stmt|;
DECL|field|processPhysicalMemory
specifier|private
name|long
name|processPhysicalMemory
decl_stmt|;
DECL|field|processVirtualMemory
specifier|private
name|long
name|processVirtualMemory
decl_stmt|;
DECL|field|jiffyLengthMs
specifier|private
specifier|final
name|long
name|jiffyLengthMs
decl_stmt|;
DECL|field|cpuTimeTracker
specifier|private
specifier|final
name|CpuTimeTracker
name|cpuTimeTracker
decl_stmt|;
DECL|field|clock
specifier|private
name|Clock
name|clock
decl_stmt|;
comment|/**    * Create resource calculator for all Yarn containers.    */
DECL|method|CGroupsResourceCalculator ()
specifier|public
name|CGroupsResourceCalculator
parameter_list|()
throws|throws
name|YarnException
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|PROCFS
argument_list|,
name|ResourceHandlerModule
operator|.
name|getCGroupsHandler
argument_list|()
argument_list|,
name|SystemClock
operator|.
name|getInstance
argument_list|()
argument_list|,
name|SysInfoLinux
operator|.
name|JIFFY_LENGTH_IN_MILLIS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create resource calculator for the container that has the specified pid.    * @param pid A pid from the cgroup or null for all containers    */
DECL|method|CGroupsResourceCalculator (String pid)
specifier|public
name|CGroupsResourceCalculator
parameter_list|(
name|String
name|pid
parameter_list|)
block|{
name|this
argument_list|(
name|pid
argument_list|,
name|PROCFS
argument_list|,
name|ResourceHandlerModule
operator|.
name|getCGroupsHandler
argument_list|()
argument_list|,
name|SystemClock
operator|.
name|getInstance
argument_list|()
argument_list|,
name|SysInfoLinux
operator|.
name|JIFFY_LENGTH_IN_MILLIS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create resource calculator for testing.    * @param pid A pid from the cgroup or null for all containers    * @param procfsDir Path to /proc or a mock /proc directory    * @param cGroupsHandler Initialized cgroups handler object    * @param clock A clock object    * @param jiffyLengthMs0 Jiffy length in milliseconds    */
annotation|@
name|VisibleForTesting
DECL|method|CGroupsResourceCalculator (String pid, String procfsDir, CGroupsHandler cGroupsHandler, Clock clock, long jiffyLengthMs0)
name|CGroupsResourceCalculator
parameter_list|(
name|String
name|pid
parameter_list|,
name|String
name|procfsDir
parameter_list|,
name|CGroupsHandler
name|cGroupsHandler
parameter_list|,
name|Clock
name|clock
parameter_list|,
name|long
name|jiffyLengthMs0
parameter_list|)
block|{
name|super
argument_list|(
name|pid
argument_list|)
expr_stmt|;
name|this
operator|.
name|procfsDir
operator|=
name|procfsDir
expr_stmt|;
name|this
operator|.
name|cGroupsHandler
operator|=
name|cGroupsHandler
expr_stmt|;
name|this
operator|.
name|pid
operator|=
name|pid
operator|!=
literal|null
operator|&&
name|pid
operator|.
name|equals
argument_list|(
literal|"0"
argument_list|)
condition|?
literal|"1"
else|:
name|pid
expr_stmt|;
name|this
operator|.
name|jiffyLengthMs
operator|=
name|jiffyLengthMs0
expr_stmt|;
name|this
operator|.
name|cpuTimeTracker
operator|=
operator|new
name|CpuTimeTracker
argument_list|(
name|this
operator|.
name|jiffyLengthMs
argument_list|)
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
name|this
operator|.
name|processTotalJiffies
operator|=
name|BigInteger
operator|.
name|ZERO
expr_stmt|;
name|this
operator|.
name|processPhysicalMemory
operator|=
name|UNAVAILABLE
expr_stmt|;
name|this
operator|.
name|processVirtualMemory
operator|=
name|UNAVAILABLE
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initialize ()
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|YarnException
block|{
if|if
condition|(
operator|!
name|CGroupsResourceCalculator
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"CGroupsResourceCalculator is not available"
argument_list|)
throw|;
block|}
name|setCGroupFilePaths
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCpuUsagePercent ()
specifier|public
name|float
name|getCpuUsagePercent
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Process "
operator|+
name|pid
operator|+
literal|" jiffies:"
operator|+
name|processTotalJiffies
argument_list|)
expr_stmt|;
block|}
return|return
name|cpuTimeTracker
operator|.
name|getCpuTrackerUsagePercent
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getCumulativeCpuTime ()
specifier|public
name|long
name|getCumulativeCpuTime
parameter_list|()
block|{
if|if
condition|(
name|jiffyLengthMs
operator|<
literal|0
condition|)
block|{
return|return
name|UNAVAILABLE
return|;
block|}
return|return
name|processTotalJiffies
operator|.
name|longValue
argument_list|()
operator|*
name|jiffyLengthMs
return|;
block|}
annotation|@
name|Override
DECL|method|getRssMemorySize (int olderThanAge)
specifier|public
name|long
name|getRssMemorySize
parameter_list|(
name|int
name|olderThanAge
parameter_list|)
block|{
if|if
condition|(
name|olderThanAge
operator|>
literal|1
condition|)
block|{
return|return
name|UNAVAILABLE
return|;
block|}
return|return
name|processPhysicalMemory
return|;
block|}
annotation|@
name|Override
DECL|method|getVirtualMemorySize (int olderThanAge)
specifier|public
name|long
name|getVirtualMemorySize
parameter_list|(
name|int
name|olderThanAge
parameter_list|)
block|{
if|if
condition|(
name|olderThanAge
operator|>
literal|1
condition|)
block|{
return|return
name|UNAVAILABLE
return|;
block|}
return|return
name|processVirtualMemory
return|;
block|}
annotation|@
name|Override
DECL|method|updateProcessTree ()
specifier|public
name|void
name|updateProcessTree
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|processTotalJiffies
operator|=
name|readTotalProcessJiffies
argument_list|()
expr_stmt|;
name|cpuTimeTracker
operator|.
name|updateElapsedJiffies
argument_list|(
name|processTotalJiffies
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to parse "
operator|+
name|pid
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|processPhysicalMemory
operator|=
name|getMemorySize
argument_list|(
name|memStat
argument_list|)
expr_stmt|;
if|if
condition|(
name|memswStat
operator|.
name|exists
argument_list|()
condition|)
block|{
name|processVirtualMemory
operator|=
name|getMemorySize
argument_list|(
name|memswStat
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Swap cgroups monitoring is not compiled into the kernel "
operator|+
name|memswStat
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getProcessTreeDump ()
specifier|public
name|String
name|getProcessTreeDump
parameter_list|()
block|{
comment|// We do not have a process tree in cgroups return just the pid for tracking
return|return
name|pid
return|;
block|}
annotation|@
name|Override
DECL|method|checkPidPgrpidForMatch ()
specifier|public
name|boolean
name|checkPidPgrpidForMatch
parameter_list|()
block|{
comment|// We do not have a process tree in cgroups returning default ok
return|return
literal|true
return|;
block|}
comment|/**    * Checks if the CGroupsResourceCalculator is available on this system.    * This assumes that Linux container executor is already initialized.    *    * @return true if CGroupsResourceCalculator is available. False otherwise.    */
DECL|method|isAvailable ()
specifier|public
specifier|static
name|boolean
name|isAvailable
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
operator|!
name|Shell
operator|.
name|LINUX
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"CGroupsResourceCalculator currently is supported only on "
operator|+
literal|"Linux."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|ResourceHandlerModule
operator|.
name|getCGroupsHandler
argument_list|()
operator|==
literal|null
operator|||
name|ResourceHandlerModule
operator|.
name|getCpuResourceHandler
argument_list|()
operator|==
literal|null
operator|||
name|ResourceHandlerModule
operator|.
name|getMemoryResourceHandler
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"CGroupsResourceCalculator requires enabling CGroups"
operator|+
literal|"cpu and memory"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to get Operating System name. "
operator|+
name|se
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|getMemorySize (File cgroupUsageFile)
specifier|private
name|long
name|getMemorySize
parameter_list|(
name|File
name|cgroupUsageFile
parameter_list|)
block|{
name|long
index|[]
name|mem
init|=
operator|new
name|long
index|[
literal|1
index|]
decl_stmt|;
try|try
block|{
name|processFile
argument_list|(
name|cgroupUsageFile
argument_list|,
parameter_list|(
name|String
name|line
parameter_list|)
lambda|->
block|{
name|mem
index|[
literal|0
index|]
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|line
argument_list|)
expr_stmt|;
return|return
name|Result
operator|.
name|Exit
return|;
block|}
argument_list|)
expr_stmt|;
return|return
name|mem
index|[
literal|0
index|]
return|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to parse cgroups "
operator|+
name|memswStat
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|UNAVAILABLE
return|;
block|}
DECL|method|readTotalProcessJiffies ()
specifier|private
name|BigInteger
name|readTotalProcessJiffies
parameter_list|()
throws|throws
name|YarnException
block|{
specifier|final
name|BigInteger
index|[]
name|totalCPUTimeJiffies
init|=
operator|new
name|BigInteger
index|[
literal|1
index|]
decl_stmt|;
name|totalCPUTimeJiffies
index|[
literal|0
index|]
operator|=
name|BigInteger
operator|.
name|ZERO
expr_stmt|;
name|processFile
argument_list|(
name|cpuStat
argument_list|,
parameter_list|(
name|String
name|line
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
name|USER
argument_list|)
condition|)
block|{
name|totalCPUTimeJiffies
index|[
literal|0
index|]
operator|=
name|totalCPUTimeJiffies
index|[
literal|0
index|]
operator|.
name|add
argument_list|(
operator|new
name|BigInteger
argument_list|(
name|line
operator|.
name|substring
argument_list|(
name|USER
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
name|SYSTEM
argument_list|)
condition|)
block|{
name|totalCPUTimeJiffies
index|[
literal|0
index|]
operator|=
name|totalCPUTimeJiffies
index|[
literal|0
index|]
operator|.
name|add
argument_list|(
operator|new
name|BigInteger
argument_list|(
name|line
operator|.
name|substring
argument_list|(
name|SYSTEM
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Result
operator|.
name|Continue
return|;
block|}
argument_list|)
expr_stmt|;
return|return
name|totalCPUTimeJiffies
index|[
literal|0
index|]
return|;
block|}
DECL|method|getCGroupRelativePath ( CGroupsHandler.CGroupController controller)
specifier|private
name|String
name|getCGroupRelativePath
parameter_list|(
name|CGroupsHandler
operator|.
name|CGroupController
name|controller
parameter_list|)
throws|throws
name|YarnException
block|{
if|if
condition|(
name|pid
operator|==
literal|null
condition|)
block|{
return|return
name|cGroupsHandler
operator|.
name|getRelativePathForCGroup
argument_list|(
literal|""
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getCGroupRelativePathForPid
argument_list|(
name|controller
argument_list|)
return|;
block|}
block|}
DECL|method|getCGroupRelativePathForPid ( CGroupsHandler.CGroupController controller)
specifier|private
name|String
name|getCGroupRelativePathForPid
parameter_list|(
name|CGroupsHandler
operator|.
name|CGroupController
name|controller
parameter_list|)
throws|throws
name|YarnException
block|{
name|File
name|pidCgroupFile
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|procfsDir
argument_list|,
name|pid
argument_list|)
argument_list|,
name|CGROUP
argument_list|)
decl_stmt|;
name|String
index|[]
name|result
init|=
operator|new
name|String
index|[
literal|1
index|]
decl_stmt|;
name|processFile
argument_list|(
name|pidCgroupFile
argument_list|,
parameter_list|(
name|String
name|line
parameter_list|)
lambda|->
block|{
name|Matcher
name|m
init|=
name|CGROUP_FILE_FORMAT
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|boolean
name|mat
init|=
name|m
operator|.
name|find
argument_list|()
decl_stmt|;
if|if
condition|(
name|mat
condition|)
block|{
if|if
condition|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|contains
argument_list|(
name|controller
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// Instead of returning the full path we compose it
comment|// based on the last item as the container id
comment|// This helps to avoid confusion within a privileged Docker container
comment|// where the path is referred in /proc/<pid>/cgroup as
comment|// /docker/<dcontainerid>/hadoop-yarn/<containerid>
comment|// but it is /hadoop-yarn/<containerid> in the cgroups hierarchy
name|String
name|cgroupPath
init|=
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|cgroupPath
operator|!=
literal|null
condition|)
block|{
name|String
name|cgroup
init|=
operator|new
name|File
argument_list|(
name|cgroupPath
argument_list|)
operator|.
name|toPath
argument_list|()
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|result
index|[
literal|0
index|]
operator|=
name|cGroupsHandler
operator|.
name|getRelativePathForCGroup
argument_list|(
name|cgroup
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid cgroup path for "
operator|+
name|pidCgroupFile
argument_list|)
expr_stmt|;
block|}
return|return
name|Result
operator|.
name|Exit
return|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected: cgroup file is not in the expected format"
operator|+
literal|" for process with pid "
operator|+
name|pid
argument_list|)
expr_stmt|;
block|}
return|return
name|Result
operator|.
name|Continue
return|;
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
index|[
literal|0
index|]
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|controller
operator|.
name|getName
argument_list|()
operator|+
literal|" CGroup for pid "
operator|+
name|pid
operator|+
literal|" not found "
operator|+
name|pidCgroupFile
argument_list|)
throw|;
block|}
return|return
name|result
index|[
literal|0
index|]
return|;
block|}
DECL|method|processFile (File file, Function<String, Result> processLine)
specifier|private
name|void
name|processFile
parameter_list|(
name|File
name|file
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|Result
argument_list|>
name|processLine
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// Read "procfsDir/<pid>/stat" file - typically /proc/<pid>/stat
try|try
init|(
name|InputStreamReader
name|fReader
init|=
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
init|)
block|{
try|try
init|(
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
name|fReader
argument_list|)
init|)
block|{
try|try
block|{
name|String
name|str
decl_stmt|;
while|while
condition|(
operator|(
name|str
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|Result
name|result
init|=
name|processLine
operator|.
name|apply
argument_list|(
name|str
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
name|Result
operator|.
name|Exit
condition|)
block|{
return|return;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Error reading the stream "
operator|+
name|io
argument_list|,
name|io
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|f
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"The process vanished in the interim "
operator|+
name|pid
argument_list|,
name|f
argument_list|)
throw|;
block|}
block|}
DECL|method|setCGroupFilePaths ()
name|void
name|setCGroupFilePaths
parameter_list|()
throws|throws
name|YarnException
block|{
if|if
condition|(
name|cGroupsHandler
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"CGroups handler is not initialized"
argument_list|)
throw|;
block|}
name|File
name|cpuDir
init|=
operator|new
name|File
argument_list|(
name|cGroupsHandler
operator|.
name|getControllerPath
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPUACCT
argument_list|)
argument_list|,
name|getCGroupRelativePath
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPUACCT
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|memDir
init|=
operator|new
name|File
argument_list|(
name|cGroupsHandler
operator|.
name|getControllerPath
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|MEMORY
argument_list|)
argument_list|,
name|getCGroupRelativePath
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|MEMORY
argument_list|)
argument_list|)
decl_stmt|;
name|cpuStat
operator|=
operator|new
name|File
argument_list|(
name|cpuDir
argument_list|,
name|CPU_STAT
argument_list|)
expr_stmt|;
name|memStat
operator|=
operator|new
name|File
argument_list|(
name|memDir
argument_list|,
name|MEM_STAT
argument_list|)
expr_stmt|;
name|memswStat
operator|=
operator|new
name|File
argument_list|(
name|memDir
argument_list|,
name|MEMSW_STAT
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

