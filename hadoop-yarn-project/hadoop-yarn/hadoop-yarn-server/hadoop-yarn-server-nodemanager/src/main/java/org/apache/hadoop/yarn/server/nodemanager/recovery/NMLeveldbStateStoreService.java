begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.recovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|fusesource
operator|.
name|leveldbjni
operator|.
name|JniDBFactory
operator|.
name|asString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|fusesource
operator|.
name|leveldbjni
operator|.
name|JniDBFactory
operator|.
name|bytes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|LocalResourceProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|DeletionServiceDeleteTaskProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|LocalizedResourceProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|LeveldbIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|leveldbjni
operator|.
name|JniDBFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|leveldbjni
operator|.
name|internal
operator|.
name|NativeDB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|WriteBatch
import|;
end_import

begin_class
DECL|class|NMLeveldbStateStoreService
specifier|public
class|class
name|NMLeveldbStateStoreService
extends|extends
name|NMStateStoreService
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NMLeveldbStateStoreService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DB_NAME
specifier|private
specifier|static
specifier|final
name|String
name|DB_NAME
init|=
literal|"yarn-nm-state"
decl_stmt|;
DECL|field|DB_SCHEMA_VERSION_KEY
specifier|private
specifier|static
specifier|final
name|String
name|DB_SCHEMA_VERSION_KEY
init|=
literal|"schema-version"
decl_stmt|;
DECL|field|DB_SCHEMA_VERSION
specifier|private
specifier|static
specifier|final
name|String
name|DB_SCHEMA_VERSION
init|=
literal|"1.0"
decl_stmt|;
DECL|field|DELETION_TASK_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|DELETION_TASK_KEY_PREFIX
init|=
literal|"DeletionService/deltask_"
decl_stmt|;
DECL|field|LOCALIZATION_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|LOCALIZATION_KEY_PREFIX
init|=
literal|"Localization/"
decl_stmt|;
DECL|field|LOCALIZATION_PUBLIC_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|LOCALIZATION_PUBLIC_KEY_PREFIX
init|=
name|LOCALIZATION_KEY_PREFIX
operator|+
literal|"public/"
decl_stmt|;
DECL|field|LOCALIZATION_PRIVATE_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|LOCALIZATION_PRIVATE_KEY_PREFIX
init|=
name|LOCALIZATION_KEY_PREFIX
operator|+
literal|"private/"
decl_stmt|;
DECL|field|LOCALIZATION_STARTED_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|LOCALIZATION_STARTED_SUFFIX
init|=
literal|"started/"
decl_stmt|;
DECL|field|LOCALIZATION_COMPLETED_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|LOCALIZATION_COMPLETED_SUFFIX
init|=
literal|"completed/"
decl_stmt|;
DECL|field|LOCALIZATION_FILECACHE_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|LOCALIZATION_FILECACHE_SUFFIX
init|=
literal|"filecache/"
decl_stmt|;
DECL|field|LOCALIZATION_APPCACHE_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|LOCALIZATION_APPCACHE_SUFFIX
init|=
literal|"appcache/"
decl_stmt|;
DECL|field|db
specifier|private
name|DB
name|db
decl_stmt|;
DECL|method|NMLeveldbStateStoreService ()
specifier|public
name|NMLeveldbStateStoreService
parameter_list|()
block|{
name|super
argument_list|(
name|NMLeveldbStateStoreService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startStorage ()
specifier|protected
name|void
name|startStorage
parameter_list|()
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
DECL|method|closeStorage ()
specifier|protected
name|void
name|closeStorage
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|loadLocalizationState ()
specifier|public
name|RecoveredLocalizationState
name|loadLocalizationState
parameter_list|()
throws|throws
name|IOException
block|{
name|RecoveredLocalizationState
name|state
init|=
operator|new
name|RecoveredLocalizationState
argument_list|()
decl_stmt|;
try|try
block|{
name|LeveldbIterator
name|iter
init|=
operator|new
name|LeveldbIterator
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|iter
operator|.
name|seek
argument_list|(
name|bytes
argument_list|(
name|LOCALIZATION_PUBLIC_KEY_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
name|state
operator|.
name|publicTrackerState
operator|=
name|loadResourceTrackerState
argument_list|(
name|iter
argument_list|,
name|LOCALIZATION_PUBLIC_KEY_PREFIX
argument_list|)
expr_stmt|;
name|iter
operator|.
name|seek
argument_list|(
name|bytes
argument_list|(
name|LOCALIZATION_PRIVATE_KEY_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|peekNext
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|LOCALIZATION_PRIVATE_KEY_PREFIX
argument_list|)
condition|)
block|{
break|break;
block|}
name|int
name|userEndPos
init|=
name|key
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|,
name|LOCALIZATION_PRIVATE_KEY_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|userEndPos
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to determine user in resource key: "
operator|+
name|key
argument_list|)
throw|;
block|}
name|String
name|user
init|=
name|key
operator|.
name|substring
argument_list|(
name|LOCALIZATION_PRIVATE_KEY_PREFIX
operator|.
name|length
argument_list|()
argument_list|,
name|userEndPos
argument_list|)
decl_stmt|;
name|state
operator|.
name|userResources
operator|.
name|put
argument_list|(
name|user
argument_list|,
name|loadUserLocalizedResources
argument_list|(
name|iter
argument_list|,
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|userEndPos
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|state
return|;
block|}
DECL|method|loadResourceTrackerState ( LeveldbIterator iter, String keyPrefix)
specifier|private
name|LocalResourceTrackerState
name|loadResourceTrackerState
parameter_list|(
name|LeveldbIterator
name|iter
parameter_list|,
name|String
name|keyPrefix
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|completedPrefix
init|=
name|keyPrefix
operator|+
name|LOCALIZATION_COMPLETED_SUFFIX
decl_stmt|;
specifier|final
name|String
name|startedPrefix
init|=
name|keyPrefix
operator|+
name|LOCALIZATION_STARTED_SUFFIX
decl_stmt|;
name|LocalResourceTrackerState
name|state
init|=
operator|new
name|LocalResourceTrackerState
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|peekNext
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|keyPrefix
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|completedPrefix
argument_list|)
condition|)
block|{
name|state
operator|.
name|localizedResources
operator|=
name|loadCompletedResources
argument_list|(
name|iter
argument_list|,
name|completedPrefix
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|startedPrefix
argument_list|)
condition|)
block|{
name|state
operator|.
name|inProgressResources
operator|=
name|loadStartedResources
argument_list|(
name|iter
argument_list|,
name|startedPrefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected key in resource tracker state: "
operator|+
name|key
argument_list|)
throw|;
block|}
block|}
return|return
name|state
return|;
block|}
DECL|method|loadCompletedResources ( LeveldbIterator iter, String keyPrefix)
specifier|private
name|List
argument_list|<
name|LocalizedResourceProto
argument_list|>
name|loadCompletedResources
parameter_list|(
name|LeveldbIterator
name|iter
parameter_list|,
name|String
name|keyPrefix
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|LocalizedResourceProto
argument_list|>
name|rsrcs
init|=
operator|new
name|ArrayList
argument_list|<
name|LocalizedResourceProto
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|peekNext
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|keyPrefix
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loading completed resource from "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
name|rsrcs
operator|.
name|add
argument_list|(
name|LocalizedResourceProto
operator|.
name|parseFrom
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
return|return
name|rsrcs
return|;
block|}
DECL|method|loadStartedResources ( LeveldbIterator iter, String keyPrefix)
specifier|private
name|Map
argument_list|<
name|LocalResourceProto
argument_list|,
name|Path
argument_list|>
name|loadStartedResources
parameter_list|(
name|LeveldbIterator
name|iter
parameter_list|,
name|String
name|keyPrefix
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|LocalResourceProto
argument_list|,
name|Path
argument_list|>
name|rsrcs
init|=
operator|new
name|HashMap
argument_list|<
name|LocalResourceProto
argument_list|,
name|Path
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|peekNext
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|keyPrefix
argument_list|)
condition|)
block|{
break|break;
block|}
name|Path
name|localPath
init|=
operator|new
name|Path
argument_list|(
name|key
operator|.
name|substring
argument_list|(
name|keyPrefix
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loading in-progress resource at "
operator|+
name|localPath
argument_list|)
expr_stmt|;
block|}
name|rsrcs
operator|.
name|put
argument_list|(
name|LocalResourceProto
operator|.
name|parseFrom
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|localPath
argument_list|)
expr_stmt|;
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
return|return
name|rsrcs
return|;
block|}
DECL|method|loadUserLocalizedResources ( LeveldbIterator iter, String keyPrefix)
specifier|private
name|RecoveredUserResources
name|loadUserLocalizedResources
parameter_list|(
name|LeveldbIterator
name|iter
parameter_list|,
name|String
name|keyPrefix
parameter_list|)
throws|throws
name|IOException
block|{
name|RecoveredUserResources
name|userResources
init|=
operator|new
name|RecoveredUserResources
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|peekNext
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|keyPrefix
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|LOCALIZATION_FILECACHE_SUFFIX
argument_list|,
name|keyPrefix
operator|.
name|length
argument_list|()
argument_list|)
condition|)
block|{
name|userResources
operator|.
name|privateTrackerState
operator|=
name|loadResourceTrackerState
argument_list|(
name|iter
argument_list|,
name|keyPrefix
operator|+
name|LOCALIZATION_FILECACHE_SUFFIX
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|LOCALIZATION_APPCACHE_SUFFIX
argument_list|,
name|keyPrefix
operator|.
name|length
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|appIdStartPos
init|=
name|keyPrefix
operator|.
name|length
argument_list|()
operator|+
name|LOCALIZATION_APPCACHE_SUFFIX
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|appIdEndPos
init|=
name|key
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|,
name|appIdStartPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|appIdEndPos
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to determine appID in resource key: "
operator|+
name|key
argument_list|)
throw|;
block|}
name|ApplicationId
name|appId
init|=
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
name|key
operator|.
name|substring
argument_list|(
name|appIdStartPos
argument_list|,
name|appIdEndPos
argument_list|)
argument_list|)
decl_stmt|;
name|userResources
operator|.
name|appTrackerStates
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|loadResourceTrackerState
argument_list|(
name|iter
argument_list|,
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|appIdEndPos
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected user resource key "
operator|+
name|key
argument_list|)
throw|;
block|}
block|}
return|return
name|userResources
return|;
block|}
annotation|@
name|Override
DECL|method|startResourceLocalization (String user, ApplicationId appId, LocalResourceProto proto, Path localPath)
specifier|public
name|void
name|startResourceLocalization
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|LocalResourceProto
name|proto
parameter_list|,
name|Path
name|localPath
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|getResourceStartedKey
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|localPath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|proto
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|finishResourceLocalization (String user, ApplicationId appId, LocalizedResourceProto proto)
specifier|public
name|void
name|finishResourceLocalization
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|LocalizedResourceProto
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|localPath
init|=
name|proto
operator|.
name|getLocalPath
argument_list|()
decl_stmt|;
name|String
name|startedKey
init|=
name|getResourceStartedKey
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|localPath
argument_list|)
decl_stmt|;
name|String
name|completedKey
init|=
name|getResourceCompletedKey
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|localPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing localized resource to "
operator|+
name|completedKey
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|WriteBatch
name|batch
init|=
name|db
operator|.
name|createWriteBatch
argument_list|()
decl_stmt|;
try|try
block|{
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|startedKey
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|completedKey
argument_list|)
argument_list|,
name|proto
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|write
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|batch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeLocalizedResource (String user, ApplicationId appId, Path localPath)
specifier|public
name|void
name|removeLocalizedResource
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|Path
name|localPath
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|localPathStr
init|=
name|localPath
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|startedKey
init|=
name|getResourceStartedKey
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|localPathStr
argument_list|)
decl_stmt|;
name|String
name|completedKey
init|=
name|getResourceCompletedKey
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|localPathStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing local resource at "
operator|+
name|localPathStr
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|WriteBatch
name|batch
init|=
name|db
operator|.
name|createWriteBatch
argument_list|()
decl_stmt|;
try|try
block|{
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|startedKey
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|completedKey
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|write
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|batch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getResourceStartedKey (String user, ApplicationId appId, String localPath)
specifier|private
name|String
name|getResourceStartedKey
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|String
name|localPath
parameter_list|)
block|{
return|return
name|getResourceTrackerKeyPrefix
argument_list|(
name|user
argument_list|,
name|appId
argument_list|)
operator|+
name|LOCALIZATION_STARTED_SUFFIX
operator|+
name|localPath
return|;
block|}
DECL|method|getResourceCompletedKey (String user, ApplicationId appId, String localPath)
specifier|private
name|String
name|getResourceCompletedKey
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|String
name|localPath
parameter_list|)
block|{
return|return
name|getResourceTrackerKeyPrefix
argument_list|(
name|user
argument_list|,
name|appId
argument_list|)
operator|+
name|LOCALIZATION_COMPLETED_SUFFIX
operator|+
name|localPath
return|;
block|}
DECL|method|getResourceTrackerKeyPrefix (String user, ApplicationId appId)
specifier|private
name|String
name|getResourceTrackerKeyPrefix
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
return|return
name|LOCALIZATION_PUBLIC_KEY_PREFIX
return|;
block|}
if|if
condition|(
name|appId
operator|==
literal|null
condition|)
block|{
return|return
name|LOCALIZATION_PRIVATE_KEY_PREFIX
operator|+
name|user
operator|+
literal|"/"
operator|+
name|LOCALIZATION_FILECACHE_SUFFIX
return|;
block|}
return|return
name|LOCALIZATION_PRIVATE_KEY_PREFIX
operator|+
name|user
operator|+
literal|"/"
operator|+
name|LOCALIZATION_APPCACHE_SUFFIX
operator|+
name|appId
operator|+
literal|"/"
return|;
block|}
annotation|@
name|Override
DECL|method|loadDeletionServiceState ()
specifier|public
name|RecoveredDeletionServiceState
name|loadDeletionServiceState
parameter_list|()
throws|throws
name|IOException
block|{
name|RecoveredDeletionServiceState
name|state
init|=
operator|new
name|RecoveredDeletionServiceState
argument_list|()
decl_stmt|;
name|state
operator|.
name|tasks
operator|=
operator|new
name|ArrayList
argument_list|<
name|DeletionServiceDeleteTaskProto
argument_list|>
argument_list|()
expr_stmt|;
name|LeveldbIterator
name|iter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|iter
operator|=
operator|new
name|LeveldbIterator
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|iter
operator|.
name|seek
argument_list|(
name|bytes
argument_list|(
name|DELETION_TASK_KEY_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|DELETION_TASK_KEY_PREFIX
argument_list|)
condition|)
block|{
break|break;
block|}
name|state
operator|.
name|tasks
operator|.
name|add
argument_list|(
name|DeletionServiceDeleteTaskProto
operator|.
name|parseFrom
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|iter
operator|!=
literal|null
condition|)
block|{
name|iter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|state
return|;
block|}
annotation|@
name|Override
DECL|method|storeDeletionTask (int taskId, DeletionServiceDeleteTaskProto taskProto)
specifier|public
name|void
name|storeDeletionTask
parameter_list|(
name|int
name|taskId
parameter_list|,
name|DeletionServiceDeleteTaskProto
name|taskProto
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|DELETION_TASK_KEY_PREFIX
operator|+
name|taskId
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|taskProto
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeDeletionTask (int taskId)
specifier|public
name|void
name|removeDeletionTask
parameter_list|(
name|int
name|taskId
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|DELETION_TASK_KEY_PREFIX
operator|+
name|taskId
decl_stmt|;
try|try
block|{
name|db
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|initStorage (Configuration conf)
specifier|protected
name|void
name|initStorage
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|storeRoot
init|=
name|createStorageDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|createIfMissing
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|options
operator|.
name|logger
argument_list|(
operator|new
name|LeveldbLogger
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using state database at "
operator|+
name|storeRoot
operator|+
literal|" for recovery"
argument_list|)
expr_stmt|;
name|File
name|dbfile
init|=
operator|new
name|File
argument_list|(
name|storeRoot
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|schemaVersionData
init|=
literal|null
decl_stmt|;
try|try
block|{
name|db
operator|=
name|JniDBFactory
operator|.
name|factory
operator|.
name|open
argument_list|(
name|dbfile
argument_list|,
name|options
argument_list|)
expr_stmt|;
try|try
block|{
name|schemaVersionData
operator|=
name|db
operator|.
name|get
argument_list|(
name|bytes
argument_list|(
name|DB_SCHEMA_VERSION_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|NativeDB
operator|.
name|DBException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isNotFound
argument_list|()
operator|||
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|" does not exist "
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating state database at "
operator|+
name|dbfile
argument_list|)
expr_stmt|;
name|options
operator|.
name|createIfMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|db
operator|=
name|JniDBFactory
operator|.
name|factory
operator|.
name|open
argument_list|(
name|dbfile
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|schemaVersionData
operator|=
name|bytes
argument_list|(
name|DB_SCHEMA_VERSION
argument_list|)
expr_stmt|;
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|DB_SCHEMA_VERSION_KEY
argument_list|)
argument_list|,
name|schemaVersionData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|dbErr
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|dbErr
operator|.
name|getMessage
argument_list|()
argument_list|,
name|dbErr
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|schemaVersionData
operator|!=
literal|null
condition|)
block|{
name|String
name|schemaVersion
init|=
name|asString
argument_list|(
name|schemaVersionData
argument_list|)
decl_stmt|;
comment|// only support exact schema matches for now
if|if
condition|(
operator|!
name|DB_SCHEMA_VERSION
operator|.
name|equals
argument_list|(
name|schemaVersion
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Incompatible state database schema, found "
operator|+
name|schemaVersion
operator|+
literal|" expected "
operator|+
name|DB_SCHEMA_VERSION
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"State database schema version not found"
argument_list|)
throw|;
block|}
block|}
DECL|method|createStorageDir (Configuration conf)
specifier|private
name|Path
name|createStorageDir
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|storeUri
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|storeUri
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No store location directory configured in "
operator|+
name|YarnConfiguration
operator|.
name|NM_RECOVERY_DIR
argument_list|)
throw|;
block|}
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
name|storeUri
argument_list|,
name|DB_NAME
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|root
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|root
return|;
block|}
DECL|class|LeveldbLogger
specifier|private
specifier|static
class|class
name|LeveldbLogger
implements|implements
name|Logger
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LeveldbLogger
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|log (String message)
specifier|public
name|void
name|log
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

