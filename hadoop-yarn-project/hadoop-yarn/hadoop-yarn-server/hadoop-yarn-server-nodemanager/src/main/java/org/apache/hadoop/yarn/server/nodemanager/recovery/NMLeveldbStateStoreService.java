begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.recovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|StartContainerRequestPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ResourcePBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|LocalResourceProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnSecurityTokenProtos
operator|.
name|ContainerTokenIdentifierProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerCommonProtos
operator|.
name|MasterKeyProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerCommonProtos
operator|.
name|VersionProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|ContainerManagerApplicationProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|DeletionServiceDeleteTaskProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|LocalizedResourceProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|LogDeleterProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServiceProtos
operator|.
name|StartContainerRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|MasterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|MasterKeyPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeStatusUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ResourceMappings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|records
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|VersionPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|LeveldbIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|leveldbjni
operator|.
name|JniDBFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|leveldbjni
operator|.
name|internal
operator|.
name|NativeDB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|WriteBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|fusesource
operator|.
name|leveldbjni
operator|.
name|JniDBFactory
operator|.
name|asString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|fusesource
operator|.
name|leveldbjni
operator|.
name|JniDBFactory
operator|.
name|bytes
import|;
end_import

begin_class
DECL|class|NMLeveldbStateStoreService
specifier|public
class|class
name|NMLeveldbStateStoreService
extends|extends
name|NMStateStoreService
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|org
operator|.
name|slf4j
operator|.
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NMLeveldbStateStoreService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DB_NAME
specifier|private
specifier|static
specifier|final
name|String
name|DB_NAME
init|=
literal|"yarn-nm-state"
decl_stmt|;
DECL|field|DB_SCHEMA_VERSION_KEY
specifier|private
specifier|static
specifier|final
name|String
name|DB_SCHEMA_VERSION_KEY
init|=
literal|"nm-schema-version"
decl_stmt|;
comment|/**    * Changes from 1.0 to 1.1: Save AMRMProxy state in NMSS.    * Changes from 1.1 to 1.2: Save queued container information.    */
DECL|field|CURRENT_VERSION_INFO
specifier|private
specifier|static
specifier|final
name|Version
name|CURRENT_VERSION_INFO
init|=
name|Version
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
DECL|field|DELETION_TASK_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|DELETION_TASK_KEY_PREFIX
init|=
literal|"DeletionService/deltask_"
decl_stmt|;
DECL|field|APPLICATIONS_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|APPLICATIONS_KEY_PREFIX
init|=
literal|"ContainerManager/applications/"
decl_stmt|;
annotation|@
name|Deprecated
DECL|field|FINISHED_APPS_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|FINISHED_APPS_KEY_PREFIX
init|=
literal|"ContainerManager/finishedApps/"
decl_stmt|;
DECL|field|LOCALIZATION_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|LOCALIZATION_KEY_PREFIX
init|=
literal|"Localization/"
decl_stmt|;
DECL|field|LOCALIZATION_PUBLIC_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|LOCALIZATION_PUBLIC_KEY_PREFIX
init|=
name|LOCALIZATION_KEY_PREFIX
operator|+
literal|"public/"
decl_stmt|;
DECL|field|LOCALIZATION_PRIVATE_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|LOCALIZATION_PRIVATE_KEY_PREFIX
init|=
name|LOCALIZATION_KEY_PREFIX
operator|+
literal|"private/"
decl_stmt|;
DECL|field|LOCALIZATION_STARTED_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|LOCALIZATION_STARTED_SUFFIX
init|=
literal|"started/"
decl_stmt|;
DECL|field|LOCALIZATION_COMPLETED_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|LOCALIZATION_COMPLETED_SUFFIX
init|=
literal|"completed/"
decl_stmt|;
DECL|field|LOCALIZATION_FILECACHE_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|LOCALIZATION_FILECACHE_SUFFIX
init|=
literal|"filecache/"
decl_stmt|;
DECL|field|LOCALIZATION_APPCACHE_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|LOCALIZATION_APPCACHE_SUFFIX
init|=
literal|"appcache/"
decl_stmt|;
DECL|field|CONTAINERS_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINERS_KEY_PREFIX
init|=
literal|"ContainerManager/containers/"
decl_stmt|;
DECL|field|CONTAINER_REQUEST_KEY_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_REQUEST_KEY_SUFFIX
init|=
literal|"/request"
decl_stmt|;
DECL|field|CONTAINER_VERSION_KEY_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_VERSION_KEY_SUFFIX
init|=
literal|"/version"
decl_stmt|;
DECL|field|CONTAINER_START_TIME_KEY_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_START_TIME_KEY_SUFFIX
init|=
literal|"/starttime"
decl_stmt|;
DECL|field|CONTAINER_DIAGS_KEY_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_DIAGS_KEY_SUFFIX
init|=
literal|"/diagnostics"
decl_stmt|;
DECL|field|CONTAINER_LAUNCHED_KEY_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_LAUNCHED_KEY_SUFFIX
init|=
literal|"/launched"
decl_stmt|;
DECL|field|CONTAINER_QUEUED_KEY_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_QUEUED_KEY_SUFFIX
init|=
literal|"/queued"
decl_stmt|;
DECL|field|CONTAINER_PAUSED_KEY_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_PAUSED_KEY_SUFFIX
init|=
literal|"/paused"
decl_stmt|;
DECL|field|CONTAINER_UPDATE_TOKEN_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_UPDATE_TOKEN_SUFFIX
init|=
literal|"/updateToken"
decl_stmt|;
DECL|field|CONTAINER_KILLED_KEY_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_KILLED_KEY_SUFFIX
init|=
literal|"/killed"
decl_stmt|;
DECL|field|CONTAINER_EXIT_CODE_KEY_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_EXIT_CODE_KEY_SUFFIX
init|=
literal|"/exitcode"
decl_stmt|;
DECL|field|CONTAINER_REMAIN_RETRIES_KEY_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_REMAIN_RETRIES_KEY_SUFFIX
init|=
literal|"/remainingRetryAttempts"
decl_stmt|;
DECL|field|CONTAINER_RESTART_TIMES_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_RESTART_TIMES_SUFFIX
init|=
literal|"/restartTimes"
decl_stmt|;
DECL|field|CONTAINER_WORK_DIR_KEY_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_WORK_DIR_KEY_SUFFIX
init|=
literal|"/workdir"
decl_stmt|;
DECL|field|CONTAINER_LOG_DIR_KEY_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_LOG_DIR_KEY_SUFFIX
init|=
literal|"/logdir"
decl_stmt|;
DECL|field|CURRENT_MASTER_KEY_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|CURRENT_MASTER_KEY_SUFFIX
init|=
literal|"CurrentMasterKey"
decl_stmt|;
DECL|field|PREV_MASTER_KEY_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|PREV_MASTER_KEY_SUFFIX
init|=
literal|"PreviousMasterKey"
decl_stmt|;
DECL|field|NEXT_MASTER_KEY_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|NEXT_MASTER_KEY_SUFFIX
init|=
literal|"NextMasterKey"
decl_stmt|;
DECL|field|NM_TOKENS_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|NM_TOKENS_KEY_PREFIX
init|=
literal|"NMTokens/"
decl_stmt|;
DECL|field|NM_TOKENS_CURRENT_MASTER_KEY
specifier|private
specifier|static
specifier|final
name|String
name|NM_TOKENS_CURRENT_MASTER_KEY
init|=
name|NM_TOKENS_KEY_PREFIX
operator|+
name|CURRENT_MASTER_KEY_SUFFIX
decl_stmt|;
DECL|field|NM_TOKENS_PREV_MASTER_KEY
specifier|private
specifier|static
specifier|final
name|String
name|NM_TOKENS_PREV_MASTER_KEY
init|=
name|NM_TOKENS_KEY_PREFIX
operator|+
name|PREV_MASTER_KEY_SUFFIX
decl_stmt|;
DECL|field|CONTAINER_TOKENS_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_TOKENS_KEY_PREFIX
init|=
literal|"ContainerTokens/"
decl_stmt|;
DECL|field|CONTAINER_TOKEN_SECRETMANAGER_CURRENT_MASTER_KEY
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_TOKEN_SECRETMANAGER_CURRENT_MASTER_KEY
init|=
name|CONTAINER_TOKENS_KEY_PREFIX
operator|+
name|CURRENT_MASTER_KEY_SUFFIX
decl_stmt|;
DECL|field|CONTAINER_TOKEN_SECRETMANAGER_PREV_MASTER_KEY
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_TOKEN_SECRETMANAGER_PREV_MASTER_KEY
init|=
name|CONTAINER_TOKENS_KEY_PREFIX
operator|+
name|PREV_MASTER_KEY_SUFFIX
decl_stmt|;
DECL|field|LOG_DELETER_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|LOG_DELETER_KEY_PREFIX
init|=
literal|"LogDeleters/"
decl_stmt|;
DECL|field|AMRMPROXY_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|AMRMPROXY_KEY_PREFIX
init|=
literal|"AMRMProxy/"
decl_stmt|;
DECL|field|CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX
init|=
literal|"/assignedResources_"
decl_stmt|;
DECL|field|EMPTY_VALUE
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_VALUE
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
DECL|field|db
specifier|private
name|DB
name|db
decl_stmt|;
DECL|field|isNewlyCreated
specifier|private
name|boolean
name|isNewlyCreated
decl_stmt|;
DECL|field|isHealthy
specifier|private
name|boolean
name|isHealthy
decl_stmt|;
DECL|field|compactionTimer
specifier|private
name|Timer
name|compactionTimer
decl_stmt|;
comment|/**    * Map of containerID vs List of unknown key suffixes.    */
DECL|field|containerUnknownKeySuffixes
specifier|private
name|ListMultimap
argument_list|<
name|ContainerId
argument_list|,
name|String
argument_list|>
name|containerUnknownKeySuffixes
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
DECL|method|NMLeveldbStateStoreService ()
specifier|public
name|NMLeveldbStateStoreService
parameter_list|()
block|{
name|super
argument_list|(
name|NMLeveldbStateStoreService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startStorage ()
specifier|protected
name|void
name|startStorage
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Assume that we're healthy when we start
name|isHealthy
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|closeStorage ()
specifier|protected
name|void
name|closeStorage
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|compactionTimer
operator|!=
literal|null
condition|)
block|{
name|compactionTimer
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|compactionTimer
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|isNewlyCreated ()
specifier|public
name|boolean
name|isNewlyCreated
parameter_list|()
block|{
return|return
name|isNewlyCreated
return|;
block|}
comment|/**    * If the state store throws an error after recovery has been performed    * then we can not trust it any more to reflect the NM state. We need to    * mark the store and node unhealthy.    * Errors during the recovery will cause a service failure and thus a NM    * start failure. Do not need to mark the store unhealthy for those.    * @param dbErr Exception    */
DECL|method|markStoreUnHealthy (DBException dbErr)
specifier|private
name|void
name|markStoreUnHealthy
parameter_list|(
name|DBException
name|dbErr
parameter_list|)
block|{
comment|// Always log the error here, we might not see the error in the caller
name|LOG
operator|.
name|error
argument_list|(
literal|"Statestore exception: "
argument_list|,
name|dbErr
argument_list|)
expr_stmt|;
comment|// We have already been marked unhealthy so no need to do it again.
if|if
condition|(
operator|!
name|isHealthy
condition|)
block|{
return|return;
block|}
comment|// Mark unhealthy, an out of band heartbeat will be sent and the state
comment|// will remain unhealthy (not recoverable).
comment|// No need to close the store: does not make any difference at this point.
name|isHealthy
operator|=
literal|false
expr_stmt|;
comment|// We could get here before the nodeStatusUpdater is set
name|NodeStatusUpdater
name|nsu
init|=
name|getNodeStatusUpdater
argument_list|()
decl_stmt|;
if|if
condition|(
name|nsu
operator|!=
literal|null
condition|)
block|{
name|nsu
operator|.
name|reportException
argument_list|(
name|dbErr
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|isHealthy ()
name|boolean
name|isHealthy
parameter_list|()
block|{
return|return
name|isHealthy
return|;
block|}
comment|// LeveldbIterator starting at startkey
DECL|method|getLevelDBIterator (String startKey)
specifier|private
name|LeveldbIterator
name|getLevelDBIterator
parameter_list|(
name|String
name|startKey
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|LeveldbIterator
name|it
init|=
operator|new
name|LeveldbIterator
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|it
operator|.
name|seek
argument_list|(
name|bytes
argument_list|(
name|startKey
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|it
return|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// Base Recovery Iterator
DECL|class|BaseRecoveryIterator
specifier|private
specifier|abstract
class|class
name|BaseRecoveryIterator
parameter_list|<
name|T
parameter_list|>
implements|implements
name|RecoveryIterator
argument_list|<
name|T
argument_list|>
block|{
DECL|field|it
name|LeveldbIterator
name|it
decl_stmt|;
DECL|field|nextItem
name|T
name|nextItem
decl_stmt|;
DECL|method|BaseRecoveryIterator (String dbKey)
name|BaseRecoveryIterator
parameter_list|(
name|String
name|dbKey
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|it
operator|=
name|getLevelDBIterator
argument_list|(
name|dbKey
argument_list|)
expr_stmt|;
name|this
operator|.
name|nextItem
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getNextItem (LeveldbIterator it)
specifier|protected
specifier|abstract
name|T
name|getNextItem
parameter_list|(
name|LeveldbIterator
name|it
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|nextItem
operator|==
literal|null
condition|)
block|{
name|nextItem
operator|=
name|getNextItem
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|nextItem
operator|!=
literal|null
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|T
name|next
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchElementException
block|{
name|T
name|tmp
init|=
name|nextItem
decl_stmt|;
if|if
condition|(
name|tmp
operator|!=
literal|null
condition|)
block|{
name|nextItem
operator|=
literal|null
expr_stmt|;
return|return
name|tmp
return|;
block|}
else|else
block|{
name|tmp
operator|=
name|getNextItem
argument_list|(
name|it
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmp
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
return|return
name|tmp
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|it
operator|!=
literal|null
condition|)
block|{
name|it
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|//  Container Recovery Iterator
DECL|class|ContainerStateIterator
specifier|private
class|class
name|ContainerStateIterator
extends|extends
name|BaseRecoveryIterator
argument_list|<
name|RecoveredContainerState
argument_list|>
block|{
DECL|method|ContainerStateIterator ()
name|ContainerStateIterator
parameter_list|()
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|CONTAINERS_KEY_PREFIX
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNextItem (LeveldbIterator it)
specifier|protected
name|RecoveredContainerState
name|getNextItem
parameter_list|(
name|LeveldbIterator
name|it
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getNextRecoveredContainer
argument_list|(
name|it
argument_list|)
return|;
block|}
block|}
DECL|method|getNextRecoveredContainer (LeveldbIterator it)
specifier|private
name|RecoveredContainerState
name|getNextRecoveredContainer
parameter_list|(
name|LeveldbIterator
name|it
parameter_list|)
throws|throws
name|IOException
block|{
name|RecoveredContainerState
name|rcs
init|=
literal|null
decl_stmt|;
try|try
block|{
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|it
operator|.
name|peekNext
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|CONTAINERS_KEY_PREFIX
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|idEndPos
init|=
name|key
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|,
name|CONTAINERS_KEY_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|idEndPos
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to determine container in key: "
operator|+
name|key
argument_list|)
throw|;
block|}
name|String
name|keyPrefix
init|=
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idEndPos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|rcs
operator|=
name|loadContainerState
argument_list|(
name|it
argument_list|,
name|keyPrefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|rcs
operator|.
name|startRequest
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
else|else
block|{
name|removeContainer
argument_list|(
name|rcs
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|rcs
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|rcs
return|;
block|}
annotation|@
name|Override
DECL|method|getContainerStateIterator ()
specifier|public
name|RecoveryIterator
argument_list|<
name|RecoveredContainerState
argument_list|>
name|getContainerStateIterator
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|ContainerStateIterator
argument_list|()
return|;
block|}
DECL|method|loadContainerState (LeveldbIterator iter, String keyPrefix)
specifier|private
name|RecoveredContainerState
name|loadContainerState
parameter_list|(
name|LeveldbIterator
name|iter
parameter_list|,
name|String
name|keyPrefix
parameter_list|)
throws|throws
name|IOException
block|{
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|fromString
argument_list|(
name|keyPrefix
operator|.
name|substring
argument_list|(
name|CONTAINERS_KEY_PREFIX
operator|.
name|length
argument_list|()
argument_list|,
name|keyPrefix
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|RecoveredContainerState
name|rcs
init|=
operator|new
name|RecoveredContainerState
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|rcs
operator|.
name|status
operator|=
name|RecoveredContainerStatus
operator|.
name|REQUESTED
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|peekNext
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|keyPrefix
argument_list|)
condition|)
block|{
break|break;
block|}
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|String
name|suffix
init|=
name|key
operator|.
name|substring
argument_list|(
name|keyPrefix
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// start with '/'
if|if
condition|(
name|suffix
operator|.
name|equals
argument_list|(
name|CONTAINER_REQUEST_KEY_SUFFIX
argument_list|)
condition|)
block|{
name|rcs
operator|.
name|startRequest
operator|=
operator|new
name|StartContainerRequestPBImpl
argument_list|(
name|StartContainerRequestProto
operator|.
name|parseFrom
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerTokenIdentifier
name|containerTokenIdentifier
init|=
name|BuilderUtils
operator|.
name|newContainerTokenIdentifier
argument_list|(
name|rcs
operator|.
name|startRequest
operator|.
name|getContainerToken
argument_list|()
argument_list|)
decl_stmt|;
name|rcs
operator|.
name|capability
operator|=
operator|new
name|ResourcePBImpl
argument_list|(
name|containerTokenIdentifier
operator|.
name|getProto
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|suffix
operator|.
name|equals
argument_list|(
name|CONTAINER_VERSION_KEY_SUFFIX
argument_list|)
condition|)
block|{
name|rcs
operator|.
name|version
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|asString
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|suffix
operator|.
name|equals
argument_list|(
name|CONTAINER_START_TIME_KEY_SUFFIX
argument_list|)
condition|)
block|{
name|rcs
operator|.
name|setStartTime
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|asString
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|suffix
operator|.
name|equals
argument_list|(
name|CONTAINER_DIAGS_KEY_SUFFIX
argument_list|)
condition|)
block|{
name|rcs
operator|.
name|diagnostics
operator|=
name|asString
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|suffix
operator|.
name|equals
argument_list|(
name|CONTAINER_QUEUED_KEY_SUFFIX
argument_list|)
condition|)
block|{
if|if
condition|(
name|rcs
operator|.
name|status
operator|==
name|RecoveredContainerStatus
operator|.
name|REQUESTED
condition|)
block|{
name|rcs
operator|.
name|status
operator|=
name|RecoveredContainerStatus
operator|.
name|QUEUED
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|suffix
operator|.
name|equals
argument_list|(
name|CONTAINER_PAUSED_KEY_SUFFIX
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|rcs
operator|.
name|status
operator|==
name|RecoveredContainerStatus
operator|.
name|LAUNCHED
operator|)
operator|||
operator|(
name|rcs
operator|.
name|status
operator|==
name|RecoveredContainerStatus
operator|.
name|QUEUED
operator|)
operator|||
operator|(
name|rcs
operator|.
name|status
operator|==
name|RecoveredContainerStatus
operator|.
name|REQUESTED
operator|)
condition|)
block|{
name|rcs
operator|.
name|status
operator|=
name|RecoveredContainerStatus
operator|.
name|PAUSED
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|suffix
operator|.
name|equals
argument_list|(
name|CONTAINER_LAUNCHED_KEY_SUFFIX
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|rcs
operator|.
name|status
operator|==
name|RecoveredContainerStatus
operator|.
name|REQUESTED
operator|)
operator|||
operator|(
name|rcs
operator|.
name|status
operator|==
name|RecoveredContainerStatus
operator|.
name|QUEUED
operator|)
operator|||
operator|(
name|rcs
operator|.
name|status
operator|==
name|RecoveredContainerStatus
operator|.
name|PAUSED
operator|)
condition|)
block|{
name|rcs
operator|.
name|status
operator|=
name|RecoveredContainerStatus
operator|.
name|LAUNCHED
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|suffix
operator|.
name|equals
argument_list|(
name|CONTAINER_KILLED_KEY_SUFFIX
argument_list|)
condition|)
block|{
name|rcs
operator|.
name|killed
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|suffix
operator|.
name|equals
argument_list|(
name|CONTAINER_EXIT_CODE_KEY_SUFFIX
argument_list|)
condition|)
block|{
name|rcs
operator|.
name|status
operator|=
name|RecoveredContainerStatus
operator|.
name|COMPLETED
expr_stmt|;
name|rcs
operator|.
name|exitCode
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|asString
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|suffix
operator|.
name|equals
argument_list|(
name|CONTAINER_UPDATE_TOKEN_SUFFIX
argument_list|)
condition|)
block|{
name|ContainerTokenIdentifierProto
name|tokenIdentifierProto
init|=
name|ContainerTokenIdentifierProto
operator|.
name|parseFrom
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|Token
name|currentToken
init|=
name|rcs
operator|.
name|getStartRequest
argument_list|()
operator|.
name|getContainerToken
argument_list|()
decl_stmt|;
name|Token
name|updatedToken
init|=
name|Token
operator|.
name|newInstance
argument_list|(
name|tokenIdentifierProto
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|ContainerTokenIdentifier
operator|.
name|KIND
operator|.
name|toString
argument_list|()
argument_list|,
name|currentToken
operator|.
name|getPassword
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|currentToken
operator|.
name|getService
argument_list|()
argument_list|)
decl_stmt|;
name|rcs
operator|.
name|startRequest
operator|.
name|setContainerToken
argument_list|(
name|updatedToken
argument_list|)
expr_stmt|;
name|rcs
operator|.
name|capability
operator|=
operator|new
name|ResourcePBImpl
argument_list|(
name|tokenIdentifierProto
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
name|rcs
operator|.
name|version
operator|=
name|tokenIdentifierProto
operator|.
name|getVersion
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|suffix
operator|.
name|equals
argument_list|(
name|CONTAINER_REMAIN_RETRIES_KEY_SUFFIX
argument_list|)
condition|)
block|{
name|rcs
operator|.
name|setRemainingRetryAttempts
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|asString
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|suffix
operator|.
name|equals
argument_list|(
name|CONTAINER_RESTART_TIMES_SUFFIX
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
comment|// parse the string format of List<Long>, e.g. [34, 21, 22]
name|String
index|[]
name|unparsedRestartTimes
init|=
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|value
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|split
argument_list|(
literal|", "
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|restartTimes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|restartTime
range|:
name|unparsedRestartTimes
control|)
block|{
if|if
condition|(
operator|!
name|restartTime
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|restartTimes
operator|.
name|add
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|restartTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|rcs
operator|.
name|setRestartTimes
argument_list|(
name|restartTimes
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|suffix
operator|.
name|equals
argument_list|(
name|CONTAINER_WORK_DIR_KEY_SUFFIX
argument_list|)
condition|)
block|{
name|rcs
operator|.
name|setWorkDir
argument_list|(
name|asString
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|suffix
operator|.
name|equals
argument_list|(
name|CONTAINER_LOG_DIR_KEY_SUFFIX
argument_list|)
condition|)
block|{
name|rcs
operator|.
name|setLogDir
argument_list|(
name|asString
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|suffix
operator|.
name|startsWith
argument_list|(
name|CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX
argument_list|)
condition|)
block|{
name|String
name|resourceType
init|=
name|suffix
operator|.
name|substring
argument_list|(
name|CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|ResourceMappings
operator|.
name|AssignedResources
name|assignedResources
init|=
name|ResourceMappings
operator|.
name|AssignedResources
operator|.
name|fromBytes
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|rcs
operator|.
name|getResourceMappings
argument_list|()
operator|.
name|addAssignedResources
argument_list|(
name|resourceType
argument_list|,
name|assignedResources
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"the container "
operator|+
name|containerId
operator|+
literal|" will be killed because of the unknown key "
operator|+
name|key
operator|+
literal|" during recovery."
argument_list|)
expr_stmt|;
name|containerUnknownKeySuffixes
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|suffix
argument_list|)
expr_stmt|;
name|rcs
operator|.
name|setRecoveryType
argument_list|(
name|RecoveredContainerType
operator|.
name|KILL
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rcs
return|;
block|}
annotation|@
name|Override
DECL|method|storeContainer (ContainerId containerId, int containerVersion, long startTime, StartContainerRequest startRequest)
specifier|public
name|void
name|storeContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|int
name|containerVersion
parameter_list|,
name|long
name|startTime
parameter_list|,
name|StartContainerRequest
name|startRequest
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|idStr
init|=
name|containerId
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"storeContainer: containerId= "
operator|+
name|idStr
operator|+
literal|", startRequest= "
operator|+
name|startRequest
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|keyVersion
init|=
name|getContainerVersionKey
argument_list|(
name|idStr
argument_list|)
decl_stmt|;
specifier|final
name|String
name|keyRequest
init|=
name|getContainerKey
argument_list|(
name|idStr
argument_list|,
name|CONTAINER_REQUEST_KEY_SUFFIX
argument_list|)
decl_stmt|;
specifier|final
name|StartContainerRequestProto
name|startContainerRequest
init|=
operator|(
operator|(
name|StartContainerRequestPBImpl
operator|)
name|startRequest
operator|)
operator|.
name|getProto
argument_list|()
decl_stmt|;
specifier|final
name|String
name|keyStartTime
init|=
name|getContainerKey
argument_list|(
name|idStr
argument_list|,
name|CONTAINER_START_TIME_KEY_SUFFIX
argument_list|)
decl_stmt|;
specifier|final
name|String
name|startTimeValue
init|=
name|Long
operator|.
name|toString
argument_list|(
name|startTime
argument_list|)
decl_stmt|;
try|try
block|{
try|try
init|(
name|WriteBatch
name|batch
init|=
name|db
operator|.
name|createWriteBatch
argument_list|()
init|)
block|{
name|batch
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|keyRequest
argument_list|)
argument_list|,
name|startContainerRequest
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|batch
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|keyStartTime
argument_list|)
argument_list|,
name|bytes
argument_list|(
name|startTimeValue
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|containerVersion
operator|!=
literal|0
condition|)
block|{
name|batch
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|keyVersion
argument_list|)
argument_list|,
name|bytes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|containerVersion
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|write
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getContainerVersionKey (String containerId)
name|String
name|getContainerVersionKey
parameter_list|(
name|String
name|containerId
parameter_list|)
block|{
return|return
name|getContainerKey
argument_list|(
name|containerId
argument_list|,
name|CONTAINER_VERSION_KEY_SUFFIX
argument_list|)
return|;
block|}
DECL|method|getContainerKey (String containerId, String suffix)
specifier|private
name|String
name|getContainerKey
parameter_list|(
name|String
name|containerId
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
return|return
name|CONTAINERS_KEY_PREFIX
operator|+
name|containerId
operator|+
name|suffix
return|;
block|}
annotation|@
name|Override
DECL|method|storeContainerQueued (ContainerId containerId)
specifier|public
name|void
name|storeContainerQueued
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"storeContainerQueued: containerId="
operator|+
name|containerId
argument_list|)
expr_stmt|;
block|}
name|String
name|key
init|=
name|CONTAINERS_KEY_PREFIX
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
name|CONTAINER_QUEUED_KEY_SUFFIX
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|EMPTY_VALUE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|removeContainerQueued (ContainerId containerId)
specifier|private
name|void
name|removeContainerQueued
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"removeContainerQueued: containerId="
operator|+
name|containerId
argument_list|)
expr_stmt|;
block|}
name|String
name|key
init|=
name|CONTAINERS_KEY_PREFIX
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
name|CONTAINER_QUEUED_KEY_SUFFIX
decl_stmt|;
try|try
block|{
name|db
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeContainerPaused (ContainerId containerId)
specifier|public
name|void
name|storeContainerPaused
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"storeContainerPaused: containerId="
operator|+
name|containerId
argument_list|)
expr_stmt|;
block|}
name|String
name|key
init|=
name|CONTAINERS_KEY_PREFIX
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
name|CONTAINER_PAUSED_KEY_SUFFIX
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|EMPTY_VALUE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeContainerPaused (ContainerId containerId)
specifier|public
name|void
name|removeContainerPaused
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"removeContainerPaused: containerId="
operator|+
name|containerId
argument_list|)
expr_stmt|;
block|}
name|String
name|key
init|=
name|CONTAINERS_KEY_PREFIX
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
name|CONTAINER_PAUSED_KEY_SUFFIX
decl_stmt|;
try|try
block|{
name|db
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeContainerDiagnostics (ContainerId containerId, StringBuilder diagnostics)
specifier|public
name|void
name|storeContainerDiagnostics
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|StringBuilder
name|diagnostics
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"storeContainerDiagnostics: containerId="
operator|+
name|containerId
operator|+
literal|", diagnostics="
operator|+
name|diagnostics
argument_list|)
expr_stmt|;
block|}
name|String
name|key
init|=
name|CONTAINERS_KEY_PREFIX
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
name|CONTAINER_DIAGS_KEY_SUFFIX
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|bytes
argument_list|(
name|diagnostics
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeContainerLaunched (ContainerId containerId)
specifier|public
name|void
name|storeContainerLaunched
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"storeContainerLaunched: containerId="
operator|+
name|containerId
argument_list|)
expr_stmt|;
block|}
comment|// Removing the container if queued for backward compatibility reasons
name|removeContainerQueued
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|String
name|key
init|=
name|CONTAINERS_KEY_PREFIX
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
name|CONTAINER_LAUNCHED_KEY_SUFFIX
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|EMPTY_VALUE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeContainerUpdateToken (ContainerId containerId, ContainerTokenIdentifier containerTokenIdentifier)
specifier|public
name|void
name|storeContainerUpdateToken
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|ContainerTokenIdentifier
name|containerTokenIdentifier
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"storeContainerUpdateToken: containerId="
operator|+
name|containerId
argument_list|)
expr_stmt|;
block|}
name|String
name|keyUpdateToken
init|=
name|CONTAINERS_KEY_PREFIX
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
name|CONTAINER_UPDATE_TOKEN_SUFFIX
decl_stmt|;
name|String
name|keyVersion
init|=
name|CONTAINERS_KEY_PREFIX
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
name|CONTAINER_VERSION_KEY_SUFFIX
decl_stmt|;
try|try
block|{
name|WriteBatch
name|batch
init|=
name|db
operator|.
name|createWriteBatch
argument_list|()
decl_stmt|;
try|try
block|{
comment|// New value will overwrite old values for the same key
name|batch
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|keyUpdateToken
argument_list|)
argument_list|,
name|containerTokenIdentifier
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|batch
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|keyVersion
argument_list|)
argument_list|,
name|bytes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|containerTokenIdentifier
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|write
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|batch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeContainerKilled (ContainerId containerId)
specifier|public
name|void
name|storeContainerKilled
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"storeContainerKilled: containerId="
operator|+
name|containerId
argument_list|)
expr_stmt|;
block|}
name|String
name|key
init|=
name|CONTAINERS_KEY_PREFIX
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
name|CONTAINER_KILLED_KEY_SUFFIX
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|EMPTY_VALUE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeContainerCompleted (ContainerId containerId, int exitCode)
specifier|public
name|void
name|storeContainerCompleted
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|int
name|exitCode
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"storeContainerCompleted: containerId="
operator|+
name|containerId
argument_list|)
expr_stmt|;
block|}
name|String
name|key
init|=
name|CONTAINERS_KEY_PREFIX
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
name|CONTAINER_EXIT_CODE_KEY_SUFFIX
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|bytes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|exitCode
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeContainerRemainingRetryAttempts (ContainerId containerId, int remainingRetryAttempts)
specifier|public
name|void
name|storeContainerRemainingRetryAttempts
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|int
name|remainingRetryAttempts
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|CONTAINERS_KEY_PREFIX
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
name|CONTAINER_REMAIN_RETRIES_KEY_SUFFIX
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|bytes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|remainingRetryAttempts
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeContainerRestartTimes (ContainerId containerId, List<Long> restartTimes)
specifier|public
name|void
name|storeContainerRestartTimes
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|restartTimes
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|CONTAINERS_KEY_PREFIX
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
name|CONTAINER_RESTART_TIMES_SUFFIX
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|bytes
argument_list|(
name|restartTimes
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeContainerWorkDir (ContainerId containerId, String workDir)
specifier|public
name|void
name|storeContainerWorkDir
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|String
name|workDir
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|CONTAINERS_KEY_PREFIX
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
name|CONTAINER_WORK_DIR_KEY_SUFFIX
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|bytes
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeContainerLogDir (ContainerId containerId, String logDir)
specifier|public
name|void
name|storeContainerLogDir
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|String
name|logDir
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|CONTAINERS_KEY_PREFIX
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
name|CONTAINER_LOG_DIR_KEY_SUFFIX
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|bytes
argument_list|(
name|logDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeContainer (ContainerId containerId)
specifier|public
name|void
name|removeContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"removeContainer: containerId="
operator|+
name|containerId
argument_list|)
expr_stmt|;
block|}
name|String
name|keyPrefix
init|=
name|CONTAINERS_KEY_PREFIX
operator|+
name|containerId
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
name|WriteBatch
name|batch
init|=
name|db
operator|.
name|createWriteBatch
argument_list|()
decl_stmt|;
try|try
block|{
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|keyPrefix
operator|+
name|CONTAINER_REQUEST_KEY_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|keyPrefix
operator|+
name|CONTAINER_DIAGS_KEY_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|keyPrefix
operator|+
name|CONTAINER_LAUNCHED_KEY_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|keyPrefix
operator|+
name|CONTAINER_QUEUED_KEY_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|keyPrefix
operator|+
name|CONTAINER_PAUSED_KEY_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|keyPrefix
operator|+
name|CONTAINER_KILLED_KEY_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|keyPrefix
operator|+
name|CONTAINER_EXIT_CODE_KEY_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|keyPrefix
operator|+
name|CONTAINER_UPDATE_TOKEN_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|keyPrefix
operator|+
name|CONTAINER_START_TIME_KEY_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|keyPrefix
operator|+
name|CONTAINER_LOG_DIR_KEY_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|keyPrefix
operator|+
name|CONTAINER_VERSION_KEY_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|keyPrefix
operator|+
name|CONTAINER_REMAIN_RETRIES_KEY_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|keyPrefix
operator|+
name|CONTAINER_RESTART_TIMES_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|keyPrefix
operator|+
name|CONTAINER_WORK_DIR_KEY_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|unknownKeysForContainer
init|=
name|containerUnknownKeySuffixes
operator|.
name|removeAll
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|unknownKeySuffix
range|:
name|unknownKeysForContainer
control|)
block|{
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|keyPrefix
operator|+
name|unknownKeySuffix
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|write
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|batch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// Application Recovery Iterator
DECL|class|ApplicationStateIterator
specifier|private
class|class
name|ApplicationStateIterator
extends|extends
name|BaseRecoveryIterator
argument_list|<
name|ContainerManagerApplicationProto
argument_list|>
block|{
DECL|method|ApplicationStateIterator ()
name|ApplicationStateIterator
parameter_list|()
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|APPLICATIONS_KEY_PREFIX
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNextItem (LeveldbIterator it)
specifier|protected
name|ContainerManagerApplicationProto
name|getNextItem
parameter_list|(
name|LeveldbIterator
name|it
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getNextRecoveredApplication
argument_list|(
name|it
argument_list|)
return|;
block|}
block|}
DECL|method|getNextRecoveredApplication ( LeveldbIterator it)
specifier|private
name|ContainerManagerApplicationProto
name|getNextRecoveredApplication
parameter_list|(
name|LeveldbIterator
name|it
parameter_list|)
throws|throws
name|IOException
block|{
name|ContainerManagerApplicationProto
name|applicationProto
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|APPLICATIONS_KEY_PREFIX
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|applicationProto
operator|=
name|ContainerManagerApplicationProto
operator|.
name|parseFrom
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|applicationProto
return|;
block|}
annotation|@
name|Override
DECL|method|loadApplicationsState ()
specifier|public
name|RecoveredApplicationsState
name|loadApplicationsState
parameter_list|()
throws|throws
name|IOException
block|{
name|RecoveredApplicationsState
name|state
init|=
operator|new
name|RecoveredApplicationsState
argument_list|()
decl_stmt|;
name|state
operator|.
name|it
operator|=
operator|new
name|ApplicationStateIterator
argument_list|()
expr_stmt|;
name|cleanupDeprecatedFinishedApps
argument_list|()
expr_stmt|;
return|return
name|state
return|;
block|}
annotation|@
name|Override
DECL|method|storeApplication (ApplicationId appId, ContainerManagerApplicationProto p)
specifier|public
name|void
name|storeApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|ContainerManagerApplicationProto
name|p
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"storeApplication: appId="
operator|+
name|appId
operator|+
literal|", proto="
operator|+
name|p
argument_list|)
expr_stmt|;
block|}
name|String
name|key
init|=
name|APPLICATIONS_KEY_PREFIX
operator|+
name|appId
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|p
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeApplication (ApplicationId appId)
specifier|public
name|void
name|removeApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"removeApplication: appId="
operator|+
name|appId
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|WriteBatch
name|batch
init|=
name|db
operator|.
name|createWriteBatch
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|key
init|=
name|APPLICATIONS_KEY_PREFIX
operator|+
name|appId
decl_stmt|;
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|write
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|batch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// User Resource Recovery Iterator.
DECL|class|UserResourcesIterator
specifier|private
class|class
name|UserResourcesIterator
extends|extends
name|BaseRecoveryIterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|RecoveredUserResources
argument_list|>
argument_list|>
block|{
DECL|method|UserResourcesIterator ()
name|UserResourcesIterator
parameter_list|()
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|LOCALIZATION_PRIVATE_KEY_PREFIX
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNextItem ( LeveldbIterator it)
specifier|protected
name|Entry
argument_list|<
name|String
argument_list|,
name|RecoveredUserResources
argument_list|>
name|getNextItem
parameter_list|(
name|LeveldbIterator
name|it
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getNextRecoveredPrivateLocalizationEntry
argument_list|(
name|it
argument_list|)
return|;
block|}
block|}
DECL|method|getNextRecoveredPrivateLocalizationEntry ( LeveldbIterator it)
specifier|private
name|Entry
argument_list|<
name|String
argument_list|,
name|RecoveredUserResources
argument_list|>
name|getNextRecoveredPrivateLocalizationEntry
parameter_list|(
name|LeveldbIterator
name|it
parameter_list|)
throws|throws
name|IOException
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|RecoveredUserResources
argument_list|>
name|localEntry
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|it
operator|.
name|peekNext
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|LOCALIZATION_PRIVATE_KEY_PREFIX
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|userEndPos
init|=
name|key
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|,
name|LOCALIZATION_PRIVATE_KEY_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|userEndPos
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to determine user in resource key: "
operator|+
name|key
argument_list|)
throw|;
block|}
name|String
name|user
init|=
name|key
operator|.
name|substring
argument_list|(
name|LOCALIZATION_PRIVATE_KEY_PREFIX
operator|.
name|length
argument_list|()
argument_list|,
name|userEndPos
argument_list|)
decl_stmt|;
name|RecoveredUserResources
name|val
init|=
name|loadUserLocalizedResources
argument_list|(
name|it
argument_list|,
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|userEndPos
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|localEntry
operator|=
operator|new
name|AbstractMap
operator|.
name|SimpleEntry
argument_list|<>
argument_list|(
name|user
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|localEntry
return|;
block|}
annotation|@
name|Override
DECL|method|loadLocalizationState ()
specifier|public
name|RecoveredLocalizationState
name|loadLocalizationState
parameter_list|()
throws|throws
name|IOException
block|{
name|RecoveredLocalizationState
name|state
init|=
operator|new
name|RecoveredLocalizationState
argument_list|()
decl_stmt|;
name|LeveldbIterator
name|it
init|=
name|getLevelDBIterator
argument_list|(
name|LOCALIZATION_PUBLIC_KEY_PREFIX
argument_list|)
decl_stmt|;
name|state
operator|.
name|publicTrackerState
operator|=
name|loadResourceTrackerState
argument_list|(
name|it
argument_list|,
name|LOCALIZATION_PUBLIC_KEY_PREFIX
argument_list|)
expr_stmt|;
name|state
operator|.
name|it
operator|=
operator|new
name|UserResourcesIterator
argument_list|()
expr_stmt|;
return|return
name|state
return|;
block|}
DECL|method|loadResourceTrackerState ( LeveldbIterator iter, String keyPrefix)
specifier|private
name|LocalResourceTrackerState
name|loadResourceTrackerState
parameter_list|(
name|LeveldbIterator
name|iter
parameter_list|,
name|String
name|keyPrefix
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|completedPrefix
init|=
name|keyPrefix
operator|+
name|LOCALIZATION_COMPLETED_SUFFIX
decl_stmt|;
specifier|final
name|String
name|startedPrefix
init|=
name|keyPrefix
operator|+
name|LOCALIZATION_STARTED_SUFFIX
decl_stmt|;
name|LocalResourceTrackerState
name|state
init|=
operator|new
name|LocalResourceTrackerState
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|peekNext
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|keyPrefix
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|completedPrefix
argument_list|)
condition|)
block|{
name|state
operator|.
name|localizedResources
operator|=
name|loadCompletedResources
argument_list|(
name|iter
argument_list|,
name|completedPrefix
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|startedPrefix
argument_list|)
condition|)
block|{
name|state
operator|.
name|inProgressResources
operator|=
name|loadStartedResources
argument_list|(
name|iter
argument_list|,
name|startedPrefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected key in resource tracker state: "
operator|+
name|key
argument_list|)
throw|;
block|}
block|}
return|return
name|state
return|;
block|}
DECL|method|loadCompletedResources ( LeveldbIterator iter, String keyPrefix)
specifier|private
name|List
argument_list|<
name|LocalizedResourceProto
argument_list|>
name|loadCompletedResources
parameter_list|(
name|LeveldbIterator
name|iter
parameter_list|,
name|String
name|keyPrefix
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|LocalizedResourceProto
argument_list|>
name|rsrcs
init|=
operator|new
name|ArrayList
argument_list|<
name|LocalizedResourceProto
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|peekNext
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|keyPrefix
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loading completed resource from "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
name|rsrcs
operator|.
name|add
argument_list|(
name|LocalizedResourceProto
operator|.
name|parseFrom
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
return|return
name|rsrcs
return|;
block|}
DECL|method|loadStartedResources ( LeveldbIterator iter, String keyPrefix)
specifier|private
name|Map
argument_list|<
name|LocalResourceProto
argument_list|,
name|Path
argument_list|>
name|loadStartedResources
parameter_list|(
name|LeveldbIterator
name|iter
parameter_list|,
name|String
name|keyPrefix
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|LocalResourceProto
argument_list|,
name|Path
argument_list|>
name|rsrcs
init|=
operator|new
name|HashMap
argument_list|<
name|LocalResourceProto
argument_list|,
name|Path
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|peekNext
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|keyPrefix
argument_list|)
condition|)
block|{
break|break;
block|}
name|Path
name|localPath
init|=
operator|new
name|Path
argument_list|(
name|key
operator|.
name|substring
argument_list|(
name|keyPrefix
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loading in-progress resource at "
operator|+
name|localPath
argument_list|)
expr_stmt|;
block|}
name|rsrcs
operator|.
name|put
argument_list|(
name|LocalResourceProto
operator|.
name|parseFrom
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|localPath
argument_list|)
expr_stmt|;
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
return|return
name|rsrcs
return|;
block|}
DECL|method|loadUserLocalizedResources ( LeveldbIterator iter, String keyPrefix)
specifier|private
name|RecoveredUserResources
name|loadUserLocalizedResources
parameter_list|(
name|LeveldbIterator
name|iter
parameter_list|,
name|String
name|keyPrefix
parameter_list|)
throws|throws
name|IOException
block|{
name|RecoveredUserResources
name|userResources
init|=
operator|new
name|RecoveredUserResources
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|peekNext
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|keyPrefix
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|LOCALIZATION_FILECACHE_SUFFIX
argument_list|,
name|keyPrefix
operator|.
name|length
argument_list|()
argument_list|)
condition|)
block|{
name|userResources
operator|.
name|privateTrackerState
operator|=
name|loadResourceTrackerState
argument_list|(
name|iter
argument_list|,
name|keyPrefix
operator|+
name|LOCALIZATION_FILECACHE_SUFFIX
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|LOCALIZATION_APPCACHE_SUFFIX
argument_list|,
name|keyPrefix
operator|.
name|length
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|appIdStartPos
init|=
name|keyPrefix
operator|.
name|length
argument_list|()
operator|+
name|LOCALIZATION_APPCACHE_SUFFIX
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|appIdEndPos
init|=
name|key
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|,
name|appIdStartPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|appIdEndPos
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to determine appID in resource key: "
operator|+
name|key
argument_list|)
throw|;
block|}
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|key
operator|.
name|substring
argument_list|(
name|appIdStartPos
argument_list|,
name|appIdEndPos
argument_list|)
argument_list|)
decl_stmt|;
name|userResources
operator|.
name|appTrackerStates
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|loadResourceTrackerState
argument_list|(
name|iter
argument_list|,
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|appIdEndPos
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected user resource key "
operator|+
name|key
argument_list|)
throw|;
block|}
block|}
return|return
name|userResources
return|;
block|}
annotation|@
name|Override
DECL|method|startResourceLocalization (String user, ApplicationId appId, LocalResourceProto proto, Path localPath)
specifier|public
name|void
name|startResourceLocalization
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|LocalResourceProto
name|proto
parameter_list|,
name|Path
name|localPath
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|getResourceStartedKey
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|localPath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|proto
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|finishResourceLocalization (String user, ApplicationId appId, LocalizedResourceProto proto)
specifier|public
name|void
name|finishResourceLocalization
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|LocalizedResourceProto
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|localPath
init|=
name|proto
operator|.
name|getLocalPath
argument_list|()
decl_stmt|;
name|String
name|startedKey
init|=
name|getResourceStartedKey
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|localPath
argument_list|)
decl_stmt|;
name|String
name|completedKey
init|=
name|getResourceCompletedKey
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|localPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing localized resource to "
operator|+
name|completedKey
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|WriteBatch
name|batch
init|=
name|db
operator|.
name|createWriteBatch
argument_list|()
decl_stmt|;
try|try
block|{
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|startedKey
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|completedKey
argument_list|)
argument_list|,
name|proto
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|write
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|batch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeLocalizedResource (String user, ApplicationId appId, Path localPath)
specifier|public
name|void
name|removeLocalizedResource
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|Path
name|localPath
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|localPathStr
init|=
name|localPath
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|startedKey
init|=
name|getResourceStartedKey
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|localPathStr
argument_list|)
decl_stmt|;
name|String
name|completedKey
init|=
name|getResourceCompletedKey
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|localPathStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing local resource at "
operator|+
name|localPathStr
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|WriteBatch
name|batch
init|=
name|db
operator|.
name|createWriteBatch
argument_list|()
decl_stmt|;
try|try
block|{
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|startedKey
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|completedKey
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|write
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|batch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getResourceStartedKey (String user, ApplicationId appId, String localPath)
specifier|private
name|String
name|getResourceStartedKey
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|String
name|localPath
parameter_list|)
block|{
return|return
name|getResourceTrackerKeyPrefix
argument_list|(
name|user
argument_list|,
name|appId
argument_list|)
operator|+
name|LOCALIZATION_STARTED_SUFFIX
operator|+
name|localPath
return|;
block|}
DECL|method|getResourceCompletedKey (String user, ApplicationId appId, String localPath)
specifier|private
name|String
name|getResourceCompletedKey
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|String
name|localPath
parameter_list|)
block|{
return|return
name|getResourceTrackerKeyPrefix
argument_list|(
name|user
argument_list|,
name|appId
argument_list|)
operator|+
name|LOCALIZATION_COMPLETED_SUFFIX
operator|+
name|localPath
return|;
block|}
DECL|method|getResourceTrackerKeyPrefix (String user, ApplicationId appId)
specifier|private
name|String
name|getResourceTrackerKeyPrefix
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
return|return
name|LOCALIZATION_PUBLIC_KEY_PREFIX
return|;
block|}
if|if
condition|(
name|appId
operator|==
literal|null
condition|)
block|{
return|return
name|LOCALIZATION_PRIVATE_KEY_PREFIX
operator|+
name|user
operator|+
literal|"/"
operator|+
name|LOCALIZATION_FILECACHE_SUFFIX
return|;
block|}
return|return
name|LOCALIZATION_PRIVATE_KEY_PREFIX
operator|+
name|user
operator|+
literal|"/"
operator|+
name|LOCALIZATION_APPCACHE_SUFFIX
operator|+
name|appId
operator|+
literal|"/"
return|;
block|}
comment|// Deletion State Recovery Iterator.
DECL|class|DeletionStateIterator
specifier|private
class|class
name|DeletionStateIterator
extends|extends
name|BaseRecoveryIterator
argument_list|<
name|DeletionServiceDeleteTaskProto
argument_list|>
block|{
DECL|method|DeletionStateIterator ()
name|DeletionStateIterator
parameter_list|()
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|DELETION_TASK_KEY_PREFIX
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNextItem (LeveldbIterator it)
specifier|protected
name|DeletionServiceDeleteTaskProto
name|getNextItem
parameter_list|(
name|LeveldbIterator
name|it
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getNextRecoveredDeletionService
argument_list|(
name|it
argument_list|)
return|;
block|}
block|}
DECL|method|getNextRecoveredDeletionService ( LeveldbIterator it)
specifier|private
name|DeletionServiceDeleteTaskProto
name|getNextRecoveredDeletionService
parameter_list|(
name|LeveldbIterator
name|it
parameter_list|)
throws|throws
name|IOException
block|{
name|DeletionServiceDeleteTaskProto
name|deleteProto
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|DELETION_TASK_KEY_PREFIX
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|deleteProto
operator|=
name|DeletionServiceDeleteTaskProto
operator|.
name|parseFrom
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|deleteProto
return|;
block|}
annotation|@
name|Override
DECL|method|loadDeletionServiceState ()
specifier|public
name|RecoveredDeletionServiceState
name|loadDeletionServiceState
parameter_list|()
throws|throws
name|IOException
block|{
name|RecoveredDeletionServiceState
name|state
init|=
operator|new
name|RecoveredDeletionServiceState
argument_list|()
decl_stmt|;
name|state
operator|.
name|it
operator|=
operator|new
name|DeletionStateIterator
argument_list|()
expr_stmt|;
return|return
name|state
return|;
block|}
annotation|@
name|Override
DECL|method|storeDeletionTask (int taskId, DeletionServiceDeleteTaskProto taskProto)
specifier|public
name|void
name|storeDeletionTask
parameter_list|(
name|int
name|taskId
parameter_list|,
name|DeletionServiceDeleteTaskProto
name|taskProto
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|DELETION_TASK_KEY_PREFIX
operator|+
name|taskId
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|taskProto
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeDeletionTask (int taskId)
specifier|public
name|void
name|removeDeletionTask
parameter_list|(
name|int
name|taskId
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|DELETION_TASK_KEY_PREFIX
operator|+
name|taskId
decl_stmt|;
try|try
block|{
name|db
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getMasterKey (String dbKey)
specifier|private
name|MasterKey
name|getMasterKey
parameter_list|(
name|String
name|dbKey
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|byte
index|[]
name|data
init|=
name|db
operator|.
name|get
argument_list|(
name|bytes
argument_list|(
name|dbKey
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|data
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|parseMasterKey
argument_list|(
name|data
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// Recover NMTokens Iterator
DECL|class|NMTokensStateIterator
specifier|private
class|class
name|NMTokensStateIterator
extends|extends
name|BaseRecoveryIterator
argument_list|<
name|Entry
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|MasterKey
argument_list|>
argument_list|>
block|{
DECL|method|NMTokensStateIterator ()
name|NMTokensStateIterator
parameter_list|()
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|NM_TOKENS_KEY_PREFIX
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNextItem ( LeveldbIterator it)
specifier|protected
name|Entry
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|MasterKey
argument_list|>
name|getNextItem
parameter_list|(
name|LeveldbIterator
name|it
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getNextMasterKeyEntry
argument_list|(
name|it
argument_list|)
return|;
block|}
block|}
DECL|method|getNextMasterKeyEntry ( LeveldbIterator it)
specifier|private
name|Entry
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|MasterKey
argument_list|>
name|getNextMasterKeyEntry
parameter_list|(
name|LeveldbIterator
name|it
parameter_list|)
throws|throws
name|IOException
block|{
name|Entry
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|MasterKey
argument_list|>
name|masterKeyentry
init|=
literal|null
decl_stmt|;
try|try
block|{
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|fullKey
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fullKey
operator|.
name|startsWith
argument_list|(
name|NM_TOKENS_KEY_PREFIX
argument_list|)
condition|)
block|{
break|break;
block|}
name|String
name|key
init|=
name|fullKey
operator|.
name|substring
argument_list|(
name|NM_TOKENS_KEY_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|ApplicationAttemptId
operator|.
name|appAttemptIdStrPrefix
argument_list|)
condition|)
block|{
name|ApplicationAttemptId
name|attempt
decl_stmt|;
try|try
block|{
name|attempt
operator|=
name|ApplicationAttemptId
operator|.
name|fromString
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Bad application master key state for "
operator|+
name|fullKey
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|masterKeyentry
operator|=
operator|new
name|AbstractMap
operator|.
name|SimpleEntry
argument_list|<>
argument_list|(
name|attempt
argument_list|,
name|parseMasterKey
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|masterKeyentry
return|;
block|}
annotation|@
name|Override
DECL|method|loadNMTokensState ()
specifier|public
name|RecoveredNMTokensState
name|loadNMTokensState
parameter_list|()
throws|throws
name|IOException
block|{
name|RecoveredNMTokensState
name|state
init|=
operator|new
name|RecoveredNMTokensState
argument_list|()
decl_stmt|;
name|state
operator|.
name|currentMasterKey
operator|=
name|getMasterKey
argument_list|(
name|NM_TOKENS_KEY_PREFIX
operator|+
name|CURRENT_MASTER_KEY_SUFFIX
argument_list|)
expr_stmt|;
name|state
operator|.
name|previousMasterKey
operator|=
name|getMasterKey
argument_list|(
name|NM_TOKENS_KEY_PREFIX
operator|+
name|PREV_MASTER_KEY_SUFFIX
argument_list|)
expr_stmt|;
name|state
operator|.
name|it
operator|=
operator|new
name|NMTokensStateIterator
argument_list|()
expr_stmt|;
return|return
name|state
return|;
block|}
annotation|@
name|Override
DECL|method|storeNMTokenCurrentMasterKey (MasterKey key)
specifier|public
name|void
name|storeNMTokenCurrentMasterKey
parameter_list|(
name|MasterKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|storeMasterKey
argument_list|(
name|NM_TOKENS_CURRENT_MASTER_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeNMTokenPreviousMasterKey (MasterKey key)
specifier|public
name|void
name|storeNMTokenPreviousMasterKey
parameter_list|(
name|MasterKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|storeMasterKey
argument_list|(
name|NM_TOKENS_PREV_MASTER_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeNMTokenApplicationMasterKey ( ApplicationAttemptId attempt, MasterKey key)
specifier|public
name|void
name|storeNMTokenApplicationMasterKey
parameter_list|(
name|ApplicationAttemptId
name|attempt
parameter_list|,
name|MasterKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|storeMasterKey
argument_list|(
name|NM_TOKENS_KEY_PREFIX
operator|+
name|attempt
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeNMTokenApplicationMasterKey ( ApplicationAttemptId attempt)
specifier|public
name|void
name|removeNMTokenApplicationMasterKey
parameter_list|(
name|ApplicationAttemptId
name|attempt
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|NM_TOKENS_KEY_PREFIX
operator|+
name|attempt
decl_stmt|;
try|try
block|{
name|db
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|parseMasterKey (byte[] keyData)
specifier|private
name|MasterKey
name|parseMasterKey
parameter_list|(
name|byte
index|[]
name|keyData
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MasterKeyPBImpl
argument_list|(
name|MasterKeyProto
operator|.
name|parseFrom
argument_list|(
name|keyData
argument_list|)
argument_list|)
return|;
block|}
DECL|method|storeMasterKey (String dbKey, MasterKey key)
specifier|private
name|void
name|storeMasterKey
parameter_list|(
name|String
name|dbKey
parameter_list|,
name|MasterKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|MasterKeyPBImpl
name|pb
init|=
operator|(
name|MasterKeyPBImpl
operator|)
name|key
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|dbKey
argument_list|)
argument_list|,
name|pb
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// Recover ContainersToken Iterator.
DECL|class|ContainerTokensStateIterator
specifier|private
class|class
name|ContainerTokensStateIterator
extends|extends
name|BaseRecoveryIterator
argument_list|<
name|Entry
argument_list|<
name|ContainerId
argument_list|,
name|Long
argument_list|>
argument_list|>
block|{
DECL|method|ContainerTokensStateIterator ()
name|ContainerTokensStateIterator
parameter_list|()
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|CONTAINER_TOKENS_KEY_PREFIX
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNextItem (LeveldbIterator it)
specifier|protected
name|Entry
argument_list|<
name|ContainerId
argument_list|,
name|Long
argument_list|>
name|getNextItem
parameter_list|(
name|LeveldbIterator
name|it
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getNextContainerToken
argument_list|(
name|it
argument_list|)
return|;
block|}
block|}
DECL|method|getNextContainerToken (LeveldbIterator it)
specifier|private
name|Entry
argument_list|<
name|ContainerId
argument_list|,
name|Long
argument_list|>
name|getNextContainerToken
parameter_list|(
name|LeveldbIterator
name|it
parameter_list|)
throws|throws
name|IOException
block|{
name|Entry
argument_list|<
name|ContainerId
argument_list|,
name|Long
argument_list|>
name|containerTokenEntry
init|=
literal|null
decl_stmt|;
try|try
block|{
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|fullKey
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fullKey
operator|.
name|startsWith
argument_list|(
name|CONTAINER_TOKENS_KEY_PREFIX
argument_list|)
condition|)
block|{
break|break;
block|}
name|String
name|key
init|=
name|fullKey
operator|.
name|substring
argument_list|(
name|CONTAINER_TOKENS_KEY_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|ConverterUtils
operator|.
name|CONTAINER_PREFIX
argument_list|)
condition|)
block|{
name|containerTokenEntry
operator|=
name|loadContainerToken
argument_list|(
name|fullKey
argument_list|,
name|key
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|containerTokenEntry
return|;
block|}
DECL|method|loadContainerToken (String key, String containerIdStr, byte[] value)
specifier|private
specifier|static
name|Entry
argument_list|<
name|ContainerId
argument_list|,
name|Long
argument_list|>
name|loadContainerToken
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|containerIdStr
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|ContainerId
name|containerId
decl_stmt|;
name|Long
name|expTime
decl_stmt|;
try|try
block|{
name|containerId
operator|=
name|ContainerId
operator|.
name|fromString
argument_list|(
name|containerIdStr
argument_list|)
expr_stmt|;
name|expTime
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|asString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Bad container token state for "
operator|+
name|key
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|AbstractMap
operator|.
name|SimpleEntry
argument_list|<>
argument_list|(
name|containerId
argument_list|,
name|expTime
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|loadContainerTokensState ()
specifier|public
name|RecoveredContainerTokensState
name|loadContainerTokensState
parameter_list|()
throws|throws
name|IOException
block|{
name|RecoveredContainerTokensState
name|state
init|=
operator|new
name|RecoveredContainerTokensState
argument_list|()
decl_stmt|;
name|state
operator|.
name|currentMasterKey
operator|=
name|getMasterKey
argument_list|(
name|CONTAINER_TOKENS_KEY_PREFIX
operator|+
name|CURRENT_MASTER_KEY_SUFFIX
argument_list|)
expr_stmt|;
name|state
operator|.
name|previousMasterKey
operator|=
name|getMasterKey
argument_list|(
name|CONTAINER_TOKENS_KEY_PREFIX
operator|+
name|PREV_MASTER_KEY_SUFFIX
argument_list|)
expr_stmt|;
name|state
operator|.
name|it
operator|=
operator|new
name|ContainerTokensStateIterator
argument_list|()
expr_stmt|;
return|return
name|state
return|;
block|}
annotation|@
name|Override
DECL|method|storeContainerTokenCurrentMasterKey (MasterKey key)
specifier|public
name|void
name|storeContainerTokenCurrentMasterKey
parameter_list|(
name|MasterKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|storeMasterKey
argument_list|(
name|CONTAINER_TOKEN_SECRETMANAGER_CURRENT_MASTER_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeContainerTokenPreviousMasterKey (MasterKey key)
specifier|public
name|void
name|storeContainerTokenPreviousMasterKey
parameter_list|(
name|MasterKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|storeMasterKey
argument_list|(
name|CONTAINER_TOKEN_SECRETMANAGER_PREV_MASTER_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeContainerToken (ContainerId containerId, Long expTime)
specifier|public
name|void
name|storeContainerToken
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Long
name|expTime
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|CONTAINER_TOKENS_KEY_PREFIX
operator|+
name|containerId
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|bytes
argument_list|(
name|expTime
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeContainerToken (ContainerId containerId)
specifier|public
name|void
name|removeContainerToken
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|CONTAINER_TOKENS_KEY_PREFIX
operator|+
name|containerId
decl_stmt|;
try|try
block|{
name|db
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|loadLogDeleterState ()
specifier|public
name|RecoveredLogDeleterState
name|loadLogDeleterState
parameter_list|()
throws|throws
name|IOException
block|{
name|RecoveredLogDeleterState
name|state
init|=
operator|new
name|RecoveredLogDeleterState
argument_list|()
decl_stmt|;
name|state
operator|.
name|logDeleterMap
operator|=
operator|new
name|HashMap
argument_list|<
name|ApplicationId
argument_list|,
name|LogDeleterProto
argument_list|>
argument_list|()
expr_stmt|;
name|LeveldbIterator
name|iter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|iter
operator|=
operator|new
name|LeveldbIterator
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|iter
operator|.
name|seek
argument_list|(
name|bytes
argument_list|(
name|LOG_DELETER_KEY_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|logDeleterKeyPrefixLength
init|=
name|LOG_DELETER_KEY_PREFIX
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|fullKey
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fullKey
operator|.
name|startsWith
argument_list|(
name|LOG_DELETER_KEY_PREFIX
argument_list|)
condition|)
block|{
break|break;
block|}
name|String
name|appIdStr
init|=
name|fullKey
operator|.
name|substring
argument_list|(
name|logDeleterKeyPrefixLength
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|appId
operator|=
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|appIdStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skipping unknown log deleter key "
operator|+
name|fullKey
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LogDeleterProto
name|proto
init|=
name|LogDeleterProto
operator|.
name|parseFrom
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|state
operator|.
name|logDeleterMap
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|proto
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|iter
operator|!=
literal|null
condition|)
block|{
name|iter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|state
return|;
block|}
annotation|@
name|Override
DECL|method|storeLogDeleter (ApplicationId appId, LogDeleterProto proto)
specifier|public
name|void
name|storeLogDeleter
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|LogDeleterProto
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|getLogDeleterKey
argument_list|(
name|appId
argument_list|)
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|proto
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeLogDeleter (ApplicationId appId)
specifier|public
name|void
name|removeLogDeleter
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|getLogDeleterKey
argument_list|(
name|appId
argument_list|)
decl_stmt|;
try|try
block|{
name|db
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeAssignedResources (Container container, String resourceType, List<Serializable> assignedResources)
specifier|public
name|void
name|storeAssignedResources
parameter_list|(
name|Container
name|container
parameter_list|,
name|String
name|resourceType
parameter_list|,
name|List
argument_list|<
name|Serializable
argument_list|>
name|assignedResources
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"storeAssignedResources: containerId="
operator|+
name|container
operator|.
name|getContainerId
argument_list|()
operator|+
literal|", assignedResources="
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|assignedResources
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|keyResChng
init|=
name|CONTAINERS_KEY_PREFIX
operator|+
name|container
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX
operator|+
name|resourceType
decl_stmt|;
try|try
block|{
name|WriteBatch
name|batch
init|=
name|db
operator|.
name|createWriteBatch
argument_list|()
decl_stmt|;
try|try
block|{
name|ResourceMappings
operator|.
name|AssignedResources
name|res
init|=
operator|new
name|ResourceMappings
operator|.
name|AssignedResources
argument_list|()
decl_stmt|;
name|res
operator|.
name|updateAssignedResources
argument_list|(
name|assignedResources
argument_list|)
expr_stmt|;
comment|// New value will overwrite old values for the same key
name|batch
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|keyResChng
argument_list|)
argument_list|,
name|res
operator|.
name|toBytes
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|write
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|batch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// update container resource mapping.
name|updateContainerResourceMapping
argument_list|(
name|container
argument_list|,
name|resourceType
argument_list|,
name|assignedResources
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|cleanupDeprecatedFinishedApps ()
specifier|private
name|void
name|cleanupDeprecatedFinishedApps
parameter_list|()
block|{
try|try
block|{
name|cleanupKeysWithPrefix
argument_list|(
name|FINISHED_APPS_KEY_PREFIX
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"cleanup keys with prefix "
operator|+
name|FINISHED_APPS_KEY_PREFIX
operator|+
literal|" from leveldb failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|cleanupKeysWithPrefix (String prefix)
specifier|private
name|void
name|cleanupKeysWithPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
name|WriteBatch
name|batch
init|=
literal|null
decl_stmt|;
name|LeveldbIterator
name|iter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|iter
operator|=
operator|new
name|LeveldbIterator
argument_list|(
name|db
argument_list|)
expr_stmt|;
try|try
block|{
name|batch
operator|=
name|db
operator|.
name|createWriteBatch
argument_list|()
expr_stmt|;
name|iter
operator|.
name|seek
argument_list|(
name|bytes
argument_list|(
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|byte
index|[]
name|key
init|=
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|keyStr
init|=
name|asString
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|keyStr
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
break|break;
block|}
name|batch
operator|.
name|delete
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"cleanup "
operator|+
name|keyStr
operator|+
literal|" from leveldb"
argument_list|)
expr_stmt|;
block|}
block|}
name|db
operator|.
name|write
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|batch
operator|!=
literal|null
condition|)
block|{
name|batch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|iter
operator|!=
literal|null
condition|)
block|{
name|iter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|getLogDeleterKey (ApplicationId appId)
specifier|private
name|String
name|getLogDeleterKey
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
return|return
name|LOG_DELETER_KEY_PREFIX
operator|+
name|appId
return|;
block|}
annotation|@
name|Override
DECL|method|loadAMRMProxyState ()
specifier|public
name|RecoveredAMRMProxyState
name|loadAMRMProxyState
parameter_list|()
throws|throws
name|IOException
block|{
name|RecoveredAMRMProxyState
name|result
init|=
operator|new
name|RecoveredAMRMProxyState
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|unknownKeys
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|LeveldbIterator
name|iter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|iter
operator|=
operator|new
name|LeveldbIterator
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|iter
operator|.
name|seek
argument_list|(
name|bytes
argument_list|(
name|AMRMPROXY_KEY_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|peekNext
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|AMRMPROXY_KEY_PREFIX
argument_list|)
condition|)
block|{
break|break;
block|}
name|String
name|suffix
init|=
name|key
operator|.
name|substring
argument_list|(
name|AMRMPROXY_KEY_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|suffix
operator|.
name|equals
argument_list|(
name|CURRENT_MASTER_KEY_SUFFIX
argument_list|)
condition|)
block|{
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|result
operator|.
name|setCurrentMasterKey
argument_list|(
name|parseMasterKey
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovered for AMRMProxy: current master key id "
operator|+
name|result
operator|.
name|getCurrentMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|suffix
operator|.
name|equals
argument_list|(
name|NEXT_MASTER_KEY_SUFFIX
argument_list|)
condition|)
block|{
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|result
operator|.
name|setNextMasterKey
argument_list|(
name|parseMasterKey
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovered for AMRMProxy: next master key id "
operator|+
name|result
operator|.
name|getNextMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Load AMRMProxy application context map for an app attempt
comment|// Parse appAttemptId, also handle the unknown keys
name|int
name|idEndPos
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
decl_stmt|;
try|try
block|{
name|idEndPos
operator|=
name|key
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|,
name|AMRMPROXY_KEY_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|idEndPos
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to determine attemptId in key: "
operator|+
name|key
argument_list|)
throw|;
block|}
name|attemptId
operator|=
name|ApplicationAttemptId
operator|.
name|fromString
argument_list|(
name|key
operator|.
name|substring
argument_list|(
name|AMRMPROXY_KEY_PREFIX
operator|.
name|length
argument_list|()
argument_list|,
name|idEndPos
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Try to move on for back-forward compatibility
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unknown key "
operator|+
name|key
operator|+
literal|", remove and move on"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// Do this because iter.remove() is not supported here
name|unknownKeys
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// Parse the context map for the appAttemptId
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|appContext
init|=
name|loadAMRMProxyAppContextMap
argument_list|(
name|iter
argument_list|,
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idEndPos
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|getAppContexts
argument_list|()
operator|.
name|put
argument_list|(
name|attemptId
argument_list|,
name|appContext
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovered for AMRMProxy: "
operator|+
name|attemptId
operator|+
literal|", map size "
operator|+
name|appContext
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|iter
operator|!=
literal|null
condition|)
block|{
name|iter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Delete all unknown keys
try|try
block|{
for|for
control|(
name|String
name|key
range|:
name|unknownKeys
control|)
block|{
name|db
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
DECL|method|loadAMRMProxyAppContextMap (LeveldbIterator iter, String keyPrefix)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|loadAMRMProxyAppContextMap
parameter_list|(
name|LeveldbIterator
name|iter
parameter_list|,
name|String
name|keyPrefix
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|appContextMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|peekNext
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|keyPrefix
argument_list|)
condition|)
block|{
break|break;
block|}
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|String
name|suffix
init|=
name|key
operator|.
name|substring
argument_list|(
name|keyPrefix
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|appContextMap
operator|.
name|put
argument_list|(
name|suffix
argument_list|,
name|Arrays
operator|.
name|copyOf
argument_list|(
name|data
argument_list|,
name|data
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|appContextMap
return|;
block|}
annotation|@
name|Override
DECL|method|storeAMRMProxyCurrentMasterKey (MasterKey key)
specifier|public
name|void
name|storeAMRMProxyCurrentMasterKey
parameter_list|(
name|MasterKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|storeMasterKey
argument_list|(
name|AMRMPROXY_KEY_PREFIX
operator|+
name|CURRENT_MASTER_KEY_SUFFIX
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeAMRMProxyNextMasterKey (MasterKey key)
specifier|public
name|void
name|storeAMRMProxyNextMasterKey
parameter_list|(
name|MasterKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|dbkey
init|=
name|AMRMPROXY_KEY_PREFIX
operator|+
name|NEXT_MASTER_KEY_SUFFIX
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
comment|// When key is null, delete the entry instead
try|try
block|{
name|db
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|dbkey
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return;
block|}
name|storeMasterKey
argument_list|(
name|dbkey
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeAMRMProxyAppContextEntry (ApplicationAttemptId attempt, String key, byte[] data)
specifier|public
name|void
name|storeAMRMProxyAppContextEntry
parameter_list|(
name|ApplicationAttemptId
name|attempt
parameter_list|,
name|String
name|key
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fullkey
init|=
name|AMRMPROXY_KEY_PREFIX
operator|+
name|attempt
operator|+
literal|"/"
operator|+
name|key
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|fullkey
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeAMRMProxyAppContextEntry (ApplicationAttemptId attempt, String key)
specifier|public
name|void
name|removeAMRMProxyAppContextEntry
parameter_list|(
name|ApplicationAttemptId
name|attempt
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fullkey
init|=
name|AMRMPROXY_KEY_PREFIX
operator|+
name|attempt
operator|+
literal|"/"
operator|+
name|key
decl_stmt|;
try|try
block|{
name|db
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|fullkey
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeAMRMProxyAppContext (ApplicationAttemptId attempt)
specifier|public
name|void
name|removeAMRMProxyAppContext
parameter_list|(
name|ApplicationAttemptId
name|attempt
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|candidates
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|keyPrefix
init|=
name|AMRMPROXY_KEY_PREFIX
operator|+
name|attempt
operator|+
literal|"/"
decl_stmt|;
name|LeveldbIterator
name|iter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|iter
operator|=
operator|new
name|LeveldbIterator
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|iter
operator|.
name|seek
argument_list|(
name|bytes
argument_list|(
name|keyPrefix
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|keyPrefix
argument_list|)
condition|)
block|{
break|break;
block|}
comment|// Do this because iter.remove() is not supported here
name|candidates
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|iter
operator|!=
literal|null
condition|)
block|{
name|iter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Delete all candidate keys
try|try
block|{
for|for
control|(
name|String
name|key
range|:
name|candidates
control|)
block|{
name|db
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|markStoreUnHealthy
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|initStorage (Configuration conf)
specifier|protected
name|void
name|initStorage
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|db
operator|=
name|openDatabase
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|checkVersion
argument_list|()
expr_stmt|;
name|startCompactionTimer
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|openDatabase (Configuration conf)
specifier|protected
name|DB
name|openDatabase
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|storeRoot
init|=
name|createStorageDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|createIfMissing
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using state database at "
operator|+
name|storeRoot
operator|+
literal|" for recovery"
argument_list|)
expr_stmt|;
name|File
name|dbfile
init|=
operator|new
name|File
argument_list|(
name|storeRoot
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|db
operator|=
name|JniDBFactory
operator|.
name|factory
operator|.
name|open
argument_list|(
name|dbfile
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NativeDB
operator|.
name|DBException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isNotFound
argument_list|()
operator|||
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|" does not exist "
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating state database at "
operator|+
name|dbfile
argument_list|)
expr_stmt|;
name|isNewlyCreated
operator|=
literal|true
expr_stmt|;
name|options
operator|.
name|createIfMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|db
operator|=
name|JniDBFactory
operator|.
name|factory
operator|.
name|open
argument_list|(
name|dbfile
argument_list|,
name|options
argument_list|)
expr_stmt|;
comment|// store version
name|storeVersion
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|dbErr
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|dbErr
operator|.
name|getMessage
argument_list|()
argument_list|,
name|dbErr
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
return|return
name|db
return|;
block|}
DECL|method|createStorageDir (Configuration conf)
specifier|private
name|Path
name|createStorageDir
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|storeUri
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|storeUri
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No store location directory configured in "
operator|+
name|YarnConfiguration
operator|.
name|NM_RECOVERY_DIR
argument_list|)
throw|;
block|}
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
name|storeUri
argument_list|,
name|DB_NAME
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|root
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|root
return|;
block|}
DECL|method|startCompactionTimer (Configuration conf)
specifier|private
name|void
name|startCompactionTimer
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|long
name|intervalMsec
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_COMPACTION_INTERVAL_SECS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_RECOVERY_COMPACTION_INTERVAL_SECS
argument_list|)
operator|*
literal|1000
decl_stmt|;
if|if
condition|(
name|intervalMsec
operator|>
literal|0
condition|)
block|{
name|compactionTimer
operator|=
operator|new
name|Timer
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" compaction timer"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|compactionTimer
operator|.
name|schedule
argument_list|(
operator|new
name|CompactionTimerTask
argument_list|()
argument_list|,
name|intervalMsec
argument_list|,
name|intervalMsec
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CompactionTimerTask
specifier|private
class|class
name|CompactionTimerTask
extends|extends
name|TimerTask
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|long
name|start
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting full compaction cycle"
argument_list|)
expr_stmt|;
try|try
block|{
name|db
operator|.
name|compactRange
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error compacting database"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|long
name|duration
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|start
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Full compaction cycle completed in "
operator|+
name|duration
operator|+
literal|" msec"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|loadVersion ()
name|Version
name|loadVersion
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
name|db
operator|.
name|get
argument_list|(
name|bytes
argument_list|(
name|DB_SCHEMA_VERSION_KEY
argument_list|)
argument_list|)
decl_stmt|;
comment|// if version is not stored previously, treat it as CURRENT_VERSION_INFO.
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|data
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|getCurrentVersion
argument_list|()
return|;
block|}
name|Version
name|version
init|=
operator|new
name|VersionPBImpl
argument_list|(
name|VersionProto
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|version
return|;
block|}
DECL|method|storeVersion ()
specifier|private
name|void
name|storeVersion
parameter_list|()
throws|throws
name|IOException
block|{
name|dbStoreVersion
argument_list|(
name|CURRENT_VERSION_INFO
argument_list|)
expr_stmt|;
block|}
comment|// Only used for test
annotation|@
name|VisibleForTesting
DECL|method|storeVersion (Version state)
name|void
name|storeVersion
parameter_list|(
name|Version
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|dbStoreVersion
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
DECL|method|dbStoreVersion (Version state)
specifier|private
name|void
name|dbStoreVersion
parameter_list|(
name|Version
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|DB_SCHEMA_VERSION_KEY
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|(
operator|(
name|VersionPBImpl
operator|)
name|state
operator|)
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getCurrentVersion ()
name|Version
name|getCurrentVersion
parameter_list|()
block|{
return|return
name|CURRENT_VERSION_INFO
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getDB ()
name|DB
name|getDB
parameter_list|()
block|{
return|return
name|db
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setDB (DB testDb)
name|void
name|setDB
parameter_list|(
name|DB
name|testDb
parameter_list|)
block|{
name|this
operator|.
name|db
operator|=
name|testDb
expr_stmt|;
block|}
comment|/**    * 1) Versioning scheme: major.minor. For e.g. 1.0, 1.1, 1.2...1.25, 2.0 etc.    * 2) Any incompatible change of state-store is a major upgrade, and any    *    compatible change of state-store is a minor upgrade.    * 3) Within a minor upgrade, say 1.1 to 1.2:    *    overwrite the version info and proceed as normal.    * 4) Within a major upgrade, say 1.2 to 2.0:    *    throw exception and indicate user to use a separate upgrade tool to    *    upgrade NM state or remove incompatible old state.    */
DECL|method|checkVersion ()
specifier|protected
name|void
name|checkVersion
parameter_list|()
throws|throws
name|IOException
block|{
name|Version
name|loadedVersion
init|=
name|loadVersion
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Loaded NM state version info "
operator|+
name|loadedVersion
argument_list|)
expr_stmt|;
if|if
condition|(
name|loadedVersion
operator|.
name|equals
argument_list|(
name|getCurrentVersion
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|loadedVersion
operator|.
name|isCompatibleTo
argument_list|(
name|getCurrentVersion
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Storing NM state version info "
operator|+
name|getCurrentVersion
argument_list|()
argument_list|)
expr_stmt|;
name|storeVersion
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Incompatible version for NM state: expecting NM state version "
operator|+
name|getCurrentVersion
argument_list|()
operator|+
literal|", but loading version "
operator|+
name|loadedVersion
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

