begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.recovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|fusesource
operator|.
name|leveldbjni
operator|.
name|JniDBFactory
operator|.
name|asString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|fusesource
operator|.
name|leveldbjni
operator|.
name|JniDBFactory
operator|.
name|bytes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|StartContainerRequestPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ResourcePBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|ResourceProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|LocalResourceProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerCommonProtos
operator|.
name|MasterKeyProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerCommonProtos
operator|.
name|VersionProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|ContainerManagerApplicationProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|DeletionServiceDeleteTaskProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|LocalizedResourceProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|LogDeleterProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServiceProtos
operator|.
name|StartContainerRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|MasterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|MasterKeyPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|records
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|VersionPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|LeveldbIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|leveldbjni
operator|.
name|JniDBFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|leveldbjni
operator|.
name|internal
operator|.
name|NativeDB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|WriteBatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
DECL|class|NMLeveldbStateStoreService
specifier|public
class|class
name|NMLeveldbStateStoreService
extends|extends
name|NMStateStoreService
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NMLeveldbStateStoreService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DB_NAME
specifier|private
specifier|static
specifier|final
name|String
name|DB_NAME
init|=
literal|"yarn-nm-state"
decl_stmt|;
DECL|field|DB_SCHEMA_VERSION_KEY
specifier|private
specifier|static
specifier|final
name|String
name|DB_SCHEMA_VERSION_KEY
init|=
literal|"nm-schema-version"
decl_stmt|;
DECL|field|CURRENT_VERSION_INFO
specifier|private
specifier|static
specifier|final
name|Version
name|CURRENT_VERSION_INFO
init|=
name|Version
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|DELETION_TASK_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|DELETION_TASK_KEY_PREFIX
init|=
literal|"DeletionService/deltask_"
decl_stmt|;
DECL|field|APPLICATIONS_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|APPLICATIONS_KEY_PREFIX
init|=
literal|"ContainerManager/applications/"
decl_stmt|;
annotation|@
name|Deprecated
DECL|field|FINISHED_APPS_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|FINISHED_APPS_KEY_PREFIX
init|=
literal|"ContainerManager/finishedApps/"
decl_stmt|;
DECL|field|LOCALIZATION_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|LOCALIZATION_KEY_PREFIX
init|=
literal|"Localization/"
decl_stmt|;
DECL|field|LOCALIZATION_PUBLIC_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|LOCALIZATION_PUBLIC_KEY_PREFIX
init|=
name|LOCALIZATION_KEY_PREFIX
operator|+
literal|"public/"
decl_stmt|;
DECL|field|LOCALIZATION_PRIVATE_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|LOCALIZATION_PRIVATE_KEY_PREFIX
init|=
name|LOCALIZATION_KEY_PREFIX
operator|+
literal|"private/"
decl_stmt|;
DECL|field|LOCALIZATION_STARTED_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|LOCALIZATION_STARTED_SUFFIX
init|=
literal|"started/"
decl_stmt|;
DECL|field|LOCALIZATION_COMPLETED_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|LOCALIZATION_COMPLETED_SUFFIX
init|=
literal|"completed/"
decl_stmt|;
DECL|field|LOCALIZATION_FILECACHE_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|LOCALIZATION_FILECACHE_SUFFIX
init|=
literal|"filecache/"
decl_stmt|;
DECL|field|LOCALIZATION_APPCACHE_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|LOCALIZATION_APPCACHE_SUFFIX
init|=
literal|"appcache/"
decl_stmt|;
DECL|field|CONTAINERS_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINERS_KEY_PREFIX
init|=
literal|"ContainerManager/containers/"
decl_stmt|;
DECL|field|CONTAINER_REQUEST_KEY_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_REQUEST_KEY_SUFFIX
init|=
literal|"/request"
decl_stmt|;
DECL|field|CONTAINER_DIAGS_KEY_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_DIAGS_KEY_SUFFIX
init|=
literal|"/diagnostics"
decl_stmt|;
DECL|field|CONTAINER_LAUNCHED_KEY_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_LAUNCHED_KEY_SUFFIX
init|=
literal|"/launched"
decl_stmt|;
DECL|field|CONTAINER_RESOURCE_CHANGED_KEY_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_RESOURCE_CHANGED_KEY_SUFFIX
init|=
literal|"/resourceChanged"
decl_stmt|;
DECL|field|CONTAINER_KILLED_KEY_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_KILLED_KEY_SUFFIX
init|=
literal|"/killed"
decl_stmt|;
DECL|field|CONTAINER_EXIT_CODE_KEY_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_EXIT_CODE_KEY_SUFFIX
init|=
literal|"/exitcode"
decl_stmt|;
DECL|field|CURRENT_MASTER_KEY_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|CURRENT_MASTER_KEY_SUFFIX
init|=
literal|"CurrentMasterKey"
decl_stmt|;
DECL|field|PREV_MASTER_KEY_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|PREV_MASTER_KEY_SUFFIX
init|=
literal|"PreviousMasterKey"
decl_stmt|;
DECL|field|NM_TOKENS_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|NM_TOKENS_KEY_PREFIX
init|=
literal|"NMTokens/"
decl_stmt|;
DECL|field|NM_TOKENS_CURRENT_MASTER_KEY
specifier|private
specifier|static
specifier|final
name|String
name|NM_TOKENS_CURRENT_MASTER_KEY
init|=
name|NM_TOKENS_KEY_PREFIX
operator|+
name|CURRENT_MASTER_KEY_SUFFIX
decl_stmt|;
DECL|field|NM_TOKENS_PREV_MASTER_KEY
specifier|private
specifier|static
specifier|final
name|String
name|NM_TOKENS_PREV_MASTER_KEY
init|=
name|NM_TOKENS_KEY_PREFIX
operator|+
name|PREV_MASTER_KEY_SUFFIX
decl_stmt|;
DECL|field|CONTAINER_TOKENS_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_TOKENS_KEY_PREFIX
init|=
literal|"ContainerTokens/"
decl_stmt|;
DECL|field|CONTAINER_TOKENS_CURRENT_MASTER_KEY
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_TOKENS_CURRENT_MASTER_KEY
init|=
name|CONTAINER_TOKENS_KEY_PREFIX
operator|+
name|CURRENT_MASTER_KEY_SUFFIX
decl_stmt|;
DECL|field|CONTAINER_TOKENS_PREV_MASTER_KEY
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_TOKENS_PREV_MASTER_KEY
init|=
name|CONTAINER_TOKENS_KEY_PREFIX
operator|+
name|PREV_MASTER_KEY_SUFFIX
decl_stmt|;
DECL|field|LOG_DELETER_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|LOG_DELETER_KEY_PREFIX
init|=
literal|"LogDeleters/"
decl_stmt|;
DECL|field|EMPTY_VALUE
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_VALUE
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
DECL|field|db
specifier|private
name|DB
name|db
decl_stmt|;
DECL|field|isNewlyCreated
specifier|private
name|boolean
name|isNewlyCreated
decl_stmt|;
DECL|method|NMLeveldbStateStoreService ()
specifier|public
name|NMLeveldbStateStoreService
parameter_list|()
block|{
name|super
argument_list|(
name|NMLeveldbStateStoreService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startStorage ()
specifier|protected
name|void
name|startStorage
parameter_list|()
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
DECL|method|closeStorage ()
specifier|protected
name|void
name|closeStorage
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|isNewlyCreated ()
specifier|public
name|boolean
name|isNewlyCreated
parameter_list|()
block|{
return|return
name|isNewlyCreated
return|;
block|}
annotation|@
name|Override
DECL|method|loadContainersState ()
specifier|public
name|List
argument_list|<
name|RecoveredContainerState
argument_list|>
name|loadContainersState
parameter_list|()
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|RecoveredContainerState
argument_list|>
name|containers
init|=
operator|new
name|ArrayList
argument_list|<
name|RecoveredContainerState
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
name|containersToRemove
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
name|LeveldbIterator
name|iter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|iter
operator|=
operator|new
name|LeveldbIterator
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|iter
operator|.
name|seek
argument_list|(
name|bytes
argument_list|(
name|CONTAINERS_KEY_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|peekNext
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|CONTAINERS_KEY_PREFIX
argument_list|)
condition|)
block|{
break|break;
block|}
name|int
name|idEndPos
init|=
name|key
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|,
name|CONTAINERS_KEY_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|idEndPos
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to determine container in key: "
operator|+
name|key
argument_list|)
throw|;
block|}
name|ContainerId
name|containerId
init|=
name|ConverterUtils
operator|.
name|toContainerId
argument_list|(
name|key
operator|.
name|substring
argument_list|(
name|CONTAINERS_KEY_PREFIX
operator|.
name|length
argument_list|()
argument_list|,
name|idEndPos
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|keyPrefix
init|=
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idEndPos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|RecoveredContainerState
name|rcs
init|=
name|loadContainerState
argument_list|(
name|containerId
argument_list|,
name|iter
argument_list|,
name|keyPrefix
argument_list|)
decl_stmt|;
comment|// Don't load container without StartContainerRequest
if|if
condition|(
name|rcs
operator|.
name|startRequest
operator|!=
literal|null
condition|)
block|{
name|containers
operator|.
name|add
argument_list|(
name|rcs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|containersToRemove
operator|.
name|add
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|iter
operator|!=
literal|null
condition|)
block|{
name|iter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// remove container without StartContainerRequest
for|for
control|(
name|ContainerId
name|containerId
range|:
name|containersToRemove
control|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Remove container "
operator|+
name|containerId
operator|+
literal|" with incomplete records"
argument_list|)
expr_stmt|;
try|try
block|{
name|removeContainer
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
comment|// TODO: kill and cleanup the leaked container
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to remove container "
operator|+
name|containerId
operator|+
literal|" in store"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|containers
return|;
block|}
DECL|method|loadContainerState (ContainerId containerId, LeveldbIterator iter, String keyPrefix)
specifier|private
name|RecoveredContainerState
name|loadContainerState
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|LeveldbIterator
name|iter
parameter_list|,
name|String
name|keyPrefix
parameter_list|)
throws|throws
name|IOException
block|{
name|RecoveredContainerState
name|rcs
init|=
operator|new
name|RecoveredContainerState
argument_list|()
decl_stmt|;
name|rcs
operator|.
name|status
operator|=
name|RecoveredContainerStatus
operator|.
name|REQUESTED
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|peekNext
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|keyPrefix
argument_list|)
condition|)
block|{
break|break;
block|}
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|String
name|suffix
init|=
name|key
operator|.
name|substring
argument_list|(
name|keyPrefix
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// start with '/'
if|if
condition|(
name|suffix
operator|.
name|equals
argument_list|(
name|CONTAINER_REQUEST_KEY_SUFFIX
argument_list|)
condition|)
block|{
name|rcs
operator|.
name|startRequest
operator|=
operator|new
name|StartContainerRequestPBImpl
argument_list|(
name|StartContainerRequestProto
operator|.
name|parseFrom
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|suffix
operator|.
name|equals
argument_list|(
name|CONTAINER_DIAGS_KEY_SUFFIX
argument_list|)
condition|)
block|{
name|rcs
operator|.
name|diagnostics
operator|=
name|asString
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|suffix
operator|.
name|equals
argument_list|(
name|CONTAINER_LAUNCHED_KEY_SUFFIX
argument_list|)
condition|)
block|{
if|if
condition|(
name|rcs
operator|.
name|status
operator|==
name|RecoveredContainerStatus
operator|.
name|REQUESTED
condition|)
block|{
name|rcs
operator|.
name|status
operator|=
name|RecoveredContainerStatus
operator|.
name|LAUNCHED
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|suffix
operator|.
name|equals
argument_list|(
name|CONTAINER_KILLED_KEY_SUFFIX
argument_list|)
condition|)
block|{
name|rcs
operator|.
name|killed
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|suffix
operator|.
name|equals
argument_list|(
name|CONTAINER_EXIT_CODE_KEY_SUFFIX
argument_list|)
condition|)
block|{
name|rcs
operator|.
name|status
operator|=
name|RecoveredContainerStatus
operator|.
name|COMPLETED
expr_stmt|;
name|rcs
operator|.
name|exitCode
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|asString
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|suffix
operator|.
name|equals
argument_list|(
name|CONTAINER_RESOURCE_CHANGED_KEY_SUFFIX
argument_list|)
condition|)
block|{
name|rcs
operator|.
name|capability
operator|=
operator|new
name|ResourcePBImpl
argument_list|(
name|ResourceProto
operator|.
name|parseFrom
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected container state key: "
operator|+
name|key
argument_list|)
throw|;
block|}
block|}
return|return
name|rcs
return|;
block|}
annotation|@
name|Override
DECL|method|storeContainer (ContainerId containerId, StartContainerRequest startRequest)
specifier|public
name|void
name|storeContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|StartContainerRequest
name|startRequest
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"storeContainer: containerId= "
operator|+
name|containerId
operator|+
literal|", startRequest= "
operator|+
name|startRequest
argument_list|)
expr_stmt|;
block|}
name|String
name|key
init|=
name|CONTAINERS_KEY_PREFIX
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
name|CONTAINER_REQUEST_KEY_SUFFIX
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
operator|(
operator|(
name|StartContainerRequestPBImpl
operator|)
name|startRequest
operator|)
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeContainerDiagnostics (ContainerId containerId, StringBuilder diagnostics)
specifier|public
name|void
name|storeContainerDiagnostics
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|StringBuilder
name|diagnostics
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"storeContainerDiagnostics: containerId="
operator|+
name|containerId
operator|+
literal|", diagnostics="
operator|+
name|diagnostics
argument_list|)
expr_stmt|;
block|}
name|String
name|key
init|=
name|CONTAINERS_KEY_PREFIX
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
name|CONTAINER_DIAGS_KEY_SUFFIX
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|bytes
argument_list|(
name|diagnostics
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeContainerLaunched (ContainerId containerId)
specifier|public
name|void
name|storeContainerLaunched
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"storeContainerLaunched: containerId="
operator|+
name|containerId
argument_list|)
expr_stmt|;
block|}
name|String
name|key
init|=
name|CONTAINERS_KEY_PREFIX
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
name|CONTAINER_LAUNCHED_KEY_SUFFIX
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|EMPTY_VALUE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeContainerResourceChanged (ContainerId containerId, Resource capability)
specifier|public
name|void
name|storeContainerResourceChanged
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Resource
name|capability
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"storeContainerResourceChanged: containerId="
operator|+
name|containerId
operator|+
literal|", capability="
operator|+
name|capability
argument_list|)
expr_stmt|;
block|}
name|String
name|key
init|=
name|CONTAINERS_KEY_PREFIX
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
name|CONTAINER_RESOURCE_CHANGED_KEY_SUFFIX
decl_stmt|;
try|try
block|{
comment|// New value will overwrite old values for the same key
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
operator|(
operator|(
name|ResourcePBImpl
operator|)
name|capability
operator|)
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeContainerKilled (ContainerId containerId)
specifier|public
name|void
name|storeContainerKilled
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"storeContainerKilled: containerId="
operator|+
name|containerId
argument_list|)
expr_stmt|;
block|}
name|String
name|key
init|=
name|CONTAINERS_KEY_PREFIX
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
name|CONTAINER_KILLED_KEY_SUFFIX
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|EMPTY_VALUE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeContainerCompleted (ContainerId containerId, int exitCode)
specifier|public
name|void
name|storeContainerCompleted
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|int
name|exitCode
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"storeContainerCompleted: containerId="
operator|+
name|containerId
argument_list|)
expr_stmt|;
block|}
name|String
name|key
init|=
name|CONTAINERS_KEY_PREFIX
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
name|CONTAINER_EXIT_CODE_KEY_SUFFIX
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|bytes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|exitCode
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeContainer (ContainerId containerId)
specifier|public
name|void
name|removeContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"removeContainer: containerId="
operator|+
name|containerId
argument_list|)
expr_stmt|;
block|}
name|String
name|keyPrefix
init|=
name|CONTAINERS_KEY_PREFIX
operator|+
name|containerId
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
name|WriteBatch
name|batch
init|=
name|db
operator|.
name|createWriteBatch
argument_list|()
decl_stmt|;
try|try
block|{
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|keyPrefix
operator|+
name|CONTAINER_REQUEST_KEY_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|keyPrefix
operator|+
name|CONTAINER_DIAGS_KEY_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|keyPrefix
operator|+
name|CONTAINER_LAUNCHED_KEY_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|keyPrefix
operator|+
name|CONTAINER_KILLED_KEY_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|keyPrefix
operator|+
name|CONTAINER_EXIT_CODE_KEY_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|write
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|batch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|loadApplicationsState ()
specifier|public
name|RecoveredApplicationsState
name|loadApplicationsState
parameter_list|()
throws|throws
name|IOException
block|{
name|RecoveredApplicationsState
name|state
init|=
operator|new
name|RecoveredApplicationsState
argument_list|()
decl_stmt|;
name|state
operator|.
name|applications
operator|=
operator|new
name|ArrayList
argument_list|<
name|ContainerManagerApplicationProto
argument_list|>
argument_list|()
expr_stmt|;
name|String
name|keyPrefix
init|=
name|APPLICATIONS_KEY_PREFIX
decl_stmt|;
name|LeveldbIterator
name|iter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|iter
operator|=
operator|new
name|LeveldbIterator
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|iter
operator|.
name|seek
argument_list|(
name|bytes
argument_list|(
name|keyPrefix
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|keyPrefix
argument_list|)
condition|)
block|{
break|break;
block|}
name|state
operator|.
name|applications
operator|.
name|add
argument_list|(
name|ContainerManagerApplicationProto
operator|.
name|parseFrom
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|iter
operator|!=
literal|null
condition|)
block|{
name|iter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|cleanupDeprecatedFinishedApps
argument_list|()
expr_stmt|;
return|return
name|state
return|;
block|}
annotation|@
name|Override
DECL|method|storeApplication (ApplicationId appId, ContainerManagerApplicationProto p)
specifier|public
name|void
name|storeApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|ContainerManagerApplicationProto
name|p
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"storeApplication: appId="
operator|+
name|appId
operator|+
literal|", proto="
operator|+
name|p
argument_list|)
expr_stmt|;
block|}
name|String
name|key
init|=
name|APPLICATIONS_KEY_PREFIX
operator|+
name|appId
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|p
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeApplication (ApplicationId appId)
specifier|public
name|void
name|removeApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"removeApplication: appId="
operator|+
name|appId
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|WriteBatch
name|batch
init|=
name|db
operator|.
name|createWriteBatch
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|key
init|=
name|APPLICATIONS_KEY_PREFIX
operator|+
name|appId
decl_stmt|;
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|write
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|batch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|loadLocalizationState ()
specifier|public
name|RecoveredLocalizationState
name|loadLocalizationState
parameter_list|()
throws|throws
name|IOException
block|{
name|RecoveredLocalizationState
name|state
init|=
operator|new
name|RecoveredLocalizationState
argument_list|()
decl_stmt|;
name|LeveldbIterator
name|iter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|iter
operator|=
operator|new
name|LeveldbIterator
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|iter
operator|.
name|seek
argument_list|(
name|bytes
argument_list|(
name|LOCALIZATION_PUBLIC_KEY_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
name|state
operator|.
name|publicTrackerState
operator|=
name|loadResourceTrackerState
argument_list|(
name|iter
argument_list|,
name|LOCALIZATION_PUBLIC_KEY_PREFIX
argument_list|)
expr_stmt|;
name|iter
operator|.
name|seek
argument_list|(
name|bytes
argument_list|(
name|LOCALIZATION_PRIVATE_KEY_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|peekNext
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|LOCALIZATION_PRIVATE_KEY_PREFIX
argument_list|)
condition|)
block|{
break|break;
block|}
name|int
name|userEndPos
init|=
name|key
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|,
name|LOCALIZATION_PRIVATE_KEY_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|userEndPos
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to determine user in resource key: "
operator|+
name|key
argument_list|)
throw|;
block|}
name|String
name|user
init|=
name|key
operator|.
name|substring
argument_list|(
name|LOCALIZATION_PRIVATE_KEY_PREFIX
operator|.
name|length
argument_list|()
argument_list|,
name|userEndPos
argument_list|)
decl_stmt|;
name|state
operator|.
name|userResources
operator|.
name|put
argument_list|(
name|user
argument_list|,
name|loadUserLocalizedResources
argument_list|(
name|iter
argument_list|,
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|userEndPos
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|iter
operator|!=
literal|null
condition|)
block|{
name|iter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|state
return|;
block|}
DECL|method|loadResourceTrackerState ( LeveldbIterator iter, String keyPrefix)
specifier|private
name|LocalResourceTrackerState
name|loadResourceTrackerState
parameter_list|(
name|LeveldbIterator
name|iter
parameter_list|,
name|String
name|keyPrefix
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|completedPrefix
init|=
name|keyPrefix
operator|+
name|LOCALIZATION_COMPLETED_SUFFIX
decl_stmt|;
specifier|final
name|String
name|startedPrefix
init|=
name|keyPrefix
operator|+
name|LOCALIZATION_STARTED_SUFFIX
decl_stmt|;
name|LocalResourceTrackerState
name|state
init|=
operator|new
name|LocalResourceTrackerState
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|peekNext
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|keyPrefix
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|completedPrefix
argument_list|)
condition|)
block|{
name|state
operator|.
name|localizedResources
operator|=
name|loadCompletedResources
argument_list|(
name|iter
argument_list|,
name|completedPrefix
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|startedPrefix
argument_list|)
condition|)
block|{
name|state
operator|.
name|inProgressResources
operator|=
name|loadStartedResources
argument_list|(
name|iter
argument_list|,
name|startedPrefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected key in resource tracker state: "
operator|+
name|key
argument_list|)
throw|;
block|}
block|}
return|return
name|state
return|;
block|}
DECL|method|loadCompletedResources ( LeveldbIterator iter, String keyPrefix)
specifier|private
name|List
argument_list|<
name|LocalizedResourceProto
argument_list|>
name|loadCompletedResources
parameter_list|(
name|LeveldbIterator
name|iter
parameter_list|,
name|String
name|keyPrefix
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|LocalizedResourceProto
argument_list|>
name|rsrcs
init|=
operator|new
name|ArrayList
argument_list|<
name|LocalizedResourceProto
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|peekNext
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|keyPrefix
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loading completed resource from "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
name|rsrcs
operator|.
name|add
argument_list|(
name|LocalizedResourceProto
operator|.
name|parseFrom
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
return|return
name|rsrcs
return|;
block|}
DECL|method|loadStartedResources ( LeveldbIterator iter, String keyPrefix)
specifier|private
name|Map
argument_list|<
name|LocalResourceProto
argument_list|,
name|Path
argument_list|>
name|loadStartedResources
parameter_list|(
name|LeveldbIterator
name|iter
parameter_list|,
name|String
name|keyPrefix
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|LocalResourceProto
argument_list|,
name|Path
argument_list|>
name|rsrcs
init|=
operator|new
name|HashMap
argument_list|<
name|LocalResourceProto
argument_list|,
name|Path
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|peekNext
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|keyPrefix
argument_list|)
condition|)
block|{
break|break;
block|}
name|Path
name|localPath
init|=
operator|new
name|Path
argument_list|(
name|key
operator|.
name|substring
argument_list|(
name|keyPrefix
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loading in-progress resource at "
operator|+
name|localPath
argument_list|)
expr_stmt|;
block|}
name|rsrcs
operator|.
name|put
argument_list|(
name|LocalResourceProto
operator|.
name|parseFrom
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|localPath
argument_list|)
expr_stmt|;
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
return|return
name|rsrcs
return|;
block|}
DECL|method|loadUserLocalizedResources ( LeveldbIterator iter, String keyPrefix)
specifier|private
name|RecoveredUserResources
name|loadUserLocalizedResources
parameter_list|(
name|LeveldbIterator
name|iter
parameter_list|,
name|String
name|keyPrefix
parameter_list|)
throws|throws
name|IOException
block|{
name|RecoveredUserResources
name|userResources
init|=
operator|new
name|RecoveredUserResources
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|peekNext
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|keyPrefix
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|LOCALIZATION_FILECACHE_SUFFIX
argument_list|,
name|keyPrefix
operator|.
name|length
argument_list|()
argument_list|)
condition|)
block|{
name|userResources
operator|.
name|privateTrackerState
operator|=
name|loadResourceTrackerState
argument_list|(
name|iter
argument_list|,
name|keyPrefix
operator|+
name|LOCALIZATION_FILECACHE_SUFFIX
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|LOCALIZATION_APPCACHE_SUFFIX
argument_list|,
name|keyPrefix
operator|.
name|length
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|appIdStartPos
init|=
name|keyPrefix
operator|.
name|length
argument_list|()
operator|+
name|LOCALIZATION_APPCACHE_SUFFIX
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|appIdEndPos
init|=
name|key
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|,
name|appIdStartPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|appIdEndPos
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to determine appID in resource key: "
operator|+
name|key
argument_list|)
throw|;
block|}
name|ApplicationId
name|appId
init|=
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
name|key
operator|.
name|substring
argument_list|(
name|appIdStartPos
argument_list|,
name|appIdEndPos
argument_list|)
argument_list|)
decl_stmt|;
name|userResources
operator|.
name|appTrackerStates
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|loadResourceTrackerState
argument_list|(
name|iter
argument_list|,
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|appIdEndPos
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected user resource key "
operator|+
name|key
argument_list|)
throw|;
block|}
block|}
return|return
name|userResources
return|;
block|}
annotation|@
name|Override
DECL|method|startResourceLocalization (String user, ApplicationId appId, LocalResourceProto proto, Path localPath)
specifier|public
name|void
name|startResourceLocalization
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|LocalResourceProto
name|proto
parameter_list|,
name|Path
name|localPath
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|getResourceStartedKey
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|localPath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|proto
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|finishResourceLocalization (String user, ApplicationId appId, LocalizedResourceProto proto)
specifier|public
name|void
name|finishResourceLocalization
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|LocalizedResourceProto
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|localPath
init|=
name|proto
operator|.
name|getLocalPath
argument_list|()
decl_stmt|;
name|String
name|startedKey
init|=
name|getResourceStartedKey
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|localPath
argument_list|)
decl_stmt|;
name|String
name|completedKey
init|=
name|getResourceCompletedKey
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|localPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing localized resource to "
operator|+
name|completedKey
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|WriteBatch
name|batch
init|=
name|db
operator|.
name|createWriteBatch
argument_list|()
decl_stmt|;
try|try
block|{
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|startedKey
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|completedKey
argument_list|)
argument_list|,
name|proto
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|write
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|batch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeLocalizedResource (String user, ApplicationId appId, Path localPath)
specifier|public
name|void
name|removeLocalizedResource
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|Path
name|localPath
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|localPathStr
init|=
name|localPath
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|startedKey
init|=
name|getResourceStartedKey
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|localPathStr
argument_list|)
decl_stmt|;
name|String
name|completedKey
init|=
name|getResourceCompletedKey
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|localPathStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing local resource at "
operator|+
name|localPathStr
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|WriteBatch
name|batch
init|=
name|db
operator|.
name|createWriteBatch
argument_list|()
decl_stmt|;
try|try
block|{
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|startedKey
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|completedKey
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|write
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|batch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getResourceStartedKey (String user, ApplicationId appId, String localPath)
specifier|private
name|String
name|getResourceStartedKey
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|String
name|localPath
parameter_list|)
block|{
return|return
name|getResourceTrackerKeyPrefix
argument_list|(
name|user
argument_list|,
name|appId
argument_list|)
operator|+
name|LOCALIZATION_STARTED_SUFFIX
operator|+
name|localPath
return|;
block|}
DECL|method|getResourceCompletedKey (String user, ApplicationId appId, String localPath)
specifier|private
name|String
name|getResourceCompletedKey
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|String
name|localPath
parameter_list|)
block|{
return|return
name|getResourceTrackerKeyPrefix
argument_list|(
name|user
argument_list|,
name|appId
argument_list|)
operator|+
name|LOCALIZATION_COMPLETED_SUFFIX
operator|+
name|localPath
return|;
block|}
DECL|method|getResourceTrackerKeyPrefix (String user, ApplicationId appId)
specifier|private
name|String
name|getResourceTrackerKeyPrefix
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
return|return
name|LOCALIZATION_PUBLIC_KEY_PREFIX
return|;
block|}
if|if
condition|(
name|appId
operator|==
literal|null
condition|)
block|{
return|return
name|LOCALIZATION_PRIVATE_KEY_PREFIX
operator|+
name|user
operator|+
literal|"/"
operator|+
name|LOCALIZATION_FILECACHE_SUFFIX
return|;
block|}
return|return
name|LOCALIZATION_PRIVATE_KEY_PREFIX
operator|+
name|user
operator|+
literal|"/"
operator|+
name|LOCALIZATION_APPCACHE_SUFFIX
operator|+
name|appId
operator|+
literal|"/"
return|;
block|}
annotation|@
name|Override
DECL|method|loadDeletionServiceState ()
specifier|public
name|RecoveredDeletionServiceState
name|loadDeletionServiceState
parameter_list|()
throws|throws
name|IOException
block|{
name|RecoveredDeletionServiceState
name|state
init|=
operator|new
name|RecoveredDeletionServiceState
argument_list|()
decl_stmt|;
name|state
operator|.
name|tasks
operator|=
operator|new
name|ArrayList
argument_list|<
name|DeletionServiceDeleteTaskProto
argument_list|>
argument_list|()
expr_stmt|;
name|LeveldbIterator
name|iter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|iter
operator|=
operator|new
name|LeveldbIterator
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|iter
operator|.
name|seek
argument_list|(
name|bytes
argument_list|(
name|DELETION_TASK_KEY_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|DELETION_TASK_KEY_PREFIX
argument_list|)
condition|)
block|{
break|break;
block|}
name|state
operator|.
name|tasks
operator|.
name|add
argument_list|(
name|DeletionServiceDeleteTaskProto
operator|.
name|parseFrom
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|iter
operator|!=
literal|null
condition|)
block|{
name|iter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|state
return|;
block|}
annotation|@
name|Override
DECL|method|storeDeletionTask (int taskId, DeletionServiceDeleteTaskProto taskProto)
specifier|public
name|void
name|storeDeletionTask
parameter_list|(
name|int
name|taskId
parameter_list|,
name|DeletionServiceDeleteTaskProto
name|taskProto
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|DELETION_TASK_KEY_PREFIX
operator|+
name|taskId
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|taskProto
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeDeletionTask (int taskId)
specifier|public
name|void
name|removeDeletionTask
parameter_list|(
name|int
name|taskId
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|DELETION_TASK_KEY_PREFIX
operator|+
name|taskId
decl_stmt|;
try|try
block|{
name|db
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|loadNMTokensState ()
specifier|public
name|RecoveredNMTokensState
name|loadNMTokensState
parameter_list|()
throws|throws
name|IOException
block|{
name|RecoveredNMTokensState
name|state
init|=
operator|new
name|RecoveredNMTokensState
argument_list|()
decl_stmt|;
name|state
operator|.
name|applicationMasterKeys
operator|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|MasterKey
argument_list|>
argument_list|()
expr_stmt|;
name|LeveldbIterator
name|iter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|iter
operator|=
operator|new
name|LeveldbIterator
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|iter
operator|.
name|seek
argument_list|(
name|bytes
argument_list|(
name|NM_TOKENS_KEY_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|fullKey
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fullKey
operator|.
name|startsWith
argument_list|(
name|NM_TOKENS_KEY_PREFIX
argument_list|)
condition|)
block|{
break|break;
block|}
name|String
name|key
init|=
name|fullKey
operator|.
name|substring
argument_list|(
name|NM_TOKENS_KEY_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|CURRENT_MASTER_KEY_SUFFIX
argument_list|)
condition|)
block|{
name|state
operator|.
name|currentMasterKey
operator|=
name|parseMasterKey
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|PREV_MASTER_KEY_SUFFIX
argument_list|)
condition|)
block|{
name|state
operator|.
name|previousMasterKey
operator|=
name|parseMasterKey
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|ApplicationAttemptId
operator|.
name|appAttemptIdStrPrefix
argument_list|)
condition|)
block|{
name|ApplicationAttemptId
name|attempt
decl_stmt|;
try|try
block|{
name|attempt
operator|=
name|ConverterUtils
operator|.
name|toApplicationAttemptId
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Bad application master key state for "
operator|+
name|fullKey
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|state
operator|.
name|applicationMasterKeys
operator|.
name|put
argument_list|(
name|attempt
argument_list|,
name|parseMasterKey
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|iter
operator|!=
literal|null
condition|)
block|{
name|iter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|state
return|;
block|}
annotation|@
name|Override
DECL|method|storeNMTokenCurrentMasterKey (MasterKey key)
specifier|public
name|void
name|storeNMTokenCurrentMasterKey
parameter_list|(
name|MasterKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|storeMasterKey
argument_list|(
name|NM_TOKENS_CURRENT_MASTER_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeNMTokenPreviousMasterKey (MasterKey key)
specifier|public
name|void
name|storeNMTokenPreviousMasterKey
parameter_list|(
name|MasterKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|storeMasterKey
argument_list|(
name|NM_TOKENS_PREV_MASTER_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeNMTokenApplicationMasterKey ( ApplicationAttemptId attempt, MasterKey key)
specifier|public
name|void
name|storeNMTokenApplicationMasterKey
parameter_list|(
name|ApplicationAttemptId
name|attempt
parameter_list|,
name|MasterKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|storeMasterKey
argument_list|(
name|NM_TOKENS_KEY_PREFIX
operator|+
name|attempt
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeNMTokenApplicationMasterKey ( ApplicationAttemptId attempt)
specifier|public
name|void
name|removeNMTokenApplicationMasterKey
parameter_list|(
name|ApplicationAttemptId
name|attempt
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|NM_TOKENS_KEY_PREFIX
operator|+
name|attempt
decl_stmt|;
try|try
block|{
name|db
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|parseMasterKey (byte[] keyData)
specifier|private
name|MasterKey
name|parseMasterKey
parameter_list|(
name|byte
index|[]
name|keyData
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MasterKeyPBImpl
argument_list|(
name|MasterKeyProto
operator|.
name|parseFrom
argument_list|(
name|keyData
argument_list|)
argument_list|)
return|;
block|}
DECL|method|storeMasterKey (String dbKey, MasterKey key)
specifier|private
name|void
name|storeMasterKey
parameter_list|(
name|String
name|dbKey
parameter_list|,
name|MasterKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|MasterKeyPBImpl
name|pb
init|=
operator|(
name|MasterKeyPBImpl
operator|)
name|key
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|dbKey
argument_list|)
argument_list|,
name|pb
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|loadContainerTokensState ()
specifier|public
name|RecoveredContainerTokensState
name|loadContainerTokensState
parameter_list|()
throws|throws
name|IOException
block|{
name|RecoveredContainerTokensState
name|state
init|=
operator|new
name|RecoveredContainerTokensState
argument_list|()
decl_stmt|;
name|state
operator|.
name|activeTokens
operator|=
operator|new
name|HashMap
argument_list|<
name|ContainerId
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|LeveldbIterator
name|iter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|iter
operator|=
operator|new
name|LeveldbIterator
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|iter
operator|.
name|seek
argument_list|(
name|bytes
argument_list|(
name|CONTAINER_TOKENS_KEY_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|containerTokensKeyPrefixLength
init|=
name|CONTAINER_TOKENS_KEY_PREFIX
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|fullKey
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fullKey
operator|.
name|startsWith
argument_list|(
name|CONTAINER_TOKENS_KEY_PREFIX
argument_list|)
condition|)
block|{
break|break;
block|}
name|String
name|key
init|=
name|fullKey
operator|.
name|substring
argument_list|(
name|containerTokensKeyPrefixLength
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|CURRENT_MASTER_KEY_SUFFIX
argument_list|)
condition|)
block|{
name|state
operator|.
name|currentMasterKey
operator|=
name|parseMasterKey
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|PREV_MASTER_KEY_SUFFIX
argument_list|)
condition|)
block|{
name|state
operator|.
name|previousMasterKey
operator|=
name|parseMasterKey
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|ConverterUtils
operator|.
name|CONTAINER_PREFIX
argument_list|)
condition|)
block|{
name|loadContainerToken
argument_list|(
name|state
argument_list|,
name|fullKey
argument_list|,
name|key
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|iter
operator|!=
literal|null
condition|)
block|{
name|iter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|state
return|;
block|}
DECL|method|loadContainerToken (RecoveredContainerTokensState state, String key, String containerIdStr, byte[] value)
specifier|private
specifier|static
name|void
name|loadContainerToken
parameter_list|(
name|RecoveredContainerTokensState
name|state
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|containerIdStr
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|ContainerId
name|containerId
decl_stmt|;
name|Long
name|expTime
decl_stmt|;
try|try
block|{
name|containerId
operator|=
name|ConverterUtils
operator|.
name|toContainerId
argument_list|(
name|containerIdStr
argument_list|)
expr_stmt|;
name|expTime
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|asString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Bad container token state for "
operator|+
name|key
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|state
operator|.
name|activeTokens
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|expTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeContainerTokenCurrentMasterKey (MasterKey key)
specifier|public
name|void
name|storeContainerTokenCurrentMasterKey
parameter_list|(
name|MasterKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|storeMasterKey
argument_list|(
name|CONTAINER_TOKENS_CURRENT_MASTER_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeContainerTokenPreviousMasterKey (MasterKey key)
specifier|public
name|void
name|storeContainerTokenPreviousMasterKey
parameter_list|(
name|MasterKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|storeMasterKey
argument_list|(
name|CONTAINER_TOKENS_PREV_MASTER_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeContainerToken (ContainerId containerId, Long expTime)
specifier|public
name|void
name|storeContainerToken
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Long
name|expTime
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|CONTAINER_TOKENS_KEY_PREFIX
operator|+
name|containerId
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|bytes
argument_list|(
name|expTime
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeContainerToken (ContainerId containerId)
specifier|public
name|void
name|removeContainerToken
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|CONTAINER_TOKENS_KEY_PREFIX
operator|+
name|containerId
decl_stmt|;
try|try
block|{
name|db
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|loadLogDeleterState ()
specifier|public
name|RecoveredLogDeleterState
name|loadLogDeleterState
parameter_list|()
throws|throws
name|IOException
block|{
name|RecoveredLogDeleterState
name|state
init|=
operator|new
name|RecoveredLogDeleterState
argument_list|()
decl_stmt|;
name|state
operator|.
name|logDeleterMap
operator|=
operator|new
name|HashMap
argument_list|<
name|ApplicationId
argument_list|,
name|LogDeleterProto
argument_list|>
argument_list|()
expr_stmt|;
name|LeveldbIterator
name|iter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|iter
operator|=
operator|new
name|LeveldbIterator
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|iter
operator|.
name|seek
argument_list|(
name|bytes
argument_list|(
name|LOG_DELETER_KEY_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|logDeleterKeyPrefixLength
init|=
name|LOG_DELETER_KEY_PREFIX
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|fullKey
init|=
name|asString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fullKey
operator|.
name|startsWith
argument_list|(
name|LOG_DELETER_KEY_PREFIX
argument_list|)
condition|)
block|{
break|break;
block|}
name|String
name|appIdStr
init|=
name|fullKey
operator|.
name|substring
argument_list|(
name|logDeleterKeyPrefixLength
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|appId
operator|=
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
name|appIdStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skipping unknown log deleter key "
operator|+
name|fullKey
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LogDeleterProto
name|proto
init|=
name|LogDeleterProto
operator|.
name|parseFrom
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|state
operator|.
name|logDeleterMap
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|proto
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|iter
operator|!=
literal|null
condition|)
block|{
name|iter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|state
return|;
block|}
annotation|@
name|Override
DECL|method|storeLogDeleter (ApplicationId appId, LogDeleterProto proto)
specifier|public
name|void
name|storeLogDeleter
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|LogDeleterProto
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|getLogDeleterKey
argument_list|(
name|appId
argument_list|)
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|proto
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeLogDeleter (ApplicationId appId)
specifier|public
name|void
name|removeLogDeleter
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|getLogDeleterKey
argument_list|(
name|appId
argument_list|)
decl_stmt|;
try|try
block|{
name|db
operator|.
name|delete
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|cleanupDeprecatedFinishedApps ()
specifier|private
name|void
name|cleanupDeprecatedFinishedApps
parameter_list|()
block|{
try|try
block|{
name|cleanupKeysWithPrefix
argument_list|(
name|FINISHED_APPS_KEY_PREFIX
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"cleanup keys with prefix "
operator|+
name|FINISHED_APPS_KEY_PREFIX
operator|+
literal|" from leveldb failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|cleanupKeysWithPrefix (String prefix)
specifier|private
name|void
name|cleanupKeysWithPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
name|WriteBatch
name|batch
init|=
literal|null
decl_stmt|;
name|LeveldbIterator
name|iter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|iter
operator|=
operator|new
name|LeveldbIterator
argument_list|(
name|db
argument_list|)
expr_stmt|;
try|try
block|{
name|batch
operator|=
name|db
operator|.
name|createWriteBatch
argument_list|()
expr_stmt|;
name|iter
operator|.
name|seek
argument_list|(
name|bytes
argument_list|(
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|byte
index|[]
name|key
init|=
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|keyStr
init|=
name|asString
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|keyStr
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
break|break;
block|}
name|batch
operator|.
name|delete
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"cleanup "
operator|+
name|keyStr
operator|+
literal|" from leveldb"
argument_list|)
expr_stmt|;
block|}
block|}
name|db
operator|.
name|write
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|batch
operator|!=
literal|null
condition|)
block|{
name|batch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|iter
operator|!=
literal|null
condition|)
block|{
name|iter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|getLogDeleterKey (ApplicationId appId)
specifier|private
name|String
name|getLogDeleterKey
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
return|return
name|LOG_DELETER_KEY_PREFIX
operator|+
name|appId
return|;
block|}
annotation|@
name|Override
DECL|method|initStorage (Configuration conf)
specifier|protected
name|void
name|initStorage
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|storeRoot
init|=
name|createStorageDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|createIfMissing
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|options
operator|.
name|logger
argument_list|(
operator|new
name|LeveldbLogger
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using state database at "
operator|+
name|storeRoot
operator|+
literal|" for recovery"
argument_list|)
expr_stmt|;
name|File
name|dbfile
init|=
operator|new
name|File
argument_list|(
name|storeRoot
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|db
operator|=
name|JniDBFactory
operator|.
name|factory
operator|.
name|open
argument_list|(
name|dbfile
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NativeDB
operator|.
name|DBException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isNotFound
argument_list|()
operator|||
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|" does not exist "
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating state database at "
operator|+
name|dbfile
argument_list|)
expr_stmt|;
name|isNewlyCreated
operator|=
literal|true
expr_stmt|;
name|options
operator|.
name|createIfMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|db
operator|=
name|JniDBFactory
operator|.
name|factory
operator|.
name|open
argument_list|(
name|dbfile
argument_list|,
name|options
argument_list|)
expr_stmt|;
comment|// store version
name|storeVersion
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|dbErr
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|dbErr
operator|.
name|getMessage
argument_list|()
argument_list|,
name|dbErr
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|checkVersion
argument_list|()
expr_stmt|;
block|}
DECL|method|createStorageDir (Configuration conf)
specifier|private
name|Path
name|createStorageDir
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|storeUri
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|storeUri
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No store location directory configured in "
operator|+
name|YarnConfiguration
operator|.
name|NM_RECOVERY_DIR
argument_list|)
throw|;
block|}
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
name|storeUri
argument_list|,
name|DB_NAME
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|root
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|root
return|;
block|}
DECL|class|LeveldbLogger
specifier|private
specifier|static
class|class
name|LeveldbLogger
implements|implements
name|Logger
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LeveldbLogger
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|log (String message)
specifier|public
name|void
name|log
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|loadVersion ()
name|Version
name|loadVersion
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
name|db
operator|.
name|get
argument_list|(
name|bytes
argument_list|(
name|DB_SCHEMA_VERSION_KEY
argument_list|)
argument_list|)
decl_stmt|;
comment|// if version is not stored previously, treat it as CURRENT_VERSION_INFO.
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|data
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|getCurrentVersion
argument_list|()
return|;
block|}
name|Version
name|version
init|=
operator|new
name|VersionPBImpl
argument_list|(
name|VersionProto
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|version
return|;
block|}
DECL|method|storeVersion ()
specifier|private
name|void
name|storeVersion
parameter_list|()
throws|throws
name|IOException
block|{
name|dbStoreVersion
argument_list|(
name|CURRENT_VERSION_INFO
argument_list|)
expr_stmt|;
block|}
comment|// Only used for test
annotation|@
name|VisibleForTesting
DECL|method|storeVersion (Version state)
name|void
name|storeVersion
parameter_list|(
name|Version
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|dbStoreVersion
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
DECL|method|dbStoreVersion (Version state)
specifier|private
name|void
name|dbStoreVersion
parameter_list|(
name|Version
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|DB_SCHEMA_VERSION_KEY
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|(
operator|(
name|VersionPBImpl
operator|)
name|state
operator|)
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
try|try
block|{
name|db
operator|.
name|put
argument_list|(
name|bytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getCurrentVersion ()
name|Version
name|getCurrentVersion
parameter_list|()
block|{
return|return
name|CURRENT_VERSION_INFO
return|;
block|}
comment|/**    * 1) Versioning scheme: major.minor. For e.g. 1.0, 1.1, 1.2...1.25, 2.0 etc.    * 2) Any incompatible change of state-store is a major upgrade, and any    *    compatible change of state-store is a minor upgrade.    * 3) Within a minor upgrade, say 1.1 to 1.2:    *    overwrite the version info and proceed as normal.    * 4) Within a major upgrade, say 1.2 to 2.0:    *    throw exception and indicate user to use a separate upgrade tool to    *    upgrade NM state or remove incompatible old state.    */
DECL|method|checkVersion ()
specifier|private
name|void
name|checkVersion
parameter_list|()
throws|throws
name|IOException
block|{
name|Version
name|loadedVersion
init|=
name|loadVersion
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Loaded NM state version info "
operator|+
name|loadedVersion
argument_list|)
expr_stmt|;
if|if
condition|(
name|loadedVersion
operator|.
name|equals
argument_list|(
name|getCurrentVersion
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|loadedVersion
operator|.
name|isCompatibleTo
argument_list|(
name|getCurrentVersion
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Storing NM state version info "
operator|+
name|getCurrentVersion
argument_list|()
argument_list|)
expr_stmt|;
name|storeVersion
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Incompatible version for NM state: expecting NM state version "
operator|+
name|getCurrentVersion
argument_list|()
operator|+
literal|", but loading version "
operator|+
name|loadedVersion
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

