begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|records
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonInclude
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonPropertyOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * An Service resource has the following attributes.  **/
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
annotation|@
name|JsonInclude
argument_list|(
name|JsonInclude
operator|.
name|Include
operator|.
name|NON_NULL
argument_list|)
annotation|@
name|JsonPropertyOrder
argument_list|(
block|{
literal|"name"
block|,
literal|"version"
block|,
literal|"description"
block|,
literal|"launch_time"
block|,
literal|"configuration"
block|}
argument_list|)
DECL|class|AuxServiceRecord
specifier|public
class|class
name|AuxServiceRecord
block|{
DECL|field|name
specifier|private
name|String
name|name
init|=
literal|null
decl_stmt|;
DECL|field|version
specifier|private
name|String
name|version
init|=
literal|null
decl_stmt|;
DECL|field|description
specifier|private
name|String
name|description
init|=
literal|null
decl_stmt|;
DECL|field|launchTime
specifier|private
name|Date
name|launchTime
init|=
literal|null
decl_stmt|;
DECL|field|configuration
specifier|private
name|AuxServiceConfiguration
name|configuration
init|=
operator|new
name|AuxServiceConfiguration
argument_list|()
decl_stmt|;
comment|/**    * A unique service name.    **/
DECL|method|name (String n)
specifier|public
name|AuxServiceRecord
name|name
parameter_list|(
name|String
name|n
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|n
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|JsonProperty
argument_list|(
literal|"name"
argument_list|)
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|JsonProperty
argument_list|(
literal|"version"
argument_list|)
DECL|method|getVersion ()
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
DECL|method|setVersion (String version)
specifier|public
name|void
name|setVersion
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
comment|/**    * Version of the service.    */
DECL|method|version (String v)
specifier|public
name|AuxServiceRecord
name|version
parameter_list|(
name|String
name|v
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|v
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|JsonProperty
argument_list|(
literal|"description"
argument_list|)
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
DECL|method|setDescription (String description)
specifier|public
name|void
name|setDescription
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
comment|/**    * Description of the service.    */
DECL|method|description (String d)
specifier|public
name|AuxServiceRecord
name|description
parameter_list|(
name|String
name|d
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|d
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * The time when the service was created, e.g. 2016-03-16T01:01:49.000Z.    **/
DECL|method|launchTime (Date time)
specifier|public
name|AuxServiceRecord
name|launchTime
parameter_list|(
name|Date
name|time
parameter_list|)
block|{
name|this
operator|.
name|launchTime
operator|=
name|time
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|Date
operator|)
name|time
operator|.
name|clone
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|JsonProperty
argument_list|(
literal|"launch_time"
argument_list|)
DECL|method|getLaunchTime ()
specifier|public
name|Date
name|getLaunchTime
parameter_list|()
block|{
return|return
name|launchTime
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|Date
operator|)
name|launchTime
operator|.
name|clone
argument_list|()
return|;
block|}
DECL|method|setLaunchTime (Date time)
specifier|public
name|void
name|setLaunchTime
parameter_list|(
name|Date
name|time
parameter_list|)
block|{
name|this
operator|.
name|launchTime
operator|=
name|time
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|Date
operator|)
name|time
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
comment|/**    * Config properties of an service. Configurations provided at the    * service/global level are available to all the components. Specific    * properties can be overridden at the component level.    **/
DECL|method|configuration (AuxServiceConfiguration conf)
specifier|public
name|AuxServiceRecord
name|configuration
parameter_list|(
name|AuxServiceConfiguration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|conf
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|JsonProperty
argument_list|(
literal|"configuration"
argument_list|)
DECL|method|getConfiguration ()
specifier|public
name|AuxServiceConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|setConfiguration (AuxServiceConfiguration conf)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|AuxServiceConfiguration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (java.lang.Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|AuxServiceRecord
name|service
init|=
operator|(
name|AuxServiceRecord
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|name
argument_list|,
name|service
operator|.
name|name
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|version
argument_list|,
name|service
operator|.
name|version
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|name
argument_list|,
name|version
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"class Service {\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    name: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    version: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|version
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    description: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|description
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    configuration: "
argument_list|)
operator|.
name|append
argument_list|(
name|toIndentedString
argument_list|(
name|configuration
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Convert the given object to string with each line indented by 4 spaces    * (except the first line).    */
DECL|method|toIndentedString (java.lang.Object o)
specifier|private
name|String
name|toIndentedString
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|"null"
return|;
block|}
return|return
name|o
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"\n    "
argument_list|)
return|;
block|}
block|}
end_class

end_unit

