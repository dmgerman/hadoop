begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.fpga
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|fpga
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|fpga
operator|.
name|FpgaResourceAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Intel FPGA for OpenCL plugin.  * The key points are:  * 1. It uses Intel's toolchain "aocl" to discover devices/reprogram IP to the device  *    before container launch to achieve a quickest reprogramming path  * 2. It avoids reprogramming by maintaining a mapping of device to FPGA IP ID  * 3. It assume IP file is distributed to container directory  */
end_comment

begin_class
DECL|class|IntelFpgaOpenclPlugin
specifier|public
class|class
name|IntelFpgaOpenclPlugin
implements|implements
name|AbstractFpgaVendorPlugin
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IntelFpgaOpenclPlugin
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|initialized
specifier|private
name|boolean
name|initialized
init|=
literal|false
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|shell
specifier|private
name|InnerShellExecutor
name|shell
decl_stmt|;
DECL|field|DEFAULT_BINARY_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|DEFAULT_BINARY_NAME
init|=
literal|"aocl"
decl_stmt|;
DECL|field|ALTERAOCLSDKROOT_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|ALTERAOCLSDKROOT_NAME
init|=
literal|"ALTERAOCLSDKROOT"
decl_stmt|;
DECL|field|pathToExecutable
specifier|private
name|String
name|pathToExecutable
init|=
literal|null
decl_stmt|;
comment|// a mapping of major:minor number to acl0-31
DECL|field|aliasMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aliasMap
decl_stmt|;
DECL|method|IntelFpgaOpenclPlugin ()
specifier|public
name|IntelFpgaOpenclPlugin
parameter_list|()
block|{
name|this
operator|.
name|shell
operator|=
operator|new
name|InnerShellExecutor
argument_list|()
expr_stmt|;
block|}
DECL|method|getDefaultBinaryName ()
specifier|public
name|String
name|getDefaultBinaryName
parameter_list|()
block|{
return|return
name|DEFAULT_BINARY_NAME
return|;
block|}
DECL|method|getDefaultPathToExecutable ()
specifier|public
name|String
name|getDefaultPathToExecutable
parameter_list|()
block|{
return|return
name|System
operator|.
name|getenv
argument_list|(
name|ALTERAOCLSDKROOT_NAME
argument_list|)
return|;
block|}
DECL|method|getDefaultPathEnvName ()
specifier|public
specifier|static
name|String
name|getDefaultPathEnvName
parameter_list|()
block|{
return|return
name|ALTERAOCLSDKROOT_NAME
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getPathToExecutable ()
specifier|public
name|String
name|getPathToExecutable
parameter_list|()
block|{
return|return
name|pathToExecutable
return|;
block|}
DECL|method|setPathToExecutable (String pathToExecutable)
specifier|public
name|void
name|setPathToExecutable
parameter_list|(
name|String
name|pathToExecutable
parameter_list|)
block|{
name|this
operator|.
name|pathToExecutable
operator|=
name|pathToExecutable
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setShell (InnerShellExecutor shell)
specifier|public
name|void
name|setShell
parameter_list|(
name|InnerShellExecutor
name|shell
parameter_list|)
block|{
name|this
operator|.
name|shell
operator|=
name|shell
expr_stmt|;
block|}
DECL|method|getAliasMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getAliasMap
parameter_list|()
block|{
return|return
name|aliasMap
return|;
block|}
comment|/**    * Check the Intel FPGA for OpenCL toolchain    * */
annotation|@
name|Override
DECL|method|initPlugin (Configuration conf)
specifier|public
name|boolean
name|initPlugin
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|aliasMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|initialized
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Find the proper toolchain, mainly aocl
name|String
name|pluginDefaultBinaryName
init|=
name|getDefaultBinaryName
argument_list|()
decl_stmt|;
name|String
name|pathToExecutable
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_PATH_TO_EXEC
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathToExecutable
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|pathToExecutable
operator|=
name|pluginDefaultBinaryName
expr_stmt|;
block|}
comment|// Validate file existence
name|File
name|binaryPath
init|=
operator|new
name|File
argument_list|(
name|pathToExecutable
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|binaryPath
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// When binary not exist, fail
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to find FPGA discoverer executable configured in "
operator|+
name|YarnConfiguration
operator|.
name|NM_FPGA_PATH_TO_EXEC
operator|+
literal|", please check! Try default path"
argument_list|)
expr_stmt|;
name|pathToExecutable
operator|=
name|pluginDefaultBinaryName
expr_stmt|;
comment|// Try to find in plugin's preferred path
name|String
name|pluginDefaultPreferredPath
init|=
name|getDefaultPathToExecutable
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|pluginDefaultPreferredPath
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to find FPGA discoverer executable from system environment "
operator|+
name|getDefaultPathEnvName
argument_list|()
operator|+
literal|", please check your environment!"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|binaryPath
operator|=
operator|new
name|File
argument_list|(
name|pluginDefaultPreferredPath
operator|+
literal|"/bin"
argument_list|,
name|pluginDefaultBinaryName
argument_list|)
expr_stmt|;
if|if
condition|(
name|binaryPath
operator|.
name|exists
argument_list|()
condition|)
block|{
name|pathToExecutable
operator|=
name|pluginDefaultPreferredPath
expr_stmt|;
block|}
else|else
block|{
name|pathToExecutable
operator|=
name|pluginDefaultBinaryName
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to find FPGA discoverer executable in "
operator|+
name|pluginDefaultPreferredPath
operator|+
literal|", file doesn't exists! Use default binary"
operator|+
name|pathToExecutable
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|setPathToExecutable
argument_list|(
name|pathToExecutable
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|diagnose
argument_list|(
literal|10
operator|*
literal|1000
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Intel FPGA for OpenCL diagnose failed!"
argument_list|)
expr_stmt|;
name|this
operator|.
name|initialized
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|this
operator|.
name|initialized
return|;
block|}
annotation|@
name|Override
DECL|method|discover (int timeout)
specifier|public
name|List
argument_list|<
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
argument_list|>
name|discover
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
name|List
argument_list|<
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
argument_list|>
name|list
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|output
decl_stmt|;
name|output
operator|=
name|getDiagnoseInfo
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|output
condition|)
block|{
return|return
name|list
return|;
block|}
name|parseDiagnoseInfo
argument_list|(
name|output
argument_list|,
name|list
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
DECL|class|InnerShellExecutor
specifier|public
specifier|static
class|class
name|InnerShellExecutor
block|{
comment|// ls /dev/<devName>
comment|// return a string in format<major:minor>
DECL|method|getMajorAndMinorNumber (String devName)
specifier|public
name|String
name|getMajorAndMinorNumber
parameter_list|(
name|String
name|devName
parameter_list|)
block|{
name|String
name|output
init|=
literal|null
decl_stmt|;
name|Shell
operator|.
name|ShellCommandExecutor
name|shexec
init|=
operator|new
name|Shell
operator|.
name|ShellCommandExecutor
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"stat"
block|,
literal|"-c"
block|,
literal|"%t:%T"
block|,
literal|"/dev/"
operator|+
name|devName
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Get FPGA major-minor numbers from /dev/"
operator|+
name|devName
argument_list|)
expr_stmt|;
name|shexec
operator|.
name|execute
argument_list|()
expr_stmt|;
name|String
index|[]
name|strs
init|=
name|shexec
operator|.
name|getOutput
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"stat output:"
operator|+
name|shexec
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
name|output
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|strs
index|[
literal|0
index|]
argument_list|,
literal|16
argument_list|)
operator|+
literal|":"
operator|+
name|Integer
operator|.
name|parseInt
argument_list|(
name|strs
index|[
literal|1
index|]
argument_list|,
literal|16
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Failed to get major-minor number from reading /dev/"
operator|+
name|devName
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Command output:"
operator|+
name|shexec
operator|.
name|getOutput
argument_list|()
operator|+
literal|", exit code:"
operator|+
name|shexec
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|output
return|;
block|}
DECL|method|runDiagnose (String binary, int timeout)
specifier|public
name|String
name|runDiagnose
parameter_list|(
name|String
name|binary
parameter_list|,
name|int
name|timeout
parameter_list|)
block|{
name|String
name|output
init|=
literal|null
decl_stmt|;
name|Shell
operator|.
name|ShellCommandExecutor
name|shexec
init|=
operator|new
name|Shell
operator|.
name|ShellCommandExecutor
argument_list|(
operator|new
name|String
index|[]
block|{
name|binary
block|,
literal|"diagnose"
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|shexec
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// aocl diagnose exit code is 1 even it success.
comment|// we ignore it because we only wants the output
name|String
name|msg
init|=
literal|"Failed to execute "
operator|+
name|binary
operator|+
literal|" diagnose, exception message:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|", output:"
operator|+
name|output
operator|+
literal|", continue ..."
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|shexec
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|shexec
operator|.
name|getOutput
argument_list|()
return|;
block|}
block|}
comment|/**    * One real sample output of Intel FPGA SDK 17.0's "aocl diagnose" is as below:    * "    * aocl diagnose: Running diagnose from /home/fpga/intelFPGA_pro/17.0/hld/board/nalla_pcie/linux64/libexec    *    * ------------------------- acl0 -------------------------    * Vendor: Nallatech ltd    *    * Phys Dev Name  Status   Information    *    * aclnalla_pcie0Passed   nalla_pcie (aclnalla_pcie0)    *                        PCIe dev_id = 2494, bus:slot.func = 02:00.00, Gen3 x8    *                        FPGA temperature = 54.4 degrees C.    *                        Total Card Power Usage = 31.7 Watts.    *                        Device Power Usage = 0.0 Watts.    *    * DIAGNOSTIC_PASSED    * ---------------------------------------------------------    * "    *    * While per Intel's guide, the output(should be outdated or prior SDK version's) is as below:    *    * "    * aocl diagnose: Running diagnostic from ALTERAOCLSDKROOT/board/&lt;board_name&gt;/    *&lt;platform&gt;/libexec    * Verified that the kernel mode driver is installed on the host machine.    * Using board package from vendor:&lt;board_vendor_name&gt;    * Querying information for all supported devices that are installed on the host    * machine ...    *    * device_name Status Information    *    * acl0 Passed&lt;descriptive_board_name&gt;    *             PCIe dev_id =&lt;device_ID&gt;, bus:slot.func = 02:00.00,    *               at Gen 2 with 8 lanes.    *             FPGA temperature=43.0 degrees C.    * acl1 Passed&lt;descriptive_board_name&gt;    *             PCIe dev_id =&lt;device_ID&gt;, bus:slot.func = 03:00.00,    *               at Gen 2 with 8 lanes.    *             FPGA temperature = 35.0 degrees C.    *    * Found 2 active device(s) installed on the host machine, to perform a full    * diagnostic on a specific device, please run aocl diagnose&lt;device_name&gt;    *    * DIAGNOSTIC_PASSED    * "    * But this method only support the first output    * */
DECL|method|parseDiagnoseInfo (String output, List<FpgaResourceAllocator.FpgaDevice> list)
specifier|public
name|void
name|parseDiagnoseInfo
parameter_list|(
name|String
name|output
parameter_list|,
name|List
argument_list|<
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
argument_list|>
name|list
parameter_list|)
block|{
if|if
condition|(
name|output
operator|.
name|contains
argument_list|(
literal|"DIAGNOSTIC_PASSED"
argument_list|)
condition|)
block|{
name|Matcher
name|headerStartMatcher
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"acl[0-31]"
argument_list|)
operator|.
name|matcher
argument_list|(
name|output
argument_list|)
decl_stmt|;
name|Matcher
name|headerEndMatcher
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(?i)DIAGNOSTIC_PASSED"
argument_list|)
operator|.
name|matcher
argument_list|(
name|output
argument_list|)
decl_stmt|;
name|int
name|sectionStartIndex
decl_stmt|;
name|int
name|sectionEndIndex
decl_stmt|;
name|String
name|aliasName
decl_stmt|;
while|while
condition|(
name|headerStartMatcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|sectionStartIndex
operator|=
name|headerStartMatcher
operator|.
name|end
argument_list|()
expr_stmt|;
name|String
name|section
init|=
literal|null
decl_stmt|;
name|aliasName
operator|=
name|headerStartMatcher
operator|.
name|group
argument_list|()
expr_stmt|;
while|while
condition|(
name|headerEndMatcher
operator|.
name|find
argument_list|(
name|sectionStartIndex
argument_list|)
condition|)
block|{
name|sectionEndIndex
operator|=
name|headerEndMatcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|section
operator|=
name|output
operator|.
name|substring
argument_list|(
name|sectionStartIndex
argument_list|,
name|sectionEndIndex
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
literal|null
operator|==
name|section
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unsupported diagnose output"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// devName, \(.*\)
comment|// busNum, bus:slot.func\s=\s.*,
comment|// FPGA temperature\s=\s.*
comment|// Total\sCard\sPower\sUsage\s=\s.*
name|String
index|[]
name|fieldRegexes
init|=
operator|new
name|String
index|[]
block|{
literal|"\\(.*\\)\n"
block|,
literal|"(?i)bus:slot.func\\s=\\s.*,"
block|,
literal|"(?i)FPGA temperature\\s=\\s.*"
block|,
literal|"(?i)Total\\sCard\\sPower\\sUsage\\s=\\s.*"
block|}
decl_stmt|;
name|String
index|[]
name|fields
init|=
operator|new
name|String
index|[
literal|4
index|]
decl_stmt|;
name|String
name|tempFieldValue
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldRegexes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Matcher
name|fieldMatcher
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|fieldRegexes
index|[
name|i
index|]
argument_list|)
operator|.
name|matcher
argument_list|(
name|section
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fieldMatcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't find "
operator|+
name|fieldRegexes
index|[
name|i
index|]
operator|+
literal|" pattern"
argument_list|)
expr_stmt|;
name|fields
index|[
name|i
index|]
operator|=
literal|""
expr_stmt|;
continue|continue;
block|}
name|tempFieldValue
operator|=
name|fieldMatcher
operator|.
name|group
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
comment|// special case for Device name
name|fields
index|[
name|i
index|]
operator|=
name|tempFieldValue
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|tempFieldValue
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|ss
init|=
name|tempFieldValue
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
name|fields
index|[
name|i
index|]
operator|=
name|ss
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ss
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|majorMinorNumber
init|=
name|this
operator|.
name|shell
operator|.
name|getMajorAndMinorNumber
argument_list|(
name|fields
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|majorMinorNumber
condition|)
block|{
name|String
index|[]
name|mmn
init|=
name|majorMinorNumber
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|this
operator|.
name|aliasMap
operator|.
name|put
argument_list|(
name|majorMinorNumber
argument_list|,
name|aliasName
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
argument_list|(
name|getFpgaType
argument_list|()
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|mmn
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|mmn
index|[
literal|1
index|]
argument_list|)
argument_list|,
literal|null
argument_list|,
name|fields
index|[
literal|0
index|]
argument_list|,
name|aliasName
argument_list|,
name|fields
index|[
literal|1
index|]
argument_list|,
name|fields
index|[
literal|2
index|]
argument_list|,
name|fields
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// end while
block|}
comment|// end if
block|}
DECL|method|getDiagnoseInfo (int timeout)
specifier|public
name|String
name|getDiagnoseInfo
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
return|return
name|this
operator|.
name|shell
operator|.
name|runDiagnose
argument_list|(
name|this
operator|.
name|pathToExecutable
argument_list|,
name|timeout
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|diagnose (int timeout)
specifier|public
name|boolean
name|diagnose
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
name|String
name|output
init|=
name|getDiagnoseInfo
argument_list|(
name|timeout
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|output
operator|&&
name|output
operator|.
name|contains
argument_list|(
literal|"DIAGNOSTIC_PASSED"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * this is actually the opencl platform type    * */
annotation|@
name|Override
DECL|method|getFpgaType ()
specifier|public
name|String
name|getFpgaType
parameter_list|()
block|{
return|return
literal|"IntelOpenCL"
return|;
block|}
annotation|@
name|Override
DECL|method|downloadIP (String id, String dstDir, Map<Path, List<String>> localizedResources)
specifier|public
name|String
name|downloadIP
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|dstDir
parameter_list|,
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|localizedResources
parameter_list|)
block|{
comment|// Assume .aocx IP file is distributed by DS to local dir
name|String
name|r
init|=
literal|""
decl_stmt|;
name|Path
name|path
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got environment: "
operator|+
name|id
operator|+
literal|", search IP file in localized resources"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|id
operator|||
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"IP_ID environment is empty, skip downloading"
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
if|if
condition|(
name|localizedResources
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|resourceEntry
range|:
name|localizedResources
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|path
operator|=
name|resourceEntry
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Check:"
operator|+
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
name|id
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|&&
name|path
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".aocx"
argument_list|)
condition|)
block|{
name|r
operator|=
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found: "
operator|+
name|r
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Localized resource is null!"
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
comment|/**    * Program one device.    * It's ok for the offline "aocl program" failed because the application will always invoke API to program    * The reason we do offline reprogramming is to make the application's program process faster    * @param ipPath the absolute path to the aocx IP file    * @param majorMinorNumber major:minor string    * @return True or False    * */
annotation|@
name|Override
DECL|method|configureIP (String ipPath, String majorMinorNumber)
specifier|public
name|boolean
name|configureIP
parameter_list|(
name|String
name|ipPath
parameter_list|,
name|String
name|majorMinorNumber
parameter_list|)
block|{
comment|// perform offline program the IP to get a quickest reprogramming sequence
comment|// we need a mapping of "major:minor" to "acl0" to issue command "aocl program<acl0><ipPath>"
name|Shell
operator|.
name|ShellCommandExecutor
name|shexec
decl_stmt|;
name|String
name|aclName
decl_stmt|;
name|aclName
operator|=
name|this
operator|.
name|aliasMap
operator|.
name|get
argument_list|(
name|majorMinorNumber
argument_list|)
expr_stmt|;
name|shexec
operator|=
operator|new
name|Shell
operator|.
name|ShellCommandExecutor
argument_list|(
operator|new
name|String
index|[]
block|{
name|this
operator|.
name|pathToExecutable
block|,
literal|"program"
block|,
name|aclName
block|,
name|ipPath
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|shexec
operator|.
name|execute
argument_list|()
expr_stmt|;
if|if
condition|(
literal|0
operator|==
name|shexec
operator|.
name|getExitCode
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|shexec
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Intel aocl program "
operator|+
name|ipPath
operator|+
literal|" to "
operator|+
name|aclName
operator|+
literal|" successfully"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Intel aocl program "
operator|+
name|ipPath
operator|+
literal|" to "
operator|+
name|aclName
operator|+
literal|" failed!"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
block|}
end_class

end_unit

