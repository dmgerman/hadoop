begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.fpga.discovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|fpga
operator|.
name|discovery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|ResourceHandlerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|fpga
operator|.
name|FpgaDevice
import|;
end_import

begin_comment
comment|/**  * FPGA device discovery strategy which invokes an external script.  * The script must return a single line in given format.  *  * See DeviceSpecParser for details.  */
end_comment

begin_class
DECL|class|ScriptBasedFPGADiscoveryStrategy
specifier|public
class|class
name|ScriptBasedFPGADiscoveryStrategy
implements|implements
name|FPGADiscoveryStrategy
block|{
DECL|field|scriptRunner
specifier|private
specifier|final
name|Function
argument_list|<
name|String
argument_list|,
name|Optional
argument_list|<
name|String
argument_list|>
argument_list|>
name|scriptRunner
decl_stmt|;
DECL|field|discoveryScript
specifier|private
specifier|final
name|String
name|discoveryScript
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
DECL|method|ScriptBasedFPGADiscoveryStrategy ( String fpgaType, Function<String, Optional<String>> scriptRunner, String propValue)
specifier|public
name|ScriptBasedFPGADiscoveryStrategy
parameter_list|(
name|String
name|fpgaType
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|Optional
argument_list|<
name|String
argument_list|>
argument_list|>
name|scriptRunner
parameter_list|,
name|String
name|propValue
parameter_list|)
block|{
name|this
operator|.
name|scriptRunner
operator|=
name|scriptRunner
expr_stmt|;
name|this
operator|.
name|discoveryScript
operator|=
name|propValue
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|fpgaType
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|discover ()
specifier|public
name|List
argument_list|<
name|FpgaDevice
argument_list|>
name|discover
parameter_list|()
throws|throws
name|ResourceHandlerException
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|scriptOutput
init|=
name|scriptRunner
operator|.
name|apply
argument_list|(
name|discoveryScript
argument_list|)
decl_stmt|;
if|if
condition|(
name|scriptOutput
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|FpgaDevice
argument_list|>
name|list
init|=
name|DeviceSpecParser
operator|.
name|getDevicesFromString
argument_list|(
name|type
argument_list|,
name|scriptOutput
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
literal|"No FPGA devices were specified"
argument_list|)
throw|;
block|}
return|return
name|list
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ResourceHandlerException
argument_list|(
literal|"Unable to run external script"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

