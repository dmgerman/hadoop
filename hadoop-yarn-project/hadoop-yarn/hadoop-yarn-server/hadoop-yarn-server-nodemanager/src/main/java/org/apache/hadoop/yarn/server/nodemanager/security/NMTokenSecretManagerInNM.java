begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|NMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|MasterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|BaseNMTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|MasterKeyData
import|;
end_import

begin_class
DECL|class|NMTokenSecretManagerInNM
specifier|public
class|class
name|NMTokenSecretManagerInNM
extends|extends
name|BaseNMTokenSecretManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NMTokenSecretManagerInNM
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|previousMasterKey
specifier|private
name|MasterKeyData
name|previousMasterKey
decl_stmt|;
DECL|field|oldMasterKeys
specifier|private
specifier|final
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|MasterKeyData
argument_list|>
name|oldMasterKeys
decl_stmt|;
DECL|method|NMTokenSecretManagerInNM ()
specifier|public
name|NMTokenSecretManagerInNM
parameter_list|()
block|{
name|this
operator|.
name|oldMasterKeys
operator|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|MasterKeyData
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Used by NodeManagers to create a token-secret-manager with the key    * obtained from the RM. This can happen during registration or when the RM    * rolls the master-key and signal the NM.    */
annotation|@
name|Private
DECL|method|setMasterKey (MasterKey masterKey)
specifier|public
specifier|synchronized
name|void
name|setMasterKey
parameter_list|(
name|MasterKey
name|masterKey
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Rolling master-key for nm-tokens, got key with id :"
operator|+
name|masterKey
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|super
operator|.
name|currentMasterKey
operator|==
literal|null
condition|)
block|{
name|super
operator|.
name|currentMasterKey
operator|=
operator|new
name|MasterKeyData
argument_list|(
name|masterKey
argument_list|,
name|createSecretKey
argument_list|(
name|masterKey
operator|.
name|getBytes
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|super
operator|.
name|currentMasterKey
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
operator|!=
name|masterKey
operator|.
name|getKeyId
argument_list|()
condition|)
block|{
name|this
operator|.
name|previousMasterKey
operator|=
name|super
operator|.
name|currentMasterKey
expr_stmt|;
name|super
operator|.
name|currentMasterKey
operator|=
operator|new
name|MasterKeyData
argument_list|(
name|masterKey
argument_list|,
name|createSecretKey
argument_list|(
name|masterKey
operator|.
name|getBytes
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * This method will be used to verify NMTokens generated by different    * master keys.    */
annotation|@
name|Override
DECL|method|retrievePassword ( NMTokenIdentifier identifier)
specifier|public
specifier|synchronized
name|byte
index|[]
name|retrievePassword
parameter_list|(
name|NMTokenIdentifier
name|identifier
parameter_list|)
throws|throws
name|InvalidToken
block|{
name|int
name|keyId
init|=
name|identifier
operator|.
name|getMastKeyId
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|identifier
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
comment|/*      * MasterKey used for retrieving password will be as follows.      * 1) By default older saved master key will be used.      * 2) If identifier's master key id matches that of previous master key      * id then previous key will be used.      * 3) If identifier's master key id matches that of current master key      * id then current key will be used.      */
name|MasterKeyData
name|oldMasterKey
init|=
name|oldMasterKeys
operator|.
name|get
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
name|MasterKeyData
name|masterKeyToUse
init|=
name|oldMasterKey
decl_stmt|;
if|if
condition|(
name|previousMasterKey
operator|!=
literal|null
operator|&&
name|keyId
operator|==
name|previousMasterKey
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
condition|)
block|{
name|masterKeyToUse
operator|=
name|previousMasterKey
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|keyId
operator|==
name|currentMasterKey
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
condition|)
block|{
name|masterKeyToUse
operator|=
name|currentMasterKey
expr_stmt|;
block|}
if|if
condition|(
name|masterKeyToUse
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|password
init|=
name|retrivePasswordInternal
argument_list|(
name|identifier
argument_list|,
name|masterKeyToUse
argument_list|)
decl_stmt|;
if|if
condition|(
name|masterKeyToUse
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
operator|!=
name|oldMasterKey
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
condition|)
block|{
name|oldMasterKeys
operator|.
name|put
argument_list|(
name|appAttemptId
argument_list|,
name|masterKeyToUse
argument_list|)
expr_stmt|;
block|}
return|return
name|password
return|;
block|}
throw|throw
operator|new
name|InvalidToken
argument_list|(
literal|"Given NMToken for application : "
operator|+
name|appAttemptId
operator|.
name|toString
argument_list|()
operator|+
literal|" seems to have been generated illegally."
argument_list|)
throw|;
block|}
DECL|method|appFinished (ApplicationAttemptId appAttemptId)
specifier|public
specifier|synchronized
name|void
name|appFinished
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
block|{
name|this
operator|.
name|oldMasterKeys
operator|.
name|remove
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

