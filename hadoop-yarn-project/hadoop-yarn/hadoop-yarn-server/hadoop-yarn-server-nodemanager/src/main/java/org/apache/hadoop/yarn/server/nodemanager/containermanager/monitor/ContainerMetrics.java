begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.monitor
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
package|;
end_package

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Histogram
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|UniformReservoir
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MetricsRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableGaugeInt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableGaugeLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableQuantiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableStat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
operator|.
name|Quantile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
operator|.
name|QuantileEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|Interns
operator|.
name|info
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|Metrics
argument_list|(
name|context
operator|=
literal|"container"
argument_list|)
DECL|class|ContainerMetrics
specifier|public
class|class
name|ContainerMetrics
implements|implements
name|MetricsSource
block|{
DECL|field|PMEM_LIMIT_METRIC_NAME
specifier|public
specifier|static
specifier|final
name|String
name|PMEM_LIMIT_METRIC_NAME
init|=
literal|"pMemLimitMBs"
decl_stmt|;
DECL|field|VMEM_LIMIT_METRIC_NAME
specifier|public
specifier|static
specifier|final
name|String
name|VMEM_LIMIT_METRIC_NAME
init|=
literal|"vMemLimitMBs"
decl_stmt|;
DECL|field|VCORE_LIMIT_METRIC_NAME
specifier|public
specifier|static
specifier|final
name|String
name|VCORE_LIMIT_METRIC_NAME
init|=
literal|"vCoreLimit"
decl_stmt|;
DECL|field|PMEM_USAGE_METRIC_NAME
specifier|public
specifier|static
specifier|final
name|String
name|PMEM_USAGE_METRIC_NAME
init|=
literal|"pMemUsageMBs"
decl_stmt|;
DECL|field|PMEM_USAGE_QUANTILES_NAME
specifier|public
specifier|static
specifier|final
name|String
name|PMEM_USAGE_QUANTILES_NAME
init|=
literal|"pMemUsageMBHistogram"
decl_stmt|;
DECL|field|LAUNCH_DURATION_METRIC_NAME
specifier|public
specifier|static
specifier|final
name|String
name|LAUNCH_DURATION_METRIC_NAME
init|=
literal|"launchDurationMs"
decl_stmt|;
DECL|field|LOCALIZATION_DURATION_METRIC_NAME
specifier|public
specifier|static
specifier|final
name|String
name|LOCALIZATION_DURATION_METRIC_NAME
init|=
literal|"localizationDurationMs"
decl_stmt|;
DECL|field|PHY_CPU_USAGE_METRIC_NAME
specifier|private
specifier|static
specifier|final
name|String
name|PHY_CPU_USAGE_METRIC_NAME
init|=
literal|"pCpuUsagePercent"
decl_stmt|;
DECL|field|PHY_CPU_USAGE_QUANTILES_NAME
specifier|private
specifier|static
specifier|final
name|String
name|PHY_CPU_USAGE_QUANTILES_NAME
init|=
literal|"pCpuUsagePercentHistogram"
decl_stmt|;
comment|// Use a multiplier of 1000 to avoid losing too much precision when
comment|// converting to integers
DECL|field|VCORE_USAGE_METRIC_NAME
specifier|private
specifier|static
specifier|final
name|String
name|VCORE_USAGE_METRIC_NAME
init|=
literal|"milliVcoreUsage"
decl_stmt|;
annotation|@
name|Metric
DECL|field|pMemMBsStat
specifier|public
name|MutableStat
name|pMemMBsStat
decl_stmt|;
annotation|@
name|Metric
DECL|field|pMemMBQuantiles
specifier|public
name|MutableQuantiles
name|pMemMBQuantiles
decl_stmt|;
comment|// This tracks overall CPU percentage of the machine in terms of percentage
comment|// of 1 core similar to top
comment|// Thus if you use 2 cores completely out of 4 available cores this value
comment|// will be 200
annotation|@
name|Metric
DECL|field|cpuCoreUsagePercent
specifier|public
name|MutableStat
name|cpuCoreUsagePercent
decl_stmt|;
annotation|@
name|Metric
DECL|field|cpuCoreUsagePercentQuantiles
specifier|public
name|MutableQuantiles
name|cpuCoreUsagePercentQuantiles
decl_stmt|;
annotation|@
name|Metric
DECL|field|milliVcoresUsed
specifier|public
name|MutableStat
name|milliVcoresUsed
decl_stmt|;
annotation|@
name|Metric
DECL|field|pMemLimitMbs
specifier|public
name|MutableGaugeInt
name|pMemLimitMbs
decl_stmt|;
annotation|@
name|Metric
DECL|field|vMemLimitMbs
specifier|public
name|MutableGaugeInt
name|vMemLimitMbs
decl_stmt|;
annotation|@
name|Metric
DECL|field|cpuVcoreLimit
specifier|public
name|MutableGaugeInt
name|cpuVcoreLimit
decl_stmt|;
annotation|@
name|Metric
DECL|field|launchDurationMs
specifier|public
name|MutableGaugeLong
name|launchDurationMs
decl_stmt|;
annotation|@
name|Metric
DECL|field|localizationDurationMs
specifier|public
name|MutableGaugeLong
name|localizationDurationMs
decl_stmt|;
annotation|@
name|Metric
DECL|field|startTime
specifier|public
name|MutableGaugeLong
name|startTime
decl_stmt|;
annotation|@
name|Metric
DECL|field|finishTime
specifier|public
name|MutableGaugeLong
name|finishTime
decl_stmt|;
annotation|@
name|Metric
DECL|field|exitCode
specifier|public
name|MutableGaugeInt
name|exitCode
decl_stmt|;
DECL|field|RECORD_INFO
specifier|static
specifier|final
name|MetricsInfo
name|RECORD_INFO
init|=
name|info
argument_list|(
literal|"ContainerResource"
argument_list|,
literal|"Resource limit and usage by container"
argument_list|)
decl_stmt|;
DECL|field|PROCESSID_INFO
specifier|public
specifier|static
specifier|final
name|MetricsInfo
name|PROCESSID_INFO
init|=
name|info
argument_list|(
literal|"ContainerPid"
argument_list|,
literal|"Container Process Id"
argument_list|)
decl_stmt|;
DECL|field|recordInfo
specifier|final
name|MetricsInfo
name|recordInfo
decl_stmt|;
DECL|field|registry
specifier|final
name|MetricsRegistry
name|registry
decl_stmt|;
DECL|field|containerId
specifier|final
name|ContainerId
name|containerId
decl_stmt|;
DECL|field|metricsSystem
specifier|final
name|MetricsSystem
name|metricsSystem
decl_stmt|;
comment|// Metrics publishing status
DECL|field|flushPeriodMs
specifier|private
specifier|final
name|long
name|flushPeriodMs
decl_stmt|;
DECL|field|unregisterDelayMs
specifier|private
specifier|final
name|long
name|unregisterDelayMs
decl_stmt|;
DECL|field|flushOnPeriod
specifier|private
name|boolean
name|flushOnPeriod
init|=
literal|false
decl_stmt|;
comment|// true if period elapsed
DECL|field|finished
specifier|private
name|boolean
name|finished
init|=
literal|false
decl_stmt|;
comment|// true if container finished
DECL|field|timer
specifier|private
name|Timer
name|timer
decl_stmt|;
comment|// lazily initialized
comment|/**    * Simple metrics cache to help prevent re-registrations.    */
specifier|private
specifier|final
specifier|static
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|ContainerMetrics
argument_list|>
DECL|field|usageMetrics
name|usageMetrics
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Create a timer to unregister container metrics,
comment|// whose associated thread run as a daemon.
DECL|field|unregisterContainerMetricsTimer
specifier|private
specifier|final
specifier|static
name|Timer
name|unregisterContainerMetricsTimer
init|=
operator|new
name|Timer
argument_list|(
literal|"Container metrics unregistration"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
DECL|method|ContainerMetrics ( MetricsSystem ms, ContainerId containerId, long flushPeriodMs, long delayMs)
name|ContainerMetrics
parameter_list|(
name|MetricsSystem
name|ms
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|long
name|flushPeriodMs
parameter_list|,
name|long
name|delayMs
parameter_list|)
block|{
name|this
operator|.
name|recordInfo
operator|=
name|info
argument_list|(
name|sourceName
argument_list|(
name|containerId
argument_list|)
argument_list|,
name|RECORD_INFO
operator|.
name|description
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|registry
operator|=
operator|new
name|MetricsRegistry
argument_list|(
name|recordInfo
argument_list|)
expr_stmt|;
name|this
operator|.
name|metricsSystem
operator|=
name|ms
expr_stmt|;
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
name|this
operator|.
name|flushPeriodMs
operator|=
name|flushPeriodMs
expr_stmt|;
name|this
operator|.
name|unregisterDelayMs
operator|=
name|delayMs
operator|<
literal|0
condition|?
literal|0
else|:
name|delayMs
expr_stmt|;
name|scheduleTimerTaskIfRequired
argument_list|()
expr_stmt|;
name|this
operator|.
name|pMemMBsStat
operator|=
name|registry
operator|.
name|newStat
argument_list|(
name|PMEM_USAGE_METRIC_NAME
argument_list|,
literal|"Physical memory stats"
argument_list|,
literal|"Usage"
argument_list|,
literal|"MBs"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|pMemMBQuantiles
operator|=
name|registry
operator|.
name|newQuantiles
argument_list|(
name|PMEM_USAGE_QUANTILES_NAME
argument_list|,
literal|"Physical memory quantiles"
argument_list|,
literal|"Usage"
argument_list|,
literal|"MBs"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ContainerMetricsQuantiles
name|memEstimator
init|=
operator|new
name|ContainerMetricsQuantiles
argument_list|(
name|MutableQuantiles
operator|.
name|quantiles
argument_list|)
decl_stmt|;
name|pMemMBQuantiles
operator|.
name|setEstimator
argument_list|(
name|memEstimator
argument_list|)
expr_stmt|;
name|this
operator|.
name|cpuCoreUsagePercent
operator|=
name|registry
operator|.
name|newStat
argument_list|(
name|PHY_CPU_USAGE_METRIC_NAME
argument_list|,
literal|"Physical Cpu core percent usage stats"
argument_list|,
literal|"Usage"
argument_list|,
literal|"Percents"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|cpuCoreUsagePercentQuantiles
operator|=
name|registry
operator|.
name|newQuantiles
argument_list|(
name|PHY_CPU_USAGE_QUANTILES_NAME
argument_list|,
literal|"Physical Cpu core percent usage quantiles"
argument_list|,
literal|"Usage"
argument_list|,
literal|"Percents"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ContainerMetricsQuantiles
name|cpuEstimator
init|=
operator|new
name|ContainerMetricsQuantiles
argument_list|(
name|MutableQuantiles
operator|.
name|quantiles
argument_list|)
decl_stmt|;
name|cpuCoreUsagePercentQuantiles
operator|.
name|setEstimator
argument_list|(
name|cpuEstimator
argument_list|)
expr_stmt|;
name|this
operator|.
name|milliVcoresUsed
operator|=
name|registry
operator|.
name|newStat
argument_list|(
name|VCORE_USAGE_METRIC_NAME
argument_list|,
literal|"1000 times Vcore usage"
argument_list|,
literal|"Usage"
argument_list|,
literal|"MilliVcores"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|pMemLimitMbs
operator|=
name|registry
operator|.
name|newGauge
argument_list|(
name|PMEM_LIMIT_METRIC_NAME
argument_list|,
literal|"Physical memory limit in MBs"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|vMemLimitMbs
operator|=
name|registry
operator|.
name|newGauge
argument_list|(
name|VMEM_LIMIT_METRIC_NAME
argument_list|,
literal|"Virtual memory limit in MBs"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|cpuVcoreLimit
operator|=
name|registry
operator|.
name|newGauge
argument_list|(
name|VCORE_LIMIT_METRIC_NAME
argument_list|,
literal|"CPU limit in number of vcores"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|launchDurationMs
operator|=
name|registry
operator|.
name|newGauge
argument_list|(
name|LAUNCH_DURATION_METRIC_NAME
argument_list|,
literal|"Launch duration in MS"
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|this
operator|.
name|localizationDurationMs
operator|=
name|registry
operator|.
name|newGauge
argument_list|(
name|LOCALIZATION_DURATION_METRIC_NAME
argument_list|,
literal|"Localization duration in MS"
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
DECL|method|tag (MetricsInfo info, ContainerId containerId)
name|ContainerMetrics
name|tag
parameter_list|(
name|MetricsInfo
name|info
parameter_list|,
name|ContainerId
name|containerId
parameter_list|)
block|{
name|registry
operator|.
name|tag
argument_list|(
name|info
argument_list|,
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|sourceName (ContainerId containerId)
specifier|static
name|String
name|sourceName
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
return|return
name|RECORD_INFO
operator|.
name|name
argument_list|()
operator|+
literal|"_"
operator|+
name|containerId
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|forContainer ( ContainerId containerId, long flushPeriodMs, long delayMs)
specifier|public
specifier|static
name|ContainerMetrics
name|forContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|long
name|flushPeriodMs
parameter_list|,
name|long
name|delayMs
parameter_list|)
block|{
return|return
name|forContainer
argument_list|(
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
argument_list|,
name|containerId
argument_list|,
name|flushPeriodMs
argument_list|,
name|delayMs
argument_list|)
return|;
block|}
DECL|method|getContainerMetrics ( ContainerId containerId)
specifier|public
specifier|synchronized
specifier|static
name|ContainerMetrics
name|getContainerMetrics
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
comment|// could be null
return|return
name|usageMetrics
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
return|;
block|}
DECL|method|forContainer ( MetricsSystem ms, ContainerId containerId, long flushPeriodMs, long delayMs)
specifier|synchronized
specifier|static
name|ContainerMetrics
name|forContainer
parameter_list|(
name|MetricsSystem
name|ms
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|long
name|flushPeriodMs
parameter_list|,
name|long
name|delayMs
parameter_list|)
block|{
name|ContainerMetrics
name|metrics
init|=
name|usageMetrics
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|metrics
operator|==
literal|null
condition|)
block|{
name|metrics
operator|=
operator|new
name|ContainerMetrics
argument_list|(
name|ms
argument_list|,
name|containerId
argument_list|,
name|flushPeriodMs
argument_list|,
name|delayMs
argument_list|)
operator|.
name|tag
argument_list|(
name|RECORD_INFO
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
comment|// Register with the MetricsSystems
if|if
condition|(
name|ms
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|=
name|ms
operator|.
name|register
argument_list|(
name|sourceName
argument_list|(
name|containerId
argument_list|)
argument_list|,
literal|"Metrics for container: "
operator|+
name|containerId
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
block|}
name|usageMetrics
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
block|}
return|return
name|metrics
return|;
block|}
DECL|method|unregisterContainerMetrics (ContainerMetrics cm)
specifier|synchronized
specifier|static
name|void
name|unregisterContainerMetrics
parameter_list|(
name|ContainerMetrics
name|cm
parameter_list|)
block|{
name|cm
operator|.
name|metricsSystem
operator|.
name|unregisterSource
argument_list|(
name|cm
operator|.
name|recordInfo
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|usageMetrics
operator|.
name|remove
argument_list|(
name|cm
operator|.
name|containerId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMetrics (MetricsCollector collector, boolean all)
specifier|public
specifier|synchronized
name|void
name|getMetrics
parameter_list|(
name|MetricsCollector
name|collector
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
comment|//Container goes through registered -> finished -> unregistered.
if|if
condition|(
name|finished
operator|||
name|flushOnPeriod
condition|)
block|{
name|registry
operator|.
name|snapshot
argument_list|(
name|collector
operator|.
name|addRecord
argument_list|(
name|registry
operator|.
name|info
argument_list|()
argument_list|)
argument_list|,
name|all
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|finished
operator|&&
name|flushOnPeriod
condition|)
block|{
name|flushOnPeriod
operator|=
literal|false
expr_stmt|;
name|scheduleTimerTaskIfRequired
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|finished ()
specifier|public
specifier|synchronized
name|void
name|finished
parameter_list|()
block|{
if|if
condition|(
operator|!
name|finished
condition|)
block|{
name|this
operator|.
name|finished
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|timer
operator|!=
literal|null
condition|)
block|{
name|timer
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|timer
operator|=
literal|null
expr_stmt|;
block|}
name|scheduleTimerTaskForUnregistration
argument_list|()
expr_stmt|;
name|this
operator|.
name|pMemMBQuantiles
operator|.
name|stop
argument_list|()
expr_stmt|;
name|this
operator|.
name|cpuCoreUsagePercentQuantiles
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|recordMemoryUsage (int memoryMBs)
specifier|public
name|void
name|recordMemoryUsage
parameter_list|(
name|int
name|memoryMBs
parameter_list|)
block|{
if|if
condition|(
name|memoryMBs
operator|>=
literal|0
condition|)
block|{
name|this
operator|.
name|pMemMBsStat
operator|.
name|add
argument_list|(
name|memoryMBs
argument_list|)
expr_stmt|;
name|this
operator|.
name|pMemMBQuantiles
operator|.
name|add
argument_list|(
name|memoryMBs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|recordCpuUsage ( int totalPhysicalCpuPercent, int milliVcoresUsed)
specifier|public
name|void
name|recordCpuUsage
parameter_list|(
name|int
name|totalPhysicalCpuPercent
parameter_list|,
name|int
name|milliVcoresUsed
parameter_list|)
block|{
if|if
condition|(
name|totalPhysicalCpuPercent
operator|>=
literal|0
condition|)
block|{
name|this
operator|.
name|cpuCoreUsagePercent
operator|.
name|add
argument_list|(
name|totalPhysicalCpuPercent
argument_list|)
expr_stmt|;
name|this
operator|.
name|cpuCoreUsagePercentQuantiles
operator|.
name|add
argument_list|(
name|totalPhysicalCpuPercent
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|milliVcoresUsed
operator|>=
literal|0
condition|)
block|{
name|this
operator|.
name|milliVcoresUsed
operator|.
name|add
argument_list|(
name|milliVcoresUsed
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|recordProcessId (String processId)
specifier|public
name|void
name|recordProcessId
parameter_list|(
name|String
name|processId
parameter_list|)
block|{
name|registry
operator|.
name|tag
argument_list|(
name|PROCESSID_INFO
argument_list|,
name|processId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|recordResourceLimit (int vmemLimit, int pmemLimit, int cpuVcores)
specifier|public
name|void
name|recordResourceLimit
parameter_list|(
name|int
name|vmemLimit
parameter_list|,
name|int
name|pmemLimit
parameter_list|,
name|int
name|cpuVcores
parameter_list|)
block|{
name|this
operator|.
name|vMemLimitMbs
operator|.
name|set
argument_list|(
name|vmemLimit
argument_list|)
expr_stmt|;
name|this
operator|.
name|pMemLimitMbs
operator|.
name|set
argument_list|(
name|pmemLimit
argument_list|)
expr_stmt|;
name|this
operator|.
name|cpuVcoreLimit
operator|.
name|set
argument_list|(
name|cpuVcores
argument_list|)
expr_stmt|;
block|}
DECL|method|recordStateChangeDurations (long launchDuration, long localizationDuration)
specifier|public
name|void
name|recordStateChangeDurations
parameter_list|(
name|long
name|launchDuration
parameter_list|,
name|long
name|localizationDuration
parameter_list|)
block|{
name|this
operator|.
name|launchDurationMs
operator|.
name|set
argument_list|(
name|launchDuration
argument_list|)
expr_stmt|;
name|this
operator|.
name|localizationDurationMs
operator|.
name|set
argument_list|(
name|localizationDuration
argument_list|)
expr_stmt|;
block|}
DECL|method|recordStartTime (long startTime)
specifier|public
name|void
name|recordStartTime
parameter_list|(
name|long
name|startTime
parameter_list|)
block|{
name|this
operator|.
name|startTime
operator|.
name|set
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
block|}
DECL|method|recordFinishTimeAndExitCode (long finishTime, int exitCode)
specifier|public
name|void
name|recordFinishTimeAndExitCode
parameter_list|(
name|long
name|finishTime
parameter_list|,
name|int
name|exitCode
parameter_list|)
block|{
name|this
operator|.
name|finishTime
operator|.
name|set
argument_list|(
name|finishTime
argument_list|)
expr_stmt|;
name|this
operator|.
name|exitCode
operator|.
name|set
argument_list|(
name|exitCode
argument_list|)
expr_stmt|;
block|}
DECL|method|scheduleTimerTaskIfRequired ()
specifier|private
specifier|synchronized
name|void
name|scheduleTimerTaskIfRequired
parameter_list|()
block|{
if|if
condition|(
name|flushPeriodMs
operator|>
literal|0
condition|)
block|{
comment|// Lazily initialize timer
if|if
condition|(
name|timer
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|timer
operator|=
operator|new
name|Timer
argument_list|(
literal|"Metrics flush checker"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|TimerTask
name|timerTask
init|=
operator|new
name|TimerTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
synchronized|synchronized
init|(
name|ContainerMetrics
operator|.
name|this
init|)
block|{
if|if
condition|(
operator|!
name|finished
condition|)
block|{
name|flushOnPeriod
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
name|timer
operator|.
name|schedule
argument_list|(
name|timerTask
argument_list|,
name|flushPeriodMs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|scheduleTimerTaskForUnregistration ()
specifier|private
name|void
name|scheduleTimerTaskForUnregistration
parameter_list|()
block|{
name|TimerTask
name|timerTask
init|=
operator|new
name|TimerTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ContainerMetrics
operator|.
name|unregisterContainerMetrics
argument_list|(
name|ContainerMetrics
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|unregisterContainerMetricsTimer
operator|.
name|schedule
argument_list|(
name|timerTask
argument_list|,
name|unregisterDelayMs
argument_list|)
expr_stmt|;
block|}
DECL|class|ContainerMetricsQuantiles
specifier|public
specifier|static
class|class
name|ContainerMetricsQuantiles
implements|implements
name|QuantileEstimator
block|{
DECL|field|histogram
specifier|private
specifier|final
name|Histogram
name|histogram
init|=
operator|new
name|Histogram
argument_list|(
operator|new
name|UniformReservoir
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|quantiles
specifier|private
name|Quantile
index|[]
name|quantiles
decl_stmt|;
DECL|method|ContainerMetricsQuantiles (Quantile[] q)
name|ContainerMetricsQuantiles
parameter_list|(
name|Quantile
index|[]
name|q
parameter_list|)
block|{
name|quantiles
operator|=
name|q
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|insert (long value)
specifier|public
specifier|synchronized
name|void
name|insert
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|histogram
operator|.
name|update
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCount ()
specifier|synchronized
specifier|public
name|long
name|getCount
parameter_list|()
block|{
return|return
name|histogram
operator|.
name|getCount
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|synchronized
specifier|public
name|void
name|clear
parameter_list|()
block|{
comment|// don't do anything because we want metrics over the lifetime of the
comment|// container
block|}
annotation|@
name|Override
DECL|method|snapshot ()
specifier|public
specifier|synchronized
name|Map
argument_list|<
name|Quantile
argument_list|,
name|Long
argument_list|>
name|snapshot
parameter_list|()
block|{
name|Snapshot
name|snapshot
init|=
name|histogram
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Quantile
argument_list|,
name|Long
argument_list|>
name|values
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Quantile
name|quantile
range|:
name|quantiles
control|)
block|{
name|values
operator|.
name|put
argument_list|(
name|quantile
argument_list|,
operator|(
name|long
operator|)
name|snapshot
operator|.
name|getValue
argument_list|(
name|quantile
operator|.
name|quantile
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
block|}
block|}
end_class

end_unit

