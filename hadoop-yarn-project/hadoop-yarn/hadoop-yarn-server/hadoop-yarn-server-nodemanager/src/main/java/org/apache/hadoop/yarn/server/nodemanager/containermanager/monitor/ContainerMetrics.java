begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.monitor
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MetricsRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableStat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|Interns
operator|.
name|info
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|Metrics
argument_list|(
name|context
operator|=
literal|"container"
argument_list|)
DECL|class|ContainerMetrics
specifier|public
class|class
name|ContainerMetrics
implements|implements
name|MetricsSource
block|{
annotation|@
name|Metric
DECL|field|pMemMBsStat
specifier|public
name|MutableStat
name|pMemMBsStat
decl_stmt|;
DECL|field|RECORD_INFO
specifier|static
specifier|final
name|MetricsInfo
name|RECORD_INFO
init|=
name|info
argument_list|(
literal|"ContainerUsage"
argument_list|,
literal|"Resource usage by container"
argument_list|)
decl_stmt|;
DECL|field|recordInfo
specifier|final
name|MetricsInfo
name|recordInfo
decl_stmt|;
DECL|field|registry
specifier|final
name|MetricsRegistry
name|registry
decl_stmt|;
DECL|field|containerId
specifier|final
name|ContainerId
name|containerId
decl_stmt|;
DECL|field|metricsSystem
specifier|final
name|MetricsSystem
name|metricsSystem
decl_stmt|;
comment|// Metrics publishing status
DECL|field|flushPeriodMs
specifier|private
name|long
name|flushPeriodMs
decl_stmt|;
DECL|field|flushOnPeriod
specifier|private
name|boolean
name|flushOnPeriod
init|=
literal|false
decl_stmt|;
comment|// true if period elapsed
DECL|field|finished
specifier|private
name|boolean
name|finished
init|=
literal|false
decl_stmt|;
comment|// true if container finished
DECL|field|unregister
specifier|private
name|boolean
name|unregister
init|=
literal|false
decl_stmt|;
comment|// unregister
DECL|field|timer
specifier|private
name|Timer
name|timer
decl_stmt|;
comment|// lazily initialized
comment|/**    * Simple metrics cache to help prevent re-registrations.    */
specifier|protected
specifier|final
specifier|static
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|ContainerMetrics
argument_list|>
DECL|field|usageMetrics
name|usageMetrics
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|ContainerMetrics ( MetricsSystem ms, ContainerId containerId, long flushPeriodMs)
name|ContainerMetrics
parameter_list|(
name|MetricsSystem
name|ms
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|long
name|flushPeriodMs
parameter_list|)
block|{
name|this
operator|.
name|recordInfo
operator|=
name|info
argument_list|(
name|sourceName
argument_list|(
name|containerId
argument_list|)
argument_list|,
name|RECORD_INFO
operator|.
name|description
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|registry
operator|=
operator|new
name|MetricsRegistry
argument_list|(
name|recordInfo
argument_list|)
expr_stmt|;
name|this
operator|.
name|metricsSystem
operator|=
name|ms
expr_stmt|;
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
name|this
operator|.
name|flushPeriodMs
operator|=
name|flushPeriodMs
expr_stmt|;
name|scheduleTimerTaskIfRequired
argument_list|()
expr_stmt|;
name|this
operator|.
name|pMemMBsStat
operator|=
name|registry
operator|.
name|newStat
argument_list|(
literal|"pMem"
argument_list|,
literal|"Physical memory stats"
argument_list|,
literal|"Usage"
argument_list|,
literal|"MBs"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|tag (MetricsInfo info, ContainerId containerId)
name|ContainerMetrics
name|tag
parameter_list|(
name|MetricsInfo
name|info
parameter_list|,
name|ContainerId
name|containerId
parameter_list|)
block|{
name|registry
operator|.
name|tag
argument_list|(
name|info
argument_list|,
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|sourceName (ContainerId containerId)
specifier|static
name|String
name|sourceName
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
return|return
name|RECORD_INFO
operator|.
name|name
argument_list|()
operator|+
literal|"_"
operator|+
name|containerId
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|forContainer (ContainerId containerId)
specifier|public
specifier|static
name|ContainerMetrics
name|forContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
return|return
name|forContainer
argument_list|(
name|containerId
argument_list|,
operator|-
literal|1L
argument_list|)
return|;
block|}
DECL|method|forContainer ( ContainerId containerId, long flushPeriodMs)
specifier|public
specifier|static
name|ContainerMetrics
name|forContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|long
name|flushPeriodMs
parameter_list|)
block|{
return|return
name|forContainer
argument_list|(
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
argument_list|,
name|containerId
argument_list|,
name|flushPeriodMs
argument_list|)
return|;
block|}
DECL|method|forContainer ( MetricsSystem ms, ContainerId containerId, long flushPeriodMs)
specifier|synchronized
specifier|static
name|ContainerMetrics
name|forContainer
parameter_list|(
name|MetricsSystem
name|ms
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|long
name|flushPeriodMs
parameter_list|)
block|{
name|ContainerMetrics
name|metrics
init|=
name|usageMetrics
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|metrics
operator|==
literal|null
condition|)
block|{
name|metrics
operator|=
operator|new
name|ContainerMetrics
argument_list|(
name|ms
argument_list|,
name|containerId
argument_list|,
name|flushPeriodMs
argument_list|)
operator|.
name|tag
argument_list|(
name|RECORD_INFO
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
comment|// Register with the MetricsSystems
if|if
condition|(
name|ms
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|=
name|ms
operator|.
name|register
argument_list|(
name|sourceName
argument_list|(
name|containerId
argument_list|)
argument_list|,
literal|"Metrics for container: "
operator|+
name|containerId
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
block|}
name|usageMetrics
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
block|}
return|return
name|metrics
return|;
block|}
annotation|@
name|Override
DECL|method|getMetrics (MetricsCollector collector, boolean all)
specifier|public
specifier|synchronized
name|void
name|getMetrics
parameter_list|(
name|MetricsCollector
name|collector
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
comment|//Container goes through registered -> finished -> unregistered.
if|if
condition|(
name|unregister
condition|)
block|{
name|metricsSystem
operator|.
name|unregisterSource
argument_list|(
name|recordInfo
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|usageMetrics
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|finished
operator|||
name|flushOnPeriod
condition|)
block|{
name|registry
operator|.
name|snapshot
argument_list|(
name|collector
operator|.
name|addRecord
argument_list|(
name|registry
operator|.
name|info
argument_list|()
argument_list|)
argument_list|,
name|all
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|finished
condition|)
block|{
name|this
operator|.
name|unregister
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flushOnPeriod
condition|)
block|{
name|flushOnPeriod
operator|=
literal|false
expr_stmt|;
name|scheduleTimerTaskIfRequired
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|finished ()
specifier|public
specifier|synchronized
name|void
name|finished
parameter_list|()
block|{
name|this
operator|.
name|finished
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|timer
operator|!=
literal|null
condition|)
block|{
name|timer
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|timer
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|recordMemoryUsage (int memoryMBs)
specifier|public
name|void
name|recordMemoryUsage
parameter_list|(
name|int
name|memoryMBs
parameter_list|)
block|{
name|this
operator|.
name|pMemMBsStat
operator|.
name|add
argument_list|(
name|memoryMBs
argument_list|)
expr_stmt|;
block|}
DECL|method|scheduleTimerTaskIfRequired ()
specifier|private
specifier|synchronized
name|void
name|scheduleTimerTaskIfRequired
parameter_list|()
block|{
if|if
condition|(
name|flushPeriodMs
operator|>
literal|0
condition|)
block|{
comment|// Lazily initialize timer
if|if
condition|(
name|timer
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|timer
operator|=
operator|new
name|Timer
argument_list|(
literal|"Metrics flush checker"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|TimerTask
name|timerTask
init|=
operator|new
name|TimerTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
synchronized|synchronized
init|(
name|ContainerMetrics
operator|.
name|this
init|)
block|{
if|if
condition|(
operator|!
name|finished
condition|)
block|{
name|flushOnPeriod
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
name|timer
operator|.
name|schedule
argument_list|(
name|timerTask
argument_list|,
name|flushPeriodMs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

