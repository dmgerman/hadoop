begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|RecoveryIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|MasterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMNullStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
operator|.
name|RecoveredContainerTokensState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|BaseContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|MasterKeyData
import|;
end_import

begin_comment
comment|/**  * The NM maintains only two master-keys. The current key that RM knows and the  * key from the previous rolling-interval.  *   */
end_comment

begin_class
DECL|class|NMContainerTokenSecretManager
specifier|public
class|class
name|NMContainerTokenSecretManager
extends|extends
name|BaseContainerTokenSecretManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NMContainerTokenSecretManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|previousMasterKey
specifier|private
name|MasterKeyData
name|previousMasterKey
decl_stmt|;
DECL|field|recentlyStartedContainerTracker
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|ContainerId
argument_list|>
argument_list|>
name|recentlyStartedContainerTracker
decl_stmt|;
DECL|field|stateStore
specifier|private
specifier|final
name|NMStateStoreService
name|stateStore
decl_stmt|;
DECL|field|nodeHostAddr
specifier|private
name|String
name|nodeHostAddr
decl_stmt|;
DECL|method|NMContainerTokenSecretManager (Configuration conf)
specifier|public
name|NMContainerTokenSecretManager
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
operator|new
name|NMNullStateStoreService
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|NMContainerTokenSecretManager (Configuration conf, NMStateStoreService stateStore)
specifier|public
name|NMContainerTokenSecretManager
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|NMStateStoreService
name|stateStore
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|recentlyStartedContainerTracker
operator|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|ContainerId
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|stateStore
operator|=
name|stateStore
expr_stmt|;
block|}
DECL|method|recover ()
specifier|public
specifier|synchronized
name|void
name|recover
parameter_list|()
throws|throws
name|IOException
block|{
name|RecoveredContainerTokensState
name|state
init|=
name|stateStore
operator|.
name|loadContainerTokensState
argument_list|()
decl_stmt|;
name|MasterKey
name|key
init|=
name|state
operator|.
name|getCurrentMasterKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|currentMasterKey
operator|=
operator|new
name|MasterKeyData
argument_list|(
name|key
argument_list|,
name|createSecretKey
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|key
operator|=
name|state
operator|.
name|getPreviousMasterKey
argument_list|()
expr_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|previousMasterKey
operator|=
operator|new
name|MasterKeyData
argument_list|(
name|key
argument_list|,
name|createSecretKey
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// restore the serial number from the current master key
if|if
condition|(
name|super
operator|.
name|currentMasterKey
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|serialNo
operator|=
name|super
operator|.
name|currentMasterKey
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
try|try
init|(
name|RecoveryIterator
argument_list|<
name|Entry
argument_list|<
name|ContainerId
argument_list|,
name|Long
argument_list|>
argument_list|>
name|it
init|=
name|state
operator|.
name|getIterator
argument_list|()
init|)
block|{
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|ContainerId
argument_list|,
name|Long
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Long
name|expTime
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containerList
init|=
name|recentlyStartedContainerTracker
operator|.
name|get
argument_list|(
name|expTime
argument_list|)
decl_stmt|;
if|if
condition|(
name|containerList
operator|==
literal|null
condition|)
block|{
name|containerList
operator|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
expr_stmt|;
name|recentlyStartedContainerTracker
operator|.
name|put
argument_list|(
name|expTime
argument_list|,
name|containerList
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|containerList
operator|.
name|contains
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|containerList
operator|.
name|add
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|updateCurrentMasterKey (MasterKeyData key)
specifier|private
name|void
name|updateCurrentMasterKey
parameter_list|(
name|MasterKeyData
name|key
parameter_list|)
block|{
name|super
operator|.
name|currentMasterKey
operator|=
name|key
expr_stmt|;
try|try
block|{
name|stateStore
operator|.
name|storeContainerTokenCurrentMasterKey
argument_list|(
name|key
operator|.
name|getMasterKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to update current master key in state store"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updatePreviousMasterKey (MasterKeyData key)
specifier|private
name|void
name|updatePreviousMasterKey
parameter_list|(
name|MasterKeyData
name|key
parameter_list|)
block|{
name|previousMasterKey
operator|=
name|key
expr_stmt|;
try|try
block|{
name|stateStore
operator|.
name|storeContainerTokenPreviousMasterKey
argument_list|(
name|key
operator|.
name|getMasterKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to update previous master key in state store"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Used by NodeManagers to create a token-secret-manager with the key obtained    * from the RM. This can happen during registration or when the RM rolls the    * master-key and signals the NM.    *     * @param masterKeyRecord    */
annotation|@
name|Private
DECL|method|setMasterKey (MasterKey masterKeyRecord)
specifier|public
specifier|synchronized
name|void
name|setMasterKey
parameter_list|(
name|MasterKey
name|masterKeyRecord
parameter_list|)
block|{
comment|// Update keys only if the key has changed.
if|if
condition|(
name|super
operator|.
name|currentMasterKey
operator|==
literal|null
operator|||
name|super
operator|.
name|currentMasterKey
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
operator|!=
name|masterKeyRecord
operator|.
name|getKeyId
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Rolling master-key for container-tokens, got key with id "
operator|+
name|masterKeyRecord
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|super
operator|.
name|currentMasterKey
operator|!=
literal|null
condition|)
block|{
name|updatePreviousMasterKey
argument_list|(
name|super
operator|.
name|currentMasterKey
argument_list|)
expr_stmt|;
block|}
name|updateCurrentMasterKey
argument_list|(
operator|new
name|MasterKeyData
argument_list|(
name|masterKeyRecord
argument_list|,
name|createSecretKey
argument_list|(
name|masterKeyRecord
operator|.
name|getBytes
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Override of this is to validate ContainerTokens generated by using    * different {@link MasterKey}s.    */
annotation|@
name|Override
DECL|method|retrievePassword ( ContainerTokenIdentifier identifier)
specifier|public
specifier|synchronized
name|byte
index|[]
name|retrievePassword
parameter_list|(
name|ContainerTokenIdentifier
name|identifier
parameter_list|)
throws|throws
name|SecretManager
operator|.
name|InvalidToken
block|{
name|int
name|keyId
init|=
name|identifier
operator|.
name|getMasterKeyId
argument_list|()
decl_stmt|;
name|MasterKeyData
name|masterKeyToUse
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|previousMasterKey
operator|!=
literal|null
operator|&&
name|keyId
operator|==
name|this
operator|.
name|previousMasterKey
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
condition|)
block|{
comment|// A container-launch has come in with a token generated off the last
comment|// master-key
name|masterKeyToUse
operator|=
name|this
operator|.
name|previousMasterKey
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|keyId
operator|==
name|super
operator|.
name|currentMasterKey
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
condition|)
block|{
comment|// A container-launch has come in with a token generated off the current
comment|// master-key
name|masterKeyToUse
operator|=
name|super
operator|.
name|currentMasterKey
expr_stmt|;
block|}
if|if
condition|(
name|nodeHostAddr
operator|!=
literal|null
operator|&&
operator|!
name|identifier
operator|.
name|getNmHostAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeHostAddr
argument_list|)
condition|)
block|{
comment|// Valid container token used for incorrect node.
throw|throw
operator|new
name|SecretManager
operator|.
name|InvalidToken
argument_list|(
literal|"Given Container "
operator|+
name|identifier
operator|.
name|getContainerID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" identifier is not valid for current Node manager. Expected : "
operator|+
name|nodeHostAddr
operator|+
literal|" Found : "
operator|+
name|identifier
operator|.
name|getNmHostAddress
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|masterKeyToUse
operator|!=
literal|null
condition|)
block|{
return|return
name|retrievePasswordInternal
argument_list|(
name|identifier
argument_list|,
name|masterKeyToUse
argument_list|)
return|;
block|}
comment|// Invalid request. Like startContainer() with token generated off
comment|// old-master-keys.
throw|throw
operator|new
name|SecretManager
operator|.
name|InvalidToken
argument_list|(
literal|"Given Container "
operator|+
name|identifier
operator|.
name|getContainerID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" seems to have an illegally generated token."
argument_list|)
throw|;
block|}
comment|/**    * Container start has gone through. We need to store the containerId in order    * to block future container start requests with same container token. This    * container token needs to be saved till its container token expires.    */
DECL|method|startContainerSuccessful ( ContainerTokenIdentifier tokenId)
specifier|public
specifier|synchronized
name|void
name|startContainerSuccessful
parameter_list|(
name|ContainerTokenIdentifier
name|tokenId
parameter_list|)
block|{
name|removeAnyContainerTokenIfExpired
argument_list|()
expr_stmt|;
name|ContainerId
name|containerId
init|=
name|tokenId
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|Long
name|expTime
init|=
name|tokenId
operator|.
name|getExpiryTimeStamp
argument_list|()
decl_stmt|;
comment|// We might have multiple containers with same expiration time.
if|if
condition|(
operator|!
name|recentlyStartedContainerTracker
operator|.
name|containsKey
argument_list|(
name|expTime
argument_list|)
condition|)
block|{
name|recentlyStartedContainerTracker
operator|.
name|put
argument_list|(
name|expTime
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|recentlyStartedContainerTracker
operator|.
name|get
argument_list|(
name|expTime
argument_list|)
operator|.
name|add
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
try|try
block|{
name|stateStore
operator|.
name|storeContainerToken
argument_list|(
name|containerId
argument_list|,
name|expTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to store token for container "
operator|+
name|containerId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removeAnyContainerTokenIfExpired ()
specifier|protected
specifier|synchronized
name|void
name|removeAnyContainerTokenIfExpired
parameter_list|()
block|{
comment|// Trying to remove any container if its container token has expired.
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|ContainerId
argument_list|>
argument_list|>
argument_list|>
name|containersI
init|=
name|this
operator|.
name|recentlyStartedContainerTracker
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Long
name|currTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|containersI
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|ContainerId
argument_list|>
argument_list|>
name|containerEntry
init|=
name|containersI
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|containerEntry
operator|.
name|getKey
argument_list|()
operator|<
name|currTime
condition|)
block|{
for|for
control|(
name|ContainerId
name|container
range|:
name|containerEntry
operator|.
name|getValue
argument_list|()
control|)
block|{
try|try
block|{
name|stateStore
operator|.
name|removeContainerToken
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to remove token for container "
operator|+
name|container
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|containersI
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
comment|/**    * Container will be remembered based on expiration time of the container    * token used for starting the container. It is safe to use expiration time    * as there is one to many mapping between expiration time and containerId.    * @return true if the current token identifier is not present in cache.    */
DECL|method|isValidStartContainerRequest ( ContainerTokenIdentifier containerTokenIdentifier)
specifier|public
specifier|synchronized
name|boolean
name|isValidStartContainerRequest
parameter_list|(
name|ContainerTokenIdentifier
name|containerTokenIdentifier
parameter_list|)
block|{
name|removeAnyContainerTokenIfExpired
argument_list|()
expr_stmt|;
name|Long
name|expTime
init|=
name|containerTokenIdentifier
operator|.
name|getExpiryTimeStamp
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containers
init|=
name|this
operator|.
name|recentlyStartedContainerTracker
operator|.
name|get
argument_list|(
name|expTime
argument_list|)
decl_stmt|;
if|if
condition|(
name|containers
operator|==
literal|null
operator|||
operator|!
name|containers
operator|.
name|contains
argument_list|(
name|containerTokenIdentifier
operator|.
name|getContainerID
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|setNodeId (NodeId nodeId)
specifier|public
specifier|synchronized
name|void
name|setNodeId
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|nodeHostAddr
operator|=
name|nodeId
operator|.
name|toString
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating node address : "
operator|+
name|nodeHostAddr
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

