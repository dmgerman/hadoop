begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|MasterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|BaseContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|MasterKeyData
import|;
end_import

begin_comment
comment|/**  * The NM maintains only two master-keys. The current key that RM knows and the  * key from the previous rolling-interval.  *   */
end_comment

begin_class
DECL|class|NMContainerTokenSecretManager
specifier|public
class|class
name|NMContainerTokenSecretManager
extends|extends
name|BaseContainerTokenSecretManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NMContainerTokenSecretManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|previousMasterKey
specifier|private
name|MasterKeyData
name|previousMasterKey
decl_stmt|;
DECL|field|oldMasterKeys
specifier|private
specifier|final
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ConcurrentMap
argument_list|<
name|ContainerId
argument_list|,
name|MasterKeyData
argument_list|>
argument_list|>
name|oldMasterKeys
decl_stmt|;
DECL|field|nodeHostAddr
specifier|private
name|String
name|nodeHostAddr
decl_stmt|;
DECL|method|NMContainerTokenSecretManager (Configuration conf)
specifier|public
name|NMContainerTokenSecretManager
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|oldMasterKeys
operator|=
operator|new
name|HashMap
argument_list|<
name|ApplicationId
argument_list|,
name|ConcurrentMap
argument_list|<
name|ContainerId
argument_list|,
name|MasterKeyData
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Used by NodeManagers to create a token-secret-manager with the key obtained    * from the RM. This can happen during registration or when the RM rolls the    * master-key and signals the NM.    *     * @param masterKeyRecord    */
annotation|@
name|Private
DECL|method|setMasterKey (MasterKey masterKeyRecord)
specifier|public
specifier|synchronized
name|void
name|setMasterKey
parameter_list|(
name|MasterKey
name|masterKeyRecord
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Rolling master-key for container-tokens, got key with id "
operator|+
name|masterKeyRecord
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|super
operator|.
name|currentMasterKey
operator|==
literal|null
condition|)
block|{
name|super
operator|.
name|currentMasterKey
operator|=
operator|new
name|MasterKeyData
argument_list|(
name|masterKeyRecord
argument_list|,
name|createSecretKey
argument_list|(
name|masterKeyRecord
operator|.
name|getBytes
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|super
operator|.
name|currentMasterKey
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
operator|!=
name|masterKeyRecord
operator|.
name|getKeyId
argument_list|()
condition|)
block|{
comment|// Update keys only if the key has changed.
name|this
operator|.
name|previousMasterKey
operator|=
name|super
operator|.
name|currentMasterKey
expr_stmt|;
name|super
operator|.
name|currentMasterKey
operator|=
operator|new
name|MasterKeyData
argument_list|(
name|masterKeyRecord
argument_list|,
name|createSecretKey
argument_list|(
name|masterKeyRecord
operator|.
name|getBytes
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Override of this is to validate ContainerTokens generated by using    * different {@link MasterKey}s.    */
annotation|@
name|Override
DECL|method|retrievePassword ( ContainerTokenIdentifier identifier)
specifier|public
specifier|synchronized
name|byte
index|[]
name|retrievePassword
parameter_list|(
name|ContainerTokenIdentifier
name|identifier
parameter_list|)
throws|throws
name|SecretManager
operator|.
name|InvalidToken
block|{
name|int
name|keyId
init|=
name|identifier
operator|.
name|getMasterKeyId
argument_list|()
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|identifier
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|MasterKeyData
name|masterKeyToUse
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|previousMasterKey
operator|!=
literal|null
operator|&&
name|keyId
operator|==
name|this
operator|.
name|previousMasterKey
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
condition|)
block|{
comment|// A container-launch has come in with a token generated off the last
comment|// master-key
name|masterKeyToUse
operator|=
name|this
operator|.
name|previousMasterKey
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|keyId
operator|==
name|super
operator|.
name|currentMasterKey
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
condition|)
block|{
comment|// A container-launch has come in with a token generated off the current
comment|// master-key
name|masterKeyToUse
operator|=
name|super
operator|.
name|currentMasterKey
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|oldMasterKeys
operator|.
name|containsKey
argument_list|(
name|appId
argument_list|)
operator|&&
name|this
operator|.
name|oldMasterKeys
operator|.
name|get
argument_list|(
name|appId
argument_list|)
operator|.
name|containsKey
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
comment|// This means on the following happened:
comment|// (1) a stopContainer() or a getStatus() happened for a container with
comment|// token generated off a master-key that is neither current nor the
comment|// previous one.
comment|// (2) a container-relaunch has come in with a token generated off a
comment|// master-key that is neither current nor the previous one.
comment|// This basically lets stop and getStatus() calls with old-tokens to pass
comment|// through without any issue, i.e. (1).
comment|// Start-calls for repetitive launches (2) also pass through RPC here, but
comment|// get thwarted at the app-layer as part of startContainer() call.
name|masterKeyToUse
operator|=
name|this
operator|.
name|oldMasterKeys
operator|.
name|get
argument_list|(
name|appId
argument_list|)
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodeHostAddr
operator|!=
literal|null
operator|&&
operator|!
name|identifier
operator|.
name|getNmHostAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeHostAddr
argument_list|)
condition|)
block|{
comment|// Valid container token used for incorrect node.
throw|throw
operator|new
name|SecretManager
operator|.
name|InvalidToken
argument_list|(
literal|"Given Container "
operator|+
name|identifier
operator|.
name|getContainerID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" identifier is not valid for current Node manager. Expected : "
operator|+
name|nodeHostAddr
operator|+
literal|" Found : "
operator|+
name|identifier
operator|.
name|getNmHostAddress
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|masterKeyToUse
operator|!=
literal|null
condition|)
block|{
return|return
name|retrievePasswordInternal
argument_list|(
name|identifier
argument_list|,
name|masterKeyToUse
argument_list|)
return|;
block|}
comment|// Invalid request. Like startContainer() with token generated off
comment|// old-master-keys.
throw|throw
operator|new
name|SecretManager
operator|.
name|InvalidToken
argument_list|(
literal|"Given Container "
operator|+
name|identifier
operator|.
name|getContainerID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" seems to have an illegally generated token."
argument_list|)
throw|;
block|}
comment|/**    * Container start has gone through. Store the corresponding keys so that    * stopContainer() and getContainerStatus() can be authenticated long after    * the container-start went through.    */
DECL|method|startContainerSuccessful ( ContainerTokenIdentifier tokenId)
specifier|public
specifier|synchronized
name|void
name|startContainerSuccessful
parameter_list|(
name|ContainerTokenIdentifier
name|tokenId
parameter_list|)
block|{
name|int
name|keyId
init|=
name|tokenId
operator|.
name|getMasterKeyId
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentMasterKey
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
operator|==
name|keyId
condition|)
block|{
name|addKeyForContainerId
argument_list|(
name|tokenId
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|currentMasterKey
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|previousMasterKey
operator|!=
literal|null
operator|&&
name|previousMasterKey
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
operator|==
name|keyId
condition|)
block|{
name|addKeyForContainerId
argument_list|(
name|tokenId
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|previousMasterKey
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Ensure the startContainer call is not using an older cached key. Will    * return false once startContainerSuccessful is called. Does not check    * the actual key being current since that is verified by the security layer    * via retrievePassword.    */
DECL|method|isValidStartContainerRequest ( ContainerId containerID)
specifier|public
specifier|synchronized
name|boolean
name|isValidStartContainerRequest
parameter_list|(
name|ContainerId
name|containerID
parameter_list|)
block|{
name|ApplicationId
name|applicationId
init|=
name|containerID
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
return|return
operator|!
name|this
operator|.
name|oldMasterKeys
operator|.
name|containsKey
argument_list|(
name|applicationId
argument_list|)
operator|||
operator|!
name|this
operator|.
name|oldMasterKeys
operator|.
name|get
argument_list|(
name|applicationId
argument_list|)
operator|.
name|containsKey
argument_list|(
name|containerID
argument_list|)
return|;
block|}
DECL|method|addKeyForContainerId (ContainerId containerId, MasterKeyData masterKeyData)
specifier|private
specifier|synchronized
name|void
name|addKeyForContainerId
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|MasterKeyData
name|masterKeyData
parameter_list|)
block|{
if|if
condition|(
name|containerId
operator|!=
literal|null
condition|)
block|{
name|ApplicationId
name|appId
init|=
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|oldMasterKeys
operator|.
name|containsKey
argument_list|(
name|appId
argument_list|)
condition|)
block|{
name|this
operator|.
name|oldMasterKeys
operator|.
name|put
argument_list|(
name|appId
argument_list|,
operator|new
name|ConcurrentHashMap
argument_list|<
name|ContainerId
argument_list|,
name|MasterKeyData
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ConcurrentMap
argument_list|<
name|ContainerId
argument_list|,
name|MasterKeyData
argument_list|>
name|containerIdToKeysMapForThisApp
init|=
name|this
operator|.
name|oldMasterKeys
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|containerIdToKeysMapForThisApp
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|masterKeyData
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Not adding key for null containerId"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Holding on to master-keys corresponding to containers until the app is
comment|// finished due to the multiple ways a container can finish. Avoid
comment|// stopContainer calls seeing unnecessary authorization exceptions.
DECL|method|appFinished (ApplicationId appId)
specifier|public
specifier|synchronized
name|void
name|appFinished
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
name|this
operator|.
name|oldMasterKeys
operator|.
name|remove
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
DECL|method|setNodeId (NodeId nodeId)
specifier|public
specifier|synchronized
name|void
name|setNodeId
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|nodeHostAddr
operator|=
name|nodeId
operator|.
name|toString
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating node address : "
operator|+
name|nodeHostAddr
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

