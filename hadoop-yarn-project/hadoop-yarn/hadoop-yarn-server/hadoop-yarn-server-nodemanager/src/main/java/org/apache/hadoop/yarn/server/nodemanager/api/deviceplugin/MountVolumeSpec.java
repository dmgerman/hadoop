begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.api.deviceplugin
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Describe one volume mount.  * */
end_comment

begin_class
DECL|class|MountVolumeSpec
specifier|public
specifier|final
class|class
name|MountVolumeSpec
implements|implements
name|Serializable
implements|,
name|Comparable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|2479676805545997492L
decl_stmt|;
comment|// host path or volume name
DECL|field|hostPath
specifier|private
specifier|final
name|String
name|hostPath
decl_stmt|;
comment|// path in the container
DECL|field|mountPath
specifier|private
specifier|final
name|String
name|mountPath
decl_stmt|;
comment|// if true, data in mountPath can only be read
comment|// "-v hostPath:mountPath:ro"
DECL|field|isReadOnly
specifier|private
specifier|final
name|Boolean
name|isReadOnly
decl_stmt|;
DECL|field|READONLYOPTION
specifier|public
specifier|final
specifier|static
name|String
name|READONLYOPTION
init|=
literal|"ro"
decl_stmt|;
DECL|method|MountVolumeSpec (Builder builder)
specifier|private
name|MountVolumeSpec
parameter_list|(
name|Builder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|hostPath
operator|=
name|builder
operator|.
name|hostPath
expr_stmt|;
name|this
operator|.
name|mountPath
operator|=
name|builder
operator|.
name|mountPath
expr_stmt|;
name|this
operator|.
name|isReadOnly
operator|=
name|builder
operator|.
name|isReadOnly
expr_stmt|;
block|}
DECL|method|getHostPath ()
specifier|public
name|String
name|getHostPath
parameter_list|()
block|{
return|return
name|hostPath
return|;
block|}
DECL|method|getMountPath ()
specifier|public
name|String
name|getMountPath
parameter_list|()
block|{
return|return
name|mountPath
return|;
block|}
DECL|method|getReadOnly ()
specifier|public
name|Boolean
name|getReadOnly
parameter_list|()
block|{
return|return
name|isReadOnly
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|MountVolumeSpec
name|other
init|=
operator|(
name|MountVolumeSpec
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|hostPath
argument_list|,
name|other
operator|.
name|getHostPath
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|mountPath
argument_list|,
name|other
operator|.
name|getMountPath
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|isReadOnly
argument_list|,
name|other
operator|.
name|getReadOnly
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|hostPath
argument_list|,
name|mountPath
argument_list|,
name|isReadOnly
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (Object o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
comment|/**    * Builder for MountVolumeSpec.    * */
DECL|class|Builder
specifier|public
specifier|final
specifier|static
class|class
name|Builder
block|{
DECL|field|hostPath
specifier|private
name|String
name|hostPath
decl_stmt|;
DECL|field|mountPath
specifier|private
name|String
name|mountPath
decl_stmt|;
DECL|field|isReadOnly
specifier|private
name|Boolean
name|isReadOnly
decl_stmt|;
DECL|method|Builder ()
specifier|private
name|Builder
parameter_list|()
block|{}
DECL|method|newInstance ()
specifier|public
specifier|static
name|Builder
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
DECL|method|build ()
specifier|public
name|MountVolumeSpec
name|build
parameter_list|()
block|{
return|return
operator|new
name|MountVolumeSpec
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|setHostPath (String hPath)
specifier|public
name|Builder
name|setHostPath
parameter_list|(
name|String
name|hPath
parameter_list|)
block|{
name|this
operator|.
name|hostPath
operator|=
name|hPath
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setMountPath (String mPath)
specifier|public
name|Builder
name|setMountPath
parameter_list|(
name|String
name|mPath
parameter_list|)
block|{
name|this
operator|.
name|mountPath
operator|=
name|mPath
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setReadOnly (Boolean readOnly)
specifier|public
name|Builder
name|setReadOnly
parameter_list|(
name|Boolean
name|readOnly
parameter_list|)
block|{
name|isReadOnly
operator|=
name|readOnly
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
block|}
end_class

end_unit

