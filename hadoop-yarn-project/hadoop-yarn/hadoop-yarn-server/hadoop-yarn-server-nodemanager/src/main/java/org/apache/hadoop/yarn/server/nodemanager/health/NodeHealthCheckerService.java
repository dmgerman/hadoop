begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.health
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|health
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|LocalDirsHandlerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * This class provides functionality of checking the health of a node and  * reporting back to the service for which the health checker has been asked to  * report.  *  * It is a {@link CompositeService}: every {@link Service} must be registered  * first in serviceInit, and should also implement the {@link HealthReporter}  * interface - otherwise an exception is thrown.  *  * Calling functions of HealthReporter merge its dependent  * services' reports.  *  * @see HealthReporter  * @see LocalDirsHandlerService  * @see TimedHealthReporterService  */
end_comment

begin_class
DECL|class|NodeHealthCheckerService
specifier|public
class|class
name|NodeHealthCheckerService
extends|extends
name|CompositeService
implements|implements
name|HealthReporter
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NodeHealthCheckerService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MAX_SCRIPTS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_SCRIPTS
init|=
literal|4
decl_stmt|;
DECL|field|reporters
specifier|private
name|List
argument_list|<
name|HealthReporter
argument_list|>
name|reporters
decl_stmt|;
DECL|field|dirsHandler
specifier|private
name|LocalDirsHandlerService
name|dirsHandler
decl_stmt|;
DECL|field|exceptionReporter
specifier|private
name|ExceptionReporter
name|exceptionReporter
decl_stmt|;
DECL|field|SEPARATOR
specifier|public
specifier|static
specifier|final
name|String
name|SEPARATOR
init|=
literal|";"
decl_stmt|;
DECL|method|NodeHealthCheckerService ( LocalDirsHandlerService dirHandlerService)
specifier|public
name|NodeHealthCheckerService
parameter_list|(
name|LocalDirsHandlerService
name|dirHandlerService
parameter_list|)
block|{
name|super
argument_list|(
name|NodeHealthCheckerService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|reporters
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|dirsHandler
operator|=
name|dirHandlerService
expr_stmt|;
name|this
operator|.
name|exceptionReporter
operator|=
operator|new
name|ExceptionReporter
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|reporters
operator|.
name|add
argument_list|(
name|exceptionReporter
argument_list|)
expr_stmt|;
name|addHealthReporter
argument_list|(
name|dirsHandler
argument_list|)
expr_stmt|;
name|String
index|[]
name|configuredScripts
init|=
name|conf
operator|.
name|getTrimmedStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_HEALTH_CHECK_SCRIPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_HEALTH_CHECK_SCRIPTS
argument_list|)
decl_stmt|;
if|if
condition|(
name|configuredScripts
operator|.
name|length
operator|>
name|MAX_SCRIPTS
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Due to performance reasons "
operator|+
literal|"running more than "
operator|+
name|MAX_SCRIPTS
operator|+
literal|"scripts is not allowed."
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|configuredScript
range|:
name|configuredScripts
control|)
block|{
name|addHealthReporter
argument_list|(
name|NodeHealthScriptRunner
operator|.
name|newInstance
argument_list|(
name|configuredScript
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds a {@link Service} implementing the {@link HealthReporter} interface,    * if that service has not been added to this {@link CompositeService} yet.    *    * @param service to add    * @throws Exception if not a {@link HealthReporter}    *         implementation is provided to this function    */
annotation|@
name|VisibleForTesting
DECL|method|addHealthReporter (Service service)
name|void
name|addHealthReporter
parameter_list|(
name|Service
name|service
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|getServices
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|noneMatch
argument_list|(
name|x
lambda|->
name|x
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|service
operator|instanceof
name|HealthReporter
operator|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Attempted to add service to "
operator|+
literal|"NodeHealthCheckerService that does not implement "
operator|+
literal|"HealthReporter."
argument_list|)
throw|;
block|}
name|reporters
operator|.
name|add
argument_list|(
operator|(
name|HealthReporter
operator|)
name|service
argument_list|)
empty_stmt|;
name|addService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Omitting duplicate service: {}."
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|/**    * Joining the health reports of the dependent services.    *    * @return the report string about the health of the node    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|getHealthReport ()
specifier|public
name|String
name|getHealthReport
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|reports
init|=
name|reporters
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|reporter
lambda|->
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|reporter
operator|.
name|getHealthReport
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toCollection
argument_list|(
name|ArrayList
operator|::
operator|new
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Joiner
operator|.
name|on
argument_list|(
name|SEPARATOR
argument_list|)
operator|.
name|skipNulls
argument_list|()
operator|.
name|join
argument_list|(
name|reports
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * @return<em>true</em> if the node is healthy    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|isHealthy ()
specifier|public
name|boolean
name|isHealthy
parameter_list|()
block|{
return|return
name|reporters
operator|.
name|stream
argument_list|()
operator|.
name|allMatch
argument_list|(
name|HealthReporter
operator|::
name|isHealthy
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * @return when the last time the node health status is reported    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|getLastHealthReportTime ()
specifier|public
name|long
name|getLastHealthReportTime
parameter_list|()
block|{
name|Optional
argument_list|<
name|Long
argument_list|>
name|max
init|=
name|reporters
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|HealthReporter
operator|::
name|getLastHealthReportTime
argument_list|)
operator|.
name|max
argument_list|(
name|Long
operator|::
name|compareTo
argument_list|)
decl_stmt|;
return|return
name|max
operator|.
name|orElse
argument_list|(
literal|0L
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * @return the disk handler    */
end_comment

begin_function
DECL|method|getDiskHandler ()
specifier|public
name|LocalDirsHandlerService
name|getDiskHandler
parameter_list|()
block|{
return|return
name|dirsHandler
return|;
block|}
end_function

begin_comment
comment|/**    * Propagating an exception to {@link ExceptionReporter}.    * @param exception the exception to propagate    */
end_comment

begin_function
DECL|method|reportException (Exception exception)
specifier|public
name|void
name|reportException
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|exceptionReporter
operator|.
name|reportException
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

