begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
operator|.
name|CREATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
operator|.
name|OVERWRITE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnsupportedFileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskValidatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|concurrent
operator|.
name|HadoopExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|concurrent
operator|.
name|HadoopScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|LocalResourcePBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|LocalResourceProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|LocalizedResourceProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DeletionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DirectoryCollection
operator|.
name|DirsChangeListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|LocalDirsHandlerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|LocalizationProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|ResourceLocalizationSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LocalResourceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LocalizerAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LocalizerHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LocalizerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationInitedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerResourceFailedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|deletion
operator|.
name|task
operator|.
name|FileDeletionTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|LocalCacheCleaner
operator|.
name|LocalCacheCleanerStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ApplicationLocalizationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ContainerLocalizationCleanupEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ContainerLocalizationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ContainerLocalizationRequestEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizationEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizerResourceRequestEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ResourceFailedLocalizationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ResourceLocalizedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ResourceRecoveredEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ResourceReleaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ResourceRequestEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|security
operator|.
name|LocalizerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|security
operator|.
name|LocalizerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|executor
operator|.
name|LocalizerStartContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|metrics
operator|.
name|NodeManagerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
operator|.
name|LocalResourceTrackerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
operator|.
name|RecoveredLocalizationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
operator|.
name|RecoveredUserResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|security
operator|.
name|authorize
operator|.
name|NMPolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|util
operator|.
name|NodeManagerBuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|FSDownload
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_class
DECL|class|ResourceLocalizationService
specifier|public
class|class
name|ResourceLocalizationService
extends|extends
name|CompositeService
implements|implements
name|EventHandler
argument_list|<
name|LocalizationEvent
argument_list|>
implements|,
name|LocalizationProtocol
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ResourceLocalizationService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NM_PRIVATE_DIR
specifier|public
specifier|static
specifier|final
name|String
name|NM_PRIVATE_DIR
init|=
literal|"nmPrivate"
decl_stmt|;
DECL|field|NM_PRIVATE_PERM
specifier|public
specifier|static
specifier|final
name|FsPermission
name|NM_PRIVATE_PERM
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
decl_stmt|;
DECL|field|server
specifier|private
name|Server
name|server
decl_stmt|;
DECL|field|localizationServerAddress
specifier|private
name|InetSocketAddress
name|localizationServerAddress
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|cacheTargetSize
name|long
name|cacheTargetSize
decl_stmt|;
DECL|field|cacheCleanupPeriod
specifier|private
name|long
name|cacheCleanupPeriod
decl_stmt|;
DECL|field|exec
specifier|private
specifier|final
name|ContainerExecutor
name|exec
decl_stmt|;
DECL|field|dispatcher
specifier|protected
specifier|final
name|Dispatcher
name|dispatcher
decl_stmt|;
DECL|field|delService
specifier|private
specifier|final
name|DeletionService
name|delService
decl_stmt|;
DECL|field|localizerTracker
specifier|private
name|LocalizerTracker
name|localizerTracker
decl_stmt|;
DECL|field|recordFactory
specifier|private
name|RecordFactory
name|recordFactory
decl_stmt|;
DECL|field|cacheCleanup
specifier|private
specifier|final
name|ScheduledExecutorService
name|cacheCleanup
decl_stmt|;
DECL|field|secretManager
specifier|private
name|LocalizerTokenSecretManager
name|secretManager
decl_stmt|;
DECL|field|stateStore
specifier|private
name|NMStateStoreService
name|stateStore
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|metrics
specifier|final
name|NodeManagerMetrics
name|metrics
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|publicRsrc
name|LocalResourcesTracker
name|publicRsrc
decl_stmt|;
DECL|field|dirsHandler
specifier|private
name|LocalDirsHandlerService
name|dirsHandler
decl_stmt|;
DECL|field|localDirsChangeListener
specifier|private
name|DirsChangeListener
name|localDirsChangeListener
decl_stmt|;
DECL|field|logDirsChangeListener
specifier|private
name|DirsChangeListener
name|logDirsChangeListener
decl_stmt|;
DECL|field|nmContext
specifier|private
name|Context
name|nmContext
decl_stmt|;
DECL|field|diskValidator
specifier|private
name|DiskValidator
name|diskValidator
decl_stmt|;
comment|/**    * Map of LocalResourceTrackers keyed by username, for private    * resources.    */
annotation|@
name|VisibleForTesting
DECL|field|privateRsrc
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|LocalResourcesTracker
argument_list|>
name|privateRsrc
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|LocalResourcesTracker
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Map of LocalResourceTrackers keyed by appid, for application    * resources.    */
DECL|field|appRsrc
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|LocalResourcesTracker
argument_list|>
name|appRsrc
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|LocalResourcesTracker
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|lfs
name|FileContext
name|lfs
decl_stmt|;
DECL|method|ResourceLocalizationService (Dispatcher dispatcher, ContainerExecutor exec, DeletionService delService, LocalDirsHandlerService dirsHandler, Context context, NodeManagerMetrics metrics)
specifier|public
name|ResourceLocalizationService
parameter_list|(
name|Dispatcher
name|dispatcher
parameter_list|,
name|ContainerExecutor
name|exec
parameter_list|,
name|DeletionService
name|delService
parameter_list|,
name|LocalDirsHandlerService
name|dirsHandler
parameter_list|,
name|Context
name|context
parameter_list|,
name|NodeManagerMetrics
name|metrics
parameter_list|)
block|{
name|super
argument_list|(
name|ResourceLocalizationService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|exec
operator|=
name|exec
expr_stmt|;
name|this
operator|.
name|dispatcher
operator|=
name|dispatcher
expr_stmt|;
name|this
operator|.
name|delService
operator|=
name|delService
expr_stmt|;
name|this
operator|.
name|dirsHandler
operator|=
name|dirsHandler
expr_stmt|;
name|this
operator|.
name|cacheCleanup
operator|=
operator|new
name|HadoopScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"ResourceLocalizationService Cache Cleanup"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|stateStore
operator|=
name|context
operator|.
name|getNMStateStore
argument_list|()
expr_stmt|;
name|this
operator|.
name|nmContext
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
block|}
DECL|method|getLocalFileContext (Configuration conf)
name|FileContext
name|getLocalFileContext
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
try|try
block|{
return|return
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|(
name|conf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Failed to access local fs"
argument_list|)
throw|;
block|}
block|}
DECL|method|validateConf (Configuration conf)
specifier|private
name|void
name|validateConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|int
name|perDirFileLimit
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY
argument_list|)
decl_stmt|;
if|if
condition|(
name|perDirFileLimit
operator|<=
literal|36
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY
operator|+
literal|" parameter is configured with very low value."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY
operator|+
literal|" parameter is configured with a value less than 37."
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"per directory file limit = "
operator|+
name|perDirFileLimit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|public
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|validateConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|publicRsrc
operator|=
operator|new
name|LocalResourcesTrackerImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|dispatcher
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|,
name|stateStore
argument_list|,
name|dirsHandler
argument_list|)
expr_stmt|;
name|this
operator|.
name|recordFactory
operator|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|lfs
operator|=
name|getLocalFileContext
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|setUMask
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
name|FsPermission
operator|.
name|DEFAULT_UMASK
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|stateStore
operator|.
name|canRecover
argument_list|()
operator|||
name|stateStore
operator|.
name|isNewlyCreated
argument_list|()
condition|)
block|{
name|cleanUpLocalDirs
argument_list|(
name|lfs
argument_list|,
name|delService
argument_list|)
expr_stmt|;
name|cleanupLogDirs
argument_list|(
name|lfs
argument_list|,
name|delService
argument_list|)
expr_stmt|;
name|initializeLocalDirs
argument_list|(
name|lfs
argument_list|)
expr_stmt|;
name|initializeLogDirs
argument_list|(
name|lfs
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Failed to initialize LocalizationService"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|diskValidator
operator|=
name|DiskValidatorFactory
operator|.
name|getInstance
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|DISK_VALIDATOR
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_DISK_VALIDATOR
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Disk Validator: "
operator|+
name|YarnConfiguration
operator|.
name|DISK_VALIDATOR
operator|+
literal|" is loaded."
argument_list|)
expr_stmt|;
name|cacheTargetSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCALIZER_CACHE_TARGET_SIZE_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB
argument_list|)
operator|<<
literal|20
expr_stmt|;
name|cacheCleanupPeriod
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS
argument_list|)
expr_stmt|;
name|localizationServerAddress
operator|=
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|NM_BIND_HOST
argument_list|,
name|YarnConfiguration
operator|.
name|NM_LOCALIZER_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LOCALIZER_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LOCALIZER_PORT
argument_list|)
expr_stmt|;
name|localizerTracker
operator|=
name|createLocalizerTracker
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|localizerTracker
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|LocalizerEventType
operator|.
name|class
argument_list|,
name|localizerTracker
argument_list|)
expr_stmt|;
name|localDirsChangeListener
operator|=
operator|new
name|DirsChangeListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onDirsChanged
parameter_list|()
block|{
name|checkAndInitializeLocalDirs
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|logDirsChangeListener
operator|=
operator|new
name|DirsChangeListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onDirsChanged
parameter_list|()
block|{
name|initializeLogDirs
argument_list|(
name|lfs
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|//Recover localized resources after an NM restart
DECL|method|recoverLocalizedResources (RecoveredLocalizationState state)
specifier|public
name|void
name|recoverLocalizedResources
parameter_list|(
name|RecoveredLocalizationState
name|state
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|LocalResourceTrackerState
name|trackerState
init|=
name|state
operator|.
name|getPublicTrackerState
argument_list|()
decl_stmt|;
name|recoverTrackerResources
argument_list|(
name|publicRsrc
argument_list|,
name|trackerState
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RecoveredUserResources
argument_list|>
name|userEntry
range|:
name|state
operator|.
name|getUserResources
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|user
init|=
name|userEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RecoveredUserResources
name|userResources
init|=
name|userEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|trackerState
operator|=
name|userResources
operator|.
name|getPrivateTrackerState
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|trackerState
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LocalResourcesTracker
name|tracker
init|=
operator|new
name|LocalResourcesTrackerImpl
argument_list|(
name|user
argument_list|,
literal|null
argument_list|,
name|dispatcher
argument_list|,
literal|true
argument_list|,
name|super
operator|.
name|getConfig
argument_list|()
argument_list|,
name|stateStore
argument_list|,
name|dirsHandler
argument_list|)
decl_stmt|;
name|LocalResourcesTracker
name|oldTracker
init|=
name|privateRsrc
operator|.
name|putIfAbsent
argument_list|(
name|user
argument_list|,
name|tracker
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldTracker
operator|!=
literal|null
condition|)
block|{
name|tracker
operator|=
name|oldTracker
expr_stmt|;
block|}
name|recoverTrackerResources
argument_list|(
name|tracker
argument_list|,
name|trackerState
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ApplicationId
argument_list|,
name|LocalResourceTrackerState
argument_list|>
name|appEntry
range|:
name|userResources
operator|.
name|getAppTrackerStates
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|trackerState
operator|=
name|appEntry
operator|.
name|getValue
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|trackerState
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ApplicationId
name|appId
init|=
name|appEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|appIdStr
init|=
name|appId
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LocalResourcesTracker
name|tracker
init|=
operator|new
name|LocalResourcesTrackerImpl
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|dispatcher
argument_list|,
literal|false
argument_list|,
name|super
operator|.
name|getConfig
argument_list|()
argument_list|,
name|stateStore
argument_list|,
name|dirsHandler
argument_list|)
decl_stmt|;
name|LocalResourcesTracker
name|oldTracker
init|=
name|appRsrc
operator|.
name|putIfAbsent
argument_list|(
name|appIdStr
argument_list|,
name|tracker
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldTracker
operator|!=
literal|null
condition|)
block|{
name|tracker
operator|=
name|oldTracker
expr_stmt|;
block|}
name|recoverTrackerResources
argument_list|(
name|tracker
argument_list|,
name|trackerState
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|recoverTrackerResources (LocalResourcesTracker tracker, LocalResourceTrackerState state)
specifier|private
name|void
name|recoverTrackerResources
parameter_list|(
name|LocalResourcesTracker
name|tracker
parameter_list|,
name|LocalResourceTrackerState
name|state
parameter_list|)
throws|throws
name|URISyntaxException
block|{
for|for
control|(
name|LocalizedResourceProto
name|proto
range|:
name|state
operator|.
name|getLocalizedResources
argument_list|()
control|)
block|{
name|LocalResource
name|rsrc
init|=
operator|new
name|LocalResourcePBImpl
argument_list|(
name|proto
operator|.
name|getResource
argument_list|()
argument_list|)
decl_stmt|;
name|LocalResourceRequest
name|req
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|rsrc
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Recovering localized resource "
operator|+
name|req
operator|+
literal|" at "
operator|+
name|proto
operator|.
name|getLocalPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tracker
operator|.
name|handle
argument_list|(
operator|new
name|ResourceRecoveredEvent
argument_list|(
name|req
argument_list|,
operator|new
name|Path
argument_list|(
name|proto
operator|.
name|getLocalPath
argument_list|()
argument_list|)
argument_list|,
name|proto
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|LocalResourceProto
argument_list|,
name|Path
argument_list|>
name|entry
range|:
name|state
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LocalResource
name|rsrc
init|=
operator|new
name|LocalResourcePBImpl
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|LocalResourceRequest
name|req
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|rsrc
argument_list|)
decl_stmt|;
name|Path
name|localPath
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|tracker
operator|.
name|handle
argument_list|(
operator|new
name|ResourceRecoveredEvent
argument_list|(
name|req
argument_list|,
name|localPath
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete any in-progress localizations, containers will request again
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting in-progress localization for "
operator|+
name|req
operator|+
literal|" at "
operator|+
name|localPath
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|remove
argument_list|(
name|tracker
operator|.
name|getLocalizedResource
argument_list|(
name|req
argument_list|)
argument_list|,
name|delService
argument_list|)
expr_stmt|;
block|}
comment|// TODO: remove untracked directories in local filesystem
block|}
annotation|@
name|Override
DECL|method|heartbeat (LocalizerStatus status)
specifier|public
name|LocalizerHeartbeatResponse
name|heartbeat
parameter_list|(
name|LocalizerStatus
name|status
parameter_list|)
block|{
return|return
name|localizerTracker
operator|.
name|processHeartbeat
argument_list|(
name|status
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|public
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|cacheCleanup
operator|.
name|scheduleWithFixedDelay
argument_list|(
operator|new
name|CacheCleanup
argument_list|(
name|dispatcher
argument_list|)
argument_list|,
name|cacheCleanupPeriod
argument_list|,
name|cacheCleanupPeriod
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|server
operator|=
name|createServer
argument_list|()
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|localizationServerAddress
operator|=
name|getConfig
argument_list|()
operator|.
name|updateConnectAddr
argument_list|(
name|YarnConfiguration
operator|.
name|NM_BIND_HOST
argument_list|,
name|YarnConfiguration
operator|.
name|NM_LOCALIZER_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LOCALIZER_ADDRESS
argument_list|,
name|server
operator|.
name|getListenerAddress
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Localizer started on port "
operator|+
name|server
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
name|dirsHandler
operator|.
name|registerLocalDirsChangeListener
argument_list|(
name|localDirsChangeListener
argument_list|)
expr_stmt|;
name|dirsHandler
operator|.
name|registerLogDirsChangeListener
argument_list|(
name|logDirsChangeListener
argument_list|)
expr_stmt|;
block|}
DECL|method|createLocalizerTracker (Configuration conf)
name|LocalizerTracker
name|createLocalizerTracker
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|LocalizerTracker
argument_list|(
name|conf
argument_list|)
return|;
block|}
DECL|method|createServer ()
name|Server
name|createServer
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|secretManager
operator|=
operator|new
name|LocalizerTokenSecretManager
argument_list|()
expr_stmt|;
block|}
name|Server
name|server
init|=
name|rpc
operator|.
name|getServer
argument_list|(
name|LocalizationProtocol
operator|.
name|class
argument_list|,
name|this
argument_list|,
name|localizationServerAddress
argument_list|,
name|conf
argument_list|,
name|secretManager
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCALIZER_CLIENT_THREAD_COUNT
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LOCALIZER_CLIENT_THREAD_COUNT
argument_list|)
argument_list|)
decl_stmt|;
comment|// Enable service authorization?
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|server
operator|.
name|refreshServiceAcl
argument_list|(
name|conf
argument_list|,
operator|new
name|NMPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|server
return|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|public
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|dirsHandler
operator|.
name|deregisterLocalDirsChangeListener
argument_list|(
name|localDirsChangeListener
argument_list|)
expr_stmt|;
name|dirsHandler
operator|.
name|deregisterLogDirsChangeListener
argument_list|(
name|logDirsChangeListener
argument_list|)
expr_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|cacheCleanup
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (LocalizationEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|LocalizationEvent
name|event
parameter_list|)
block|{
comment|// TODO: create log dir as $logdir/$user/$appId
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|INIT_APPLICATION_RESOURCES
case|:
name|handleInitApplicationResources
argument_list|(
operator|(
operator|(
name|ApplicationLocalizationEvent
operator|)
name|event
operator|)
operator|.
name|getApplication
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|LOCALIZE_CONTAINER_RESOURCES
case|:
name|handleInitContainerResources
argument_list|(
operator|(
name|ContainerLocalizationRequestEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONTAINER_RESOURCES_LOCALIZED
case|:
name|handleContainerResourcesLocalized
argument_list|(
operator|(
name|ContainerLocalizationEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|CACHE_CLEANUP
case|:
name|handleCacheCleanup
argument_list|()
expr_stmt|;
break|break;
case|case
name|CLEANUP_CONTAINER_RESOURCES
case|:
name|handleCleanupContainerResources
argument_list|(
operator|(
name|ContainerLocalizationCleanupEvent
operator|)
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|DESTROY_APPLICATION_RESOURCES
case|:
name|handleDestroyApplicationResources
argument_list|(
operator|(
operator|(
name|ApplicationLocalizationEvent
operator|)
name|event
operator|)
operator|.
name|getApplication
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Unknown localization event: "
operator|+
name|event
argument_list|)
throw|;
block|}
block|}
comment|/**    * Handle event received the first time any container is scheduled    * by a given application.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|handleInitApplicationResources (Application app)
specifier|private
name|void
name|handleInitApplicationResources
parameter_list|(
name|Application
name|app
parameter_list|)
block|{
comment|// 0) Create application tracking structs
name|String
name|userName
init|=
name|app
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|privateRsrc
operator|.
name|putIfAbsent
argument_list|(
name|userName
argument_list|,
operator|new
name|LocalResourcesTrackerImpl
argument_list|(
name|userName
argument_list|,
literal|null
argument_list|,
name|dispatcher
argument_list|,
literal|true
argument_list|,
name|super
operator|.
name|getConfig
argument_list|()
argument_list|,
name|stateStore
argument_list|,
name|dirsHandler
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|appIdStr
init|=
name|app
operator|.
name|getAppId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|appRsrc
operator|.
name|putIfAbsent
argument_list|(
name|appIdStr
argument_list|,
operator|new
name|LocalResourcesTrackerImpl
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|,
name|app
operator|.
name|getAppId
argument_list|()
argument_list|,
name|dispatcher
argument_list|,
literal|false
argument_list|,
name|super
operator|.
name|getConfig
argument_list|()
argument_list|,
name|stateStore
argument_list|,
name|dirsHandler
argument_list|)
argument_list|)
expr_stmt|;
comment|// 1) Signal container init
comment|//
comment|// This is handled by the ApplicationImpl state machine and allows
comment|// containers to proceed with launching.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationInitedEvent
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * For each of the requested resources for a container, determines the    * appropriate {@link LocalResourcesTracker} and forwards a     * {@link LocalResourceRequest} to that tracker.    */
DECL|method|handleInitContainerResources ( ContainerLocalizationRequestEvent rsrcReqs)
specifier|private
name|void
name|handleInitContainerResources
parameter_list|(
name|ContainerLocalizationRequestEvent
name|rsrcReqs
parameter_list|)
block|{
name|Container
name|c
init|=
name|rsrcReqs
operator|.
name|getContainer
argument_list|()
decl_stmt|;
name|EnumSet
argument_list|<
name|ContainerState
argument_list|>
name|set
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|ContainerState
operator|.
name|LOCALIZING
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerState
operator|.
name|REINITIALIZING
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|set
operator|.
name|contains
argument_list|(
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|c
operator|.
name|getContainerId
argument_list|()
operator|+
literal|" is at "
operator|+
name|c
operator|.
name|getContainerState
argument_list|()
operator|+
literal|" state, do not localize resources."
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// create a loading cache for the file statuses
name|LoadingCache
argument_list|<
name|Path
argument_list|,
name|Future
argument_list|<
name|FileStatus
argument_list|>
argument_list|>
name|statCache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|FSDownload
operator|.
name|createStatusCacheLoader
argument_list|(
name|getConfig
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|LocalizerContext
name|ctxt
init|=
operator|new
name|LocalizerContext
argument_list|(
name|c
operator|.
name|getUser
argument_list|()
argument_list|,
name|c
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|c
operator|.
name|getCredentials
argument_list|()
argument_list|,
name|statCache
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|rsrcs
init|=
name|rsrcReqs
operator|.
name|getRequestedResources
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|e
range|:
name|rsrcs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LocalResourcesTracker
name|tracker
init|=
name|getLocalResourcesTracker
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|c
operator|.
name|getUser
argument_list|()
argument_list|,
name|c
operator|.
name|getContainerId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|LocalResourceRequest
name|req
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
name|tracker
operator|.
name|handle
argument_list|(
operator|new
name|ResourceRequestEvent
argument_list|(
name|req
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|ctxt
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Localizing "
operator|+
name|req
operator|.
name|getPath
argument_list|()
operator|+
literal|" for container "
operator|+
name|c
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Once a container's resources are localized, kill the corresponding    * {@link ContainerLocalizer}    */
DECL|method|handleContainerResourcesLocalized ( ContainerLocalizationEvent event)
specifier|private
name|void
name|handleContainerResourcesLocalized
parameter_list|(
name|ContainerLocalizationEvent
name|event
parameter_list|)
block|{
name|Container
name|c
init|=
name|event
operator|.
name|getContainer
argument_list|()
decl_stmt|;
name|String
name|locId
init|=
name|c
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|localizerTracker
operator|.
name|endContainerLocalization
argument_list|(
name|locId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|handleCacheCleanup ()
name|LocalCacheCleanerStats
name|handleCacheCleanup
parameter_list|()
block|{
name|LocalCacheCleaner
name|cleaner
init|=
operator|new
name|LocalCacheCleaner
argument_list|(
name|delService
argument_list|,
name|cacheTargetSize
argument_list|)
decl_stmt|;
name|cleaner
operator|.
name|addResources
argument_list|(
name|publicRsrc
argument_list|)
expr_stmt|;
for|for
control|(
name|LocalResourcesTracker
name|t
range|:
name|privateRsrc
operator|.
name|values
argument_list|()
control|)
block|{
name|cleaner
operator|.
name|addResources
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|LocalCacheCleaner
operator|.
name|LocalCacheCleanerStats
name|stats
init|=
name|cleaner
operator|.
name|cleanCache
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|stats
operator|.
name|toStringDetailed
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|stats
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Update metrics
name|metrics
operator|.
name|setCacheSizeBeforeClean
argument_list|(
name|stats
operator|.
name|getCacheSizeBeforeClean
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setTotalBytesDeleted
argument_list|(
name|stats
operator|.
name|getTotalDelSize
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setPrivateBytesDeleted
argument_list|(
name|stats
operator|.
name|getPrivateDelSize
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setPublicBytesDeleted
argument_list|(
name|stats
operator|.
name|getPublicDelSize
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|stats
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|handleCleanupContainerResources ( ContainerLocalizationCleanupEvent rsrcCleanup)
specifier|private
name|void
name|handleCleanupContainerResources
parameter_list|(
name|ContainerLocalizationCleanupEvent
name|rsrcCleanup
parameter_list|)
block|{
name|Container
name|c
init|=
name|rsrcCleanup
operator|.
name|getContainer
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|rsrcs
init|=
name|rsrcCleanup
operator|.
name|getResources
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|e
range|:
name|rsrcs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LocalResourcesTracker
name|tracker
init|=
name|getLocalResourcesTracker
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|c
operator|.
name|getUser
argument_list|()
argument_list|,
name|c
operator|.
name|getContainerId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|LocalResourceRequest
name|req
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
name|tracker
operator|.
name|handle
argument_list|(
operator|new
name|ResourceReleaseEvent
argument_list|(
name|req
argument_list|,
name|c
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|locId
init|=
name|c
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|localizerTracker
operator|.
name|cleanupPrivLocalizers
argument_list|(
name|locId
argument_list|)
expr_stmt|;
comment|// Delete the container directories
name|String
name|userName
init|=
name|c
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|String
name|containerIDStr
init|=
name|c
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|appIDStr
init|=
name|c
operator|.
name|getContainerId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Try deleting from good local dirs and full local dirs because a dir might
comment|// have gone bad while the app was running(disk full). In addition
comment|// a dir might have become good while the app was running.
comment|// Check if the container dir exists and if it does, try to delete it
for|for
control|(
name|String
name|localDir
range|:
name|dirsHandler
operator|.
name|getLocalDirsForCleanup
argument_list|()
control|)
block|{
comment|// Delete the user-owned container-dir
name|Path
name|usersdir
init|=
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|ContainerLocalizer
operator|.
name|USERCACHE
argument_list|)
decl_stmt|;
name|Path
name|userdir
init|=
operator|new
name|Path
argument_list|(
name|usersdir
argument_list|,
name|userName
argument_list|)
decl_stmt|;
name|Path
name|allAppsdir
init|=
operator|new
name|Path
argument_list|(
name|userdir
argument_list|,
name|ContainerLocalizer
operator|.
name|APPCACHE
argument_list|)
decl_stmt|;
name|Path
name|appDir
init|=
operator|new
name|Path
argument_list|(
name|allAppsdir
argument_list|,
name|appIDStr
argument_list|)
decl_stmt|;
name|Path
name|containerDir
init|=
operator|new
name|Path
argument_list|(
name|appDir
argument_list|,
name|containerIDStr
argument_list|)
decl_stmt|;
name|submitDirForDeletion
argument_list|(
name|userName
argument_list|,
name|containerDir
argument_list|)
expr_stmt|;
comment|// Delete the nmPrivate container-dir
name|Path
name|sysDir
init|=
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|NM_PRIVATE_DIR
argument_list|)
decl_stmt|;
name|Path
name|appSysDir
init|=
operator|new
name|Path
argument_list|(
name|sysDir
argument_list|,
name|appIDStr
argument_list|)
decl_stmt|;
name|Path
name|containerSysDir
init|=
operator|new
name|Path
argument_list|(
name|appSysDir
argument_list|,
name|containerIDStr
argument_list|)
decl_stmt|;
name|submitDirForDeletion
argument_list|(
literal|null
argument_list|,
name|containerSysDir
argument_list|)
expr_stmt|;
block|}
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerEvent
argument_list|(
name|c
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_RESOURCES_CLEANEDUP
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|submitDirForDeletion (String userName, Path dir)
specifier|private
name|void
name|submitDirForDeletion
parameter_list|(
name|String
name|userName
parameter_list|,
name|Path
name|dir
parameter_list|)
block|{
try|try
block|{
name|lfs
operator|.
name|getFileStatus
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|FileDeletionTask
name|deletionTask
init|=
operator|new
name|FileDeletionTask
argument_list|(
name|delService
argument_list|,
name|userName
argument_list|,
name|dir
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|delService
operator|.
name|delete
argument_list|(
name|deletionTask
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedFileSystemException
name|ue
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Local dir "
operator|+
name|dir
operator|+
literal|" is an unsupported filesystem"
argument_list|,
name|ue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
comment|// ignore
return|return;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
DECL|method|handleDestroyApplicationResources (Application application)
specifier|private
name|void
name|handleDestroyApplicationResources
parameter_list|(
name|Application
name|application
parameter_list|)
block|{
name|String
name|userName
init|=
name|application
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|application
operator|.
name|getAppId
argument_list|()
decl_stmt|;
name|String
name|appIDStr
init|=
name|application
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LocalResourcesTracker
name|appLocalRsrcsTracker
init|=
name|appRsrc
operator|.
name|remove
argument_list|(
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|appLocalRsrcsTracker
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|LocalizedResource
name|rsrc
range|:
name|appLocalRsrcsTracker
control|)
block|{
name|Path
name|localPath
init|=
name|rsrc
operator|.
name|getLocalPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|localPath
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|stateStore
operator|.
name|removeLocalizedResource
argument_list|(
name|userName
argument_list|,
name|appId
argument_list|,
name|localPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to remove resource "
operator|+
name|rsrc
operator|+
literal|" for "
operator|+
name|appIDStr
operator|+
literal|" from state store"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Removing uninitialized application "
operator|+
name|application
argument_list|)
expr_stmt|;
block|}
comment|// Delete the application directories
name|userName
operator|=
name|application
operator|.
name|getUser
argument_list|()
expr_stmt|;
name|appIDStr
operator|=
name|application
operator|.
name|toString
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|localDir
range|:
name|dirsHandler
operator|.
name|getLocalDirsForCleanup
argument_list|()
control|)
block|{
comment|// Delete the user-owned app-dir
name|Path
name|usersdir
init|=
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|ContainerLocalizer
operator|.
name|USERCACHE
argument_list|)
decl_stmt|;
name|Path
name|userdir
init|=
operator|new
name|Path
argument_list|(
name|usersdir
argument_list|,
name|userName
argument_list|)
decl_stmt|;
name|Path
name|allAppsdir
init|=
operator|new
name|Path
argument_list|(
name|userdir
argument_list|,
name|ContainerLocalizer
operator|.
name|APPCACHE
argument_list|)
decl_stmt|;
name|Path
name|appDir
init|=
operator|new
name|Path
argument_list|(
name|allAppsdir
argument_list|,
name|appIDStr
argument_list|)
decl_stmt|;
name|submitDirForDeletion
argument_list|(
name|userName
argument_list|,
name|appDir
argument_list|)
expr_stmt|;
comment|// Delete the nmPrivate app-dir
name|Path
name|sysDir
init|=
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|NM_PRIVATE_DIR
argument_list|)
decl_stmt|;
name|Path
name|appSysDir
init|=
operator|new
name|Path
argument_list|(
name|sysDir
argument_list|,
name|appIDStr
argument_list|)
decl_stmt|;
name|submitDirForDeletion
argument_list|(
literal|null
argument_list|,
name|appSysDir
argument_list|)
expr_stmt|;
block|}
comment|// TODO: decrement reference counts of all resources associated with this
comment|// app
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationEvent
argument_list|(
name|application
operator|.
name|getAppId
argument_list|()
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_RESOURCES_CLEANEDUP
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getLocalResourcesTracker ( LocalResourceVisibility visibility, String user, ApplicationId appId)
name|LocalResourcesTracker
name|getLocalResourcesTracker
parameter_list|(
name|LocalResourceVisibility
name|visibility
parameter_list|,
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|)
block|{
switch|switch
condition|(
name|visibility
condition|)
block|{
default|default:
case|case
name|PUBLIC
case|:
return|return
name|publicRsrc
return|;
case|case
name|PRIVATE
case|:
return|return
name|privateRsrc
operator|.
name|get
argument_list|(
name|user
argument_list|)
return|;
case|case
name|APPLICATION
case|:
return|return
name|appRsrc
operator|.
name|get
argument_list|(
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|getUserFileCachePath (String user)
specifier|private
name|String
name|getUserFileCachePath
parameter_list|(
name|String
name|user
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|join
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"."
argument_list|,
name|ContainerLocalizer
operator|.
name|USERCACHE
argument_list|,
name|user
argument_list|,
name|ContainerLocalizer
operator|.
name|FILECACHE
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getAppFileCachePath (String user, String appId)
specifier|private
name|String
name|getAppFileCachePath
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|appId
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|join
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"."
argument_list|,
name|ContainerLocalizer
operator|.
name|USERCACHE
argument_list|,
name|user
argument_list|,
name|ContainerLocalizer
operator|.
name|APPCACHE
argument_list|,
name|appId
argument_list|,
name|ContainerLocalizer
operator|.
name|FILECACHE
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
annotation|@
name|Private
DECL|method|getPublicLocalizer ()
specifier|public
name|PublicLocalizer
name|getPublicLocalizer
parameter_list|()
block|{
return|return
name|localizerTracker
operator|.
name|publicLocalizer
return|;
block|}
annotation|@
name|VisibleForTesting
annotation|@
name|Private
DECL|method|getLocalizerRunner (String locId)
specifier|public
name|LocalizerRunner
name|getLocalizerRunner
parameter_list|(
name|String
name|locId
parameter_list|)
block|{
return|return
name|localizerTracker
operator|.
name|privLocalizers
operator|.
name|get
argument_list|(
name|locId
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
annotation|@
name|Private
DECL|method|getPrivateLocalizers ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|LocalizerRunner
argument_list|>
name|getPrivateLocalizers
parameter_list|()
block|{
return|return
name|localizerTracker
operator|.
name|privLocalizers
return|;
block|}
comment|/**    * Sub-component handling the spawning of {@link ContainerLocalizer}s    */
DECL|class|LocalizerTracker
class|class
name|LocalizerTracker
extends|extends
name|AbstractService
implements|implements
name|EventHandler
argument_list|<
name|LocalizerEvent
argument_list|>
block|{
DECL|field|publicLocalizer
specifier|private
specifier|final
name|PublicLocalizer
name|publicLocalizer
decl_stmt|;
DECL|field|privLocalizers
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|LocalizerRunner
argument_list|>
name|privLocalizers
decl_stmt|;
DECL|method|LocalizerTracker (Configuration conf)
name|LocalizerTracker
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalizerRunner
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|LocalizerTracker (Configuration conf, Map<String,LocalizerRunner> privLocalizers)
name|LocalizerTracker
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LocalizerRunner
argument_list|>
name|privLocalizers
parameter_list|)
block|{
name|super
argument_list|(
name|LocalizerTracker
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|publicLocalizer
operator|=
operator|new
name|PublicLocalizer
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|privLocalizers
operator|=
name|privLocalizers
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|public
specifier|synchronized
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|publicLocalizer
operator|.
name|start
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
DECL|method|processHeartbeat (LocalizerStatus status)
specifier|public
name|LocalizerHeartbeatResponse
name|processHeartbeat
parameter_list|(
name|LocalizerStatus
name|status
parameter_list|)
block|{
name|String
name|locId
init|=
name|status
operator|.
name|getLocalizerId
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|privLocalizers
init|)
block|{
name|LocalizerRunner
name|localizer
init|=
name|privLocalizers
operator|.
name|get
argument_list|(
name|locId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|localizer
condition|)
block|{
comment|// TODO process resources anyway
name|LOG
operator|.
name|info
argument_list|(
literal|"Unknown localizer with localizerId "
operator|+
name|locId
operator|+
literal|" is sending heartbeat. Ordering it to DIE"
argument_list|)
expr_stmt|;
name|LocalizerHeartbeatResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalizerHeartbeatResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|setLocalizerAction
argument_list|(
name|LocalizerAction
operator|.
name|DIE
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
return|return
name|localizer
operator|.
name|processHeartbeat
argument_list|(
name|status
operator|.
name|getResources
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|public
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|LocalizerRunner
name|localizer
range|:
name|privLocalizers
operator|.
name|values
argument_list|()
control|)
block|{
name|localizer
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|publicLocalizer
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (LocalizerEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|LocalizerEvent
name|event
parameter_list|)
block|{
name|String
name|locId
init|=
name|event
operator|.
name|getLocalizerId
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|REQUEST_RESOURCE_LOCALIZATION
case|:
comment|// 0) find running localizer or start new thread
name|LocalizerResourceRequestEvent
name|req
init|=
operator|(
name|LocalizerResourceRequestEvent
operator|)
name|event
decl_stmt|;
switch|switch
condition|(
name|req
operator|.
name|getVisibility
argument_list|()
condition|)
block|{
case|case
name|PUBLIC
case|:
name|publicLocalizer
operator|.
name|addResource
argument_list|(
name|req
argument_list|)
expr_stmt|;
break|break;
case|case
name|PRIVATE
case|:
case|case
name|APPLICATION
case|:
synchronized|synchronized
init|(
name|privLocalizers
init|)
block|{
name|LocalizerRunner
name|localizer
init|=
name|privLocalizers
operator|.
name|get
argument_list|(
name|locId
argument_list|)
decl_stmt|;
if|if
condition|(
name|localizer
operator|!=
literal|null
operator|&&
name|localizer
operator|.
name|killContainerLocalizer
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// Old localizer thread has been stopped, remove it and creates
comment|// a new localizer thread.
name|LOG
operator|.
name|info
argument_list|(
literal|"New "
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|" localize request for "
operator|+
name|locId
operator|+
literal|", remove old private localizer."
argument_list|)
expr_stmt|;
name|cleanupPrivLocalizers
argument_list|(
name|locId
argument_list|)
expr_stmt|;
name|localizer
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|localizer
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Created localizer for "
operator|+
name|locId
argument_list|)
expr_stmt|;
name|localizer
operator|=
operator|new
name|LocalizerRunner
argument_list|(
name|req
operator|.
name|getContext
argument_list|()
argument_list|,
name|locId
argument_list|)
expr_stmt|;
name|privLocalizers
operator|.
name|put
argument_list|(
name|locId
argument_list|,
name|localizer
argument_list|)
expr_stmt|;
name|localizer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// 1) propagate event
name|localizer
operator|.
name|addResource
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
break|break;
block|}
block|}
DECL|method|cleanupPrivLocalizers (String locId)
specifier|public
name|void
name|cleanupPrivLocalizers
parameter_list|(
name|String
name|locId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|privLocalizers
init|)
block|{
name|LocalizerRunner
name|localizer
init|=
name|privLocalizers
operator|.
name|get
argument_list|(
name|locId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|localizer
condition|)
block|{
return|return;
comment|// ignore; already gone
block|}
name|privLocalizers
operator|.
name|remove
argument_list|(
name|locId
argument_list|)
expr_stmt|;
name|localizer
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|endContainerLocalization (String locId)
specifier|public
name|void
name|endContainerLocalization
parameter_list|(
name|String
name|locId
parameter_list|)
block|{
name|LocalizerRunner
name|localizer
decl_stmt|;
synchronized|synchronized
init|(
name|privLocalizers
init|)
block|{
name|localizer
operator|=
name|privLocalizers
operator|.
name|get
argument_list|(
name|locId
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|localizer
condition|)
block|{
return|return;
comment|// ignore
block|}
block|}
name|localizer
operator|.
name|endContainerLocalization
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createLocalizerExecutor (Configuration conf)
specifier|private
specifier|static
name|ExecutorService
name|createLocalizerExecutor
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|int
name|nThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCALIZER_FETCH_THREAD_COUNT
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LOCALIZER_FETCH_THREAD_COUNT
argument_list|)
decl_stmt|;
name|ThreadFactory
name|tf
init|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"PublicLocalizer #%d"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|HadoopExecutors
operator|.
name|newFixedThreadPool
argument_list|(
name|nThreads
argument_list|,
name|tf
argument_list|)
return|;
block|}
DECL|class|PublicLocalizer
class|class
name|PublicLocalizer
extends|extends
name|Thread
block|{
DECL|field|lfs
specifier|final
name|FileContext
name|lfs
decl_stmt|;
DECL|field|conf
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|threadPool
specifier|final
name|ExecutorService
name|threadPool
decl_stmt|;
DECL|field|queue
specifier|final
name|CompletionService
argument_list|<
name|Path
argument_list|>
name|queue
decl_stmt|;
comment|// Its shared between public localizer and dispatcher thread.
DECL|field|pending
specifier|final
name|Map
argument_list|<
name|Future
argument_list|<
name|Path
argument_list|>
argument_list|,
name|LocalizerResourceRequestEvent
argument_list|>
name|pending
decl_stmt|;
DECL|method|PublicLocalizer (Configuration conf)
name|PublicLocalizer
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
literal|"Public Localizer"
argument_list|)
expr_stmt|;
name|this
operator|.
name|lfs
operator|=
name|getLocalFileContext
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|pending
operator|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|Future
argument_list|<
name|Path
argument_list|>
argument_list|,
name|LocalizerResourceRequestEvent
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|createLocalizerExecutor
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|queue
operator|=
operator|new
name|ExecutorCompletionService
argument_list|<
name|Path
argument_list|>
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
DECL|method|addResource (LocalizerResourceRequestEvent request)
specifier|public
name|void
name|addResource
parameter_list|(
name|LocalizerResourceRequestEvent
name|request
parameter_list|)
block|{
comment|// TODO handle failures, cancellation, requests by other containers
name|LocalizedResource
name|rsrc
init|=
name|request
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|LocalResourceRequest
name|key
init|=
name|rsrc
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Downloading public rsrc:"
operator|+
name|key
argument_list|)
expr_stmt|;
comment|/*        * Here multiple containers may request the same resource. So we need        * to start downloading only when        * 1) ResourceState == DOWNLOADING        * 2) We are able to acquire non blocking semaphore lock.        * If not we will skip this resource as either it is getting downloaded        * or it FAILED / LOCALIZED.        */
if|if
condition|(
name|rsrc
operator|.
name|tryAcquire
argument_list|()
condition|)
block|{
if|if
condition|(
name|rsrc
operator|.
name|getState
argument_list|()
operator|==
name|ResourceState
operator|.
name|DOWNLOADING
condition|)
block|{
name|LocalResource
name|resource
init|=
name|request
operator|.
name|getResource
argument_list|()
operator|.
name|getRequest
argument_list|()
decl_stmt|;
try|try
block|{
name|Path
name|publicRootPath
init|=
name|dirsHandler
operator|.
name|getLocalPathForWrite
argument_list|(
literal|"."
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|ContainerLocalizer
operator|.
name|FILECACHE
argument_list|,
name|ContainerLocalizer
operator|.
name|getEstimatedSize
argument_list|(
name|resource
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Path
name|publicDirDestPath
init|=
name|publicRsrc
operator|.
name|getPathForLocalization
argument_list|(
name|key
argument_list|,
name|publicRootPath
argument_list|,
name|delService
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|publicDirDestPath
operator|.
name|getParent
argument_list|()
operator|.
name|equals
argument_list|(
name|publicRootPath
argument_list|)
condition|)
block|{
if|if
condition|(
name|diskValidator
operator|!=
literal|null
condition|)
block|{
name|diskValidator
operator|.
name|checkStatus
argument_list|(
operator|new
name|File
argument_list|(
name|publicDirDestPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|DiskChecker
operator|.
name|DiskErrorException
argument_list|(
literal|"Disk Validator is null!"
argument_list|)
throw|;
block|}
block|}
comment|// explicitly synchronize pending here to avoid future task
comment|// completing and being dequeued before pending updated
synchronized|synchronized
init|(
name|pending
init|)
block|{
name|pending
operator|.
name|put
argument_list|(
name|queue
operator|.
name|submit
argument_list|(
operator|new
name|FSDownload
argument_list|(
name|lfs
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|,
name|publicDirDestPath
argument_list|,
name|resource
argument_list|,
name|request
operator|.
name|getContext
argument_list|()
operator|.
name|getStatCache
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|rsrc
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|publicRsrc
operator|.
name|handle
argument_list|(
operator|new
name|ResourceFailedLocalizationEvent
argument_list|(
name|request
operator|.
name|getResource
argument_list|()
operator|.
name|getRequest
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Local path for public localization is not found. "
operator|+
literal|" May be disks failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ie
parameter_list|)
block|{
name|rsrc
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|publicRsrc
operator|.
name|handle
argument_list|(
operator|new
name|ResourceFailedLocalizationEvent
argument_list|(
name|request
operator|.
name|getResource
argument_list|()
operator|.
name|getRequest
argument_list|()
argument_list|,
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Local path for public localization is not found. "
operator|+
literal|" Incorrect path. "
operator|+
name|request
operator|.
name|getResource
argument_list|()
operator|.
name|getRequest
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|re
parameter_list|)
block|{
name|rsrc
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|publicRsrc
operator|.
name|handle
argument_list|(
operator|new
name|ResourceFailedLocalizationEvent
argument_list|(
name|request
operator|.
name|getResource
argument_list|()
operator|.
name|getRequest
argument_list|()
argument_list|,
name|re
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to submit rsrc "
operator|+
name|rsrc
operator|+
literal|" for download."
operator|+
literal|" Either queue is full or threadpool is shutdown."
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|rsrc
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// TODO shutdown, better error handling esp. DU
while|while
condition|(
operator|!
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
try|try
block|{
name|Future
argument_list|<
name|Path
argument_list|>
name|completed
init|=
name|queue
operator|.
name|take
argument_list|()
decl_stmt|;
name|LocalizerResourceRequestEvent
name|assoc
init|=
name|pending
operator|.
name|remove
argument_list|(
name|completed
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
literal|null
operator|==
name|assoc
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Localized unknown resource to "
operator|+
name|completed
argument_list|)
expr_stmt|;
comment|// TODO delete
return|return;
block|}
name|Path
name|local
init|=
name|completed
operator|.
name|get
argument_list|()
decl_stmt|;
name|LocalResourceRequest
name|key
init|=
name|assoc
operator|.
name|getResource
argument_list|()
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|publicRsrc
operator|.
name|handle
argument_list|(
operator|new
name|ResourceLocalizedEvent
argument_list|(
name|key
argument_list|,
name|local
argument_list|,
name|FileUtil
operator|.
name|getDU
argument_list|(
operator|new
name|File
argument_list|(
name|local
operator|.
name|toUri
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assoc
operator|.
name|getResource
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to download resource "
operator|+
name|assoc
operator|.
name|getResource
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|LocalResourceRequest
name|req
init|=
name|assoc
operator|.
name|getResource
argument_list|()
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|publicRsrc
operator|.
name|handle
argument_list|(
operator|new
name|ResourceFailedLocalizationEvent
argument_list|(
name|req
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assoc
operator|.
name|getResource
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|e
parameter_list|)
block|{
comment|// ignore; shutting down
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Error: Shutting down"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Public cache exiting"
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Runs the {@link ContainerLocalizer} itself in a separate process with    * access to user's credentials. One {@link LocalizerRunner} per localizerId.    *     */
DECL|class|LocalizerRunner
class|class
name|LocalizerRunner
extends|extends
name|Thread
block|{
DECL|field|context
specifier|final
name|LocalizerContext
name|context
decl_stmt|;
DECL|field|localizerId
specifier|final
name|String
name|localizerId
decl_stmt|;
DECL|field|scheduled
specifier|final
name|Map
argument_list|<
name|LocalResourceRequest
argument_list|,
name|LocalizerResourceRequestEvent
argument_list|>
name|scheduled
decl_stmt|;
comment|// Its a shared list between Private Localizer and dispatcher thread.
DECL|field|pending
specifier|final
name|List
argument_list|<
name|LocalizerResourceRequestEvent
argument_list|>
name|pending
decl_stmt|;
DECL|field|killContainerLocalizer
specifier|private
name|AtomicBoolean
name|killContainerLocalizer
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// TODO: threadsafe, use outer?
DECL|field|recordFactory
specifier|private
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|LocalizerRunner (LocalizerContext context, String localizerId)
name|LocalizerRunner
parameter_list|(
name|LocalizerContext
name|context
parameter_list|,
name|String
name|localizerId
parameter_list|)
block|{
name|super
argument_list|(
literal|"LocalizerRunner for "
operator|+
name|localizerId
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|localizerId
operator|=
name|localizerId
expr_stmt|;
name|this
operator|.
name|pending
operator|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|LocalizerResourceRequestEvent
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduled
operator|=
operator|new
name|HashMap
argument_list|<
name|LocalResourceRequest
argument_list|,
name|LocalizerResourceRequestEvent
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|addResource (LocalizerResourceRequestEvent request)
specifier|public
name|void
name|addResource
parameter_list|(
name|LocalizerResourceRequestEvent
name|request
parameter_list|)
block|{
name|pending
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
DECL|method|endContainerLocalization ()
specifier|public
name|void
name|endContainerLocalization
parameter_list|()
block|{
name|killContainerLocalizer
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Find next resource to be given to a spawned localizer.      *       * @return the next resource to be localized      */
DECL|method|findNextResource ()
specifier|private
name|LocalResource
name|findNextResource
parameter_list|()
block|{
synchronized|synchronized
init|(
name|pending
init|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|LocalizerResourceRequestEvent
argument_list|>
name|i
init|=
name|pending
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|LocalizerResourceRequestEvent
name|evt
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|LocalizedResource
name|nRsrc
init|=
name|evt
operator|.
name|getResource
argument_list|()
decl_stmt|;
comment|// Resource download should take place ONLY if resource is in
comment|// Downloading state
if|if
condition|(
name|nRsrc
operator|.
name|getState
argument_list|()
operator|!=
name|ResourceState
operator|.
name|DOWNLOADING
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
comment|/*           * Multiple containers will try to download the same resource. So the           * resource download should start only if           * 1) We can acquire a non blocking semaphore lock on resource           * 2) Resource is still in DOWNLOADING state           */
if|if
condition|(
name|nRsrc
operator|.
name|tryAcquire
argument_list|()
condition|)
block|{
if|if
condition|(
name|nRsrc
operator|.
name|getState
argument_list|()
operator|==
name|ResourceState
operator|.
name|DOWNLOADING
condition|)
block|{
name|LocalResourceRequest
name|nextRsrc
init|=
name|nRsrc
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|LocalResource
name|next
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|next
operator|.
name|setResource
argument_list|(
name|URL
operator|.
name|fromPath
argument_list|(
name|nextRsrc
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|next
operator|.
name|setTimestamp
argument_list|(
name|nextRsrc
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|next
operator|.
name|setType
argument_list|(
name|nextRsrc
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|next
operator|.
name|setVisibility
argument_list|(
name|evt
operator|.
name|getVisibility
argument_list|()
argument_list|)
expr_stmt|;
name|next
operator|.
name|setPattern
argument_list|(
name|evt
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
name|scheduled
operator|.
name|put
argument_list|(
name|nextRsrc
argument_list|,
name|evt
argument_list|)
expr_stmt|;
return|return
name|next
return|;
block|}
else|else
block|{
comment|// Need to release acquired lock
name|nRsrc
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
DECL|method|processHeartbeat ( List<LocalResourceStatus> remoteResourceStatuses)
name|LocalizerHeartbeatResponse
name|processHeartbeat
parameter_list|(
name|List
argument_list|<
name|LocalResourceStatus
argument_list|>
name|remoteResourceStatuses
parameter_list|)
block|{
name|LocalizerHeartbeatResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalizerHeartbeatResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|context
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|context
operator|.
name|getContainerId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|boolean
name|fetchFailed
init|=
literal|false
decl_stmt|;
comment|// Update resource statuses.
for|for
control|(
name|LocalResourceStatus
name|stat
range|:
name|remoteResourceStatuses
control|)
block|{
name|LocalResource
name|rsrc
init|=
name|stat
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|LocalResourceRequest
name|req
init|=
literal|null
decl_stmt|;
try|try
block|{
name|req
operator|=
operator|new
name|LocalResourceRequest
argument_list|(
name|rsrc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got exception in parsing URL of LocalResource:"
operator|+
name|rsrc
operator|.
name|getResource
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LocalizerResourceRequestEvent
name|assoc
init|=
name|scheduled
operator|.
name|get
argument_list|(
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
name|assoc
operator|==
literal|null
condition|)
block|{
comment|// internal error
name|LOG
operator|.
name|error
argument_list|(
literal|"Unknown resource reported: "
operator|+
name|req
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LocalResourcesTracker
name|tracker
init|=
name|getLocalResourcesTracker
argument_list|(
name|req
operator|.
name|getVisibility
argument_list|()
argument_list|,
name|user
argument_list|,
name|applicationId
argument_list|)
decl_stmt|;
if|if
condition|(
name|tracker
operator|==
literal|null
condition|)
block|{
comment|// This is likely due to a race between heartbeat and
comment|// app cleaning up.
continue|continue;
block|}
switch|switch
condition|(
name|stat
operator|.
name|getStatus
argument_list|()
condition|)
block|{
case|case
name|FETCH_SUCCESS
case|:
comment|// notify resource
try|try
block|{
name|tracker
operator|.
name|handle
argument_list|(
operator|new
name|ResourceLocalizedEvent
argument_list|(
name|req
argument_list|,
name|stat
operator|.
name|getLocalPath
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|,
name|stat
operator|.
name|getLocalSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{ }
comment|// unlocking the resource and removing it from scheduled resource
comment|// list
name|assoc
operator|.
name|getResource
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|scheduled
operator|.
name|remove
argument_list|(
name|req
argument_list|)
expr_stmt|;
break|break;
case|case
name|FETCH_PENDING
case|:
break|break;
case|case
name|FETCH_FAILURE
case|:
specifier|final
name|String
name|diagnostics
init|=
name|stat
operator|.
name|getException
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|req
operator|+
literal|" failed: "
operator|+
name|diagnostics
argument_list|)
expr_stmt|;
name|fetchFailed
operator|=
literal|true
expr_stmt|;
name|tracker
operator|.
name|handle
argument_list|(
operator|new
name|ResourceFailedLocalizationEvent
argument_list|(
name|req
argument_list|,
name|diagnostics
argument_list|)
argument_list|)
expr_stmt|;
comment|// unlocking the resource and removing it from scheduled resource
comment|// list
name|assoc
operator|.
name|getResource
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|scheduled
operator|.
name|remove
argument_list|(
name|req
argument_list|)
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|info
argument_list|(
literal|"Unknown status: "
operator|+
name|stat
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|fetchFailed
operator|=
literal|true
expr_stmt|;
name|tracker
operator|.
name|handle
argument_list|(
operator|new
name|ResourceFailedLocalizationEvent
argument_list|(
name|req
argument_list|,
name|stat
operator|.
name|getException
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|fetchFailed
operator|||
name|killContainerLocalizer
operator|.
name|get
argument_list|()
condition|)
block|{
name|response
operator|.
name|setLocalizerAction
argument_list|(
name|LocalizerAction
operator|.
name|DIE
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
comment|// Give the localizer resources for remote-fetching.
name|List
argument_list|<
name|ResourceLocalizationSpec
argument_list|>
name|rsrcs
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceLocalizationSpec
argument_list|>
argument_list|()
decl_stmt|;
comment|/*        * TODO : It doesn't support multiple downloads per ContainerLocalizer        * at the same time. We need to think whether we should support this.        */
name|LocalResource
name|next
init|=
name|findNextResource
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|LocalResourcesTracker
name|tracker
init|=
name|getLocalResourcesTracker
argument_list|(
name|next
operator|.
name|getVisibility
argument_list|()
argument_list|,
name|user
argument_list|,
name|applicationId
argument_list|)
decl_stmt|;
if|if
condition|(
name|tracker
operator|!=
literal|null
condition|)
block|{
name|ResourceLocalizationSpec
name|resource
init|=
name|NodeManagerBuilderUtils
operator|.
name|newResourceLocalizationSpec
argument_list|(
name|next
argument_list|,
name|getPathForLocalization
argument_list|(
name|next
argument_list|,
name|tracker
argument_list|)
argument_list|)
decl_stmt|;
name|rsrcs
operator|.
name|add
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"local path for PRIVATE localization could not be "
operator|+
literal|"found. Disks might have failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Incorrect path for PRIVATE localization."
operator|+
name|next
operator|.
name|getResource
argument_list|()
operator|.
name|getFile
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got exception in parsing URL of LocalResource:"
operator|+
name|next
operator|.
name|getResource
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|response
operator|.
name|setLocalizerAction
argument_list|(
name|LocalizerAction
operator|.
name|LIVE
argument_list|)
expr_stmt|;
name|response
operator|.
name|setResourceSpecs
argument_list|(
name|rsrcs
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
DECL|method|getPathForLocalization (LocalResource rsrc, LocalResourcesTracker tracker)
specifier|private
name|Path
name|getPathForLocalization
parameter_list|(
name|LocalResource
name|rsrc
parameter_list|,
name|LocalResourcesTracker
name|tracker
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|String
name|user
init|=
name|context
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|context
operator|.
name|getContainerId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|LocalResourceVisibility
name|vis
init|=
name|rsrc
operator|.
name|getVisibility
argument_list|()
decl_stmt|;
name|String
name|cacheDirectory
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|vis
operator|==
name|LocalResourceVisibility
operator|.
name|PRIVATE
condition|)
block|{
comment|// PRIVATE Only
name|cacheDirectory
operator|=
name|getUserFileCachePath
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// APPLICATION ONLY
name|cacheDirectory
operator|=
name|getAppFileCachePath
argument_list|(
name|user
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Path
name|dirPath
init|=
name|dirsHandler
operator|.
name|getLocalPathForWrite
argument_list|(
name|cacheDirectory
argument_list|,
name|ContainerLocalizer
operator|.
name|getEstimatedSize
argument_list|(
name|rsrc
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|tracker
operator|.
name|getPathForLocalization
argument_list|(
operator|new
name|LocalResourceRequest
argument_list|(
name|rsrc
argument_list|)
argument_list|,
name|dirPath
argument_list|,
name|delService
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dispatcher not typed
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Path
name|nmPrivateCTokensPath
init|=
literal|null
decl_stmt|;
name|Throwable
name|exception
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Get nmPrivateDir
name|nmPrivateCTokensPath
operator|=
name|dirsHandler
operator|.
name|getLocalPathForWrite
argument_list|(
name|NM_PRIVATE_DIR
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|String
operator|.
name|format
argument_list|(
name|ContainerLocalizer
operator|.
name|TOKEN_FILE_NAME_FMT
argument_list|,
name|localizerId
argument_list|)
argument_list|)
expr_stmt|;
comment|// 0) init queue, etc.
comment|// 1) write credentials to private dir
name|writeCredentials
argument_list|(
name|nmPrivateCTokensPath
argument_list|)
expr_stmt|;
comment|// 2) exec initApplication and wait
if|if
condition|(
name|dirsHandler
operator|.
name|areDisksHealthy
argument_list|()
condition|)
block|{
name|exec
operator|.
name|startLocalizer
argument_list|(
operator|new
name|LocalizerStartContext
operator|.
name|Builder
argument_list|()
operator|.
name|setNmPrivateContainerTokens
argument_list|(
name|nmPrivateCTokensPath
argument_list|)
operator|.
name|setNmAddr
argument_list|(
name|localizationServerAddress
argument_list|)
operator|.
name|setUser
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|setAppId
argument_list|(
name|context
operator|.
name|getContainerId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setLocId
argument_list|(
name|localizerId
argument_list|)
operator|.
name|setDirsHandler
argument_list|(
name|dirsHandler
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"All disks failed. "
operator|+
name|dirsHandler
operator|.
name|getDisksHealthReport
argument_list|(
literal|false
argument_list|)
argument_list|)
throw|;
block|}
comment|// TODO handle ExitCodeException separately?
block|}
catch|catch
parameter_list|(
name|FSError
name|fe
parameter_list|)
block|{
name|exception
operator|=
name|fe
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Localizer failed"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
comment|// On error, report failure to Container and signal ABORT
comment|// Notify resource of failed localization
name|ContainerId
name|cId
init|=
name|context
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerResourceFailedEvent
argument_list|(
name|cId
argument_list|,
literal|null
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|LocalizerResourceRequestEvent
name|event
range|:
name|scheduled
operator|.
name|values
argument_list|()
control|)
block|{
comment|// This means some resources were in downloading state. Schedule
comment|// deletion task for localization dir and tmp dir used for downloading
name|Path
name|locRsrcPath
init|=
name|event
operator|.
name|getResource
argument_list|()
operator|.
name|getLocalPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|locRsrcPath
operator|!=
literal|null
condition|)
block|{
name|Path
name|locRsrcDirPath
init|=
name|locRsrcPath
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|locRsrcDirPath
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|locRsrcDirPath
operator|+
literal|"_tmp"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|event
operator|.
name|getResource
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|paths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|FileDeletionTask
name|deletionTask
init|=
operator|new
name|FileDeletionTask
argument_list|(
name|delService
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
literal|null
argument_list|,
name|paths
argument_list|)
decl_stmt|;
name|delService
operator|.
name|delete
argument_list|(
name|deletionTask
argument_list|)
expr_stmt|;
block|}
name|FileDeletionTask
name|deletionTask
init|=
operator|new
name|FileDeletionTask
argument_list|(
name|delService
argument_list|,
literal|null
argument_list|,
name|nmPrivateCTokensPath
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|delService
operator|.
name|delete
argument_list|(
name|deletionTask
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getSystemCredentialsSentFromRM ( LocalizerContext localizerContext)
specifier|private
name|Credentials
name|getSystemCredentialsSentFromRM
parameter_list|(
name|LocalizerContext
name|localizerContext
parameter_list|)
throws|throws
name|IOException
block|{
name|ApplicationId
name|appId
init|=
name|localizerContext
operator|.
name|getContainerId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|Credentials
name|systemCredentials
init|=
name|nmContext
operator|.
name|getSystemCredentialsForApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|systemCredentials
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding new framework-token for "
operator|+
name|appId
operator|+
literal|" for localization: "
operator|+
name|systemCredentials
operator|.
name|getAllTokens
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|systemCredentials
return|;
block|}
DECL|method|writeCredentials (Path nmPrivateCTokensPath)
specifier|private
name|void
name|writeCredentials
parameter_list|(
name|Path
name|nmPrivateCTokensPath
parameter_list|)
throws|throws
name|IOException
block|{
name|DataOutputStream
name|tokenOut
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Credentials
name|credentials
init|=
name|context
operator|.
name|getCredentials
argument_list|()
decl_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|Credentials
name|systemCredentials
init|=
name|getSystemCredentialsSentFromRM
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|systemCredentials
operator|!=
literal|null
condition|)
block|{
name|credentials
operator|=
name|systemCredentials
expr_stmt|;
block|}
block|}
name|FileContext
name|lfs
init|=
name|getLocalFileContext
argument_list|(
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
name|tokenOut
operator|=
name|lfs
operator|.
name|create
argument_list|(
name|nmPrivateCTokensPath
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CREATE
argument_list|,
name|OVERWRITE
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Writing credentials to the nmPrivate file "
operator|+
name|nmPrivateCTokensPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Credentials list in "
operator|+
name|nmPrivateCTokensPath
operator|.
name|toString
argument_list|()
operator|+
literal|": "
argument_list|)
expr_stmt|;
for|for
control|(
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|tk
range|:
name|credentials
operator|.
name|getAllTokens
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|tk
operator|+
literal|" : "
operator|+
name|buildTokenFingerprint
argument_list|(
name|tk
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|credentials
operator|=
operator|new
name|Credentials
argument_list|(
name|credentials
argument_list|)
expr_stmt|;
name|LocalizerTokenIdentifier
name|id
init|=
name|secretManager
operator|.
name|createIdentifier
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|LocalizerTokenIdentifier
argument_list|>
name|localizerToken
init|=
operator|new
name|Token
argument_list|<
name|LocalizerTokenIdentifier
argument_list|>
argument_list|(
name|id
argument_list|,
name|secretManager
argument_list|)
decl_stmt|;
name|credentials
operator|.
name|addToken
argument_list|(
name|id
operator|.
name|getKind
argument_list|()
argument_list|,
name|localizerToken
argument_list|)
expr_stmt|;
block|}
name|credentials
operator|.
name|writeTokenStorageToStream
argument_list|(
name|tokenOut
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|tokenOut
operator|!=
literal|null
condition|)
block|{
name|tokenOut
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Returns a fingerprint of a token.  The fingerprint is suitable for use in    * logging, because it cannot be used to determine the secret.  The    * fingerprint is built using the first 10 bytes of a SHA-256 hash of the    * string encoding of the token.  The returned string contains the hex    * representation of each byte, delimited by a space.    *    * @param tk token    * @return token fingerprint    * @throws IOException if there is an I/O error    */
annotation|@
name|VisibleForTesting
DECL|method|buildTokenFingerprint (Token<? extends TokenIdentifier> tk)
specifier|static
name|String
name|buildTokenFingerprint
parameter_list|(
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|tk
parameter_list|)
throws|throws
name|IOException
block|{
name|char
index|[]
name|digest
init|=
name|DigestUtils
operator|.
name|sha256Hex
argument_list|(
name|tk
operator|.
name|encodeToUrlString
argument_list|()
argument_list|)
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|StringBuilder
name|fingerprint
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|fingerprint
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|fingerprint
operator|.
name|append
argument_list|(
name|digest
index|[
literal|2
operator|*
name|i
index|]
argument_list|)
expr_stmt|;
name|fingerprint
operator|.
name|append
argument_list|(
name|digest
index|[
literal|2
operator|*
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|fingerprint
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|class|CacheCleanup
specifier|static
class|class
name|CacheCleanup
extends|extends
name|Thread
block|{
DECL|field|dispatcher
specifier|private
specifier|final
name|Dispatcher
name|dispatcher
decl_stmt|;
DECL|method|CacheCleanup (Dispatcher dispatcher)
specifier|public
name|CacheCleanup
parameter_list|(
name|Dispatcher
name|dispatcher
parameter_list|)
block|{
name|super
argument_list|(
literal|"CacheCleanup"
argument_list|)
expr_stmt|;
name|this
operator|.
name|dispatcher
operator|=
name|dispatcher
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dispatcher not typed
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|LocalizationEvent
argument_list|(
name|LocalizationEventType
operator|.
name|CACHE_CLEANUP
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initializeLocalDirs (FileContext lfs)
specifier|private
name|void
name|initializeLocalDirs
parameter_list|(
name|FileContext
name|lfs
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|localDirs
init|=
name|dirsHandler
operator|.
name|getLocalDirs
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|localDir
range|:
name|localDirs
control|)
block|{
name|initializeLocalDir
argument_list|(
name|lfs
argument_list|,
name|localDir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initializeLocalDir (FileContext lfs, String localDir)
specifier|private
name|void
name|initializeLocalDir
parameter_list|(
name|FileContext
name|lfs
parameter_list|,
name|String
name|localDir
parameter_list|)
block|{
name|Map
argument_list|<
name|Path
argument_list|,
name|FsPermission
argument_list|>
name|pathPermissionMap
init|=
name|getLocalDirsPathPermissionsMap
argument_list|(
name|localDir
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Path
argument_list|,
name|FsPermission
argument_list|>
name|entry
range|:
name|pathPermissionMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|FileStatus
name|status
decl_stmt|;
try|try
block|{
name|status
operator|=
name|lfs
operator|.
name|getFileStatus
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fs
parameter_list|)
block|{
name|status
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Could not get file status for local dir "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|,
name|ie
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|msg
argument_list|,
name|ie
argument_list|)
throw|;
block|}
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|lfs
operator|.
name|mkdir
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|status
operator|=
name|lfs
operator|.
name|getFileStatus
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Could not initialize local dir "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|FsPermission
name|perms
init|=
name|status
operator|.
name|getPermission
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|perms
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|lfs
operator|.
name|setPermission
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Could not set permissions for local dir "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|,
name|ie
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|msg
argument_list|,
name|ie
argument_list|)
throw|;
block|}
block|}
block|}
block|}
DECL|method|initializeLogDirs (FileContext lfs)
specifier|private
name|void
name|initializeLogDirs
parameter_list|(
name|FileContext
name|lfs
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|logDirs
init|=
name|dirsHandler
operator|.
name|getLogDirs
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|logDir
range|:
name|logDirs
control|)
block|{
name|initializeLogDir
argument_list|(
name|lfs
argument_list|,
name|logDir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initializeLogDir (FileContext fs, String logDir)
specifier|private
name|void
name|initializeLogDir
parameter_list|(
name|FileContext
name|fs
parameter_list|,
name|String
name|logDir
parameter_list|)
block|{
try|try
block|{
name|fs
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
name|logDir
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileAlreadyExistsException
name|fe
parameter_list|)
block|{
comment|// do nothing
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Could not initialize log dir "
operator|+
name|logDir
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|cleanupLogDirs (FileContext fs, DeletionService del)
specifier|private
name|void
name|cleanupLogDirs
parameter_list|(
name|FileContext
name|fs
parameter_list|,
name|DeletionService
name|del
parameter_list|)
block|{
for|for
control|(
name|String
name|logDir
range|:
name|dirsHandler
operator|.
name|getLogDirsForCleanup
argument_list|()
control|)
block|{
try|try
block|{
name|cleanupLogDir
argument_list|(
name|fs
argument_list|,
name|del
argument_list|,
name|logDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"failed to cleanup app log dir "
operator|+
name|logDir
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|cleanupLogDir (FileContext fs, DeletionService del, String logDir)
specifier|private
name|void
name|cleanupLogDir
parameter_list|(
name|FileContext
name|fs
parameter_list|,
name|DeletionService
name|del
parameter_list|,
name|String
name|logDir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|util
argument_list|()
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|logDir
argument_list|)
argument_list|)
condition|)
block|{
return|return;
block|}
name|renameAppLogDir
argument_list|(
name|logDir
argument_list|)
expr_stmt|;
name|deleteAppLogDir
argument_list|(
name|fs
argument_list|,
name|del
argument_list|,
name|logDir
argument_list|)
expr_stmt|;
block|}
DECL|method|renameAppLogDir (String logDir)
specifier|private
name|void
name|renameAppLogDir
parameter_list|(
name|String
name|logDir
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|currentTimeStamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|fileStatuses
init|=
name|lfs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|logDir
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatuses
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|fileStatuses
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileStatus
name|fileStatus
init|=
name|fileStatuses
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|appName
init|=
name|fileStatus
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|appName
operator|.
name|matches
argument_list|(
literal|"^application_\\d+_\\d+$"
argument_list|)
condition|)
block|{
name|lfs
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
name|logDir
argument_list|,
name|appName
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|logDir
argument_list|,
name|appName
operator|+
literal|"_DEL_"
operator|+
name|currentTimeStamp
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|deleteAppLogDir (FileContext fs, DeletionService del, String logDir)
specifier|private
name|void
name|deleteAppLogDir
parameter_list|(
name|FileContext
name|fs
parameter_list|,
name|DeletionService
name|del
parameter_list|,
name|String
name|logDir
parameter_list|)
throws|throws
name|IOException
block|{
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|fileStatuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|logDir
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatuses
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|fileStatuses
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileStatus
name|fileStatus
init|=
name|fileStatuses
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|appName
init|=
name|fileStatus
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|appName
operator|.
name|matches
argument_list|(
literal|"^application_\\d+_\\d+_DEL_\\d+$"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"delete app log dir,"
operator|+
name|appName
argument_list|)
expr_stmt|;
name|FileDeletionTask
name|deletionTask
init|=
operator|new
name|FileDeletionTask
argument_list|(
name|del
argument_list|,
literal|null
argument_list|,
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|del
operator|.
name|delete
argument_list|(
name|deletionTask
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|cleanUpLocalDirs (FileContext lfs, DeletionService del)
specifier|private
name|void
name|cleanUpLocalDirs
parameter_list|(
name|FileContext
name|lfs
parameter_list|,
name|DeletionService
name|del
parameter_list|)
block|{
for|for
control|(
name|String
name|localDir
range|:
name|dirsHandler
operator|.
name|getLocalDirsForCleanup
argument_list|()
control|)
block|{
name|cleanUpLocalDir
argument_list|(
name|lfs
argument_list|,
name|del
argument_list|,
name|localDir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|cleanUpLocalDir (FileContext lfs, DeletionService del, String localDir)
specifier|private
name|void
name|cleanUpLocalDir
parameter_list|(
name|FileContext
name|lfs
parameter_list|,
name|DeletionService
name|del
parameter_list|,
name|String
name|localDir
parameter_list|)
block|{
name|long
name|currentTimeStamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|renameLocalDir
argument_list|(
name|lfs
argument_list|,
name|localDir
argument_list|,
name|ContainerLocalizer
operator|.
name|USERCACHE
argument_list|,
name|currentTimeStamp
argument_list|)
expr_stmt|;
name|renameLocalDir
argument_list|(
name|lfs
argument_list|,
name|localDir
argument_list|,
name|ContainerLocalizer
operator|.
name|FILECACHE
argument_list|,
name|currentTimeStamp
argument_list|)
expr_stmt|;
name|renameLocalDir
argument_list|(
name|lfs
argument_list|,
name|localDir
argument_list|,
name|ResourceLocalizationService
operator|.
name|NM_PRIVATE_DIR
argument_list|,
name|currentTimeStamp
argument_list|)
expr_stmt|;
try|try
block|{
name|deleteLocalDir
argument_list|(
name|lfs
argument_list|,
name|del
argument_list|,
name|localDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Do nothing, just give the warning
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to delete localDir: "
operator|+
name|localDir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|renameLocalDir (FileContext lfs, String localDir, String localSubDir, long currentTimeStamp)
specifier|private
name|void
name|renameLocalDir
parameter_list|(
name|FileContext
name|lfs
parameter_list|,
name|String
name|localDir
parameter_list|,
name|String
name|localSubDir
parameter_list|,
name|long
name|currentTimeStamp
parameter_list|)
block|{
try|try
block|{
name|lfs
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|localSubDir
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|localSubDir
operator|+
literal|"_DEL_"
operator|+
name|currentTimeStamp
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ex
parameter_list|)
block|{
comment|// No need to handle this exception
comment|// localSubDir may not be exist
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// Do nothing, just give the warning
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to rename the local file under "
operator|+
name|localDir
operator|+
literal|"/"
operator|+
name|localSubDir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deleteLocalDir (FileContext lfs, DeletionService del, String localDir)
specifier|private
name|void
name|deleteLocalDir
parameter_list|(
name|FileContext
name|lfs
parameter_list|,
name|DeletionService
name|del
parameter_list|,
name|String
name|localDir
parameter_list|)
throws|throws
name|IOException
block|{
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|fileStatus
init|=
name|lfs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|localDir
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|fileStatus
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileStatus
name|status
init|=
name|fileStatus
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|".*"
operator|+
name|ContainerLocalizer
operator|.
name|USERCACHE
operator|+
literal|"_DEL_.*"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"usercache path : "
operator|+
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|cleanUpFilesPerUserDir
argument_list|(
name|lfs
argument_list|,
name|del
argument_list|,
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|".*"
operator|+
name|NM_PRIVATE_DIR
operator|+
literal|"_DEL_.*"
argument_list|)
operator|||
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|".*"
operator|+
name|ContainerLocalizer
operator|.
name|FILECACHE
operator|+
literal|"_DEL_.*"
argument_list|)
condition|)
block|{
name|FileDeletionTask
name|deletionTask
init|=
operator|new
name|FileDeletionTask
argument_list|(
name|del
argument_list|,
literal|null
argument_list|,
name|status
operator|.
name|getPath
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|del
operator|.
name|delete
argument_list|(
name|deletionTask
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// Do nothing, just give the warning
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to delete this local Directory: "
operator|+
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|cleanUpFilesPerUserDir (FileContext lfs, DeletionService del, Path userDirPath)
specifier|private
name|void
name|cleanUpFilesPerUserDir
parameter_list|(
name|FileContext
name|lfs
parameter_list|,
name|DeletionService
name|del
parameter_list|,
name|Path
name|userDirPath
parameter_list|)
throws|throws
name|IOException
block|{
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|userDirStatus
init|=
name|lfs
operator|.
name|listStatus
argument_list|(
name|userDirPath
argument_list|)
decl_stmt|;
name|FileDeletionTask
name|dependentDeletionTask
init|=
operator|new
name|FileDeletionTask
argument_list|(
name|del
argument_list|,
literal|null
argument_list|,
name|userDirPath
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|userDirStatus
operator|!=
literal|null
operator|&&
name|userDirStatus
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|FileDeletionTask
argument_list|>
name|deletionTasks
init|=
operator|new
name|ArrayList
argument_list|<
name|FileDeletionTask
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|userDirStatus
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileStatus
name|status
init|=
name|userDirStatus
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|owner
init|=
name|status
operator|.
name|getOwner
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|pathList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|pathList
operator|.
name|add
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|FileDeletionTask
name|deletionTask
init|=
operator|new
name|FileDeletionTask
argument_list|(
name|del
argument_list|,
name|owner
argument_list|,
literal|null
argument_list|,
name|pathList
argument_list|)
decl_stmt|;
name|deletionTask
operator|.
name|addDeletionTaskDependency
argument_list|(
name|dependentDeletionTask
argument_list|)
expr_stmt|;
name|deletionTasks
operator|.
name|add
argument_list|(
name|deletionTask
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FileDeletionTask
name|task
range|:
name|deletionTasks
control|)
block|{
name|del
operator|.
name|delete
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|del
operator|.
name|delete
argument_list|(
name|dependentDeletionTask
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Check each local dir to ensure it has been setup correctly and will    * attempt to fix any issues it finds.    * @return void    */
annotation|@
name|VisibleForTesting
DECL|method|checkAndInitializeLocalDirs ()
name|void
name|checkAndInitializeLocalDirs
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|dirs
init|=
name|dirsHandler
operator|.
name|getLocalDirs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|checkFailedDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dir
range|:
name|dirs
control|)
block|{
try|try
block|{
name|checkLocalDir
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRuntimeException
name|e
parameter_list|)
block|{
name|checkFailedDirs
operator|.
name|add
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|dir
range|:
name|checkFailedDirs
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempting to initialize "
operator|+
name|dir
argument_list|)
expr_stmt|;
name|initializeLocalDir
argument_list|(
name|lfs
argument_list|,
name|dir
argument_list|)
expr_stmt|;
try|try
block|{
name|checkLocalDir
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRuntimeException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Failed to setup local dir "
operator|+
name|dir
operator|+
literal|", which was marked as good."
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|checkLocalDir (String localDir)
specifier|private
name|boolean
name|checkLocalDir
parameter_list|(
name|String
name|localDir
parameter_list|)
block|{
name|Map
argument_list|<
name|Path
argument_list|,
name|FsPermission
argument_list|>
name|pathPermissionMap
init|=
name|getLocalDirsPathPermissionsMap
argument_list|(
name|localDir
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Path
argument_list|,
name|FsPermission
argument_list|>
name|entry
range|:
name|pathPermissionMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|FileStatus
name|status
decl_stmt|;
try|try
block|{
name|status
operator|=
name|lfs
operator|.
name|getFileStatus
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Could not carry out resource dir checks for "
operator|+
name|localDir
operator|+
literal|", which was marked as good"
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|status
operator|.
name|getPermission
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Permissions incorrectly set for dir "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|", should be "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|", actual value = "
operator|+
name|status
operator|.
name|getPermission
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|getLocalDirsPathPermissionsMap (String localDir)
specifier|private
name|Map
argument_list|<
name|Path
argument_list|,
name|FsPermission
argument_list|>
name|getLocalDirsPathPermissionsMap
parameter_list|(
name|String
name|localDir
parameter_list|)
block|{
name|Map
argument_list|<
name|Path
argument_list|,
name|FsPermission
argument_list|>
name|localDirPathFsPermissionsMap
init|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|FsPermission
argument_list|>
argument_list|()
decl_stmt|;
name|FsPermission
name|defaultPermission
init|=
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
operator|.
name|applyUMask
argument_list|(
name|lfs
operator|.
name|getUMask
argument_list|()
argument_list|)
decl_stmt|;
name|FsPermission
name|nmPrivatePermission
init|=
name|NM_PRIVATE_PERM
operator|.
name|applyUMask
argument_list|(
name|lfs
operator|.
name|getUMask
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|userDir
init|=
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|ContainerLocalizer
operator|.
name|USERCACHE
argument_list|)
decl_stmt|;
name|Path
name|fileDir
init|=
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|ContainerLocalizer
operator|.
name|FILECACHE
argument_list|)
decl_stmt|;
name|Path
name|sysDir
init|=
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|NM_PRIVATE_DIR
argument_list|)
decl_stmt|;
name|localDirPathFsPermissionsMap
operator|.
name|put
argument_list|(
name|userDir
argument_list|,
name|defaultPermission
argument_list|)
expr_stmt|;
name|localDirPathFsPermissionsMap
operator|.
name|put
argument_list|(
name|fileDir
argument_list|,
name|defaultPermission
argument_list|)
expr_stmt|;
name|localDirPathFsPermissionsMap
operator|.
name|put
argument_list|(
name|sysDir
argument_list|,
name|nmPrivatePermission
argument_list|)
expr_stmt|;
return|return
name|localDirPathFsPermissionsMap
return|;
block|}
block|}
end_class

end_unit

