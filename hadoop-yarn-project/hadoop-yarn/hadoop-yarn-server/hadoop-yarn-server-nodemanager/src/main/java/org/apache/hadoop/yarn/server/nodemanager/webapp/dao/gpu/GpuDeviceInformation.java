begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.webapp.dao.gpu
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|gpu
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * All GPU Device Information in the system, fetched from nvidia-smi.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"nvidia_smi_log"
argument_list|)
DECL|class|GpuDeviceInformation
specifier|public
class|class
name|GpuDeviceInformation
block|{
DECL|field|gpus
name|List
argument_list|<
name|PerGpuDeviceInformation
argument_list|>
name|gpus
decl_stmt|;
DECL|field|driverVersion
name|String
name|driverVersion
init|=
literal|"N/A"
decl_stmt|;
comment|// More fields like topology information could be added when needed.
comment|// ...
annotation|@
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
argument_list|(
name|name
operator|=
literal|"gpu"
argument_list|)
DECL|method|getGpus ()
specifier|public
name|List
argument_list|<
name|PerGpuDeviceInformation
argument_list|>
name|getGpus
parameter_list|()
block|{
return|return
name|gpus
return|;
block|}
DECL|method|setGpus (List<PerGpuDeviceInformation> gpus)
specifier|public
name|void
name|setGpus
parameter_list|(
name|List
argument_list|<
name|PerGpuDeviceInformation
argument_list|>
name|gpus
parameter_list|)
block|{
name|this
operator|.
name|gpus
operator|=
name|gpus
expr_stmt|;
block|}
annotation|@
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
argument_list|(
name|name
operator|=
literal|"driver_version"
argument_list|)
DECL|method|getDriverVersion ()
specifier|public
name|String
name|getDriverVersion
parameter_list|()
block|{
return|return
name|driverVersion
return|;
block|}
DECL|method|setDriverVersion (String driverVersion)
specifier|public
name|void
name|setDriverVersion
parameter_list|(
name|String
name|driverVersion
parameter_list|)
block|{
name|this
operator|.
name|driverVersion
operator|=
name|driverVersion
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"=== Gpus in the system ===\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\tDriver Version:"
argument_list|)
operator|.
name|append
argument_list|(
name|getDriverVersion
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|gpus
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|PerGpuDeviceInformation
name|gpu
range|:
name|gpus
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|gpu
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

