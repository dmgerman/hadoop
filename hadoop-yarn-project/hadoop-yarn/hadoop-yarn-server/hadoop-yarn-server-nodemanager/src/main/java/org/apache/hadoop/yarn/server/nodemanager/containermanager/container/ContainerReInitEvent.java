begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.container
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ResourceSet
import|;
end_import

begin_comment
comment|/**  * ContainerEvent sent by ContainerManager to ContainerImpl to  * re-initiate Container.  */
end_comment

begin_class
DECL|class|ContainerReInitEvent
specifier|public
class|class
name|ContainerReInitEvent
extends|extends
name|ContainerEvent
block|{
DECL|field|reInitLaunchContext
specifier|private
specifier|final
name|ContainerLaunchContext
name|reInitLaunchContext
decl_stmt|;
DECL|field|resourceSet
specifier|private
specifier|final
name|ResourceSet
name|resourceSet
decl_stmt|;
comment|/**    * Container Re-Init Event.    * @param cID Container Id    * @param upgradeContext Upgrade context    * @param resourceSet Resource Set    */
DECL|method|ContainerReInitEvent (ContainerId cID, ContainerLaunchContext upgradeContext, ResourceSet resourceSet)
specifier|public
name|ContainerReInitEvent
parameter_list|(
name|ContainerId
name|cID
parameter_list|,
name|ContainerLaunchContext
name|upgradeContext
parameter_list|,
name|ResourceSet
name|resourceSet
parameter_list|)
block|{
name|super
argument_list|(
name|cID
argument_list|,
name|ContainerEventType
operator|.
name|REINITIALIZE_CONTAINER
argument_list|)
expr_stmt|;
name|this
operator|.
name|reInitLaunchContext
operator|=
name|upgradeContext
expr_stmt|;
name|this
operator|.
name|resourceSet
operator|=
name|resourceSet
expr_stmt|;
block|}
comment|/**    * Get the Launch Context to be used for upgrade.    * @return ContainerLaunchContext    */
DECL|method|getReInitLaunchContext ()
specifier|public
name|ContainerLaunchContext
name|getReInitLaunchContext
parameter_list|()
block|{
return|return
name|reInitLaunchContext
return|;
block|}
comment|/**    * Get the ResourceSet.    * @return ResourceSet.    */
DECL|method|getResourceSet ()
specifier|public
name|ResourceSet
name|getResourceSet
parameter_list|()
block|{
return|return
name|resourceSet
return|;
block|}
block|}
end_class

end_unit

