begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.application
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|ContainerManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerInitEvent
import|;
end_import

begin_comment
comment|/**  * Event sent from {@link ContainerManagerImpl} to {@link ApplicationImpl} to  * request the initialization of a container. This is funneled through  * the Application so that the application life-cycle can be checked, and container  * launches can be delayed until the application is fully initialized.  *   * Once the application is initialized,  * {@link ApplicationImpl.InitContainerTransition} simply passes this event on as a  * {@link ContainerInitEvent}.  *    */
end_comment

begin_class
DECL|class|ApplicationContainerInitEvent
specifier|public
class|class
name|ApplicationContainerInitEvent
extends|extends
name|ApplicationEvent
block|{
DECL|field|container
specifier|final
name|Container
name|container
decl_stmt|;
DECL|method|ApplicationContainerInitEvent (Container container)
specifier|public
name|ApplicationContainerInitEvent
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
name|super
argument_list|(
name|container
operator|.
name|getContainerID
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|ApplicationEventType
operator|.
name|INIT_CONTAINER
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
block|}
DECL|method|getContainer ()
name|Container
name|getContainer
parameter_list|()
block|{
return|return
name|container
return|;
block|}
block|}
end_class

end_unit

