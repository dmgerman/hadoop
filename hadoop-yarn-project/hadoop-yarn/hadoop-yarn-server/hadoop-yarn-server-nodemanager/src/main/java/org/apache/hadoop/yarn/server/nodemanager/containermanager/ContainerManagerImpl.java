begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|Service
operator|.
name|STATE
operator|.
name|STARTED
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|PolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerStatusRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerStatusResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StopContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StopContainerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|RPCUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|CMgrCompletedAppsEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|CMgrCompletedContainersEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerManagerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DeletionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|LocalDirsHandlerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NMAuditLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NMAuditLogger
operator|.
name|AuditConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeStatusUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationContainerInitEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationFinishEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationInitEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerKillEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
operator|.
name|ContainersLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
operator|.
name|ContainersLauncherEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ResourceLocalizationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizationEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|logaggregation
operator|.
name|LogAggregationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|loghandler
operator|.
name|LogHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|loghandler
operator|.
name|NonAggregatingLogHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|loghandler
operator|.
name|event
operator|.
name|LogHandlerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|ContainersMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|ContainersMonitorEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|ContainersMonitorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|metrics
operator|.
name|NodeManagerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|security
operator|.
name|authorize
operator|.
name|NMPolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|ServiceStateChangeListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
DECL|class|ContainerManagerImpl
specifier|public
class|class
name|ContainerManagerImpl
extends|extends
name|CompositeService
implements|implements
name|ServiceStateChangeListener
implements|,
name|ContainerManager
implements|,
name|EventHandler
argument_list|<
name|ContainerManagerEvent
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ContainerManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|context
specifier|final
name|Context
name|context
decl_stmt|;
DECL|field|containersMonitor
specifier|private
specifier|final
name|ContainersMonitor
name|containersMonitor
decl_stmt|;
DECL|field|server
specifier|private
name|Server
name|server
decl_stmt|;
DECL|field|rsrcLocalizationSrvc
specifier|private
specifier|final
name|ResourceLocalizationService
name|rsrcLocalizationSrvc
decl_stmt|;
DECL|field|containersLauncher
specifier|private
specifier|final
name|ContainersLauncher
name|containersLauncher
decl_stmt|;
DECL|field|auxiliaryServices
specifier|private
specifier|final
name|AuxServices
name|auxiliaryServices
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|final
name|NodeManagerMetrics
name|metrics
decl_stmt|;
DECL|field|nodeStatusUpdater
specifier|private
specifier|final
name|NodeStatusUpdater
name|nodeStatusUpdater
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|dirsHandler
specifier|protected
name|LocalDirsHandlerService
name|dirsHandler
decl_stmt|;
DECL|field|dispatcher
specifier|protected
specifier|final
name|AsyncDispatcher
name|dispatcher
decl_stmt|;
DECL|field|aclsManager
specifier|private
specifier|final
name|ApplicationACLsManager
name|aclsManager
decl_stmt|;
DECL|field|deletionService
specifier|private
specifier|final
name|DeletionService
name|deletionService
decl_stmt|;
DECL|field|blockNewContainerRequests
specifier|private
name|AtomicBoolean
name|blockNewContainerRequests
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|method|ContainerManagerImpl (Context context, ContainerExecutor exec, DeletionService deletionContext, NodeStatusUpdater nodeStatusUpdater, NodeManagerMetrics metrics, ApplicationACLsManager aclsManager, LocalDirsHandlerService dirsHandler)
specifier|public
name|ContainerManagerImpl
parameter_list|(
name|Context
name|context
parameter_list|,
name|ContainerExecutor
name|exec
parameter_list|,
name|DeletionService
name|deletionContext
parameter_list|,
name|NodeStatusUpdater
name|nodeStatusUpdater
parameter_list|,
name|NodeManagerMetrics
name|metrics
parameter_list|,
name|ApplicationACLsManager
name|aclsManager
parameter_list|,
name|LocalDirsHandlerService
name|dirsHandler
parameter_list|)
block|{
name|super
argument_list|(
name|ContainerManagerImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|dirsHandler
operator|=
name|dirsHandler
expr_stmt|;
comment|// ContainerManager level dispatcher.
name|dispatcher
operator|=
operator|new
name|AsyncDispatcher
argument_list|()
expr_stmt|;
name|this
operator|.
name|deletionService
operator|=
name|deletionContext
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|rsrcLocalizationSrvc
operator|=
name|createResourceLocalizationService
argument_list|(
name|exec
argument_list|,
name|deletionContext
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|rsrcLocalizationSrvc
argument_list|)
expr_stmt|;
name|containersLauncher
operator|=
name|createContainersLauncher
argument_list|(
name|context
argument_list|,
name|exec
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|containersLauncher
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeStatusUpdater
operator|=
name|nodeStatusUpdater
expr_stmt|;
name|this
operator|.
name|aclsManager
operator|=
name|aclsManager
expr_stmt|;
comment|// Start configurable services
name|auxiliaryServices
operator|=
operator|new
name|AuxServices
argument_list|()
expr_stmt|;
name|auxiliaryServices
operator|.
name|register
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|auxiliaryServices
argument_list|)
expr_stmt|;
name|this
operator|.
name|containersMonitor
operator|=
operator|new
name|ContainersMonitorImpl
argument_list|(
name|exec
argument_list|,
name|dispatcher
argument_list|,
name|this
operator|.
name|context
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|this
operator|.
name|containersMonitor
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainerEventType
operator|.
name|class
argument_list|,
operator|new
name|ContainerEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ApplicationEventType
operator|.
name|class
argument_list|,
operator|new
name|ApplicationEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|LocalizationEventType
operator|.
name|class
argument_list|,
name|rsrcLocalizationSrvc
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|AuxServicesEventType
operator|.
name|class
argument_list|,
name|auxiliaryServices
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainersMonitorEventType
operator|.
name|class
argument_list|,
name|containersMonitor
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainersLauncherEventType
operator|.
name|class
argument_list|,
name|containersLauncher
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (Configuration conf)
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|LogHandler
name|logHandler
init|=
name|createLogHandler
argument_list|(
name|conf
argument_list|,
name|this
operator|.
name|context
argument_list|,
name|this
operator|.
name|deletionService
argument_list|)
decl_stmt|;
name|addIfService
argument_list|(
name|logHandler
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|LogHandlerEventType
operator|.
name|class
argument_list|,
name|logHandler
argument_list|)
expr_stmt|;
name|super
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|addIfService (Object object)
specifier|private
name|void
name|addIfService
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|Service
condition|)
block|{
name|addService
argument_list|(
operator|(
name|Service
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createLogHandler (Configuration conf, Context context, DeletionService deletionService)
specifier|protected
name|LogHandler
name|createLogHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Context
name|context
parameter_list|,
name|DeletionService
name|deletionService
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_LOG_AGGREGATION_ENABLED
argument_list|)
condition|)
block|{
return|return
operator|new
name|LogAggregationService
argument_list|(
name|this
operator|.
name|dispatcher
argument_list|,
name|context
argument_list|,
name|deletionService
argument_list|,
name|dirsHandler
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|NonAggregatingLogHandler
argument_list|(
name|this
operator|.
name|dispatcher
argument_list|,
name|deletionService
argument_list|,
name|dirsHandler
argument_list|)
return|;
block|}
block|}
DECL|method|getContainersMonitor ()
specifier|public
name|ContainersMonitor
name|getContainersMonitor
parameter_list|()
block|{
return|return
name|this
operator|.
name|containersMonitor
return|;
block|}
DECL|method|createResourceLocalizationService ( ContainerExecutor exec, DeletionService deletionContext)
specifier|protected
name|ResourceLocalizationService
name|createResourceLocalizationService
parameter_list|(
name|ContainerExecutor
name|exec
parameter_list|,
name|DeletionService
name|deletionContext
parameter_list|)
block|{
return|return
operator|new
name|ResourceLocalizationService
argument_list|(
name|this
operator|.
name|dispatcher
argument_list|,
name|exec
argument_list|,
name|deletionContext
argument_list|,
name|dirsHandler
argument_list|)
return|;
block|}
DECL|method|createContainersLauncher (Context context, ContainerExecutor exec)
specifier|protected
name|ContainersLauncher
name|createContainersLauncher
parameter_list|(
name|Context
name|context
parameter_list|,
name|ContainerExecutor
name|exec
parameter_list|)
block|{
return|return
operator|new
name|ContainersLauncher
argument_list|(
name|context
argument_list|,
name|this
operator|.
name|dispatcher
argument_list|,
name|exec
argument_list|,
name|dirsHandler
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
comment|// Enqueue user dirs in deletion context
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|initialAddress
init|=
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|NM_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_PORT
argument_list|)
decl_stmt|;
name|server
operator|=
name|rpc
operator|.
name|getServer
argument_list|(
name|ContainerManager
operator|.
name|class
argument_list|,
name|this
argument_list|,
name|initialAddress
argument_list|,
name|conf
argument_list|,
name|this
operator|.
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CONTAINER_MGR_THREAD_COUNT
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT
argument_list|)
argument_list|)
expr_stmt|;
comment|// Enable service authorization?
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|refreshServiceAcls
argument_list|(
name|conf
argument_list|,
operator|new
name|NMPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Blocking new container-requests as container manager rpc"
operator|+
literal|" server is still starting."
argument_list|)
expr_stmt|;
name|this
operator|.
name|setBlockNewContainerRequests
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|InetSocketAddress
name|connectAddress
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|this
operator|.
name|context
operator|.
name|getNodeId
argument_list|()
operator|.
name|setHost
argument_list|(
name|connectAddress
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|.
name|getNodeId
argument_list|()
operator|.
name|setPort
argument_list|(
name|connectAddress
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ContainerManager started at "
operator|+
name|connectAddress
argument_list|)
expr_stmt|;
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|refreshServiceAcls (Configuration configuration, PolicyProvider policyProvider)
name|void
name|refreshServiceAcls
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|PolicyProvider
name|policyProvider
parameter_list|)
block|{
name|this
operator|.
name|server
operator|.
name|refreshServiceAcl
argument_list|(
name|configuration
argument_list|,
name|policyProvider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|auxiliaryServices
operator|.
name|getServiceState
argument_list|()
operator|==
name|STARTED
condition|)
block|{
name|auxiliaryServices
operator|.
name|unregister
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|// Get the remoteUGI corresponding to the api call.
DECL|method|getRemoteUgi ()
specifier|private
name|UserGroupInformation
name|getRemoteUgi
parameter_list|()
throws|throws
name|YarnRemoteException
block|{
name|UserGroupInformation
name|remoteUgi
decl_stmt|;
try|try
block|{
name|remoteUgi
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Cannot obtain the user-name. Got exception: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
return|return
name|remoteUgi
return|;
block|}
comment|// Obtain the needed ContainerTokenIdentifier from the remote-UGI. RPC layer
comment|// currently sets only the required id, but iterate through anyways just to
comment|// be sure.
DECL|method|selectContainerTokenIdentifier ( UserGroupInformation remoteUgi)
specifier|private
name|ContainerTokenIdentifier
name|selectContainerTokenIdentifier
parameter_list|(
name|UserGroupInformation
name|remoteUgi
parameter_list|)
block|{
name|Set
argument_list|<
name|TokenIdentifier
argument_list|>
name|tokenIdentifiers
init|=
name|remoteUgi
operator|.
name|getTokenIdentifiers
argument_list|()
decl_stmt|;
name|ContainerTokenIdentifier
name|resultId
init|=
literal|null
decl_stmt|;
for|for
control|(
name|TokenIdentifier
name|id
range|:
name|tokenIdentifiers
control|)
block|{
if|if
condition|(
name|id
operator|instanceof
name|ContainerTokenIdentifier
condition|)
block|{
name|resultId
operator|=
operator|(
name|ContainerTokenIdentifier
operator|)
name|id
expr_stmt|;
break|break;
block|}
block|}
return|return
name|resultId
return|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|getContainerTokenIdentifier ( UserGroupInformation remoteUgi, ContainerTokenIdentifier containerTokenIdentifier)
specifier|protected
name|ContainerTokenIdentifier
name|getContainerTokenIdentifier
parameter_list|(
name|UserGroupInformation
name|remoteUgi
parameter_list|,
name|ContainerTokenIdentifier
name|containerTokenIdentifier
parameter_list|)
throws|throws
name|YarnRemoteException
block|{
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Number of TokenIdentifiers in the UGI from RPC: "
operator|+
name|remoteUgi
operator|.
name|getTokenIdentifiers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Get the tokenId from the remote user ugi
return|return
name|selectContainerTokenIdentifier
argument_list|(
name|remoteUgi
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|containerTokenIdentifier
return|;
block|}
block|}
comment|/**    * Authorize the request.    *     * @param containerIDStr    *          of the container    * @param launchContext    *          passed if verifying the startContainer, null otherwise.    * @param remoteUgi    *          ugi corresponding to the remote end making the api-call    * @throws YarnRemoteException    */
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|authorizeRequest (String containerIDStr, ContainerLaunchContext launchContext, UserGroupInformation remoteUgi, ContainerTokenIdentifier tokenId)
specifier|protected
name|void
name|authorizeRequest
parameter_list|(
name|String
name|containerIDStr
parameter_list|,
name|ContainerLaunchContext
name|launchContext
parameter_list|,
name|UserGroupInformation
name|remoteUgi
parameter_list|,
name|ContainerTokenIdentifier
name|tokenId
parameter_list|)
throws|throws
name|YarnRemoteException
block|{
name|boolean
name|unauthorized
init|=
literal|false
decl_stmt|;
name|StringBuilder
name|messageBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Unauthorized request to start container. "
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|remoteUgi
operator|.
name|getUserName
argument_list|()
operator|.
name|equals
argument_list|(
name|containerIDStr
argument_list|)
condition|)
block|{
name|unauthorized
operator|=
literal|true
expr_stmt|;
name|messageBuilder
operator|.
name|append
argument_list|(
literal|"\nExpected containerId: "
operator|+
name|remoteUgi
operator|.
name|getUserName
argument_list|()
operator|+
literal|" Found: "
operator|+
name|containerIDStr
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|launchContext
operator|!=
literal|null
condition|)
block|{
comment|// Verify other things also for startContainer() request.
if|if
condition|(
name|tokenId
operator|==
literal|null
condition|)
block|{
name|unauthorized
operator|=
literal|true
expr_stmt|;
name|messageBuilder
operator|.
name|append
argument_list|(
literal|"\nNo ContainerToken found for "
operator|+
name|containerIDStr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Is the container being relaunched? Or RPC layer let startCall with
comment|//  tokens generated off old-secret through?
if|if
condition|(
operator|!
name|this
operator|.
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
operator|.
name|isValidStartContainerRequest
argument_list|(
name|tokenId
operator|.
name|getContainerID
argument_list|()
argument_list|)
condition|)
block|{
name|unauthorized
operator|=
literal|true
expr_stmt|;
name|messageBuilder
operator|.
name|append
argument_list|(
literal|"\n Attempt to relaunch the same "
operator|+
literal|"container with id "
operator|+
name|containerIDStr
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
comment|// Ensure the token is not expired.
comment|// Token expiry is not checked for stopContainer/getContainerStatus
if|if
condition|(
name|tokenId
operator|.
name|getExpiryTimeStamp
argument_list|()
operator|<
name|System
operator|.
name|currentTimeMillis
argument_list|()
condition|)
block|{
name|unauthorized
operator|=
literal|true
expr_stmt|;
name|messageBuilder
operator|.
name|append
argument_list|(
literal|"\nThis token is expired. current time is "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|" found "
operator|+
name|tokenId
operator|.
name|getExpiryTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|unauthorized
condition|)
block|{
name|String
name|msg
init|=
name|messageBuilder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
comment|/**    * Start a container on this NodeManager.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|startContainer (StartContainerRequest request)
specifier|public
name|StartContainerResponse
name|startContainer
parameter_list|(
name|StartContainerRequest
name|request
parameter_list|)
throws|throws
name|YarnRemoteException
throws|,
name|IOException
block|{
if|if
condition|(
name|blockNewContainerRequests
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
operator|new
name|NMNotYetReadyException
argument_list|(
literal|"Rejecting new containers as NodeManager has not"
operator|+
literal|" yet connected with ResourceManager"
argument_list|)
argument_list|)
throw|;
block|}
name|ContainerLaunchContext
name|launchContext
init|=
name|request
operator|.
name|getContainerLaunchContext
argument_list|()
decl_stmt|;
name|ContainerToken
name|token
init|=
name|request
operator|.
name|getContainerToken
argument_list|()
decl_stmt|;
name|ContainerTokenIdentifier
name|tokenIdentifier
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tokenIdentifier
operator|=
name|BuilderUtils
operator|.
name|newContainerTokenIdentifier
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|UserGroupInformation
name|remoteUgi
init|=
name|getRemoteUgi
argument_list|()
decl_stmt|;
name|ContainerTokenIdentifier
name|tokenId
init|=
name|getContainerTokenIdentifier
argument_list|(
name|remoteUgi
argument_list|,
name|tokenIdentifier
argument_list|)
decl_stmt|;
name|ContainerId
name|containerID
init|=
name|tokenId
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|String
name|containerIDStr
init|=
name|containerID
operator|.
name|toString
argument_list|()
decl_stmt|;
name|authorizeRequest
argument_list|(
name|containerIDStr
argument_list|,
name|launchContext
argument_list|,
name|remoteUgi
argument_list|,
name|tokenId
argument_list|)
expr_stmt|;
comment|// Is the container coming from unknown RM
if|if
condition|(
name|tokenId
operator|.
name|getRMIdentifer
argument_list|()
operator|!=
name|nodeStatusUpdater
operator|.
name|getRMIdentifier
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"\nContainer "
operator|+
name|containerIDStr
operator|+
literal|" rejected as it is allocated by a previous RM"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
operator|new
name|InvalidContainerException
argument_list|(
name|msg
argument_list|)
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Start request for "
operator|+
name|containerIDStr
operator|+
literal|" by user "
operator|+
name|tokenId
operator|.
name|getApplicationSubmitter
argument_list|()
argument_list|)
expr_stmt|;
comment|// //////////// Parse credentials
name|ByteBuffer
name|tokens
init|=
name|launchContext
operator|.
name|getTokens
argument_list|()
decl_stmt|;
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokens
operator|!=
literal|null
condition|)
block|{
name|DataInputByteBuffer
name|buf
init|=
operator|new
name|DataInputByteBuffer
argument_list|()
decl_stmt|;
name|tokens
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|buf
operator|.
name|reset
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
try|try
block|{
name|credentials
operator|.
name|readTokenStorageStream
argument_list|(
name|buf
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|tk
range|:
name|credentials
operator|.
name|getAllTokens
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|tk
operator|.
name|getService
argument_list|()
operator|+
literal|" = "
operator|+
name|tk
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// //////////// End of parsing credentials
name|String
name|user
init|=
name|tokenId
operator|.
name|getApplicationSubmitter
argument_list|()
decl_stmt|;
name|Container
name|container
init|=
operator|new
name|ContainerImpl
argument_list|(
name|getConfig
argument_list|()
argument_list|,
name|this
operator|.
name|dispatcher
argument_list|,
name|launchContext
argument_list|,
name|credentials
argument_list|,
name|metrics
argument_list|,
name|tokenId
argument_list|)
decl_stmt|;
name|ApplicationId
name|applicationID
init|=
name|containerID
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getContainers
argument_list|()
operator|.
name|putIfAbsent
argument_list|(
name|containerID
argument_list|,
name|container
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|NMAuditLogger
operator|.
name|logFailure
argument_list|(
name|user
argument_list|,
name|AuditConstants
operator|.
name|START_CONTAINER
argument_list|,
literal|"ContainerManagerImpl"
argument_list|,
literal|"Container already running on this node!"
argument_list|,
name|applicationID
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Container "
operator|+
name|containerIDStr
operator|+
literal|" already is running on this node!!"
argument_list|)
throw|;
block|}
comment|// Create the application
name|Application
name|application
init|=
operator|new
name|ApplicationImpl
argument_list|(
name|dispatcher
argument_list|,
name|this
operator|.
name|aclsManager
argument_list|,
name|user
argument_list|,
name|applicationID
argument_list|,
name|credentials
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|putIfAbsent
argument_list|(
name|applicationID
argument_list|,
name|application
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating a new application reference for app "
operator|+
name|applicationID
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationInitEvent
argument_list|(
name|applicationID
argument_list|,
name|container
operator|.
name|getLaunchContext
argument_list|()
operator|.
name|getApplicationACLs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO: Validate the request
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationContainerInitEvent
argument_list|(
name|container
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
operator|.
name|startContainerSuccessful
argument_list|(
name|tokenId
argument_list|)
expr_stmt|;
name|NMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|user
argument_list|,
name|AuditConstants
operator|.
name|START_CONTAINER
argument_list|,
literal|"ContainerManageImpl"
argument_list|,
name|applicationID
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
name|StartContainerResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|StartContainerResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|setAllServiceResponse
argument_list|(
name|auxiliaryServices
operator|.
name|getMeta
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO launchedContainer misplaced -> doesn't necessarily mean a container
comment|// launch. A finished Application will not launch containers.
name|metrics
operator|.
name|launchedContainer
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|allocateContainer
argument_list|(
name|tokenId
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
comment|/**    * Stop the container running on this NodeManager.    */
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|stopContainer (StopContainerRequest request)
specifier|public
name|StopContainerResponse
name|stopContainer
parameter_list|(
name|StopContainerRequest
name|request
parameter_list|)
throws|throws
name|YarnRemoteException
throws|,
name|IOException
block|{
name|ContainerId
name|containerID
init|=
name|request
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|String
name|containerIDStr
init|=
name|containerID
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// TODO: Only the container's owner can kill containers today.
name|UserGroupInformation
name|remoteUgi
init|=
name|getRemoteUgi
argument_list|()
decl_stmt|;
name|Container
name|container
init|=
name|this
operator|.
name|context
operator|.
name|getContainers
argument_list|()
operator|.
name|get
argument_list|(
name|containerID
argument_list|)
decl_stmt|;
name|StopContainerResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|StopContainerResponse
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|container
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Trying to stop unknown container "
operator|+
name|containerID
argument_list|)
expr_stmt|;
name|NMAuditLogger
operator|.
name|logFailure
argument_list|(
literal|"UnknownUser"
argument_list|,
name|AuditConstants
operator|.
name|STOP_CONTAINER
argument_list|,
literal|"ContainerManagerImpl"
argument_list|,
literal|"Trying to stop unknown container!"
argument_list|,
name|containerID
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
return|return
name|response
return|;
comment|// Return immediately.
block|}
name|authorizeRequest
argument_list|(
name|containerIDStr
argument_list|,
literal|null
argument_list|,
name|remoteUgi
argument_list|,
name|getContainerTokenIdentifier
argument_list|(
name|remoteUgi
argument_list|,
name|container
operator|.
name|getContainerTokenIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerKillEvent
argument_list|(
name|containerID
argument_list|,
literal|"Container killed by the ApplicationMaster."
argument_list|)
argument_list|)
expr_stmt|;
name|NMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|container
operator|.
name|getUser
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|STOP_CONTAINER
argument_list|,
literal|"ContainerManageImpl"
argument_list|,
name|containerID
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
comment|// TODO: Move this code to appropriate place once kill_container is
comment|// implemented.
name|nodeStatusUpdater
operator|.
name|sendOutofBandHeartBeat
argument_list|()
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|getContainerStatus ( GetContainerStatusRequest request)
specifier|public
name|GetContainerStatusResponse
name|getContainerStatus
parameter_list|(
name|GetContainerStatusRequest
name|request
parameter_list|)
throws|throws
name|YarnRemoteException
throws|,
name|IOException
block|{
name|ContainerId
name|containerID
init|=
name|request
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|String
name|containerIDStr
init|=
name|containerID
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// TODO: Only the container's owner can get containers' status today.
name|UserGroupInformation
name|remoteUgi
init|=
name|getRemoteUgi
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Getting container-status for "
operator|+
name|containerIDStr
argument_list|)
expr_stmt|;
name|Container
name|container
init|=
name|this
operator|.
name|context
operator|.
name|getContainers
argument_list|()
operator|.
name|get
argument_list|(
name|containerID
argument_list|)
decl_stmt|;
if|if
condition|(
name|container
operator|==
literal|null
condition|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Container "
operator|+
name|containerIDStr
operator|+
literal|" is not handled by this NodeManager"
argument_list|)
throw|;
block|}
name|authorizeRequest
argument_list|(
name|containerIDStr
argument_list|,
literal|null
argument_list|,
name|remoteUgi
argument_list|,
name|getContainerTokenIdentifier
argument_list|(
name|remoteUgi
argument_list|,
name|container
operator|.
name|getContainerTokenIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerStatus
name|containerStatus
init|=
name|container
operator|.
name|cloneAndGetContainerStatus
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Returning "
operator|+
name|containerStatus
argument_list|)
expr_stmt|;
name|GetContainerStatusResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetContainerStatusResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|containerStatus
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
DECL|class|ContainerEventDispatcher
class|class
name|ContainerEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|ContainerEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (ContainerEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|ContainerEvent
name|event
parameter_list|)
block|{
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
name|containers
init|=
name|ContainerManagerImpl
operator|.
name|this
operator|.
name|context
operator|.
name|getContainers
argument_list|()
decl_stmt|;
name|Container
name|c
init|=
name|containers
operator|.
name|get
argument_list|(
name|event
operator|.
name|getContainerID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Event "
operator|+
name|event
operator|+
literal|" sent to absent container "
operator|+
name|event
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|ApplicationEventDispatcher
class|class
name|ApplicationEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|ApplicationEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (ApplicationEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|ApplicationEvent
name|event
parameter_list|)
block|{
name|Application
name|app
init|=
name|ContainerManagerImpl
operator|.
name|this
operator|.
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|get
argument_list|(
name|event
operator|.
name|getApplicationID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|app
operator|!=
literal|null
condition|)
block|{
name|app
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Event "
operator|+
name|event
operator|+
literal|" sent to absent application "
operator|+
name|event
operator|.
name|getApplicationID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|handle (ContainerManagerEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|ContainerManagerEvent
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|FINISH_APPS
case|:
name|CMgrCompletedAppsEvent
name|appsFinishedEvent
init|=
operator|(
name|CMgrCompletedAppsEvent
operator|)
name|event
decl_stmt|;
for|for
control|(
name|ApplicationId
name|appID
range|:
name|appsFinishedEvent
operator|.
name|getAppsToCleanup
argument_list|()
control|)
block|{
name|this
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationFinishEvent
argument_list|(
name|appID
argument_list|,
literal|"Application Killed by ResourceManager"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|FINISH_CONTAINERS
case|:
name|CMgrCompletedContainersEvent
name|containersFinishedEvent
init|=
operator|(
name|CMgrCompletedContainersEvent
operator|)
name|event
decl_stmt|;
for|for
control|(
name|ContainerId
name|container
range|:
name|containersFinishedEvent
operator|.
name|getContainersToCleanup
argument_list|()
control|)
block|{
name|String
name|diagnostic
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|containersFinishedEvent
operator|.
name|getReason
argument_list|()
operator|==
name|CMgrCompletedContainersEvent
operator|.
name|Reason
operator|.
name|ON_SHUTDOWN
condition|)
block|{
name|diagnostic
operator|=
literal|"Container Killed on Shutdown"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|containersFinishedEvent
operator|.
name|getReason
argument_list|()
operator|==
name|CMgrCompletedContainersEvent
operator|.
name|Reason
operator|.
name|BY_RESOURCEMANAGER
condition|)
block|{
name|diagnostic
operator|=
literal|"Container Killed by ResourceManager"
expr_stmt|;
block|}
name|this
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerKillEvent
argument_list|(
name|container
argument_list|,
name|diagnostic
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid event "
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|". Ignoring."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setBlockNewContainerRequests (boolean blockNewContainerRequests)
specifier|public
name|void
name|setBlockNewContainerRequests
parameter_list|(
name|boolean
name|blockNewContainerRequests
parameter_list|)
block|{
name|this
operator|.
name|blockNewContainerRequests
operator|.
name|set
argument_list|(
name|blockNewContainerRequests
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stateChanged (Service service)
specifier|public
name|void
name|stateChanged
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
block|}
end_class

end_unit

