begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
operator|.
name|STATE
operator|.
name|STARTED
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|ReadLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|WriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|PolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|ServiceStateChangeListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ContainerManagementProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerStatusesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerStatusesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|IncreaseContainersResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|IncreaseContainersResourceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StopContainersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StopContainersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LogAggregationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|SerializedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationIdPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|LogAggregationContextPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ProtoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidAuxServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|NMNotYetReadyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|RPCUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|ApplicationACLMapProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|ContainerManagerApplicationProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|NMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ContainerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|CMgrCompletedAppsEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|CMgrCompletedContainersEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|CMgrDecreaseContainersResourceEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerManagerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DeletionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|LocalDirsHandlerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NMAuditLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NMAuditLogger
operator|.
name|AuditConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeStatusUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|amrmproxy
operator|.
name|AMRMProxyService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationContainerInitEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationFinishEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationInitEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerKillEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
operator|.
name|ContainersLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
operator|.
name|ContainersLauncherEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ResourceLocalizationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizationEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|sharedcache
operator|.
name|SharedCacheUploadEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|sharedcache
operator|.
name|SharedCacheUploadService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|logaggregation
operator|.
name|LogAggregationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|loghandler
operator|.
name|LogHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|loghandler
operator|.
name|NonAggregatingLogHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|loghandler
operator|.
name|event
operator|.
name|LogHandlerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|ChangeMonitoringContainerResourceEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|ContainersMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|ContainersMonitorEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|ContainersMonitorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|metrics
operator|.
name|NodeManagerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
operator|.
name|RecoveredApplicationsState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
operator|.
name|RecoveredContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
operator|.
name|RecoveredContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|security
operator|.
name|authorize
operator|.
name|NMPolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|YarnServerSecurityUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_class
DECL|class|ContainerManagerImpl
specifier|public
class|class
name|ContainerManagerImpl
extends|extends
name|CompositeService
implements|implements
name|ServiceStateChangeListener
implements|,
name|ContainerManagementProtocol
implements|,
name|EventHandler
argument_list|<
name|ContainerManagerEvent
argument_list|>
block|{
comment|/**    * Extra duration to wait for applications to be killed on shutdown.    */
DECL|field|SHUTDOWN_CLEANUP_SLOP_MS
specifier|private
specifier|static
specifier|final
name|int
name|SHUTDOWN_CLEANUP_SLOP_MS
init|=
literal|1000
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ContainerManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|INVALID_NMTOKEN_MSG
specifier|static
specifier|final
name|String
name|INVALID_NMTOKEN_MSG
init|=
literal|"Invalid NMToken"
decl_stmt|;
DECL|field|INVALID_CONTAINERTOKEN_MSG
specifier|static
specifier|final
name|String
name|INVALID_CONTAINERTOKEN_MSG
init|=
literal|"Invalid ContainerToken"
decl_stmt|;
DECL|field|context
specifier|final
name|Context
name|context
decl_stmt|;
DECL|field|containersMonitor
specifier|private
specifier|final
name|ContainersMonitor
name|containersMonitor
decl_stmt|;
DECL|field|server
specifier|private
name|Server
name|server
decl_stmt|;
DECL|field|rsrcLocalizationSrvc
specifier|private
specifier|final
name|ResourceLocalizationService
name|rsrcLocalizationSrvc
decl_stmt|;
DECL|field|containersLauncher
specifier|private
specifier|final
name|ContainersLauncher
name|containersLauncher
decl_stmt|;
DECL|field|auxiliaryServices
specifier|private
specifier|final
name|AuxServices
name|auxiliaryServices
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|final
name|NodeManagerMetrics
name|metrics
decl_stmt|;
DECL|field|nodeStatusUpdater
specifier|private
specifier|final
name|NodeStatusUpdater
name|nodeStatusUpdater
decl_stmt|;
DECL|field|dirsHandler
specifier|protected
name|LocalDirsHandlerService
name|dirsHandler
decl_stmt|;
DECL|field|dispatcher
specifier|protected
specifier|final
name|AsyncDispatcher
name|dispatcher
decl_stmt|;
DECL|field|deletionService
specifier|private
specifier|final
name|DeletionService
name|deletionService
decl_stmt|;
DECL|field|blockNewContainerRequests
specifier|private
name|AtomicBoolean
name|blockNewContainerRequests
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|serviceStopped
specifier|private
name|boolean
name|serviceStopped
init|=
literal|false
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|ReadLock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|WriteLock
name|writeLock
decl_stmt|;
DECL|field|amrmProxyService
specifier|private
name|AMRMProxyService
name|amrmProxyService
decl_stmt|;
DECL|field|amrmProxyEnabled
specifier|private
name|boolean
name|amrmProxyEnabled
init|=
literal|false
decl_stmt|;
DECL|field|waitForContainersOnShutdownMillis
specifier|private
name|long
name|waitForContainersOnShutdownMillis
decl_stmt|;
DECL|method|ContainerManagerImpl (Context context, ContainerExecutor exec, DeletionService deletionContext, NodeStatusUpdater nodeStatusUpdater, NodeManagerMetrics metrics, LocalDirsHandlerService dirsHandler)
specifier|public
name|ContainerManagerImpl
parameter_list|(
name|Context
name|context
parameter_list|,
name|ContainerExecutor
name|exec
parameter_list|,
name|DeletionService
name|deletionContext
parameter_list|,
name|NodeStatusUpdater
name|nodeStatusUpdater
parameter_list|,
name|NodeManagerMetrics
name|metrics
parameter_list|,
name|LocalDirsHandlerService
name|dirsHandler
parameter_list|)
block|{
name|super
argument_list|(
name|ContainerManagerImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|dirsHandler
operator|=
name|dirsHandler
expr_stmt|;
comment|// ContainerManager level dispatcher.
name|dispatcher
operator|=
operator|new
name|AsyncDispatcher
argument_list|()
expr_stmt|;
name|this
operator|.
name|deletionService
operator|=
name|deletionContext
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|rsrcLocalizationSrvc
operator|=
name|createResourceLocalizationService
argument_list|(
name|exec
argument_list|,
name|deletionContext
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|rsrcLocalizationSrvc
argument_list|)
expr_stmt|;
name|containersLauncher
operator|=
name|createContainersLauncher
argument_list|(
name|context
argument_list|,
name|exec
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|containersLauncher
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeStatusUpdater
operator|=
name|nodeStatusUpdater
expr_stmt|;
comment|// Start configurable services
name|auxiliaryServices
operator|=
operator|new
name|AuxServices
argument_list|()
expr_stmt|;
name|auxiliaryServices
operator|.
name|registerServiceListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|auxiliaryServices
argument_list|)
expr_stmt|;
name|this
operator|.
name|containersMonitor
operator|=
operator|new
name|ContainersMonitorImpl
argument_list|(
name|exec
argument_list|,
name|dispatcher
argument_list|,
name|this
operator|.
name|context
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|this
operator|.
name|containersMonitor
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainerEventType
operator|.
name|class
argument_list|,
operator|new
name|ContainerEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ApplicationEventType
operator|.
name|class
argument_list|,
operator|new
name|ApplicationEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|LocalizationEventType
operator|.
name|class
argument_list|,
name|rsrcLocalizationSrvc
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|AuxServicesEventType
operator|.
name|class
argument_list|,
name|auxiliaryServices
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainersMonitorEventType
operator|.
name|class
argument_list|,
name|containersMonitor
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainersLauncherEventType
operator|.
name|class
argument_list|,
name|containersLauncher
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|this
operator|.
name|readLock
operator|=
name|lock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeLock
operator|=
name|lock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|public
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|LogHandler
name|logHandler
init|=
name|createLogHandler
argument_list|(
name|conf
argument_list|,
name|this
operator|.
name|context
argument_list|,
name|this
operator|.
name|deletionService
argument_list|)
decl_stmt|;
name|addIfService
argument_list|(
name|logHandler
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|LogHandlerEventType
operator|.
name|class
argument_list|,
name|logHandler
argument_list|)
expr_stmt|;
comment|// add the shared cache upload service (it will do nothing if the shared
comment|// cache is disabled)
name|SharedCacheUploadService
name|sharedCacheUploader
init|=
name|createSharedCacheUploaderService
argument_list|()
decl_stmt|;
name|addService
argument_list|(
name|sharedCacheUploader
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|SharedCacheUploadEventType
operator|.
name|class
argument_list|,
name|sharedCacheUploader
argument_list|)
expr_stmt|;
name|amrmProxyEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|AMRM_PROXY_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_AMRM_PROXY_ENABLED
argument_list|)
expr_stmt|;
if|if
condition|(
name|amrmProxyEnabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"AMRMProxyService is enabled. "
operator|+
literal|"All the AM->RM requests will be intercepted by the proxy"
argument_list|)
expr_stmt|;
name|this
operator|.
name|amrmProxyService
operator|=
operator|new
name|AMRMProxyService
argument_list|(
name|this
operator|.
name|context
argument_list|,
name|this
operator|.
name|dispatcher
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|this
operator|.
name|amrmProxyService
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"AMRMProxyService is disabled"
argument_list|)
expr_stmt|;
block|}
name|waitForContainersOnShutdownMillis
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_SLEEP_DELAY_BEFORE_SIGKILL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_SLEEP_DELAY_BEFORE_SIGKILL_MS
argument_list|)
operator|+
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_PROCESS_KILL_WAIT_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_PROCESS_KILL_WAIT_MS
argument_list|)
operator|+
name|SHUTDOWN_CLEANUP_SLOP_MS
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|recover
argument_list|()
expr_stmt|;
block|}
DECL|method|isARMRMProxyEnabled ()
specifier|public
name|boolean
name|isARMRMProxyEnabled
parameter_list|()
block|{
return|return
name|amrmProxyEnabled
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|recover ()
specifier|private
name|void
name|recover
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|NMStateStoreService
name|stateStore
init|=
name|context
operator|.
name|getNMStateStore
argument_list|()
decl_stmt|;
if|if
condition|(
name|stateStore
operator|.
name|canRecover
argument_list|()
condition|)
block|{
name|rsrcLocalizationSrvc
operator|.
name|recoverLocalizedResources
argument_list|(
name|stateStore
operator|.
name|loadLocalizationState
argument_list|()
argument_list|)
expr_stmt|;
name|RecoveredApplicationsState
name|appsState
init|=
name|stateStore
operator|.
name|loadApplicationsState
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerManagerApplicationProto
name|proto
range|:
name|appsState
operator|.
name|getApplications
argument_list|()
control|)
block|{
name|recoverApplication
argument_list|(
name|proto
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RecoveredContainerState
name|rcs
range|:
name|stateStore
operator|.
name|loadContainersState
argument_list|()
control|)
block|{
name|recoverContainer
argument_list|(
name|rcs
argument_list|)
expr_stmt|;
block|}
name|String
name|diagnostic
init|=
literal|"Application marked finished during recovery"
decl_stmt|;
for|for
control|(
name|ApplicationId
name|appId
range|:
name|appsState
operator|.
name|getFinishedApplications
argument_list|()
control|)
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationFinishEvent
argument_list|(
name|appId
argument_list|,
name|diagnostic
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|recoverApplication (ContainerManagerApplicationProto p)
specifier|private
name|void
name|recoverApplication
parameter_list|(
name|ContainerManagerApplicationProto
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|ApplicationId
name|appId
init|=
operator|new
name|ApplicationIdPBImpl
argument_list|(
name|p
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|Credentials
name|creds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|creds
operator|.
name|readTokenStorageStream
argument_list|(
operator|new
name|DataInputStream
argument_list|(
name|p
operator|.
name|getCredentials
argument_list|()
operator|.
name|newInput
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationACLMapProto
argument_list|>
name|aclProtoList
init|=
name|p
operator|.
name|getAclsList
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|(
name|aclProtoList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ApplicationACLMapProto
name|aclProto
range|:
name|aclProtoList
control|)
block|{
name|acls
operator|.
name|put
argument_list|(
name|ProtoUtils
operator|.
name|convertFromProtoFormat
argument_list|(
name|aclProto
operator|.
name|getAccessType
argument_list|()
argument_list|)
argument_list|,
name|aclProto
operator|.
name|getAcl
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LogAggregationContext
name|logAggregationContext
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getLogAggregationContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|logAggregationContext
operator|=
operator|new
name|LogAggregationContextPBImpl
argument_list|(
name|p
operator|.
name|getLogAggregationContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovering application "
operator|+
name|appId
argument_list|)
expr_stmt|;
name|ApplicationImpl
name|app
init|=
operator|new
name|ApplicationImpl
argument_list|(
name|dispatcher
argument_list|,
name|p
operator|.
name|getUser
argument_list|()
argument_list|,
name|appId
argument_list|,
name|creds
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|app
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationInitEvent
argument_list|(
name|appId
argument_list|,
name|acls
argument_list|,
name|logAggregationContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|recoverContainer (RecoveredContainerState rcs)
specifier|private
name|void
name|recoverContainer
parameter_list|(
name|RecoveredContainerState
name|rcs
parameter_list|)
throws|throws
name|IOException
block|{
name|StartContainerRequest
name|req
init|=
name|rcs
operator|.
name|getStartRequest
argument_list|()
decl_stmt|;
name|ContainerLaunchContext
name|launchContext
init|=
name|req
operator|.
name|getContainerLaunchContext
argument_list|()
decl_stmt|;
name|ContainerTokenIdentifier
name|token
init|=
name|BuilderUtils
operator|.
name|newContainerTokenIdentifier
argument_list|(
name|req
operator|.
name|getContainerToken
argument_list|()
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|token
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovering "
operator|+
name|containerId
operator|+
literal|" in state "
operator|+
name|rcs
operator|.
name|getStatus
argument_list|()
operator|+
literal|" with exit code "
operator|+
name|rcs
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|containsKey
argument_list|(
name|appId
argument_list|)
condition|)
block|{
name|Credentials
name|credentials
init|=
name|YarnServerSecurityUtils
operator|.
name|parseCredentials
argument_list|(
name|launchContext
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
operator|new
name|ContainerImpl
argument_list|(
name|getConfig
argument_list|()
argument_list|,
name|dispatcher
argument_list|,
name|context
operator|.
name|getNMStateStore
argument_list|()
argument_list|,
name|req
operator|.
name|getContainerLaunchContext
argument_list|()
argument_list|,
name|credentials
argument_list|,
name|metrics
argument_list|,
name|token
argument_list|,
name|rcs
operator|.
name|getStatus
argument_list|()
argument_list|,
name|rcs
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|rcs
operator|.
name|getDiagnostics
argument_list|()
argument_list|,
name|rcs
operator|.
name|getKilled
argument_list|()
argument_list|,
name|rcs
operator|.
name|getCapability
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|getContainers
argument_list|()
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|container
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationContainerInitEvent
argument_list|(
name|container
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|rcs
operator|.
name|getStatus
argument_list|()
operator|!=
name|RecoveredContainerStatus
operator|.
name|COMPLETED
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|containerId
operator|+
literal|" has no corresponding application!"
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding "
operator|+
name|containerId
operator|+
literal|" to recently stopped containers"
argument_list|)
expr_stmt|;
name|nodeStatusUpdater
operator|.
name|addCompletedContainer
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|waitForRecoveredContainers ()
specifier|private
name|void
name|waitForRecoveredContainers
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|int
name|sleepMsec
init|=
literal|100
decl_stmt|;
name|int
name|waitIterations
init|=
literal|100
decl_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|newContainers
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|--
name|waitIterations
operator|>=
literal|0
condition|)
block|{
name|newContainers
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Container
name|container
range|:
name|context
operator|.
name|getContainers
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|container
operator|.
name|getContainerState
argument_list|()
operator|==
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
operator|.
name|NEW
condition|)
block|{
name|newContainers
operator|.
name|add
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|newContainers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for containers: "
operator|+
name|newContainers
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepMsec
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|waitIterations
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Timeout waiting for recovered containers"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createLogHandler (Configuration conf, Context context, DeletionService deletionService)
specifier|protected
name|LogHandler
name|createLogHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Context
name|context
parameter_list|,
name|DeletionService
name|deletionService
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_LOG_AGGREGATION_ENABLED
argument_list|)
condition|)
block|{
return|return
operator|new
name|LogAggregationService
argument_list|(
name|this
operator|.
name|dispatcher
argument_list|,
name|context
argument_list|,
name|deletionService
argument_list|,
name|dirsHandler
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|NonAggregatingLogHandler
argument_list|(
name|this
operator|.
name|dispatcher
argument_list|,
name|deletionService
argument_list|,
name|dirsHandler
argument_list|,
name|context
operator|.
name|getNMStateStore
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|getContainersMonitor ()
specifier|public
name|ContainersMonitor
name|getContainersMonitor
parameter_list|()
block|{
return|return
name|this
operator|.
name|containersMonitor
return|;
block|}
DECL|method|createResourceLocalizationService ( ContainerExecutor exec, DeletionService deletionContext, Context context)
specifier|protected
name|ResourceLocalizationService
name|createResourceLocalizationService
parameter_list|(
name|ContainerExecutor
name|exec
parameter_list|,
name|DeletionService
name|deletionContext
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
return|return
operator|new
name|ResourceLocalizationService
argument_list|(
name|this
operator|.
name|dispatcher
argument_list|,
name|exec
argument_list|,
name|deletionContext
argument_list|,
name|dirsHandler
argument_list|,
name|context
argument_list|)
return|;
block|}
DECL|method|createSharedCacheUploaderService ()
specifier|protected
name|SharedCacheUploadService
name|createSharedCacheUploaderService
parameter_list|()
block|{
return|return
operator|new
name|SharedCacheUploadService
argument_list|()
return|;
block|}
DECL|method|createContainersLauncher (Context context, ContainerExecutor exec)
specifier|protected
name|ContainersLauncher
name|createContainersLauncher
parameter_list|(
name|Context
name|context
parameter_list|,
name|ContainerExecutor
name|exec
parameter_list|)
block|{
return|return
operator|new
name|ContainersLauncher
argument_list|(
name|context
argument_list|,
name|this
operator|.
name|dispatcher
argument_list|,
name|exec
argument_list|,
name|dirsHandler
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Enqueue user dirs in deletion context
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
specifier|final
name|InetSocketAddress
name|initialAddress
init|=
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|NM_BIND_HOST
argument_list|,
name|YarnConfiguration
operator|.
name|NM_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_PORT
argument_list|)
decl_stmt|;
name|boolean
name|usingEphemeralPort
init|=
operator|(
name|initialAddress
operator|.
name|getPort
argument_list|()
operator|==
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getNMStateStore
argument_list|()
operator|.
name|canRecover
argument_list|()
operator|&&
name|usingEphemeralPort
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot support recovery with an "
operator|+
literal|"ephemeral server port. Check the setting of "
operator|+
name|YarnConfiguration
operator|.
name|NM_ADDRESS
argument_list|)
throw|;
block|}
comment|// If recovering then delay opening the RPC service until the recovery
comment|// of resources and containers have completed, otherwise requests from
comment|// clients during recovery can interfere with the recovery process.
specifier|final
name|boolean
name|delayedRpcServerStart
init|=
name|context
operator|.
name|getNMStateStore
argument_list|()
operator|.
name|canRecover
argument_list|()
decl_stmt|;
name|Configuration
name|serverConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// always enforce it to be token-based.
name|serverConf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
name|SaslRpcServer
operator|.
name|AuthMethod
operator|.
name|TOKEN
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|server
operator|=
name|rpc
operator|.
name|getServer
argument_list|(
name|ContainerManagementProtocol
operator|.
name|class
argument_list|,
name|this
argument_list|,
name|initialAddress
argument_list|,
name|serverConf
argument_list|,
name|this
operator|.
name|context
operator|.
name|getNMTokenSecretManager
argument_list|()
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CONTAINER_MGR_THREAD_COUNT
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT
argument_list|)
argument_list|)
expr_stmt|;
comment|// Enable service authorization?
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|refreshServiceAcls
argument_list|(
name|conf
argument_list|,
operator|new
name|NMPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Blocking new container-requests as container manager rpc"
operator|+
literal|" server is still starting."
argument_list|)
expr_stmt|;
name|this
operator|.
name|setBlockNewContainerRequests
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|bindHost
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_BIND_HOST
argument_list|)
decl_stmt|;
name|String
name|nmAddress
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|YarnConfiguration
operator|.
name|NM_ADDRESS
argument_list|)
decl_stmt|;
name|String
name|hostOverride
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|bindHost
operator|!=
literal|null
operator|&&
operator|!
name|bindHost
operator|.
name|isEmpty
argument_list|()
operator|&&
name|nmAddress
operator|!=
literal|null
operator|&&
operator|!
name|nmAddress
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//a bind-host case with an address, to support overriding the first
comment|//hostname found when querying for our hostname with the specified
comment|//address, combine the specified address with the actual port listened
comment|//on by the server
name|hostOverride
operator|=
name|nmAddress
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
block|}
comment|// setup node ID
name|InetSocketAddress
name|connectAddress
decl_stmt|;
if|if
condition|(
name|delayedRpcServerStart
condition|)
block|{
name|connectAddress
operator|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|initialAddress
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|connectAddress
operator|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
name|NodeId
name|nodeId
init|=
name|buildNodeId
argument_list|(
name|connectAddress
argument_list|,
name|hostOverride
argument_list|)
decl_stmt|;
operator|(
operator|(
name|NodeManager
operator|.
name|NMContext
operator|)
name|context
operator|)
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|.
name|getNMTokenSecretManager
argument_list|()
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
comment|// start remaining services
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|delayedRpcServerStart
condition|)
block|{
name|waitForRecoveredContainers
argument_list|()
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// check that the node ID is as previously advertised
name|connectAddress
operator|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|NodeId
name|serverNode
init|=
name|buildNodeId
argument_list|(
name|connectAddress
argument_list|,
name|hostOverride
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|serverNode
operator|.
name|equals
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Node mismatch after server started, expected '"
operator|+
name|nodeId
operator|+
literal|"' but found '"
operator|+
name|serverNode
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"ContainerManager started at "
operator|+
name|connectAddress
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ContainerManager bound to "
operator|+
name|initialAddress
argument_list|)
expr_stmt|;
block|}
DECL|method|buildNodeId (InetSocketAddress connectAddress, String hostOverride)
specifier|private
name|NodeId
name|buildNodeId
parameter_list|(
name|InetSocketAddress
name|connectAddress
parameter_list|,
name|String
name|hostOverride
parameter_list|)
block|{
if|if
condition|(
name|hostOverride
operator|!=
literal|null
condition|)
block|{
name|connectAddress
operator|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|hostOverride
argument_list|,
name|connectAddress
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|NodeId
operator|.
name|newInstance
argument_list|(
name|connectAddress
operator|.
name|getAddress
argument_list|()
operator|.
name|getCanonicalHostName
argument_list|()
argument_list|,
name|connectAddress
operator|.
name|getPort
argument_list|()
argument_list|)
return|;
block|}
DECL|method|refreshServiceAcls (Configuration configuration, PolicyProvider policyProvider)
name|void
name|refreshServiceAcls
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|PolicyProvider
name|policyProvider
parameter_list|)
block|{
name|this
operator|.
name|server
operator|.
name|refreshServiceAcl
argument_list|(
name|configuration
argument_list|,
name|policyProvider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|public
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|setBlockNewContainerRequests
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|serviceStopped
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|cleanUpApplicationsOnNMShutDown
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|auxiliaryServices
operator|.
name|getServiceState
argument_list|()
operator|==
name|STARTED
condition|)
block|{
name|auxiliaryServices
operator|.
name|unregisterServiceListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
DECL|method|cleanUpApplicationsOnNMShutDown ()
specifier|public
name|void
name|cleanUpApplicationsOnNMShutDown
parameter_list|()
block|{
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|Application
argument_list|>
name|applications
init|=
name|this
operator|.
name|context
operator|.
name|getApplications
argument_list|()
decl_stmt|;
if|if
condition|(
name|applications
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Applications still running : "
operator|+
name|applications
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|context
operator|.
name|getNMStateStore
argument_list|()
operator|.
name|canRecover
argument_list|()
operator|&&
operator|!
name|this
operator|.
name|context
operator|.
name|getDecommissioned
argument_list|()
condition|)
block|{
if|if
condition|(
name|getConfig
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_SUPERVISED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_RECOVERY_SUPERVISED
argument_list|)
condition|)
block|{
comment|// do not cleanup apps as they can be recovered on restart
return|return;
block|}
block|}
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|appIds
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationId
argument_list|>
argument_list|(
name|applications
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|handle
argument_list|(
operator|new
name|CMgrCompletedAppsEvent
argument_list|(
name|appIds
argument_list|,
name|CMgrCompletedAppsEvent
operator|.
name|Reason
operator|.
name|ON_SHUTDOWN
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for Applications to be Finished"
argument_list|)
expr_stmt|;
name|long
name|waitStartTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|applications
operator|.
name|isEmpty
argument_list|()
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|waitStartTime
operator|<
name|waitForContainersOnShutdownMillis
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted while sleeping on applications finish on shutdown"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
comment|// All applications Finished
if|if
condition|(
name|applications
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"All applications in FINISHED state"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Done waiting for Applications to be Finished. Still alive: "
operator|+
name|applications
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|cleanupContainersOnNMResync ()
specifier|public
name|void
name|cleanupContainersOnNMResync
parameter_list|()
block|{
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
name|containers
init|=
name|context
operator|.
name|getContainers
argument_list|()
decl_stmt|;
if|if
condition|(
name|containers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Containers still running on "
operator|+
name|CMgrCompletedContainersEvent
operator|.
name|Reason
operator|.
name|ON_NODEMANAGER_RESYNC
operator|+
literal|" : "
operator|+
name|containers
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containerIds
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|(
name|containers
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for containers to be killed"
argument_list|)
expr_stmt|;
name|this
operator|.
name|handle
argument_list|(
operator|new
name|CMgrCompletedContainersEvent
argument_list|(
name|containerIds
argument_list|,
name|CMgrCompletedContainersEvent
operator|.
name|Reason
operator|.
name|ON_NODEMANAGER_RESYNC
argument_list|)
argument_list|)
expr_stmt|;
comment|/*      * We will wait till all the containers change their state to COMPLETE. We      * will not remove the container statuses from nm context because these      * are used while re-registering node manager with resource manager.      */
name|boolean
name|allContainersCompleted
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|containers
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|allContainersCompleted
condition|)
block|{
name|allContainersCompleted
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
name|container
range|:
name|containers
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|ContainerImpl
operator|)
name|container
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|getCurrentState
argument_list|()
operator|!=
name|ContainerState
operator|.
name|COMPLETE
condition|)
block|{
name|allContainersCompleted
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted while sleeping on container kill on resync"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
comment|// All containers killed
if|if
condition|(
name|allContainersCompleted
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"All containers in DONE state"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Done waiting for containers to be killed. Still alive: "
operator|+
name|containers
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Get the remoteUGI corresponding to the api call.
DECL|method|getRemoteUgi ()
specifier|protected
name|UserGroupInformation
name|getRemoteUgi
parameter_list|()
throws|throws
name|YarnException
block|{
name|UserGroupInformation
name|remoteUgi
decl_stmt|;
try|try
block|{
name|remoteUgi
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Cannot obtain the user-name. Got exception: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
return|return
name|remoteUgi
return|;
block|}
comment|// Obtain the needed ContainerTokenIdentifier from the remote-UGI. RPC layer
comment|// currently sets only the required id, but iterate through anyways just to
comment|// be sure.
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|selectNMTokenIdentifier ( UserGroupInformation remoteUgi)
specifier|protected
name|NMTokenIdentifier
name|selectNMTokenIdentifier
parameter_list|(
name|UserGroupInformation
name|remoteUgi
parameter_list|)
block|{
name|Set
argument_list|<
name|TokenIdentifier
argument_list|>
name|tokenIdentifiers
init|=
name|remoteUgi
operator|.
name|getTokenIdentifiers
argument_list|()
decl_stmt|;
name|NMTokenIdentifier
name|resultId
init|=
literal|null
decl_stmt|;
for|for
control|(
name|TokenIdentifier
name|id
range|:
name|tokenIdentifiers
control|)
block|{
if|if
condition|(
name|id
operator|instanceof
name|NMTokenIdentifier
condition|)
block|{
name|resultId
operator|=
operator|(
name|NMTokenIdentifier
operator|)
name|id
expr_stmt|;
break|break;
block|}
block|}
return|return
name|resultId
return|;
block|}
DECL|method|authorizeUser (UserGroupInformation remoteUgi, NMTokenIdentifier nmTokenIdentifier)
specifier|protected
name|void
name|authorizeUser
parameter_list|(
name|UserGroupInformation
name|remoteUgi
parameter_list|,
name|NMTokenIdentifier
name|nmTokenIdentifier
parameter_list|)
throws|throws
name|YarnException
block|{
if|if
condition|(
name|nmTokenIdentifier
operator|==
literal|null
condition|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|INVALID_NMTOKEN_MSG
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|remoteUgi
operator|.
name|getUserName
argument_list|()
operator|.
name|equals
argument_list|(
name|nmTokenIdentifier
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Expected applicationAttemptId: "
operator|+
name|remoteUgi
operator|.
name|getUserName
argument_list|()
operator|+
literal|"Found: "
operator|+
name|nmTokenIdentifier
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * @param containerTokenIdentifier    *          of the container whose resource is to be started or increased    * @throws YarnException    */
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|authorizeStartAndResourceIncreaseRequest ( NMTokenIdentifier nmTokenIdentifier, ContainerTokenIdentifier containerTokenIdentifier, boolean startRequest)
specifier|protected
name|void
name|authorizeStartAndResourceIncreaseRequest
parameter_list|(
name|NMTokenIdentifier
name|nmTokenIdentifier
parameter_list|,
name|ContainerTokenIdentifier
name|containerTokenIdentifier
parameter_list|,
name|boolean
name|startRequest
parameter_list|)
throws|throws
name|YarnException
block|{
if|if
condition|(
name|nmTokenIdentifier
operator|==
literal|null
condition|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|INVALID_NMTOKEN_MSG
argument_list|)
throw|;
block|}
if|if
condition|(
name|containerTokenIdentifier
operator|==
literal|null
condition|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|INVALID_CONTAINERTOKEN_MSG
argument_list|)
throw|;
block|}
comment|/*      * Check the following:      * 1. The request comes from the same application attempt      * 2. The request possess a container token that has not expired      * 3. The request possess a container token that is granted by a known RM      */
name|ContainerId
name|containerId
init|=
name|containerTokenIdentifier
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|String
name|containerIDStr
init|=
name|containerId
operator|.
name|toString
argument_list|()
decl_stmt|;
name|boolean
name|unauthorized
init|=
literal|false
decl_stmt|;
name|StringBuilder
name|messageBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Unauthorized request to "
operator|+
operator|(
name|startRequest
condition|?
literal|"start container."
else|:
literal|"increase container resource."
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|nmTokenIdentifier
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
condition|)
block|{
name|unauthorized
operator|=
literal|true
expr_stmt|;
name|messageBuilder
operator|.
name|append
argument_list|(
literal|"\nNMToken for application attempt : "
argument_list|)
operator|.
name|append
argument_list|(
name|nmTokenIdentifier
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" was used for "
operator|+
operator|(
name|startRequest
condition|?
literal|"starting "
else|:
literal|"increasing resource of "
operator|)
operator|+
literal|"container with container token"
argument_list|)
operator|.
name|append
argument_list|(
literal|" issued for application attempt : "
argument_list|)
operator|.
name|append
argument_list|(
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|startRequest
operator|&&
operator|!
name|this
operator|.
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
operator|.
name|isValidStartContainerRequest
argument_list|(
name|containerTokenIdentifier
argument_list|)
condition|)
block|{
comment|// Is the container being relaunched? Or RPC layer let startCall with
comment|// tokens generated off old-secret through?
name|unauthorized
operator|=
literal|true
expr_stmt|;
name|messageBuilder
operator|.
name|append
argument_list|(
literal|"\n Attempt to relaunch the same "
argument_list|)
operator|.
name|append
argument_list|(
literal|"container with id "
argument_list|)
operator|.
name|append
argument_list|(
name|containerIDStr
argument_list|)
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|containerTokenIdentifier
operator|.
name|getExpiryTimeStamp
argument_list|()
operator|<
name|System
operator|.
name|currentTimeMillis
argument_list|()
condition|)
block|{
comment|// Ensure the token is not expired.
name|unauthorized
operator|=
literal|true
expr_stmt|;
name|messageBuilder
operator|.
name|append
argument_list|(
literal|"\nThis token is expired. current time is "
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" found "
argument_list|)
operator|.
name|append
argument_list|(
name|containerTokenIdentifier
operator|.
name|getExpiryTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
name|messageBuilder
operator|.
name|append
argument_list|(
literal|"\nNote: System times on machines may be out of sync."
argument_list|)
operator|.
name|append
argument_list|(
literal|" Check system time and time zones."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|unauthorized
condition|)
block|{
name|String
name|msg
init|=
name|messageBuilder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
name|containerTokenIdentifier
operator|.
name|getRMIdentifier
argument_list|()
operator|!=
name|nodeStatusUpdater
operator|.
name|getRMIdentifier
argument_list|()
condition|)
block|{
comment|// Is the container coming from unknown RM
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"\nContainer "
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|containerTokenIdentifier
operator|.
name|getContainerID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" rejected as it is allocated by a previous RM"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidContainerException
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Start a list of containers on this NodeManager.    */
annotation|@
name|Override
DECL|method|startContainers ( StartContainersRequest requests)
specifier|public
name|StartContainersResponse
name|startContainers
parameter_list|(
name|StartContainersRequest
name|requests
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
if|if
condition|(
name|blockNewContainerRequests
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NMNotYetReadyException
argument_list|(
literal|"Rejecting new containers as NodeManager has not"
operator|+
literal|" yet connected with ResourceManager"
argument_list|)
throw|;
block|}
name|UserGroupInformation
name|remoteUgi
init|=
name|getRemoteUgi
argument_list|()
decl_stmt|;
name|NMTokenIdentifier
name|nmTokenIdentifier
init|=
name|selectNMTokenIdentifier
argument_list|(
name|remoteUgi
argument_list|)
decl_stmt|;
name|authorizeUser
argument_list|(
name|remoteUgi
argument_list|,
name|nmTokenIdentifier
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|succeededContainers
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|SerializedException
argument_list|>
name|failedContainers
init|=
operator|new
name|HashMap
argument_list|<
name|ContainerId
argument_list|,
name|SerializedException
argument_list|>
argument_list|()
decl_stmt|;
comment|// Synchronize with NodeStatusUpdaterImpl#registerWithRM
comment|// to avoid race condition during NM-RM resync (due to RM restart) while a
comment|// container is being started, in particular when the container has not yet
comment|// been added to the containers map in NMContext.
synchronized|synchronized
init|(
name|this
operator|.
name|context
init|)
block|{
for|for
control|(
name|StartContainerRequest
name|request
range|:
name|requests
operator|.
name|getStartContainerRequests
argument_list|()
control|)
block|{
name|ContainerId
name|containerId
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|request
operator|.
name|getContainerToken
argument_list|()
operator|==
literal|null
operator|||
name|request
operator|.
name|getContainerToken
argument_list|()
operator|.
name|getIdentifier
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|INVALID_CONTAINERTOKEN_MSG
argument_list|)
throw|;
block|}
name|ContainerTokenIdentifier
name|containerTokenIdentifier
init|=
name|BuilderUtils
operator|.
name|newContainerTokenIdentifier
argument_list|(
name|request
operator|.
name|getContainerToken
argument_list|()
argument_list|)
decl_stmt|;
name|verifyAndGetContainerTokenIdentifier
argument_list|(
name|request
operator|.
name|getContainerToken
argument_list|()
argument_list|,
name|containerTokenIdentifier
argument_list|)
expr_stmt|;
name|containerId
operator|=
name|containerTokenIdentifier
operator|.
name|getContainerID
argument_list|()
expr_stmt|;
comment|// Initialize the AMRMProxy service instance only if the container is of
comment|// type AM and if the AMRMProxy service is enabled
if|if
condition|(
name|isARMRMProxyEnabled
argument_list|()
operator|&&
name|containerTokenIdentifier
operator|.
name|getContainerType
argument_list|()
operator|.
name|equals
argument_list|(
name|ContainerType
operator|.
name|APPLICATION_MASTER
argument_list|)
condition|)
block|{
name|this
operator|.
name|amrmProxyService
operator|.
name|processApplicationStartRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
name|startContainerInternal
argument_list|(
name|nmTokenIdentifier
argument_list|,
name|containerTokenIdentifier
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|succeededContainers
operator|.
name|add
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|failedContainers
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|SerializedException
operator|.
name|newInstance
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidToken
name|ie
parameter_list|)
block|{
name|failedContainers
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|SerializedException
operator|.
name|newInstance
argument_list|(
name|ie
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ie
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|StartContainersResponse
operator|.
name|newInstance
argument_list|(
name|getAuxServiceMetaData
argument_list|()
argument_list|,
name|succeededContainers
argument_list|,
name|failedContainers
argument_list|)
return|;
block|}
block|}
DECL|method|buildAppProto (ApplicationId appId, String user, Credentials credentials, Map<ApplicationAccessType, String> appAcls, LogAggregationContext logAggregationContext)
specifier|private
name|ContainerManagerApplicationProto
name|buildAppProto
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|user
parameter_list|,
name|Credentials
name|credentials
parameter_list|,
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|appAcls
parameter_list|,
name|LogAggregationContext
name|logAggregationContext
parameter_list|)
block|{
name|ContainerManagerApplicationProto
operator|.
name|Builder
name|builder
init|=
name|ContainerManagerApplicationProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setId
argument_list|(
operator|(
operator|(
name|ApplicationIdPBImpl
operator|)
name|appId
operator|)
operator|.
name|getProto
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
if|if
condition|(
name|logAggregationContext
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setLogAggregationContext
argument_list|(
operator|(
operator|(
name|LogAggregationContextPBImpl
operator|)
name|logAggregationContext
operator|)
operator|.
name|getProto
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|clearCredentials
argument_list|()
expr_stmt|;
if|if
condition|(
name|credentials
operator|!=
literal|null
condition|)
block|{
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
try|try
block|{
name|credentials
operator|.
name|writeTokenStorageToStream
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setCredentials
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// should not occur
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot serialize credentials"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|clearAcls
argument_list|()
expr_stmt|;
if|if
condition|(
name|appAcls
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acl
range|:
name|appAcls
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ApplicationACLMapProto
name|p
init|=
name|ApplicationACLMapProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setAccessType
argument_list|(
name|ProtoUtils
operator|.
name|convertToProtoFormat
argument_list|(
name|acl
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setAcl
argument_list|(
name|acl
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addAcls
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|startContainerInternal (NMTokenIdentifier nmTokenIdentifier, ContainerTokenIdentifier containerTokenIdentifier, StartContainerRequest request)
specifier|private
name|void
name|startContainerInternal
parameter_list|(
name|NMTokenIdentifier
name|nmTokenIdentifier
parameter_list|,
name|ContainerTokenIdentifier
name|containerTokenIdentifier
parameter_list|,
name|StartContainerRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
comment|/*      * 1) It should save the NMToken into NMTokenSecretManager. This is done      * here instead of RPC layer because at the time of opening/authenticating      * the connection it doesn't know what all RPC calls user will make on it.      * Also new NMToken is issued only at startContainer (once it gets renewed).      *       * 2) It should validate containerToken. Need to check below things. a) It      * is signed by correct master key (part of retrieve password). b) It      * belongs to correct Node Manager (part of retrieve password). c) It has      * correct RMIdentifier. d) It is not expired.      */
name|authorizeStartAndResourceIncreaseRequest
argument_list|(
name|nmTokenIdentifier
argument_list|,
name|containerTokenIdentifier
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// update NMToken
name|updateNMTokenIdentifier
argument_list|(
name|nmTokenIdentifier
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId
init|=
name|containerTokenIdentifier
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|String
name|containerIdStr
init|=
name|containerId
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|user
init|=
name|containerTokenIdentifier
operator|.
name|getApplicationSubmitter
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Start request for "
operator|+
name|containerIdStr
operator|+
literal|" by user "
operator|+
name|user
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|launchContext
init|=
name|request
operator|.
name|getContainerLaunchContext
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|serviceData
init|=
name|getAuxServiceMetaData
argument_list|()
decl_stmt|;
if|if
condition|(
name|launchContext
operator|.
name|getServiceData
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|launchContext
operator|.
name|getServiceData
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|meta
range|:
name|launchContext
operator|.
name|getServiceData
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
literal|null
operator|==
name|serviceData
operator|.
name|get
argument_list|(
name|meta
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidAuxServiceException
argument_list|(
literal|"The auxService:"
operator|+
name|meta
operator|.
name|getKey
argument_list|()
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
block|}
block|}
name|Credentials
name|credentials
init|=
name|YarnServerSecurityUtils
operator|.
name|parseCredentials
argument_list|(
name|launchContext
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
operator|new
name|ContainerImpl
argument_list|(
name|getConfig
argument_list|()
argument_list|,
name|this
operator|.
name|dispatcher
argument_list|,
name|context
operator|.
name|getNMStateStore
argument_list|()
argument_list|,
name|launchContext
argument_list|,
name|credentials
argument_list|,
name|metrics
argument_list|,
name|containerTokenIdentifier
argument_list|)
decl_stmt|;
name|ApplicationId
name|applicationID
init|=
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getContainers
argument_list|()
operator|.
name|putIfAbsent
argument_list|(
name|containerId
argument_list|,
name|container
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|NMAuditLogger
operator|.
name|logFailure
argument_list|(
name|user
argument_list|,
name|AuditConstants
operator|.
name|START_CONTAINER
argument_list|,
literal|"ContainerManagerImpl"
argument_list|,
literal|"Container already running on this node!"
argument_list|,
name|applicationID
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Container "
operator|+
name|containerIdStr
operator|+
literal|" already is running on this node!!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|serviceStopped
condition|)
block|{
comment|// Create the application
name|Application
name|application
init|=
operator|new
name|ApplicationImpl
argument_list|(
name|dispatcher
argument_list|,
name|user
argument_list|,
name|applicationID
argument_list|,
name|credentials
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|putIfAbsent
argument_list|(
name|applicationID
argument_list|,
name|application
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating a new application reference for app "
operator|+
name|applicationID
argument_list|)
expr_stmt|;
name|LogAggregationContext
name|logAggregationContext
init|=
name|containerTokenIdentifier
operator|.
name|getLogAggregationContext
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|appAcls
init|=
name|container
operator|.
name|getLaunchContext
argument_list|()
operator|.
name|getApplicationACLs
argument_list|()
decl_stmt|;
name|context
operator|.
name|getNMStateStore
argument_list|()
operator|.
name|storeApplication
argument_list|(
name|applicationID
argument_list|,
name|buildAppProto
argument_list|(
name|applicationID
argument_list|,
name|user
argument_list|,
name|credentials
argument_list|,
name|appAcls
argument_list|,
name|logAggregationContext
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationInitEvent
argument_list|(
name|applicationID
argument_list|,
name|appAcls
argument_list|,
name|logAggregationContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|context
operator|.
name|getNMStateStore
argument_list|()
operator|.
name|storeContainer
argument_list|(
name|containerId
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationContainerInitEvent
argument_list|(
name|container
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
operator|.
name|startContainerSuccessful
argument_list|(
name|containerTokenIdentifier
argument_list|)
expr_stmt|;
name|NMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|user
argument_list|,
name|AuditConstants
operator|.
name|START_CONTAINER
argument_list|,
literal|"ContainerManageImpl"
argument_list|,
name|applicationID
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
comment|// TODO launchedContainer misplaced -> doesn't necessarily mean a container
comment|// launch. A finished Application will not launch containers.
name|metrics
operator|.
name|launchedContainer
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|allocateContainer
argument_list|(
name|containerTokenIdentifier
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Container start failed as the NodeManager is "
operator|+
literal|"in the process of shutting down"
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|verifyAndGetContainerTokenIdentifier ( org.apache.hadoop.yarn.api.records.Token token, ContainerTokenIdentifier containerTokenIdentifier)
specifier|protected
name|ContainerTokenIdentifier
name|verifyAndGetContainerTokenIdentifier
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|token
parameter_list|,
name|ContainerTokenIdentifier
name|containerTokenIdentifier
parameter_list|)
throws|throws
name|YarnException
throws|,
name|InvalidToken
block|{
name|byte
index|[]
name|password
init|=
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
operator|.
name|retrievePassword
argument_list|(
name|containerTokenIdentifier
argument_list|)
decl_stmt|;
name|byte
index|[]
name|tokenPass
init|=
name|token
operator|.
name|getPassword
argument_list|()
operator|.
name|array
argument_list|()
decl_stmt|;
if|if
condition|(
name|password
operator|==
literal|null
operator|||
name|tokenPass
operator|==
literal|null
operator|||
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|password
argument_list|,
name|tokenPass
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidToken
argument_list|(
literal|"Invalid container token used for starting container on : "
operator|+
name|context
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|containerTokenIdentifier
return|;
block|}
comment|/**    * Increase resource of a list of containers on this NodeManager.    */
annotation|@
name|Override
DECL|method|increaseContainersResource ( IncreaseContainersResourceRequest requests)
specifier|public
name|IncreaseContainersResourceResponse
name|increaseContainersResource
parameter_list|(
name|IncreaseContainersResourceRequest
name|requests
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
if|if
condition|(
name|blockNewContainerRequests
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NMNotYetReadyException
argument_list|(
literal|"Rejecting container resource increase as NodeManager has not"
operator|+
literal|" yet connected with ResourceManager"
argument_list|)
throw|;
block|}
name|UserGroupInformation
name|remoteUgi
init|=
name|getRemoteUgi
argument_list|()
decl_stmt|;
name|NMTokenIdentifier
name|nmTokenIdentifier
init|=
name|selectNMTokenIdentifier
argument_list|(
name|remoteUgi
argument_list|)
decl_stmt|;
name|authorizeUser
argument_list|(
name|remoteUgi
argument_list|,
name|nmTokenIdentifier
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|successfullyIncreasedContainers
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|SerializedException
argument_list|>
name|failedContainers
init|=
operator|new
name|HashMap
argument_list|<
name|ContainerId
argument_list|,
name|SerializedException
argument_list|>
argument_list|()
decl_stmt|;
comment|// Synchronize with NodeStatusUpdaterImpl#registerWithRM
comment|// to avoid race condition during NM-RM resync (due to RM restart) while a
comment|// container resource is being increased in NM, in particular when the
comment|// increased container has not yet been added to the increasedContainers
comment|// map in NMContext.
synchronized|synchronized
init|(
name|this
operator|.
name|context
init|)
block|{
comment|// Process container resource increase requests
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|token
range|:
name|requests
operator|.
name|getContainersToIncrease
argument_list|()
control|)
block|{
name|ContainerId
name|containerId
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|token
operator|.
name|getIdentifier
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|INVALID_CONTAINERTOKEN_MSG
argument_list|)
throw|;
block|}
name|ContainerTokenIdentifier
name|containerTokenIdentifier
init|=
name|BuilderUtils
operator|.
name|newContainerTokenIdentifier
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|verifyAndGetContainerTokenIdentifier
argument_list|(
name|token
argument_list|,
name|containerTokenIdentifier
argument_list|)
expr_stmt|;
name|authorizeStartAndResourceIncreaseRequest
argument_list|(
name|nmTokenIdentifier
argument_list|,
name|containerTokenIdentifier
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|containerId
operator|=
name|containerTokenIdentifier
operator|.
name|getContainerID
argument_list|()
expr_stmt|;
comment|// Reuse the startContainer logic to update NMToken,
comment|// as container resource increase request will have come with
comment|// an updated NMToken.
name|updateNMTokenIdentifier
argument_list|(
name|nmTokenIdentifier
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
name|containerTokenIdentifier
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|changeContainerResourceInternal
argument_list|(
name|containerId
argument_list|,
name|resource
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|successfullyIncreasedContainers
operator|.
name|add
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
decl||
name|InvalidToken
name|e
parameter_list|)
block|{
name|failedContainers
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|SerializedException
operator|.
name|newInstance
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|IncreaseContainersResourceResponse
operator|.
name|newInstance
argument_list|(
name|successfullyIncreasedContainers
argument_list|,
name|failedContainers
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|changeContainerResourceInternal ( ContainerId containerId, Resource targetResource, boolean increase)
specifier|private
name|void
name|changeContainerResourceInternal
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Resource
name|targetResource
parameter_list|,
name|boolean
name|increase
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|Container
name|container
init|=
name|context
operator|.
name|getContainers
argument_list|()
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
comment|// Check container existence
if|if
condition|(
name|container
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|nodeStatusUpdater
operator|.
name|isContainerRecentlyStopped
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
literal|" was recently stopped on node manager."
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
literal|" is not handled by this NodeManager"
argument_list|)
throw|;
block|}
block|}
comment|// Check container state
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
name|currentState
init|=
name|container
operator|.
name|getContainerState
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentState
operator|!=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
operator|.
name|RUNNING
condition|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
literal|" is in "
operator|+
name|currentState
operator|.
name|name
argument_list|()
operator|+
literal|" state."
operator|+
literal|" Resource can only be changed when a container is in"
operator|+
literal|" RUNNING state"
argument_list|)
throw|;
block|}
comment|// Check validity of the target resource.
name|Resource
name|currentResource
init|=
name|container
operator|.
name|getResource
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentResource
operator|.
name|equals
argument_list|(
name|targetResource
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to change resource for container "
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
literal|". The target resource "
operator|+
name|targetResource
operator|.
name|toString
argument_list|()
operator|+
literal|" is the same as the current resource"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|increase
operator|&&
operator|!
name|Resources
operator|.
name|fitsIn
argument_list|(
name|currentResource
argument_list|,
name|targetResource
argument_list|)
condition|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Unable to increase resource for "
operator|+
literal|"container "
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
literal|". The target resource "
operator|+
name|targetResource
operator|.
name|toString
argument_list|()
operator|+
literal|" is smaller than the current resource "
operator|+
name|currentResource
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|increase
operator|&&
operator|(
operator|!
name|Resources
operator|.
name|fitsIn
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|targetResource
argument_list|)
operator|||
operator|!
name|Resources
operator|.
name|fitsIn
argument_list|(
name|targetResource
argument_list|,
name|currentResource
argument_list|)
operator|)
condition|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Unable to decrease resource for "
operator|+
literal|"container "
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
literal|". The target resource "
operator|+
name|targetResource
operator|.
name|toString
argument_list|()
operator|+
literal|" is not smaller than the current resource "
operator|+
name|currentResource
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|increase
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
name|increasedContainer
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
operator|.
name|newInstance
argument_list|(
name|containerId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|targetResource
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getIncreasedContainers
argument_list|()
operator|.
name|putIfAbsent
argument_list|(
name|containerId
argument_list|,
name|increasedContainer
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
literal|" resource is being increased."
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|serviceStopped
condition|)
block|{
comment|// Persist container resource change for recovery
name|this
operator|.
name|context
operator|.
name|getNMStateStore
argument_list|()
operator|.
name|storeContainerResourceChanged
argument_list|(
name|containerId
argument_list|,
name|targetResource
argument_list|)
expr_stmt|;
name|getContainersMonitor
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ChangeMonitoringContainerResourceEvent
argument_list|(
name|containerId
argument_list|,
name|targetResource
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Unable to change container resource as the NodeManager is "
operator|+
literal|"in the process of shutting down"
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|updateNMTokenIdentifier (NMTokenIdentifier nmTokenIdentifier)
specifier|protected
name|void
name|updateNMTokenIdentifier
parameter_list|(
name|NMTokenIdentifier
name|nmTokenIdentifier
parameter_list|)
throws|throws
name|InvalidToken
block|{
name|context
operator|.
name|getNMTokenSecretManager
argument_list|()
operator|.
name|appAttemptStartContainer
argument_list|(
name|nmTokenIdentifier
argument_list|)
expr_stmt|;
block|}
comment|/**    * Stop a list of containers running on this NodeManager.    */
annotation|@
name|Override
DECL|method|stopContainers (StopContainersRequest requests)
specifier|public
name|StopContainersResponse
name|stopContainers
parameter_list|(
name|StopContainersRequest
name|requests
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|ContainerId
argument_list|>
name|succeededRequests
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|SerializedException
argument_list|>
name|failedRequests
init|=
operator|new
name|HashMap
argument_list|<
name|ContainerId
argument_list|,
name|SerializedException
argument_list|>
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|remoteUgi
init|=
name|getRemoteUgi
argument_list|()
decl_stmt|;
name|NMTokenIdentifier
name|identifier
init|=
name|selectNMTokenIdentifier
argument_list|(
name|remoteUgi
argument_list|)
decl_stmt|;
if|if
condition|(
name|identifier
operator|==
literal|null
condition|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|INVALID_NMTOKEN_MSG
argument_list|)
throw|;
block|}
for|for
control|(
name|ContainerId
name|id
range|:
name|requests
operator|.
name|getContainerIds
argument_list|()
control|)
block|{
try|try
block|{
name|stopContainerInternal
argument_list|(
name|identifier
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|succeededRequests
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|failedRequests
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|SerializedException
operator|.
name|newInstance
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|StopContainersResponse
operator|.
name|newInstance
argument_list|(
name|succeededRequests
argument_list|,
name|failedRequests
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|stopContainerInternal (NMTokenIdentifier nmTokenIdentifier, ContainerId containerID)
specifier|private
name|void
name|stopContainerInternal
parameter_list|(
name|NMTokenIdentifier
name|nmTokenIdentifier
parameter_list|,
name|ContainerId
name|containerID
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|String
name|containerIDStr
init|=
name|containerID
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Container
name|container
init|=
name|this
operator|.
name|context
operator|.
name|getContainers
argument_list|()
operator|.
name|get
argument_list|(
name|containerID
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping container with container Id: "
operator|+
name|containerIDStr
argument_list|)
expr_stmt|;
name|authorizeGetAndStopContainerRequest
argument_list|(
name|containerID
argument_list|,
name|container
argument_list|,
literal|true
argument_list|,
name|nmTokenIdentifier
argument_list|)
expr_stmt|;
if|if
condition|(
name|container
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|nodeStatusUpdater
operator|.
name|isContainerRecentlyStopped
argument_list|(
name|containerID
argument_list|)
condition|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Container "
operator|+
name|containerIDStr
operator|+
literal|" is not handled by this NodeManager"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|context
operator|.
name|getNMStateStore
argument_list|()
operator|.
name|storeContainerKilled
argument_list|(
name|containerID
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerKillEvent
argument_list|(
name|containerID
argument_list|,
name|ContainerExitStatus
operator|.
name|KILLED_BY_APPMASTER
argument_list|,
literal|"Container killed by the ApplicationMaster."
argument_list|)
argument_list|)
expr_stmt|;
name|NMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|container
operator|.
name|getUser
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|STOP_CONTAINER
argument_list|,
literal|"ContainerManageImpl"
argument_list|,
name|containerID
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
comment|// TODO: Move this code to appropriate place once kill_container is
comment|// implemented.
name|nodeStatusUpdater
operator|.
name|sendOutofBandHeartBeat
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Get a list of container statuses running on this NodeManager    */
annotation|@
name|Override
DECL|method|getContainerStatuses ( GetContainerStatusesRequest request)
specifier|public
name|GetContainerStatusesResponse
name|getContainerStatuses
parameter_list|(
name|GetContainerStatusesRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|succeededRequests
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|SerializedException
argument_list|>
name|failedRequests
init|=
operator|new
name|HashMap
argument_list|<
name|ContainerId
argument_list|,
name|SerializedException
argument_list|>
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|remoteUgi
init|=
name|getRemoteUgi
argument_list|()
decl_stmt|;
name|NMTokenIdentifier
name|identifier
init|=
name|selectNMTokenIdentifier
argument_list|(
name|remoteUgi
argument_list|)
decl_stmt|;
if|if
condition|(
name|identifier
operator|==
literal|null
condition|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|INVALID_NMTOKEN_MSG
argument_list|)
throw|;
block|}
for|for
control|(
name|ContainerId
name|id
range|:
name|request
operator|.
name|getContainerIds
argument_list|()
control|)
block|{
try|try
block|{
name|ContainerStatus
name|status
init|=
name|getContainerStatusInternal
argument_list|(
name|id
argument_list|,
name|identifier
argument_list|)
decl_stmt|;
name|succeededRequests
operator|.
name|add
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|failedRequests
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|SerializedException
operator|.
name|newInstance
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|GetContainerStatusesResponse
operator|.
name|newInstance
argument_list|(
name|succeededRequests
argument_list|,
name|failedRequests
argument_list|)
return|;
block|}
DECL|method|getContainerStatusInternal (ContainerId containerID, NMTokenIdentifier nmTokenIdentifier)
specifier|private
name|ContainerStatus
name|getContainerStatusInternal
parameter_list|(
name|ContainerId
name|containerID
parameter_list|,
name|NMTokenIdentifier
name|nmTokenIdentifier
parameter_list|)
throws|throws
name|YarnException
block|{
name|String
name|containerIDStr
init|=
name|containerID
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Container
name|container
init|=
name|this
operator|.
name|context
operator|.
name|getContainers
argument_list|()
operator|.
name|get
argument_list|(
name|containerID
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Getting container-status for "
operator|+
name|containerIDStr
argument_list|)
expr_stmt|;
name|authorizeGetAndStopContainerRequest
argument_list|(
name|containerID
argument_list|,
name|container
argument_list|,
literal|false
argument_list|,
name|nmTokenIdentifier
argument_list|)
expr_stmt|;
if|if
condition|(
name|container
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|nodeStatusUpdater
operator|.
name|isContainerRecentlyStopped
argument_list|(
name|containerID
argument_list|)
condition|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Container "
operator|+
name|containerIDStr
operator|+
literal|" was recently stopped on node manager."
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Container "
operator|+
name|containerIDStr
operator|+
literal|" is not handled by this NodeManager"
argument_list|)
throw|;
block|}
block|}
name|ContainerStatus
name|containerStatus
init|=
name|container
operator|.
name|cloneAndGetContainerStatus
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Returning "
operator|+
name|containerStatus
argument_list|)
expr_stmt|;
return|return
name|containerStatus
return|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|authorizeGetAndStopContainerRequest (ContainerId containerId, Container container, boolean stopRequest, NMTokenIdentifier identifier)
specifier|protected
name|void
name|authorizeGetAndStopContainerRequest
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Container
name|container
parameter_list|,
name|boolean
name|stopRequest
parameter_list|,
name|NMTokenIdentifier
name|identifier
parameter_list|)
throws|throws
name|YarnException
block|{
if|if
condition|(
name|identifier
operator|==
literal|null
condition|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|INVALID_NMTOKEN_MSG
argument_list|)
throw|;
block|}
comment|/*      * For get/stop container status; we need to verify that 1) User (NMToken)      * application attempt only has started container. 2) Requested containerId      * belongs to the same application attempt (NMToken) which was used. (Note:-      * This will prevent user in knowing another application's containers).      */
name|ApplicationId
name|nmTokenAppId
init|=
name|identifier
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|nmTokenAppId
operator|.
name|equals
argument_list|(
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|)
operator|||
operator|(
name|container
operator|!=
literal|null
operator|&&
operator|!
name|nmTokenAppId
operator|.
name|equals
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|stopRequest
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|identifier
operator|.
name|getApplicationAttemptId
argument_list|()
operator|+
literal|" attempted to stop non-application container : "
operator|+
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|NMAuditLogger
operator|.
name|logFailure
argument_list|(
literal|"UnknownUser"
argument_list|,
name|AuditConstants
operator|.
name|STOP_CONTAINER
argument_list|,
literal|"ContainerManagerImpl"
argument_list|,
literal|"Trying to stop unknown container!"
argument_list|,
name|nmTokenAppId
argument_list|,
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|identifier
operator|.
name|getApplicationAttemptId
argument_list|()
operator|+
literal|" attempted to get status for non-application container : "
operator|+
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|ContainerEventDispatcher
class|class
name|ContainerEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|ContainerEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (ContainerEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|ContainerEvent
name|event
parameter_list|)
block|{
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
name|containers
init|=
name|ContainerManagerImpl
operator|.
name|this
operator|.
name|context
operator|.
name|getContainers
argument_list|()
decl_stmt|;
name|Container
name|c
init|=
name|containers
operator|.
name|get
argument_list|(
name|event
operator|.
name|getContainerID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Event "
operator|+
name|event
operator|+
literal|" sent to absent container "
operator|+
name|event
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|ApplicationEventDispatcher
class|class
name|ApplicationEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|ApplicationEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (ApplicationEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|ApplicationEvent
name|event
parameter_list|)
block|{
name|Application
name|app
init|=
name|ContainerManagerImpl
operator|.
name|this
operator|.
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|get
argument_list|(
name|event
operator|.
name|getApplicationID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|app
operator|!=
literal|null
condition|)
block|{
name|app
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Event "
operator|+
name|event
operator|+
literal|" sent to absent application "
operator|+
name|event
operator|.
name|getApplicationID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|handle (ContainerManagerEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|ContainerManagerEvent
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|FINISH_APPS
case|:
name|CMgrCompletedAppsEvent
name|appsFinishedEvent
init|=
operator|(
name|CMgrCompletedAppsEvent
operator|)
name|event
decl_stmt|;
for|for
control|(
name|ApplicationId
name|appID
range|:
name|appsFinishedEvent
operator|.
name|getAppsToCleanup
argument_list|()
control|)
block|{
name|String
name|diagnostic
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|appsFinishedEvent
operator|.
name|getReason
argument_list|()
operator|==
name|CMgrCompletedAppsEvent
operator|.
name|Reason
operator|.
name|ON_SHUTDOWN
condition|)
block|{
name|diagnostic
operator|=
literal|"Application killed on shutdown"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|appsFinishedEvent
operator|.
name|getReason
argument_list|()
operator|==
name|CMgrCompletedAppsEvent
operator|.
name|Reason
operator|.
name|BY_RESOURCEMANAGER
condition|)
block|{
name|diagnostic
operator|=
literal|"Application killed by ResourceManager"
expr_stmt|;
block|}
try|try
block|{
name|this
operator|.
name|context
operator|.
name|getNMStateStore
argument_list|()
operator|.
name|storeFinishedApplication
argument_list|(
name|appID
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to update application state in store"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationFinishEvent
argument_list|(
name|appID
argument_list|,
name|diagnostic
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|FINISH_CONTAINERS
case|:
name|CMgrCompletedContainersEvent
name|containersFinishedEvent
init|=
operator|(
name|CMgrCompletedContainersEvent
operator|)
name|event
decl_stmt|;
for|for
control|(
name|ContainerId
name|container
range|:
name|containersFinishedEvent
operator|.
name|getContainersToCleanup
argument_list|()
control|)
block|{
name|this
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerKillEvent
argument_list|(
name|container
argument_list|,
name|ContainerExitStatus
operator|.
name|KILLED_BY_RESOURCEMANAGER
argument_list|,
literal|"Container Killed by ResourceManager"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DECREASE_CONTAINERS_RESOURCE
case|:
name|CMgrDecreaseContainersResourceEvent
name|containersDecreasedEvent
init|=
operator|(
name|CMgrDecreaseContainersResourceEvent
operator|)
name|event
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
name|container
range|:
name|containersDecreasedEvent
operator|.
name|getContainersToDecrease
argument_list|()
control|)
block|{
try|try
block|{
name|changeContainerResourceInternal
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|container
operator|.
name|getResource
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to decrease container resource"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to update container resource in store"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Got an unknown ContainerManagerEvent type: "
operator|+
name|event
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|setBlockNewContainerRequests (boolean blockNewContainerRequests)
specifier|public
name|void
name|setBlockNewContainerRequests
parameter_list|(
name|boolean
name|blockNewContainerRequests
parameter_list|)
block|{
name|this
operator|.
name|blockNewContainerRequests
operator|.
name|set
argument_list|(
name|blockNewContainerRequests
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|getBlockNewContainerRequestsStatus ()
specifier|public
name|boolean
name|getBlockNewContainerRequestsStatus
parameter_list|()
block|{
return|return
name|this
operator|.
name|blockNewContainerRequests
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|stateChanged (Service service)
specifier|public
name|void
name|stateChanged
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
DECL|method|getContext ()
specifier|public
name|Context
name|getContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|context
return|;
block|}
DECL|method|getAuxServiceMetaData ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|getAuxServiceMetaData
parameter_list|()
block|{
return|return
name|this
operator|.
name|auxiliaryServices
operator|.
name|getMetaData
argument_list|()
return|;
block|}
block|}
end_class

end_unit

