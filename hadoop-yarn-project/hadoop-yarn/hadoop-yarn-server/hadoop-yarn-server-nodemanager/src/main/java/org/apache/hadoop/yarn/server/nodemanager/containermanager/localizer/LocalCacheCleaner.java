begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DeletionService
import|;
end_import

begin_comment
comment|/**  * A class responsible for cleaning the PUBLIC and PRIVATE local caches on a  * node manager.  */
end_comment

begin_class
DECL|class|LocalCacheCleaner
class|class
name|LocalCacheCleaner
block|{
DECL|field|currentSize
specifier|private
name|long
name|currentSize
decl_stmt|;
DECL|field|targetSize
specifier|private
specifier|final
name|long
name|targetSize
decl_stmt|;
DECL|field|delService
specifier|private
specifier|final
name|DeletionService
name|delService
decl_stmt|;
DECL|field|resourceMap
specifier|private
specifier|final
name|SortedMap
argument_list|<
name|LocalizedResource
argument_list|,
name|LocalResourcesTracker
argument_list|>
name|resourceMap
decl_stmt|;
DECL|method|LocalCacheCleaner (DeletionService delService, long targetSize)
name|LocalCacheCleaner
parameter_list|(
name|DeletionService
name|delService
parameter_list|,
name|long
name|targetSize
parameter_list|)
block|{
name|this
argument_list|(
name|delService
argument_list|,
name|targetSize
argument_list|,
operator|new
name|LRUComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|LocalCacheCleaner (DeletionService delService, long targetSize, Comparator<? super LocalizedResource> cmp)
name|LocalCacheCleaner
parameter_list|(
name|DeletionService
name|delService
parameter_list|,
name|long
name|targetSize
parameter_list|,
name|Comparator
argument_list|<
name|?
super|super
name|LocalizedResource
argument_list|>
name|cmp
parameter_list|)
block|{
name|this
argument_list|(
name|delService
argument_list|,
name|targetSize
argument_list|,
operator|new
name|TreeMap
argument_list|<
name|LocalizedResource
argument_list|,
name|LocalResourcesTracker
argument_list|>
argument_list|(
name|cmp
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|LocalCacheCleaner (DeletionService delService, long targetSize, SortedMap<LocalizedResource, LocalResourcesTracker> resourceMap)
name|LocalCacheCleaner
parameter_list|(
name|DeletionService
name|delService
parameter_list|,
name|long
name|targetSize
parameter_list|,
name|SortedMap
argument_list|<
name|LocalizedResource
argument_list|,
name|LocalResourcesTracker
argument_list|>
name|resourceMap
parameter_list|)
block|{
name|this
operator|.
name|resourceMap
operator|=
name|resourceMap
expr_stmt|;
name|this
operator|.
name|delService
operator|=
name|delService
expr_stmt|;
name|this
operator|.
name|targetSize
operator|=
name|targetSize
expr_stmt|;
block|}
comment|/**    * Adds resources from the passed LocalResourceTracker that are candidates for    * deletion from the cache.    *    * @param newTracker add all resources being tracked by the passed    *          LocalResourcesTracker to the LocalCacheCleaner.    */
DECL|method|addResources (LocalResourcesTracker newTracker)
specifier|public
name|void
name|addResources
parameter_list|(
name|LocalResourcesTracker
name|newTracker
parameter_list|)
block|{
for|for
control|(
name|LocalizedResource
name|resource
range|:
name|newTracker
control|)
block|{
name|currentSize
operator|+=
name|resource
operator|.
name|getSize
argument_list|()
expr_stmt|;
if|if
condition|(
name|resource
operator|.
name|getRefCount
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Do not delete resources that are still in use
continue|continue;
block|}
name|resourceMap
operator|.
name|put
argument_list|(
name|resource
argument_list|,
name|newTracker
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Delete resources from the cache in the sorted order generated by the    * Comparator used to construct this class.    *    * @return stats about what was cleaned up during this call of cleanCache    */
DECL|method|cleanCache ()
specifier|public
name|LocalCacheCleanerStats
name|cleanCache
parameter_list|()
block|{
name|LocalCacheCleanerStats
name|stats
init|=
operator|new
name|LocalCacheCleanerStats
argument_list|(
name|currentSize
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|LocalizedResource
argument_list|,
name|LocalResourcesTracker
argument_list|>
argument_list|>
name|i
init|=
name|resourceMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|currentSize
operator|-
name|stats
operator|.
name|totalDelSize
operator|>
name|targetSize
operator|&&
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|LocalizedResource
argument_list|,
name|LocalResourcesTracker
argument_list|>
name|rsrc
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|LocalizedResource
name|resource
init|=
name|rsrc
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|LocalResourcesTracker
name|tracker
init|=
name|rsrc
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|tracker
operator|.
name|remove
argument_list|(
name|resource
argument_list|,
name|delService
argument_list|)
condition|)
block|{
name|stats
operator|.
name|incDelSize
argument_list|(
name|tracker
operator|.
name|getUser
argument_list|()
argument_list|,
name|resource
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|resourceMap
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|stats
return|;
block|}
DECL|class|LocalCacheCleanerStats
specifier|static
class|class
name|LocalCacheCleanerStats
block|{
DECL|field|userDelSizes
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|userDelSizes
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|cacheSizeBeforeClean
specifier|private
specifier|final
name|long
name|cacheSizeBeforeClean
decl_stmt|;
DECL|field|totalDelSize
specifier|private
name|long
name|totalDelSize
decl_stmt|;
DECL|field|publicDelSize
specifier|private
name|long
name|publicDelSize
decl_stmt|;
DECL|field|privateDelSize
specifier|private
name|long
name|privateDelSize
decl_stmt|;
DECL|method|LocalCacheCleanerStats (long cacheSizeBeforeClean)
name|LocalCacheCleanerStats
parameter_list|(
name|long
name|cacheSizeBeforeClean
parameter_list|)
block|{
name|this
operator|.
name|cacheSizeBeforeClean
operator|=
name|cacheSizeBeforeClean
expr_stmt|;
block|}
DECL|method|incDelSize (String user, long delSize)
name|void
name|incDelSize
parameter_list|(
name|String
name|user
parameter_list|,
name|long
name|delSize
parameter_list|)
block|{
name|totalDelSize
operator|+=
name|delSize
expr_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
name|publicDelSize
operator|+=
name|delSize
expr_stmt|;
block|}
else|else
block|{
name|privateDelSize
operator|+=
name|delSize
expr_stmt|;
name|Long
name|userDel
init|=
name|userDelSizes
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|userDel
operator|!=
literal|null
condition|)
block|{
name|userDel
operator|+=
name|delSize
expr_stmt|;
name|userDelSizes
operator|.
name|put
argument_list|(
name|user
argument_list|,
name|userDel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|userDelSizes
operator|.
name|put
argument_list|(
name|user
argument_list|,
name|delSize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getUserDelSizes ()
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getUserDelSizes
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|userDelSizes
argument_list|)
return|;
block|}
DECL|method|getCacheSizeBeforeClean ()
name|long
name|getCacheSizeBeforeClean
parameter_list|()
block|{
return|return
name|cacheSizeBeforeClean
return|;
block|}
DECL|method|getTotalDelSize ()
name|long
name|getTotalDelSize
parameter_list|()
block|{
return|return
name|totalDelSize
return|;
block|}
DECL|method|getPublicDelSize ()
name|long
name|getPublicDelSize
parameter_list|()
block|{
return|return
name|publicDelSize
return|;
block|}
DECL|method|getPrivateDelSize ()
name|long
name|getPrivateDelSize
parameter_list|()
block|{
return|return
name|privateDelSize
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Cache Size Before Clean: "
argument_list|)
operator|.
name|append
argument_list|(
name|cacheSizeBeforeClean
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Total Deleted: "
argument_list|)
operator|.
name|append
argument_list|(
name|totalDelSize
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Public Deleted: "
argument_list|)
operator|.
name|append
argument_list|(
name|publicDelSize
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Private Deleted: "
argument_list|)
operator|.
name|append
argument_list|(
name|privateDelSize
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|toStringDetailed ()
specifier|public
name|String
name|toStringDetailed
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", Private Deleted Detail: {"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|e
range|:
name|userDelSizes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" }"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|class|LRUComparator
specifier|private
specifier|static
class|class
name|LRUComparator
implements|implements
name|Comparator
argument_list|<
name|LocalizedResource
argument_list|>
implements|,
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|7034380228434701685L
decl_stmt|;
DECL|method|compare (LocalizedResource r1, LocalizedResource r2)
specifier|public
name|int
name|compare
parameter_list|(
name|LocalizedResource
name|r1
parameter_list|,
name|LocalizedResource
name|r2
parameter_list|)
block|{
name|long
name|ret
init|=
name|r1
operator|.
name|getTimestamp
argument_list|()
operator|-
name|r2
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|ret
condition|)
block|{
return|return
name|System
operator|.
name|identityHashCode
argument_list|(
name|r1
argument_list|)
operator|-
name|System
operator|.
name|identityHashCode
argument_list|(
name|r2
argument_list|)
return|;
block|}
return|return
name|ret
operator|>
literal|0
condition|?
literal|1
else|:
operator|-
literal|1
return|;
block|}
block|}
block|}
end_class

end_unit

