begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.container
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerRetryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerRetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  *<p>Sliding window retry policy for relaunching a  *<code>Container</code> in Yarn.</p>  */
end_comment

begin_class
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|SlidingWindowRetryPolicy
specifier|public
class|class
name|SlidingWindowRetryPolicy
block|{
DECL|field|clock
specifier|private
name|Clock
name|clock
decl_stmt|;
DECL|method|SlidingWindowRetryPolicy (Clock clock)
specifier|public
name|SlidingWindowRetryPolicy
parameter_list|(
name|Clock
name|clock
parameter_list|)
block|{
name|this
operator|.
name|clock
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|clock
argument_list|)
expr_stmt|;
block|}
DECL|method|shouldRetry (RetryContext retryContext, int errorCode)
specifier|public
name|boolean
name|shouldRetry
parameter_list|(
name|RetryContext
name|retryContext
parameter_list|,
name|int
name|errorCode
parameter_list|)
block|{
name|ContainerRetryContext
name|containerRC
init|=
name|retryContext
operator|.
name|containerRetryContext
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|containerRC
argument_list|,
literal|"container retry context null"
argument_list|)
expr_stmt|;
name|ContainerRetryPolicy
name|retryPolicy
init|=
name|containerRC
operator|.
name|getRetryPolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|retryPolicy
operator|==
name|ContainerRetryPolicy
operator|.
name|RETRY_ON_ALL_ERRORS
operator|||
operator|(
name|retryPolicy
operator|==
name|ContainerRetryPolicy
operator|.
name|RETRY_ON_SPECIFIC_ERROR_CODES
operator|&&
name|containerRC
operator|.
name|getErrorCodes
argument_list|()
operator|!=
literal|null
operator|&&
name|containerRC
operator|.
name|getErrorCodes
argument_list|()
operator|.
name|contains
argument_list|(
name|errorCode
argument_list|)
operator|)
condition|)
block|{
return|return
name|containerRC
operator|.
name|getMaxRetries
argument_list|()
operator|==
name|ContainerRetryContext
operator|.
name|RETRY_FOREVER
operator|||
name|calculateRemainingRetries
argument_list|(
name|retryContext
argument_list|)
operator|>
literal|0
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Calculates the remaining number of retries.    *    * @return the remaining retries.    */
DECL|method|calculateRemainingRetries (RetryContext retryContext)
specifier|private
name|int
name|calculateRemainingRetries
parameter_list|(
name|RetryContext
name|retryContext
parameter_list|)
block|{
name|ContainerRetryContext
name|containerRC
init|=
name|retryContext
operator|.
name|containerRetryContext
decl_stmt|;
if|if
condition|(
name|containerRC
operator|.
name|getFailuresValidityInterval
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|validFailuresCount
init|=
literal|0
decl_stmt|;
name|long
name|currentTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|retryContext
operator|.
name|restartTimes
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|long
name|restartTime
init|=
name|retryContext
operator|.
name|restartTimes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentTime
operator|-
name|restartTime
operator|<=
name|containerRC
operator|.
name|getFailuresValidityInterval
argument_list|()
condition|)
block|{
name|validFailuresCount
operator|++
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|containerRC
operator|.
name|getMaxRetries
argument_list|()
operator|-
name|validFailuresCount
return|;
block|}
else|else
block|{
return|return
name|retryContext
operator|.
name|getRemainingRetries
argument_list|()
return|;
block|}
block|}
comment|/**    * Updates remaining retries and the restart time when    * required in the retryContext.    *<p>    * When failuresValidityInterval is {@literal>} 0, it also removes time    * entries from<code>restartTimes</code> which are outside the validity    * interval.    */
DECL|method|updateRetryContext (RetryContext retryContext)
specifier|protected
name|void
name|updateRetryContext
parameter_list|(
name|RetryContext
name|retryContext
parameter_list|)
block|{
if|if
condition|(
name|retryContext
operator|.
name|containerRetryContext
operator|.
name|getFailuresValidityInterval
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ContainerRetryContext
name|containerRC
init|=
name|retryContext
operator|.
name|containerRetryContext
decl_stmt|;
name|Iterator
argument_list|<
name|Long
argument_list|>
name|iterator
init|=
name|retryContext
operator|.
name|getRestartTimes
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|long
name|currentTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|long
name|restartTime
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentTime
operator|-
name|restartTime
operator|>
name|containerRC
operator|.
name|getFailuresValidityInterval
argument_list|()
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|retryContext
operator|.
name|setRemainingRetries
argument_list|(
name|containerRC
operator|.
name|getMaxRetries
argument_list|()
operator|-
name|retryContext
operator|.
name|restartTimes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|retryContext
operator|.
name|getRestartTimes
argument_list|()
operator|.
name|add
argument_list|(
name|currentTime
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|retryContext
operator|.
name|remainingRetries
operator|--
expr_stmt|;
block|}
block|}
comment|/**    * Sets the clock.    * @param clock clock    */
DECL|method|setClock (Clock clock)
specifier|public
name|void
name|setClock
parameter_list|(
name|Clock
name|clock
parameter_list|)
block|{
name|this
operator|.
name|clock
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|clock
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sliding window container retry context.    *<p>    * Besides {@link ContainerRetryContext}, it also provide details such as:    *<ul>    *<li>    *<em>remainingRetries</em>: specifies the number of pending retries. It is    * initially set to<code>containerRetryContext.maxRetries</code>.    *</li>    *<li>    *<em>restartTimes</em>: when    *<code>containerRetryContext.failuresValidityInterval</code> is set,    * then this records the times when the container is set to restart.    *</li>    *</ul>    */
DECL|class|RetryContext
specifier|static
class|class
name|RetryContext
block|{
DECL|field|containerRetryContext
specifier|private
specifier|final
name|ContainerRetryContext
name|containerRetryContext
decl_stmt|;
DECL|field|restartTimes
specifier|private
name|List
argument_list|<
name|Long
argument_list|>
name|restartTimes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|remainingRetries
specifier|private
name|int
name|remainingRetries
decl_stmt|;
DECL|method|RetryContext (ContainerRetryContext containerRetryContext)
name|RetryContext
parameter_list|(
name|ContainerRetryContext
name|containerRetryContext
parameter_list|)
block|{
name|this
operator|.
name|containerRetryContext
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|containerRetryContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|remainingRetries
operator|=
name|containerRetryContext
operator|.
name|getMaxRetries
argument_list|()
expr_stmt|;
block|}
DECL|method|getContainerRetryContext ()
name|ContainerRetryContext
name|getContainerRetryContext
parameter_list|()
block|{
return|return
name|containerRetryContext
return|;
block|}
DECL|method|getRemainingRetries ()
name|int
name|getRemainingRetries
parameter_list|()
block|{
return|return
name|remainingRetries
return|;
block|}
DECL|method|setRemainingRetries (int remainingRetries)
name|void
name|setRemainingRetries
parameter_list|(
name|int
name|remainingRetries
parameter_list|)
block|{
name|this
operator|.
name|remainingRetries
operator|=
name|remainingRetries
expr_stmt|;
block|}
DECL|method|getRestartTimes ()
name|List
argument_list|<
name|Long
argument_list|>
name|getRestartTimes
parameter_list|()
block|{
return|return
name|restartTimes
return|;
block|}
DECL|method|setRestartTimes (List<Long> restartTimes)
name|void
name|setRestartTimes
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|restartTimes
parameter_list|)
block|{
if|if
condition|(
name|restartTimes
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|restartTimes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|restartTimes
operator|.
name|addAll
argument_list|(
name|restartTimes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

