begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.container
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NMAuditLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NMAuditLogger
operator|.
name|AuditConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|AuxServicesEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|AuxServicesEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationContainerFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
operator|.
name|ContainersLauncherEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
operator|.
name|ContainersLauncherEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|LocalResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ContainerLocalizationCleanupEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ContainerLocalizationRequestEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|loghandler
operator|.
name|event
operator|.
name|LogHandlerContainerFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|ContainerStartMonitoringEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|ContainerStopMonitoringEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|metrics
operator|.
name|NodeManagerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|InvalidStateTransitonException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|MultipleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|SingleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_class
DECL|class|ContainerImpl
specifier|public
class|class
name|ContainerImpl
implements|implements
name|Container
block|{
DECL|field|readLock
specifier|private
specifier|final
name|Lock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|Lock
name|writeLock
decl_stmt|;
DECL|field|dispatcher
specifier|private
specifier|final
name|Dispatcher
name|dispatcher
decl_stmt|;
DECL|field|credentials
specifier|private
specifier|final
name|Credentials
name|credentials
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|final
name|NodeManagerMetrics
name|metrics
decl_stmt|;
DECL|field|launchContext
specifier|private
specifier|final
name|ContainerLaunchContext
name|launchContext
decl_stmt|;
DECL|field|containerTokenIdentifier
specifier|private
specifier|final
name|ContainerTokenIdentifier
name|containerTokenIdentifier
decl_stmt|;
DECL|field|containerId
specifier|private
specifier|final
name|ContainerId
name|containerId
decl_stmt|;
DECL|field|resource
specifier|private
specifier|final
name|Resource
name|resource
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|String
name|user
decl_stmt|;
DECL|field|exitCode
specifier|private
name|int
name|exitCode
init|=
name|ContainerExitStatus
operator|.
name|INVALID
decl_stmt|;
DECL|field|diagnostics
specifier|private
specifier|final
name|StringBuilder
name|diagnostics
decl_stmt|;
comment|/** The NM-wide configuration - not specific to this container */
DECL|field|daemonConf
specifier|private
specifier|final
name|Configuration
name|daemonConf
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|pendingResources
specifier|private
specifier|final
name|Map
argument_list|<
name|LocalResourceRequest
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|pendingResources
init|=
operator|new
name|HashMap
argument_list|<
name|LocalResourceRequest
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|localizedResources
specifier|private
specifier|final
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|localizedResources
init|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|publicRsrcs
specifier|private
specifier|final
name|List
argument_list|<
name|LocalResourceRequest
argument_list|>
name|publicRsrcs
init|=
operator|new
name|ArrayList
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|privateRsrcs
specifier|private
specifier|final
name|List
argument_list|<
name|LocalResourceRequest
argument_list|>
name|privateRsrcs
init|=
operator|new
name|ArrayList
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|appRsrcs
specifier|private
specifier|final
name|List
argument_list|<
name|LocalResourceRequest
argument_list|>
name|appRsrcs
init|=
operator|new
name|ArrayList
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|ContainerImpl (Configuration conf, Dispatcher dispatcher, ContainerLaunchContext launchContext, Credentials creds, NodeManagerMetrics metrics, ContainerTokenIdentifier containerTokenIdentifier)
specifier|public
name|ContainerImpl
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|ContainerLaunchContext
name|launchContext
parameter_list|,
name|Credentials
name|creds
parameter_list|,
name|NodeManagerMetrics
name|metrics
parameter_list|,
name|ContainerTokenIdentifier
name|containerTokenIdentifier
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|daemonConf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|dispatcher
operator|=
name|dispatcher
expr_stmt|;
name|this
operator|.
name|launchContext
operator|=
name|launchContext
expr_stmt|;
name|this
operator|.
name|containerTokenIdentifier
operator|=
name|containerTokenIdentifier
expr_stmt|;
name|this
operator|.
name|containerId
operator|=
name|containerTokenIdentifier
operator|.
name|getContainerID
argument_list|()
expr_stmt|;
name|this
operator|.
name|resource
operator|=
name|containerTokenIdentifier
operator|.
name|getResource
argument_list|()
expr_stmt|;
name|this
operator|.
name|diagnostics
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|this
operator|.
name|credentials
operator|=
name|creds
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|user
operator|=
name|containerTokenIdentifier
operator|.
name|getApplicationSubmitter
argument_list|()
expr_stmt|;
name|ReadWriteLock
name|readWriteLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|this
operator|.
name|readLock
operator|=
name|readWriteLock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeLock
operator|=
name|readWriteLock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|stateMachine
operator|=
name|stateMachineFactory
operator|.
name|make
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|field|CONTAINER_DONE_TRANSITION
specifier|private
specifier|static
specifier|final
name|ContainerDoneTransition
name|CONTAINER_DONE_TRANSITION
init|=
operator|new
name|ContainerDoneTransition
argument_list|()
decl_stmt|;
DECL|field|UPDATE_DIAGNOSTICS_TRANSITION
specifier|private
specifier|static
specifier|final
name|ContainerDiagnosticsUpdateTransition
name|UPDATE_DIAGNOSTICS_TRANSITION
init|=
operator|new
name|ContainerDiagnosticsUpdateTransition
argument_list|()
decl_stmt|;
comment|// State Machine for each container.
specifier|private
specifier|static
name|StateMachineFactory
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerState
argument_list|,
name|ContainerEventType
argument_list|,
name|ContainerEvent
argument_list|>
DECL|field|stateMachineFactory
name|stateMachineFactory
init|=
operator|new
name|StateMachineFactory
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerState
argument_list|,
name|ContainerEventType
argument_list|,
name|ContainerEvent
argument_list|>
argument_list|(
name|ContainerState
operator|.
name|NEW
argument_list|)
comment|// From NEW State
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|NEW
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ContainerState
operator|.
name|LOCALIZING
argument_list|,
name|ContainerState
operator|.
name|LOCALIZED
argument_list|,
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
argument_list|)
argument_list|,
name|ContainerEventType
operator|.
name|INIT_CONTAINER
argument_list|,
operator|new
name|RequestResourcesTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|NEW
argument_list|,
name|ContainerState
operator|.
name|NEW
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_DIAGNOSTICS_MSG
argument_list|,
name|UPDATE_DIAGNOSTICS_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|NEW
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
name|ContainerEventType
operator|.
name|KILL_CONTAINER
argument_list|,
name|CONTAINER_DONE_TRANSITION
argument_list|)
comment|// From LOCALIZING State
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|LOCALIZING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ContainerState
operator|.
name|LOCALIZING
argument_list|,
name|ContainerState
operator|.
name|LOCALIZED
argument_list|)
argument_list|,
name|ContainerEventType
operator|.
name|RESOURCE_LOCALIZED
argument_list|,
operator|new
name|LocalizedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|LOCALIZING
argument_list|,
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
argument_list|,
name|ContainerEventType
operator|.
name|RESOURCE_FAILED
argument_list|,
operator|new
name|ResourceFailedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|LOCALIZING
argument_list|,
name|ContainerState
operator|.
name|LOCALIZING
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_DIAGNOSTICS_MSG
argument_list|,
name|UPDATE_DIAGNOSTICS_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|LOCALIZING
argument_list|,
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerEventType
operator|.
name|KILL_CONTAINER
argument_list|,
operator|new
name|KillDuringLocalizationTransition
argument_list|()
argument_list|)
comment|// From LOCALIZATION_FAILED State
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_RESOURCES_CLEANEDUP
argument_list|,
name|CONTAINER_DONE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
argument_list|,
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_DIAGNOSTICS_MSG
argument_list|,
name|UPDATE_DIAGNOSTICS_TRANSITION
argument_list|)
comment|// container not launched so kill is a no-op
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
argument_list|,
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
argument_list|,
name|ContainerEventType
operator|.
name|KILL_CONTAINER
argument_list|)
comment|// container cleanup triggers a release of all resources
comment|// regardless of whether they were localized or not
comment|// LocalizedResource handles release event in all states
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
argument_list|,
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
argument_list|,
name|ContainerEventType
operator|.
name|RESOURCE_LOCALIZED
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
argument_list|,
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
argument_list|,
name|ContainerEventType
operator|.
name|RESOURCE_FAILED
argument_list|)
comment|// From LOCALIZED State
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|LOCALIZED
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_LAUNCHED
argument_list|,
operator|new
name|LaunchTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|LOCALIZED
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_FAILURE
argument_list|,
operator|new
name|ExitedWithFailureTransition
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|LOCALIZED
argument_list|,
name|ContainerState
operator|.
name|LOCALIZED
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_DIAGNOSTICS_MSG
argument_list|,
name|UPDATE_DIAGNOSTICS_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|LOCALIZED
argument_list|,
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerEventType
operator|.
name|KILL_CONTAINER
argument_list|,
operator|new
name|KillTransition
argument_list|()
argument_list|)
comment|// From RUNNING State
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_SUCCESS
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_SUCCESS
argument_list|,
operator|new
name|ExitedWithSuccessTransition
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_FAILURE
argument_list|,
operator|new
name|ExitedWithFailureTransition
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_DIAGNOSTICS_MSG
argument_list|,
name|UPDATE_DIAGNOSTICS_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerEventType
operator|.
name|KILL_CONTAINER
argument_list|,
operator|new
name|KillTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_KILLED_ON_REQUEST
argument_list|,
operator|new
name|KilledExternallyTransition
argument_list|()
argument_list|)
comment|// From CONTAINER_EXITED_WITH_SUCCESS State
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|EXITED_WITH_SUCCESS
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_RESOURCES_CLEANEDUP
argument_list|,
name|CONTAINER_DONE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|EXITED_WITH_SUCCESS
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_SUCCESS
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_DIAGNOSTICS_MSG
argument_list|,
name|UPDATE_DIAGNOSTICS_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|EXITED_WITH_SUCCESS
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_SUCCESS
argument_list|,
name|ContainerEventType
operator|.
name|KILL_CONTAINER
argument_list|)
comment|// From EXITED_WITH_FAILURE State
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_RESOURCES_CLEANEDUP
argument_list|,
name|CONTAINER_DONE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_DIAGNOSTICS_MSG
argument_list|,
name|UPDATE_DIAGNOSTICS_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|ContainerEventType
operator|.
name|KILL_CONTAINER
argument_list|)
comment|// From KILLING State.
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerState
operator|.
name|CONTAINER_CLEANEDUP_AFTER_KILL
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_KILLED_ON_REQUEST
argument_list|,
operator|new
name|ContainerKilledTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerEventType
operator|.
name|RESOURCE_LOCALIZED
argument_list|,
operator|new
name|LocalizedResourceDuringKillTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerEventType
operator|.
name|RESOURCE_FAILED
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_DIAGNOSTICS_MSG
argument_list|,
name|UPDATE_DIAGNOSTICS_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerEventType
operator|.
name|KILL_CONTAINER
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_SUCCESS
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_SUCCESS
argument_list|,
operator|new
name|ExitedWithSuccessTransition
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_FAILURE
argument_list|,
operator|new
name|ExitedWithFailureTransition
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_RESOURCES_CLEANEDUP
argument_list|,
name|CONTAINER_DONE_TRANSITION
argument_list|)
comment|// Handle a launched container during killing stage is a no-op
comment|// as cleanup container is always handled after launch container event
comment|// in the container launcher
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_LAUNCHED
argument_list|)
comment|// From CONTAINER_CLEANEDUP_AFTER_KILL State.
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|CONTAINER_CLEANEDUP_AFTER_KILL
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_RESOURCES_CLEANEDUP
argument_list|,
name|CONTAINER_DONE_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|CONTAINER_CLEANEDUP_AFTER_KILL
argument_list|,
name|ContainerState
operator|.
name|CONTAINER_CLEANEDUP_AFTER_KILL
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_DIAGNOSTICS_MSG
argument_list|,
name|UPDATE_DIAGNOSTICS_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|CONTAINER_CLEANEDUP_AFTER_KILL
argument_list|,
name|ContainerState
operator|.
name|CONTAINER_CLEANEDUP_AFTER_KILL
argument_list|,
name|ContainerEventType
operator|.
name|KILL_CONTAINER
argument_list|)
comment|// From DONE
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
name|ContainerEventType
operator|.
name|KILL_CONTAINER
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
name|ContainerEventType
operator|.
name|INIT_CONTAINER
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_DIAGNOSTICS_MSG
argument_list|,
name|UPDATE_DIAGNOSTICS_TRANSITION
argument_list|)
comment|// create the topology tables
operator|.
name|installTopology
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|StateMachine
argument_list|<
name|ContainerState
argument_list|,
name|ContainerEventType
argument_list|,
name|ContainerEvent
argument_list|>
DECL|field|stateMachine
name|stateMachine
decl_stmt|;
DECL|method|getCurrentState ()
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
name|getCurrentState
parameter_list|()
block|{
switch|switch
condition|(
name|stateMachine
operator|.
name|getCurrentState
argument_list|()
condition|)
block|{
case|case
name|NEW
case|:
case|case
name|LOCALIZING
case|:
case|case
name|LOCALIZATION_FAILED
case|:
case|case
name|LOCALIZED
case|:
case|case
name|RUNNING
case|:
case|case
name|EXITED_WITH_SUCCESS
case|:
case|case
name|EXITED_WITH_FAILURE
case|:
case|case
name|KILLING
case|:
case|case
name|CONTAINER_CLEANEDUP_AFTER_KILL
case|:
case|case
name|CONTAINER_RESOURCES_CLEANINGUP
case|:
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|RUNNING
return|;
case|case
name|DONE
case|:
default|default:
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|COMPLETE
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|user
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getLocalizedResources ()
specifier|public
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getLocalizedResources
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
assert|assert
name|ContainerState
operator|.
name|LOCALIZED
operator|==
name|getContainerState
argument_list|()
assert|;
comment|// TODO: FIXME!!
return|return
name|localizedResources
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getCredentials ()
specifier|public
name|Credentials
name|getCredentials
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|credentials
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getContainerState ()
specifier|public
name|ContainerState
name|getContainerState
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|stateMachine
operator|.
name|getCurrentState
argument_list|()
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getLaunchContext ()
specifier|public
name|ContainerLaunchContext
name|getLaunchContext
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|launchContext
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|cloneAndGetContainerStatus ()
specifier|public
name|ContainerStatus
name|cloneAndGetContainerStatus
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|BuilderUtils
operator|.
name|newContainerStatus
argument_list|(
name|this
operator|.
name|containerId
argument_list|,
name|getCurrentState
argument_list|()
argument_list|,
name|diagnostics
operator|.
name|toString
argument_list|()
argument_list|,
name|exitCode
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getContainerId ()
specifier|public
name|ContainerId
name|getContainerId
parameter_list|()
block|{
return|return
name|this
operator|.
name|containerId
return|;
block|}
annotation|@
name|Override
DECL|method|getResource ()
specifier|public
name|Resource
name|getResource
parameter_list|()
block|{
return|return
name|this
operator|.
name|resource
return|;
block|}
annotation|@
name|Override
DECL|method|getContainerTokenIdentifier ()
specifier|public
name|ContainerTokenIdentifier
name|getContainerTokenIdentifier
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|containerTokenIdentifier
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"fallthrough"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|finished ()
specifier|private
name|void
name|finished
parameter_list|()
block|{
name|ApplicationId
name|applicationId
init|=
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|getContainerState
argument_list|()
condition|)
block|{
case|case
name|EXITED_WITH_SUCCESS
case|:
name|metrics
operator|.
name|endRunningContainer
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|completedContainer
argument_list|()
expr_stmt|;
name|NMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|user
argument_list|,
name|AuditConstants
operator|.
name|FINISH_SUCCESS_CONTAINER
argument_list|,
literal|"ContainerImpl"
argument_list|,
name|applicationId
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXITED_WITH_FAILURE
case|:
name|metrics
operator|.
name|endRunningContainer
argument_list|()
expr_stmt|;
comment|// fall through
case|case
name|LOCALIZATION_FAILED
case|:
name|metrics
operator|.
name|failedContainer
argument_list|()
expr_stmt|;
name|NMAuditLogger
operator|.
name|logFailure
argument_list|(
name|user
argument_list|,
name|AuditConstants
operator|.
name|FINISH_FAILED_CONTAINER
argument_list|,
literal|"ContainerImpl"
argument_list|,
literal|"Container failed with state: "
operator|+
name|getContainerState
argument_list|()
argument_list|,
name|applicationId
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONTAINER_CLEANEDUP_AFTER_KILL
case|:
name|metrics
operator|.
name|endRunningContainer
argument_list|()
expr_stmt|;
comment|// fall through
case|case
name|NEW
case|:
name|metrics
operator|.
name|killedContainer
argument_list|()
expr_stmt|;
name|NMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|user
argument_list|,
name|AuditConstants
operator|.
name|FINISH_KILLED_CONTAINER
argument_list|,
literal|"ContainerImpl"
argument_list|,
name|applicationId
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
block|}
name|metrics
operator|.
name|releaseContainer
argument_list|(
name|this
operator|.
name|resource
argument_list|)
expr_stmt|;
comment|// Inform the application
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|EventHandler
name|eventHandler
init|=
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
decl_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationContainerFinishedEvent
argument_list|(
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove the container from the resource-monitor
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|ContainerStopMonitoringEvent
argument_list|(
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
comment|// Tell the logService too
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerContainerFinishedEvent
argument_list|(
name|containerId
argument_list|,
name|exitCode
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dispatcher not typed
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|Map
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|rsrc
init|=
operator|new
name|HashMap
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|publicRsrcs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rsrc
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|publicRsrcs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|privateRsrcs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rsrc
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|privateRsrcs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|appRsrcs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rsrc
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|,
name|appRsrcs
argument_list|)
expr_stmt|;
block|}
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationCleanupEvent
argument_list|(
name|this
argument_list|,
name|rsrc
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|ContainerTransition
specifier|static
class|class
name|ContainerTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
comment|// Just drain the event and change the state.
block|}
block|}
comment|/**    * State transition when a NEW container receives the INIT_CONTAINER    * message.    *     * If there are resources to localize, sends a    * ContainerLocalizationRequest (INIT_CONTAINER_RESOURCES)     * to the ResourceLocalizationManager and enters LOCALIZING state.    *     * If there are no resources to localize, sends LAUNCH_CONTAINER event    * and enters LOCALIZED state directly.    *     * If there are any invalid resources specified, enters LOCALIZATION_FAILED    * directly.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dispatcher not typed
DECL|class|RequestResourcesTransition
specifier|static
class|class
name|RequestResourcesTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerEvent
argument_list|,
name|ContainerState
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|ContainerState
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
specifier|final
name|ContainerLaunchContext
name|ctxt
init|=
name|container
operator|.
name|launchContext
decl_stmt|;
name|container
operator|.
name|metrics
operator|.
name|initingContainer
argument_list|()
expr_stmt|;
comment|// Inform the AuxServices about the opaque serviceData
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|csd
init|=
name|ctxt
operator|.
name|getServiceData
argument_list|()
decl_stmt|;
if|if
condition|(
name|csd
operator|!=
literal|null
condition|)
block|{
comment|// This can happen more than once per Application as each container may
comment|// have distinct service data
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|service
range|:
name|csd
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|container
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|AuxServicesEvent
argument_list|(
name|AuxServicesEventType
operator|.
name|APPLICATION_INIT
argument_list|,
name|container
operator|.
name|user
argument_list|,
name|container
operator|.
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|service
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|service
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Send requests for public, private resources
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|cntrRsrc
init|=
name|ctxt
operator|.
name|getLocalResources
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|cntrRsrc
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|rsrc
range|:
name|cntrRsrc
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
block|{
name|LocalResourceRequest
name|req
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|rsrc
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|links
init|=
name|container
operator|.
name|pendingResources
operator|.
name|get
argument_list|(
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
name|links
operator|==
literal|null
condition|)
block|{
name|links
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|container
operator|.
name|pendingResources
operator|.
name|put
argument_list|(
name|req
argument_list|,
name|links
argument_list|)
expr_stmt|;
block|}
name|links
operator|.
name|add
argument_list|(
name|rsrc
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|rsrc
operator|.
name|getValue
argument_list|()
operator|.
name|getVisibility
argument_list|()
condition|)
block|{
case|case
name|PUBLIC
case|:
name|container
operator|.
name|publicRsrcs
operator|.
name|add
argument_list|(
name|req
argument_list|)
expr_stmt|;
break|break;
case|case
name|PRIVATE
case|:
name|container
operator|.
name|privateRsrcs
operator|.
name|add
argument_list|(
name|req
argument_list|)
expr_stmt|;
break|break;
case|case
name|APPLICATION
case|:
name|container
operator|.
name|appRsrcs
operator|.
name|add
argument_list|(
name|req
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got exception parsing "
operator|+
name|rsrc
operator|.
name|getKey
argument_list|()
operator|+
literal|" and value "
operator|+
name|rsrc
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|// malformed resource; abort container launch
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to parse resource-request"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|container
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|container
operator|.
name|metrics
operator|.
name|endInitingContainer
argument_list|()
expr_stmt|;
return|return
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
return|;
block|}
name|Map
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|req
init|=
operator|new
name|HashMap
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|container
operator|.
name|publicRsrcs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|req
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|container
operator|.
name|publicRsrcs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|container
operator|.
name|privateRsrcs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|req
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|container
operator|.
name|privateRsrcs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|container
operator|.
name|appRsrcs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|req
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|,
name|container
operator|.
name|appRsrcs
argument_list|)
expr_stmt|;
block|}
name|container
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationRequestEvent
argument_list|(
name|container
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ContainerState
operator|.
name|LOCALIZING
return|;
block|}
else|else
block|{
name|container
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainersLauncherEvent
argument_list|(
name|container
argument_list|,
name|ContainersLauncherEventType
operator|.
name|LAUNCH_CONTAINER
argument_list|)
argument_list|)
expr_stmt|;
name|container
operator|.
name|metrics
operator|.
name|endInitingContainer
argument_list|()
expr_stmt|;
return|return
name|ContainerState
operator|.
name|LOCALIZED
return|;
block|}
block|}
block|}
comment|/**    * Transition when one of the requested resources for this container    * has been successfully localized.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dispatcher not typed
DECL|class|LocalizedTransition
specifier|static
class|class
name|LocalizedTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerEvent
argument_list|,
name|ContainerState
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|ContainerState
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|ContainerResourceLocalizedEvent
name|rsrcEvent
init|=
operator|(
name|ContainerResourceLocalizedEvent
operator|)
name|event
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|syms
init|=
name|container
operator|.
name|pendingResources
operator|.
name|remove
argument_list|(
name|rsrcEvent
operator|.
name|getResource
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|syms
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Localized unknown resource "
operator|+
name|rsrcEvent
operator|.
name|getResource
argument_list|()
operator|+
literal|" for container "
operator|+
name|container
operator|.
name|containerId
argument_list|)
expr_stmt|;
assert|assert
literal|false
assert|;
comment|// fail container?
return|return
name|ContainerState
operator|.
name|LOCALIZING
return|;
block|}
name|container
operator|.
name|localizedResources
operator|.
name|put
argument_list|(
name|rsrcEvent
operator|.
name|getLocation
argument_list|()
argument_list|,
name|syms
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|container
operator|.
name|pendingResources
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ContainerState
operator|.
name|LOCALIZING
return|;
block|}
name|container
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainersLauncherEvent
argument_list|(
name|container
argument_list|,
name|ContainersLauncherEventType
operator|.
name|LAUNCH_CONTAINER
argument_list|)
argument_list|)
expr_stmt|;
name|container
operator|.
name|metrics
operator|.
name|endInitingContainer
argument_list|()
expr_stmt|;
return|return
name|ContainerState
operator|.
name|LOCALIZED
return|;
block|}
block|}
comment|/**    * Transition from LOCALIZED state to RUNNING state upon receiving    * a CONTAINER_LAUNCHED event    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dispatcher not typed
DECL|class|LaunchTransition
specifier|static
class|class
name|LaunchTransition
extends|extends
name|ContainerTransition
block|{
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
comment|// Inform the ContainersMonitor to start monitoring the container's
comment|// resource usage.
name|long
name|pmemBytes
init|=
name|container
operator|.
name|getResource
argument_list|()
operator|.
name|getMemory
argument_list|()
operator|*
literal|1024
operator|*
literal|1024L
decl_stmt|;
name|float
name|pmemRatio
init|=
name|container
operator|.
name|daemonConf
operator|.
name|getFloat
argument_list|(
name|YarnConfiguration
operator|.
name|NM_VMEM_PMEM_RATIO
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_VMEM_PMEM_RATIO
argument_list|)
decl_stmt|;
name|long
name|vmemBytes
init|=
call|(
name|long
call|)
argument_list|(
name|pmemRatio
operator|*
name|pmemBytes
argument_list|)
decl_stmt|;
name|container
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerStartMonitoringEvent
argument_list|(
name|container
operator|.
name|containerId
argument_list|,
name|vmemBytes
argument_list|,
name|pmemBytes
argument_list|)
argument_list|)
expr_stmt|;
name|container
operator|.
name|metrics
operator|.
name|runningContainer
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Transition from RUNNING or KILLING state to EXITED_WITH_SUCCESS state    * upon EXITED_WITH_SUCCESS message.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dispatcher not typed
DECL|class|ExitedWithSuccessTransition
specifier|static
class|class
name|ExitedWithSuccessTransition
extends|extends
name|ContainerTransition
block|{
DECL|field|clCleanupRequired
name|boolean
name|clCleanupRequired
decl_stmt|;
DECL|method|ExitedWithSuccessTransition (boolean clCleanupRequired)
specifier|public
name|ExitedWithSuccessTransition
parameter_list|(
name|boolean
name|clCleanupRequired
parameter_list|)
block|{
name|this
operator|.
name|clCleanupRequired
operator|=
name|clCleanupRequired
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
comment|// Set exit code to 0 on success
name|container
operator|.
name|exitCode
operator|=
literal|0
expr_stmt|;
comment|// TODO: Add containerWorkDir to the deletion service.
if|if
condition|(
name|clCleanupRequired
condition|)
block|{
name|container
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainersLauncherEvent
argument_list|(
name|container
argument_list|,
name|ContainersLauncherEventType
operator|.
name|CLEANUP_CONTAINER
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|container
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Transition to EXITED_WITH_FAILURE state upon    * CONTAINER_EXITED_WITH_FAILURE state.    **/
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dispatcher not typed
DECL|class|ExitedWithFailureTransition
specifier|static
class|class
name|ExitedWithFailureTransition
extends|extends
name|ContainerTransition
block|{
DECL|field|clCleanupRequired
name|boolean
name|clCleanupRequired
decl_stmt|;
DECL|method|ExitedWithFailureTransition (boolean clCleanupRequired)
specifier|public
name|ExitedWithFailureTransition
parameter_list|(
name|boolean
name|clCleanupRequired
parameter_list|)
block|{
name|this
operator|.
name|clCleanupRequired
operator|=
name|clCleanupRequired
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|ContainerExitEvent
name|exitEvent
init|=
operator|(
name|ContainerExitEvent
operator|)
name|event
decl_stmt|;
name|container
operator|.
name|exitCode
operator|=
name|exitEvent
operator|.
name|getExitCode
argument_list|()
expr_stmt|;
comment|// TODO: Add containerWorkDir to the deletion service.
comment|// TODO: Add containerOuputDir to the deletion service.
if|if
condition|(
name|clCleanupRequired
condition|)
block|{
name|container
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainersLauncherEvent
argument_list|(
name|container
argument_list|,
name|ContainersLauncherEventType
operator|.
name|CLEANUP_CONTAINER
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|container
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Transition to EXITED_WITH_FAILURE upon receiving KILLED_ON_REQUEST    */
DECL|class|KilledExternallyTransition
specifier|static
class|class
name|KilledExternallyTransition
extends|extends
name|ExitedWithFailureTransition
block|{
DECL|method|KilledExternallyTransition ()
name|KilledExternallyTransition
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|super
operator|.
name|transition
argument_list|(
name|container
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|container
operator|.
name|diagnostics
operator|.
name|append
argument_list|(
literal|"Killed by external signal\n"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Transition from LOCALIZING to LOCALIZATION_FAILED upon receiving    * RESOURCE_FAILED event.    */
DECL|class|ResourceFailedTransition
specifier|static
class|class
name|ResourceFailedTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|ContainerResourceFailedEvent
name|rsrcFailedEvent
init|=
operator|(
name|ContainerResourceFailedEvent
operator|)
name|event
decl_stmt|;
name|container
operator|.
name|diagnostics
operator|.
name|append
argument_list|(
name|rsrcFailedEvent
operator|.
name|getDiagnosticMessage
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
comment|// Inform the localizer to decrement reference counts and cleanup
comment|// resources.
name|container
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|container
operator|.
name|metrics
operator|.
name|endInitingContainer
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Transition from LOCALIZING to KILLING upon receiving    * KILL_CONTAINER event.    */
DECL|class|KillDuringLocalizationTransition
specifier|static
class|class
name|KillDuringLocalizationTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
comment|// Inform the localizer to decrement reference counts and cleanup
comment|// resources.
name|container
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|container
operator|.
name|metrics
operator|.
name|endInitingContainer
argument_list|()
expr_stmt|;
name|ContainerKillEvent
name|killEvent
init|=
operator|(
name|ContainerKillEvent
operator|)
name|event
decl_stmt|;
name|container
operator|.
name|diagnostics
operator|.
name|append
argument_list|(
name|killEvent
operator|.
name|getDiagnostic
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Remain in KILLING state when receiving a RESOURCE_LOCALIZED request    * while in the process of killing.    */
DECL|class|LocalizedResourceDuringKillTransition
specifier|static
class|class
name|LocalizedResourceDuringKillTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|ContainerResourceLocalizedEvent
name|rsrcEvent
init|=
operator|(
name|ContainerResourceLocalizedEvent
operator|)
name|event
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|syms
init|=
name|container
operator|.
name|pendingResources
operator|.
name|remove
argument_list|(
name|rsrcEvent
operator|.
name|getResource
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|syms
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Localized unknown resource "
operator|+
name|rsrcEvent
operator|.
name|getResource
argument_list|()
operator|+
literal|" for container "
operator|+
name|container
operator|.
name|containerId
argument_list|)
expr_stmt|;
assert|assert
literal|false
assert|;
comment|// fail container?
return|return;
block|}
name|container
operator|.
name|localizedResources
operator|.
name|put
argument_list|(
name|rsrcEvent
operator|.
name|getLocation
argument_list|()
argument_list|,
name|syms
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Transitions upon receiving KILL_CONTAINER:    * - LOCALIZED -> KILLING    * - RUNNING -> KILLING    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dispatcher not typed
DECL|class|KillTransition
specifier|static
class|class
name|KillTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
comment|// Kill the process/process-grp
name|container
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainersLauncherEvent
argument_list|(
name|container
argument_list|,
name|ContainersLauncherEventType
operator|.
name|CLEANUP_CONTAINER
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerKillEvent
name|killEvent
init|=
operator|(
name|ContainerKillEvent
operator|)
name|event
decl_stmt|;
name|container
operator|.
name|diagnostics
operator|.
name|append
argument_list|(
name|killEvent
operator|.
name|getDiagnostic
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Transition from KILLING to CONTAINER_CLEANEDUP_AFTER_KILL    * upon receiving CONTAINER_KILLED_ON_REQUEST.    */
DECL|class|ContainerKilledTransition
specifier|static
class|class
name|ContainerKilledTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|ContainerExitEvent
name|exitEvent
init|=
operator|(
name|ContainerExitEvent
operator|)
name|event
decl_stmt|;
name|container
operator|.
name|exitCode
operator|=
name|exitEvent
operator|.
name|getExitCode
argument_list|()
expr_stmt|;
comment|// The process/process-grp is killed. Decrement reference counts and
comment|// cleanup resources
name|container
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Handle the following transitions:    * - NEW -> DONE upon KILL_CONTAINER    * - {LOCALIZATION_FAILED, EXITED_WITH_SUCCESS, EXITED_WITH_FAILURE,    *    KILLING, CONTAINER_CLEANEDUP_AFTER_KILL}    *   -> DONE upon CONTAINER_RESOURCES_CLEANEDUP    */
DECL|class|ContainerDoneTransition
specifier|static
class|class
name|ContainerDoneTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|container
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Update diagnostics, staying in the same state.    */
DECL|class|ContainerDiagnosticsUpdateTransition
specifier|static
class|class
name|ContainerDiagnosticsUpdateTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|ContainerDiagnosticsUpdateEvent
name|updateEvent
init|=
operator|(
name|ContainerDiagnosticsUpdateEvent
operator|)
name|event
decl_stmt|;
name|container
operator|.
name|diagnostics
operator|.
name|append
argument_list|(
name|updateEvent
operator|.
name|getDiagnosticsUpdate
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|handle (ContainerEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|ContainerEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|ContainerId
name|containerID
init|=
name|event
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processing "
operator|+
name|containerID
operator|+
literal|" of type "
operator|+
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerState
name|oldState
init|=
name|stateMachine
operator|.
name|getCurrentState
argument_list|()
decl_stmt|;
name|ContainerState
name|newState
init|=
literal|null
decl_stmt|;
try|try
block|{
name|newState
operator|=
name|stateMachine
operator|.
name|doTransition
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidStateTransitonException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can't handle this event at current state: Current: ["
operator|+
name|oldState
operator|+
literal|"], eventType: ["
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oldState
operator|!=
name|newState
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Container "
operator|+
name|containerID
operator|+
literal|" transitioned from "
operator|+
name|oldState
operator|+
literal|" to "
operator|+
name|newState
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|this
operator|.
name|containerId
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

