begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.container
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerSubState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|scheduler
operator|.
name|UpdateContainerSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerRetryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerRetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NMContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
operator|.
name|ExitCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NMAuditLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NMAuditLogger
operator|.
name|AuditConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|AuxServicesEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|AuxServicesEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationContainerFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
operator|.
name|ContainersLauncherEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
operator|.
name|ContainersLauncherEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|LocalResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ContainerLocalizationCleanupEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ContainerLocalizationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ContainerLocalizationRequestEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizationEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|sharedcache
operator|.
name|SharedCacheUploadEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|sharedcache
operator|.
name|SharedCacheUploadEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|loghandler
operator|.
name|event
operator|.
name|LogHandlerContainerFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|ContainerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|ContainerStartMonitoringEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|ContainerStopMonitoringEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|scheduler
operator|.
name|ContainerSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|scheduler
operator|.
name|ContainerSchedulerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|metrics
operator|.
name|NodeManagerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
operator|.
name|RecoveredContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
operator|.
name|RecoveredContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|timelineservice
operator|.
name|NMTimelinePublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|InvalidStateTransitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|MultipleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|SingleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_class
DECL|class|ContainerImpl
specifier|public
class|class
name|ContainerImpl
implements|implements
name|Container
block|{
DECL|class|ReInitializationContext
specifier|private
specifier|static
specifier|final
class|class
name|ReInitializationContext
block|{
DECL|field|newLaunchContext
specifier|private
specifier|final
name|ContainerLaunchContext
name|newLaunchContext
decl_stmt|;
DECL|field|newResourceSet
specifier|private
specifier|final
name|ResourceSet
name|newResourceSet
decl_stmt|;
comment|// Rollback state
DECL|field|oldLaunchContext
specifier|private
specifier|final
name|ContainerLaunchContext
name|oldLaunchContext
decl_stmt|;
DECL|field|oldResourceSet
specifier|private
specifier|final
name|ResourceSet
name|oldResourceSet
decl_stmt|;
DECL|field|isRollback
specifier|private
name|boolean
name|isRollback
init|=
literal|false
decl_stmt|;
DECL|method|ReInitializationContext (ContainerLaunchContext newLaunchContext, ResourceSet newResourceSet, ContainerLaunchContext oldLaunchContext, ResourceSet oldResourceSet)
specifier|private
name|ReInitializationContext
parameter_list|(
name|ContainerLaunchContext
name|newLaunchContext
parameter_list|,
name|ResourceSet
name|newResourceSet
parameter_list|,
name|ContainerLaunchContext
name|oldLaunchContext
parameter_list|,
name|ResourceSet
name|oldResourceSet
parameter_list|)
block|{
name|this
operator|.
name|newLaunchContext
operator|=
name|newLaunchContext
expr_stmt|;
name|this
operator|.
name|newResourceSet
operator|=
name|newResourceSet
expr_stmt|;
name|this
operator|.
name|oldLaunchContext
operator|=
name|oldLaunchContext
expr_stmt|;
name|this
operator|.
name|oldResourceSet
operator|=
name|oldResourceSet
expr_stmt|;
block|}
DECL|method|canRollback ()
specifier|private
name|boolean
name|canRollback
parameter_list|()
block|{
return|return
operator|(
name|oldLaunchContext
operator|!=
literal|null
operator|)
return|;
block|}
DECL|method|mergedResourceSet (ResourceSet current)
specifier|private
name|ResourceSet
name|mergedResourceSet
parameter_list|(
name|ResourceSet
name|current
parameter_list|)
block|{
if|if
condition|(
name|isRollback
condition|)
block|{
comment|// No merging should be done for rollback
return|return
name|newResourceSet
return|;
block|}
if|if
condition|(
name|current
operator|==
name|newResourceSet
condition|)
block|{
comment|// This happens during a restart
return|return
name|current
return|;
block|}
return|return
name|ResourceSet
operator|.
name|merge
argument_list|(
name|current
argument_list|,
name|newResourceSet
argument_list|)
return|;
block|}
DECL|method|createContextForRollback ()
specifier|private
name|ReInitializationContext
name|createContextForRollback
parameter_list|()
block|{
name|ReInitializationContext
name|cntxt
init|=
operator|new
name|ReInitializationContext
argument_list|(
name|oldLaunchContext
argument_list|,
name|oldResourceSet
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|cntxt
operator|.
name|isRollback
operator|=
literal|true
expr_stmt|;
return|return
name|cntxt
return|;
block|}
block|}
DECL|field|dateFormat
specifier|private
specifier|final
name|SimpleDateFormat
name|dateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss.SSS"
argument_list|)
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|Lock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|Lock
name|writeLock
decl_stmt|;
DECL|field|dispatcher
specifier|private
specifier|final
name|Dispatcher
name|dispatcher
decl_stmt|;
DECL|field|stateStore
specifier|private
specifier|final
name|NMStateStoreService
name|stateStore
decl_stmt|;
DECL|field|credentials
specifier|private
specifier|final
name|Credentials
name|credentials
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|final
name|NodeManagerMetrics
name|metrics
decl_stmt|;
DECL|field|launchContext
specifier|private
specifier|volatile
name|ContainerLaunchContext
name|launchContext
decl_stmt|;
DECL|field|containerTokenIdentifier
specifier|private
specifier|volatile
name|ContainerTokenIdentifier
name|containerTokenIdentifier
decl_stmt|;
DECL|field|containerId
specifier|private
specifier|final
name|ContainerId
name|containerId
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|String
name|user
decl_stmt|;
DECL|field|version
specifier|private
name|int
name|version
decl_stmt|;
DECL|field|exitCode
specifier|private
name|int
name|exitCode
init|=
name|ContainerExitStatus
operator|.
name|INVALID
decl_stmt|;
DECL|field|diagnostics
specifier|private
specifier|final
name|StringBuilder
name|diagnostics
decl_stmt|;
DECL|field|diagnosticsMaxSize
specifier|private
specifier|final
name|int
name|diagnosticsMaxSize
decl_stmt|;
DECL|field|wasLaunched
specifier|private
name|boolean
name|wasLaunched
decl_stmt|;
DECL|field|containerLocalizationStartTime
specifier|private
name|long
name|containerLocalizationStartTime
decl_stmt|;
DECL|field|containerLaunchStartTime
specifier|private
name|long
name|containerLaunchStartTime
decl_stmt|;
DECL|field|containerMetrics
specifier|private
name|ContainerMetrics
name|containerMetrics
decl_stmt|;
DECL|field|clock
specifier|private
specifier|static
name|Clock
name|clock
init|=
name|SystemClock
operator|.
name|getInstance
argument_list|()
decl_stmt|;
DECL|field|containerRetryContext
specifier|private
name|ContainerRetryContext
name|containerRetryContext
decl_stmt|;
comment|// remaining retries to relaunch container if needed
DECL|field|remainingRetryAttempts
specifier|private
name|int
name|remainingRetryAttempts
decl_stmt|;
DECL|field|workDir
specifier|private
name|String
name|workDir
decl_stmt|;
DECL|field|logDir
specifier|private
name|String
name|logDir
decl_stmt|;
DECL|field|host
specifier|private
name|String
name|host
decl_stmt|;
DECL|field|ips
specifier|private
name|String
name|ips
decl_stmt|;
DECL|field|reInitContext
specifier|private
specifier|volatile
name|ReInitializationContext
name|reInitContext
decl_stmt|;
DECL|field|isReInitializing
specifier|private
specifier|volatile
name|boolean
name|isReInitializing
init|=
literal|false
decl_stmt|;
DECL|field|isMarkeForKilling
specifier|private
specifier|volatile
name|boolean
name|isMarkeForKilling
init|=
literal|false
decl_stmt|;
comment|/** The NM-wide configuration - not specific to this container */
DECL|field|daemonConf
specifier|private
specifier|final
name|Configuration
name|daemonConf
decl_stmt|;
DECL|field|startTime
specifier|private
specifier|final
name|long
name|startTime
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ContainerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// whether container has been recovered after a restart
DECL|field|recoveredStatus
specifier|private
name|RecoveredContainerStatus
name|recoveredStatus
init|=
name|RecoveredContainerStatus
operator|.
name|REQUESTED
decl_stmt|;
comment|// whether container was marked as killed after recovery
DECL|field|recoveredAsKilled
specifier|private
name|boolean
name|recoveredAsKilled
init|=
literal|false
decl_stmt|;
DECL|field|context
specifier|private
name|Context
name|context
decl_stmt|;
DECL|field|resourceSet
specifier|private
name|ResourceSet
name|resourceSet
decl_stmt|;
DECL|field|resourceMappings
specifier|private
name|ResourceMappings
name|resourceMappings
decl_stmt|;
DECL|method|ContainerImpl (Configuration conf, Dispatcher dispatcher, ContainerLaunchContext launchContext, Credentials creds, NodeManagerMetrics metrics, ContainerTokenIdentifier containerTokenIdentifier, Context context)
specifier|public
name|ContainerImpl
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|ContainerLaunchContext
name|launchContext
parameter_list|,
name|Credentials
name|creds
parameter_list|,
name|NodeManagerMetrics
name|metrics
parameter_list|,
name|ContainerTokenIdentifier
name|containerTokenIdentifier
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|dispatcher
argument_list|,
name|launchContext
argument_list|,
name|creds
argument_list|,
name|metrics
argument_list|,
name|containerTokenIdentifier
argument_list|,
name|context
argument_list|,
name|SystemClock
operator|.
name|getInstance
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|ContainerImpl (Configuration conf, Dispatcher dispatcher, ContainerLaunchContext launchContext, Credentials creds, NodeManagerMetrics metrics, ContainerTokenIdentifier containerTokenIdentifier, Context context, long startTs)
specifier|public
name|ContainerImpl
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|ContainerLaunchContext
name|launchContext
parameter_list|,
name|Credentials
name|creds
parameter_list|,
name|NodeManagerMetrics
name|metrics
parameter_list|,
name|ContainerTokenIdentifier
name|containerTokenIdentifier
parameter_list|,
name|Context
name|context
parameter_list|,
name|long
name|startTs
parameter_list|)
block|{
name|this
operator|.
name|startTime
operator|=
name|startTs
expr_stmt|;
name|this
operator|.
name|daemonConf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|dispatcher
operator|=
name|dispatcher
expr_stmt|;
name|this
operator|.
name|stateStore
operator|=
name|context
operator|.
name|getNMStateStore
argument_list|()
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|containerTokenIdentifier
operator|.
name|getVersion
argument_list|()
expr_stmt|;
name|this
operator|.
name|launchContext
operator|=
name|launchContext
expr_stmt|;
name|this
operator|.
name|diagnosticsMaxSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CONTAINER_DIAGNOSTICS_MAXIMUM_SIZE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_CONTAINER_DIAGNOSTICS_MAXIMUM_SIZE
argument_list|)
expr_stmt|;
name|this
operator|.
name|containerTokenIdentifier
operator|=
name|containerTokenIdentifier
expr_stmt|;
name|this
operator|.
name|containerId
operator|=
name|containerTokenIdentifier
operator|.
name|getContainerID
argument_list|()
expr_stmt|;
name|this
operator|.
name|diagnostics
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|this
operator|.
name|credentials
operator|=
name|creds
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|user
operator|=
name|containerTokenIdentifier
operator|.
name|getApplicationSubmitter
argument_list|()
expr_stmt|;
name|ReadWriteLock
name|readWriteLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|this
operator|.
name|readLock
operator|=
name|readWriteLock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeLock
operator|=
name|readWriteLock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|boolean
name|containerMetricsEnabled
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CONTAINER_METRICS_ENABLE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_CONTAINER_METRICS_ENABLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|containerMetricsEnabled
condition|)
block|{
name|long
name|flushPeriod
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CONTAINER_METRICS_PERIOD_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS
argument_list|)
decl_stmt|;
name|long
name|unregisterDelay
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS
argument_list|)
decl_stmt|;
name|containerMetrics
operator|=
name|ContainerMetrics
operator|.
name|forContainer
argument_list|(
name|containerId
argument_list|,
name|flushPeriod
argument_list|,
name|unregisterDelay
argument_list|)
expr_stmt|;
name|containerMetrics
operator|.
name|recordStartTime
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Configure the Retry Context
name|this
operator|.
name|containerRetryContext
operator|=
name|configureRetryContext
argument_list|(
name|conf
argument_list|,
name|launchContext
argument_list|,
name|this
operator|.
name|containerId
argument_list|)
expr_stmt|;
name|this
operator|.
name|remainingRetryAttempts
operator|=
name|this
operator|.
name|containerRetryContext
operator|.
name|getMaxRetries
argument_list|()
expr_stmt|;
name|stateMachine
operator|=
name|stateMachineFactory
operator|.
name|make
argument_list|(
name|this
argument_list|,
name|ContainerState
operator|.
name|NEW
argument_list|,
name|context
operator|.
name|getContainerStateTransitionListener
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|resourceSet
operator|=
operator|new
name|ResourceSet
argument_list|()
expr_stmt|;
name|this
operator|.
name|resourceMappings
operator|=
operator|new
name|ResourceMappings
argument_list|()
expr_stmt|;
block|}
DECL|method|configureRetryContext ( Configuration conf, ContainerLaunchContext launchContext, ContainerId containerId)
specifier|private
specifier|static
name|ContainerRetryContext
name|configureRetryContext
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ContainerLaunchContext
name|launchContext
parameter_list|,
name|ContainerId
name|containerId
parameter_list|)
block|{
name|ContainerRetryContext
name|context
decl_stmt|;
if|if
condition|(
name|launchContext
operator|!=
literal|null
operator|&&
name|launchContext
operator|.
name|getContainerRetryContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|context
operator|=
name|launchContext
operator|.
name|getContainerRetryContext
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|context
operator|=
name|ContainerRetryContext
operator|.
name|NEVER_RETRY_CONTEXT
expr_stmt|;
block|}
name|int
name|minimumRestartInterval
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CONTAINER_RETRY_MINIMUM_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_CONTAINER_RETRY_MINIMUM_INTERVAL_MS
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getRetryPolicy
argument_list|()
operator|!=
name|ContainerRetryPolicy
operator|.
name|NEVER_RETRY
operator|&&
name|context
operator|.
name|getRetryInterval
argument_list|()
operator|<
name|minimumRestartInterval
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Set restart interval to minimum value "
operator|+
name|minimumRestartInterval
operator|+
literal|"ms for container "
operator|+
name|containerId
argument_list|)
expr_stmt|;
name|context
operator|.
name|setRetryInterval
argument_list|(
name|minimumRestartInterval
argument_list|)
expr_stmt|;
block|}
return|return
name|context
return|;
block|}
comment|// constructor for a recovered container
DECL|method|ContainerImpl (Configuration conf, Dispatcher dispatcher, ContainerLaunchContext launchContext, Credentials creds, NodeManagerMetrics metrics, ContainerTokenIdentifier containerTokenIdentifier, Context context, RecoveredContainerState rcs)
specifier|public
name|ContainerImpl
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|ContainerLaunchContext
name|launchContext
parameter_list|,
name|Credentials
name|creds
parameter_list|,
name|NodeManagerMetrics
name|metrics
parameter_list|,
name|ContainerTokenIdentifier
name|containerTokenIdentifier
parameter_list|,
name|Context
name|context
parameter_list|,
name|RecoveredContainerState
name|rcs
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|dispatcher
argument_list|,
name|launchContext
argument_list|,
name|creds
argument_list|,
name|metrics
argument_list|,
name|containerTokenIdentifier
argument_list|,
name|context
argument_list|,
name|rcs
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|recoveredStatus
operator|=
name|rcs
operator|.
name|getStatus
argument_list|()
expr_stmt|;
name|this
operator|.
name|exitCode
operator|=
name|rcs
operator|.
name|getExitCode
argument_list|()
expr_stmt|;
name|this
operator|.
name|recoveredAsKilled
operator|=
name|rcs
operator|.
name|getKilled
argument_list|()
expr_stmt|;
name|this
operator|.
name|diagnostics
operator|.
name|append
argument_list|(
name|rcs
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|rcs
operator|.
name|getVersion
argument_list|()
expr_stmt|;
name|this
operator|.
name|remainingRetryAttempts
operator|=
name|rcs
operator|.
name|getRemainingRetryAttempts
argument_list|()
expr_stmt|;
name|this
operator|.
name|workDir
operator|=
name|rcs
operator|.
name|getWorkDir
argument_list|()
expr_stmt|;
name|this
operator|.
name|logDir
operator|=
name|rcs
operator|.
name|getLogDir
argument_list|()
expr_stmt|;
name|this
operator|.
name|resourceMappings
operator|=
name|rcs
operator|.
name|getResourceMappings
argument_list|()
expr_stmt|;
block|}
DECL|field|UPDATE_DIAGNOSTICS_TRANSITION
specifier|private
specifier|static
specifier|final
name|ContainerDiagnosticsUpdateTransition
name|UPDATE_DIAGNOSTICS_TRANSITION
init|=
operator|new
name|ContainerDiagnosticsUpdateTransition
argument_list|()
decl_stmt|;
comment|// State Machine for each container.
specifier|private
specifier|static
name|StateMachineFactory
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerState
argument_list|,
name|ContainerEventType
argument_list|,
name|ContainerEvent
argument_list|>
DECL|field|stateMachineFactory
name|stateMachineFactory
init|=
operator|new
name|StateMachineFactory
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerState
argument_list|,
name|ContainerEventType
argument_list|,
name|ContainerEvent
argument_list|>
argument_list|(
name|ContainerState
operator|.
name|NEW
argument_list|)
comment|// From NEW State
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|NEW
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ContainerState
operator|.
name|LOCALIZING
argument_list|,
name|ContainerState
operator|.
name|SCHEDULED
argument_list|,
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|)
argument_list|,
name|ContainerEventType
operator|.
name|INIT_CONTAINER
argument_list|,
operator|new
name|RequestResourcesTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|NEW
argument_list|,
name|ContainerState
operator|.
name|NEW
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_DIAGNOSTICS_MSG
argument_list|,
name|UPDATE_DIAGNOSTICS_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|NEW
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
name|ContainerEventType
operator|.
name|KILL_CONTAINER
argument_list|,
operator|new
name|KillOnNewTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|NEW
argument_list|,
name|ContainerState
operator|.
name|NEW
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_CONTAINER_TOKEN
argument_list|,
operator|new
name|UpdateTransition
argument_list|()
argument_list|)
comment|// From LOCALIZING State
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|LOCALIZING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ContainerState
operator|.
name|LOCALIZING
argument_list|,
name|ContainerState
operator|.
name|SCHEDULED
argument_list|)
argument_list|,
name|ContainerEventType
operator|.
name|RESOURCE_LOCALIZED
argument_list|,
operator|new
name|LocalizedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|LOCALIZING
argument_list|,
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
argument_list|,
name|ContainerEventType
operator|.
name|RESOURCE_FAILED
argument_list|,
operator|new
name|ResourceFailedTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|LOCALIZING
argument_list|,
name|ContainerState
operator|.
name|LOCALIZING
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_DIAGNOSTICS_MSG
argument_list|,
name|UPDATE_DIAGNOSTICS_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|LOCALIZING
argument_list|,
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerEventType
operator|.
name|KILL_CONTAINER
argument_list|,
operator|new
name|KillBeforeRunningTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|LOCALIZING
argument_list|,
name|ContainerState
operator|.
name|LOCALIZING
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_CONTAINER_TOKEN
argument_list|,
operator|new
name|UpdateTransition
argument_list|()
argument_list|)
comment|// From LOCALIZATION_FAILED State
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_RESOURCES_CLEANEDUP
argument_list|,
operator|new
name|LocalizationFailedToDoneTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
argument_list|,
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_DIAGNOSTICS_MSG
argument_list|,
name|UPDATE_DIAGNOSTICS_TRANSITION
argument_list|)
comment|// container not launched so kill is a no-op
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
argument_list|,
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ContainerEventType
operator|.
name|KILL_CONTAINER
argument_list|,
name|ContainerEventType
operator|.
name|PAUSE_CONTAINER
argument_list|)
argument_list|)
comment|// container cleanup triggers a release of all resources
comment|// regardless of whether they were localized or not
comment|// LocalizedResource handles release event in all states
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
argument_list|,
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
argument_list|,
name|ContainerEventType
operator|.
name|RESOURCE_LOCALIZED
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
argument_list|,
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
argument_list|,
name|ContainerEventType
operator|.
name|RESOURCE_FAILED
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
argument_list|,
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_CONTAINER_TOKEN
argument_list|,
operator|new
name|UpdateTransition
argument_list|()
argument_list|)
comment|// From SCHEDULED State
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|SCHEDULED
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_LAUNCHED
argument_list|,
operator|new
name|LaunchTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|SCHEDULED
argument_list|,
name|ContainerState
operator|.
name|PAUSED
argument_list|,
name|ContainerEventType
operator|.
name|RECOVER_PAUSED_CONTAINER
argument_list|,
operator|new
name|RecoveredContainerTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|SCHEDULED
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_FAILURE
argument_list|,
operator|new
name|ExitedWithFailureTransition
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|SCHEDULED
argument_list|,
name|ContainerState
operator|.
name|SCHEDULED
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_DIAGNOSTICS_MSG
argument_list|,
name|UPDATE_DIAGNOSTICS_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|SCHEDULED
argument_list|,
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerEventType
operator|.
name|KILL_CONTAINER
argument_list|,
operator|new
name|KillBeforeRunningTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|SCHEDULED
argument_list|,
name|ContainerState
operator|.
name|SCHEDULED
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_CONTAINER_TOKEN
argument_list|,
operator|new
name|NotifyContainerSchedulerOfUpdateTransition
argument_list|()
argument_list|)
comment|// From RUNNING State
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_SUCCESS
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_SUCCESS
argument_list|,
operator|new
name|ExitedWithSuccessTransition
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ContainerState
operator|.
name|RELAUNCHING
argument_list|,
name|ContainerState
operator|.
name|SCHEDULED
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|)
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_FAILURE
argument_list|,
operator|new
name|RetryFailureTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerState
operator|.
name|REINITIALIZING
argument_list|,
name|ContainerState
operator|.
name|REINITIALIZING_AWAITING_KILL
argument_list|)
argument_list|,
name|ContainerEventType
operator|.
name|REINITIALIZE_CONTAINER
argument_list|,
operator|new
name|ReInitializeContainerTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerState
operator|.
name|REINITIALIZING
argument_list|,
name|ContainerState
operator|.
name|REINITIALIZING_AWAITING_KILL
argument_list|)
argument_list|,
name|ContainerEventType
operator|.
name|ROLLBACK_REINIT
argument_list|,
operator|new
name|RollbackContainerTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerEventType
operator|.
name|RESOURCE_LOCALIZED
argument_list|,
operator|new
name|ResourceLocalizedWhileRunningTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerEventType
operator|.
name|RESOURCE_FAILED
argument_list|,
operator|new
name|ResourceLocalizationFailedWhileRunningTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_DIAGNOSTICS_MSG
argument_list|,
name|UPDATE_DIAGNOSTICS_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerEventType
operator|.
name|KILL_CONTAINER
argument_list|,
operator|new
name|KillTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_KILLED_ON_REQUEST
argument_list|,
operator|new
name|KilledExternallyTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerState
operator|.
name|PAUSING
argument_list|,
name|ContainerEventType
operator|.
name|PAUSE_CONTAINER
argument_list|,
operator|new
name|PauseContainerTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_CONTAINER_TOKEN
argument_list|,
operator|new
name|NotifyContainerSchedulerOfUpdateTransition
argument_list|()
argument_list|)
comment|// From PAUSING State
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|PAUSING
argument_list|,
name|ContainerState
operator|.
name|PAUSING
argument_list|,
name|ContainerEventType
operator|.
name|RESOURCE_LOCALIZED
argument_list|,
operator|new
name|ResourceLocalizedWhileRunningTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|PAUSING
argument_list|,
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerEventType
operator|.
name|KILL_CONTAINER
argument_list|,
operator|new
name|KillTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|PAUSING
argument_list|,
name|ContainerState
operator|.
name|PAUSING
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_DIAGNOSTICS_MSG
argument_list|,
name|UPDATE_DIAGNOSTICS_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|PAUSING
argument_list|,
name|ContainerState
operator|.
name|PAUSED
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_PAUSED
argument_list|,
operator|new
name|PausedContainerTransition
argument_list|()
argument_list|)
comment|// In case something goes wrong then container will exit from the
comment|// PAUSING state
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|PAUSING
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_SUCCESS
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_SUCCESS
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|PAUSING
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_FAILURE
argument_list|,
operator|new
name|ExitedWithFailureTransition
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|PAUSING
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_KILLED_ON_REQUEST
argument_list|,
operator|new
name|KilledExternallyTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|PAUSING
argument_list|,
name|ContainerState
operator|.
name|PAUSING
argument_list|,
name|ContainerEventType
operator|.
name|RESOURCE_LOCALIZED
argument_list|,
operator|new
name|ResourceLocalizedWhileRunningTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|PAUSING
argument_list|,
name|ContainerState
operator|.
name|PAUSING
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_CONTAINER_TOKEN
argument_list|,
operator|new
name|NotifyContainerSchedulerOfUpdateTransition
argument_list|()
argument_list|)
comment|// From PAUSED State
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|PAUSED
argument_list|,
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerEventType
operator|.
name|KILL_CONTAINER
argument_list|,
operator|new
name|KillTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|PAUSED
argument_list|,
name|ContainerState
operator|.
name|PAUSED
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_DIAGNOSTICS_MSG
argument_list|,
name|UPDATE_DIAGNOSTICS_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|PAUSED
argument_list|,
name|ContainerState
operator|.
name|PAUSED
argument_list|,
name|ContainerEventType
operator|.
name|PAUSE_CONTAINER
argument_list|)
comment|// This can happen during re-initialization.
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|PAUSED
argument_list|,
name|ContainerState
operator|.
name|PAUSED
argument_list|,
name|ContainerEventType
operator|.
name|RESOURCE_LOCALIZED
argument_list|,
operator|new
name|ResourceLocalizedWhileRunningTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|PAUSED
argument_list|,
name|ContainerState
operator|.
name|RESUMING
argument_list|,
name|ContainerEventType
operator|.
name|RESUME_CONTAINER
argument_list|,
operator|new
name|ResumeContainerTransition
argument_list|()
argument_list|)
comment|// In case something goes wrong then container will exit from the
comment|// PAUSED state
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|PAUSED
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_FAILURE
argument_list|,
operator|new
name|ExitedWithFailureTransition
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|PAUSED
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_KILLED_ON_REQUEST
argument_list|,
operator|new
name|KilledExternallyTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|PAUSED
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_SUCCESS
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_SUCCESS
argument_list|,
operator|new
name|ExitedWithSuccessTransition
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|PAUSED
argument_list|,
name|ContainerState
operator|.
name|PAUSED
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_CONTAINER_TOKEN
argument_list|,
operator|new
name|NotifyContainerSchedulerOfUpdateTransition
argument_list|()
argument_list|)
comment|// From RESUMING State
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RESUMING
argument_list|,
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerEventType
operator|.
name|KILL_CONTAINER
argument_list|,
operator|new
name|KillTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RESUMING
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_RESUMED
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RESUMING
argument_list|,
name|ContainerState
operator|.
name|RESUMING
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_DIAGNOSTICS_MSG
argument_list|,
name|UPDATE_DIAGNOSTICS_TRANSITION
argument_list|)
comment|// This can happen during re-initialization
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RESUMING
argument_list|,
name|ContainerState
operator|.
name|RESUMING
argument_list|,
name|ContainerEventType
operator|.
name|RESOURCE_LOCALIZED
argument_list|,
operator|new
name|ResourceLocalizedWhileRunningTransition
argument_list|()
argument_list|)
comment|// In case something goes wrong then container will exit from the
comment|// RESUMING state
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RESUMING
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_FAILURE
argument_list|,
operator|new
name|ExitedWithFailureTransition
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RESUMING
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_KILLED_ON_REQUEST
argument_list|,
operator|new
name|KilledExternallyTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RESUMING
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_SUCCESS
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_SUCCESS
argument_list|,
operator|new
name|ExitedWithSuccessTransition
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RESUMING
argument_list|,
name|ContainerState
operator|.
name|RESUMING
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_CONTAINER_TOKEN
argument_list|,
operator|new
name|NotifyContainerSchedulerOfUpdateTransition
argument_list|()
argument_list|)
comment|// NOTE - We cannot get a PAUSE_CONTAINER while in RESUMING state.
comment|// From REINITIALIZING State
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|REINITIALIZING
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_SUCCESS
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_SUCCESS
argument_list|,
operator|new
name|ExitedWithSuccessTransition
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|REINITIALIZING
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_FAILURE
argument_list|,
operator|new
name|ExitedWithFailureTransition
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|REINITIALIZING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ContainerState
operator|.
name|REINITIALIZING
argument_list|,
name|ContainerState
operator|.
name|REINITIALIZING_AWAITING_KILL
argument_list|)
argument_list|,
name|ContainerEventType
operator|.
name|RESOURCE_LOCALIZED
argument_list|,
operator|new
name|ResourceLocalizedWhileReInitTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|REINITIALIZING
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerEventType
operator|.
name|RESOURCE_FAILED
argument_list|,
operator|new
name|ResourceLocalizationFailedWhileReInitTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|REINITIALIZING
argument_list|,
name|ContainerState
operator|.
name|REINITIALIZING
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_DIAGNOSTICS_MSG
argument_list|,
name|UPDATE_DIAGNOSTICS_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|REINITIALIZING
argument_list|,
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerEventType
operator|.
name|KILL_CONTAINER
argument_list|,
operator|new
name|KillTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|REINITIALIZING
argument_list|,
name|ContainerState
operator|.
name|PAUSING
argument_list|,
name|ContainerEventType
operator|.
name|PAUSE_CONTAINER
argument_list|,
operator|new
name|PauseContainerTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|REINITIALIZING
argument_list|,
name|ContainerState
operator|.
name|REINITIALIZING
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_CONTAINER_TOKEN
argument_list|,
operator|new
name|NotifyContainerSchedulerOfUpdateTransition
argument_list|()
argument_list|)
comment|// from REINITIALIZING_AWAITING_KILL
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|REINITIALIZING_AWAITING_KILL
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_SUCCESS
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_SUCCESS
argument_list|,
operator|new
name|ExitedWithSuccessTransition
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|REINITIALIZING_AWAITING_KILL
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_FAILURE
argument_list|,
operator|new
name|ExitedWithFailureTransition
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|REINITIALIZING_AWAITING_KILL
argument_list|,
name|ContainerState
operator|.
name|REINITIALIZING_AWAITING_KILL
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_DIAGNOSTICS_MSG
argument_list|,
name|UPDATE_DIAGNOSTICS_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|REINITIALIZING_AWAITING_KILL
argument_list|,
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerEventType
operator|.
name|KILL_CONTAINER
argument_list|,
operator|new
name|KillTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|REINITIALIZING_AWAITING_KILL
argument_list|,
name|ContainerState
operator|.
name|SCHEDULED
argument_list|,
name|ContainerEventType
operator|.
name|PAUSE_CONTAINER
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|REINITIALIZING_AWAITING_KILL
argument_list|,
name|ContainerState
operator|.
name|SCHEDULED
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_KILLED_ON_REQUEST
argument_list|,
operator|new
name|KilledForReInitializationTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|REINITIALIZING_AWAITING_KILL
argument_list|,
name|ContainerState
operator|.
name|REINITIALIZING_AWAITING_KILL
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_CONTAINER_TOKEN
argument_list|,
operator|new
name|NotifyContainerSchedulerOfUpdateTransition
argument_list|()
argument_list|)
comment|// From RELAUNCHING State
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RELAUNCHING
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_LAUNCHED
argument_list|,
operator|new
name|LaunchTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RELAUNCHING
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_FAILURE
argument_list|,
operator|new
name|ExitedWithFailureTransition
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RELAUNCHING
argument_list|,
name|ContainerState
operator|.
name|RELAUNCHING
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_DIAGNOSTICS_MSG
argument_list|,
name|UPDATE_DIAGNOSTICS_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RELAUNCHING
argument_list|,
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerEventType
operator|.
name|KILL_CONTAINER
argument_list|,
operator|new
name|KillTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RELAUNCHING
argument_list|,
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerEventType
operator|.
name|PAUSE_CONTAINER
argument_list|,
operator|new
name|KillOnPauseTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RELAUNCHING
argument_list|,
name|ContainerState
operator|.
name|RELAUNCHING
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_CONTAINER_TOKEN
argument_list|,
operator|new
name|NotifyContainerSchedulerOfUpdateTransition
argument_list|()
argument_list|)
comment|// From CONTAINER_EXITED_WITH_SUCCESS State
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|EXITED_WITH_SUCCESS
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_RESOURCES_CLEANEDUP
argument_list|,
operator|new
name|ExitedWithSuccessToDoneTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|EXITED_WITH_SUCCESS
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_SUCCESS
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_DIAGNOSTICS_MSG
argument_list|,
name|UPDATE_DIAGNOSTICS_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|EXITED_WITH_SUCCESS
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_SUCCESS
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ContainerEventType
operator|.
name|KILL_CONTAINER
argument_list|,
name|ContainerEventType
operator|.
name|PAUSE_CONTAINER
argument_list|)
argument_list|)
comment|// No transition - assuming container is on its way to completion
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|EXITED_WITH_SUCCESS
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_SUCCESS
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_CONTAINER_TOKEN
argument_list|)
comment|// From EXITED_WITH_FAILURE State
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_RESOURCES_CLEANEDUP
argument_list|,
operator|new
name|ExitedWithFailureToDoneTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_DIAGNOSTICS_MSG
argument_list|,
name|UPDATE_DIAGNOSTICS_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ContainerEventType
operator|.
name|KILL_CONTAINER
argument_list|,
name|ContainerEventType
operator|.
name|PAUSE_CONTAINER
argument_list|)
argument_list|)
comment|// No transition - assuming container is on its way to completion
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_CONTAINER_TOKEN
argument_list|)
comment|// From KILLING State.
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerState
operator|.
name|CONTAINER_CLEANEDUP_AFTER_KILL
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_KILLED_ON_REQUEST
argument_list|,
operator|new
name|ContainerKilledTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerEventType
operator|.
name|RESOURCE_LOCALIZED
argument_list|,
operator|new
name|LocalizedResourceDuringKillTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerEventType
operator|.
name|RESOURCE_FAILED
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_DIAGNOSTICS_MSG
argument_list|,
name|UPDATE_DIAGNOSTICS_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerEventType
operator|.
name|KILL_CONTAINER
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_SUCCESS
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_SUCCESS
argument_list|,
operator|new
name|ExitedWithSuccessTransition
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_FAILURE
argument_list|,
operator|new
name|ExitedWithFailureTransition
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_RESOURCES_CLEANEDUP
argument_list|,
operator|new
name|KillingToDoneTransition
argument_list|()
argument_list|)
comment|// Handle a launched container during killing stage is a no-op
comment|// as cleanup container is always handled after launch container event
comment|// in the container launcher
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ContainerEventType
operator|.
name|CONTAINER_LAUNCHED
argument_list|,
name|ContainerEventType
operator|.
name|PAUSE_CONTAINER
argument_list|)
argument_list|)
comment|// No transition - assuming container is on its way to completion
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_CONTAINER_TOKEN
argument_list|)
comment|// From CONTAINER_CLEANEDUP_AFTER_KILL State.
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|CONTAINER_CLEANEDUP_AFTER_KILL
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_RESOURCES_CLEANEDUP
argument_list|,
operator|new
name|ContainerCleanedupAfterKillToDoneTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|CONTAINER_CLEANEDUP_AFTER_KILL
argument_list|,
name|ContainerState
operator|.
name|CONTAINER_CLEANEDUP_AFTER_KILL
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_DIAGNOSTICS_MSG
argument_list|,
name|UPDATE_DIAGNOSTICS_TRANSITION
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|CONTAINER_CLEANEDUP_AFTER_KILL
argument_list|,
name|ContainerState
operator|.
name|CONTAINER_CLEANEDUP_AFTER_KILL
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ContainerEventType
operator|.
name|KILL_CONTAINER
argument_list|,
name|ContainerEventType
operator|.
name|RESOURCE_FAILED
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_SUCCESS
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_FAILURE
argument_list|,
name|ContainerEventType
operator|.
name|PAUSE_CONTAINER
argument_list|)
argument_list|)
comment|// No transition - assuming container is on its way to completion
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|CONTAINER_CLEANEDUP_AFTER_KILL
argument_list|,
name|ContainerState
operator|.
name|CONTAINER_CLEANEDUP_AFTER_KILL
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_CONTAINER_TOKEN
argument_list|)
comment|// From DONE
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ContainerEventType
operator|.
name|KILL_CONTAINER
argument_list|,
name|ContainerEventType
operator|.
name|PAUSE_CONTAINER
argument_list|)
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
name|ContainerEventType
operator|.
name|INIT_CONTAINER
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_DIAGNOSTICS_MSG
argument_list|,
name|UPDATE_DIAGNOSTICS_TRANSITION
argument_list|)
comment|// This transition may result when
comment|// we notify container of failed localization if localizer thread (for
comment|// that container) fails for some reason
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ContainerEventType
operator|.
name|RESOURCE_FAILED
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_SUCCESS
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_FAILURE
argument_list|)
argument_list|)
comment|// No transition - assuming container is on its way to completion
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_CONTAINER_TOKEN
argument_list|)
comment|// create the topology tables
operator|.
name|installTopology
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|StateMachine
argument_list|<
name|ContainerState
argument_list|,
name|ContainerEventType
argument_list|,
name|ContainerEvent
argument_list|>
DECL|field|stateMachine
name|stateMachine
decl_stmt|;
DECL|method|getCurrentState ()
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
name|getCurrentState
parameter_list|()
block|{
switch|switch
condition|(
name|stateMachine
operator|.
name|getCurrentState
argument_list|()
condition|)
block|{
case|case
name|NEW
case|:
case|case
name|LOCALIZING
case|:
case|case
name|LOCALIZATION_FAILED
case|:
case|case
name|SCHEDULED
case|:
case|case
name|PAUSED
case|:
case|case
name|RESUMING
case|:
case|case
name|RUNNING
case|:
case|case
name|RELAUNCHING
case|:
case|case
name|REINITIALIZING
case|:
case|case
name|REINITIALIZING_AWAITING_KILL
case|:
case|case
name|EXITED_WITH_SUCCESS
case|:
case|case
name|EXITED_WITH_FAILURE
case|:
case|case
name|KILLING
case|:
case|case
name|CONTAINER_CLEANEDUP_AFTER_KILL
case|:
case|case
name|CONTAINER_RESOURCES_CLEANINGUP
case|:
case|case
name|PAUSING
case|:
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|RUNNING
return|;
case|case
name|DONE
case|:
default|default:
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|COMPLETE
return|;
block|}
block|}
comment|// NOTE: Please update the doc in the ContainerSubState class as
comment|//       well as the yarn_protos.proto file if this mapping is ever modified.
DECL|method|getContainerSubState ()
specifier|private
name|ContainerSubState
name|getContainerSubState
parameter_list|()
block|{
switch|switch
condition|(
name|stateMachine
operator|.
name|getCurrentState
argument_list|()
condition|)
block|{
case|case
name|NEW
case|:
case|case
name|LOCALIZING
case|:
case|case
name|SCHEDULED
case|:
case|case
name|REINITIALIZING_AWAITING_KILL
case|:
case|case
name|RELAUNCHING
case|:
return|return
name|ContainerSubState
operator|.
name|SCHEDULED
return|;
case|case
name|REINITIALIZING
case|:
case|case
name|PAUSING
case|:
case|case
name|KILLING
case|:
case|case
name|RUNNING
case|:
return|return
name|ContainerSubState
operator|.
name|RUNNING
return|;
case|case
name|PAUSED
case|:
case|case
name|RESUMING
case|:
return|return
name|ContainerSubState
operator|.
name|PAUSED
return|;
case|case
name|LOCALIZATION_FAILED
case|:
case|case
name|EXITED_WITH_SUCCESS
case|:
case|case
name|EXITED_WITH_FAILURE
case|:
case|case
name|CONTAINER_CLEANEDUP_AFTER_KILL
case|:
case|case
name|CONTAINER_RESOURCES_CLEANINGUP
case|:
return|return
name|ContainerSubState
operator|.
name|COMPLETING
return|;
case|case
name|DONE
case|:
default|default:
return|return
name|ContainerSubState
operator|.
name|DONE
return|;
block|}
block|}
DECL|method|getNMTimelinePublisher ()
specifier|public
name|NMTimelinePublisher
name|getNMTimelinePublisher
parameter_list|()
block|{
return|return
name|context
operator|.
name|getNMTimelinePublisher
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|user
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getLocalizedResources ()
specifier|public
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getLocalizedResources
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|ContainerState
operator|.
name|SCHEDULED
operator|==
name|getContainerState
argument_list|()
operator|||
name|ContainerState
operator|.
name|RELAUNCHING
operator|==
name|getContainerState
argument_list|()
condition|)
block|{
return|return
name|resourceSet
operator|.
name|getLocalizedResources
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getCredentials ()
specifier|public
name|Credentials
name|getCredentials
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|credentials
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getContainerState ()
specifier|public
name|ContainerState
name|getContainerState
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|stateMachine
operator|.
name|getCurrentState
argument_list|()
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getLaunchContext ()
specifier|public
name|ContainerLaunchContext
name|getLaunchContext
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|launchContext
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|cloneAndGetContainerStatus ()
specifier|public
name|ContainerStatus
name|cloneAndGetContainerStatus
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ContainerStatus
name|status
init|=
name|BuilderUtils
operator|.
name|newContainerStatus
argument_list|(
name|this
operator|.
name|containerId
argument_list|,
name|getCurrentState
argument_list|()
argument_list|,
name|diagnostics
operator|.
name|toString
argument_list|()
argument_list|,
name|exitCode
argument_list|,
name|getResource
argument_list|()
argument_list|,
name|this
operator|.
name|containerTokenIdentifier
operator|.
name|getExecutionType
argument_list|()
argument_list|)
decl_stmt|;
name|status
operator|.
name|setIPs
argument_list|(
name|ips
operator|==
literal|null
condition|?
literal|null
else|:
name|Arrays
operator|.
name|asList
argument_list|(
name|ips
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|status
operator|.
name|setContainerSubState
argument_list|(
name|getContainerSubState
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNMContainerStatus ()
specifier|public
name|NMContainerStatus
name|getNMContainerStatus
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|NMContainerStatus
operator|.
name|newInstance
argument_list|(
name|this
operator|.
name|containerId
argument_list|,
name|this
operator|.
name|version
argument_list|,
name|getCurrentState
argument_list|()
argument_list|,
name|getResource
argument_list|()
argument_list|,
name|diagnostics
operator|.
name|toString
argument_list|()
argument_list|,
name|exitCode
argument_list|,
name|containerTokenIdentifier
operator|.
name|getPriority
argument_list|()
argument_list|,
name|containerTokenIdentifier
operator|.
name|getCreationTime
argument_list|()
argument_list|,
name|containerTokenIdentifier
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|,
name|containerTokenIdentifier
operator|.
name|getExecutionType
argument_list|()
argument_list|,
name|containerTokenIdentifier
operator|.
name|getAllocationRequestId
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getContainerId ()
specifier|public
name|ContainerId
name|getContainerId
parameter_list|()
block|{
return|return
name|this
operator|.
name|containerId
return|;
block|}
annotation|@
name|Override
DECL|method|getContainerStartTime ()
specifier|public
name|long
name|getContainerStartTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|startTime
return|;
block|}
annotation|@
name|Override
DECL|method|getResource ()
specifier|public
name|Resource
name|getResource
parameter_list|()
block|{
return|return
name|Resources
operator|.
name|clone
argument_list|(
name|this
operator|.
name|containerTokenIdentifier
operator|.
name|getResource
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getContainerTokenIdentifier ()
specifier|public
name|ContainerTokenIdentifier
name|getContainerTokenIdentifier
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|containerTokenIdentifier
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setContainerTokenIdentifier (ContainerTokenIdentifier token)
specifier|public
name|void
name|setContainerTokenIdentifier
parameter_list|(
name|ContainerTokenIdentifier
name|token
parameter_list|)
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|containerTokenIdentifier
operator|=
name|token
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getWorkDir ()
specifier|public
name|String
name|getWorkDir
parameter_list|()
block|{
return|return
name|workDir
return|;
block|}
annotation|@
name|Override
DECL|method|setWorkDir (String workDir)
specifier|public
name|void
name|setWorkDir
parameter_list|(
name|String
name|workDir
parameter_list|)
block|{
name|this
operator|.
name|workDir
operator|=
name|workDir
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setIpAndHost (String[] ipAndHost)
specifier|public
name|void
name|setIpAndHost
parameter_list|(
name|String
index|[]
name|ipAndHost
parameter_list|)
block|{
name|this
operator|.
name|ips
operator|=
name|ipAndHost
index|[
literal|0
index|]
expr_stmt|;
name|this
operator|.
name|host
operator|=
name|ipAndHost
index|[
literal|1
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLogDir ()
specifier|public
name|String
name|getLogDir
parameter_list|()
block|{
return|return
name|logDir
return|;
block|}
annotation|@
name|Override
DECL|method|setLogDir (String logDir)
specifier|public
name|void
name|setLogDir
parameter_list|(
name|String
name|logDir
parameter_list|)
block|{
name|this
operator|.
name|logDir
operator|=
name|logDir
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getResourceSet ()
specifier|public
name|ResourceSet
name|getResourceSet
parameter_list|()
block|{
return|return
name|this
operator|.
name|resourceSet
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|sendFinishedEvents ()
specifier|private
name|void
name|sendFinishedEvents
parameter_list|()
block|{
comment|// Inform the application
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|EventHandler
name|eventHandler
init|=
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
decl_stmt|;
name|ContainerStatus
name|containerStatus
init|=
name|cloneAndGetContainerStatus
argument_list|()
decl_stmt|;
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationContainerFinishedEvent
argument_list|(
name|containerStatus
argument_list|,
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
comment|// Tell the scheduler the container is Done
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|ContainerSchedulerEvent
argument_list|(
name|this
argument_list|,
name|ContainerSchedulerEventType
operator|.
name|CONTAINER_COMPLETED
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove the container from the resource-monitor
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|ContainerStopMonitoringEvent
argument_list|(
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
comment|// Tell the logService too
name|eventHandler
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerContainerFinishedEvent
argument_list|(
name|containerId
argument_list|,
name|containerTokenIdentifier
operator|.
name|getContainerType
argument_list|()
argument_list|,
name|exitCode
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dispatcher not typed
annotation|@
name|Override
DECL|method|sendLaunchEvent ()
specifier|public
name|void
name|sendLaunchEvent
parameter_list|()
block|{
if|if
condition|(
name|ContainerState
operator|.
name|PAUSED
operator|==
name|getContainerState
argument_list|()
condition|)
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerResumeEvent
argument_list|(
name|containerId
argument_list|,
literal|"Container Resumed as some resources freed up"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ContainersLauncherEventType
name|launcherEvent
init|=
name|ContainersLauncherEventType
operator|.
name|LAUNCH_CONTAINER
decl_stmt|;
if|if
condition|(
name|recoveredStatus
operator|==
name|RecoveredContainerStatus
operator|.
name|LAUNCHED
condition|)
block|{
comment|// try to recover a container that was previously launched
name|launcherEvent
operator|=
name|ContainersLauncherEventType
operator|.
name|RECOVER_CONTAINER
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|recoveredStatus
operator|==
name|RecoveredContainerStatus
operator|.
name|PAUSED
condition|)
block|{
name|launcherEvent
operator|=
name|ContainersLauncherEventType
operator|.
name|RECOVER_PAUSED_CONTAINER
expr_stmt|;
block|}
name|containerLaunchStartTime
operator|=
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainersLauncherEvent
argument_list|(
name|this
argument_list|,
name|launcherEvent
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dispatcher not typed
DECL|method|sendScheduleEvent ()
specifier|private
name|void
name|sendScheduleEvent
parameter_list|()
block|{
if|if
condition|(
name|recoveredStatus
operator|==
name|RecoveredContainerStatus
operator|.
name|PAUSED
condition|)
block|{
name|ContainersLauncherEventType
name|launcherEvent
decl_stmt|;
name|launcherEvent
operator|=
name|ContainersLauncherEventType
operator|.
name|RECOVER_PAUSED_CONTAINER
expr_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainersLauncherEvent
argument_list|(
name|this
argument_list|,
name|launcherEvent
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerSchedulerEvent
argument_list|(
name|this
argument_list|,
name|ContainerSchedulerEventType
operator|.
name|SCHEDULE_CONTAINER
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dispatcher not typed
annotation|@
name|Override
DECL|method|sendKillEvent (int exitStatus, String description)
specifier|public
name|void
name|sendKillEvent
parameter_list|(
name|int
name|exitStatus
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|isMarkeForKilling
operator|=
literal|true
expr_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerKillEvent
argument_list|(
name|containerId
argument_list|,
name|exitStatus
argument_list|,
name|description
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dispatcher not typed
annotation|@
name|Override
DECL|method|sendPauseEvent (String description)
specifier|public
name|void
name|sendPauseEvent
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerPauseEvent
argument_list|(
name|containerId
argument_list|,
name|description
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dispatcher not typed
DECL|method|sendRelaunchEvent ()
specifier|private
name|void
name|sendRelaunchEvent
parameter_list|()
block|{
name|ContainersLauncherEventType
name|launcherEvent
init|=
name|ContainersLauncherEventType
operator|.
name|RELAUNCH_CONTAINER
decl_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainersLauncherEvent
argument_list|(
name|this
argument_list|,
name|launcherEvent
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Inform the ContainersMonitor to start monitoring the container's
comment|// resource usage.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dispatcher not typed
DECL|method|sendContainerMonitorStartEvent ()
specifier|private
name|void
name|sendContainerMonitorStartEvent
parameter_list|()
block|{
name|long
name|launchDuration
init|=
name|clock
operator|.
name|getTime
argument_list|()
operator|-
name|containerLaunchStartTime
decl_stmt|;
name|metrics
operator|.
name|addContainerLaunchDuration
argument_list|(
name|launchDuration
argument_list|)
expr_stmt|;
name|long
name|pmemBytes
init|=
name|getResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
operator|*
literal|1024
operator|*
literal|1024L
decl_stmt|;
name|float
name|pmemRatio
init|=
name|daemonConf
operator|.
name|getFloat
argument_list|(
name|YarnConfiguration
operator|.
name|NM_VMEM_PMEM_RATIO
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_VMEM_PMEM_RATIO
argument_list|)
decl_stmt|;
name|long
name|vmemBytes
init|=
call|(
name|long
call|)
argument_list|(
name|pmemRatio
operator|*
name|pmemBytes
argument_list|)
decl_stmt|;
name|int
name|cpuVcores
init|=
name|getResource
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
decl_stmt|;
name|long
name|localizationDuration
init|=
name|containerLaunchStartTime
operator|-
name|containerLocalizationStartTime
decl_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerStartMonitoringEvent
argument_list|(
name|containerId
argument_list|,
name|vmemBytes
argument_list|,
name|pmemBytes
argument_list|,
name|cpuVcores
argument_list|,
name|launchDuration
argument_list|,
name|localizationDuration
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addDiagnostics (String... diags)
specifier|private
name|void
name|addDiagnostics
parameter_list|(
name|String
modifier|...
name|diags
parameter_list|)
block|{
for|for
control|(
name|String
name|s
range|:
name|diags
control|)
block|{
name|this
operator|.
name|diagnostics
operator|.
name|append
argument_list|(
literal|"["
operator|+
name|dateFormat
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
operator|+
literal|"]"
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|diagnostics
operator|.
name|length
argument_list|()
operator|>
name|diagnosticsMaxSize
condition|)
block|{
name|diagnostics
operator|.
name|delete
argument_list|(
literal|0
argument_list|,
name|diagnostics
operator|.
name|length
argument_list|()
operator|-
name|diagnosticsMaxSize
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|stateStore
operator|.
name|storeContainerDiagnostics
argument_list|(
name|containerId
argument_list|,
name|diagnostics
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to update diagnostics in state store for "
operator|+
name|containerId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dispatcher not typed
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|Map
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|rsrc
init|=
name|resourceSet
operator|.
name|getAllResourcesByVisibility
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationCleanupEvent
argument_list|(
name|this
argument_list|,
name|rsrc
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|ContainerTransition
specifier|static
class|class
name|ContainerTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
comment|// Just drain the event and change the state.
block|}
block|}
DECL|class|UpdateTransition
specifier|static
class|class
name|UpdateTransition
extends|extends
name|ContainerTransition
block|{
annotation|@
name|Override
DECL|method|transition ( ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|UpdateContainerTokenEvent
name|updateEvent
init|=
operator|(
name|UpdateContainerTokenEvent
operator|)
name|event
decl_stmt|;
comment|// Update the container token
name|container
operator|.
name|setContainerTokenIdentifier
argument_list|(
name|updateEvent
operator|.
name|getUpdatedToken
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Persist change in the state store.
name|container
operator|.
name|context
operator|.
name|getNMStateStore
argument_list|()
operator|.
name|storeContainerUpdateToken
argument_list|(
name|container
operator|.
name|containerId
argument_list|,
name|container
operator|.
name|getContainerTokenIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not store container ["
operator|+
name|container
operator|.
name|containerId
operator|+
literal|"] update.."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|NotifyContainerSchedulerOfUpdateTransition
specifier|static
class|class
name|NotifyContainerSchedulerOfUpdateTransition
extends|extends
name|UpdateTransition
block|{
annotation|@
name|Override
DECL|method|transition ( ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|UpdateContainerTokenEvent
name|updateEvent
init|=
operator|(
name|UpdateContainerTokenEvent
operator|)
name|event
decl_stmt|;
comment|// Save original token
name|ContainerTokenIdentifier
name|originalToken
init|=
name|container
operator|.
name|containerTokenIdentifier
decl_stmt|;
name|super
operator|.
name|transition
argument_list|(
name|container
argument_list|,
name|updateEvent
argument_list|)
expr_stmt|;
name|container
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|UpdateContainerSchedulerEvent
argument_list|(
name|container
argument_list|,
name|originalToken
argument_list|,
name|updateEvent
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * State transition when a NEW container receives the INIT_CONTAINER    * message.    *     * If there are resources to localize, sends a    * ContainerLocalizationRequest (LOCALIZE_CONTAINER_RESOURCES)    * to the ResourceLocalizationManager and enters LOCALIZING state.    *     * If there are no resources to localize, sends LAUNCH_CONTAINER event    * and enters SCHEDULED state directly.    *     * If there are any invalid resources specified, enters LOCALIZATION_FAILED    * directly.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dispatcher not typed
DECL|class|RequestResourcesTransition
specifier|static
class|class
name|RequestResourcesTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerEvent
argument_list|,
name|ContainerState
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|ContainerState
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|container
operator|.
name|recoveredStatus
operator|==
name|RecoveredContainerStatus
operator|.
name|COMPLETED
condition|)
block|{
name|container
operator|.
name|sendFinishedEvents
argument_list|()
expr_stmt|;
return|return
name|ContainerState
operator|.
name|DONE
return|;
block|}
elseif|else
if|if
condition|(
name|container
operator|.
name|recoveredStatus
operator|==
name|RecoveredContainerStatus
operator|.
name|QUEUED
condition|)
block|{
return|return
name|ContainerState
operator|.
name|SCHEDULED
return|;
block|}
elseif|else
if|if
condition|(
name|container
operator|.
name|recoveredAsKilled
operator|&&
name|container
operator|.
name|recoveredStatus
operator|==
name|RecoveredContainerStatus
operator|.
name|REQUESTED
condition|)
block|{
comment|// container was killed but never launched
name|container
operator|.
name|metrics
operator|.
name|killedContainer
argument_list|()
expr_stmt|;
name|NMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|container
operator|.
name|user
argument_list|,
name|AuditConstants
operator|.
name|FINISH_KILLED_CONTAINER
argument_list|,
literal|"ContainerImpl"
argument_list|,
name|container
operator|.
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|container
operator|.
name|containerId
argument_list|)
expr_stmt|;
name|container
operator|.
name|metrics
operator|.
name|releaseContainer
argument_list|(
name|container
operator|.
name|containerTokenIdentifier
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
name|container
operator|.
name|sendFinishedEvents
argument_list|()
expr_stmt|;
return|return
name|ContainerState
operator|.
name|DONE
return|;
block|}
specifier|final
name|ContainerLaunchContext
name|ctxt
init|=
name|container
operator|.
name|launchContext
decl_stmt|;
name|container
operator|.
name|metrics
operator|.
name|initingContainer
argument_list|()
expr_stmt|;
name|container
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|AuxServicesEvent
argument_list|(
name|AuxServicesEventType
operator|.
name|CONTAINER_INIT
argument_list|,
name|container
argument_list|)
argument_list|)
expr_stmt|;
comment|// Inform the AuxServices about the opaque serviceData
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|csd
init|=
name|ctxt
operator|.
name|getServiceData
argument_list|()
decl_stmt|;
if|if
condition|(
name|csd
operator|!=
literal|null
condition|)
block|{
comment|// This can happen more than once per Application as each container may
comment|// have distinct service data
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|service
range|:
name|csd
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|container
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|AuxServicesEvent
argument_list|(
name|AuxServicesEventType
operator|.
name|APPLICATION_INIT
argument_list|,
name|container
operator|.
name|user
argument_list|,
name|container
operator|.
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|service
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|service
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|container
operator|.
name|containerLocalizationStartTime
operator|=
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
comment|// Send requests for public, private resources
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|cntrRsrc
init|=
name|ctxt
operator|.
name|getLocalResources
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|cntrRsrc
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|Map
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|req
init|=
name|container
operator|.
name|resourceSet
operator|.
name|addResources
argument_list|(
name|ctxt
operator|.
name|getLocalResources
argument_list|()
argument_list|)
decl_stmt|;
name|container
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationRequestEvent
argument_list|(
name|container
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|// malformed resource; abort container launch
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to parse resource-request"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|container
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|container
operator|.
name|metrics
operator|.
name|endInitingContainer
argument_list|()
expr_stmt|;
return|return
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
return|;
block|}
return|return
name|ContainerState
operator|.
name|LOCALIZING
return|;
block|}
else|else
block|{
name|container
operator|.
name|sendScheduleEvent
argument_list|()
expr_stmt|;
name|container
operator|.
name|metrics
operator|.
name|endInitingContainer
argument_list|()
expr_stmt|;
return|return
name|ContainerState
operator|.
name|SCHEDULED
return|;
block|}
block|}
block|}
comment|/**    * Transition when one of the requested resources for this container    * has been successfully localized.    */
DECL|class|LocalizedTransition
specifier|static
class|class
name|LocalizedTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerEvent
argument_list|,
name|ContainerState
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|ContainerState
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|ContainerResourceLocalizedEvent
name|rsrcEvent
init|=
operator|(
name|ContainerResourceLocalizedEvent
operator|)
name|event
decl_stmt|;
name|LocalResourceRequest
name|resourceRequest
init|=
name|rsrcEvent
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|Path
name|location
init|=
name|rsrcEvent
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|syms
init|=
name|container
operator|.
name|resourceSet
operator|.
name|resourceLocalized
argument_list|(
name|resourceRequest
argument_list|,
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|syms
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Localized resource "
operator|+
name|resourceRequest
operator|+
literal|" for container "
operator|+
name|container
operator|.
name|containerId
argument_list|)
expr_stmt|;
return|return
name|ContainerState
operator|.
name|LOCALIZING
return|;
block|}
comment|// check to see if this resource should be uploaded to the shared cache
comment|// as well
if|if
condition|(
name|shouldBeUploadedToSharedCache
argument_list|(
name|container
argument_list|,
name|resourceRequest
argument_list|)
condition|)
block|{
name|container
operator|.
name|resourceSet
operator|.
name|getResourcesToBeUploaded
argument_list|()
operator|.
name|put
argument_list|(
name|resourceRequest
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|container
operator|.
name|resourceSet
operator|.
name|getPendingResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ContainerState
operator|.
name|LOCALIZING
return|;
block|}
name|container
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationEvent
argument_list|(
name|LocalizationEventType
operator|.
name|CONTAINER_RESOURCES_LOCALIZED
argument_list|,
name|container
argument_list|)
argument_list|)
expr_stmt|;
name|container
operator|.
name|sendScheduleEvent
argument_list|()
expr_stmt|;
name|container
operator|.
name|metrics
operator|.
name|endInitingContainer
argument_list|()
expr_stmt|;
comment|// If this is a recovered container that has already launched, skip
comment|// uploading resources to the shared cache. We do this to avoid uploading
comment|// the same resources multiple times. The tradeoff is that in the case of
comment|// a recovered container, there is a chance that resources don't get
comment|// uploaded into the shared cache. This is OK because resources are not
comment|// acknowledged by the SCM until they have been uploaded by the node
comment|// manager.
if|if
condition|(
name|container
operator|.
name|recoveredStatus
operator|!=
name|RecoveredContainerStatus
operator|.
name|LAUNCHED
operator|&&
name|container
operator|.
name|recoveredStatus
operator|!=
name|RecoveredContainerStatus
operator|.
name|COMPLETED
condition|)
block|{
comment|// kick off uploads to the shared cache
name|container
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|SharedCacheUploadEvent
argument_list|(
name|container
operator|.
name|resourceSet
operator|.
name|getResourcesToBeUploaded
argument_list|()
argument_list|,
name|container
operator|.
name|getLaunchContext
argument_list|()
argument_list|,
name|container
operator|.
name|getUser
argument_list|()
argument_list|,
name|SharedCacheUploadEventType
operator|.
name|UPLOAD
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ContainerState
operator|.
name|SCHEDULED
return|;
block|}
block|}
comment|/**    * Transition to start the Re-Initialization process.    */
DECL|class|ReInitializeContainerTransition
specifier|static
class|class
name|ReInitializeContainerTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerEvent
argument_list|,
name|ContainerState
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition ( ContainerImpl container, ContainerEvent event)
specifier|public
name|ContainerState
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|container
operator|.
name|reInitContext
operator|=
name|createReInitContext
argument_list|(
name|container
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|boolean
name|resourcesPresent
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// 'reInitContext.newResourceSet' can be
comment|// a) current container resourceSet (In case of Restart)
comment|// b) previous resourceSet (In case of RollBack)
comment|// c) An actual NEW resourceSet (In case of Upgrade/ReInit)
comment|//
comment|// In cases a) and b) Container can immediately be cleaned up since
comment|// we are sure the resources are already available (we check the
comment|// pendingResources to verify that nothing more is needed). So we can
comment|// kill the container immediately
name|ResourceSet
name|newResourceSet
init|=
name|container
operator|.
name|reInitContext
operator|.
name|newResourceSet
decl_stmt|;
if|if
condition|(
operator|!
name|newResourceSet
operator|.
name|getPendingResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|container
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationRequestEvent
argument_list|(
name|container
argument_list|,
name|newResourceSet
operator|.
name|getAllResourcesByVisibility
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We are not waiting on any resources, so...
comment|// Kill the current container.
name|container
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainersLauncherEvent
argument_list|(
name|container
argument_list|,
name|ContainersLauncherEventType
operator|.
name|CLEANUP_CONTAINER_FOR_REINIT
argument_list|)
argument_list|)
expr_stmt|;
name|resourcesPresent
operator|=
literal|true
expr_stmt|;
block|}
name|container
operator|.
name|metrics
operator|.
name|reInitingContainer
argument_list|()
expr_stmt|;
name|NMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|container
operator|.
name|user
argument_list|,
name|AuditConstants
operator|.
name|START_CONTAINER_REINIT
argument_list|,
literal|"ContainerImpl"
argument_list|,
name|container
operator|.
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|container
operator|.
name|containerId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Container ["
operator|+
name|container
operator|.
name|getContainerId
argument_list|()
operator|+
literal|"]"
operator|+
literal|" re-initialization failure.."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|container
operator|.
name|addDiagnostics
argument_list|(
literal|"Error re-initializing due to"
operator|+
literal|"["
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|ContainerState
operator|.
name|RUNNING
return|;
block|}
return|return
name|resourcesPresent
condition|?
name|ContainerState
operator|.
name|REINITIALIZING_AWAITING_KILL
else|:
name|ContainerState
operator|.
name|REINITIALIZING
return|;
block|}
DECL|method|createReInitContext ( ContainerImpl container, ContainerEvent event)
specifier|protected
name|ReInitializationContext
name|createReInitContext
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|ContainerReInitEvent
name|reInitEvent
init|=
operator|(
name|ContainerReInitEvent
operator|)
name|event
decl_stmt|;
if|if
condition|(
name|reInitEvent
operator|.
name|getReInitLaunchContext
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// This is a Restart...
comment|// We also need to make sure that if Rollback is possible, the
comment|// rollback state should be retained in the
comment|// oldLaunchContext and oldResourceSet
name|container
operator|.
name|addDiagnostics
argument_list|(
literal|"Container will be Restarted.\n"
argument_list|)
expr_stmt|;
return|return
operator|new
name|ReInitializationContext
argument_list|(
name|container
operator|.
name|launchContext
argument_list|,
name|container
operator|.
name|resourceSet
argument_list|,
name|container
operator|.
name|canRollback
argument_list|()
condition|?
name|container
operator|.
name|reInitContext
operator|.
name|oldLaunchContext
else|:
literal|null
argument_list|,
name|container
operator|.
name|canRollback
argument_list|()
condition|?
name|container
operator|.
name|reInitContext
operator|.
name|oldResourceSet
else|:
literal|null
argument_list|)
return|;
block|}
else|else
block|{
name|container
operator|.
name|addDiagnostics
argument_list|(
literal|"Container will be Re-initialized.\n"
argument_list|)
expr_stmt|;
return|return
operator|new
name|ReInitializationContext
argument_list|(
name|reInitEvent
operator|.
name|getReInitLaunchContext
argument_list|()
argument_list|,
name|reInitEvent
operator|.
name|getResourceSet
argument_list|()
argument_list|,
comment|// If AutoCommit is turned on, then no rollback can happen...
comment|// So don't need to store the previous context.
operator|(
name|reInitEvent
operator|.
name|isAutoCommit
argument_list|()
condition|?
literal|null
else|:
name|container
operator|.
name|launchContext
operator|)
argument_list|,
operator|(
name|reInitEvent
operator|.
name|isAutoCommit
argument_list|()
condition|?
literal|null
else|:
name|container
operator|.
name|resourceSet
operator|)
argument_list|)
return|;
block|}
block|}
block|}
comment|/**    * Transition to start the Rollback process.    */
DECL|class|RollbackContainerTransition
specifier|static
class|class
name|RollbackContainerTransition
extends|extends
name|ReInitializeContainerTransition
block|{
annotation|@
name|Override
DECL|method|createReInitContext (ContainerImpl container, ContainerEvent event)
specifier|protected
name|ReInitializationContext
name|createReInitContext
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|container
operator|.
name|addDiagnostics
argument_list|(
literal|"Container upgrade will be Rolled-back.\n"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Container ["
operator|+
name|container
operator|.
name|getContainerId
argument_list|()
operator|+
literal|"]"
operator|+
literal|" about to be explicitly Rolledback !!"
argument_list|)
expr_stmt|;
return|return
name|container
operator|.
name|reInitContext
operator|.
name|createContextForRollback
argument_list|()
return|;
block|}
block|}
comment|/**    * Resource requested for Container Re-initialization has been localized.    * If all dependencies are met, then restart Container with new bits.    */
DECL|class|ResourceLocalizedWhileReInitTransition
specifier|static
class|class
name|ResourceLocalizedWhileReInitTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerEvent
argument_list|,
name|ContainerState
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition ( ContainerImpl container, ContainerEvent event)
specifier|public
name|ContainerState
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|ContainerResourceLocalizedEvent
name|rsrcEvent
init|=
operator|(
name|ContainerResourceLocalizedEvent
operator|)
name|event
decl_stmt|;
name|container
operator|.
name|reInitContext
operator|.
name|newResourceSet
operator|.
name|resourceLocalized
argument_list|(
name|rsrcEvent
operator|.
name|getResource
argument_list|()
argument_list|,
name|rsrcEvent
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check if all ResourceLocalization has completed
if|if
condition|(
name|container
operator|.
name|reInitContext
operator|.
name|newResourceSet
operator|.
name|getPendingResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Kill the current container.
name|container
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainersLauncherEvent
argument_list|(
name|container
argument_list|,
name|ContainersLauncherEventType
operator|.
name|CLEANUP_CONTAINER_FOR_REINIT
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ContainerState
operator|.
name|REINITIALIZING_AWAITING_KILL
return|;
block|}
return|return
name|ContainerState
operator|.
name|REINITIALIZING
return|;
block|}
block|}
comment|/**    * Resource is localized while the container is running - create symlinks.    */
DECL|class|ResourceLocalizedWhileRunningTransition
specifier|static
class|class
name|ResourceLocalizedWhileRunningTransition
extends|extends
name|ContainerTransition
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|ContainerResourceLocalizedEvent
name|rsrcEvent
init|=
operator|(
name|ContainerResourceLocalizedEvent
operator|)
name|event
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|links
init|=
name|container
operator|.
name|resourceSet
operator|.
name|resourceLocalized
argument_list|(
name|rsrcEvent
operator|.
name|getResource
argument_list|()
argument_list|,
name|rsrcEvent
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|links
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// creating symlinks.
for|for
control|(
name|String
name|link
range|:
name|links
control|)
block|{
try|try
block|{
name|String
name|linkFile
init|=
operator|new
name|Path
argument_list|(
name|container
operator|.
name|workDir
argument_list|,
name|link
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|new
name|File
argument_list|(
name|linkFile
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Symlink file already exists: "
operator|+
name|linkFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|container
operator|.
name|context
operator|.
name|getContainerExecutor
argument_list|()
operator|.
name|symLink
argument_list|(
name|rsrcEvent
operator|.
name|getLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|linkFile
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created symlink: "
operator|+
name|linkFile
operator|+
literal|" -> "
operator|+
name|rsrcEvent
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Error when creating symlink %s -> %s"
argument_list|,
name|link
argument_list|,
name|rsrcEvent
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Resource localization failed while the container is running.    */
DECL|class|ResourceLocalizationFailedWhileRunningTransition
specifier|static
class|class
name|ResourceLocalizationFailedWhileRunningTransition
extends|extends
name|ContainerTransition
block|{
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|ContainerResourceFailedEvent
name|failedEvent
init|=
operator|(
name|ContainerResourceFailedEvent
operator|)
name|event
decl_stmt|;
name|container
operator|.
name|resourceSet
operator|.
name|resourceLocalizationFailed
argument_list|(
name|failedEvent
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
name|container
operator|.
name|addDiagnostics
argument_list|(
name|failedEvent
operator|.
name|getDiagnosticMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Resource localization failed while the container is reinitializing.    */
DECL|class|ResourceLocalizationFailedWhileReInitTransition
specifier|static
class|class
name|ResourceLocalizationFailedWhileReInitTransition
extends|extends
name|ContainerTransition
block|{
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|ContainerResourceFailedEvent
name|failedEvent
init|=
operator|(
name|ContainerResourceFailedEvent
operator|)
name|event
decl_stmt|;
name|container
operator|.
name|resourceSet
operator|.
name|resourceLocalizationFailed
argument_list|(
name|failedEvent
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
name|container
operator|.
name|addDiagnostics
argument_list|(
literal|"Container aborting re-initialization.. "
operator|+
name|failedEvent
operator|.
name|getDiagnosticMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Container ["
operator|+
name|container
operator|.
name|getContainerId
argument_list|()
operator|+
literal|"] Re-init"
operator|+
literal|" failed !! Resource ["
operator|+
name|failedEvent
operator|.
name|getResource
argument_list|()
operator|+
literal|"] could"
operator|+
literal|" not be localized !!"
argument_list|)
expr_stmt|;
name|container
operator|.
name|reInitContext
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Transition from SCHEDULED state to RUNNING state upon receiving    * a CONTAINER_LAUNCHED event.    */
DECL|class|LaunchTransition
specifier|static
class|class
name|LaunchTransition
extends|extends
name|ContainerTransition
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|container
operator|.
name|sendContainerMonitorStartEvent
argument_list|()
expr_stmt|;
name|container
operator|.
name|metrics
operator|.
name|runningContainer
argument_list|()
expr_stmt|;
name|container
operator|.
name|wasLaunched
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|container
operator|.
name|isReInitializing
argument_list|()
condition|)
block|{
name|NMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|container
operator|.
name|user
argument_list|,
name|AuditConstants
operator|.
name|FINISH_CONTAINER_REINIT
argument_list|,
literal|"ContainerImpl"
argument_list|,
name|container
operator|.
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|container
operator|.
name|containerId
argument_list|)
expr_stmt|;
block|}
name|container
operator|.
name|setIsReInitializing
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Check if this launch was due to a re-initialization.
comment|// If autocommit == true, then wipe the re-init context. This ensures
comment|// that any subsequent failures do not trigger a rollback.
if|if
condition|(
name|container
operator|.
name|reInitContext
operator|!=
literal|null
operator|&&
operator|!
name|container
operator|.
name|reInitContext
operator|.
name|canRollback
argument_list|()
condition|)
block|{
name|container
operator|.
name|reInitContext
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|container
operator|.
name|recoveredAsKilled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Killing "
operator|+
name|container
operator|.
name|containerId
operator|+
literal|" due to recovered as killed"
argument_list|)
expr_stmt|;
name|container
operator|.
name|addDiagnostics
argument_list|(
literal|"Container recovered as killed.\n"
argument_list|)
expr_stmt|;
name|container
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainersLauncherEvent
argument_list|(
name|container
argument_list|,
name|ContainersLauncherEventType
operator|.
name|CLEANUP_CONTAINER
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Transition from SCHEDULED state to PAUSED state on recovery    */
DECL|class|RecoveredContainerTransition
specifier|static
class|class
name|RecoveredContainerTransition
extends|extends
name|ContainerTransition
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|container
operator|.
name|sendContainerMonitorStartEvent
argument_list|()
expr_stmt|;
name|container
operator|.
name|wasLaunched
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**    * Transition from RUNNING or KILLING state to    * EXITED_WITH_SUCCESS state upon EXITED_WITH_SUCCESS message.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dispatcher not typed
DECL|class|ExitedWithSuccessTransition
specifier|static
class|class
name|ExitedWithSuccessTransition
extends|extends
name|ContainerTransition
block|{
DECL|field|clCleanupRequired
name|boolean
name|clCleanupRequired
decl_stmt|;
DECL|method|ExitedWithSuccessTransition (boolean clCleanupRequired)
specifier|public
name|ExitedWithSuccessTransition
parameter_list|(
name|boolean
name|clCleanupRequired
parameter_list|)
block|{
name|this
operator|.
name|clCleanupRequired
operator|=
name|clCleanupRequired
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|container
operator|.
name|setIsReInitializing
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Set exit code to 0 on success
name|container
operator|.
name|exitCode
operator|=
literal|0
expr_stmt|;
comment|// TODO: Add containerWorkDir to the deletion service.
if|if
condition|(
name|clCleanupRequired
condition|)
block|{
name|container
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainersLauncherEvent
argument_list|(
name|container
argument_list|,
name|ContainersLauncherEventType
operator|.
name|CLEANUP_CONTAINER
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|container
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Transition to EXITED_WITH_FAILURE state upon    * CONTAINER_EXITED_WITH_FAILURE state.    **/
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dispatcher not typed
DECL|class|ExitedWithFailureTransition
specifier|static
class|class
name|ExitedWithFailureTransition
extends|extends
name|ContainerTransition
block|{
DECL|field|clCleanupRequired
name|boolean
name|clCleanupRequired
decl_stmt|;
DECL|method|ExitedWithFailureTransition (boolean clCleanupRequired)
specifier|public
name|ExitedWithFailureTransition
parameter_list|(
name|boolean
name|clCleanupRequired
parameter_list|)
block|{
name|this
operator|.
name|clCleanupRequired
operator|=
name|clCleanupRequired
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|container
operator|.
name|setIsReInitializing
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ContainerExitEvent
name|exitEvent
init|=
operator|(
name|ContainerExitEvent
operator|)
name|event
decl_stmt|;
name|container
operator|.
name|exitCode
operator|=
name|exitEvent
operator|.
name|getExitCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|exitEvent
operator|.
name|getDiagnosticInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|container
operator|.
name|addDiagnostics
argument_list|(
name|exitEvent
operator|.
name|getDiagnosticInfo
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
comment|// TODO: Add containerWorkDir to the deletion service.
comment|// TODO: Add containerOuputDir to the deletion service.
if|if
condition|(
name|clCleanupRequired
condition|)
block|{
name|container
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainersLauncherEvent
argument_list|(
name|container
argument_list|,
name|ContainersLauncherEventType
operator|.
name|CLEANUP_CONTAINER
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|container
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Transition to EXITED_WITH_FAILURE or RELAUNCHING state upon    * CONTAINER_EXITED_WITH_FAILURE state.    **/
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dispatcher not typed
DECL|class|RetryFailureTransition
specifier|static
class|class
name|RetryFailureTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerEvent
argument_list|,
name|ContainerState
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (final ContainerImpl container, ContainerEvent event)
specifier|public
name|ContainerState
name|transition
parameter_list|(
specifier|final
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|ContainerExitEvent
name|exitEvent
init|=
operator|(
name|ContainerExitEvent
operator|)
name|event
decl_stmt|;
name|container
operator|.
name|exitCode
operator|=
name|exitEvent
operator|.
name|getExitCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|exitEvent
operator|.
name|getDiagnosticInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|container
operator|.
name|containerRetryContext
operator|.
name|getRetryPolicy
argument_list|()
operator|!=
name|ContainerRetryPolicy
operator|.
name|NEVER_RETRY
condition|)
block|{
name|int
name|n
init|=
name|container
operator|.
name|containerRetryContext
operator|.
name|getMaxRetries
argument_list|()
operator|-
name|container
operator|.
name|remainingRetryAttempts
decl_stmt|;
name|container
operator|.
name|addDiagnostics
argument_list|(
literal|"Diagnostic message from attempt "
operator|+
name|n
operator|+
literal|" : "
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|container
operator|.
name|addDiagnostics
argument_list|(
name|exitEvent
operator|.
name|getDiagnosticInfo
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|container
operator|.
name|shouldRetry
argument_list|(
name|container
operator|.
name|exitCode
argument_list|)
condition|)
block|{
if|if
condition|(
name|container
operator|.
name|remainingRetryAttempts
operator|>
literal|0
condition|)
block|{
name|container
operator|.
name|remainingRetryAttempts
operator|--
expr_stmt|;
try|try
block|{
name|container
operator|.
name|stateStore
operator|.
name|storeContainerRemainingRetryAttempts
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|container
operator|.
name|remainingRetryAttempts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to update remainingRetryAttempts in state store for "
operator|+
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|doRelaunch
argument_list|(
name|container
argument_list|,
name|container
operator|.
name|remainingRetryAttempts
argument_list|,
name|container
operator|.
name|containerRetryContext
operator|.
name|getRetryInterval
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ContainerState
operator|.
name|RELAUNCHING
return|;
block|}
elseif|else
if|if
condition|(
name|container
operator|.
name|canRollback
argument_list|()
condition|)
block|{
comment|// Rollback is possible only if the previous launch context is
comment|// available.
name|container
operator|.
name|addDiagnostics
argument_list|(
literal|"Container Re-init Auto Rolled-Back."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Rolling back Container reInitialization for ["
operator|+
name|container
operator|.
name|getContainerId
argument_list|()
operator|+
literal|"] !!"
argument_list|)
expr_stmt|;
name|container
operator|.
name|reInitContext
operator|=
name|container
operator|.
name|reInitContext
operator|.
name|createContextForRollback
argument_list|()
expr_stmt|;
name|container
operator|.
name|metrics
operator|.
name|rollbackContainerOnFailure
argument_list|()
expr_stmt|;
name|container
operator|.
name|metrics
operator|.
name|reInitingContainer
argument_list|()
expr_stmt|;
name|NMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|container
operator|.
name|user
argument_list|,
name|AuditConstants
operator|.
name|START_CONTAINER_REINIT
argument_list|,
literal|"ContainerImpl"
argument_list|,
name|container
operator|.
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|container
operator|.
name|containerId
argument_list|)
expr_stmt|;
operator|new
name|KilledForReInitializationTransition
argument_list|()
operator|.
name|transition
argument_list|(
name|container
argument_list|,
name|event
argument_list|)
expr_stmt|;
return|return
name|ContainerState
operator|.
name|SCHEDULED
return|;
block|}
else|else
block|{
operator|new
name|ExitedWithFailureTransition
argument_list|(
literal|true
argument_list|)
operator|.
name|transition
argument_list|(
name|container
argument_list|,
name|event
argument_list|)
expr_stmt|;
return|return
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
return|;
block|}
block|}
DECL|method|doRelaunch (final ContainerImpl container, int remainingRetryAttempts, final int retryInterval)
specifier|private
name|void
name|doRelaunch
parameter_list|(
specifier|final
name|ContainerImpl
name|container
parameter_list|,
name|int
name|remainingRetryAttempts
parameter_list|,
specifier|final
name|int
name|retryInterval
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Relaunching Container "
operator|+
name|container
operator|.
name|getContainerId
argument_list|()
operator|+
literal|". Remaining retry attempts(after relaunch) : "
operator|+
name|remainingRetryAttempts
operator|+
literal|". Interval between retries is "
operator|+
name|retryInterval
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
name|container
operator|.
name|wasLaunched
operator|=
literal|false
expr_stmt|;
name|container
operator|.
name|metrics
operator|.
name|endRunningContainer
argument_list|()
expr_stmt|;
if|if
condition|(
name|retryInterval
operator|==
literal|0
condition|)
block|{
name|container
operator|.
name|sendRelaunchEvent
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// wait for some time, then send launch event
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|retryInterval
argument_list|)
expr_stmt|;
name|container
operator|.
name|sendRelaunchEvent
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|isRetryContextSet ()
specifier|public
name|boolean
name|isRetryContextSet
parameter_list|()
block|{
return|return
name|containerRetryContext
operator|.
name|getRetryPolicy
argument_list|()
operator|!=
name|ContainerRetryPolicy
operator|.
name|NEVER_RETRY
return|;
block|}
annotation|@
name|Override
DECL|method|shouldRetry (int errorCode)
specifier|public
name|boolean
name|shouldRetry
parameter_list|(
name|int
name|errorCode
parameter_list|)
block|{
return|return
name|shouldRetry
argument_list|(
name|errorCode
argument_list|,
name|containerRetryContext
argument_list|,
name|remainingRetryAttempts
argument_list|)
return|;
block|}
DECL|method|shouldRetry (int errorCode, ContainerRetryContext retryContext, int remainingRetryAttempts)
specifier|public
specifier|static
name|boolean
name|shouldRetry
parameter_list|(
name|int
name|errorCode
parameter_list|,
name|ContainerRetryContext
name|retryContext
parameter_list|,
name|int
name|remainingRetryAttempts
parameter_list|)
block|{
if|if
condition|(
name|errorCode
operator|==
name|ExitCode
operator|.
name|SUCCESS
operator|.
name|getExitCode
argument_list|()
operator|||
name|errorCode
operator|==
name|ExitCode
operator|.
name|FORCE_KILLED
operator|.
name|getExitCode
argument_list|()
operator|||
name|errorCode
operator|==
name|ExitCode
operator|.
name|TERMINATED
operator|.
name|getExitCode
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ContainerRetryPolicy
name|retryPolicy
init|=
name|retryContext
operator|.
name|getRetryPolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|retryPolicy
operator|==
name|ContainerRetryPolicy
operator|.
name|RETRY_ON_ALL_ERRORS
operator|||
operator|(
name|retryPolicy
operator|==
name|ContainerRetryPolicy
operator|.
name|RETRY_ON_SPECIFIC_ERROR_CODES
operator|&&
name|retryContext
operator|.
name|getErrorCodes
argument_list|()
operator|!=
literal|null
operator|&&
name|retryContext
operator|.
name|getErrorCodes
argument_list|()
operator|.
name|contains
argument_list|(
name|errorCode
argument_list|)
operator|)
condition|)
block|{
return|return
name|remainingRetryAttempts
operator|>
literal|0
operator|||
name|remainingRetryAttempts
operator|==
name|ContainerRetryContext
operator|.
name|RETRY_FOREVER
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Transition to EXITED_WITH_FAILURE    */
DECL|class|KilledExternallyTransition
specifier|static
class|class
name|KilledExternallyTransition
extends|extends
name|ExitedWithFailureTransition
block|{
DECL|method|KilledExternallyTransition ()
name|KilledExternallyTransition
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|super
operator|.
name|transition
argument_list|(
name|container
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|container
operator|.
name|addDiagnostics
argument_list|(
literal|"Killed by external signal\n"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Transition to SCHEDULED and wait for RE-LAUNCH    */
DECL|class|KilledForReInitializationTransition
specifier|static
class|class
name|KilledForReInitializationTransition
extends|extends
name|ContainerTransition
block|{
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Relaunching Container ["
operator|+
name|container
operator|.
name|getContainerId
argument_list|()
operator|+
literal|"] for re-initialization !!"
argument_list|)
expr_stmt|;
name|container
operator|.
name|wasLaunched
operator|=
literal|false
expr_stmt|;
name|container
operator|.
name|metrics
operator|.
name|endRunningContainer
argument_list|()
expr_stmt|;
name|container
operator|.
name|launchContext
operator|=
name|container
operator|.
name|reInitContext
operator|.
name|newLaunchContext
expr_stmt|;
comment|// Re configure the Retry Context
name|container
operator|.
name|containerRetryContext
operator|=
name|configureRetryContext
argument_list|(
name|container
operator|.
name|context
operator|.
name|getConf
argument_list|()
argument_list|,
name|container
operator|.
name|launchContext
argument_list|,
name|container
operator|.
name|containerId
argument_list|)
expr_stmt|;
comment|// Reset the retry attempts since its a fresh start
name|container
operator|.
name|remainingRetryAttempts
operator|=
name|container
operator|.
name|containerRetryContext
operator|.
name|getMaxRetries
argument_list|()
expr_stmt|;
name|container
operator|.
name|resourceSet
operator|=
name|container
operator|.
name|reInitContext
operator|.
name|mergedResourceSet
argument_list|(
name|container
operator|.
name|resourceSet
argument_list|)
expr_stmt|;
name|container
operator|.
name|isMarkeForKilling
operator|=
literal|false
expr_stmt|;
comment|// Ensure Resources are decremented.
name|container
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerSchedulerEvent
argument_list|(
name|container
argument_list|,
name|ContainerSchedulerEventType
operator|.
name|CONTAINER_COMPLETED
argument_list|)
argument_list|)
expr_stmt|;
name|container
operator|.
name|sendScheduleEvent
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Transition from LOCALIZING to LOCALIZATION_FAILED upon receiving    * RESOURCE_FAILED event.    */
DECL|class|ResourceFailedTransition
specifier|static
class|class
name|ResourceFailedTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|ContainerResourceFailedEvent
name|rsrcFailedEvent
init|=
operator|(
name|ContainerResourceFailedEvent
operator|)
name|event
decl_stmt|;
name|container
operator|.
name|addDiagnostics
argument_list|(
name|rsrcFailedEvent
operator|.
name|getDiagnosticMessage
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
comment|// Inform the localizer to decrement reference counts and cleanup
comment|// resources.
name|container
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|container
operator|.
name|metrics
operator|.
name|endInitingContainer
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Transition from LOCALIZING to KILLING upon receiving    * KILL_CONTAINER event.    */
DECL|class|KillBeforeRunningTransition
specifier|static
class|class
name|KillBeforeRunningTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
comment|// Inform the localizer to decrement reference counts and cleanup
comment|// resources.
name|container
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|container
operator|.
name|metrics
operator|.
name|endInitingContainer
argument_list|()
expr_stmt|;
name|ContainerKillEvent
name|killEvent
init|=
operator|(
name|ContainerKillEvent
operator|)
name|event
decl_stmt|;
name|container
operator|.
name|exitCode
operator|=
name|killEvent
operator|.
name|getContainerExitStatus
argument_list|()
expr_stmt|;
name|container
operator|.
name|addDiagnostics
argument_list|(
name|killEvent
operator|.
name|getDiagnostic
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|container
operator|.
name|addDiagnostics
argument_list|(
literal|"Container is killed before being launched.\n"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Remain in KILLING state when receiving a RESOURCE_LOCALIZED request    * while in the process of killing.    */
DECL|class|LocalizedResourceDuringKillTransition
specifier|static
class|class
name|LocalizedResourceDuringKillTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|ContainerResourceLocalizedEvent
name|rsrcEvent
init|=
operator|(
name|ContainerResourceLocalizedEvent
operator|)
name|event
decl_stmt|;
name|container
operator|.
name|resourceSet
operator|.
name|resourceLocalized
argument_list|(
name|rsrcEvent
operator|.
name|getResource
argument_list|()
argument_list|,
name|rsrcEvent
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Transitions upon receiving KILL_CONTAINER.    * - SCHEDULED -> KILLING.    * - RUNNING -> KILLING.    * - REINITIALIZING -> KILLING.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dispatcher not typed
DECL|class|KillTransition
specifier|static
class|class
name|KillTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerEvent
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
comment|// Kill the process/process-grp
name|container
operator|.
name|setIsReInitializing
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|container
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainersLauncherEvent
argument_list|(
name|container
argument_list|,
name|ContainersLauncherEventType
operator|.
name|CLEANUP_CONTAINER
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerKillEvent
name|killEvent
init|=
operator|(
name|ContainerKillEvent
operator|)
name|event
decl_stmt|;
name|container
operator|.
name|addDiagnostics
argument_list|(
name|killEvent
operator|.
name|getDiagnostic
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|container
operator|.
name|exitCode
operator|=
name|killEvent
operator|.
name|getContainerExitStatus
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Transitions upon receiving PAUSE_CONTAINER.    * - LOCALIZED -> KILLING.    * - REINITIALIZING -> KILLING.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dispatcher not typed
DECL|class|KillOnPauseTransition
specifier|static
class|class
name|KillOnPauseTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerEvent
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
comment|// Kill the process/process-grp
name|container
operator|.
name|setIsReInitializing
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|container
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainersLauncherEvent
argument_list|(
name|container
argument_list|,
name|ContainersLauncherEventType
operator|.
name|CLEANUP_CONTAINER
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Transition from KILLING to CONTAINER_CLEANEDUP_AFTER_KILL    * upon receiving CONTAINER_KILLED_ON_REQUEST.    */
DECL|class|ContainerKilledTransition
specifier|static
class|class
name|ContainerKilledTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|ContainerExitEvent
name|exitEvent
init|=
operator|(
name|ContainerExitEvent
operator|)
name|event
decl_stmt|;
if|if
condition|(
name|container
operator|.
name|hasDefaultExitCode
argument_list|()
condition|)
block|{
name|container
operator|.
name|exitCode
operator|=
name|exitEvent
operator|.
name|getExitCode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|exitEvent
operator|.
name|getDiagnosticInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|container
operator|.
name|addDiagnostics
argument_list|(
name|exitEvent
operator|.
name|getDiagnosticInfo
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
comment|// The process/process-grp is killed. Decrement reference counts and
comment|// cleanup resources
name|container
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Handle the following transitions:    * - {LOCALIZATION_FAILED, EXITED_WITH_SUCCESS, EXITED_WITH_FAILURE,    *    KILLING, CONTAINER_CLEANEDUP_AFTER_KILL}    *   -> DONE upon CONTAINER_RESOURCES_CLEANEDUP    */
DECL|class|ContainerDoneTransition
specifier|static
class|class
name|ContainerDoneTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerEvent
argument_list|>
block|{
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|container
operator|.
name|metrics
operator|.
name|releaseContainer
argument_list|(
name|container
operator|.
name|containerTokenIdentifier
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|container
operator|.
name|containerMetrics
operator|!=
literal|null
condition|)
block|{
name|container
operator|.
name|containerMetrics
operator|.
name|recordFinishTimeAndExitCode
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
argument_list|,
name|container
operator|.
name|exitCode
argument_list|)
expr_stmt|;
name|container
operator|.
name|containerMetrics
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
name|container
operator|.
name|sendFinishedEvents
argument_list|()
expr_stmt|;
comment|// if the current state is NEW it means the CONTAINER_INIT was never
comment|// sent for the event, thus no need to send the CONTAINER_STOP
if|if
condition|(
name|container
operator|.
name|getCurrentState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|NEW
condition|)
block|{
name|container
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|AuxServicesEvent
argument_list|(
name|AuxServicesEventType
operator|.
name|CONTAINER_STOP
argument_list|,
name|container
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|container
operator|.
name|context
operator|.
name|getNodeStatusUpdater
argument_list|()
operator|.
name|sendOutofBandHeartBeat
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Handle the following transition:    * - NEW -> DONE upon KILL_CONTAINER    */
DECL|class|KillOnNewTransition
specifier|static
class|class
name|KillOnNewTransition
extends|extends
name|ContainerDoneTransition
block|{
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|container
operator|.
name|recoveredStatus
operator|==
name|RecoveredContainerStatus
operator|.
name|COMPLETED
condition|)
block|{
name|container
operator|.
name|sendFinishedEvents
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ContainerKillEvent
name|killEvent
init|=
operator|(
name|ContainerKillEvent
operator|)
name|event
decl_stmt|;
name|container
operator|.
name|exitCode
operator|=
name|killEvent
operator|.
name|getContainerExitStatus
argument_list|()
expr_stmt|;
name|container
operator|.
name|addDiagnostics
argument_list|(
name|killEvent
operator|.
name|getDiagnostic
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|container
operator|.
name|addDiagnostics
argument_list|(
literal|"Container is killed before being launched.\n"
argument_list|)
expr_stmt|;
name|container
operator|.
name|metrics
operator|.
name|killedContainer
argument_list|()
expr_stmt|;
name|NMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|container
operator|.
name|user
argument_list|,
name|AuditConstants
operator|.
name|FINISH_KILLED_CONTAINER
argument_list|,
literal|"ContainerImpl"
argument_list|,
name|container
operator|.
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|container
operator|.
name|containerId
argument_list|)
expr_stmt|;
name|super
operator|.
name|transition
argument_list|(
name|container
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Handle the following transition:    * - LOCALIZATION_FAILED -> DONE upon CONTAINER_RESOURCES_CLEANEDUP    */
DECL|class|LocalizationFailedToDoneTransition
specifier|static
class|class
name|LocalizationFailedToDoneTransition
extends|extends
name|ContainerDoneTransition
block|{
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|container
operator|.
name|metrics
operator|.
name|failedContainer
argument_list|()
expr_stmt|;
name|NMAuditLogger
operator|.
name|logFailure
argument_list|(
name|container
operator|.
name|user
argument_list|,
name|AuditConstants
operator|.
name|FINISH_FAILED_CONTAINER
argument_list|,
literal|"ContainerImpl"
argument_list|,
literal|"Container failed with state: "
operator|+
name|container
operator|.
name|getContainerState
argument_list|()
argument_list|,
name|container
operator|.
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|container
operator|.
name|containerId
argument_list|)
expr_stmt|;
name|super
operator|.
name|transition
argument_list|(
name|container
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Handle the following transition:    * - EXITED_WITH_SUCCESS -> DONE upon CONTAINER_RESOURCES_CLEANEDUP    */
DECL|class|ExitedWithSuccessToDoneTransition
specifier|static
class|class
name|ExitedWithSuccessToDoneTransition
extends|extends
name|ContainerDoneTransition
block|{
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|container
operator|.
name|wasLaunched
condition|)
block|{
name|container
operator|.
name|metrics
operator|.
name|endRunningContainer
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Container exited with success despite being killed and not"
operator|+
literal|"actually running"
argument_list|)
expr_stmt|;
block|}
name|container
operator|.
name|metrics
operator|.
name|completedContainer
argument_list|()
expr_stmt|;
name|NMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|container
operator|.
name|user
argument_list|,
name|AuditConstants
operator|.
name|FINISH_SUCCESS_CONTAINER
argument_list|,
literal|"ContainerImpl"
argument_list|,
name|container
operator|.
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|container
operator|.
name|containerId
argument_list|)
expr_stmt|;
name|super
operator|.
name|transition
argument_list|(
name|container
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Handle the following transition:    * - EXITED_WITH_FAILURE -> DONE upon CONTAINER_RESOURCES_CLEANEDUP    */
DECL|class|ExitedWithFailureToDoneTransition
specifier|static
class|class
name|ExitedWithFailureToDoneTransition
extends|extends
name|ContainerDoneTransition
block|{
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|container
operator|.
name|wasLaunched
condition|)
block|{
name|container
operator|.
name|metrics
operator|.
name|endRunningContainer
argument_list|()
expr_stmt|;
block|}
name|container
operator|.
name|metrics
operator|.
name|failedContainer
argument_list|()
expr_stmt|;
name|NMAuditLogger
operator|.
name|logFailure
argument_list|(
name|container
operator|.
name|user
argument_list|,
name|AuditConstants
operator|.
name|FINISH_FAILED_CONTAINER
argument_list|,
literal|"ContainerImpl"
argument_list|,
literal|"Container failed with state: "
operator|+
name|container
operator|.
name|getContainerState
argument_list|()
argument_list|,
name|container
operator|.
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|container
operator|.
name|containerId
argument_list|)
expr_stmt|;
name|super
operator|.
name|transition
argument_list|(
name|container
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Handle the following transition:    * - KILLING -> DONE upon CONTAINER_RESOURCES_CLEANEDUP    */
DECL|class|KillingToDoneTransition
specifier|static
class|class
name|KillingToDoneTransition
extends|extends
name|ContainerDoneTransition
block|{
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|container
operator|.
name|metrics
operator|.
name|killedContainer
argument_list|()
expr_stmt|;
name|NMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|container
operator|.
name|user
argument_list|,
name|AuditConstants
operator|.
name|FINISH_KILLED_CONTAINER
argument_list|,
literal|"ContainerImpl"
argument_list|,
name|container
operator|.
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|container
operator|.
name|containerId
argument_list|)
expr_stmt|;
name|super
operator|.
name|transition
argument_list|(
name|container
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Handle the following transition:    * CONTAINER_CLEANEDUP_AFTER_KILL -> DONE upon CONTAINER_RESOURCES_CLEANEDUP    */
DECL|class|ContainerCleanedupAfterKillToDoneTransition
specifier|static
class|class
name|ContainerCleanedupAfterKillToDoneTransition
extends|extends
name|ContainerDoneTransition
block|{
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|container
operator|.
name|wasLaunched
condition|)
block|{
name|container
operator|.
name|metrics
operator|.
name|endRunningContainer
argument_list|()
expr_stmt|;
block|}
name|container
operator|.
name|metrics
operator|.
name|killedContainer
argument_list|()
expr_stmt|;
name|NMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|container
operator|.
name|user
argument_list|,
name|AuditConstants
operator|.
name|FINISH_KILLED_CONTAINER
argument_list|,
literal|"ContainerImpl"
argument_list|,
name|container
operator|.
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|container
operator|.
name|containerId
argument_list|)
expr_stmt|;
name|super
operator|.
name|transition
argument_list|(
name|container
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Update diagnostics, staying in the same state.    */
DECL|class|ContainerDiagnosticsUpdateTransition
specifier|static
class|class
name|ContainerDiagnosticsUpdateTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|ContainerDiagnosticsUpdateEvent
name|updateEvent
init|=
operator|(
name|ContainerDiagnosticsUpdateEvent
operator|)
name|event
decl_stmt|;
name|container
operator|.
name|addDiagnostics
argument_list|(
name|updateEvent
operator|.
name|getDiagnosticsUpdate
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Transitions upon receiving PAUSE_CONTAINER.    * - RUNNING -> PAUSING    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dispatcher not typed
DECL|class|PauseContainerTransition
specifier|static
class|class
name|PauseContainerTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
comment|// Pause the process/process-grp if it is supported by the container
name|container
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainersLauncherEvent
argument_list|(
name|container
argument_list|,
name|ContainersLauncherEventType
operator|.
name|PAUSE_CONTAINER
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerPauseEvent
name|pauseEvent
init|=
operator|(
name|ContainerPauseEvent
operator|)
name|event
decl_stmt|;
name|container
operator|.
name|addDiagnostics
argument_list|(
name|pauseEvent
operator|.
name|getDiagnostic
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Transitions upon receiving PAUSED_CONTAINER.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dispatcher not typed
DECL|class|PausedContainerTransition
specifier|static
class|class
name|PausedContainerTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
comment|// Container was PAUSED so tell the scheduler
name|container
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerSchedulerEvent
argument_list|(
name|container
argument_list|,
name|ContainerSchedulerEventType
operator|.
name|CONTAINER_PAUSED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Transitions upon receiving RESUME_CONTAINER.    * - PAUSED -> RUNNING    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// dispatcher not typed
DECL|class|ResumeContainerTransition
specifier|static
class|class
name|ResumeContainerTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|ContainerImpl
argument_list|,
name|ContainerEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (ContainerImpl container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
comment|// Pause the process/process-grp if it is supported by the container
name|container
operator|.
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainersLauncherEvent
argument_list|(
name|container
argument_list|,
name|ContainersLauncherEventType
operator|.
name|RESUME_CONTAINER
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerResumeEvent
name|resumeEvent
init|=
operator|(
name|ContainerResumeEvent
operator|)
name|event
decl_stmt|;
name|container
operator|.
name|addDiagnostics
argument_list|(
name|resumeEvent
operator|.
name|getDiagnostic
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|handle (ContainerEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|ContainerEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|ContainerId
name|containerID
init|=
name|event
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processing "
operator|+
name|containerID
operator|+
literal|" of type "
operator|+
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ContainerState
name|oldState
init|=
name|stateMachine
operator|.
name|getCurrentState
argument_list|()
decl_stmt|;
name|ContainerState
name|newState
init|=
literal|null
decl_stmt|;
try|try
block|{
name|newState
operator|=
name|stateMachine
operator|.
name|doTransition
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidStateTransitionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can't handle this event at current state: Current: ["
operator|+
name|oldState
operator|+
literal|"], eventType: ["
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|"],"
operator|+
literal|" container: ["
operator|+
name|containerID
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newState
operator|!=
literal|null
operator|&&
name|oldState
operator|!=
name|newState
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Container "
operator|+
name|containerID
operator|+
literal|" transitioned from "
operator|+
name|oldState
operator|+
literal|" to "
operator|+
name|newState
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|containerId
operator|.
name|toString
argument_list|()
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|hasDefaultExitCode ()
specifier|private
name|boolean
name|hasDefaultExitCode
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|exitCode
operator|==
name|ContainerExitStatus
operator|.
name|INVALID
operator|)
return|;
block|}
comment|/**    * Returns whether the specific resource should be uploaded to the shared    * cache.    */
DECL|method|shouldBeUploadedToSharedCache (ContainerImpl container, LocalResourceRequest resource)
specifier|private
specifier|static
name|boolean
name|shouldBeUploadedToSharedCache
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|LocalResourceRequest
name|resource
parameter_list|)
block|{
return|return
name|container
operator|.
name|resourceSet
operator|.
name|getResourcesUploadPolicies
argument_list|()
operator|.
name|get
argument_list|(
name|resource
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getContainerRetryContext ()
name|ContainerRetryContext
name|getContainerRetryContext
parameter_list|()
block|{
return|return
name|containerRetryContext
return|;
block|}
annotation|@
name|Override
DECL|method|getPriority ()
specifier|public
name|Priority
name|getPriority
parameter_list|()
block|{
return|return
name|containerTokenIdentifier
operator|.
name|getPriority
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isRunning ()
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|getContainerState
argument_list|()
operator|==
name|ContainerState
operator|.
name|RUNNING
return|;
block|}
annotation|@
name|Override
DECL|method|setIsReInitializing (boolean isReInitializing)
specifier|public
name|void
name|setIsReInitializing
parameter_list|(
name|boolean
name|isReInitializing
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|isReInitializing
operator|&&
operator|!
name|isReInitializing
condition|)
block|{
name|metrics
operator|.
name|endReInitingContainer
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|isReInitializing
operator|=
name|isReInitializing
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isReInitializing ()
specifier|public
name|boolean
name|isReInitializing
parameter_list|()
block|{
return|return
name|this
operator|.
name|isReInitializing
return|;
block|}
annotation|@
name|Override
DECL|method|isMarkedForKilling ()
specifier|public
name|boolean
name|isMarkedForKilling
parameter_list|()
block|{
return|return
name|this
operator|.
name|isMarkeForKilling
return|;
block|}
annotation|@
name|Override
DECL|method|canRollback ()
specifier|public
name|boolean
name|canRollback
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|reInitContext
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|this
operator|.
name|reInitContext
operator|.
name|canRollback
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|commitUpgrade ()
specifier|public
name|void
name|commitUpgrade
parameter_list|()
block|{
name|this
operator|.
name|reInitContext
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isRecovering ()
specifier|public
name|boolean
name|isRecovering
parameter_list|()
block|{
name|boolean
name|isRecovering
init|=
operator|(
name|recoveredStatus
operator|!=
name|RecoveredContainerStatus
operator|.
name|REQUESTED
operator|&&
name|getContainerState
argument_list|()
operator|==
name|ContainerState
operator|.
name|NEW
operator|)
decl_stmt|;
return|return
name|isRecovering
return|;
block|}
comment|/**    * Get assigned resource mappings to the container.    *    * @return Resource Mappings of the container    */
annotation|@
name|Override
DECL|method|getResourceMappings ()
specifier|public
name|ResourceMappings
name|getResourceMappings
parameter_list|()
block|{
return|return
name|resourceMappings
return|;
block|}
block|}
end_class

end_unit

