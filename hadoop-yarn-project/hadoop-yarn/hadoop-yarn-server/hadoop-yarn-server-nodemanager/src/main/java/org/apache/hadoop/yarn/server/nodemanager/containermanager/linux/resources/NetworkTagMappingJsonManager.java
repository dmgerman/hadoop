begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * *  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements. See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership. The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License. You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  * /  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.resources
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonIgnore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_comment
comment|/**  * The NetworkTagMapping JsonManager implementation.  */
end_comment

begin_class
DECL|class|NetworkTagMappingJsonManager
specifier|public
class|class
name|NetworkTagMappingJsonManager
implements|implements
name|NetworkTagMappingManager
block|{
comment|/** Format of the classid that is to be used with the net_cls cgroup. Needs    * to be of the form 0xAAAABBBB */
DECL|field|FORMAT_NET_CLS_CLASS_ID
specifier|private
specifier|static
specifier|final
name|String
name|FORMAT_NET_CLS_CLASS_ID
init|=
literal|"0x[0-9]{8}"
decl_stmt|;
DECL|field|networkTagMapping
specifier|private
name|NetworkTagMapping
name|networkTagMapping
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|initialize (Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|mappingJsonFile
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NETWORK_TAG_MAPPING_FILE_PATH
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_NETWORK_RESOURCE_TAG_MAPPING_FILE_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappingJsonFile
operator|==
literal|null
operator|||
name|mappingJsonFile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"To use NetworkTagMappingJsonManager,"
operator|+
literal|" we have to set the configuration:"
operator|+
name|YarnConfiguration
operator|.
name|NM_NETWORK_TAG_MAPPING_FILE_PATH
argument_list|)
throw|;
block|}
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
try|try
block|{
name|networkTagMapping
operator|=
name|mapper
operator|.
name|readValue
argument_list|(
operator|new
name|File
argument_list|(
name|mappingJsonFile
argument_list|)
argument_list|,
name|NetworkTagMapping
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|networkTagMapping
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Fail to load the specific JSON file: "
operator|+
name|mappingJsonFile
argument_list|)
throw|;
block|}
name|networkTagMapping
operator|.
name|validateUsers
argument_list|()
expr_stmt|;
name|networkTagMapping
operator|.
name|validateGroups
argument_list|()
expr_stmt|;
name|networkTagMapping
operator|.
name|validateDefaultClass
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNetworkTagHexID (Container container)
specifier|public
name|String
name|getNetworkTagHexID
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
name|String
name|userNetworkTagID
init|=
name|this
operator|.
name|networkTagMapping
operator|.
name|getUserNetworkTagID
argument_list|(
name|container
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|userNetworkTagID
operator|!=
literal|null
condition|)
block|{
return|return
name|userNetworkTagID
return|;
block|}
name|UserGroupInformation
name|userUGI
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|container
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Group
argument_list|>
name|groups
init|=
name|this
operator|.
name|networkTagMapping
operator|.
name|getGroups
argument_list|()
decl_stmt|;
for|for
control|(
name|Group
name|group
range|:
name|groups
control|)
block|{
if|if
condition|(
name|userUGI
operator|.
name|getGroups
argument_list|()
operator|.
name|contains
argument_list|(
name|group
operator|.
name|getGroupName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|group
operator|.
name|getNetworkTagID
argument_list|()
return|;
block|}
block|}
return|return
name|this
operator|.
name|networkTagMapping
operator|.
name|getDefaultNetworkTagID
argument_list|()
return|;
block|}
comment|/**    * The NetworkTagMapping object.    *    */
annotation|@
name|VisibleForTesting
annotation|@
name|Private
DECL|class|NetworkTagMapping
specifier|public
specifier|static
class|class
name|NetworkTagMapping
block|{
annotation|@
name|JsonProperty
argument_list|(
literal|"users"
argument_list|)
DECL|field|users
specifier|private
name|List
argument_list|<
name|User
argument_list|>
name|users
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"groups"
argument_list|)
DECL|field|groups
specifier|private
name|List
argument_list|<
name|Group
argument_list|>
name|groups
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"default-network-tag-id"
argument_list|)
DECL|field|defaultNetworkTagID
specifier|private
name|String
name|defaultNetworkTagID
decl_stmt|;
annotation|@
name|JsonIgnore
DECL|field|pattern
specifier|private
specifier|final
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|FORMAT_NET_CLS_CLASS_ID
argument_list|)
decl_stmt|;
DECL|method|NetworkTagMapping ()
specifier|public
name|NetworkTagMapping
parameter_list|()
block|{}
DECL|method|getUsers ()
specifier|public
name|List
argument_list|<
name|User
argument_list|>
name|getUsers
parameter_list|()
block|{
return|return
name|this
operator|.
name|users
return|;
block|}
DECL|method|setUsers (List<User> users)
specifier|public
name|void
name|setUsers
parameter_list|(
name|List
argument_list|<
name|User
argument_list|>
name|users
parameter_list|)
block|{
name|this
operator|.
name|users
operator|=
name|users
expr_stmt|;
block|}
DECL|method|addUser (User user)
specifier|public
name|void
name|addUser
parameter_list|(
name|User
name|user
parameter_list|)
block|{
name|this
operator|.
name|users
operator|.
name|add
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
DECL|method|getUserNetworkTagID (String userName)
specifier|public
name|String
name|getUserNetworkTagID
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
for|for
control|(
name|User
name|user
range|:
name|users
control|)
block|{
if|if
condition|(
name|userName
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getUserName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|user
operator|.
name|getNetworkTagID
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getGroups ()
specifier|public
name|List
argument_list|<
name|Group
argument_list|>
name|getGroups
parameter_list|()
block|{
return|return
name|this
operator|.
name|groups
return|;
block|}
DECL|method|setGroups (List<Group> groups)
specifier|public
name|void
name|setGroups
parameter_list|(
name|List
argument_list|<
name|Group
argument_list|>
name|groups
parameter_list|)
block|{
name|this
operator|.
name|groups
operator|=
name|groups
expr_stmt|;
block|}
DECL|method|addGroup (Group group)
specifier|public
name|void
name|addGroup
parameter_list|(
name|Group
name|group
parameter_list|)
block|{
name|this
operator|.
name|groups
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
DECL|method|getDefaultNetworkTagID ()
specifier|public
name|String
name|getDefaultNetworkTagID
parameter_list|()
block|{
return|return
name|this
operator|.
name|defaultNetworkTagID
return|;
block|}
DECL|method|setDefaultNetworkTagID (String defaultNetworkTagID)
specifier|public
name|void
name|setDefaultNetworkTagID
parameter_list|(
name|String
name|defaultNetworkTagID
parameter_list|)
block|{
name|this
operator|.
name|defaultNetworkTagID
operator|=
name|defaultNetworkTagID
expr_stmt|;
block|}
DECL|method|containsUser (String user, List<User> userList)
specifier|private
name|boolean
name|containsUser
parameter_list|(
name|String
name|user
parameter_list|,
name|List
argument_list|<
name|User
argument_list|>
name|userList
parameter_list|)
block|{
for|for
control|(
name|User
name|existing
range|:
name|userList
control|)
block|{
if|if
condition|(
name|user
operator|.
name|equals
argument_list|(
name|existing
operator|.
name|getUserName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|containsGroup (String group, List<Group> groupList)
specifier|private
name|boolean
name|containsGroup
parameter_list|(
name|String
name|group
parameter_list|,
name|List
argument_list|<
name|Group
argument_list|>
name|groupList
parameter_list|)
block|{
for|for
control|(
name|Group
name|existing
range|:
name|groupList
control|)
block|{
if|if
condition|(
name|group
operator|.
name|equals
argument_list|(
name|existing
operator|.
name|getGroupName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|// Make sure that we do not have the duplicate user names.
comment|// If it exists, we would only keep the user name which is
comment|// set first.
comment|// Also, make sure the class_id set for the user match the
comment|// 0xAAAABBBB format
DECL|method|validateUsers ()
specifier|public
name|void
name|validateUsers
parameter_list|()
block|{
name|List
argument_list|<
name|User
argument_list|>
name|validateUsers
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|User
name|user
range|:
name|this
operator|.
name|users
control|)
block|{
name|Matcher
name|m
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|user
operator|.
name|getNetworkTagID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"User-network-tag-id mapping configuraton error. "
operator|+
literal|"The user:"
operator|+
name|user
operator|.
name|getUserName
argument_list|()
operator|+
literal|" 's configured network-tag-id:"
operator|+
name|user
operator|.
name|getNetworkTagID
argument_list|()
operator|+
literal|" does not match the '0xAAAABBBB' format."
argument_list|)
throw|;
block|}
name|String
index|[]
name|userSplits
init|=
name|user
operator|.
name|getUserName
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|userSplits
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|String
name|networkTagID
init|=
name|user
operator|.
name|getNetworkTagID
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|split
range|:
name|userSplits
control|)
block|{
if|if
condition|(
operator|!
name|containsUser
argument_list|(
name|split
operator|.
name|trim
argument_list|()
argument_list|,
name|validateUsers
argument_list|)
condition|)
block|{
name|User
name|addUsers
init|=
operator|new
name|User
argument_list|(
name|split
operator|.
name|trim
argument_list|()
argument_list|,
name|networkTagID
argument_list|)
decl_stmt|;
name|validateUsers
operator|.
name|add
argument_list|(
name|addUsers
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|containsUser
argument_list|(
name|user
operator|.
name|getUserName
argument_list|()
argument_list|,
name|validateUsers
argument_list|)
condition|)
block|{
name|validateUsers
operator|.
name|add
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|this
operator|.
name|users
operator|=
name|validateUsers
expr_stmt|;
block|}
comment|// Make sure that we do not have the duplicate group names.
comment|// If it exists, we would only keep the group name which is
comment|// set first.
comment|// Also, make sure the class_id set for the group match the
comment|// 0xAAAABBBB format
DECL|method|validateGroups ()
specifier|public
name|void
name|validateGroups
parameter_list|()
block|{
name|List
argument_list|<
name|Group
argument_list|>
name|validateGroups
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Group
name|group
range|:
name|this
operator|.
name|groups
control|)
block|{
if|if
condition|(
operator|!
name|containsGroup
argument_list|(
name|group
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|validateGroups
argument_list|)
condition|)
block|{
name|Matcher
name|m
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|group
operator|.
name|getNetworkTagID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Group-network-tag-id mapping configuraton error. "
operator|+
literal|"The group:"
operator|+
name|group
operator|.
name|getGroupName
argument_list|()
operator|+
literal|" 's configured network-tag-id:"
operator|+
name|group
operator|.
name|getNetworkTagID
argument_list|()
operator|+
literal|" does not match the '0xAAAABBBB' format."
argument_list|)
throw|;
block|}
name|validateGroups
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|groups
operator|=
name|validateGroups
expr_stmt|;
block|}
comment|// make sure that we set the value for default-network-tag-id.
comment|// Also, make sure the default class id match the
comment|// 0xAAAABBBB format
DECL|method|validateDefaultClass ()
specifier|public
name|void
name|validateDefaultClass
parameter_list|()
block|{
if|if
condition|(
name|getDefaultNetworkTagID
argument_list|()
operator|==
literal|null
operator|||
name|getDefaultNetworkTagID
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Missing value for defaultNetworkTagID."
operator|+
literal|" We have to set non-empty value for defaultNetworkTagID"
argument_list|)
throw|;
block|}
name|Matcher
name|m
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|getDefaultNetworkTagID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Configuration error on "
operator|+
literal|"default-network-tag-id. The configured default-network-tag-id:"
operator|+
name|getDefaultNetworkTagID
argument_list|()
operator|+
literal|" does not match the '0xAAAABBBB' format."
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * The user object.    *    */
annotation|@
name|VisibleForTesting
annotation|@
name|Private
DECL|class|User
specifier|public
specifier|static
class|class
name|User
block|{
annotation|@
name|JsonProperty
argument_list|(
literal|"name"
argument_list|)
DECL|field|userName
specifier|private
name|String
name|userName
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"network-tag-id"
argument_list|)
DECL|field|networkTagID
specifier|private
name|String
name|networkTagID
decl_stmt|;
DECL|method|User ()
specifier|public
name|User
parameter_list|()
block|{}
DECL|method|User (String userName, String networkTagID)
specifier|public
name|User
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|networkTagID
parameter_list|)
block|{
name|this
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|this
operator|.
name|setNetworkTagID
argument_list|(
name|networkTagID
argument_list|)
expr_stmt|;
block|}
DECL|method|getUserName ()
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|userName
return|;
block|}
DECL|method|setUserName (String userName)
specifier|public
name|void
name|setUserName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
block|}
DECL|method|getNetworkTagID ()
specifier|public
name|String
name|getNetworkTagID
parameter_list|()
block|{
return|return
name|networkTagID
return|;
block|}
DECL|method|setNetworkTagID (String networkTagID)
specifier|public
name|void
name|setNetworkTagID
parameter_list|(
name|String
name|networkTagID
parameter_list|)
block|{
name|this
operator|.
name|networkTagID
operator|=
name|networkTagID
expr_stmt|;
block|}
block|}
comment|/**    * The group object.    *    */
annotation|@
name|VisibleForTesting
annotation|@
name|Private
DECL|class|Group
specifier|public
specifier|static
class|class
name|Group
block|{
annotation|@
name|JsonProperty
argument_list|(
literal|"name"
argument_list|)
DECL|field|groupName
specifier|private
name|String
name|groupName
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"network-tag-id"
argument_list|)
DECL|field|networkTagID
specifier|private
name|String
name|networkTagID
decl_stmt|;
DECL|method|Group ()
specifier|public
name|Group
parameter_list|()
block|{}
DECL|method|getGroupName ()
specifier|public
name|String
name|getGroupName
parameter_list|()
block|{
return|return
name|groupName
return|;
block|}
DECL|method|setGroupName (String groupName)
specifier|public
name|void
name|setGroupName
parameter_list|(
name|String
name|groupName
parameter_list|)
block|{
name|this
operator|.
name|groupName
operator|=
name|groupName
expr_stmt|;
block|}
DECL|method|getNetworkTagID ()
specifier|public
name|String
name|getNetworkTagID
parameter_list|()
block|{
return|return
name|networkTagID
return|;
block|}
DECL|method|setNetworkTagID (String networkTagID)
specifier|public
name|void
name|setNetworkTagID
parameter_list|(
name|String
name|networkTagID
parameter_list|)
block|{
name|this
operator|.
name|networkTagID
operator|=
name|networkTagID
expr_stmt|;
block|}
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|getNetworkTagMapping ()
specifier|public
name|NetworkTagMapping
name|getNetworkTagMapping
parameter_list|()
block|{
return|return
name|this
operator|.
name|networkTagMapping
return|;
block|}
block|}
end_class

end_unit

