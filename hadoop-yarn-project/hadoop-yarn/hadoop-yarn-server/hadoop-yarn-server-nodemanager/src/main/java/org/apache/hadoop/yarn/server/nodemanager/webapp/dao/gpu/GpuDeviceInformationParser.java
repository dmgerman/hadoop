begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.webapp.dao.gpu
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|gpu
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_comment
comment|/**  * Parse XML and get GPU device information  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|GpuDeviceInformationParser
specifier|public
class|class
name|GpuDeviceInformationParser
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GpuDeviceInformationParser
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|unmarshaller
specifier|private
name|Unmarshaller
name|unmarshaller
init|=
literal|null
decl_stmt|;
DECL|field|xmlReader
specifier|private
name|XMLReader
name|xmlReader
init|=
literal|null
decl_stmt|;
DECL|method|init ()
specifier|private
name|void
name|init
parameter_list|()
throws|throws
name|SAXException
throws|,
name|ParserConfigurationException
throws|,
name|JAXBException
block|{
name|SAXParserFactory
name|spf
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|// Disable external-dtd since by default nvidia-smi output contains
comment|//<!DOCTYPE nvidia_smi_log SYSTEM "nvsmi_device_v8.dtd"> in header
name|spf
operator|.
name|setFeature
argument_list|(
literal|"http://apache.org/xml/features/nonvalidating/load-external-dtd"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|spf
operator|.
name|setFeature
argument_list|(
literal|"http://xml.org/sax/features/validation"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|JAXBContext
name|jaxbContext
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|GpuDeviceInformation
operator|.
name|class
argument_list|)
decl_stmt|;
name|this
operator|.
name|xmlReader
operator|=
name|spf
operator|.
name|newSAXParser
argument_list|()
operator|.
name|getXMLReader
argument_list|()
expr_stmt|;
name|this
operator|.
name|unmarshaller
operator|=
name|jaxbContext
operator|.
name|createUnmarshaller
argument_list|()
expr_stmt|;
block|}
DECL|method|parseXml (String xmlContent)
specifier|public
specifier|synchronized
name|GpuDeviceInformation
name|parseXml
parameter_list|(
name|String
name|xmlContent
parameter_list|)
throws|throws
name|YarnException
block|{
if|if
condition|(
name|unmarshaller
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|init
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
decl||
name|ParserConfigurationException
decl||
name|JAXBException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while initialize parser"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|InputSource
name|inputSource
init|=
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xmlContent
argument_list|)
argument_list|)
decl_stmt|;
name|SAXSource
name|source
init|=
operator|new
name|SAXSource
argument_list|(
name|xmlReader
argument_list|,
name|inputSource
argument_list|)
decl_stmt|;
try|try
block|{
return|return
operator|(
name|GpuDeviceInformation
operator|)
name|unmarshaller
operator|.
name|unmarshal
argument_list|(
name|source
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while parsing xml"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

