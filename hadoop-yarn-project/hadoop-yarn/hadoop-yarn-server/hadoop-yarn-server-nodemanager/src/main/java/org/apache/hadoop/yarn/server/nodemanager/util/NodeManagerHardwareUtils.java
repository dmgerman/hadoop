begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ResourceCalculatorPlugin
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|NodeManagerHardwareUtils
specifier|public
class|class
name|NodeManagerHardwareUtils
block|{
comment|/**    *    * Returns the fraction of CPU cores that should be used for YARN containers.    * The number is derived based on various configuration params such as    * YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT    *    * @param conf    *          - Configuration object    * @return Fraction of CPU cores to be used for YARN containers    */
DECL|method|getContainersCores (Configuration conf)
specifier|public
specifier|static
name|float
name|getContainersCores
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|ResourceCalculatorPlugin
name|plugin
init|=
name|ResourceCalculatorPlugin
operator|.
name|getResourceCalculatorPlugin
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
return|return
name|NodeManagerHardwareUtils
operator|.
name|getContainersCores
argument_list|(
name|plugin
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    *    * Returns the fraction of CPU cores that should be used for YARN containers.    * The number is derived based on various configuration params such as    * YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT    *    * @param plugin    *          - ResourceCalculatorPlugin object to determine hardware specs    * @param conf    *          - Configuration object    * @return Fraction of CPU cores to be used for YARN containers    */
DECL|method|getContainersCores (ResourceCalculatorPlugin plugin, Configuration conf)
specifier|public
specifier|static
name|float
name|getContainersCores
parameter_list|(
name|ResourceCalculatorPlugin
name|plugin
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|int
name|numProcessors
init|=
name|plugin
operator|.
name|getNumProcessors
argument_list|()
decl_stmt|;
name|int
name|nodeCpuPercentage
init|=
name|Math
operator|.
name|min
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT
argument_list|)
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|nodeCpuPercentage
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|nodeCpuPercentage
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeCpuPercentage
operator|==
literal|0
condition|)
block|{
name|String
name|message
init|=
literal|"Illegal value for "
operator|+
name|YarnConfiguration
operator|.
name|NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT
operator|+
literal|". Value cannot be less than or equal to 0."
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
return|return
operator|(
name|nodeCpuPercentage
operator|*
name|numProcessors
operator|)
operator|/
literal|100.0f
return|;
block|}
block|}
end_class

end_unit

