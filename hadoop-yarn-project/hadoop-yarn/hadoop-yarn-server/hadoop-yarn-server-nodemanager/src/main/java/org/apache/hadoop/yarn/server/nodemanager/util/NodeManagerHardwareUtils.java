begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ResourceCalculatorPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Helper class to determine hardware related characteristics such as the  * number of processors and the amount of memory on the node.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|NodeManagerHardwareUtils
specifier|public
class|class
name|NodeManagerHardwareUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NodeManagerHardwareUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|isHardwareDetectionEnabled (Configuration conf)
specifier|private
specifier|static
name|boolean
name|isHardwareDetectionEnabled
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_ENABLE_HARDWARE_CAPABILITY_DETECTION
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_ENABLE_HARDWARE_CAPABILITY_DETECTION
argument_list|)
return|;
block|}
comment|/**    *    * Returns the number of CPUs on the node. This value depends on the    * configuration setting which decides whether to count logical processors    * (such as hyperthreads) as cores or not.    *    * @param conf    *          - Configuration object    * @return Number of CPUs    */
DECL|method|getNodeCPUs (Configuration conf)
specifier|public
specifier|static
name|int
name|getNodeCPUs
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|ResourceCalculatorPlugin
name|plugin
init|=
name|ResourceCalculatorPlugin
operator|.
name|getResourceCalculatorPlugin
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
return|return
name|NodeManagerHardwareUtils
operator|.
name|getNodeCPUs
argument_list|(
name|plugin
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    *    * Returns the number of CPUs on the node. This value depends on the    * configuration setting which decides whether to count logical processors    * (such as hyperthreads) as cores or not.    *    * @param plugin    *          - ResourceCalculatorPlugin object to determine hardware specs    * @param conf    *          - Configuration object    * @return Number of CPU cores on the node.    */
DECL|method|getNodeCPUs (ResourceCalculatorPlugin plugin, Configuration conf)
specifier|public
specifier|static
name|int
name|getNodeCPUs
parameter_list|(
name|ResourceCalculatorPlugin
name|plugin
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|int
name|numProcessors
init|=
name|plugin
operator|.
name|getNumProcessors
argument_list|()
decl_stmt|;
name|boolean
name|countLogicalCores
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_COUNT_LOGICAL_PROCESSORS_AS_CORES
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_COUNT_LOGICAL_PROCESSORS_AS_CORES
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|countLogicalCores
condition|)
block|{
name|numProcessors
operator|=
name|plugin
operator|.
name|getNumCores
argument_list|()
expr_stmt|;
block|}
return|return
name|numProcessors
return|;
block|}
comment|/**    *    * Returns the fraction of CPUs that should be used for YARN containers.    * The number is derived based on various configuration params such as    * YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT    *    * @param conf    *          - Configuration object    * @return Fraction of CPUs to be used for YARN containers    */
DECL|method|getContainersCPUs (Configuration conf)
specifier|public
specifier|static
name|float
name|getContainersCPUs
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|ResourceCalculatorPlugin
name|plugin
init|=
name|ResourceCalculatorPlugin
operator|.
name|getResourceCalculatorPlugin
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
return|return
name|NodeManagerHardwareUtils
operator|.
name|getContainersCPUs
argument_list|(
name|plugin
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    *    * Returns the fraction of CPUs that should be used for YARN containers.    * The number is derived based on various configuration params such as    * YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT    *    * @param plugin    *          - ResourceCalculatorPlugin object to determine hardware specs    * @param conf    *          - Configuration object    * @return Fraction of CPUs to be used for YARN containers    */
DECL|method|getContainersCPUs (ResourceCalculatorPlugin plugin, Configuration conf)
specifier|public
specifier|static
name|float
name|getContainersCPUs
parameter_list|(
name|ResourceCalculatorPlugin
name|plugin
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|int
name|numProcessors
init|=
name|getNodeCPUs
argument_list|(
name|plugin
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|int
name|nodeCpuPercentage
init|=
name|getNodeCpuPercentage
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
operator|(
name|nodeCpuPercentage
operator|*
name|numProcessors
operator|)
operator|/
literal|100.0f
return|;
block|}
comment|/**    * Gets the percentage of physical CPU that is configured for YARN containers.    * This is percent {@literal>} 0 and {@literal<=} 100 based on    * {@link YarnConfiguration#NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT}    * @param conf Configuration object    * @return percent {@literal>} 0 and {@literal<=} 100    */
DECL|method|getNodeCpuPercentage (Configuration conf)
specifier|public
specifier|static
name|int
name|getNodeCpuPercentage
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|int
name|nodeCpuPercentage
init|=
name|Math
operator|.
name|min
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT
argument_list|)
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|nodeCpuPercentage
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|nodeCpuPercentage
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeCpuPercentage
operator|==
literal|0
condition|)
block|{
name|String
name|message
init|=
literal|"Illegal value for "
operator|+
name|YarnConfiguration
operator|.
name|NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT
operator|+
literal|". Value cannot be less than or equal to 0."
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
return|return
name|nodeCpuPercentage
return|;
block|}
DECL|method|getConfiguredVCores (Configuration conf)
specifier|private
specifier|static
name|int
name|getConfiguredVCores
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|int
name|cores
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_VCORES
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_VCORES
argument_list|)
decl_stmt|;
if|if
condition|(
name|cores
operator|==
operator|-
literal|1
condition|)
block|{
name|cores
operator|=
name|YarnConfiguration
operator|.
name|DEFAULT_NM_VCORES
expr_stmt|;
block|}
return|return
name|cores
return|;
block|}
comment|/**    * Function to return the number of vcores on the system that can be used for    * YARN containers. If a number is specified in the configuration file, then    * that number is returned. If nothing is specified - 1. If the OS is an    * "unknown" OS(one for which we don't have ResourceCalculatorPlugin    * implemented), return the default NodeManager cores. 2. If the config    * variable yarn.nodemanager.cpu.use_logical_processors is set to true, it    * returns the logical processor count(count hyperthreads as cores), else it    * returns the physical cores count.    *    * @param conf    *          - the configuration for the NodeManager    * @return the number of cores to be used for YARN containers    *    */
DECL|method|getVCores (Configuration conf)
specifier|public
specifier|static
name|int
name|getVCores
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isHardwareDetectionEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
return|return
name|getConfiguredVCores
argument_list|(
name|conf
argument_list|)
return|;
block|}
comment|// is this os for which we can determine cores?
name|ResourceCalculatorPlugin
name|plugin
init|=
name|ResourceCalculatorPlugin
operator|.
name|getResourceCalculatorPlugin
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|plugin
operator|==
literal|null
condition|)
block|{
return|return
name|getConfiguredVCores
argument_list|(
name|conf
argument_list|)
return|;
block|}
return|return
name|getVCoresInternal
argument_list|(
name|plugin
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    * Function to return the number of vcores on the system that can be used for    * YARN containers. If a number is specified in the configuration file, then    * that number is returned. If nothing is specified - 1. If the OS is an    * "unknown" OS(one for which we don't have ResourceCalculatorPlugin    * implemented), return the default NodeManager cores. 2. If the config    * variable yarn.nodemanager.cpu.use_logical_processors is set to true, it    * returns the logical processor count(count hyperthreads as cores), else it    * returns the physical cores count.    *    * @param plugin    *          - ResourceCalculatorPlugin object to determine hardware specs    * @param conf    *          - the configuration for the NodeManager    * @return the number of cores to be used for YARN containers    *    */
DECL|method|getVCores (ResourceCalculatorPlugin plugin, Configuration conf)
specifier|public
specifier|static
name|int
name|getVCores
parameter_list|(
name|ResourceCalculatorPlugin
name|plugin
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isHardwareDetectionEnabled
argument_list|(
name|conf
argument_list|)
operator|||
name|plugin
operator|==
literal|null
condition|)
block|{
return|return
name|getConfiguredVCores
argument_list|(
name|conf
argument_list|)
return|;
block|}
return|return
name|getVCoresInternal
argument_list|(
name|plugin
argument_list|,
name|conf
argument_list|)
return|;
block|}
DECL|method|getVCoresInternal (ResourceCalculatorPlugin plugin, Configuration conf)
specifier|private
specifier|static
name|int
name|getVCoresInternal
parameter_list|(
name|ResourceCalculatorPlugin
name|plugin
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|message
decl_stmt|;
name|int
name|cores
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_VCORES
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|cores
operator|==
operator|-
literal|1
condition|)
block|{
name|float
name|physicalCores
init|=
name|NodeManagerHardwareUtils
operator|.
name|getContainersCPUs
argument_list|(
name|plugin
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|float
name|multiplier
init|=
name|conf
operator|.
name|getFloat
argument_list|(
name|YarnConfiguration
operator|.
name|NM_PCORES_VCORES_MULTIPLIER
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_PCORES_VCORES_MULTIPLIER
argument_list|)
decl_stmt|;
if|if
condition|(
name|multiplier
operator|>
literal|0
condition|)
block|{
name|float
name|tmp
init|=
name|physicalCores
operator|*
name|multiplier
decl_stmt|;
if|if
condition|(
name|tmp
operator|>
literal|0
operator|&&
name|tmp
operator|<
literal|1
condition|)
block|{
comment|// on a single core machine - tmp can be between 0 and 1
name|cores
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|cores
operator|=
operator|(
name|int
operator|)
name|tmp
expr_stmt|;
block|}
block|}
else|else
block|{
name|message
operator|=
literal|"Illegal value for "
operator|+
name|YarnConfiguration
operator|.
name|NM_PCORES_VCORES_MULTIPLIER
operator|+
literal|". Value must be greater than 0."
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|cores
operator|<=
literal|0
condition|)
block|{
name|message
operator|=
literal|"Illegal value for "
operator|+
name|YarnConfiguration
operator|.
name|NM_VCORES
operator|+
literal|". Value must be greater than 0."
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
return|return
name|cores
return|;
block|}
DECL|method|getConfiguredMemoryMB (Configuration conf)
specifier|private
specifier|static
name|long
name|getConfiguredMemoryMB
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|long
name|memoryMb
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_PMEM_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_PMEM_MB
argument_list|)
decl_stmt|;
if|if
condition|(
name|memoryMb
operator|==
operator|-
literal|1
condition|)
block|{
name|memoryMb
operator|=
name|YarnConfiguration
operator|.
name|DEFAULT_NM_PMEM_MB
expr_stmt|;
block|}
return|return
name|memoryMb
return|;
block|}
comment|/**    * Function to return how much memory we should set aside for YARN containers.    * If a number is specified in the configuration file, then that number is    * returned. If nothing is specified - 1. If the OS is an "unknown" OS(one for    * which we don't have ResourceCalculatorPlugin implemented), return the    * default NodeManager physical memory. 2. If the OS has a    * ResourceCalculatorPlugin implemented, the calculation is 0.8 * (RAM - 2 *    * JVM-memory) i.e. use 80% of the memory after accounting for memory used by    * the DataNode and the NodeManager. If the number is less than 1GB, log a    * warning message.    *    * @param conf    *          - the configuration for the NodeManager    * @return the amount of memory that will be used for YARN containers in MB.    */
DECL|method|getContainerMemoryMB (Configuration conf)
specifier|public
specifier|static
name|long
name|getContainerMemoryMB
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isHardwareDetectionEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
return|return
name|getConfiguredMemoryMB
argument_list|(
name|conf
argument_list|)
return|;
block|}
name|ResourceCalculatorPlugin
name|plugin
init|=
name|ResourceCalculatorPlugin
operator|.
name|getResourceCalculatorPlugin
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|plugin
operator|==
literal|null
condition|)
block|{
return|return
name|getConfiguredMemoryMB
argument_list|(
name|conf
argument_list|)
return|;
block|}
return|return
name|getContainerMemoryMBInternal
argument_list|(
name|plugin
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    * Function to return how much memory we should set aside for YARN containers.    * If a number is specified in the configuration file, then that number is    * returned. If nothing is specified - 1. If the OS is an "unknown" OS(one for    * which we don't have ResourceCalculatorPlugin implemented), return the    * default NodeManager physical memory. 2. If the OS has a    * ResourceCalculatorPlugin implemented, the calculation is 0.8 * (RAM - 2 *    * JVM-memory) i.e. use 80% of the memory after accounting for memory used by    * the DataNode and the NodeManager. If the number is less than 1GB, log a    * warning message.    *    * @param plugin    *          - ResourceCalculatorPlugin object to determine hardware specs    * @param conf    *          - the configuration for the NodeManager    * @return the amount of memory that will be used for YARN containers in MB.    */
DECL|method|getContainerMemoryMB (ResourceCalculatorPlugin plugin, Configuration conf)
specifier|public
specifier|static
name|long
name|getContainerMemoryMB
parameter_list|(
name|ResourceCalculatorPlugin
name|plugin
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isHardwareDetectionEnabled
argument_list|(
name|conf
argument_list|)
operator|||
name|plugin
operator|==
literal|null
condition|)
block|{
return|return
name|getConfiguredMemoryMB
argument_list|(
name|conf
argument_list|)
return|;
block|}
return|return
name|getContainerMemoryMBInternal
argument_list|(
name|plugin
argument_list|,
name|conf
argument_list|)
return|;
block|}
DECL|method|getContainerMemoryMBInternal (ResourceCalculatorPlugin plugin, Configuration conf)
specifier|private
specifier|static
name|long
name|getContainerMemoryMBInternal
parameter_list|(
name|ResourceCalculatorPlugin
name|plugin
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|long
name|memoryMb
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_PMEM_MB
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|memoryMb
operator|==
operator|-
literal|1
condition|)
block|{
name|long
name|physicalMemoryMB
init|=
operator|(
name|plugin
operator|.
name|getPhysicalMemorySize
argument_list|()
operator|/
operator|(
literal|1024
operator|*
literal|1024
operator|)
operator|)
decl_stmt|;
name|long
name|hadoopHeapSizeMB
init|=
operator|(
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|maxMemory
argument_list|()
operator|/
operator|(
literal|1024
operator|*
literal|1024
operator|)
operator|)
decl_stmt|;
name|long
name|containerPhysicalMemoryMB
init|=
call|(
name|long
call|)
argument_list|(
literal|0.8f
operator|*
operator|(
name|physicalMemoryMB
operator|-
operator|(
literal|2
operator|*
name|hadoopHeapSizeMB
operator|)
operator|)
argument_list|)
decl_stmt|;
name|long
name|reservedMemoryMB
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_SYSTEM_RESERVED_PMEM_MB
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|reservedMemoryMB
operator|!=
operator|-
literal|1
condition|)
block|{
name|containerPhysicalMemoryMB
operator|=
name|physicalMemoryMB
operator|-
name|reservedMemoryMB
expr_stmt|;
block|}
if|if
condition|(
name|containerPhysicalMemoryMB
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Calculated memory for YARN containers is too low."
operator|+
literal|" Node memory is "
operator|+
name|physicalMemoryMB
operator|+
literal|" MB, system reserved memory is "
operator|+
name|reservedMemoryMB
operator|+
literal|" MB."
argument_list|)
expr_stmt|;
block|}
name|containerPhysicalMemoryMB
operator|=
name|Math
operator|.
name|max
argument_list|(
name|containerPhysicalMemoryMB
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|memoryMb
operator|=
name|containerPhysicalMemoryMB
expr_stmt|;
block|}
if|if
condition|(
name|memoryMb
operator|<=
literal|0
condition|)
block|{
name|String
name|message
init|=
literal|"Illegal value for "
operator|+
name|YarnConfiguration
operator|.
name|NM_PMEM_MB
operator|+
literal|". Value must be greater than 0."
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
return|return
name|memoryMb
return|;
block|}
comment|/**    * Get the resources for the node.    * @param configuration configuration file    * @return the resources for the node    */
DECL|method|getNodeResources (Configuration configuration)
specifier|public
specifier|static
name|Resource
name|getNodeResources
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|String
name|memory
init|=
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|vcores
init|=
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Resource
name|ret
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|resourceInformation
init|=
name|ResourceUtils
operator|.
name|getNodeResourceInformation
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|entry
range|:
name|resourceInformation
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ret
operator|.
name|setResourceInformation
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting key "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" to "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resourceInformation
operator|.
name|containsKey
argument_list|(
name|memory
argument_list|)
condition|)
block|{
name|Long
name|value
init|=
name|resourceInformation
operator|.
name|get
argument_list|(
name|memory
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Value '"
operator|+
name|value
operator|+
literal|"' for resource memory is more than the maximum for an integer."
argument_list|)
throw|;
block|}
name|ResourceInformation
name|memResInfo
init|=
name|resourceInformation
operator|.
name|get
argument_list|(
name|memory
argument_list|)
decl_stmt|;
if|if
condition|(
name|memResInfo
operator|.
name|getValue
argument_list|()
operator|==
literal|0
condition|)
block|{
name|ret
operator|.
name|setMemorySize
argument_list|(
name|getContainerMemoryMB
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Set memory to "
operator|+
name|ret
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|resourceInformation
operator|.
name|containsKey
argument_list|(
name|vcores
argument_list|)
condition|)
block|{
name|Long
name|value
init|=
name|resourceInformation
operator|.
name|get
argument_list|(
name|vcores
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Value '"
operator|+
name|value
operator|+
literal|"' for resource vcores is more than the maximum for an integer."
argument_list|)
throw|;
block|}
name|ResourceInformation
name|vcoresResInfo
init|=
name|resourceInformation
operator|.
name|get
argument_list|(
name|vcores
argument_list|)
decl_stmt|;
if|if
condition|(
name|vcoresResInfo
operator|.
name|getValue
argument_list|()
operator|==
literal|0
condition|)
block|{
name|ret
operator|.
name|setVirtualCores
argument_list|(
name|getVCores
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Set vcores to "
operator|+
name|ret
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Node resource information map is "
operator|+
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

