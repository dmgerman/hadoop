begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|ReadLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|WriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Manages a list of local storage directories.  */
end_comment

begin_class
DECL|class|DirectoryCollection
specifier|public
class|class
name|DirectoryCollection
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DirectoryCollection
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * The enum defines disk failure type.    */
DECL|enum|DiskErrorCause
specifier|public
enum|enum
name|DiskErrorCause
block|{
DECL|enumConstant|DISK_FULL
DECL|enumConstant|OTHER
name|DISK_FULL
block|,
name|OTHER
block|}
DECL|class|DiskErrorInformation
specifier|static
class|class
name|DiskErrorInformation
block|{
DECL|field|cause
name|DiskErrorCause
name|cause
decl_stmt|;
DECL|field|message
name|String
name|message
decl_stmt|;
DECL|method|DiskErrorInformation (DiskErrorCause cause, String message)
name|DiskErrorInformation
parameter_list|(
name|DiskErrorCause
name|cause
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|this
operator|.
name|cause
operator|=
name|cause
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
block|}
block|}
comment|/**    * The interface provides a callback when localDirs is changed.    */
DECL|interface|DirsChangeListener
specifier|public
interface|interface
name|DirsChangeListener
block|{
DECL|method|onDirsChanged ()
name|void
name|onDirsChanged
parameter_list|()
function_decl|;
block|}
comment|/**    * Returns a merged list which contains all the elements of l1 and l2    * @param l1 the first list to be included    * @param l2 the second list to be included    * @return a new list containing all the elements of the first and second list    */
DECL|method|concat (List<String> l1, List<String> l2)
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|concat
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|l1
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|l2
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|l1
operator|.
name|size
argument_list|()
operator|+
name|l2
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|ret
operator|.
name|addAll
argument_list|(
name|l1
argument_list|)
expr_stmt|;
name|ret
operator|.
name|addAll
argument_list|(
name|l2
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|// Good local storage directories
DECL|field|localDirs
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|localDirs
decl_stmt|;
DECL|field|errorDirs
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|errorDirs
decl_stmt|;
DECL|field|fullDirs
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|fullDirs
decl_stmt|;
comment|// read/write lock for accessing above directories.
DECL|field|readLock
specifier|private
specifier|final
name|ReadLock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|WriteLock
name|writeLock
decl_stmt|;
DECL|field|numFailures
specifier|private
name|int
name|numFailures
decl_stmt|;
DECL|field|diskUtilizationPercentageCutoffHigh
specifier|private
name|float
name|diskUtilizationPercentageCutoffHigh
decl_stmt|;
DECL|field|diskUtilizationPercentageCutoffLow
specifier|private
name|float
name|diskUtilizationPercentageCutoffLow
decl_stmt|;
DECL|field|diskUtilizationSpaceCutoff
specifier|private
name|long
name|diskUtilizationSpaceCutoff
decl_stmt|;
DECL|field|goodDirsDiskUtilizationPercentage
specifier|private
name|int
name|goodDirsDiskUtilizationPercentage
decl_stmt|;
DECL|field|dirsChangeListeners
specifier|private
name|Set
argument_list|<
name|DirsChangeListener
argument_list|>
name|dirsChangeListeners
decl_stmt|;
comment|/**    * Create collection for the directories specified. No check for free space.    *     * @param dirs    *          directories to be monitored    */
DECL|method|DirectoryCollection (String[] dirs)
specifier|public
name|DirectoryCollection
parameter_list|(
name|String
index|[]
name|dirs
parameter_list|)
block|{
name|this
argument_list|(
name|dirs
argument_list|,
literal|100.0F
argument_list|,
literal|100.0F
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create collection for the directories specified. Users must specify the    * maximum percentage of disk utilization allowed. Minimum amount of disk    * space is not checked.    *     * @param dirs    *          directories to be monitored    * @param utilizationPercentageCutOff    *          percentage of disk that can be used before the dir is taken out of    *          the good dirs list    *     */
DECL|method|DirectoryCollection (String[] dirs, float utilizationPercentageCutOff)
specifier|public
name|DirectoryCollection
parameter_list|(
name|String
index|[]
name|dirs
parameter_list|,
name|float
name|utilizationPercentageCutOff
parameter_list|)
block|{
name|this
argument_list|(
name|dirs
argument_list|,
name|utilizationPercentageCutOff
argument_list|,
name|utilizationPercentageCutOff
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create collection for the directories specified. Users must specify the    * minimum amount of free space that must be available for the dir to be used.    *     * @param dirs    *          directories to be monitored    * @param utilizationSpaceCutOff    *          minimum space, in MB, that must be available on the disk for the    *          dir to be marked as good    *     */
DECL|method|DirectoryCollection (String[] dirs, long utilizationSpaceCutOff)
specifier|public
name|DirectoryCollection
parameter_list|(
name|String
index|[]
name|dirs
parameter_list|,
name|long
name|utilizationSpaceCutOff
parameter_list|)
block|{
name|this
argument_list|(
name|dirs
argument_list|,
literal|100.0F
argument_list|,
literal|100.0F
argument_list|,
name|utilizationSpaceCutOff
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create collection for the directories specified. Users must specify the    * maximum percentage of disk utilization allowed and the minimum amount of    * free space that must be available for the dir to be used. If either check    * fails the dir is removed from the good dirs list.    *     * @param dirs    *          directories to be monitored    * @param utilizationPercentageCutOffHigh    *          percentage of disk that can be used before the dir is taken out of    *          the good dirs list    * @param utilizationPercentageCutOffLow    *          percentage of disk that can be used when the dir is moved from    *          the bad dirs list to the good dirs list    * @param utilizationSpaceCutOff    *          minimum space, in MB, that must be available on the disk for the    *          dir to be marked as good    *     */
DECL|method|DirectoryCollection (String[] dirs, float utilizationPercentageCutOffHigh, float utilizationPercentageCutOffLow, long utilizationSpaceCutOff)
specifier|public
name|DirectoryCollection
parameter_list|(
name|String
index|[]
name|dirs
parameter_list|,
name|float
name|utilizationPercentageCutOffHigh
parameter_list|,
name|float
name|utilizationPercentageCutOffLow
parameter_list|,
name|long
name|utilizationSpaceCutOff
parameter_list|)
block|{
name|localDirs
operator|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|(
name|dirs
argument_list|)
expr_stmt|;
name|errorDirs
operator|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|fullDirs
operator|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|this
operator|.
name|readLock
operator|=
name|lock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeLock
operator|=
name|lock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|diskUtilizationPercentageCutoffHigh
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0.0F
argument_list|,
name|Math
operator|.
name|min
argument_list|(
literal|100.0F
argument_list|,
name|utilizationPercentageCutOffHigh
argument_list|)
argument_list|)
expr_stmt|;
name|diskUtilizationPercentageCutoffLow
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0.0F
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|diskUtilizationPercentageCutoffHigh
argument_list|,
name|utilizationPercentageCutOffLow
argument_list|)
argument_list|)
expr_stmt|;
name|diskUtilizationSpaceCutoff
operator|=
name|utilizationSpaceCutOff
operator|<
literal|0
condition|?
literal|0
else|:
name|utilizationSpaceCutOff
expr_stmt|;
name|dirsChangeListeners
operator|=
name|Collections
operator|.
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|DirsChangeListener
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|registerDirsChangeListener ( DirsChangeListener listener)
name|void
name|registerDirsChangeListener
parameter_list|(
name|DirsChangeListener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|dirsChangeListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
condition|)
block|{
name|listener
operator|.
name|onDirsChanged
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|deregisterDirsChangeListener ( DirsChangeListener listener)
name|void
name|deregisterDirsChangeListener
parameter_list|(
name|DirsChangeListener
name|listener
parameter_list|)
block|{
name|dirsChangeListeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return the current valid directories     */
DECL|method|getGoodDirs ()
name|List
argument_list|<
name|String
argument_list|>
name|getGoodDirs
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|localDirs
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @return the failed directories    */
DECL|method|getFailedDirs ()
name|List
argument_list|<
name|String
argument_list|>
name|getFailedDirs
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|DirectoryCollection
operator|.
name|concat
argument_list|(
name|errorDirs
argument_list|,
name|fullDirs
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @return the directories that have used all disk space    */
DECL|method|getFullDirs ()
name|List
argument_list|<
name|String
argument_list|>
name|getFullDirs
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|fullDirs
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @return total the number of directory failures seen till now    */
DECL|method|getNumFailures ()
name|int
name|getNumFailures
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|numFailures
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Create any non-existent directories and parent directories, updating the    * list of valid directories if necessary.    * @param localFs local file system to use    * @param perm absolute permissions to use for any directories created    * @return true if there were no errors, false if at least one error occurred    */
DECL|method|createNonExistentDirs (FileContext localFs, FsPermission perm)
name|boolean
name|createNonExistentDirs
parameter_list|(
name|FileContext
name|localFs
parameter_list|,
name|FsPermission
name|perm
parameter_list|)
block|{
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|localDirectories
init|=
literal|null
decl_stmt|;
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|localDirectories
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|localDirs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|String
name|dir
range|:
name|localDirectories
control|)
block|{
try|try
block|{
name|createDir
argument_list|(
name|localFs
argument_list|,
operator|new
name|Path
argument_list|(
name|dir
argument_list|)
argument_list|,
name|perm
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to create directory "
operator|+
name|dir
operator|+
literal|" error "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|", removing from the list of valid directories."
argument_list|)
expr_stmt|;
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|localDirs
operator|.
name|remove
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|errorDirs
operator|.
name|add
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|numFailures
operator|++
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|failed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
operator|!
name|failed
return|;
block|}
comment|/**    * Check the health of current set of local directories(good and failed),    * updating the list of valid directories if necessary.    *    * @return<em>true</em> if there is a new disk-failure identified in this    *         checking or a failed directory passes the disk check<em>false</em>    *         otherwise.    */
DECL|method|checkDirs ()
name|boolean
name|checkDirs
parameter_list|()
block|{
name|boolean
name|setChanged
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|preCheckGoodDirs
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|preCheckFullDirs
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|preCheckOtherErrorDirs
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|failedDirs
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|allLocalDirs
init|=
literal|null
decl_stmt|;
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|preCheckGoodDirs
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|localDirs
argument_list|)
expr_stmt|;
name|preCheckFullDirs
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|fullDirs
argument_list|)
expr_stmt|;
name|preCheckOtherErrorDirs
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|errorDirs
argument_list|)
expr_stmt|;
name|failedDirs
operator|=
name|DirectoryCollection
operator|.
name|concat
argument_list|(
name|errorDirs
argument_list|,
name|fullDirs
argument_list|)
expr_stmt|;
name|allLocalDirs
operator|=
name|DirectoryCollection
operator|.
name|concat
argument_list|(
name|localDirs
argument_list|,
name|failedDirs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// move testDirs out of any lock as it could wait for very long time in
comment|// case of busy IO
name|Map
argument_list|<
name|String
argument_list|,
name|DiskErrorInformation
argument_list|>
name|dirsFailedCheck
init|=
name|testDirs
argument_list|(
name|allLocalDirs
argument_list|,
name|preCheckGoodDirs
argument_list|)
decl_stmt|;
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|localDirs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|errorDirs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fullDirs
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|DiskErrorInformation
argument_list|>
name|entry
range|:
name|dirsFailedCheck
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|dir
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|DiskErrorInformation
name|errorInformation
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|cause
condition|)
block|{
case|case
name|DISK_FULL
case|:
name|fullDirs
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|OTHER
case|:
name|errorDirs
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|warn
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|cause
operator|+
literal|" is unknown for disk error."
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|preCheckGoodDirs
operator|.
name|contains
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Directory "
operator|+
name|dir
operator|+
literal|" error, "
operator|+
name|errorInformation
operator|.
name|message
operator|+
literal|", removing from list of valid directories"
argument_list|)
expr_stmt|;
name|setChanged
operator|=
literal|true
expr_stmt|;
name|numFailures
operator|++
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|dir
range|:
name|allLocalDirs
control|)
block|{
if|if
condition|(
operator|!
name|dirsFailedCheck
operator|.
name|containsKey
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|localDirs
operator|.
name|add
argument_list|(
name|dir
argument_list|)
expr_stmt|;
if|if
condition|(
name|preCheckFullDirs
operator|.
name|contains
argument_list|(
name|dir
argument_list|)
operator|||
name|preCheckOtherErrorDirs
operator|.
name|contains
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|setChanged
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Directory "
operator|+
name|dir
operator|+
literal|" passed disk check, adding to list of valid directories."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|postCheckFullDirs
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|fullDirs
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|postCheckOtherDirs
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|errorDirs
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|dir
range|:
name|preCheckFullDirs
control|)
block|{
if|if
condition|(
name|postCheckOtherDirs
operator|.
name|contains
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Directory "
operator|+
name|dir
operator|+
literal|" error "
operator|+
name|dirsFailedCheck
operator|.
name|get
argument_list|(
name|dir
argument_list|)
operator|.
name|message
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|dir
range|:
name|preCheckOtherErrorDirs
control|)
block|{
if|if
condition|(
name|postCheckFullDirs
operator|.
name|contains
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Directory "
operator|+
name|dir
operator|+
literal|" error "
operator|+
name|dirsFailedCheck
operator|.
name|get
argument_list|(
name|dir
argument_list|)
operator|.
name|message
argument_list|)
expr_stmt|;
block|}
block|}
name|setGoodDirsDiskUtilizationPercentage
argument_list|()
expr_stmt|;
if|if
condition|(
name|setChanged
condition|)
block|{
for|for
control|(
name|DirsChangeListener
name|listener
range|:
name|dirsChangeListeners
control|)
block|{
name|listener
operator|.
name|onDirsChanged
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|setChanged
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testDirs (List<String> dirs, Set<String> goodDirs)
name|Map
argument_list|<
name|String
argument_list|,
name|DiskErrorInformation
argument_list|>
name|testDirs
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|dirs
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|goodDirs
parameter_list|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|DiskErrorInformation
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DiskErrorInformation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|dir
range|:
name|dirs
control|)
block|{
name|String
name|msg
decl_stmt|;
try|try
block|{
name|File
name|testDir
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|DiskChecker
operator|.
name|checkDir
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
name|float
name|diskUtilizationPercentageCutoff
init|=
name|goodDirs
operator|.
name|contains
argument_list|(
name|dir
argument_list|)
condition|?
name|diskUtilizationPercentageCutoffHigh
else|:
name|diskUtilizationPercentageCutoffLow
decl_stmt|;
if|if
condition|(
name|isDiskUsageOverPercentageLimit
argument_list|(
name|testDir
argument_list|,
name|diskUtilizationPercentageCutoff
argument_list|)
condition|)
block|{
name|msg
operator|=
literal|"used space above threshold of "
operator|+
name|diskUtilizationPercentageCutoff
operator|+
literal|"%"
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|dir
argument_list|,
operator|new
name|DiskErrorInformation
argument_list|(
name|DiskErrorCause
operator|.
name|DISK_FULL
argument_list|,
name|msg
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|isDiskFreeSpaceUnderLimit
argument_list|(
name|testDir
argument_list|)
condition|)
block|{
name|msg
operator|=
literal|"free space below limit of "
operator|+
name|diskUtilizationSpaceCutoff
operator|+
literal|"MB"
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|dir
argument_list|,
operator|new
name|DiskErrorInformation
argument_list|(
name|DiskErrorCause
operator|.
name|DISK_FULL
argument_list|,
name|msg
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// create a random dir to make sure fs isn't in read-only mode
name|verifyDirUsingMkdir
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|dir
argument_list|,
operator|new
name|DiskErrorInformation
argument_list|(
name|DiskErrorCause
operator|.
name|OTHER
argument_list|,
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Function to test whether a dir is working correctly by actually creating a    * random directory.    *    * @param dir    *          the dir to test    */
DECL|method|verifyDirUsingMkdir (File dir)
specifier|private
name|void
name|verifyDirUsingMkdir
parameter_list|(
name|File
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|randomDirName
init|=
name|RandomStringUtils
operator|.
name|randomAlphanumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|randomDirName
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|target
operator|.
name|exists
argument_list|()
condition|)
block|{
name|randomDirName
operator|=
name|RandomStringUtils
operator|.
name|randomAlphanumeric
argument_list|(
literal|5
argument_list|)
operator|+
name|i
expr_stmt|;
name|target
operator|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|randomDirName
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
try|try
block|{
name|DiskChecker
operator|.
name|checkDir
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isDiskUsageOverPercentageLimit (File dir, float diskUtilizationPercentageCutoff)
specifier|private
name|boolean
name|isDiskUsageOverPercentageLimit
parameter_list|(
name|File
name|dir
parameter_list|,
name|float
name|diskUtilizationPercentageCutoff
parameter_list|)
block|{
name|float
name|freePercentage
init|=
literal|100
operator|*
operator|(
name|dir
operator|.
name|getUsableSpace
argument_list|()
operator|/
operator|(
name|float
operator|)
name|dir
operator|.
name|getTotalSpace
argument_list|()
operator|)
decl_stmt|;
name|float
name|usedPercentage
init|=
literal|100.0F
operator|-
name|freePercentage
decl_stmt|;
return|return
operator|(
name|usedPercentage
operator|>
name|diskUtilizationPercentageCutoff
operator|||
name|usedPercentage
operator|>=
literal|100.0F
operator|)
return|;
block|}
DECL|method|isDiskFreeSpaceUnderLimit (File dir)
specifier|private
name|boolean
name|isDiskFreeSpaceUnderLimit
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
name|long
name|freeSpace
init|=
name|dir
operator|.
name|getUsableSpace
argument_list|()
operator|/
operator|(
literal|1024
operator|*
literal|1024
operator|)
decl_stmt|;
return|return
name|freeSpace
operator|<
name|this
operator|.
name|diskUtilizationSpaceCutoff
return|;
block|}
DECL|method|createDir (FileContext localFs, Path dir, FsPermission perm)
specifier|private
name|void
name|createDir
parameter_list|(
name|FileContext
name|localFs
parameter_list|,
name|Path
name|dir
parameter_list|,
name|FsPermission
name|perm
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dir
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|localFs
operator|.
name|getFileStatus
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|createDir
argument_list|(
name|localFs
argument_list|,
name|dir
operator|.
name|getParent
argument_list|()
argument_list|,
name|perm
argument_list|)
expr_stmt|;
try|try
block|{
name|localFs
operator|.
name|mkdir
argument_list|(
name|dir
argument_list|,
name|perm
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileAlreadyExistsException
name|ex
parameter_list|)
block|{
comment|// do nothing as other threads could in creating the same directory.
block|}
if|if
condition|(
operator|!
name|perm
operator|.
name|equals
argument_list|(
name|perm
operator|.
name|applyUMask
argument_list|(
name|localFs
operator|.
name|getUMask
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|localFs
operator|.
name|setPermission
argument_list|(
name|dir
argument_list|,
name|perm
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getDiskUtilizationPercentageCutoffHigh ()
name|float
name|getDiskUtilizationPercentageCutoffHigh
parameter_list|()
block|{
return|return
name|diskUtilizationPercentageCutoffHigh
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getDiskUtilizationPercentageCutoffLow ()
name|float
name|getDiskUtilizationPercentageCutoffLow
parameter_list|()
block|{
return|return
name|diskUtilizationPercentageCutoffLow
return|;
block|}
DECL|method|setDiskUtilizationPercentageCutoff ( float utilizationPercentageCutOffHigh, float utilizationPercentageCutOffLow)
specifier|public
name|void
name|setDiskUtilizationPercentageCutoff
parameter_list|(
name|float
name|utilizationPercentageCutOffHigh
parameter_list|,
name|float
name|utilizationPercentageCutOffLow
parameter_list|)
block|{
name|diskUtilizationPercentageCutoffHigh
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0.0F
argument_list|,
name|Math
operator|.
name|min
argument_list|(
literal|100.0F
argument_list|,
name|utilizationPercentageCutOffHigh
argument_list|)
argument_list|)
expr_stmt|;
name|diskUtilizationPercentageCutoffLow
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0.0F
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|diskUtilizationPercentageCutoffHigh
argument_list|,
name|utilizationPercentageCutOffLow
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getDiskUtilizationSpaceCutoff ()
specifier|public
name|long
name|getDiskUtilizationSpaceCutoff
parameter_list|()
block|{
return|return
name|diskUtilizationSpaceCutoff
return|;
block|}
DECL|method|setDiskUtilizationSpaceCutoff (long diskUtilizationSpaceCutoff)
specifier|public
name|void
name|setDiskUtilizationSpaceCutoff
parameter_list|(
name|long
name|diskUtilizationSpaceCutoff
parameter_list|)
block|{
name|diskUtilizationSpaceCutoff
operator|=
name|diskUtilizationSpaceCutoff
operator|<
literal|0
condition|?
literal|0
else|:
name|diskUtilizationSpaceCutoff
expr_stmt|;
name|this
operator|.
name|diskUtilizationSpaceCutoff
operator|=
name|diskUtilizationSpaceCutoff
expr_stmt|;
block|}
DECL|method|setGoodDirsDiskUtilizationPercentage ()
specifier|private
name|void
name|setGoodDirsDiskUtilizationPercentage
parameter_list|()
block|{
name|long
name|totalSpace
init|=
literal|0
decl_stmt|;
name|long
name|usableSpace
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|dir
range|:
name|localDirs
control|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|totalSpace
operator|+=
name|f
operator|.
name|getTotalSpace
argument_list|()
expr_stmt|;
name|usableSpace
operator|+=
name|f
operator|.
name|getUsableSpace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|totalSpace
operator|!=
literal|0
condition|)
block|{
name|long
name|tmp
init|=
operator|(
operator|(
name|totalSpace
operator|-
name|usableSpace
operator|)
operator|*
literal|100
operator|)
operator|/
name|totalSpace
decl_stmt|;
if|if
condition|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|<
name|tmp
operator|&&
name|Integer
operator|.
name|MAX_VALUE
argument_list|>
name|tmp
condition|)
block|{
name|goodDirsDiskUtilizationPercentage
operator|=
operator|(
name|int
operator|)
name|tmp
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// got no good dirs
name|goodDirsDiskUtilizationPercentage
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|method|getGoodDirsDiskUtilizationPercentage ()
specifier|public
name|int
name|getGoodDirsDiskUtilizationPercentage
parameter_list|()
block|{
return|return
name|goodDirsDiskUtilizationPercentage
return|;
block|}
block|}
end_class

end_unit

