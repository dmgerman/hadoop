begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
operator|.
name|DiskErrorException
import|;
end_import

begin_comment
comment|/**  * Manages a list of local storage directories.  */
end_comment

begin_class
DECL|class|DirectoryCollection
class|class
name|DirectoryCollection
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DirectoryCollection
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Good local storage directories
DECL|field|localDirs
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|localDirs
decl_stmt|;
DECL|field|failedDirs
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|failedDirs
decl_stmt|;
DECL|field|numFailures
specifier|private
name|int
name|numFailures
decl_stmt|;
DECL|field|diskUtilizationPercentageCutoff
specifier|private
name|float
name|diskUtilizationPercentageCutoff
decl_stmt|;
DECL|field|diskUtilizationSpaceCutoff
specifier|private
name|long
name|diskUtilizationSpaceCutoff
decl_stmt|;
comment|/**    * Create collection for the directories specified. No check for free space.    *     * @param dirs    *          directories to be monitored    */
DECL|method|DirectoryCollection (String[] dirs)
specifier|public
name|DirectoryCollection
parameter_list|(
name|String
index|[]
name|dirs
parameter_list|)
block|{
name|this
argument_list|(
name|dirs
argument_list|,
literal|100.0F
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create collection for the directories specified. Users must specify the    * maximum percentage of disk utilization allowed. Minimum amount of disk    * space is not checked.    *     * @param dirs    *          directories to be monitored    * @param utilizationPercentageCutOff    *          percentage of disk that can be used before the dir is taken out of    *          the good dirs list    *     */
DECL|method|DirectoryCollection (String[] dirs, float utilizationPercentageCutOff)
specifier|public
name|DirectoryCollection
parameter_list|(
name|String
index|[]
name|dirs
parameter_list|,
name|float
name|utilizationPercentageCutOff
parameter_list|)
block|{
name|this
argument_list|(
name|dirs
argument_list|,
name|utilizationPercentageCutOff
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create collection for the directories specified. Users must specify the    * minimum amount of free space that must be available for the dir to be used.    *     * @param dirs    *          directories to be monitored    * @param utilizationSpaceCutOff    *          minimum space, in MB, that must be available on the disk for the    *          dir to be marked as good    *     */
DECL|method|DirectoryCollection (String[] dirs, long utilizationSpaceCutOff)
specifier|public
name|DirectoryCollection
parameter_list|(
name|String
index|[]
name|dirs
parameter_list|,
name|long
name|utilizationSpaceCutOff
parameter_list|)
block|{
name|this
argument_list|(
name|dirs
argument_list|,
literal|100.0F
argument_list|,
name|utilizationSpaceCutOff
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create collection for the directories specified. Users must specify the    * maximum percentage of disk utilization allowed and the minimum amount of    * free space that must be available for the dir to be used. If either check    * fails the dir is removed from the good dirs list.    *     * @param dirs    *          directories to be monitored    * @param utilizationPercentageCutOff    *          percentage of disk that can be used before the dir is taken out of    *          the good dirs list    * @param utilizationSpaceCutOff    *          minimum space, in MB, that must be available on the disk for the    *          dir to be marked as good    *     */
DECL|method|DirectoryCollection (String[] dirs, float utilizationPercentageCutOff, long utilizationSpaceCutOff)
specifier|public
name|DirectoryCollection
parameter_list|(
name|String
index|[]
name|dirs
parameter_list|,
name|float
name|utilizationPercentageCutOff
parameter_list|,
name|long
name|utilizationSpaceCutOff
parameter_list|)
block|{
name|localDirs
operator|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|dirs
argument_list|)
expr_stmt|;
name|failedDirs
operator|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|diskUtilizationPercentageCutoff
operator|=
name|utilizationPercentageCutOff
expr_stmt|;
name|diskUtilizationSpaceCutoff
operator|=
name|utilizationSpaceCutOff
expr_stmt|;
name|diskUtilizationPercentageCutoff
operator|=
name|utilizationPercentageCutOff
operator|<
literal|0.0F
condition|?
literal|0.0F
else|:
operator|(
name|utilizationPercentageCutOff
operator|>
literal|100.0F
condition|?
literal|100.0F
else|:
name|utilizationPercentageCutOff
operator|)
expr_stmt|;
name|diskUtilizationSpaceCutoff
operator|=
name|utilizationSpaceCutOff
operator|<
literal|0
condition|?
literal|0
else|:
name|utilizationSpaceCutOff
expr_stmt|;
block|}
comment|/**    * @return the current valid directories     */
DECL|method|getGoodDirs ()
specifier|synchronized
name|List
argument_list|<
name|String
argument_list|>
name|getGoodDirs
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|localDirs
argument_list|)
return|;
block|}
comment|/**    * @return the failed directories    */
DECL|method|getFailedDirs ()
specifier|synchronized
name|List
argument_list|<
name|String
argument_list|>
name|getFailedDirs
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|failedDirs
argument_list|)
return|;
block|}
comment|/**    * @return total the number of directory failures seen till now    */
DECL|method|getNumFailures ()
specifier|synchronized
name|int
name|getNumFailures
parameter_list|()
block|{
return|return
name|numFailures
return|;
block|}
comment|/**    * Create any non-existent directories and parent directories, updating the    * list of valid directories if necessary.    * @param localFs local file system to use    * @param perm absolute permissions to use for any directories created    * @return true if there were no errors, false if at least one error occurred    */
DECL|method|createNonExistentDirs (FileContext localFs, FsPermission perm)
specifier|synchronized
name|boolean
name|createNonExistentDirs
parameter_list|(
name|FileContext
name|localFs
parameter_list|,
name|FsPermission
name|perm
parameter_list|)
block|{
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|dir
range|:
name|localDirs
control|)
block|{
try|try
block|{
name|createDir
argument_list|(
name|localFs
argument_list|,
operator|new
name|Path
argument_list|(
name|dir
argument_list|)
argument_list|,
name|perm
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to create directory "
operator|+
name|dir
operator|+
literal|" error "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|", removing from the list of valid directories."
argument_list|)
expr_stmt|;
name|localDirs
operator|.
name|remove
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|failedDirs
operator|.
name|add
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|numFailures
operator|++
expr_stmt|;
name|failed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
operator|!
name|failed
return|;
block|}
comment|/**    * Check the health of current set of local directories, updating the list    * of valid directories if necessary.    * @return<em>true</em> if there is a new disk-failure identified in    *         this checking.<em>false</em> otherwise.    */
DECL|method|checkDirs ()
specifier|synchronized
name|boolean
name|checkDirs
parameter_list|()
block|{
name|int
name|oldNumFailures
init|=
name|numFailures
decl_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|checkFailedDirs
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|dir
range|:
name|localDirs
control|)
block|{
try|try
block|{
name|File
name|testDir
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|DiskChecker
operator|.
name|checkDir
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDiskUsageUnderPercentageLimit
argument_list|(
name|testDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Directory "
operator|+
name|dir
operator|+
literal|" error, used space above threshold of "
operator|+
name|diskUtilizationPercentageCutoff
operator|+
literal|"%, removing from the list of valid directories."
argument_list|)
expr_stmt|;
name|checkFailedDirs
operator|.
name|add
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isDiskFreeSpaceWithinLimit
argument_list|(
name|testDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Directory "
operator|+
name|dir
operator|+
literal|" error, free space below limit of "
operator|+
name|diskUtilizationSpaceCutoff
operator|+
literal|"MB, removing from the list of valid directories."
argument_list|)
expr_stmt|;
name|checkFailedDirs
operator|.
name|add
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DiskErrorException
name|de
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Directory "
operator|+
name|dir
operator|+
literal|" error "
operator|+
name|de
operator|.
name|getMessage
argument_list|()
operator|+
literal|", removing from the list of valid directories."
argument_list|)
expr_stmt|;
name|checkFailedDirs
operator|.
name|add
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|dir
range|:
name|checkFailedDirs
control|)
block|{
name|localDirs
operator|.
name|remove
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|failedDirs
operator|.
name|add
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|numFailures
operator|++
expr_stmt|;
block|}
return|return
name|numFailures
operator|>
name|oldNumFailures
return|;
block|}
DECL|method|isDiskUsageUnderPercentageLimit (File dir)
specifier|private
name|boolean
name|isDiskUsageUnderPercentageLimit
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
name|float
name|freePercentage
init|=
literal|100
operator|*
operator|(
name|dir
operator|.
name|getUsableSpace
argument_list|()
operator|/
operator|(
name|float
operator|)
name|dir
operator|.
name|getTotalSpace
argument_list|()
operator|)
decl_stmt|;
name|float
name|usedPercentage
init|=
literal|100.0F
operator|-
name|freePercentage
decl_stmt|;
if|if
condition|(
name|usedPercentage
operator|>
name|diskUtilizationPercentageCutoff
operator|||
name|usedPercentage
operator|>=
literal|100.0F
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|isDiskFreeSpaceWithinLimit (File dir)
specifier|private
name|boolean
name|isDiskFreeSpaceWithinLimit
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
name|long
name|freeSpace
init|=
name|dir
operator|.
name|getUsableSpace
argument_list|()
operator|/
operator|(
literal|1024
operator|*
literal|1024
operator|)
decl_stmt|;
if|if
condition|(
name|freeSpace
operator|<
name|this
operator|.
name|diskUtilizationSpaceCutoff
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|createDir (FileContext localFs, Path dir, FsPermission perm)
specifier|private
name|void
name|createDir
parameter_list|(
name|FileContext
name|localFs
parameter_list|,
name|Path
name|dir
parameter_list|,
name|FsPermission
name|perm
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dir
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|localFs
operator|.
name|getFileStatus
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|createDir
argument_list|(
name|localFs
argument_list|,
name|dir
operator|.
name|getParent
argument_list|()
argument_list|,
name|perm
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|mkdir
argument_list|(
name|dir
argument_list|,
name|perm
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|perm
operator|.
name|equals
argument_list|(
name|perm
operator|.
name|applyUMask
argument_list|(
name|localFs
operator|.
name|getUMask
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|localFs
operator|.
name|setPermission
argument_list|(
name|dir
argument_list|,
name|perm
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getDiskUtilizationPercentageCutoff ()
specifier|public
name|float
name|getDiskUtilizationPercentageCutoff
parameter_list|()
block|{
return|return
name|diskUtilizationPercentageCutoff
return|;
block|}
DECL|method|setDiskUtilizationPercentageCutoff ( float diskUtilizationPercentageCutoff)
specifier|public
name|void
name|setDiskUtilizationPercentageCutoff
parameter_list|(
name|float
name|diskUtilizationPercentageCutoff
parameter_list|)
block|{
name|this
operator|.
name|diskUtilizationPercentageCutoff
operator|=
name|diskUtilizationPercentageCutoff
operator|<
literal|0.0F
condition|?
literal|0.0F
else|:
operator|(
name|diskUtilizationPercentageCutoff
operator|>
literal|100.0F
condition|?
literal|100.0F
else|:
name|diskUtilizationPercentageCutoff
operator|)
expr_stmt|;
block|}
DECL|method|getDiskUtilizationSpaceCutoff ()
specifier|public
name|long
name|getDiskUtilizationSpaceCutoff
parameter_list|()
block|{
return|return
name|diskUtilizationSpaceCutoff
return|;
block|}
DECL|method|setDiskUtilizationSpaceCutoff (long diskUtilizationSpaceCutoff)
specifier|public
name|void
name|setDiskUtilizationSpaceCutoff
parameter_list|(
name|long
name|diskUtilizationSpaceCutoff
parameter_list|)
block|{
name|diskUtilizationSpaceCutoff
operator|=
name|diskUtilizationSpaceCutoff
operator|<
literal|0
condition|?
literal|0
else|:
name|diskUtilizationSpaceCutoff
expr_stmt|;
name|this
operator|.
name|diskUtilizationSpaceCutoff
operator|=
name|diskUtilizationSpaceCutoff
expr_stmt|;
block|}
block|}
end_class

end_unit

