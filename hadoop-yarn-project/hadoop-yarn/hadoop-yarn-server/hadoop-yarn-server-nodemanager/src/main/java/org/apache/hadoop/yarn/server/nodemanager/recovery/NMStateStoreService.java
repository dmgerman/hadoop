begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.recovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerRetryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|LocalResourceProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|ContainerManagerApplicationProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|DeletionServiceDeleteTaskProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|LocalizedResourceProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|LogDeleterProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|MasterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeStatusUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ResourceMappings
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|NMStateStoreService
specifier|public
specifier|abstract
class|class
name|NMStateStoreService
extends|extends
name|AbstractService
block|{
DECL|field|nodeStatusUpdater
specifier|private
name|NodeStatusUpdater
name|nodeStatusUpdater
init|=
literal|null
decl_stmt|;
DECL|method|NMStateStoreService (String name)
specifier|public
name|NMStateStoreService
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|getNodeStatusUpdater ()
specifier|protected
name|NodeStatusUpdater
name|getNodeStatusUpdater
parameter_list|()
block|{
return|return
name|nodeStatusUpdater
return|;
block|}
DECL|method|setNodeStatusUpdater (NodeStatusUpdater nodeStatusUpdater)
specifier|public
name|void
name|setNodeStatusUpdater
parameter_list|(
name|NodeStatusUpdater
name|nodeStatusUpdater
parameter_list|)
block|{
name|this
operator|.
name|nodeStatusUpdater
operator|=
name|nodeStatusUpdater
expr_stmt|;
block|}
DECL|class|RecoveredApplicationsState
specifier|public
specifier|static
class|class
name|RecoveredApplicationsState
block|{
DECL|field|applications
name|List
argument_list|<
name|ContainerManagerApplicationProto
argument_list|>
name|applications
decl_stmt|;
DECL|method|getApplications ()
specifier|public
name|List
argument_list|<
name|ContainerManagerApplicationProto
argument_list|>
name|getApplications
parameter_list|()
block|{
return|return
name|applications
return|;
block|}
block|}
comment|/**    * Type of post recovery action.    */
DECL|enum|RecoveredContainerType
specifier|public
enum|enum
name|RecoveredContainerType
block|{
DECL|enumConstant|KILL
DECL|enumConstant|RECOVER
name|KILL
block|,
name|RECOVER
block|}
DECL|enum|RecoveredContainerStatus
specifier|public
enum|enum
name|RecoveredContainerStatus
block|{
DECL|enumConstant|REQUESTED
name|REQUESTED
block|,
DECL|enumConstant|QUEUED
name|QUEUED
block|,
DECL|enumConstant|LAUNCHED
name|LAUNCHED
block|,
DECL|enumConstant|COMPLETED
name|COMPLETED
block|,
DECL|enumConstant|PAUSED
name|PAUSED
block|}
DECL|class|RecoveredContainerState
specifier|public
specifier|static
class|class
name|RecoveredContainerState
block|{
DECL|field|status
name|RecoveredContainerStatus
name|status
decl_stmt|;
DECL|field|exitCode
name|int
name|exitCode
init|=
name|ContainerExitStatus
operator|.
name|INVALID
decl_stmt|;
DECL|field|killed
name|boolean
name|killed
init|=
literal|false
decl_stmt|;
DECL|field|diagnostics
name|String
name|diagnostics
init|=
literal|""
decl_stmt|;
DECL|field|startRequest
name|StartContainerRequest
name|startRequest
decl_stmt|;
DECL|field|capability
name|Resource
name|capability
decl_stmt|;
DECL|field|remainingRetryAttempts
specifier|private
name|int
name|remainingRetryAttempts
init|=
name|ContainerRetryContext
operator|.
name|RETRY_INVALID
decl_stmt|;
DECL|field|workDir
specifier|private
name|String
name|workDir
decl_stmt|;
DECL|field|logDir
specifier|private
name|String
name|logDir
decl_stmt|;
DECL|field|version
name|int
name|version
decl_stmt|;
DECL|field|recoveryType
specifier|private
name|RecoveredContainerType
name|recoveryType
init|=
name|RecoveredContainerType
operator|.
name|RECOVER
decl_stmt|;
DECL|field|startTime
specifier|private
name|long
name|startTime
decl_stmt|;
DECL|field|resMappings
specifier|private
name|ResourceMappings
name|resMappings
init|=
operator|new
name|ResourceMappings
argument_list|()
decl_stmt|;
DECL|method|getStatus ()
specifier|public
name|RecoveredContainerStatus
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
DECL|method|getExitCode ()
specifier|public
name|int
name|getExitCode
parameter_list|()
block|{
return|return
name|exitCode
return|;
block|}
DECL|method|getKilled ()
specifier|public
name|boolean
name|getKilled
parameter_list|()
block|{
return|return
name|killed
return|;
block|}
DECL|method|getDiagnostics ()
specifier|public
name|String
name|getDiagnostics
parameter_list|()
block|{
return|return
name|diagnostics
return|;
block|}
DECL|method|getVersion ()
specifier|public
name|int
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
DECL|method|setStartTime (long ts)
specifier|public
name|void
name|setStartTime
parameter_list|(
name|long
name|ts
parameter_list|)
block|{
name|startTime
operator|=
name|ts
expr_stmt|;
block|}
DECL|method|getStartRequest ()
specifier|public
name|StartContainerRequest
name|getStartRequest
parameter_list|()
block|{
return|return
name|startRequest
return|;
block|}
DECL|method|getCapability ()
specifier|public
name|Resource
name|getCapability
parameter_list|()
block|{
return|return
name|capability
return|;
block|}
DECL|method|getRemainingRetryAttempts ()
specifier|public
name|int
name|getRemainingRetryAttempts
parameter_list|()
block|{
return|return
name|remainingRetryAttempts
return|;
block|}
DECL|method|setRemainingRetryAttempts (int retryAttempts)
specifier|public
name|void
name|setRemainingRetryAttempts
parameter_list|(
name|int
name|retryAttempts
parameter_list|)
block|{
name|this
operator|.
name|remainingRetryAttempts
operator|=
name|retryAttempts
expr_stmt|;
block|}
DECL|method|getWorkDir ()
specifier|public
name|String
name|getWorkDir
parameter_list|()
block|{
return|return
name|workDir
return|;
block|}
DECL|method|setWorkDir (String workDir)
specifier|public
name|void
name|setWorkDir
parameter_list|(
name|String
name|workDir
parameter_list|)
block|{
name|this
operator|.
name|workDir
operator|=
name|workDir
expr_stmt|;
block|}
DECL|method|getLogDir ()
specifier|public
name|String
name|getLogDir
parameter_list|()
block|{
return|return
name|logDir
return|;
block|}
DECL|method|setLogDir (String logDir)
specifier|public
name|void
name|setLogDir
parameter_list|(
name|String
name|logDir
parameter_list|)
block|{
name|this
operator|.
name|logDir
operator|=
name|logDir
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuffer
argument_list|(
literal|"Status: "
argument_list|)
operator|.
name|append
argument_list|(
name|getStatus
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", Exit code: "
argument_list|)
operator|.
name|append
argument_list|(
name|exitCode
argument_list|)
operator|.
name|append
argument_list|(
literal|", Version: "
argument_list|)
operator|.
name|append
argument_list|(
name|version
argument_list|)
operator|.
name|append
argument_list|(
literal|", Start Time: "
argument_list|)
operator|.
name|append
argument_list|(
name|startTime
argument_list|)
operator|.
name|append
argument_list|(
literal|", Killed: "
argument_list|)
operator|.
name|append
argument_list|(
name|getKilled
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", Diagnostics: "
argument_list|)
operator|.
name|append
argument_list|(
name|getDiagnostics
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", Capability: "
argument_list|)
operator|.
name|append
argument_list|(
name|getCapability
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", StartRequest: "
argument_list|)
operator|.
name|append
argument_list|(
name|getStartRequest
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", RemainingRetryAttempts: "
argument_list|)
operator|.
name|append
argument_list|(
name|remainingRetryAttempts
argument_list|)
operator|.
name|append
argument_list|(
literal|", WorkDir: "
argument_list|)
operator|.
name|append
argument_list|(
name|workDir
argument_list|)
operator|.
name|append
argument_list|(
literal|", LogDir: "
argument_list|)
operator|.
name|append
argument_list|(
name|logDir
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getRecoveryType ()
specifier|public
name|RecoveredContainerType
name|getRecoveryType
parameter_list|()
block|{
return|return
name|recoveryType
return|;
block|}
DECL|method|setRecoveryType (RecoveredContainerType recoveryType)
specifier|public
name|void
name|setRecoveryType
parameter_list|(
name|RecoveredContainerType
name|recoveryType
parameter_list|)
block|{
name|this
operator|.
name|recoveryType
operator|=
name|recoveryType
expr_stmt|;
block|}
DECL|method|getResourceMappings ()
specifier|public
name|ResourceMappings
name|getResourceMappings
parameter_list|()
block|{
return|return
name|resMappings
return|;
block|}
DECL|method|setResourceMappings (ResourceMappings mappings)
specifier|public
name|void
name|setResourceMappings
parameter_list|(
name|ResourceMappings
name|mappings
parameter_list|)
block|{
name|this
operator|.
name|resMappings
operator|=
name|mappings
expr_stmt|;
block|}
block|}
DECL|class|LocalResourceTrackerState
specifier|public
specifier|static
class|class
name|LocalResourceTrackerState
block|{
DECL|field|localizedResources
name|List
argument_list|<
name|LocalizedResourceProto
argument_list|>
name|localizedResources
init|=
operator|new
name|ArrayList
argument_list|<
name|LocalizedResourceProto
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|inProgressResources
name|Map
argument_list|<
name|LocalResourceProto
argument_list|,
name|Path
argument_list|>
name|inProgressResources
init|=
operator|new
name|HashMap
argument_list|<
name|LocalResourceProto
argument_list|,
name|Path
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|getLocalizedResources ()
specifier|public
name|List
argument_list|<
name|LocalizedResourceProto
argument_list|>
name|getLocalizedResources
parameter_list|()
block|{
return|return
name|localizedResources
return|;
block|}
DECL|method|getInProgressResources ()
specifier|public
name|Map
argument_list|<
name|LocalResourceProto
argument_list|,
name|Path
argument_list|>
name|getInProgressResources
parameter_list|()
block|{
return|return
name|inProgressResources
return|;
block|}
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|localizedResources
operator|.
name|isEmpty
argument_list|()
operator|&&
name|inProgressResources
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
DECL|class|RecoveredUserResources
specifier|public
specifier|static
class|class
name|RecoveredUserResources
block|{
DECL|field|privateTrackerState
name|LocalResourceTrackerState
name|privateTrackerState
init|=
operator|new
name|LocalResourceTrackerState
argument_list|()
decl_stmt|;
DECL|field|appTrackerStates
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|LocalResourceTrackerState
argument_list|>
name|appTrackerStates
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationId
argument_list|,
name|LocalResourceTrackerState
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|getPrivateTrackerState ()
specifier|public
name|LocalResourceTrackerState
name|getPrivateTrackerState
parameter_list|()
block|{
return|return
name|privateTrackerState
return|;
block|}
specifier|public
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|LocalResourceTrackerState
argument_list|>
DECL|method|getAppTrackerStates ()
name|getAppTrackerStates
parameter_list|()
block|{
return|return
name|appTrackerStates
return|;
block|}
block|}
DECL|class|RecoveredLocalizationState
specifier|public
specifier|static
class|class
name|RecoveredLocalizationState
block|{
DECL|field|publicTrackerState
name|LocalResourceTrackerState
name|publicTrackerState
init|=
operator|new
name|LocalResourceTrackerState
argument_list|()
decl_stmt|;
DECL|field|userResources
name|Map
argument_list|<
name|String
argument_list|,
name|RecoveredUserResources
argument_list|>
name|userResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RecoveredUserResources
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|getPublicTrackerState ()
specifier|public
name|LocalResourceTrackerState
name|getPublicTrackerState
parameter_list|()
block|{
return|return
name|publicTrackerState
return|;
block|}
DECL|method|getUserResources ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|RecoveredUserResources
argument_list|>
name|getUserResources
parameter_list|()
block|{
return|return
name|userResources
return|;
block|}
block|}
DECL|class|RecoveredDeletionServiceState
specifier|public
specifier|static
class|class
name|RecoveredDeletionServiceState
block|{
DECL|field|tasks
name|List
argument_list|<
name|DeletionServiceDeleteTaskProto
argument_list|>
name|tasks
decl_stmt|;
DECL|method|getTasks ()
specifier|public
name|List
argument_list|<
name|DeletionServiceDeleteTaskProto
argument_list|>
name|getTasks
parameter_list|()
block|{
return|return
name|tasks
return|;
block|}
block|}
DECL|class|RecoveredNMTokensState
specifier|public
specifier|static
class|class
name|RecoveredNMTokensState
block|{
DECL|field|currentMasterKey
name|MasterKey
name|currentMasterKey
decl_stmt|;
DECL|field|previousMasterKey
name|MasterKey
name|previousMasterKey
decl_stmt|;
DECL|field|applicationMasterKeys
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|MasterKey
argument_list|>
name|applicationMasterKeys
decl_stmt|;
DECL|method|getCurrentMasterKey ()
specifier|public
name|MasterKey
name|getCurrentMasterKey
parameter_list|()
block|{
return|return
name|currentMasterKey
return|;
block|}
DECL|method|getPreviousMasterKey ()
specifier|public
name|MasterKey
name|getPreviousMasterKey
parameter_list|()
block|{
return|return
name|previousMasterKey
return|;
block|}
DECL|method|getApplicationMasterKeys ()
specifier|public
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|MasterKey
argument_list|>
name|getApplicationMasterKeys
parameter_list|()
block|{
return|return
name|applicationMasterKeys
return|;
block|}
block|}
DECL|class|RecoveredContainerTokensState
specifier|public
specifier|static
class|class
name|RecoveredContainerTokensState
block|{
DECL|field|currentMasterKey
name|MasterKey
name|currentMasterKey
decl_stmt|;
DECL|field|previousMasterKey
name|MasterKey
name|previousMasterKey
decl_stmt|;
DECL|field|activeTokens
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|Long
argument_list|>
name|activeTokens
decl_stmt|;
DECL|method|getCurrentMasterKey ()
specifier|public
name|MasterKey
name|getCurrentMasterKey
parameter_list|()
block|{
return|return
name|currentMasterKey
return|;
block|}
DECL|method|getPreviousMasterKey ()
specifier|public
name|MasterKey
name|getPreviousMasterKey
parameter_list|()
block|{
return|return
name|previousMasterKey
return|;
block|}
DECL|method|getActiveTokens ()
specifier|public
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|Long
argument_list|>
name|getActiveTokens
parameter_list|()
block|{
return|return
name|activeTokens
return|;
block|}
block|}
DECL|class|RecoveredLogDeleterState
specifier|public
specifier|static
class|class
name|RecoveredLogDeleterState
block|{
DECL|field|logDeleterMap
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|LogDeleterProto
argument_list|>
name|logDeleterMap
decl_stmt|;
DECL|method|getLogDeleterMap ()
specifier|public
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|LogDeleterProto
argument_list|>
name|getLogDeleterMap
parameter_list|()
block|{
return|return
name|logDeleterMap
return|;
block|}
block|}
comment|/**    * Recovered states for AMRMProxy.    */
DECL|class|RecoveredAMRMProxyState
specifier|public
specifier|static
class|class
name|RecoveredAMRMProxyState
block|{
DECL|field|currentMasterKey
specifier|private
name|MasterKey
name|currentMasterKey
decl_stmt|;
DECL|field|nextMasterKey
specifier|private
name|MasterKey
name|nextMasterKey
decl_stmt|;
comment|// For each app, stores amrmToken, user name, as well as various AMRMProxy
comment|// intercepter states
DECL|field|appContexts
specifier|private
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|appContexts
decl_stmt|;
DECL|method|RecoveredAMRMProxyState ()
specifier|public
name|RecoveredAMRMProxyState
parameter_list|()
block|{
name|appContexts
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|getCurrentMasterKey ()
specifier|public
name|MasterKey
name|getCurrentMasterKey
parameter_list|()
block|{
return|return
name|currentMasterKey
return|;
block|}
DECL|method|getNextMasterKey ()
specifier|public
name|MasterKey
name|getNextMasterKey
parameter_list|()
block|{
return|return
name|nextMasterKey
return|;
block|}
DECL|method|getAppContexts ()
specifier|public
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|getAppContexts
parameter_list|()
block|{
return|return
name|appContexts
return|;
block|}
DECL|method|setCurrentMasterKey (MasterKey currentKey)
specifier|public
name|void
name|setCurrentMasterKey
parameter_list|(
name|MasterKey
name|currentKey
parameter_list|)
block|{
name|currentMasterKey
operator|=
name|currentKey
expr_stmt|;
block|}
DECL|method|setNextMasterKey (MasterKey nextKey)
specifier|public
name|void
name|setNextMasterKey
parameter_list|(
name|MasterKey
name|nextKey
parameter_list|)
block|{
name|nextMasterKey
operator|=
name|nextKey
expr_stmt|;
block|}
block|}
comment|/** Initialize the state storage */
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|public
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|initStorage
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/** Start the state storage for use */
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|public
name|void
name|serviceStart
parameter_list|()
throws|throws
name|IOException
block|{
name|startStorage
argument_list|()
expr_stmt|;
block|}
comment|/** Shutdown the state storage. */
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|public
name|void
name|serviceStop
parameter_list|()
throws|throws
name|IOException
block|{
name|closeStorage
argument_list|()
expr_stmt|;
block|}
DECL|method|canRecover ()
specifier|public
name|boolean
name|canRecover
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|isNewlyCreated ()
specifier|public
name|boolean
name|isNewlyCreated
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**    * Load the state of applications.    * @return recovered state for applications.    * @throws IOException IO Exception.    */
DECL|method|loadApplicationsState ()
specifier|public
specifier|abstract
name|RecoveredApplicationsState
name|loadApplicationsState
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Record the start of an application    * @param appId the application ID    * @param p state to store for the application    * @throws IOException    */
DECL|method|storeApplication (ApplicationId appId, ContainerManagerApplicationProto p)
specifier|public
specifier|abstract
name|void
name|storeApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|ContainerManagerApplicationProto
name|p
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Remove records corresponding to an application    * @param appId the application ID    * @throws IOException    */
DECL|method|removeApplication (ApplicationId appId)
specifier|public
specifier|abstract
name|void
name|removeApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Load the state of containers    * @return recovered state for containers    * @throws IOException    */
DECL|method|loadContainersState ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|RecoveredContainerState
argument_list|>
name|loadContainersState
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Record a container start request    * @param containerId the container ID    * @param containerVersion the container Version    * @param startTime container start time    * @param startRequest the container start request    * @throws IOException    */
DECL|method|storeContainer (ContainerId containerId, int containerVersion, long startTime, StartContainerRequest startRequest)
specifier|public
specifier|abstract
name|void
name|storeContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|int
name|containerVersion
parameter_list|,
name|long
name|startTime
parameter_list|,
name|StartContainerRequest
name|startRequest
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Record that a container has been queued at the NM    * @param containerId the container ID    * @throws IOException    */
DECL|method|storeContainerQueued (ContainerId containerId)
specifier|public
specifier|abstract
name|void
name|storeContainerQueued
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Record that a container has been paused at the NM.    * @param containerId the container ID.    * @throws IOException IO Exception.    */
DECL|method|storeContainerPaused (ContainerId containerId)
specifier|public
specifier|abstract
name|void
name|storeContainerPaused
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Record that a container has been resumed at the NM by removing the    * fact that it has be paused.    * @param containerId the container ID.    * @throws IOException IO Exception.    */
DECL|method|removeContainerPaused (ContainerId containerId)
specifier|public
specifier|abstract
name|void
name|removeContainerPaused
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Record that a container has been launched    * @param containerId the container ID    * @throws IOException    */
DECL|method|storeContainerLaunched (ContainerId containerId)
specifier|public
specifier|abstract
name|void
name|storeContainerLaunched
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Record that a container has been updated    * @param containerId the container ID    * @param containerTokenIdentifier container token identifier    * @throws IOException    */
DECL|method|storeContainerUpdateToken (ContainerId containerId, ContainerTokenIdentifier containerTokenIdentifier)
specifier|public
specifier|abstract
name|void
name|storeContainerUpdateToken
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|ContainerTokenIdentifier
name|containerTokenIdentifier
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Record that a container has completed    * @param containerId the container ID    * @param exitCode the exit code from the container    * @throws IOException    */
DECL|method|storeContainerCompleted (ContainerId containerId, int exitCode)
specifier|public
specifier|abstract
name|void
name|storeContainerCompleted
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|int
name|exitCode
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Record a request to kill a container    * @param containerId the container ID    * @throws IOException    */
DECL|method|storeContainerKilled (ContainerId containerId)
specifier|public
specifier|abstract
name|void
name|storeContainerKilled
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Record diagnostics for a container    * @param containerId the container ID    * @param diagnostics the container diagnostics    * @throws IOException    */
DECL|method|storeContainerDiagnostics (ContainerId containerId, StringBuilder diagnostics)
specifier|public
specifier|abstract
name|void
name|storeContainerDiagnostics
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|StringBuilder
name|diagnostics
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Record remaining retry attempts for a container.    * @param containerId the container ID    * @param remainingRetryAttempts the remain retry times when container    *                               fails to run    * @throws IOException    */
DECL|method|storeContainerRemainingRetryAttempts ( ContainerId containerId, int remainingRetryAttempts)
specifier|public
specifier|abstract
name|void
name|storeContainerRemainingRetryAttempts
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|int
name|remainingRetryAttempts
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Record working directory for a container.    * @param containerId the container ID    * @param workDir the working directory    * @throws IOException    */
DECL|method|storeContainerWorkDir ( ContainerId containerId, String workDir)
specifier|public
specifier|abstract
name|void
name|storeContainerWorkDir
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|String
name|workDir
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Record log directory for a container.    * @param containerId the container ID    * @param logDir the log directory    * @throws IOException    */
DECL|method|storeContainerLogDir ( ContainerId containerId, String logDir)
specifier|public
specifier|abstract
name|void
name|storeContainerLogDir
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|String
name|logDir
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Remove records corresponding to a container    * @param containerId the container ID    * @throws IOException    */
DECL|method|removeContainer (ContainerId containerId)
specifier|public
specifier|abstract
name|void
name|removeContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Load the state of localized resources    * @return recovered localized resource state    * @throws IOException    */
DECL|method|loadLocalizationState ()
specifier|public
specifier|abstract
name|RecoveredLocalizationState
name|loadLocalizationState
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Record the start of localization for a resource    * @param user the username or null if the resource is public    * @param appId the application ID if the resource is app-specific or null    * @param proto the resource request    * @param localPath local filesystem path where the resource will be stored    * @throws IOException    */
DECL|method|startResourceLocalization (String user, ApplicationId appId, LocalResourceProto proto, Path localPath)
specifier|public
specifier|abstract
name|void
name|startResourceLocalization
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|LocalResourceProto
name|proto
parameter_list|,
name|Path
name|localPath
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Record the completion of a resource localization    * @param user the username or null if the resource is public    * @param appId the application ID if the resource is app-specific or null    * @param proto the serialized localized resource    * @throws IOException    */
DECL|method|finishResourceLocalization (String user, ApplicationId appId, LocalizedResourceProto proto)
specifier|public
specifier|abstract
name|void
name|finishResourceLocalization
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|LocalizedResourceProto
name|proto
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Remove records related to a resource localization    * @param user the username or null if the resource is public    * @param appId the application ID if the resource is app-specific or null    * @param localPath local filesystem path where the resource will be stored    * @throws IOException    */
DECL|method|removeLocalizedResource (String user, ApplicationId appId, Path localPath)
specifier|public
specifier|abstract
name|void
name|removeLocalizedResource
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|Path
name|localPath
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Load the state of the deletion service    * @return recovered deletion service state    * @throws IOException    */
DECL|method|loadDeletionServiceState ()
specifier|public
specifier|abstract
name|RecoveredDeletionServiceState
name|loadDeletionServiceState
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Record a deletion task    * @param taskId the deletion task ID    * @param taskProto the deletion task protobuf    * @throws IOException    */
DECL|method|storeDeletionTask (int taskId, DeletionServiceDeleteTaskProto taskProto)
specifier|public
specifier|abstract
name|void
name|storeDeletionTask
parameter_list|(
name|int
name|taskId
parameter_list|,
name|DeletionServiceDeleteTaskProto
name|taskProto
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Remove records corresponding to a deletion task    * @param taskId the deletion task ID    * @throws IOException    */
DECL|method|removeDeletionTask (int taskId)
specifier|public
specifier|abstract
name|void
name|removeDeletionTask
parameter_list|(
name|int
name|taskId
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Load the state of NM tokens    * @return recovered state of NM tokens    * @throws IOException    */
DECL|method|loadNMTokensState ()
specifier|public
specifier|abstract
name|RecoveredNMTokensState
name|loadNMTokensState
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Record the current NM token master key    * @param key the master key    * @throws IOException    */
DECL|method|storeNMTokenCurrentMasterKey (MasterKey key)
specifier|public
specifier|abstract
name|void
name|storeNMTokenCurrentMasterKey
parameter_list|(
name|MasterKey
name|key
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Record the previous NM token master key    * @param key the previous master key    * @throws IOException    */
DECL|method|storeNMTokenPreviousMasterKey (MasterKey key)
specifier|public
specifier|abstract
name|void
name|storeNMTokenPreviousMasterKey
parameter_list|(
name|MasterKey
name|key
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Record a master key corresponding to an application    * @param attempt the application attempt ID    * @param key the master key    * @throws IOException    */
DECL|method|storeNMTokenApplicationMasterKey ( ApplicationAttemptId attempt, MasterKey key)
specifier|public
specifier|abstract
name|void
name|storeNMTokenApplicationMasterKey
parameter_list|(
name|ApplicationAttemptId
name|attempt
parameter_list|,
name|MasterKey
name|key
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Remove a master key corresponding to an application    * @param attempt the application attempt ID    * @throws IOException    */
DECL|method|removeNMTokenApplicationMasterKey ( ApplicationAttemptId attempt)
specifier|public
specifier|abstract
name|void
name|removeNMTokenApplicationMasterKey
parameter_list|(
name|ApplicationAttemptId
name|attempt
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Load the state of container tokens    * @return recovered state of container tokens    * @throws IOException    */
DECL|method|loadContainerTokensState ()
specifier|public
specifier|abstract
name|RecoveredContainerTokensState
name|loadContainerTokensState
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Record the current container token master key    * @param key the master key    * @throws IOException    */
DECL|method|storeContainerTokenCurrentMasterKey (MasterKey key)
specifier|public
specifier|abstract
name|void
name|storeContainerTokenCurrentMasterKey
parameter_list|(
name|MasterKey
name|key
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Record the previous container token master key    * @param key the previous master key    * @throws IOException    */
DECL|method|storeContainerTokenPreviousMasterKey (MasterKey key)
specifier|public
specifier|abstract
name|void
name|storeContainerTokenPreviousMasterKey
parameter_list|(
name|MasterKey
name|key
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Record the expiration time for a container token    * @param containerId the container ID    * @param expirationTime the container token expiration time    * @throws IOException    */
DECL|method|storeContainerToken (ContainerId containerId, Long expirationTime)
specifier|public
specifier|abstract
name|void
name|storeContainerToken
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Long
name|expirationTime
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Remove records for a container token    * @param containerId the container ID    * @throws IOException    */
DECL|method|removeContainerToken (ContainerId containerId)
specifier|public
specifier|abstract
name|void
name|removeContainerToken
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Load the state of log deleters    * @return recovered log deleter state    * @throws IOException    */
DECL|method|loadLogDeleterState ()
specifier|public
specifier|abstract
name|RecoveredLogDeleterState
name|loadLogDeleterState
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Store the state of a log deleter    * @param appId the application ID for the log deleter    * @param proto the serialized state of the log deleter    * @throws IOException    */
DECL|method|storeLogDeleter (ApplicationId appId, LogDeleterProto proto)
specifier|public
specifier|abstract
name|void
name|storeLogDeleter
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|LogDeleterProto
name|proto
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Remove the state of a log deleter    * @param appId the application ID for the log deleter    * @throws IOException    */
DECL|method|removeLogDeleter (ApplicationId appId)
specifier|public
specifier|abstract
name|void
name|removeLogDeleter
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Load the state of AMRMProxy.    * @return recovered state of AMRMProxy    * @throws IOException if fails    */
DECL|method|loadAMRMProxyState ()
specifier|public
specifier|abstract
name|RecoveredAMRMProxyState
name|loadAMRMProxyState
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Record the current AMRMProxyTokenSecretManager master key.    * @param key the current master key    * @throws IOException if fails    */
DECL|method|storeAMRMProxyCurrentMasterKey (MasterKey key)
specifier|public
specifier|abstract
name|void
name|storeAMRMProxyCurrentMasterKey
parameter_list|(
name|MasterKey
name|key
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Record the next AMRMProxyTokenSecretManager master key.    * @param key the next master key    * @throws IOException if fails    */
DECL|method|storeAMRMProxyNextMasterKey (MasterKey key)
specifier|public
specifier|abstract
name|void
name|storeAMRMProxyNextMasterKey
parameter_list|(
name|MasterKey
name|key
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Add a context entry for an application attempt in AMRMProxyService.    * @param attempt app attempt ID    * @param key key string    * @param data state data to store    * @throws IOException if fails    */
DECL|method|storeAMRMProxyAppContextEntry ( ApplicationAttemptId attempt, String key, byte[] data)
specifier|public
specifier|abstract
name|void
name|storeAMRMProxyAppContextEntry
parameter_list|(
name|ApplicationAttemptId
name|attempt
parameter_list|,
name|String
name|key
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Remove a context entry for an application attempt in AMRMProxyService.    * @param attempt attempt ID    * @param key key string    * @throws IOException if fails    */
DECL|method|removeAMRMProxyAppContextEntry ( ApplicationAttemptId attempt, String key)
specifier|public
specifier|abstract
name|void
name|removeAMRMProxyAppContextEntry
parameter_list|(
name|ApplicationAttemptId
name|attempt
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Remove the entire context map for an application attempt in    * AMRMProxyService.    * @param attempt attempt ID    * @throws IOException if fails    */
DECL|method|removeAMRMProxyAppContext (ApplicationAttemptId attempt)
specifier|public
specifier|abstract
name|void
name|removeAMRMProxyAppContext
parameter_list|(
name|ApplicationAttemptId
name|attempt
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Store the assigned resources to a container.    *    * @param container NMContainer    * @param resourceType Resource Type    * @param assignedResources Assigned resources    * @throws IOException if fails    */
DECL|method|storeAssignedResources (Container container, String resourceType, List<Serializable> assignedResources)
specifier|public
specifier|abstract
name|void
name|storeAssignedResources
parameter_list|(
name|Container
name|container
parameter_list|,
name|String
name|resourceType
parameter_list|,
name|List
argument_list|<
name|Serializable
argument_list|>
name|assignedResources
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|initStorage (Configuration conf)
specifier|protected
specifier|abstract
name|void
name|initStorage
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|startStorage ()
specifier|protected
specifier|abstract
name|void
name|startStorage
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|closeStorage ()
specifier|protected
specifier|abstract
name|void
name|closeStorage
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|updateContainerResourceMapping (Container container, String resourceType, List<Serializable> assignedResources)
specifier|protected
name|void
name|updateContainerResourceMapping
parameter_list|(
name|Container
name|container
parameter_list|,
name|String
name|resourceType
parameter_list|,
name|List
argument_list|<
name|Serializable
argument_list|>
name|assignedResources
parameter_list|)
block|{
comment|// Update Container#getResourceMapping.
name|ResourceMappings
operator|.
name|AssignedResources
name|newAssigned
init|=
operator|new
name|ResourceMappings
operator|.
name|AssignedResources
argument_list|()
decl_stmt|;
name|newAssigned
operator|.
name|updateAssignedResources
argument_list|(
name|assignedResources
argument_list|)
expr_stmt|;
name|container
operator|.
name|getResourceMappings
argument_list|()
operator|.
name|addAssignedResources
argument_list|(
name|resourceType
argument_list|,
name|newAssigned
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

