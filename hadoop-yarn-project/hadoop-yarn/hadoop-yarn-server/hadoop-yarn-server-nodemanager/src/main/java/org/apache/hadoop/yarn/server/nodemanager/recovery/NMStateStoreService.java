begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.recovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|LocalResourceProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|DeletionServiceDeleteTaskProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|LocalizedResourceProto
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|NMStateStoreService
specifier|public
specifier|abstract
class|class
name|NMStateStoreService
extends|extends
name|AbstractService
block|{
DECL|method|NMStateStoreService (String name)
specifier|public
name|NMStateStoreService
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|class|LocalResourceTrackerState
specifier|public
specifier|static
class|class
name|LocalResourceTrackerState
block|{
DECL|field|localizedResources
name|List
argument_list|<
name|LocalizedResourceProto
argument_list|>
name|localizedResources
init|=
operator|new
name|ArrayList
argument_list|<
name|LocalizedResourceProto
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|inProgressResources
name|Map
argument_list|<
name|LocalResourceProto
argument_list|,
name|Path
argument_list|>
name|inProgressResources
init|=
operator|new
name|HashMap
argument_list|<
name|LocalResourceProto
argument_list|,
name|Path
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|getLocalizedResources ()
specifier|public
name|List
argument_list|<
name|LocalizedResourceProto
argument_list|>
name|getLocalizedResources
parameter_list|()
block|{
return|return
name|localizedResources
return|;
block|}
DECL|method|getInProgressResources ()
specifier|public
name|Map
argument_list|<
name|LocalResourceProto
argument_list|,
name|Path
argument_list|>
name|getInProgressResources
parameter_list|()
block|{
return|return
name|inProgressResources
return|;
block|}
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|localizedResources
operator|.
name|isEmpty
argument_list|()
operator|&&
name|inProgressResources
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
DECL|class|RecoveredUserResources
specifier|public
specifier|static
class|class
name|RecoveredUserResources
block|{
DECL|field|privateTrackerState
name|LocalResourceTrackerState
name|privateTrackerState
init|=
operator|new
name|LocalResourceTrackerState
argument_list|()
decl_stmt|;
DECL|field|appTrackerStates
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|LocalResourceTrackerState
argument_list|>
name|appTrackerStates
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationId
argument_list|,
name|LocalResourceTrackerState
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|getPrivateTrackerState ()
specifier|public
name|LocalResourceTrackerState
name|getPrivateTrackerState
parameter_list|()
block|{
return|return
name|privateTrackerState
return|;
block|}
specifier|public
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|LocalResourceTrackerState
argument_list|>
DECL|method|getAppTrackerStates ()
name|getAppTrackerStates
parameter_list|()
block|{
return|return
name|appTrackerStates
return|;
block|}
block|}
DECL|class|RecoveredLocalizationState
specifier|public
specifier|static
class|class
name|RecoveredLocalizationState
block|{
DECL|field|publicTrackerState
name|LocalResourceTrackerState
name|publicTrackerState
init|=
operator|new
name|LocalResourceTrackerState
argument_list|()
decl_stmt|;
DECL|field|userResources
name|Map
argument_list|<
name|String
argument_list|,
name|RecoveredUserResources
argument_list|>
name|userResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RecoveredUserResources
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|getPublicTrackerState ()
specifier|public
name|LocalResourceTrackerState
name|getPublicTrackerState
parameter_list|()
block|{
return|return
name|publicTrackerState
return|;
block|}
DECL|method|getUserResources ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|RecoveredUserResources
argument_list|>
name|getUserResources
parameter_list|()
block|{
return|return
name|userResources
return|;
block|}
block|}
DECL|class|RecoveredDeletionServiceState
specifier|public
specifier|static
class|class
name|RecoveredDeletionServiceState
block|{
DECL|field|tasks
name|List
argument_list|<
name|DeletionServiceDeleteTaskProto
argument_list|>
name|tasks
decl_stmt|;
DECL|method|getTasks ()
specifier|public
name|List
argument_list|<
name|DeletionServiceDeleteTaskProto
argument_list|>
name|getTasks
parameter_list|()
block|{
return|return
name|tasks
return|;
block|}
block|}
comment|/** Initialize the state storage */
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|public
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|initStorage
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/** Start the state storage for use */
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|public
name|void
name|serviceStart
parameter_list|()
throws|throws
name|IOException
block|{
name|startStorage
argument_list|()
expr_stmt|;
block|}
comment|/** Shutdown the state storage. */
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|public
name|void
name|serviceStop
parameter_list|()
throws|throws
name|IOException
block|{
name|closeStorage
argument_list|()
expr_stmt|;
block|}
DECL|method|canRecover ()
specifier|public
name|boolean
name|canRecover
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**    * Load the state of localized resources    * @return recovered localized resource state    * @throws IOException    */
DECL|method|loadLocalizationState ()
specifier|public
specifier|abstract
name|RecoveredLocalizationState
name|loadLocalizationState
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Record the start of localization for a resource    * @param user the username or null if the resource is public    * @param appId the application ID if the resource is app-specific or null    * @param proto the resource request    * @param localPath local filesystem path where the resource will be stored    * @throws IOException    */
DECL|method|startResourceLocalization (String user, ApplicationId appId, LocalResourceProto proto, Path localPath)
specifier|public
specifier|abstract
name|void
name|startResourceLocalization
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|LocalResourceProto
name|proto
parameter_list|,
name|Path
name|localPath
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Record the completion of a resource localization    * @param user the username or null if the resource is public    * @param appId the application ID if the resource is app-specific or null    * @param proto the serialized localized resource    * @throws IOException    */
DECL|method|finishResourceLocalization (String user, ApplicationId appId, LocalizedResourceProto proto)
specifier|public
specifier|abstract
name|void
name|finishResourceLocalization
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|LocalizedResourceProto
name|proto
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Remove records related to a resource localization    * @param user the username or null if the resource is public    * @param appId the application ID if the resource is app-specific or null    * @param localPath local filesystem path where the resource will be stored    * @throws IOException    */
DECL|method|removeLocalizedResource (String user, ApplicationId appId, Path localPath)
specifier|public
specifier|abstract
name|void
name|removeLocalizedResource
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|Path
name|localPath
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|loadDeletionServiceState ()
specifier|public
specifier|abstract
name|RecoveredDeletionServiceState
name|loadDeletionServiceState
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|storeDeletionTask (int taskId, DeletionServiceDeleteTaskProto taskProto)
specifier|public
specifier|abstract
name|void
name|storeDeletionTask
parameter_list|(
name|int
name|taskId
parameter_list|,
name|DeletionServiceDeleteTaskProto
name|taskProto
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|removeDeletionTask (int taskId)
specifier|public
specifier|abstract
name|void
name|removeDeletionTask
parameter_list|(
name|int
name|taskId
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|initStorage (Configuration conf)
specifier|protected
specifier|abstract
name|void
name|initStorage
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|startStorage ()
specifier|protected
specifier|abstract
name|void
name|startStorage
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|closeStorage ()
specifier|protected
specifier|abstract
name|void
name|closeStorage
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

