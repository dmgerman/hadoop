begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceUtilization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|metrics
operator|.
name|NodeManagerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ResourceCalculatorPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of the node resource monitor. It periodically tracks the  * resource utilization of the node and reports it to the NM.  */
end_comment

begin_class
DECL|class|NodeResourceMonitorImpl
specifier|public
class|class
name|NodeResourceMonitorImpl
extends|extends
name|AbstractService
implements|implements
name|NodeResourceMonitor
block|{
comment|/** Logging infrastructure. */
DECL|field|LOG
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NodeResourceMonitorImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Interval to monitor the node resource utilization. */
DECL|field|monitoringInterval
specifier|private
name|long
name|monitoringInterval
decl_stmt|;
comment|/** Thread to monitor the node resource utilization. */
DECL|field|monitoringThread
specifier|private
name|MonitoringThread
name|monitoringThread
decl_stmt|;
comment|/** Resource calculator. */
DECL|field|resourceCalculatorPlugin
specifier|private
name|ResourceCalculatorPlugin
name|resourceCalculatorPlugin
decl_stmt|;
comment|/** Current<em>resource utilization</em> of the node. */
DECL|field|nodeUtilization
specifier|private
name|ResourceUtilization
name|nodeUtilization
decl_stmt|;
DECL|field|nmContext
specifier|private
name|Context
name|nmContext
decl_stmt|;
comment|/**    * Initialize the node resource monitor.    */
DECL|method|NodeResourceMonitorImpl (Context context)
specifier|public
name|NodeResourceMonitorImpl
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|NodeResourceMonitorImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|nmContext
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|monitoringThread
operator|=
operator|new
name|MonitoringThread
argument_list|()
expr_stmt|;
block|}
comment|/**    * Initialize the service with the proper parameters.    */
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|monitoringInterval
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RESOURCE_MON_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_RESOURCE_MON_INTERVAL_MS
argument_list|)
expr_stmt|;
name|this
operator|.
name|resourceCalculatorPlugin
operator|=
name|ResourceCalculatorPlugin
operator|.
name|getNodeResourceMonitorPlugin
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" Using ResourceCalculatorPlugin : "
operator|+
name|this
operator|.
name|resourceCalculatorPlugin
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check if we should be monitoring.    * @return<em>true</em> if we can monitor the node resource utilization.    */
DECL|method|isEnabled ()
specifier|private
name|boolean
name|isEnabled
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|monitoringInterval
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Node Resource monitoring interval is<=0. "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" is disabled."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|resourceCalculatorPlugin
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"ResourceCalculatorPlugin is unavailable on this system. "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" is disabled."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Start the thread that does the node resource utilization monitoring.    */
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|this
operator|.
name|monitoringThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
comment|/**    * Stop the thread that does the node resource utilization monitoring.    */
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|this
operator|.
name|monitoringThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|monitoringThread
operator|.
name|join
argument_list|(
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not wait for the thread to join"
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
comment|/**    * Thread that monitors the resource utilization of this node.    */
DECL|class|MonitoringThread
specifier|private
class|class
name|MonitoringThread
extends|extends
name|Thread
block|{
comment|/**      * Initialize the node resource monitoring thread.      */
DECL|method|MonitoringThread ()
specifier|public
name|MonitoringThread
parameter_list|()
block|{
name|super
argument_list|(
literal|"Node Resource Monitor"
argument_list|)
expr_stmt|;
name|this
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Periodically monitor the resource utilization of the node.      */
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
comment|// Get node utilization and save it into the health status
name|long
name|pmem
init|=
name|resourceCalculatorPlugin
operator|.
name|getPhysicalMemorySize
argument_list|()
operator|-
name|resourceCalculatorPlugin
operator|.
name|getAvailablePhysicalMemorySize
argument_list|()
decl_stmt|;
name|long
name|vmem
init|=
name|resourceCalculatorPlugin
operator|.
name|getVirtualMemorySize
argument_list|()
operator|-
name|resourceCalculatorPlugin
operator|.
name|getAvailableVirtualMemorySize
argument_list|()
decl_stmt|;
name|float
name|vcores
init|=
name|resourceCalculatorPlugin
operator|.
name|getNumVCoresUsed
argument_list|()
decl_stmt|;
name|nodeUtilization
operator|=
name|ResourceUtilization
operator|.
name|newInstance
argument_list|(
call|(
name|int
call|)
argument_list|(
name|pmem
operator|>>
literal|20
argument_list|)
argument_list|,
comment|// B -> MB
call|(
name|int
call|)
argument_list|(
name|vmem
operator|>>
literal|20
argument_list|)
argument_list|,
comment|// B -> MB
name|vcores
argument_list|)
expr_stmt|;
comment|// Used Virtual Cores
comment|// Publish the node utilization metrics to node manager
comment|// metrics system.
name|NodeManagerMetrics
name|nmMetrics
init|=
name|nmContext
operator|.
name|getNodeManagerMetrics
argument_list|()
decl_stmt|;
if|if
condition|(
name|nmMetrics
operator|!=
literal|null
condition|)
block|{
name|nmMetrics
operator|.
name|setNodeUsedMemGB
argument_list|(
name|nodeUtilization
operator|.
name|getPhysicalMemory
argument_list|()
argument_list|)
expr_stmt|;
name|nmMetrics
operator|.
name|setNodeUsedVMemGB
argument_list|(
name|nodeUtilization
operator|.
name|getVirtualMemory
argument_list|()
argument_list|)
expr_stmt|;
name|nmMetrics
operator|.
name|setNodeCpuUtilization
argument_list|(
name|nodeUtilization
operator|.
name|getCPU
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|monitoringInterval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|NodeResourceMonitorImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" is interrupted. Exiting."
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
comment|/**    * Get the<em>resource utilization</em> of the node.    * @return<em>resource utilization</em> of the node.    */
annotation|@
name|Override
DECL|method|getUtilization ()
specifier|public
name|ResourceUtilization
name|getUtilization
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodeUtilization
return|;
block|}
block|}
end_class

end_unit

