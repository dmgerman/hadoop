begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * *  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  * /  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.runtime
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|IOStreamPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ResourceLocalizationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|runtime
operator|.
name|ContainerExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|runtime
operator|.
name|ContainerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|runtime
operator|.
name|ContainerRuntimeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|runtime
operator|.
name|ContainerRuntimeContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|executor
operator|.
name|ContainerExecContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This class is a {@link ContainerRuntime} implementation that uses the  * native {@code container-executor} binary via a  * {@link PrivilegedOperationExecutor} instance to launch processes using the  * standard process model.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|DefaultLinuxContainerRuntime
specifier|public
class|class
name|DefaultLinuxContainerRuntime
implements|implements
name|LinuxContainerRuntime
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultLinuxContainerRuntime
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TMP_FILE_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|TMP_FILE_PREFIX
init|=
literal|"yarn."
decl_stmt|;
DECL|field|TMP_FILE_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|TMP_FILE_SUFFIX
init|=
literal|".cmd"
decl_stmt|;
DECL|field|privilegedOperationExecutor
specifier|private
specifier|final
name|PrivilegedOperationExecutor
name|privilegedOperationExecutor
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
comment|/**    * Create an instance using the given {@link PrivilegedOperationExecutor}    * instance for performing operations.    *    * @param privilegedOperationExecutor the {@link PrivilegedOperationExecutor}    * instance    */
DECL|method|DefaultLinuxContainerRuntime (PrivilegedOperationExecutor privilegedOperationExecutor)
specifier|public
name|DefaultLinuxContainerRuntime
parameter_list|(
name|PrivilegedOperationExecutor
name|privilegedOperationExecutor
parameter_list|)
block|{
name|this
operator|.
name|privilegedOperationExecutor
operator|=
name|privilegedOperationExecutor
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isRuntimeRequested (Map<String, String> env)
specifier|public
name|boolean
name|isRuntimeRequested
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|)
block|{
name|String
name|type
init|=
name|env
operator|.
name|get
argument_list|(
name|ContainerRuntimeConstants
operator|.
name|ENV_CONTAINER_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|LINUX_CONTAINER_RUNTIME_TYPE
argument_list|)
expr_stmt|;
block|}
return|return
name|type
operator|==
literal|null
operator|||
name|type
operator|.
name|isEmpty
argument_list|()
operator|||
name|type
operator|.
name|equals
argument_list|(
literal|"default"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|initialize (Configuration conf, Context nmContext)
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Context
name|nmContext
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prepareContainer (ContainerRuntimeContext ctx)
specifier|public
name|void
name|prepareContainer
parameter_list|(
name|ContainerRuntimeContext
name|ctx
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
comment|//nothing to do here at the moment.
block|}
annotation|@
name|Override
DECL|method|launchContainer (ContainerRuntimeContext ctx)
specifier|public
name|void
name|launchContainer
parameter_list|(
name|ContainerRuntimeContext
name|ctx
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
name|PrivilegedOperation
name|launchOp
init|=
operator|new
name|PrivilegedOperation
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|LAUNCH_CONTAINER
argument_list|)
decl_stmt|;
comment|//All of these arguments are expected to be available in the runtime context
name|launchOp
operator|.
name|appendArgs
argument_list|(
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|RUN_AS_USER
argument_list|)
argument_list|,
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|USER
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|PrivilegedOperation
operator|.
name|RunAsUserCommand
operator|.
name|LAUNCH_CONTAINER
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|APPID
argument_list|)
argument_list|,
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|CONTAINER_ID_STR
argument_list|)
argument_list|,
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|CONTAINER_WORK_DIR
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|NM_PRIVATE_CONTAINER_SCRIPT_PATH
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|NM_PRIVATE_TOKENS_PATH
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|keystorePath
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|NM_PRIVATE_KEYSTORE_PATH
argument_list|)
decl_stmt|;
name|Path
name|truststorePath
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|NM_PRIVATE_TRUSTSTORE_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|keystorePath
operator|!=
literal|null
operator|&&
name|truststorePath
operator|!=
literal|null
condition|)
block|{
name|launchOp
operator|.
name|appendArgs
argument_list|(
literal|"--https"
argument_list|,
name|keystorePath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|truststorePath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|launchOp
operator|.
name|appendArgs
argument_list|(
literal|"--http"
argument_list|)
expr_stmt|;
block|}
name|launchOp
operator|.
name|appendArgs
argument_list|(
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|PID_FILE_PATH
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|PrivilegedOperation
operator|.
name|LINUX_FILE_PATH_SEPARATOR
argument_list|,
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|LOCAL_DIRS
argument_list|)
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|PrivilegedOperation
operator|.
name|LINUX_FILE_PATH_SEPARATOR
argument_list|,
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|LOG_DIRS
argument_list|)
argument_list|)
argument_list|,
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|RESOURCES_OPTIONS
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|tcCommandFile
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|TC_COMMAND_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|tcCommandFile
operator|!=
literal|null
condition|)
block|{
name|launchOp
operator|.
name|appendArgs
argument_list|(
name|tcCommandFile
argument_list|)
expr_stmt|;
block|}
comment|// Some failures here are acceptable. Let the calling executor decide.
name|launchOp
operator|.
name|disableFailureLogging
argument_list|()
expr_stmt|;
comment|//List<String> -> stored as List -> fetched/converted to List<String>
comment|//we can't do better here thanks to type-erasure
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|prefixCommands
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|CONTAINER_LAUNCH_PREFIX_COMMANDS
argument_list|)
decl_stmt|;
try|try
block|{
name|privilegedOperationExecutor
operator|.
name|executePrivilegedOperation
argument_list|(
name|prefixCommands
argument_list|,
name|launchOp
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PrivilegedOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
literal|"Launch container failed"
argument_list|,
name|e
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|e
operator|.
name|getOutput
argument_list|()
argument_list|,
name|e
operator|.
name|getErrorOutput
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|relaunchContainer (ContainerRuntimeContext ctx)
specifier|public
name|void
name|relaunchContainer
parameter_list|(
name|ContainerRuntimeContext
name|ctx
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
name|launchContainer
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|signalContainer (ContainerRuntimeContext ctx)
specifier|public
name|void
name|signalContainer
parameter_list|(
name|ContainerRuntimeContext
name|ctx
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
name|PrivilegedOperation
name|signalOp
init|=
operator|new
name|PrivilegedOperation
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|SIGNAL_CONTAINER
argument_list|)
decl_stmt|;
name|signalOp
operator|.
name|appendArgs
argument_list|(
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|RUN_AS_USER
argument_list|)
argument_list|,
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|USER
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|PrivilegedOperation
operator|.
name|RunAsUserCommand
operator|.
name|SIGNAL_CONTAINER
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|PID
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|SIGNAL
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//Some failures here are acceptable. Let the calling executor decide.
name|signalOp
operator|.
name|disableFailureLogging
argument_list|()
expr_stmt|;
try|try
block|{
name|PrivilegedOperationExecutor
name|executor
init|=
name|PrivilegedOperationExecutor
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|executor
operator|.
name|executePrivilegedOperation
argument_list|(
literal|null
argument_list|,
name|signalOp
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PrivilegedOperationException
name|e
parameter_list|)
block|{
comment|//Don't log the failure here. Some kinds of signaling failures are
comment|// acceptable. Let the calling executor decide what to do.
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
literal|"Signal container failed"
argument_list|,
name|e
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|e
operator|.
name|getOutput
argument_list|()
argument_list|,
name|e
operator|.
name|getErrorOutput
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|reapContainer (ContainerRuntimeContext ctx)
specifier|public
name|void
name|reapContainer
parameter_list|(
name|ContainerRuntimeContext
name|ctx
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{    }
annotation|@
name|Override
DECL|method|getIpAndHost (Container container)
specifier|public
name|String
index|[]
name|getIpAndHost
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
return|return
name|ContainerExecutor
operator|.
name|getLocalIpAndHost
argument_list|(
name|container
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getExposedPorts (Container container)
specifier|public
name|String
name|getExposedPorts
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|execContainer (ContainerExecContext ctx)
specifier|public
name|IOStreamPair
name|execContainer
parameter_list|(
name|ContainerExecContext
name|ctx
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
name|IOStreamPair
name|output
decl_stmt|;
try|try
block|{
name|PrivilegedOperation
name|privOp
init|=
operator|new
name|PrivilegedOperation
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|EXEC_CONTAINER
argument_list|)
decl_stmt|;
name|String
name|commandFile
init|=
name|writeCommandToTempFile
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|privOp
operator|.
name|appendArgs
argument_list|(
name|commandFile
argument_list|)
expr_stmt|;
name|privOp
operator|.
name|disableFailureLogging
argument_list|()
expr_stmt|;
name|output
operator|=
name|privilegedOperationExecutor
operator|.
name|executePrivilegedInteractiveOperation
argument_list|(
literal|null
argument_list|,
name|privOp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PrivilegedOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
literal|"Execute container interactive shell failed"
argument_list|,
name|e
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|e
operator|.
name|getOutput
argument_list|()
argument_list|,
name|e
operator|.
name|getErrorOutput
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"InterruptedException executing command: "
argument_list|,
name|ie
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|output
return|;
block|}
DECL|method|writeCommandToTempFile (ContainerExecContext ctx)
specifier|private
name|String
name|writeCommandToTempFile
parameter_list|(
name|ContainerExecContext
name|ctx
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
name|Container
name|container
init|=
name|ctx
operator|.
name|getContainer
argument_list|()
decl_stmt|;
name|File
name|cmdDir
init|=
literal|null
decl_stmt|;
name|String
name|appId
init|=
name|container
operator|.
name|getContainerId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|containerId
init|=
name|container
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|filePrefix
init|=
name|containerId
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|cmdDirPath
init|=
name|ctx
operator|.
name|getLocalDirsHandlerService
argument_list|()
operator|.
name|getLocalPathForWrite
argument_list|(
name|ResourceLocalizationService
operator|.
name|NM_PRIVATE_DIR
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|appId
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|filePrefix
operator|+
name|Path
operator|.
name|SEPARATOR
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|cmdDir
operator|=
operator|new
name|File
argument_list|(
name|cmdDirPath
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cmdDir
operator|.
name|mkdirs
argument_list|()
operator|&&
operator|!
name|cmdDir
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create container private directory "
operator|+
name|cmdDir
argument_list|)
throw|;
block|}
name|File
name|commandFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|TMP_FILE_PREFIX
operator|+
name|filePrefix
argument_list|,
name|TMP_FILE_SUFFIX
argument_list|,
name|cmdDir
argument_list|)
decl_stmt|;
try|try
init|(
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|commandFile
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
init|;
name|PrintWriter
name|printWriter
operator|=
operator|new
name|PrintWriter
argument_list|(
name|writer
argument_list|)
init|;
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|cmd
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// command = exec
name|List
argument_list|<
name|String
argument_list|>
name|exec
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|exec
operator|.
name|add
argument_list|(
literal|"exec"
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|put
argument_list|(
literal|"command"
argument_list|,
name|exec
argument_list|)
expr_stmt|;
comment|// user = foobar
name|List
argument_list|<
name|String
argument_list|>
name|user
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|user
operator|.
name|add
argument_list|(
name|container
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|put
argument_list|(
literal|"user"
argument_list|,
name|user
argument_list|)
expr_stmt|;
comment|// launch-command = bash,-i
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"/bin/"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ctx
operator|.
name|getShell
argument_list|()
argument_list|)
expr_stmt|;
name|commands
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|commands
operator|.
name|add
argument_list|(
literal|"-ir"
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|put
argument_list|(
literal|"launch-command"
argument_list|,
name|commands
argument_list|)
expr_stmt|;
comment|// workdir = ../nm-local-dir/usercache/appcache/appid/containerid
name|List
argument_list|<
name|String
argument_list|>
name|workdir
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|workdir
operator|.
name|add
argument_list|(
name|container
operator|.
name|getWorkDir
argument_list|()
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|put
argument_list|(
literal|"workdir"
argument_list|,
name|workdir
argument_list|)
expr_stmt|;
comment|// generate cmd file
name|printWriter
operator|.
name|println
argument_list|(
literal|"[command-execution]"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|cmd
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|contains
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
literal|"'=' found in entry for docker command file, key = "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"; value = "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|contains
argument_list|(
literal|"\n"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
literal|"'\\n' found in entry for docker command file, key = "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"; value = "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
throw|;
block|}
name|printWriter
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"="
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|commandFile
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to write command to "
operator|+
name|cmdDir
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

