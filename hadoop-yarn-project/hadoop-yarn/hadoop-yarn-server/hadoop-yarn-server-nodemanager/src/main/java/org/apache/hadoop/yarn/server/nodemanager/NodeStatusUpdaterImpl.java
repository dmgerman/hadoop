begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|impl
operator|.
name|pb
operator|.
name|RecordFactoryPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|CommonNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ResourceManagerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ResourceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ServerRMProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LogAggregationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NMContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterNodeManagerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterNodeManagerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UnRegisterNodeManagerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|MasterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|NodeHealthStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|NodeStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeManager
operator|.
name|NMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|ContainerManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|metrics
operator|.
name|NodeManagerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|nodelabels
operator|.
name|NodeLabelsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|util
operator|.
name|NodeManagerHardwareUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|YarnVersionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
DECL|class|NodeStatusUpdaterImpl
specifier|public
class|class
name|NodeStatusUpdaterImpl
extends|extends
name|AbstractService
implements|implements
name|NodeStatusUpdater
block|{
DECL|field|YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS
specifier|public
specifier|static
specifier|final
name|String
name|YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS
init|=
name|YarnConfiguration
operator|.
name|NM_PREFIX
operator|+
literal|"duration-to-track-stopped-containers"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NodeStatusUpdaterImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|heartbeatMonitor
specifier|private
specifier|final
name|Object
name|heartbeatMonitor
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|Context
name|context
decl_stmt|;
DECL|field|dispatcher
specifier|private
specifier|final
name|Dispatcher
name|dispatcher
decl_stmt|;
DECL|field|nodeId
specifier|private
name|NodeId
name|nodeId
decl_stmt|;
DECL|field|nextHeartBeatInterval
specifier|private
name|long
name|nextHeartBeatInterval
decl_stmt|;
DECL|field|resourceTracker
specifier|private
name|ResourceTracker
name|resourceTracker
decl_stmt|;
DECL|field|totalResource
specifier|private
name|Resource
name|totalResource
decl_stmt|;
DECL|field|httpPort
specifier|private
name|int
name|httpPort
decl_stmt|;
DECL|field|nodeManagerVersionId
specifier|private
name|String
name|nodeManagerVersionId
decl_stmt|;
DECL|field|minimumResourceManagerVersion
specifier|private
name|String
name|minimumResourceManagerVersion
decl_stmt|;
DECL|field|isStopped
specifier|private
specifier|volatile
name|boolean
name|isStopped
decl_stmt|;
DECL|field|tokenKeepAliveEnabled
specifier|private
name|boolean
name|tokenKeepAliveEnabled
decl_stmt|;
DECL|field|tokenRemovalDelayMs
specifier|private
name|long
name|tokenRemovalDelayMs
decl_stmt|;
comment|/** Keeps track of when the next keep alive request should be sent for an app*/
DECL|field|appTokenKeepAliveMap
specifier|private
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|Long
argument_list|>
name|appTokenKeepAliveMap
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationId
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|keepAliveDelayRandom
specifier|private
name|Random
name|keepAliveDelayRandom
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|// It will be used to track recently stopped containers on node manager, this
comment|// is to avoid the misleading no-such-container exception messages on NM, when
comment|// the AM finishes it informs the RM to stop the may-be-already-completed
comment|// containers.
DECL|field|recentlyStoppedContainers
specifier|private
specifier|final
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|Long
argument_list|>
name|recentlyStoppedContainers
decl_stmt|;
comment|// Save the reported completed containers in case of lost heartbeat responses.
comment|// These completed containers will be sent again till a successful response.
DECL|field|pendingCompletedContainers
specifier|private
specifier|final
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|ContainerStatus
argument_list|>
name|pendingCompletedContainers
decl_stmt|;
comment|// Duration for which to track recently stopped container.
DECL|field|durationToTrackStoppedContainers
specifier|private
name|long
name|durationToTrackStoppedContainers
decl_stmt|;
DECL|field|logAggregationEnabled
specifier|private
name|boolean
name|logAggregationEnabled
decl_stmt|;
DECL|field|logAggregationReportForAppsTempList
specifier|private
specifier|final
name|List
argument_list|<
name|LogAggregationReport
argument_list|>
name|logAggregationReportForAppsTempList
decl_stmt|;
DECL|field|healthChecker
specifier|private
specifier|final
name|NodeHealthCheckerService
name|healthChecker
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|final
name|NodeManagerMetrics
name|metrics
decl_stmt|;
DECL|field|statusUpdaterRunnable
specifier|private
name|Runnable
name|statusUpdaterRunnable
decl_stmt|;
DECL|field|statusUpdater
specifier|private
name|Thread
name|statusUpdater
decl_stmt|;
DECL|field|rmIdentifier
specifier|private
name|long
name|rmIdentifier
init|=
name|ResourceManagerConstants
operator|.
name|RM_INVALID_IDENTIFIER
decl_stmt|;
DECL|field|registeredWithRM
specifier|private
name|boolean
name|registeredWithRM
init|=
literal|false
decl_stmt|;
DECL|field|pendingContainersToRemove
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|pendingContainersToRemove
init|=
operator|new
name|HashSet
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|nodeLabelsProvider
specifier|private
specifier|final
name|NodeLabelsProvider
name|nodeLabelsProvider
decl_stmt|;
DECL|field|hasNodeLabelsProvider
specifier|private
specifier|final
name|boolean
name|hasNodeLabelsProvider
decl_stmt|;
DECL|method|NodeStatusUpdaterImpl (Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker, NodeManagerMetrics metrics)
specifier|public
name|NodeStatusUpdaterImpl
parameter_list|(
name|Context
name|context
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|NodeHealthCheckerService
name|healthChecker
parameter_list|,
name|NodeManagerMetrics
name|metrics
parameter_list|)
block|{
name|this
argument_list|(
name|context
argument_list|,
name|dispatcher
argument_list|,
name|healthChecker
argument_list|,
name|metrics
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|NodeStatusUpdaterImpl (Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker, NodeManagerMetrics metrics, NodeLabelsProvider nodeLabelsProvider)
specifier|public
name|NodeStatusUpdaterImpl
parameter_list|(
name|Context
name|context
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|NodeHealthCheckerService
name|healthChecker
parameter_list|,
name|NodeManagerMetrics
name|metrics
parameter_list|,
name|NodeLabelsProvider
name|nodeLabelsProvider
parameter_list|)
block|{
name|super
argument_list|(
name|NodeStatusUpdaterImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|healthChecker
operator|=
name|healthChecker
expr_stmt|;
name|this
operator|.
name|nodeLabelsProvider
operator|=
name|nodeLabelsProvider
expr_stmt|;
name|this
operator|.
name|hasNodeLabelsProvider
operator|=
operator|(
name|nodeLabelsProvider
operator|!=
literal|null
operator|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|dispatcher
operator|=
name|dispatcher
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|this
operator|.
name|recentlyStoppedContainers
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|ContainerId
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|pendingCompletedContainers
operator|=
operator|new
name|HashMap
argument_list|<
name|ContainerId
argument_list|,
name|ContainerStatus
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|logAggregationReportForAppsTempList
operator|=
operator|new
name|ArrayList
argument_list|<
name|LogAggregationReport
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|memoryMb
init|=
name|NodeManagerHardwareUtils
operator|.
name|getContainerMemoryMB
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|float
name|vMemToPMem
init|=
name|conf
operator|.
name|getFloat
argument_list|(
name|YarnConfiguration
operator|.
name|NM_VMEM_PMEM_RATIO
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_VMEM_PMEM_RATIO
argument_list|)
decl_stmt|;
name|int
name|virtualMemoryMb
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|memoryMb
operator|*
name|vMemToPMem
argument_list|)
decl_stmt|;
name|int
name|virtualCores
init|=
name|NodeManagerHardwareUtils
operator|.
name|getVCores
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Nodemanager resources: memory set to "
operator|+
name|memoryMb
operator|+
literal|"MB."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Nodemanager resources: vcores set to "
operator|+
name|virtualCores
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|this
operator|.
name|totalResource
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|memoryMb
argument_list|,
name|virtualCores
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|addResource
argument_list|(
name|totalResource
argument_list|)
expr_stmt|;
name|this
operator|.
name|tokenKeepAliveEnabled
operator|=
name|isTokenKeepAliveEnabled
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|tokenRemovalDelayMs
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NM_EXPIRY_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NM_EXPIRY_INTERVAL_MS
argument_list|)
expr_stmt|;
name|this
operator|.
name|minimumResourceManagerVersion
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RESOURCEMANAGER_MINIMUM_VERSION
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION
argument_list|)
expr_stmt|;
comment|// Default duration to track stopped containers on nodemanager is 10Min.
comment|// This should not be assigned very large value as it will remember all the
comment|// containers stopped during that time.
name|durationToTrackStoppedContainers
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS
argument_list|,
literal|600000
argument_list|)
expr_stmt|;
if|if
condition|(
name|durationToTrackStoppedContainers
operator|<
literal|0
condition|)
block|{
name|String
name|message
init|=
literal|"Invalid configuration for "
operator|+
name|YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS
operator|+
literal|" default "
operator|+
literal|"value is 10Min(600000)."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|message
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS
operator|+
literal|" :"
operator|+
name|durationToTrackStoppedContainers
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialized nodemanager with :"
operator|+
literal|" physical-memory="
operator|+
name|memoryMb
operator|+
literal|" virtual-memory="
operator|+
name|virtualMemoryMb
operator|+
literal|" virtual-cores="
operator|+
name|virtualCores
argument_list|)
expr_stmt|;
name|this
operator|.
name|logAggregationEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_LOG_AGGREGATION_ENABLED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// NodeManager is the last service to start, so NodeId is available.
name|this
operator|.
name|nodeId
operator|=
name|this
operator|.
name|context
operator|.
name|getNodeId
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Node ID assigned is : "
operator|+
name|this
operator|.
name|nodeId
argument_list|)
expr_stmt|;
name|this
operator|.
name|httpPort
operator|=
name|this
operator|.
name|context
operator|.
name|getHttpPort
argument_list|()
expr_stmt|;
name|this
operator|.
name|nodeManagerVersionId
operator|=
name|YarnVersionInfo
operator|.
name|getVersion
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Registration has to be in start so that ContainerManager can get the
comment|// perNM tokens needed to authenticate ContainerTokens.
name|this
operator|.
name|resourceTracker
operator|=
name|getRMClient
argument_list|()
expr_stmt|;
name|registerWithRM
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
name|startStatusUpdater
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errorMessage
init|=
literal|"Unexpected error starting NodeStatusUpdater"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorMessage
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// the isStopped check is for avoiding multiple unregistrations.
if|if
condition|(
name|this
operator|.
name|registeredWithRM
operator|&&
operator|!
name|this
operator|.
name|isStopped
operator|&&
operator|!
name|isNMUnderSupervisionWithRecoveryEnabled
argument_list|()
operator|&&
operator|!
name|context
operator|.
name|getDecommissioned
argument_list|()
condition|)
block|{
name|unRegisterNM
argument_list|()
expr_stmt|;
block|}
comment|// Interrupt the updater.
name|this
operator|.
name|isStopped
operator|=
literal|true
expr_stmt|;
name|stopRMProxy
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
DECL|method|isNMUnderSupervisionWithRecoveryEnabled ()
specifier|private
name|boolean
name|isNMUnderSupervisionWithRecoveryEnabled
parameter_list|()
block|{
name|Configuration
name|config
init|=
name|getConfig
argument_list|()
decl_stmt|;
return|return
name|config
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_RECOVERY_ENABLED
argument_list|)
operator|&&
name|config
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_SUPERVISED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_RECOVERY_SUPERVISED
argument_list|)
return|;
block|}
DECL|method|unRegisterNM ()
specifier|private
name|void
name|unRegisterNM
parameter_list|()
block|{
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryPBImpl
operator|.
name|get
argument_list|()
decl_stmt|;
name|UnRegisterNodeManagerRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|UnRegisterNodeManagerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setNodeId
argument_list|(
name|this
operator|.
name|nodeId
argument_list|)
expr_stmt|;
try|try
block|{
name|resourceTracker
operator|.
name|unRegisterNodeManager
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully Unregistered the Node "
operator|+
name|this
operator|.
name|nodeId
operator|+
literal|" with ResourceManager."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unregistration of the Node "
operator|+
name|this
operator|.
name|nodeId
operator|+
literal|" failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|rebootNodeStatusUpdaterAndRegisterWithRM ()
specifier|protected
name|void
name|rebootNodeStatusUpdaterAndRegisterWithRM
parameter_list|()
block|{
comment|// Interrupt the updater.
name|this
operator|.
name|isStopped
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|statusUpdater
operator|.
name|join
argument_list|()
expr_stmt|;
name|registerWithRM
argument_list|()
expr_stmt|;
name|statusUpdater
operator|=
operator|new
name|Thread
argument_list|(
name|statusUpdaterRunnable
argument_list|,
literal|"Node Status Updater"
argument_list|)
expr_stmt|;
name|this
operator|.
name|isStopped
operator|=
literal|false
expr_stmt|;
name|statusUpdater
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"NodeStatusUpdater thread is reRegistered and restarted"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errorMessage
init|=
literal|"Unexpected error rebooting NodeStatusUpdater"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorMessage
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|stopRMProxy ()
specifier|protected
name|void
name|stopRMProxy
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|resourceTracker
operator|!=
literal|null
condition|)
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|this
operator|.
name|resourceTracker
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Private
DECL|method|isTokenKeepAliveEnabled (Configuration conf)
specifier|protected
name|boolean
name|isTokenKeepAliveEnabled
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_LOG_AGGREGATION_ENABLED
argument_list|)
operator|&&
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getRMClient ()
specifier|protected
name|ResourceTracker
name|getRMClient
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
return|return
name|ServerRMProxy
operator|.
name|createRMProxy
argument_list|(
name|conf
argument_list|,
name|ResourceTracker
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|registerWithRM ()
specifier|protected
name|void
name|registerWithRM
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|NMContainerStatus
argument_list|>
name|containerReports
init|=
name|getNMContainerStatuses
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|NodeLabel
argument_list|>
name|nodeLabels
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasNodeLabelsProvider
condition|)
block|{
name|nodeLabels
operator|=
name|nodeLabelsProvider
operator|.
name|getNodeLabels
argument_list|()
expr_stmt|;
name|nodeLabels
operator|=
operator|(
literal|null
operator|==
name|nodeLabels
operator|)
condition|?
name|CommonNodeLabelsManager
operator|.
name|EMPTY_NODELABEL_SET
else|:
name|nodeLabels
expr_stmt|;
block|}
name|RegisterNodeManagerRequest
name|request
init|=
name|RegisterNodeManagerRequest
operator|.
name|newInstance
argument_list|(
name|nodeId
argument_list|,
name|httpPort
argument_list|,
name|totalResource
argument_list|,
name|nodeManagerVersionId
argument_list|,
name|containerReports
argument_list|,
name|getRunningApplications
argument_list|()
argument_list|,
name|nodeLabels
argument_list|)
decl_stmt|;
if|if
condition|(
name|containerReports
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Registering with RM using containers :"
operator|+
name|containerReports
argument_list|)
expr_stmt|;
block|}
name|RegisterNodeManagerResponse
name|regNMResponse
init|=
name|resourceTracker
operator|.
name|registerNodeManager
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|this
operator|.
name|rmIdentifier
operator|=
name|regNMResponse
operator|.
name|getRMIdentifier
argument_list|()
expr_stmt|;
comment|// if the Resource Manager instructs NM to shutdown.
if|if
condition|(
name|NodeAction
operator|.
name|SHUTDOWN
operator|.
name|equals
argument_list|(
name|regNMResponse
operator|.
name|getNodeAction
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|message
init|=
literal|"Message from ResourceManager: "
operator|+
name|regNMResponse
operator|.
name|getDiagnosticsMessage
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Recieved SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, "
operator|+
name|message
argument_list|)
throw|;
block|}
comment|// if ResourceManager version is too old then shutdown
if|if
condition|(
operator|!
name|minimumResourceManagerVersion
operator|.
name|equals
argument_list|(
literal|"NONE"
argument_list|)
condition|)
block|{
if|if
condition|(
name|minimumResourceManagerVersion
operator|.
name|equals
argument_list|(
literal|"EqualToNM"
argument_list|)
condition|)
block|{
name|minimumResourceManagerVersion
operator|=
name|nodeManagerVersionId
expr_stmt|;
block|}
name|String
name|rmVersion
init|=
name|regNMResponse
operator|.
name|getRMVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|rmVersion
operator|==
literal|null
condition|)
block|{
name|String
name|message
init|=
literal|"The Resource Manager's did not return a version. "
operator|+
literal|"Valid version cannot be checked."
decl_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Shutting down the Node Manager. "
operator|+
name|message
argument_list|)
throw|;
block|}
if|if
condition|(
name|VersionUtil
operator|.
name|compareVersions
argument_list|(
name|rmVersion
argument_list|,
name|minimumResourceManagerVersion
argument_list|)
operator|<
literal|0
condition|)
block|{
name|String
name|message
init|=
literal|"The Resource Manager's version ("
operator|+
name|rmVersion
operator|+
literal|") is less than the minimum "
operator|+
literal|"allowed version "
operator|+
name|minimumResourceManagerVersion
decl_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Shutting down the Node Manager on RM "
operator|+
literal|"version error, "
operator|+
name|message
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|registeredWithRM
operator|=
literal|true
expr_stmt|;
name|MasterKey
name|masterKey
init|=
name|regNMResponse
operator|.
name|getContainerTokenMasterKey
argument_list|()
decl_stmt|;
comment|// do this now so that its set before we start heartbeating to RM
comment|// It is expected that status updater is started by this point and
comment|// RM gives the shared secret in registration during
comment|// StatusUpdater#start().
if|if
condition|(
name|masterKey
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
operator|.
name|setMasterKey
argument_list|(
name|masterKey
argument_list|)
expr_stmt|;
block|}
name|masterKey
operator|=
name|regNMResponse
operator|.
name|getNMTokenMasterKey
argument_list|()
expr_stmt|;
if|if
condition|(
name|masterKey
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|context
operator|.
name|getNMTokenSecretManager
argument_list|()
operator|.
name|setMasterKey
argument_list|(
name|masterKey
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|successfullRegistrationMsg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|successfullRegistrationMsg
operator|.
name|append
argument_list|(
literal|"Registered with ResourceManager as "
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|nodeId
argument_list|)
operator|.
name|append
argument_list|(
literal|" with total resource of "
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|totalResource
argument_list|)
expr_stmt|;
if|if
condition|(
name|regNMResponse
operator|.
name|getAreNodeLabelsAcceptedByRM
argument_list|()
condition|)
block|{
name|successfullRegistrationMsg
operator|.
name|append
argument_list|(
literal|" and with following Node label(s) : {"
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|nodeLabels
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hasNodeLabelsProvider
condition|)
block|{
comment|//case where provider is set but RM did not accept the Node Labels
name|LOG
operator|.
name|error
argument_list|(
name|regNMResponse
operator|.
name|getDiagnosticsMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|successfullRegistrationMsg
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Notifying ContainerManager to unblock new container-requests"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ContainerManagerImpl
operator|)
name|this
operator|.
name|context
operator|.
name|getContainerManager
argument_list|()
operator|)
operator|.
name|setBlockNewContainerRequests
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|createKeepAliveApplicationList ()
specifier|private
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|createKeepAliveApplicationList
parameter_list|()
block|{
if|if
condition|(
operator|!
name|tokenKeepAliveEnabled
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|appList
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|ApplicationId
argument_list|,
name|Long
argument_list|>
argument_list|>
name|i
init|=
name|this
operator|.
name|appTokenKeepAliveMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|ApplicationId
argument_list|,
name|Long
argument_list|>
name|e
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Long
name|nextKeepAlive
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|containsKey
argument_list|(
name|appId
argument_list|)
condition|)
block|{
comment|// Remove if the application has finished.
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|nextKeepAlive
condition|)
block|{
comment|// KeepAlive list for the next hearbeat.
name|appList
operator|.
name|add
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|trackAppForKeepAlive
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|appList
return|;
block|}
DECL|method|getNodeStatus (int responseId)
specifier|private
name|NodeStatus
name|getNodeStatus
parameter_list|(
name|int
name|responseId
parameter_list|)
throws|throws
name|IOException
block|{
name|NodeHealthStatus
name|nodeHealthStatus
init|=
name|this
operator|.
name|context
operator|.
name|getNodeHealthStatus
argument_list|()
decl_stmt|;
name|nodeHealthStatus
operator|.
name|setHealthReport
argument_list|(
name|healthChecker
operator|.
name|getHealthReport
argument_list|()
argument_list|)
expr_stmt|;
name|nodeHealthStatus
operator|.
name|setIsNodeHealthy
argument_list|(
name|healthChecker
operator|.
name|isHealthy
argument_list|()
argument_list|)
expr_stmt|;
name|nodeHealthStatus
operator|.
name|setLastHealthReportTime
argument_list|(
name|healthChecker
operator|.
name|getLastHealthReportTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Node's health-status : "
operator|+
name|nodeHealthStatus
operator|.
name|getIsNodeHealthy
argument_list|()
operator|+
literal|", "
operator|+
name|nodeHealthStatus
operator|.
name|getHealthReport
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containersStatuses
init|=
name|getContainerStatuses
argument_list|()
decl_stmt|;
name|NodeStatus
name|nodeStatus
init|=
name|NodeStatus
operator|.
name|newInstance
argument_list|(
name|nodeId
argument_list|,
name|responseId
argument_list|,
name|containersStatuses
argument_list|,
name|createKeepAliveApplicationList
argument_list|()
argument_list|,
name|nodeHealthStatus
argument_list|)
decl_stmt|;
return|return
name|nodeStatus
return|;
block|}
comment|// Iterate through the NMContext and clone and get all the containers'
comment|// statuses. If it's a completed container, add into the
comment|// recentlyStoppedContainers collections.
annotation|@
name|VisibleForTesting
DECL|method|getContainerStatuses ()
specifier|protected
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|getContainerStatuses
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Container
name|container
range|:
name|this
operator|.
name|context
operator|.
name|getContainers
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|ContainerId
name|containerId
init|=
name|container
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
name|containerStatus
init|=
name|container
operator|.
name|cloneAndGetContainerStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|containerStatus
operator|.
name|getState
argument_list|()
operator|==
name|ContainerState
operator|.
name|COMPLETE
condition|)
block|{
if|if
condition|(
name|isApplicationStopped
argument_list|(
name|applicationId
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|applicationId
operator|+
literal|" is completing, "
operator|+
literal|" remove "
operator|+
name|containerId
operator|+
literal|" from NM context."
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|getContainers
argument_list|()
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|pendingCompletedContainers
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|containerStatus
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|isContainerRecentlyStopped
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|pendingCompletedContainers
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|containerStatus
argument_list|)
expr_stmt|;
comment|// Adding to finished containers cache. Cache will keep it around at
comment|// least for #durationToTrackStoppedContainers duration. In the
comment|// subsequent call to stop container it will get removed from cache.
name|addCompletedContainer
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|containerStatuses
operator|.
name|add
argument_list|(
name|containerStatus
argument_list|)
expr_stmt|;
block|}
block|}
name|containerStatuses
operator|.
name|addAll
argument_list|(
name|pendingCompletedContainers
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Sending out "
operator|+
name|containerStatuses
operator|.
name|size
argument_list|()
operator|+
literal|" container statuses: "
operator|+
name|containerStatuses
argument_list|)
expr_stmt|;
block|}
return|return
name|containerStatuses
return|;
block|}
DECL|method|getRunningApplications ()
specifier|private
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|getRunningApplications
parameter_list|()
block|{
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|runningApplications
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationId
argument_list|>
argument_list|()
decl_stmt|;
name|runningApplications
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|runningApplications
return|;
block|}
comment|// These NMContainerStatus are sent on NM registration and used by YARN only.
DECL|method|getNMContainerStatuses ()
specifier|private
name|List
argument_list|<
name|NMContainerStatus
argument_list|>
name|getNMContainerStatuses
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|NMContainerStatus
argument_list|>
name|containerStatuses
init|=
operator|new
name|ArrayList
argument_list|<
name|NMContainerStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Container
name|container
range|:
name|this
operator|.
name|context
operator|.
name|getContainers
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|ContainerId
name|containerId
init|=
name|container
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|containsKey
argument_list|(
name|applicationId
argument_list|)
condition|)
block|{
name|context
operator|.
name|getContainers
argument_list|()
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|NMContainerStatus
name|status
init|=
name|container
operator|.
name|getNMContainerStatus
argument_list|()
decl_stmt|;
name|containerStatuses
operator|.
name|add
argument_list|(
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|getContainerState
argument_list|()
operator|==
name|ContainerState
operator|.
name|COMPLETE
condition|)
block|{
comment|// Adding to finished containers cache. Cache will keep it around at
comment|// least for #durationToTrackStoppedContainers duration. In the
comment|// subsequent call to stop container it will get removed from cache.
name|addCompletedContainer
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending out "
operator|+
name|containerStatuses
operator|.
name|size
argument_list|()
operator|+
literal|" NM container statuses: "
operator|+
name|containerStatuses
argument_list|)
expr_stmt|;
return|return
name|containerStatuses
return|;
block|}
DECL|method|isApplicationStopped (ApplicationId applicationId)
specifier|private
name|boolean
name|isApplicationStopped
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|containsKey
argument_list|(
name|applicationId
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|ApplicationState
name|applicationState
init|=
name|this
operator|.
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|get
argument_list|(
name|applicationId
argument_list|)
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
if|if
condition|(
name|applicationState
operator|==
name|ApplicationState
operator|.
name|FINISHING_CONTAINERS_WAIT
operator|||
name|applicationState
operator|==
name|ApplicationState
operator|.
name|APPLICATION_RESOURCES_CLEANINGUP
operator|||
name|applicationState
operator|==
name|ApplicationState
operator|.
name|FINISHED
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|addCompletedContainer (ContainerId containerId)
specifier|public
name|void
name|addCompletedContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|recentlyStoppedContainers
init|)
block|{
name|removeVeryOldStoppedContainersFromCache
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|recentlyStoppedContainers
operator|.
name|containsKey
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|recentlyStoppedContainers
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|durationToTrackStoppedContainers
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
annotation|@
name|Private
DECL|method|removeOrTrackCompletedContainersFromContext ( List<ContainerId> containerIds)
specifier|public
name|void
name|removeOrTrackCompletedContainersFromContext
parameter_list|(
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containerIds
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|removedContainers
init|=
operator|new
name|HashSet
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
name|pendingContainersToRemove
operator|.
name|addAll
argument_list|(
name|containerIds
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|ContainerId
argument_list|>
name|iter
init|=
name|pendingContainersToRemove
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ContainerId
name|containerId
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// remove the container only if the container is at DONE state
name|Container
name|nmContainer
init|=
name|context
operator|.
name|getContainers
argument_list|()
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|nmContainer
operator|==
literal|null
condition|)
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nmContainer
operator|.
name|getContainerState
argument_list|()
operator|.
name|equals
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
operator|.
name|DONE
argument_list|)
condition|)
block|{
name|context
operator|.
name|getContainers
argument_list|()
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|removedContainers
operator|.
name|add
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|removedContainers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Removed completed containers from NM context: "
operator|+
name|removedContainers
argument_list|)
expr_stmt|;
block|}
name|pendingCompletedContainers
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|trackAppsForKeepAlive (List<ApplicationId> appIds)
specifier|private
name|void
name|trackAppsForKeepAlive
parameter_list|(
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|appIds
parameter_list|)
block|{
if|if
condition|(
name|tokenKeepAliveEnabled
operator|&&
name|appIds
operator|!=
literal|null
operator|&&
name|appIds
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ApplicationId
name|appId
range|:
name|appIds
control|)
block|{
name|trackAppForKeepAlive
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|trackAppForKeepAlive (ApplicationId appId)
specifier|private
name|void
name|trackAppForKeepAlive
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
comment|// Next keepAlive request for app between 0.7& 0.9 of when the token will
comment|// likely expire.
name|long
name|nextTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
call|(
name|long
call|)
argument_list|(
literal|0.7
operator|*
name|tokenRemovalDelayMs
operator|+
operator|(
literal|0.2
operator|*
name|tokenRemovalDelayMs
operator|*
name|keepAliveDelayRandom
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|)
operator|/
literal|100
argument_list|)
decl_stmt|;
name|appTokenKeepAliveMap
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|nextTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sendOutofBandHeartBeat ()
specifier|public
name|void
name|sendOutofBandHeartBeat
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|heartbeatMonitor
init|)
block|{
name|this
operator|.
name|heartbeatMonitor
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isContainerRecentlyStopped (ContainerId containerId)
specifier|public
name|boolean
name|isContainerRecentlyStopped
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|recentlyStoppedContainers
init|)
block|{
return|return
name|recentlyStoppedContainers
operator|.
name|containsKey
argument_list|(
name|containerId
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|clearFinishedContainersFromCache ()
specifier|public
name|void
name|clearFinishedContainersFromCache
parameter_list|()
block|{
synchronized|synchronized
init|(
name|recentlyStoppedContainers
init|)
block|{
name|recentlyStoppedContainers
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|removeVeryOldStoppedContainersFromCache ()
specifier|public
name|void
name|removeVeryOldStoppedContainersFromCache
parameter_list|()
block|{
synchronized|synchronized
init|(
name|recentlyStoppedContainers
init|)
block|{
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|ContainerId
argument_list|>
name|i
init|=
name|recentlyStoppedContainers
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ContainerId
name|cid
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|recentlyStoppedContainers
operator|.
name|get
argument_list|(
name|cid
argument_list|)
operator|<
name|currentTime
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|.
name|getContainers
argument_list|()
operator|.
name|containsKey
argument_list|(
name|cid
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
try|try
block|{
name|context
operator|.
name|getNMStateStore
argument_list|()
operator|.
name|removeContainer
argument_list|(
name|cid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to remove container "
operator|+
name|cid
operator|+
literal|" in store"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getRMIdentifier ()
specifier|public
name|long
name|getRMIdentifier
parameter_list|()
block|{
return|return
name|this
operator|.
name|rmIdentifier
return|;
block|}
DECL|method|parseCredentials ( Map<ApplicationId, ByteBuffer> systemCredentials)
specifier|private
specifier|static
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|Credentials
argument_list|>
name|parseCredentials
parameter_list|(
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ByteBuffer
argument_list|>
name|systemCredentials
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|Credentials
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationId
argument_list|,
name|Credentials
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ApplicationId
argument_list|,
name|ByteBuffer
argument_list|>
name|entry
range|:
name|systemCredentials
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|DataInputByteBuffer
name|buf
init|=
operator|new
name|DataInputByteBuffer
argument_list|()
decl_stmt|;
name|ByteBuffer
name|buffer
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|buf
operator|.
name|reset
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|credentials
operator|.
name|readTokenStorageStream
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ApplicationId
argument_list|,
name|Credentials
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Retrieved credentials form RM for "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|": "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getAllTokens
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
DECL|method|startStatusUpdater ()
specifier|protected
name|void
name|startStatusUpdater
parameter_list|()
block|{
name|statusUpdaterRunnable
operator|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|run
parameter_list|()
block|{
name|int
name|lastHeartbeatID
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|NodeLabel
argument_list|>
name|lastUpdatedNodeLabelsToRM
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasNodeLabelsProvider
condition|)
block|{
name|lastUpdatedNodeLabelsToRM
operator|=
name|nodeLabelsProvider
operator|.
name|getNodeLabels
argument_list|()
expr_stmt|;
name|lastUpdatedNodeLabelsToRM
operator|=
operator|(
literal|null
operator|==
name|lastUpdatedNodeLabelsToRM
operator|)
condition|?
name|CommonNodeLabelsManager
operator|.
name|EMPTY_NODELABEL_SET
else|:
name|lastUpdatedNodeLabelsToRM
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|isStopped
condition|)
block|{
comment|// Send heartbeat
try|try
block|{
name|NodeHeartbeatResponse
name|response
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|NodeLabel
argument_list|>
name|nodeLabelsForHeartbeat
init|=
literal|null
decl_stmt|;
name|NodeStatus
name|nodeStatus
init|=
name|getNodeStatus
argument_list|(
name|lastHeartbeatID
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasNodeLabelsProvider
condition|)
block|{
name|nodeLabelsForHeartbeat
operator|=
name|nodeLabelsProvider
operator|.
name|getNodeLabels
argument_list|()
expr_stmt|;
comment|// if the provider returns null then consider empty labels are set
name|nodeLabelsForHeartbeat
operator|=
operator|(
name|nodeLabelsForHeartbeat
operator|==
literal|null
operator|)
condition|?
name|CommonNodeLabelsManager
operator|.
name|EMPTY_NODELABEL_SET
else|:
name|nodeLabelsForHeartbeat
expr_stmt|;
if|if
condition|(
operator|!
name|areNodeLabelsUpdated
argument_list|(
name|nodeLabelsForHeartbeat
argument_list|,
name|lastUpdatedNodeLabelsToRM
argument_list|)
condition|)
block|{
comment|// if nodelabels have not changed then no need to send
name|nodeLabelsForHeartbeat
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|NodeHeartbeatRequest
name|request
init|=
name|NodeHeartbeatRequest
operator|.
name|newInstance
argument_list|(
name|nodeStatus
argument_list|,
name|NodeStatusUpdaterImpl
operator|.
name|this
operator|.
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
operator|.
name|getCurrentKey
argument_list|()
argument_list|,
name|NodeStatusUpdaterImpl
operator|.
name|this
operator|.
name|context
operator|.
name|getNMTokenSecretManager
argument_list|()
operator|.
name|getCurrentKey
argument_list|()
argument_list|,
name|nodeLabelsForHeartbeat
argument_list|)
decl_stmt|;
if|if
condition|(
name|logAggregationEnabled
condition|)
block|{
comment|// pull log aggregation status for application running in this NM
name|List
argument_list|<
name|LogAggregationReport
argument_list|>
name|logAggregationReports
init|=
name|getLogAggregationReportsForApps
argument_list|(
name|context
operator|.
name|getLogAggregationStatusForApps
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|logAggregationReports
operator|!=
literal|null
operator|&&
operator|!
name|logAggregationReports
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|request
operator|.
name|setLogAggregationReportsForApps
argument_list|(
name|logAggregationReports
argument_list|)
expr_stmt|;
block|}
block|}
name|response
operator|=
name|resourceTracker
operator|.
name|nodeHeartbeat
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|//get next heartbeat interval from response
name|nextHeartBeatInterval
operator|=
name|response
operator|.
name|getNextHeartBeatInterval
argument_list|()
expr_stmt|;
name|updateMasterKeys
argument_list|(
name|response
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|getNodeAction
argument_list|()
operator|==
name|NodeAction
operator|.
name|SHUTDOWN
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Recieved SHUTDOWN signal from Resourcemanager as part of heartbeat,"
operator|+
literal|" hence shutting down."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Message from ResourceManager: "
operator|+
name|response
operator|.
name|getDiagnosticsMessage
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setDecommissioned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodeManagerEvent
argument_list|(
name|NodeManagerEventType
operator|.
name|SHUTDOWN
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|response
operator|.
name|getNodeAction
argument_list|()
operator|==
name|NodeAction
operator|.
name|RESYNC
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Node is out of sync with ResourceManager,"
operator|+
literal|" hence resyncing."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Message from ResourceManager: "
operator|+
name|response
operator|.
name|getDiagnosticsMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// Invalidate the RMIdentifier while resync
name|NodeStatusUpdaterImpl
operator|.
name|this
operator|.
name|rmIdentifier
operator|=
name|ResourceManagerConstants
operator|.
name|RM_INVALID_IDENTIFIER
expr_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodeManagerEvent
argument_list|(
name|NodeManagerEventType
operator|.
name|RESYNC
argument_list|)
argument_list|)
expr_stmt|;
name|pendingCompletedContainers
operator|.
name|clear
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|response
operator|.
name|getAreNodeLabelsAcceptedByRM
argument_list|()
condition|)
block|{
name|lastUpdatedNodeLabelsToRM
operator|=
name|nodeLabelsForHeartbeat
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Node Labels {"
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|nodeLabelsForHeartbeat
argument_list|)
operator|+
literal|"} were Accepted by RM "
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nodeLabelsForHeartbeat
operator|!=
literal|null
condition|)
block|{
comment|// case where NodeLabelsProvider is set and updated labels were
comment|// sent to RM and RM rejected the labels
name|LOG
operator|.
name|error
argument_list|(
name|response
operator|.
name|getDiagnosticsMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Explicitly put this method after checking the resync response. We
comment|// don't want to remove the completed containers before resync
comment|// because these completed containers will be reported back to RM
comment|// when NM re-registers with RM.
comment|// Only remove the cleanedup containers that are acked
name|removeOrTrackCompletedContainersFromContext
argument_list|(
name|response
operator|.
name|getContainersToBeRemovedFromNM
argument_list|()
argument_list|)
expr_stmt|;
name|logAggregationReportForAppsTempList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|lastHeartbeatID
operator|=
name|response
operator|.
name|getResponseId
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containersToCleanup
init|=
name|response
operator|.
name|getContainersToCleanup
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|containersToCleanup
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|CMgrCompletedContainersEvent
argument_list|(
name|containersToCleanup
argument_list|,
name|CMgrCompletedContainersEvent
operator|.
name|Reason
operator|.
name|BY_RESOURCEMANAGER
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|appsToCleanup
init|=
name|response
operator|.
name|getApplicationsToCleanup
argument_list|()
decl_stmt|;
comment|//Only start tracking for keepAlive on FINISH_APP
name|trackAppsForKeepAlive
argument_list|(
name|appsToCleanup
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|appsToCleanup
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|CMgrCompletedAppsEvent
argument_list|(
name|appsToCleanup
argument_list|,
name|CMgrCompletedAppsEvent
operator|.
name|Reason
operator|.
name|BY_RESOURCEMANAGER
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ByteBuffer
argument_list|>
name|systemCredentials
init|=
name|response
operator|.
name|getSystemCredentialsForApps
argument_list|()
decl_stmt|;
if|if
condition|(
name|systemCredentials
operator|!=
literal|null
operator|&&
operator|!
name|systemCredentials
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
operator|(
operator|(
name|NMContext
operator|)
name|context
operator|)
operator|.
name|setSystemCrendentialsForApps
argument_list|(
name|parseCredentials
argument_list|(
name|systemCredentials
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ConnectException
name|e
parameter_list|)
block|{
comment|//catch and throw the exception if tried MAX wait time to connect RM
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodeManagerEvent
argument_list|(
name|NodeManagerEventType
operator|.
name|SHUTDOWN
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// TODO Better error handling. Thread can die with the rest of the
comment|// NM still running.
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught exception in status-updater"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
synchronized|synchronized
init|(
name|heartbeatMonitor
init|)
block|{
name|nextHeartBeatInterval
operator|=
name|nextHeartBeatInterval
operator|<=
literal|0
condition|?
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS
else|:
name|nextHeartBeatInterval
expr_stmt|;
try|try
block|{
name|heartbeatMonitor
operator|.
name|wait
argument_list|(
name|nextHeartBeatInterval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Do Nothing
block|}
block|}
block|}
block|}
block|}
comment|/**        * Caller should take care of sending non null nodelabels for both        * arguments        *         * @param nodeLabelsNew        * @param nodeLabelsOld        * @return if the New node labels are diff from the older one.        */
specifier|private
name|boolean
name|areNodeLabelsUpdated
parameter_list|(
name|Set
argument_list|<
name|NodeLabel
argument_list|>
name|nodeLabelsNew
parameter_list|,
name|Set
argument_list|<
name|NodeLabel
argument_list|>
name|nodeLabelsOld
parameter_list|)
block|{
if|if
condition|(
name|nodeLabelsNew
operator|.
name|size
argument_list|()
operator|!=
name|nodeLabelsOld
operator|.
name|size
argument_list|()
operator|||
operator|!
name|nodeLabelsOld
operator|.
name|containsAll
argument_list|(
name|nodeLabelsNew
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|updateMasterKeys
parameter_list|(
name|NodeHeartbeatResponse
name|response
parameter_list|)
block|{
comment|// See if the master-key has rolled over
name|MasterKey
name|updatedMasterKey
init|=
name|response
operator|.
name|getContainerTokenMasterKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|updatedMasterKey
operator|!=
literal|null
condition|)
block|{
comment|// Will be non-null only on roll-over on RM side
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
operator|.
name|setMasterKey
argument_list|(
name|updatedMasterKey
argument_list|)
expr_stmt|;
block|}
name|updatedMasterKey
operator|=
name|response
operator|.
name|getNMTokenMasterKey
argument_list|()
expr_stmt|;
if|if
condition|(
name|updatedMasterKey
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|getNMTokenSecretManager
argument_list|()
operator|.
name|setMasterKey
argument_list|(
name|updatedMasterKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|statusUpdater
operator|=
operator|new
name|Thread
argument_list|(
name|statusUpdaterRunnable
argument_list|,
literal|"Node Status Updater"
argument_list|)
expr_stmt|;
name|statusUpdater
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|getLogAggregationReportsForApps ( ConcurrentLinkedQueue<LogAggregationReport> lastestLogAggregationStatus)
specifier|private
name|List
argument_list|<
name|LogAggregationReport
argument_list|>
name|getLogAggregationReportsForApps
parameter_list|(
name|ConcurrentLinkedQueue
argument_list|<
name|LogAggregationReport
argument_list|>
name|lastestLogAggregationStatus
parameter_list|)
block|{
name|LogAggregationReport
name|status
decl_stmt|;
while|while
condition|(
operator|(
name|status
operator|=
name|lastestLogAggregationStatus
operator|.
name|poll
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|logAggregationReportForAppsTempList
operator|.
name|add
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|LogAggregationReport
argument_list|>
name|reports
init|=
operator|new
name|ArrayList
argument_list|<
name|LogAggregationReport
argument_list|>
argument_list|()
decl_stmt|;
name|reports
operator|.
name|addAll
argument_list|(
name|logAggregationReportForAppsTempList
argument_list|)
expr_stmt|;
return|return
name|reports
return|;
block|}
block|}
end_class

end_unit

