begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|AvroRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeHealthStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ResourceManagerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ResourceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterNodeManagerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterNodeManagerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|MasterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|NodeStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|ContainerManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|metrics
operator|.
name|NodeManagerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
DECL|class|NodeStatusUpdaterImpl
specifier|public
class|class
name|NodeStatusUpdaterImpl
extends|extends
name|AbstractService
implements|implements
name|NodeStatusUpdater
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NodeStatusUpdaterImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|heartbeatMonitor
specifier|private
specifier|final
name|Object
name|heartbeatMonitor
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|Context
name|context
decl_stmt|;
DECL|field|dispatcher
specifier|private
specifier|final
name|Dispatcher
name|dispatcher
decl_stmt|;
DECL|field|nodeId
specifier|private
name|NodeId
name|nodeId
decl_stmt|;
DECL|field|nextHeartBeatInterval
specifier|private
name|long
name|nextHeartBeatInterval
decl_stmt|;
DECL|field|resourceTracker
specifier|private
name|ResourceTracker
name|resourceTracker
decl_stmt|;
DECL|field|rmAddress
specifier|private
name|InetSocketAddress
name|rmAddress
decl_stmt|;
DECL|field|totalResource
specifier|private
name|Resource
name|totalResource
decl_stmt|;
DECL|field|httpPort
specifier|private
name|int
name|httpPort
decl_stmt|;
DECL|field|isStopped
specifier|private
name|boolean
name|isStopped
decl_stmt|;
DECL|field|recordFactory
specifier|private
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|tokenKeepAliveEnabled
specifier|private
name|boolean
name|tokenKeepAliveEnabled
decl_stmt|;
DECL|field|tokenRemovalDelayMs
specifier|private
name|long
name|tokenRemovalDelayMs
decl_stmt|;
comment|/** Keeps track of when the next keep alive request should be sent for an app*/
DECL|field|appTokenKeepAliveMap
specifier|private
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|Long
argument_list|>
name|appTokenKeepAliveMap
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationId
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|keepAliveDelayRandom
specifier|private
name|Random
name|keepAliveDelayRandom
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|healthChecker
specifier|private
specifier|final
name|NodeHealthCheckerService
name|healthChecker
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|final
name|NodeManagerMetrics
name|metrics
decl_stmt|;
DECL|field|rmConnectWaitMS
specifier|private
name|long
name|rmConnectWaitMS
decl_stmt|;
DECL|field|rmConnectionRetryIntervalMS
specifier|private
name|long
name|rmConnectionRetryIntervalMS
decl_stmt|;
DECL|field|waitForEver
specifier|private
name|boolean
name|waitForEver
decl_stmt|;
DECL|field|statusUpdaterRunnable
specifier|private
name|Runnable
name|statusUpdaterRunnable
decl_stmt|;
DECL|field|statusUpdater
specifier|private
name|Thread
name|statusUpdater
decl_stmt|;
DECL|field|rmIdentifier
specifier|private
name|long
name|rmIdentifier
init|=
name|ResourceManagerConstants
operator|.
name|RM_INVALID_IDENTIFIER
decl_stmt|;
DECL|method|NodeStatusUpdaterImpl (Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker, NodeManagerMetrics metrics)
specifier|public
name|NodeStatusUpdaterImpl
parameter_list|(
name|Context
name|context
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|NodeHealthCheckerService
name|healthChecker
parameter_list|,
name|NodeManagerMetrics
name|metrics
parameter_list|)
block|{
name|super
argument_list|(
name|NodeStatusUpdaterImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|healthChecker
operator|=
name|healthChecker
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|dispatcher
operator|=
name|dispatcher
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (Configuration conf)
specifier|public
specifier|synchronized
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|rmAddress
operator|=
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_RESOURCE_TRACKER_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_RESOURCE_TRACKER_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_RESOURCE_TRACKER_PORT
argument_list|)
expr_stmt|;
name|int
name|memoryMb
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_PMEM_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_PMEM_MB
argument_list|)
decl_stmt|;
name|float
name|vMemToPMem
init|=
name|conf
operator|.
name|getFloat
argument_list|(
name|YarnConfiguration
operator|.
name|NM_VMEM_PMEM_RATIO
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_VMEM_PMEM_RATIO
argument_list|)
decl_stmt|;
name|int
name|virtualMemoryMb
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|memoryMb
operator|*
name|vMemToPMem
argument_list|)
decl_stmt|;
name|int
name|cpuCores
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_VCORES
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_VCORES
argument_list|)
decl_stmt|;
name|float
name|vCoresToPCores
init|=
name|conf
operator|.
name|getFloat
argument_list|(
name|YarnConfiguration
operator|.
name|NM_VCORES_PCORES_RATIO
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_VCORES_PCORES_RATIO
argument_list|)
decl_stmt|;
name|int
name|virtualCores
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|cpuCores
operator|*
name|vCoresToPCores
argument_list|)
decl_stmt|;
name|this
operator|.
name|totalResource
operator|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|totalResource
operator|.
name|setMemory
argument_list|(
name|memoryMb
argument_list|)
expr_stmt|;
name|this
operator|.
name|totalResource
operator|.
name|setVirtualCores
argument_list|(
name|virtualCores
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|addResource
argument_list|(
name|totalResource
argument_list|)
expr_stmt|;
name|this
operator|.
name|tokenKeepAliveEnabled
operator|=
name|isTokenKeepAliveEnabled
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|tokenRemovalDelayMs
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NM_EXPIRY_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NM_EXPIRY_INTERVAL_MS
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialized nodemanager for "
operator|+
name|nodeId
operator|+
literal|":"
operator|+
literal|" physical-memory="
operator|+
name|memoryMb
operator|+
literal|" virtual-memory="
operator|+
name|virtualMemoryMb
operator|+
literal|" physical-cores="
operator|+
name|cpuCores
operator|+
literal|" virtual-cores="
operator|+
name|virtualCores
argument_list|)
expr_stmt|;
name|super
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
comment|// NodeManager is the last service to start, so NodeId is available.
name|this
operator|.
name|nodeId
operator|=
name|this
operator|.
name|context
operator|.
name|getNodeId
argument_list|()
expr_stmt|;
name|this
operator|.
name|httpPort
operator|=
name|this
operator|.
name|context
operator|.
name|getHttpPort
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Registration has to be in start so that ContainerManager can get the
comment|// perNM tokens needed to authenticate ContainerTokens.
name|registerWithRM
argument_list|()
expr_stmt|;
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
name|startStatusUpdater
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AvroRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
comment|// Interrupt the updater.
name|this
operator|.
name|isStopped
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|rebootNodeStatusUpdater ()
specifier|protected
name|void
name|rebootNodeStatusUpdater
parameter_list|()
block|{
comment|// Interrupt the updater.
name|this
operator|.
name|isStopped
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|statusUpdater
operator|.
name|join
argument_list|()
expr_stmt|;
name|registerWithRM
argument_list|()
expr_stmt|;
name|statusUpdater
operator|=
operator|new
name|Thread
argument_list|(
name|statusUpdaterRunnable
argument_list|,
literal|"Node Status Updater"
argument_list|)
expr_stmt|;
name|this
operator|.
name|isStopped
operator|=
literal|false
expr_stmt|;
name|statusUpdater
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"NodeStatusUpdater thread is reRegistered and restarted"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AvroRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Private
DECL|method|isTokenKeepAliveEnabled (Configuration conf)
specifier|protected
name|boolean
name|isTokenKeepAliveEnabled
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_LOG_AGGREGATION_ENABLED
argument_list|)
operator|&&
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
return|;
block|}
DECL|method|getRMClient ()
specifier|protected
name|ResourceTracker
name|getRMClient
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
operator|(
name|ResourceTracker
operator|)
name|rpc
operator|.
name|getProxy
argument_list|(
name|ResourceTracker
operator|.
name|class
argument_list|,
name|rmAddress
argument_list|,
name|conf
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|registerWithRM ()
specifier|protected
name|void
name|registerWithRM
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|rmConnectWaitMS
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCEMANAGER_CONNECT_WAIT_SECS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RESOURCEMANAGER_CONNECT_WAIT_SECS
argument_list|)
operator|*
literal|1000
expr_stmt|;
name|rmConnectionRetryIntervalMS
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS
argument_list|)
operator|*
literal|1000
expr_stmt|;
if|if
condition|(
name|rmConnectionRetryIntervalMS
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Invalid Configuration. "
operator|+
name|YarnConfiguration
operator|.
name|RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS
operator|+
literal|" should not be negative."
argument_list|)
throw|;
block|}
name|waitForEver
operator|=
operator|(
name|rmConnectWaitMS
operator|==
operator|-
literal|1000
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|waitForEver
condition|)
block|{
if|if
condition|(
name|rmConnectWaitMS
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Invalid Configuration. "
operator|+
name|YarnConfiguration
operator|.
name|RESOURCEMANAGER_CONNECT_WAIT_SECS
operator|+
literal|" can be -1, but can not be other negative numbers"
argument_list|)
throw|;
block|}
comment|//try connect once
if|if
condition|(
name|rmConnectWaitMS
operator|<
name|rmConnectionRetryIntervalMS
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCEMANAGER_CONNECT_WAIT_SECS
operator|+
literal|" is smaller than "
operator|+
name|YarnConfiguration
operator|.
name|RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS
operator|+
literal|". Only try connect once."
argument_list|)
expr_stmt|;
name|rmConnectWaitMS
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|int
name|rmRetryCount
init|=
literal|0
decl_stmt|;
name|long
name|waitStartTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|RegisterNodeManagerRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RegisterNodeManagerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setHttpPort
argument_list|(
name|this
operator|.
name|httpPort
argument_list|)
expr_stmt|;
name|request
operator|.
name|setResource
argument_list|(
name|this
operator|.
name|totalResource
argument_list|)
expr_stmt|;
name|request
operator|.
name|setNodeId
argument_list|(
name|this
operator|.
name|nodeId
argument_list|)
expr_stmt|;
name|RegisterNodeManagerResponse
name|regNMResponse
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|rmRetryCount
operator|++
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Connecting to ResourceManager at "
operator|+
name|this
operator|.
name|rmAddress
operator|+
literal|". current no. of attempts is "
operator|+
name|rmRetryCount
argument_list|)
expr_stmt|;
name|this
operator|.
name|resourceTracker
operator|=
name|getRMClient
argument_list|()
expr_stmt|;
name|regNMResponse
operator|=
name|this
operator|.
name|resourceTracker
operator|.
name|registerNodeManager
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmIdentifier
operator|=
name|regNMResponse
operator|.
name|getRMIdentifier
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Trying to connect to ResourceManager, "
operator|+
literal|"current no. of failed attempts is "
operator|+
name|rmRetryCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|waitStartTime
operator|<
name|rmConnectWaitMS
operator|||
name|waitForEver
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sleeping for "
operator|+
name|rmConnectionRetryIntervalMS
operator|/
literal|1000
operator|+
literal|" seconds before next connection retry to RM"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|rmConnectionRetryIntervalMS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|//done nothing
block|}
block|}
else|else
block|{
name|String
name|errorMessage
init|=
literal|"Failed to Connect to RM, "
operator|+
literal|"no. of failed attempts is "
operator|+
name|rmRetryCount
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorMessage
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|errorMessage
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|// if the Resourcemanager instructs NM to shutdown.
if|if
condition|(
name|NodeAction
operator|.
name|SHUTDOWN
operator|.
name|equals
argument_list|(
name|regNMResponse
operator|.
name|getNodeAction
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|message
init|=
literal|"Message from ResourceManager: "
operator|+
name|regNMResponse
operator|.
name|getDiagnosticsMessage
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed, "
operator|+
name|message
argument_list|)
throw|;
block|}
name|MasterKey
name|masterKey
init|=
name|regNMResponse
operator|.
name|getMasterKey
argument_list|()
decl_stmt|;
comment|// do this now so that its set before we start heartbeating to RM
comment|// It is expected that status updater is started by this point and
comment|// RM gives the shared secret in registration during
comment|// StatusUpdater#start().
if|if
condition|(
name|masterKey
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
operator|.
name|setMasterKey
argument_list|(
name|masterKey
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Registered with ResourceManager as "
operator|+
name|this
operator|.
name|nodeId
operator|+
literal|" with total resource of "
operator|+
name|this
operator|.
name|totalResource
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Notifying ContainerManager to unblock new container-requests"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ContainerManagerImpl
operator|)
name|this
operator|.
name|context
operator|.
name|getContainerManager
argument_list|()
operator|)
operator|.
name|setBlockNewContainerRequests
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|createKeepAliveApplicationList ()
specifier|private
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|createKeepAliveApplicationList
parameter_list|()
block|{
if|if
condition|(
operator|!
name|tokenKeepAliveEnabled
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|appList
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|ApplicationId
argument_list|,
name|Long
argument_list|>
argument_list|>
name|i
init|=
name|this
operator|.
name|appTokenKeepAliveMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|ApplicationId
argument_list|,
name|Long
argument_list|>
name|e
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Long
name|nextKeepAlive
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|containsKey
argument_list|(
name|appId
argument_list|)
condition|)
block|{
comment|// Remove if the application has finished.
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|nextKeepAlive
condition|)
block|{
comment|// KeepAlive list for the next hearbeat.
name|appList
operator|.
name|add
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|trackAppForKeepAlive
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|appList
return|;
block|}
annotation|@
name|Override
DECL|method|getNodeStatusAndUpdateContainersInContext ()
specifier|public
name|NodeStatus
name|getNodeStatusAndUpdateContainersInContext
parameter_list|()
block|{
name|NodeStatus
name|nodeStatus
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|NodeStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|nodeStatus
operator|.
name|setNodeId
argument_list|(
name|this
operator|.
name|nodeId
argument_list|)
expr_stmt|;
name|int
name|numActiveContainers
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containersStatuses
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
argument_list|>
name|i
init|=
name|this
operator|.
name|context
operator|.
name|getContainers
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
name|e
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Container
name|container
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// Clone the container to send it to the RM
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
name|containerStatus
init|=
name|container
operator|.
name|cloneAndGetContainerStatus
argument_list|()
decl_stmt|;
name|containersStatuses
operator|.
name|add
argument_list|(
name|containerStatus
argument_list|)
expr_stmt|;
operator|++
name|numActiveContainers
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending out status for container: "
operator|+
name|containerStatus
argument_list|)
expr_stmt|;
if|if
condition|(
name|containerStatus
operator|.
name|getState
argument_list|()
operator|==
name|ContainerState
operator|.
name|COMPLETE
condition|)
block|{
comment|// Remove
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removed completed container "
operator|+
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
name|nodeStatus
operator|.
name|setContainersStatuses
argument_list|(
name|containersStatuses
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|this
operator|.
name|nodeId
operator|+
literal|" sending out status for "
operator|+
name|numActiveContainers
operator|+
literal|" containers"
argument_list|)
expr_stmt|;
name|NodeHealthStatus
name|nodeHealthStatus
init|=
name|this
operator|.
name|context
operator|.
name|getNodeHealthStatus
argument_list|()
decl_stmt|;
name|nodeHealthStatus
operator|.
name|setHealthReport
argument_list|(
name|healthChecker
operator|.
name|getHealthReport
argument_list|()
argument_list|)
expr_stmt|;
name|nodeHealthStatus
operator|.
name|setIsNodeHealthy
argument_list|(
name|healthChecker
operator|.
name|isHealthy
argument_list|()
argument_list|)
expr_stmt|;
name|nodeHealthStatus
operator|.
name|setLastHealthReportTime
argument_list|(
name|healthChecker
operator|.
name|getLastHealthReportTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Node's health-status : "
operator|+
name|nodeHealthStatus
operator|.
name|getIsNodeHealthy
argument_list|()
operator|+
literal|", "
operator|+
name|nodeHealthStatus
operator|.
name|getHealthReport
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|nodeStatus
operator|.
name|setNodeHealthStatus
argument_list|(
name|nodeHealthStatus
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|keepAliveAppIds
init|=
name|createKeepAliveApplicationList
argument_list|()
decl_stmt|;
name|nodeStatus
operator|.
name|setKeepAliveApplications
argument_list|(
name|keepAliveAppIds
argument_list|)
expr_stmt|;
return|return
name|nodeStatus
return|;
block|}
DECL|method|trackAppsForKeepAlive (List<ApplicationId> appIds)
specifier|private
name|void
name|trackAppsForKeepAlive
parameter_list|(
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|appIds
parameter_list|)
block|{
if|if
condition|(
name|tokenKeepAliveEnabled
operator|&&
name|appIds
operator|!=
literal|null
operator|&&
name|appIds
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ApplicationId
name|appId
range|:
name|appIds
control|)
block|{
name|trackAppForKeepAlive
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|trackAppForKeepAlive (ApplicationId appId)
specifier|private
name|void
name|trackAppForKeepAlive
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
comment|// Next keepAlive request for app between 0.7& 0.9 of when the token will
comment|// likely expire.
name|long
name|nextTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
call|(
name|long
call|)
argument_list|(
literal|0.7
operator|*
name|tokenRemovalDelayMs
operator|+
operator|(
literal|0.2
operator|*
name|tokenRemovalDelayMs
operator|*
name|keepAliveDelayRandom
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|)
operator|/
literal|100
argument_list|)
decl_stmt|;
name|appTokenKeepAliveMap
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|nextTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sendOutofBandHeartBeat ()
specifier|public
name|void
name|sendOutofBandHeartBeat
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|heartbeatMonitor
init|)
block|{
name|this
operator|.
name|heartbeatMonitor
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getRMIdentifier ()
specifier|public
name|long
name|getRMIdentifier
parameter_list|()
block|{
return|return
name|this
operator|.
name|rmIdentifier
return|;
block|}
DECL|method|startStatusUpdater ()
specifier|protected
name|void
name|startStatusUpdater
parameter_list|()
block|{
name|statusUpdaterRunnable
operator|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|run
parameter_list|()
block|{
name|int
name|lastHeartBeatID
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|isStopped
condition|)
block|{
comment|// Send heartbeat
try|try
block|{
name|NodeHeartbeatResponse
name|response
init|=
literal|null
decl_stmt|;
name|int
name|rmRetryCount
init|=
literal|0
decl_stmt|;
name|long
name|waitStartTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|NodeStatus
name|nodeStatus
init|=
name|getNodeStatusAndUpdateContainersInContext
argument_list|()
decl_stmt|;
name|nodeStatus
operator|.
name|setResponseId
argument_list|(
name|lastHeartBeatID
argument_list|)
expr_stmt|;
name|NodeHeartbeatRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|NodeHeartbeatRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setNodeStatus
argument_list|(
name|nodeStatus
argument_list|)
expr_stmt|;
name|request
operator|.
name|setLastKnownMasterKey
argument_list|(
name|NodeStatusUpdaterImpl
operator|.
name|this
operator|.
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
operator|.
name|getCurrentKey
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|isStopped
condition|)
block|{
try|try
block|{
name|rmRetryCount
operator|++
expr_stmt|;
name|response
operator|=
name|resourceTracker
operator|.
name|nodeHeartbeat
argument_list|(
name|request
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Trying to heartbeat to ResourceManager, "
operator|+
literal|"current no. of failed attempts is "
operator|+
name|rmRetryCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|waitStartTime
operator|<
name|rmConnectWaitMS
operator|||
name|waitForEver
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sleeping for "
operator|+
name|rmConnectionRetryIntervalMS
operator|/
literal|1000
operator|+
literal|" seconds before next heartbeat to RM"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|rmConnectionRetryIntervalMS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|//done nothing
block|}
block|}
else|else
block|{
name|String
name|errorMessage
init|=
literal|"Failed to heartbeat to RM, "
operator|+
literal|"no. of failed attempts is "
operator|+
name|rmRetryCount
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorMessage
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|errorMessage
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|//get next heartbeat interval from response
name|nextHeartBeatInterval
operator|=
name|response
operator|.
name|getNextHeartBeatInterval
argument_list|()
expr_stmt|;
comment|// See if the master-key has rolled over
name|MasterKey
name|updatedMasterKey
init|=
name|response
operator|.
name|getMasterKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|updatedMasterKey
operator|!=
literal|null
condition|)
block|{
comment|// Will be non-null only on roll-over on RM side
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
operator|.
name|setMasterKey
argument_list|(
name|updatedMasterKey
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|getNodeAction
argument_list|()
operator|==
name|NodeAction
operator|.
name|SHUTDOWN
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Recieved SHUTDOWN signal from Resourcemanager as part of heartbeat,"
operator|+
literal|" hence shutting down."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Message from ResourceManager: "
operator|+
name|response
operator|.
name|getDiagnosticsMessage
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodeManagerEvent
argument_list|(
name|NodeManagerEventType
operator|.
name|SHUTDOWN
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|response
operator|.
name|getNodeAction
argument_list|()
operator|==
name|NodeAction
operator|.
name|RESYNC
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Node is out of sync with ResourceManager,"
operator|+
literal|" hence rebooting."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Message from ResourceManager: "
operator|+
name|response
operator|.
name|getDiagnosticsMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// Invalidate the RMIdentifier while resync
name|NodeStatusUpdaterImpl
operator|.
name|this
operator|.
name|rmIdentifier
operator|=
name|ResourceManagerConstants
operator|.
name|RM_INVALID_IDENTIFIER
expr_stmt|;
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodeManagerEvent
argument_list|(
name|NodeManagerEventType
operator|.
name|RESYNC
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|lastHeartBeatID
operator|=
name|response
operator|.
name|getResponseId
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containersToCleanup
init|=
name|response
operator|.
name|getContainersToCleanup
argument_list|()
decl_stmt|;
if|if
condition|(
name|containersToCleanup
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|CMgrCompletedContainersEvent
argument_list|(
name|containersToCleanup
argument_list|,
name|CMgrCompletedContainersEvent
operator|.
name|Reason
operator|.
name|BY_RESOURCEMANAGER
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|appsToCleanup
init|=
name|response
operator|.
name|getApplicationsToCleanup
argument_list|()
decl_stmt|;
comment|//Only start tracking for keepAlive on FINISH_APP
name|trackAppsForKeepAlive
argument_list|(
name|appsToCleanup
argument_list|)
expr_stmt|;
if|if
condition|(
name|appsToCleanup
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|CMgrCompletedAppsEvent
argument_list|(
name|appsToCleanup
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|YarnRuntimeException
name|e
parameter_list|)
block|{
comment|//catch and throw the exception if tried MAX wait time to connect RM
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodeManagerEvent
argument_list|(
name|NodeManagerEventType
operator|.
name|SHUTDOWN
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// TODO Better error handling. Thread can die with the rest of the
comment|// NM still running.
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught exception in status-updater"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
synchronized|synchronized
init|(
name|heartbeatMonitor
init|)
block|{
name|nextHeartBeatInterval
operator|=
name|nextHeartBeatInterval
operator|<=
literal|0
condition|?
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS
else|:
name|nextHeartBeatInterval
expr_stmt|;
try|try
block|{
name|heartbeatMonitor
operator|.
name|wait
argument_list|(
name|nextHeartBeatInterval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Do Nothing
block|}
block|}
block|}
block|}
block|}
block|}
expr_stmt|;
name|statusUpdater
operator|=
operator|new
name|Thread
argument_list|(
name|statusUpdaterRunnable
argument_list|,
literal|"Node Status Updater"
argument_list|)
expr_stmt|;
name|statusUpdater
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

