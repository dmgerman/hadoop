begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * *  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  * /  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.runtime.docker
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|docker
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|DockerRunCommand
specifier|public
class|class
name|DockerRunCommand
extends|extends
name|DockerCommand
block|{
DECL|field|RUN_COMMAND
specifier|private
specifier|static
specifier|final
name|String
name|RUN_COMMAND
init|=
literal|"run"
decl_stmt|;
DECL|field|image
specifier|private
specifier|final
name|String
name|image
decl_stmt|;
DECL|field|overrrideCommandWithArgs
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|overrrideCommandWithArgs
decl_stmt|;
comment|/** The following are mandatory: */
DECL|method|DockerRunCommand (String containerId, String user, String image)
specifier|public
name|DockerRunCommand
parameter_list|(
name|String
name|containerId
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|image
parameter_list|)
block|{
name|super
argument_list|(
name|RUN_COMMAND
argument_list|)
expr_stmt|;
name|super
operator|.
name|addCommandArguments
argument_list|(
literal|"--name="
operator|+
name|containerId
argument_list|,
literal|"--user="
operator|+
name|user
argument_list|)
expr_stmt|;
name|this
operator|.
name|image
operator|=
name|image
expr_stmt|;
block|}
DECL|method|removeContainerOnExit ()
specifier|public
name|DockerRunCommand
name|removeContainerOnExit
parameter_list|()
block|{
name|super
operator|.
name|addCommandArguments
argument_list|(
literal|"--rm"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|detachOnRun ()
specifier|public
name|DockerRunCommand
name|detachOnRun
parameter_list|()
block|{
name|super
operator|.
name|addCommandArguments
argument_list|(
literal|"-d"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setContainerWorkDir (String workdir)
specifier|public
name|DockerRunCommand
name|setContainerWorkDir
parameter_list|(
name|String
name|workdir
parameter_list|)
block|{
name|super
operator|.
name|addCommandArguments
argument_list|(
literal|"--workdir="
operator|+
name|workdir
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setNetworkType (String type)
specifier|public
name|DockerRunCommand
name|setNetworkType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|super
operator|.
name|addCommandArguments
argument_list|(
literal|"--net="
operator|+
name|type
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addMountLocation (String sourcePath, String destinationPath)
specifier|public
name|DockerRunCommand
name|addMountLocation
parameter_list|(
name|String
name|sourcePath
parameter_list|,
name|String
name|destinationPath
parameter_list|)
block|{
name|super
operator|.
name|addCommandArguments
argument_list|(
literal|"-v"
argument_list|,
name|sourcePath
operator|+
literal|":"
operator|+
name|destinationPath
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setCGroupParent (String parentPath)
specifier|public
name|DockerRunCommand
name|setCGroupParent
parameter_list|(
name|String
name|parentPath
parameter_list|)
block|{
name|super
operator|.
name|addCommandArguments
argument_list|(
literal|"--cgroup-parent="
operator|+
name|parentPath
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setCapabilities (Set<String> capabilties)
specifier|public
name|DockerRunCommand
name|setCapabilities
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|capabilties
parameter_list|)
block|{
comment|//first, drop all capabilities
name|super
operator|.
name|addCommandArguments
argument_list|(
literal|"--cap-drop=ALL"
argument_list|)
expr_stmt|;
comment|//now, add the capabilities supplied
for|for
control|(
name|String
name|capability
range|:
name|capabilties
control|)
block|{
name|super
operator|.
name|addCommandArguments
argument_list|(
literal|"--cap-add="
operator|+
name|capability
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|addDevice (String sourceDevice, String destinationDevice)
specifier|public
name|DockerRunCommand
name|addDevice
parameter_list|(
name|String
name|sourceDevice
parameter_list|,
name|String
name|destinationDevice
parameter_list|)
block|{
name|super
operator|.
name|addCommandArguments
argument_list|(
literal|"--device="
operator|+
name|sourceDevice
operator|+
literal|":"
operator|+
name|destinationDevice
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|enableDetach ()
specifier|public
name|DockerRunCommand
name|enableDetach
parameter_list|()
block|{
name|super
operator|.
name|addCommandArguments
argument_list|(
literal|"--detach=true"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|disableDetach ()
specifier|public
name|DockerRunCommand
name|disableDetach
parameter_list|()
block|{
name|super
operator|.
name|addCommandArguments
argument_list|(
literal|"--detach=false"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setOverrideCommandWithArgs ( List<String> overrideCommandWithArgs)
specifier|public
name|DockerRunCommand
name|setOverrideCommandWithArgs
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|overrideCommandWithArgs
parameter_list|)
block|{
name|this
operator|.
name|overrrideCommandWithArgs
operator|=
name|overrideCommandWithArgs
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|getCommandWithArguments ()
specifier|public
name|String
name|getCommandWithArguments
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|argList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|argList
operator|.
name|add
argument_list|(
name|super
operator|.
name|getCommandWithArguments
argument_list|()
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
name|image
argument_list|)
expr_stmt|;
if|if
condition|(
name|overrrideCommandWithArgs
operator|!=
literal|null
condition|)
block|{
name|argList
operator|.
name|addAll
argument_list|(
name|overrrideCommandWithArgs
argument_list|)
expr_stmt|;
block|}
return|return
name|StringUtils
operator|.
name|join
argument_list|(
literal|" "
argument_list|,
name|argList
argument_list|)
return|;
block|}
block|}
end_class

end_unit

