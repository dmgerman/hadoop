begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * *  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  * /  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.runtime.docker
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|docker
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
comment|/** Represents a docker sub-command  * e.g 'run', 'load', 'inspect' etc.,  */
DECL|class|DockerCommand
specifier|public
specifier|abstract
class|class
name|DockerCommand
block|{
DECL|field|command
specifier|private
specifier|final
name|String
name|command
decl_stmt|;
DECL|field|commandWithArguments
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|commandWithArguments
decl_stmt|;
DECL|method|DockerCommand (String command)
specifier|protected
name|DockerCommand
parameter_list|(
name|String
name|command
parameter_list|)
block|{
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|this
operator|.
name|commandWithArguments
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|commandWithArguments
operator|.
name|add
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
comment|/** Returns the docker sub-command string being used    * e.g 'run'    */
DECL|method|getCommandOption ()
specifier|public
specifier|final
name|String
name|getCommandOption
parameter_list|()
block|{
return|return
name|this
operator|.
name|command
return|;
block|}
comment|/** Add command commandWithArguments - this method is only meant for use by    * sub-classes    * @param arguments to be added    */
DECL|method|addCommandArguments (String... arguments)
specifier|protected
specifier|final
name|void
name|addCommandArguments
parameter_list|(
name|String
modifier|...
name|arguments
parameter_list|)
block|{
name|this
operator|.
name|commandWithArguments
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|arguments
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getCommandWithArguments ()
specifier|public
name|String
name|getCommandWithArguments
parameter_list|()
block|{
return|return
name|StringUtils
operator|.
name|join
argument_list|(
literal|" "
argument_list|,
name|commandWithArguments
argument_list|)
return|;
block|}
block|}
end_class

end_unit

