begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.health
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|health
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|ExitCodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|ShellCommandExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The class which provides functionality of checking the health of the node  * using the configured node health script and reporting back to the service  * for which the health checker has been asked to report.  */
end_comment

begin_class
DECL|class|NodeHealthScriptRunner
specifier|public
class|class
name|NodeHealthScriptRunner
extends|extends
name|TimedHealthReporterService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NodeHealthScriptRunner
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Absolute path to the health script. */
DECL|field|nodeHealthScript
specifier|private
name|String
name|nodeHealthScript
decl_stmt|;
comment|/** Time after which the script should be timed out. */
DECL|field|scriptTimeout
specifier|private
name|long
name|scriptTimeout
decl_stmt|;
comment|/** ShellCommandExecutor used to execute monitoring script. */
DECL|field|commandExecutor
specifier|private
name|ShellCommandExecutor
name|commandExecutor
init|=
literal|null
decl_stmt|;
comment|/** Pattern used for searching in the output of the node health script. */
DECL|field|ERROR_PATTERN
specifier|private
specifier|static
specifier|final
name|String
name|ERROR_PATTERN
init|=
literal|"ERROR"
decl_stmt|;
comment|/** Time out error message. */
DECL|field|NODE_HEALTH_SCRIPT_TIMED_OUT_MSG
specifier|static
specifier|final
name|String
name|NODE_HEALTH_SCRIPT_TIMED_OUT_MSG
init|=
literal|"Node health script timed out"
decl_stmt|;
DECL|method|NodeHealthScriptRunner (String scriptName, long checkInterval, long timeout, String[] scriptArgs)
specifier|private
name|NodeHealthScriptRunner
parameter_list|(
name|String
name|scriptName
parameter_list|,
name|long
name|checkInterval
parameter_list|,
name|long
name|timeout
parameter_list|,
name|String
index|[]
name|scriptArgs
parameter_list|)
block|{
name|super
argument_list|(
name|NodeHealthScriptRunner
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|checkInterval
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeHealthScript
operator|=
name|scriptName
expr_stmt|;
name|this
operator|.
name|scriptTimeout
operator|=
name|timeout
expr_stmt|;
name|setTimerTask
argument_list|(
operator|new
name|NodeHealthMonitorExecutor
argument_list|(
name|scriptArgs
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|newInstance (String scriptName, Configuration conf)
specifier|public
specifier|static
name|NodeHealthScriptRunner
name|newInstance
parameter_list|(
name|String
name|scriptName
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|nodeHealthScriptsConfig
init|=
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_HEALTH_CHECK_SCRIPT_PATH_TEMPLATE
argument_list|,
name|scriptName
argument_list|)
decl_stmt|;
name|String
name|nodeHealthScript
init|=
name|conf
operator|.
name|get
argument_list|(
name|nodeHealthScriptsConfig
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shouldRun
argument_list|(
name|scriptName
argument_list|,
name|nodeHealthScript
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Determine check interval ms
name|String
name|checkIntervalMsConfig
init|=
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_HEALTH_CHECK_SCRIPT_INTERVAL_MS_TEMPLATE
argument_list|,
name|scriptName
argument_list|)
decl_stmt|;
name|long
name|checkIntervalMs
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|checkIntervalMsConfig
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkIntervalMs
operator|==
literal|0L
condition|)
block|{
name|checkIntervalMs
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_HEALTH_CHECK_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_HEALTH_CHECK_INTERVAL_MS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkIntervalMs
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The node health-checker's "
operator|+
literal|"interval-ms can not be set to a negative number."
argument_list|)
throw|;
block|}
comment|// Determine time out
name|String
name|scriptTimeoutConfig
init|=
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_HEALTH_CHECK_SCRIPT_TIMEOUT_MS_TEMPLATE
argument_list|,
name|scriptName
argument_list|)
decl_stmt|;
name|long
name|scriptTimeout
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|scriptTimeoutConfig
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
if|if
condition|(
name|scriptTimeout
operator|==
literal|0L
condition|)
block|{
name|scriptTimeout
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_HEALTH_CHECK_TIMEOUT_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_HEALTH_CHECK_TIMEOUT_MS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scriptTimeout
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The node health-checker's "
operator|+
literal|"timeout can only be set to a positive number."
argument_list|)
throw|;
block|}
comment|// Determine script arguments
name|String
name|scriptArgsConfig
init|=
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_HEALTH_CHECK_SCRIPT_OPTS_TEMPLATE
argument_list|,
name|scriptName
argument_list|)
decl_stmt|;
name|String
index|[]
name|scriptArgs
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|scriptArgsConfig
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
return|return
operator|new
name|NodeHealthScriptRunner
argument_list|(
name|nodeHealthScript
argument_list|,
name|checkIntervalMs
argument_list|,
name|scriptTimeout
argument_list|,
name|scriptArgs
argument_list|)
return|;
block|}
DECL|enum|HealthCheckerExitStatus
specifier|private
enum|enum
name|HealthCheckerExitStatus
block|{
DECL|enumConstant|SUCCESS
name|SUCCESS
block|,
DECL|enumConstant|TIMED_OUT
name|TIMED_OUT
block|,
DECL|enumConstant|FAILED_WITH_EXIT_CODE
name|FAILED_WITH_EXIT_CODE
block|,
DECL|enumConstant|FAILED_WITH_EXCEPTION
name|FAILED_WITH_EXCEPTION
block|,
DECL|enumConstant|FAILED
name|FAILED
block|}
comment|/**    * Class which is used by the {@link Timer} class to periodically execute the    * node health script.    */
DECL|class|NodeHealthMonitorExecutor
specifier|private
class|class
name|NodeHealthMonitorExecutor
extends|extends
name|TimerTask
block|{
DECL|field|exceptionStackTrace
specifier|private
name|String
name|exceptionStackTrace
init|=
literal|""
decl_stmt|;
DECL|method|NodeHealthMonitorExecutor (String[] args)
name|NodeHealthMonitorExecutor
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|execScript
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|execScript
operator|.
name|add
argument_list|(
name|nodeHealthScript
argument_list|)
expr_stmt|;
if|if
condition|(
name|args
operator|!=
literal|null
condition|)
block|{
name|execScript
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|commandExecutor
operator|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|execScript
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|execScript
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|scriptTimeout
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|HealthCheckerExitStatus
name|status
init|=
name|HealthCheckerExitStatus
operator|.
name|SUCCESS
decl_stmt|;
try|try
block|{
name|commandExecutor
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitCodeException
name|e
parameter_list|)
block|{
comment|// ignore the exit code of the script
name|status
operator|=
name|HealthCheckerExitStatus
operator|.
name|FAILED_WITH_EXIT_CODE
expr_stmt|;
comment|// On Windows, we will not hit the Stream closed IOException
comment|// thrown by stdout buffered reader for timeout event.
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
operator|&&
name|commandExecutor
operator|.
name|isTimedOut
argument_list|()
condition|)
block|{
name|status
operator|=
name|HealthCheckerExitStatus
operator|.
name|TIMED_OUT
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught exception : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|commandExecutor
operator|.
name|isTimedOut
argument_list|()
condition|)
block|{
name|status
operator|=
name|HealthCheckerExitStatus
operator|.
name|FAILED_WITH_EXCEPTION
expr_stmt|;
block|}
else|else
block|{
name|status
operator|=
name|HealthCheckerExitStatus
operator|.
name|TIMED_OUT
expr_stmt|;
block|}
name|exceptionStackTrace
operator|=
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|status
operator|==
name|HealthCheckerExitStatus
operator|.
name|SUCCESS
condition|)
block|{
if|if
condition|(
name|hasErrors
argument_list|(
name|commandExecutor
operator|.
name|getOutput
argument_list|()
argument_list|)
condition|)
block|{
name|status
operator|=
name|HealthCheckerExitStatus
operator|.
name|FAILED
expr_stmt|;
block|}
block|}
name|reportHealthStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Method which is used to parse output from the node health monitor and      * send to the report address.      *      * The timed out script or script which causes IOException output is      * ignored.      *      * The node is marked unhealthy if      *<ol>      *<li>The node health script times out</li>      *<li>The node health scripts output has a line which begins      * with ERROR</li>      *<li>An exception is thrown while executing the script</li>      *</ol>      * If the script throws {@link IOException} or {@link ExitCodeException} the      * output is ignored and node is left remaining healthy, as script might      * have syntax error.      *      * @param status      */
DECL|method|reportHealthStatus (HealthCheckerExitStatus status)
name|void
name|reportHealthStatus
parameter_list|(
name|HealthCheckerExitStatus
name|status
parameter_list|)
block|{
switch|switch
condition|(
name|status
condition|)
block|{
case|case
name|SUCCESS
case|:
case|case
name|FAILED_WITH_EXIT_CODE
case|:
comment|// see Javadoc above - we don't report bad health intentionally
name|setHealthyWithoutReport
argument_list|()
expr_stmt|;
break|break;
case|case
name|TIMED_OUT
case|:
name|setUnhealthyWithReport
argument_list|(
name|NODE_HEALTH_SCRIPT_TIMED_OUT_MSG
argument_list|)
expr_stmt|;
break|break;
case|case
name|FAILED_WITH_EXCEPTION
case|:
name|setUnhealthyWithReport
argument_list|(
name|exceptionStackTrace
argument_list|)
expr_stmt|;
break|break;
case|case
name|FAILED
case|:
name|setUnhealthyWithReport
argument_list|(
name|commandExecutor
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unknown HealthCheckerExitStatus - ignored."
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|/**      * Method to check if the output string has line which begins with ERROR.      *      * @param output the output of the node health script to process      * @return true if output string has error pattern in it.      */
DECL|method|hasErrors (String output)
specifier|private
name|boolean
name|hasErrors
parameter_list|(
name|String
name|output
parameter_list|)
block|{
name|String
index|[]
name|splits
init|=
name|output
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|split
range|:
name|splits
control|)
block|{
if|if
condition|(
name|split
operator|.
name|startsWith
argument_list|(
name|ERROR_PATTERN
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|public
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|commandExecutor
operator|!=
literal|null
condition|)
block|{
name|Process
name|p
init|=
name|commandExecutor
operator|.
name|getProcess
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
comment|/**    * Method used to determine whether the {@link NodeHealthScriptRunner}    * should be started or not.<p>    * Returns true if following conditions are met:    *    *<ol>    *<li>Path to Node health check script is not empty</li>    *<li>Node health check script file exists</li>    *</ol>    *    * @return true if node health monitoring service can be started.    */
DECL|method|shouldRun (String script, String healthScript)
specifier|static
name|boolean
name|shouldRun
parameter_list|(
name|String
name|script
parameter_list|,
name|String
name|healthScript
parameter_list|)
block|{
if|if
condition|(
name|healthScript
operator|==
literal|null
operator|||
name|healthScript
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Missing location for the node health check script \"{}\"."
argument_list|,
name|script
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|healthScript
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"File {} for script \"{}\" does not exist."
argument_list|,
name|healthScript
argument_list|,
name|script
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|FileUtil
operator|.
name|canExecute
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"File {} for script \"{}\" can not be executed."
argument_list|,
name|healthScript
argument_list|,
name|script
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

