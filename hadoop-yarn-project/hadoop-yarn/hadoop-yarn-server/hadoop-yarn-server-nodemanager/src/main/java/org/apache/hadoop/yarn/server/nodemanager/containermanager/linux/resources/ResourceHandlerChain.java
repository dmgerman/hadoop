begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * *  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements. See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership. The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License. You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  * /  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.resources
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A helper class to delegate funcationality to a 'chain' of  * ResourceHandler(s)  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|ResourceHandlerChain
specifier|public
class|class
name|ResourceHandlerChain
implements|implements
name|ResourceHandler
block|{
DECL|field|resourceHandlers
specifier|private
specifier|final
name|List
argument_list|<
name|ResourceHandler
argument_list|>
name|resourceHandlers
decl_stmt|;
DECL|method|ResourceHandlerChain (List<ResourceHandler> resourceHandlers)
specifier|public
name|ResourceHandlerChain
parameter_list|(
name|List
argument_list|<
name|ResourceHandler
argument_list|>
name|resourceHandlers
parameter_list|)
block|{
name|this
operator|.
name|resourceHandlers
operator|=
name|resourceHandlers
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|bootstrap (Configuration configuration)
specifier|public
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|bootstrap
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|allOperations
init|=
operator|new
name|ArrayList
argument_list|<
name|PrivilegedOperation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ResourceHandler
name|resourceHandler
range|:
name|resourceHandlers
control|)
block|{
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|handlerOperations
init|=
name|resourceHandler
operator|.
name|bootstrap
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
if|if
condition|(
name|handlerOperations
operator|!=
literal|null
condition|)
block|{
name|allOperations
operator|.
name|addAll
argument_list|(
name|handlerOperations
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|allOperations
return|;
block|}
annotation|@
name|Override
DECL|method|preStart (Container container)
specifier|public
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|preStart
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|allOperations
init|=
operator|new
name|ArrayList
argument_list|<
name|PrivilegedOperation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ResourceHandler
name|resourceHandler
range|:
name|resourceHandlers
control|)
block|{
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|handlerOperations
init|=
name|resourceHandler
operator|.
name|preStart
argument_list|(
name|container
argument_list|)
decl_stmt|;
if|if
condition|(
name|handlerOperations
operator|!=
literal|null
condition|)
block|{
name|allOperations
operator|.
name|addAll
argument_list|(
name|handlerOperations
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|allOperations
return|;
block|}
annotation|@
name|Override
DECL|method|reacquireContainer (ContainerId containerId)
specifier|public
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|reacquireContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|allOperations
init|=
operator|new
name|ArrayList
argument_list|<
name|PrivilegedOperation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ResourceHandler
name|resourceHandler
range|:
name|resourceHandlers
control|)
block|{
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|handlerOperations
init|=
name|resourceHandler
operator|.
name|reacquireContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|handlerOperations
operator|!=
literal|null
condition|)
block|{
name|allOperations
operator|.
name|addAll
argument_list|(
name|handlerOperations
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|allOperations
return|;
block|}
annotation|@
name|Override
DECL|method|postComplete (ContainerId containerId)
specifier|public
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|postComplete
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|allOperations
init|=
operator|new
name|ArrayList
argument_list|<
name|PrivilegedOperation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ResourceHandler
name|resourceHandler
range|:
name|resourceHandlers
control|)
block|{
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|handlerOperations
init|=
name|resourceHandler
operator|.
name|postComplete
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|handlerOperations
operator|!=
literal|null
condition|)
block|{
name|allOperations
operator|.
name|addAll
argument_list|(
name|handlerOperations
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|allOperations
return|;
block|}
annotation|@
name|Override
DECL|method|teardown ()
specifier|public
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|teardown
parameter_list|()
throws|throws
name|ResourceHandlerException
block|{
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|allOperations
init|=
operator|new
name|ArrayList
argument_list|<
name|PrivilegedOperation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ResourceHandler
name|resourceHandler
range|:
name|resourceHandlers
control|)
block|{
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|handlerOperations
init|=
name|resourceHandler
operator|.
name|teardown
argument_list|()
decl_stmt|;
if|if
condition|(
name|handlerOperations
operator|!=
literal|null
condition|)
block|{
name|allOperations
operator|.
name|addAll
argument_list|(
name|handlerOperations
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|allOperations
return|;
block|}
DECL|method|getResourceHandlerList ()
name|List
argument_list|<
name|ResourceHandler
argument_list|>
name|getResourceHandlerList
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|resourceHandlers
argument_list|)
return|;
block|}
block|}
end_class

end_unit

