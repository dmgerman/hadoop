begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|LineNumberReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|RETURNS_DEEP_STUBS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * This is intended to test the DockerContainerExecutor code, but it requires docker  * to be installed.  *<br><ol>  *<li>Install docker, and Compile the code with docker-service-url set to the host and port  * where docker service is running.  *<br><pre><code>  *> mvn clean install -Ddocker-service-url=tcp://0.0.0.0:4243  *                          -DskipTests  *</code></pre>  */
end_comment

begin_class
DECL|class|TestDockerContainerExecutor
specifier|public
class|class
name|TestDockerContainerExecutor
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestDockerContainerExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|workSpace
specifier|private
specifier|static
name|File
name|workSpace
init|=
literal|null
decl_stmt|;
DECL|field|exec
specifier|private
name|DockerContainerExecutor
name|exec
init|=
literal|null
decl_stmt|;
DECL|field|dirsHandler
specifier|private
name|LocalDirsHandlerService
name|dirsHandler
decl_stmt|;
DECL|field|workDir
specifier|private
name|Path
name|workDir
decl_stmt|;
DECL|field|lfs
specifier|private
name|FileContext
name|lfs
decl_stmt|;
DECL|field|yarnImage
specifier|private
name|String
name|yarnImage
decl_stmt|;
DECL|field|id
specifier|private
name|int
name|id
init|=
literal|0
decl_stmt|;
DECL|field|appSubmitter
specifier|private
name|String
name|appSubmitter
decl_stmt|;
DECL|field|dockerUrl
specifier|private
name|String
name|dockerUrl
decl_stmt|;
DECL|field|testImage
specifier|private
name|String
name|testImage
init|=
literal|"centos:latest"
decl_stmt|;
DECL|field|dockerExec
specifier|private
name|String
name|dockerExec
decl_stmt|;
DECL|field|containerIdStr
specifier|private
name|String
name|containerIdStr
decl_stmt|;
DECL|method|getNextContainerId ()
specifier|private
name|ContainerId
name|getNextContainerId
parameter_list|()
block|{
name|ContainerId
name|cId
init|=
name|mock
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|,
name|RETURNS_DEEP_STUBS
argument_list|)
decl_stmt|;
name|String
name|id
init|=
literal|"CONTAINER_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|cId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id
argument_list|)
expr_stmt|;
return|return
name|cId
return|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
try|try
block|{
name|lfs
operator|=
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
expr_stmt|;
name|workDir
operator|=
operator|new
name|Path
argument_list|(
literal|"/tmp/temp-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|workSpace
operator|=
operator|new
name|File
argument_list|(
name|workDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|mkdir
argument_list|(
name|workDir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|yarnImage
operator|=
literal|"yarnImage"
expr_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
literal|"/tmp/nm-local-dir"
operator|+
name|time
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
literal|"/tmp/userlogs"
operator|+
name|time
argument_list|)
expr_stmt|;
name|dockerUrl
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"docker-service-url"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"dockerUrl: "
operator|+
name|dockerUrl
argument_list|)
expr_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|dockerUrl
argument_list|)
condition|)
block|{
return|return;
block|}
name|dockerUrl
operator|=
literal|" -H "
operator|+
name|dockerUrl
expr_stmt|;
name|dockerExec
operator|=
literal|"docker "
operator|+
name|dockerUrl
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_CONTAINER_EXECUTOR_IMAGE_NAME
argument_list|,
name|yarnImage
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_CONTAINER_EXECUTOR_EXEC_NAME
argument_list|,
name|dockerExec
argument_list|)
expr_stmt|;
name|exec
operator|=
operator|new
name|DockerContainerExecutor
argument_list|()
expr_stmt|;
name|dirsHandler
operator|=
operator|new
name|LocalDirsHandlerService
argument_list|()
expr_stmt|;
name|dirsHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|exec
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|appSubmitter
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"application.submitter"
argument_list|)
expr_stmt|;
if|if
condition|(
name|appSubmitter
operator|==
literal|null
operator|||
name|appSubmitter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|appSubmitter
operator|=
literal|"nobody"
expr_stmt|;
block|}
name|shellExec
argument_list|(
name|dockerExec
operator|+
literal|" pull "
operator|+
name|testImage
argument_list|)
expr_stmt|;
block|}
DECL|method|shellExec (String command)
specifier|private
name|Shell
operator|.
name|ShellCommandExecutor
name|shellExec
parameter_list|(
name|String
name|command
parameter_list|)
block|{
try|try
block|{
name|Shell
operator|.
name|ShellCommandExecutor
name|shExec
init|=
operator|new
name|Shell
operator|.
name|ShellCommandExecutor
argument_list|(
name|command
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|workDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|System
operator|.
name|getenv
argument_list|()
argument_list|)
decl_stmt|;
name|shExec
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|shExec
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|shouldRun ()
specifier|private
name|boolean
name|shouldRun
parameter_list|()
block|{
return|return
name|exec
operator|!=
literal|null
return|;
block|}
DECL|method|runAndBlock (ContainerId cId, Map<String, String> launchCtxEnv, String... cmd)
specifier|private
name|int
name|runAndBlock
parameter_list|(
name|ContainerId
name|cId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|launchCtxEnv
parameter_list|,
name|String
modifier|...
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|appId
init|=
literal|"APP_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Container
name|container
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|context
init|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getLaunchContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getEnvironment
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|launchCtxEnv
argument_list|)
expr_stmt|;
name|String
name|script
init|=
name|writeScriptFile
argument_list|(
name|launchCtxEnv
argument_list|,
name|cmd
argument_list|)
decl_stmt|;
name|Path
name|scriptPath
init|=
operator|new
name|Path
argument_list|(
name|script
argument_list|)
decl_stmt|;
name|Path
name|tokensPath
init|=
operator|new
name|Path
argument_list|(
literal|"/dev/null"
argument_list|)
decl_stmt|;
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
name|workSpace
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|pidFile
init|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"pid.txt"
argument_list|)
decl_stmt|;
name|exec
operator|.
name|activateContainer
argument_list|(
name|cId
argument_list|,
name|pidFile
argument_list|)
expr_stmt|;
return|return
name|exec
operator|.
name|launchContainer
argument_list|(
name|container
argument_list|,
name|scriptPath
argument_list|,
name|tokensPath
argument_list|,
name|appSubmitter
argument_list|,
name|appId
argument_list|,
name|workDir
argument_list|,
name|dirsHandler
operator|.
name|getLocalDirs
argument_list|()
argument_list|,
name|dirsHandler
operator|.
name|getLogDirs
argument_list|()
argument_list|)
return|;
block|}
DECL|method|writeScriptFile (Map<String, String> launchCtxEnv, String... cmd)
specifier|private
name|String
name|writeScriptFile
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|launchCtxEnv
parameter_list|,
name|String
modifier|...
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|f
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"TestDockerContainerExecutor"
argument_list|,
literal|".sh"
argument_list|)
decl_stmt|;
name|f
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|PrintWriter
name|p
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|launchCtxEnv
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|p
operator|.
name|println
argument_list|(
literal|"export "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"=\""
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|part
range|:
name|cmd
control|)
block|{
name|p
operator|.
name|print
argument_list|(
name|part
operator|.
name|replace
argument_list|(
literal|"\\"
argument_list|,
literal|"\\\\"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\\'"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|print
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|println
argument_list|()
expr_stmt|;
name|p
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|f
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
try|try
block|{
name|lfs
operator|.
name|delete
argument_list|(
name|workDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|testLaunchContainer ()
specifier|public
name|void
name|testLaunchContainer
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|shouldRun
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Docker not installed, aborting test."
argument_list|)
expr_stmt|;
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_CONTAINER_EXECUTOR_IMAGE_NAME
argument_list|,
name|testImage
argument_list|)
expr_stmt|;
name|String
name|touchFileName
init|=
literal|"touch-file-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|File
name|touchFile
init|=
operator|new
name|File
argument_list|(
name|dirsHandler
operator|.
name|getLocalDirs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|touchFileName
argument_list|)
decl_stmt|;
name|ContainerId
name|cId
init|=
name|getNextContainerId
argument_list|()
decl_stmt|;
name|int
name|ret
init|=
name|runAndBlock
argument_list|(
name|cId
argument_list|,
name|env
argument_list|,
literal|"touch"
argument_list|,
name|touchFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"&&"
argument_list|,
literal|"cp"
argument_list|,
name|touchFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

