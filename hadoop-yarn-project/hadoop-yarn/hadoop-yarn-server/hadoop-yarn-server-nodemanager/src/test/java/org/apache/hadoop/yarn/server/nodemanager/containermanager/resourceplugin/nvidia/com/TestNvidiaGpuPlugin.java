begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.nvidia.com
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|nvidia
operator|.
name|com
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|Device
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|DeviceRuntimeSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|YarnRuntimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|com
operator|.
name|nvidia
operator|.
name|NvidiaGPUPluginForRuntimeV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Test case for Nvidia GPU device plugin.  * */
end_comment

begin_class
DECL|class|TestNvidiaGpuPlugin
specifier|public
class|class
name|TestNvidiaGpuPlugin
block|{
annotation|@
name|Test
DECL|method|testGetNvidiaDevices ()
specifier|public
name|void
name|testGetNvidiaDevices
parameter_list|()
throws|throws
name|Exception
block|{
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|NvidiaCommandExecutor
name|mockShell
init|=
name|mock
argument_list|(
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|NvidiaCommandExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|deviceInfoShellOutput
init|=
literal|"0, 00000000:04:00.0\n"
operator|+
literal|"1, 00000000:82:00.0"
decl_stmt|;
name|String
name|majorMinorNumber0
init|=
literal|"c3:0"
decl_stmt|;
name|String
name|majorMinorNumber1
init|=
literal|"c3:1"
decl_stmt|;
name|when
argument_list|(
name|mockShell
operator|.
name|getDeviceInfo
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|deviceInfoShellOutput
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockShell
operator|.
name|getMajorMinorInfo
argument_list|(
literal|"nvidia0"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|majorMinorNumber0
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockShell
operator|.
name|getMajorMinorInfo
argument_list|(
literal|"nvidia1"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|majorMinorNumber1
argument_list|)
expr_stmt|;
name|NvidiaGPUPluginForRuntimeV2
name|plugin
init|=
operator|new
name|NvidiaGPUPluginForRuntimeV2
argument_list|()
decl_stmt|;
name|plugin
operator|.
name|setShellExecutor
argument_list|(
name|mockShell
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|setPathOfGpuBinary
argument_list|(
literal|"/fake/nvidia-smi"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Device
argument_list|>
name|expectedDevices
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedDevices
operator|.
name|add
argument_list|(
name|Device
operator|.
name|Builder
operator|.
name|newInstance
argument_list|()
operator|.
name|setId
argument_list|(
literal|0
argument_list|)
operator|.
name|setHealthy
argument_list|(
literal|true
argument_list|)
operator|.
name|setBusID
argument_list|(
literal|"00000000:04:00.0"
argument_list|)
operator|.
name|setDevPath
argument_list|(
literal|"/dev/nvidia0"
argument_list|)
operator|.
name|setMajorNumber
argument_list|(
literal|195
argument_list|)
operator|.
name|setMinorNumber
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|expectedDevices
operator|.
name|add
argument_list|(
name|Device
operator|.
name|Builder
operator|.
name|newInstance
argument_list|()
operator|.
name|setId
argument_list|(
literal|1
argument_list|)
operator|.
name|setHealthy
argument_list|(
literal|true
argument_list|)
operator|.
name|setBusID
argument_list|(
literal|"00000000:82:00.0"
argument_list|)
operator|.
name|setDevPath
argument_list|(
literal|"/dev/nvidia1"
argument_list|)
operator|.
name|setMajorNumber
argument_list|(
literal|195
argument_list|)
operator|.
name|setMinorNumber
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Device
argument_list|>
name|devices
init|=
name|plugin
operator|.
name|getDevices
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedDevices
argument_list|,
name|devices
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOnDeviceAllocated ()
specifier|public
name|void
name|testOnDeviceAllocated
parameter_list|()
throws|throws
name|Exception
block|{
name|NvidiaGPUPluginForRuntimeV2
name|plugin
init|=
operator|new
name|NvidiaGPUPluginForRuntimeV2
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Device
argument_list|>
name|allocatedDevices
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|DeviceRuntimeSpec
name|spec
init|=
name|plugin
operator|.
name|onDevicesAllocated
argument_list|(
name|allocatedDevices
argument_list|,
name|YarnRuntimeType
operator|.
name|RUNTIME_DEFAULT
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|spec
argument_list|)
expr_stmt|;
comment|// allocate one device
name|allocatedDevices
operator|.
name|add
argument_list|(
name|Device
operator|.
name|Builder
operator|.
name|newInstance
argument_list|()
operator|.
name|setId
argument_list|(
literal|0
argument_list|)
operator|.
name|setHealthy
argument_list|(
literal|true
argument_list|)
operator|.
name|setBusID
argument_list|(
literal|"00000000:04:00.0"
argument_list|)
operator|.
name|setDevPath
argument_list|(
literal|"/dev/nvidia0"
argument_list|)
operator|.
name|setMajorNumber
argument_list|(
literal|195
argument_list|)
operator|.
name|setMinorNumber
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|spec
operator|=
name|plugin
operator|.
name|onDevicesAllocated
argument_list|(
name|allocatedDevices
argument_list|,
name|YarnRuntimeType
operator|.
name|RUNTIME_DOCKER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"nvidia"
argument_list|,
name|spec
operator|.
name|getContainerRuntime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|spec
operator|.
name|getEnvs
argument_list|()
operator|.
name|get
argument_list|(
literal|"NVIDIA_VISIBLE_DEVICES"
argument_list|)
argument_list|)
expr_stmt|;
comment|// two device allowed
name|allocatedDevices
operator|.
name|add
argument_list|(
name|Device
operator|.
name|Builder
operator|.
name|newInstance
argument_list|()
operator|.
name|setId
argument_list|(
literal|0
argument_list|)
operator|.
name|setHealthy
argument_list|(
literal|true
argument_list|)
operator|.
name|setBusID
argument_list|(
literal|"00000000:82:00.0"
argument_list|)
operator|.
name|setDevPath
argument_list|(
literal|"/dev/nvidia1"
argument_list|)
operator|.
name|setMajorNumber
argument_list|(
literal|195
argument_list|)
operator|.
name|setMinorNumber
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|spec
operator|=
name|plugin
operator|.
name|onDevicesAllocated
argument_list|(
name|allocatedDevices
argument_list|,
name|YarnRuntimeType
operator|.
name|RUNTIME_DOCKER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"nvidia"
argument_list|,
name|spec
operator|.
name|getContainerRuntime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0,1"
argument_list|,
name|spec
operator|.
name|getEnvs
argument_list|()
operator|.
name|get
argument_list|(
literal|"NVIDIA_VISIBLE_DEVICES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

