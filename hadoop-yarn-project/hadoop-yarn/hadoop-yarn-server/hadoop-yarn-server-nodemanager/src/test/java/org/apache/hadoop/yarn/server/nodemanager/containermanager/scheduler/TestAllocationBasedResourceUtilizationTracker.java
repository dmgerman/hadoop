begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|scheduler
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|ContainersMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|ContainersMonitorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests for the {@link AllocationBasedResourceUtilizationTracker} class.  */
end_comment

begin_class
DECL|class|TestAllocationBasedResourceUtilizationTracker
specifier|public
class|class
name|TestAllocationBasedResourceUtilizationTracker
block|{
DECL|field|mockContainerScheduler
specifier|private
name|ContainerScheduler
name|mockContainerScheduler
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|mockContainerScheduler
operator|=
name|mock
argument_list|(
name|ContainerScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|ContainersMonitor
name|containersMonitor
init|=
operator|new
name|ContainersMonitorImpl
argument_list|(
name|mock
argument_list|(
name|ContainerExecutor
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|AsyncDispatcher
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_PMEM_MB
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_PMEM_CHECK_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_VMEM_CHECK_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|YarnConfiguration
operator|.
name|NM_VMEM_PMEM_RATIO
argument_list|,
literal|2.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_VCORES
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|containersMonitor
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContainerScheduler
operator|.
name|getContainersMonitor
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containersMonitor
argument_list|)
expr_stmt|;
block|}
comment|/**    * Node has capacity for 1024 MB and 8 cores. Saturate the node. When full the    * hasResourceAvailable should return false.    */
annotation|@
name|Test
DECL|method|testHasResourcesAvailable ()
specifier|public
name|void
name|testHasResourcesAvailable
parameter_list|()
block|{
name|AllocationBasedResourceUtilizationTracker
name|tracker
init|=
operator|new
name|AllocationBasedResourceUtilizationTracker
argument_list|(
name|mockContainerScheduler
argument_list|)
decl_stmt|;
name|Container
name|testContainer
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|testContainer
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|512
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tracker
operator|.
name|hasResourcesAvailable
argument_list|(
name|testContainer
argument_list|)
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|addContainerResources
argument_list|(
name|testContainer
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|tracker
operator|.
name|hasResourcesAvailable
argument_list|(
name|testContainer
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the case where the current allocation has been truncated to 0.8888891    * (8/9 cores used). Request 1 additional core - hasEnoughCpu should return    * true.    */
annotation|@
name|Test
DECL|method|testHasEnoughCpu ()
specifier|public
name|void
name|testHasEnoughCpu
parameter_list|()
block|{
name|AllocationBasedResourceUtilizationTracker
name|tracker
init|=
operator|new
name|AllocationBasedResourceUtilizationTracker
argument_list|(
name|mockContainerScheduler
argument_list|)
decl_stmt|;
name|float
name|currentAllocation
init|=
literal|0.8888891f
decl_stmt|;
name|long
name|totalCores
init|=
literal|9
decl_stmt|;
name|int
name|alreadyUsedCores
init|=
literal|8
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tracker
operator|.
name|hasEnoughCpu
argument_list|(
name|currentAllocation
argument_list|,
name|totalCores
argument_list|,
operator|(
name|int
operator|)
name|totalCores
operator|-
name|alreadyUsedCores
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|tracker
operator|.
name|hasEnoughCpu
argument_list|(
name|currentAllocation
argument_list|,
name|totalCores
argument_list|,
operator|(
name|int
operator|)
name|totalCores
operator|-
name|alreadyUsedCores
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

