begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.container
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|argThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|reset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|atLeastOnce
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
operator|.
name|SimpleEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerRetryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerRetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|DrainDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
operator|.
name|ExitCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerStateTransitionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DeletionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|AuxServicesEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|AuxServicesEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|deletion
operator|.
name|task
operator|.
name|DockerContainerDeletionMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
operator|.
name|ContainerLaunch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
operator|.
name|ContainersLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
operator|.
name|ContainersLauncherEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
operator|.
name|ContainersLauncherEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|LocalResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ContainerLocalizationCleanupEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ContainerLocalizationRequestEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizationEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|loghandler
operator|.
name|event
operator|.
name|LogHandlerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|loghandler
operator|.
name|event
operator|.
name|LogHandlerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|ContainerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|ContainersMonitorEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|ContainersMonitorEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|runtime
operator|.
name|ContainerRuntimeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|scheduler
operator|.
name|ContainerScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|scheduler
operator|.
name|ContainerSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|scheduler
operator|.
name|ContainerSchedulerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|metrics
operator|.
name|NodeManagerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeStatusUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMNullStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|TestContainer
specifier|public
class|class
name|TestContainer
block|{
DECL|field|metrics
specifier|final
name|NodeManagerMetrics
name|metrics
init|=
name|NodeManagerMetrics
operator|.
name|create
argument_list|()
decl_stmt|;
DECL|field|conf
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
DECL|field|FAKE_LOCALIZATION_ERROR
specifier|final
name|String
name|FAKE_LOCALIZATION_ERROR
init|=
literal|"Fake localization error"
decl_stmt|;
comment|/**    * Verify correct container request events sent to localizer.    */
annotation|@
name|Test
DECL|method|testLocalizationRequest ()
specifier|public
name|void
name|testLocalizationRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|7
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|NEW
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
comment|// Verify request for public/private resources to localizer
name|ResourcesRequestedMatcher
name|matchesReq
init|=
operator|new
name|ResourcesRequestedMatcher
argument_list|(
name|wc
operator|.
name|localResources
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|wc
operator|.
name|localizerBus
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
name|matchesReq
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|LOCALIZING
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Verify container launch when all resources already cached.    */
annotation|@
name|Test
DECL|method|testLocalizationLaunch ()
specifier|public
name|void
name|testLocalizationLaunch
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|8
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|NEW
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|localPaths
init|=
name|wc
operator|.
name|localizeResources
argument_list|()
decl_stmt|;
comment|// all resources should be localized
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|SCHEDULED
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|loc
range|:
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|localPaths
operator|.
name|remove
argument_list|(
name|loc
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|loc
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|localPaths
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|WrappedContainer
name|wcf
init|=
name|wc
decl_stmt|;
comment|// verify container launch
name|ArgumentMatcher
argument_list|<
name|ContainersLauncherEvent
argument_list|>
name|matchesContainerLaunch
init|=
operator|new
name|ArgumentMatcher
argument_list|<
name|ContainersLauncherEvent
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|ContainersLauncherEvent
name|launchEvent
init|=
operator|(
name|ContainersLauncherEvent
operator|)
name|o
decl_stmt|;
return|return
name|wcf
operator|.
name|c
operator|==
name|launchEvent
operator|.
name|getContainer
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|verify
argument_list|(
name|wc
operator|.
name|launcherBus
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
name|matchesContainerLaunch
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// mocked generic
DECL|method|testExternalKill ()
specifier|public
name|void
name|testExternalKill
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|13
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|)
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
name|wc
operator|.
name|localizeResources
argument_list|()
expr_stmt|;
name|int
name|running
init|=
name|metrics
operator|.
name|getRunningContainers
argument_list|()
decl_stmt|;
name|wc
operator|.
name|launchContainer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|running
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getRunningContainers
argument_list|()
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|wc
operator|.
name|localizerBus
argument_list|)
expr_stmt|;
name|wc
operator|.
name|containerKilledOnRequest
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCleanupCall
argument_list|(
name|wc
argument_list|)
expr_stmt|;
name|int
name|failed
init|=
name|metrics
operator|.
name|getFailedContainers
argument_list|()
decl_stmt|;
name|wc
operator|.
name|containerResourcesCleanup
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|failed
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getFailedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|running
argument_list|,
name|metrics
operator|.
name|getRunningContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// mocked generic
DECL|method|testDockerContainerExternalKill ()
specifier|public
name|void
name|testDockerContainerExternalKill
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|13
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|)
expr_stmt|;
name|wc
operator|.
name|setupDockerContainerEnv
argument_list|()
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
name|wc
operator|.
name|localizeResources
argument_list|()
expr_stmt|;
name|int
name|running
init|=
name|metrics
operator|.
name|getRunningContainers
argument_list|()
decl_stmt|;
name|wc
operator|.
name|launchContainer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|running
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getRunningContainers
argument_list|()
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|wc
operator|.
name|localizerBus
argument_list|)
expr_stmt|;
name|wc
operator|.
name|containerKilledOnRequest
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCleanupCall
argument_list|(
name|wc
argument_list|)
expr_stmt|;
name|int
name|failed
init|=
name|metrics
operator|.
name|getFailedContainers
argument_list|()
decl_stmt|;
name|wc
operator|.
name|dockerContainerResourcesCleanup
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|failed
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getFailedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|running
argument_list|,
name|metrics
operator|.
name|getRunningContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// mocked generic
DECL|method|testContainerPauseAndResume ()
specifier|public
name|void
name|testContainerPauseAndResume
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|13
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|)
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
name|wc
operator|.
name|localizeResources
argument_list|()
expr_stmt|;
name|int
name|running
init|=
name|metrics
operator|.
name|getRunningContainers
argument_list|()
decl_stmt|;
name|wc
operator|.
name|launchContainer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|running
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getRunningContainers
argument_list|()
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|wc
operator|.
name|localizerBus
argument_list|)
expr_stmt|;
name|wc
operator|.
name|pauseContainer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|PAUSED
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|resumeContainer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|containerKilledOnRequest
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCleanupCall
argument_list|(
name|wc
argument_list|)
expr_stmt|;
name|int
name|failed
init|=
name|metrics
operator|.
name|getFailedContainers
argument_list|()
decl_stmt|;
name|wc
operator|.
name|containerResourcesCleanup
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|failed
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getFailedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|running
argument_list|,
name|metrics
operator|.
name|getRunningContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// mocked generic
DECL|method|testCleanupOnFailure ()
specifier|public
name|void
name|testCleanupOnFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|10
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|)
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
name|wc
operator|.
name|localizeResources
argument_list|()
expr_stmt|;
name|wc
operator|.
name|launchContainer
argument_list|()
expr_stmt|;
name|reset
argument_list|(
name|wc
operator|.
name|localizerBus
argument_list|)
expr_stmt|;
name|wc
operator|.
name|containerFailed
argument_list|(
name|ExitCode
operator|.
name|FORCE_KILLED
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCleanupCall
argument_list|(
name|wc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// mocked generic
DECL|method|testDockerContainerCleanupOnFailure ()
specifier|public
name|void
name|testDockerContainerCleanupOnFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|10
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|)
expr_stmt|;
name|wc
operator|.
name|setupDockerContainerEnv
argument_list|()
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
name|wc
operator|.
name|localizeResources
argument_list|()
expr_stmt|;
name|wc
operator|.
name|launchContainer
argument_list|()
expr_stmt|;
name|reset
argument_list|(
name|wc
operator|.
name|localizerBus
argument_list|)
expr_stmt|;
name|wc
operator|.
name|containerFailed
argument_list|(
name|ExitCode
operator|.
name|FORCE_KILLED
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCleanupCall
argument_list|(
name|wc
argument_list|)
expr_stmt|;
name|wc
operator|.
name|dockerContainerResourcesCleanup
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// mocked generic
DECL|method|testCleanupOnSuccess ()
specifier|public
name|void
name|testCleanupOnSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|11
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|)
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
name|wc
operator|.
name|localizeResources
argument_list|()
expr_stmt|;
name|int
name|running
init|=
name|metrics
operator|.
name|getRunningContainers
argument_list|()
decl_stmt|;
name|wc
operator|.
name|launchContainer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|running
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getRunningContainers
argument_list|()
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|wc
operator|.
name|localizerBus
argument_list|)
expr_stmt|;
name|wc
operator|.
name|containerSuccessful
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|EXITED_WITH_SUCCESS
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCleanupCall
argument_list|(
name|wc
argument_list|)
expr_stmt|;
name|int
name|completed
init|=
name|metrics
operator|.
name|getCompletedContainers
argument_list|()
decl_stmt|;
name|wc
operator|.
name|containerResourcesCleanup
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|completed
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getCompletedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|running
argument_list|,
name|metrics
operator|.
name|getRunningContainers
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerEventType
name|e1
init|=
name|wc
operator|.
name|initStateToEvent
operator|.
name|get
argument_list|(
name|ContainerState
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|ContainerState
name|s2
init|=
name|wc
operator|.
name|eventToFinalState
operator|.
name|get
argument_list|(
name|e1
argument_list|)
decl_stmt|;
name|ContainerEventType
name|e2
init|=
name|wc
operator|.
name|initStateToEvent
operator|.
name|get
argument_list|(
name|s2
argument_list|)
decl_stmt|;
name|ContainerState
name|s3
init|=
name|wc
operator|.
name|eventToFinalState
operator|.
name|get
argument_list|(
name|e2
argument_list|)
decl_stmt|;
name|ContainerEventType
name|e3
init|=
name|wc
operator|.
name|initStateToEvent
operator|.
name|get
argument_list|(
name|s3
argument_list|)
decl_stmt|;
name|ContainerState
name|s4
init|=
name|wc
operator|.
name|eventToFinalState
operator|.
name|get
argument_list|(
name|e3
argument_list|)
decl_stmt|;
name|ContainerEventType
name|e4
init|=
name|wc
operator|.
name|initStateToEvent
operator|.
name|get
argument_list|(
name|s4
argument_list|)
decl_stmt|;
name|ContainerState
name|s5
init|=
name|wc
operator|.
name|eventToFinalState
operator|.
name|get
argument_list|(
name|e4
argument_list|)
decl_stmt|;
name|ContainerEventType
name|e5
init|=
name|wc
operator|.
name|initStateToEvent
operator|.
name|get
argument_list|(
name|s5
argument_list|)
decl_stmt|;
name|ContainerState
name|s6
init|=
name|wc
operator|.
name|eventToFinalState
operator|.
name|get
argument_list|(
name|e5
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|LOCALIZING
argument_list|,
name|s2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|SCHEDULED
argument_list|,
name|s3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|s4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|EXITED_WITH_SUCCESS
argument_list|,
name|s5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|s6
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerEventType
operator|.
name|INIT_CONTAINER
argument_list|,
name|e1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerEventType
operator|.
name|RESOURCE_LOCALIZED
argument_list|,
name|e2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerEventType
operator|.
name|CONTAINER_LAUNCHED
argument_list|,
name|e3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_SUCCESS
argument_list|,
name|e4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerEventType
operator|.
name|CONTAINER_RESOURCES_CLEANEDUP
argument_list|,
name|e5
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// mocked generic
DECL|method|testDockerContainerCleanupOnSuccess ()
specifier|public
name|void
name|testDockerContainerCleanupOnSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|11
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|)
expr_stmt|;
name|wc
operator|.
name|setupDockerContainerEnv
argument_list|()
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
name|wc
operator|.
name|localizeResources
argument_list|()
expr_stmt|;
name|int
name|running
init|=
name|metrics
operator|.
name|getRunningContainers
argument_list|()
decl_stmt|;
name|wc
operator|.
name|launchContainer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|running
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getRunningContainers
argument_list|()
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|wc
operator|.
name|localizerBus
argument_list|)
expr_stmt|;
name|wc
operator|.
name|containerSuccessful
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|EXITED_WITH_SUCCESS
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCleanupCall
argument_list|(
name|wc
argument_list|)
expr_stmt|;
name|int
name|completed
init|=
name|metrics
operator|.
name|getCompletedContainers
argument_list|()
decl_stmt|;
name|wc
operator|.
name|dockerContainerResourcesCleanup
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|completed
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getCompletedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|running
argument_list|,
name|metrics
operator|.
name|getRunningContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// mocked generic
DECL|method|testInitWhileDone ()
specifier|public
name|void
name|testInitWhileDone
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|6
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|)
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
name|wc
operator|.
name|localizeResources
argument_list|()
expr_stmt|;
name|wc
operator|.
name|launchContainer
argument_list|()
expr_stmt|;
name|reset
argument_list|(
name|wc
operator|.
name|localizerBus
argument_list|)
expr_stmt|;
name|wc
operator|.
name|containerSuccessful
argument_list|()
expr_stmt|;
name|wc
operator|.
name|containerResourcesCleanup
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|verifyOutofBandHeartBeat
argument_list|(
name|wc
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now in DONE, issue INIT
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
comment|// Verify still in DONE
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCleanupCall
argument_list|(
name|wc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// mocked generic
DECL|method|testDockerContainerInitWhileDone ()
specifier|public
name|void
name|testDockerContainerInitWhileDone
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|6
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|)
expr_stmt|;
name|wc
operator|.
name|setupDockerContainerEnv
argument_list|()
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
name|wc
operator|.
name|localizeResources
argument_list|()
expr_stmt|;
name|wc
operator|.
name|launchContainer
argument_list|()
expr_stmt|;
name|reset
argument_list|(
name|wc
operator|.
name|localizerBus
argument_list|)
expr_stmt|;
name|wc
operator|.
name|containerSuccessful
argument_list|()
expr_stmt|;
name|wc
operator|.
name|dockerContainerResourcesCleanup
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|verifyOutofBandHeartBeat
argument_list|(
name|wc
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now in DONE, issue INIT
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
comment|// Verify still in DONE
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCleanupCall
argument_list|(
name|wc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// mocked generic
DECL|method|testLocalizationFailureAtDone ()
specifier|public
name|void
name|testLocalizationFailureAtDone
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|6
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|)
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
name|wc
operator|.
name|localizeResources
argument_list|()
expr_stmt|;
name|wc
operator|.
name|launchContainer
argument_list|()
expr_stmt|;
name|reset
argument_list|(
name|wc
operator|.
name|localizerBus
argument_list|)
expr_stmt|;
name|wc
operator|.
name|containerSuccessful
argument_list|()
expr_stmt|;
name|wc
operator|.
name|containerResourcesCleanup
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|verifyOutofBandHeartBeat
argument_list|(
name|wc
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now in DONE, issue RESOURCE_FAILED as done by LocalizeRunner
name|wc
operator|.
name|resourceFailedContainer
argument_list|()
expr_stmt|;
comment|// Verify still in DONE
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCleanupCall
argument_list|(
name|wc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// mocked generic
DECL|method|testDockerContainerLocalizationFailureAtDone ()
specifier|public
name|void
name|testDockerContainerLocalizationFailureAtDone
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|6
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|)
expr_stmt|;
name|wc
operator|.
name|setupDockerContainerEnv
argument_list|()
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
name|wc
operator|.
name|localizeResources
argument_list|()
expr_stmt|;
name|wc
operator|.
name|launchContainer
argument_list|()
expr_stmt|;
name|reset
argument_list|(
name|wc
operator|.
name|localizerBus
argument_list|)
expr_stmt|;
name|wc
operator|.
name|containerSuccessful
argument_list|()
expr_stmt|;
name|wc
operator|.
name|dockerContainerResourcesCleanup
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|verifyOutofBandHeartBeat
argument_list|(
name|wc
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now in DONE, issue RESOURCE_FAILED as done by LocalizeRunner
name|wc
operator|.
name|resourceFailedContainer
argument_list|()
expr_stmt|;
comment|// Verify still in DONE
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCleanupCall
argument_list|(
name|wc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testLocalizationFailureWhileRunning ()
specifier|public
name|void
name|testLocalizationFailureWhileRunning
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|6
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|)
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
name|wc
operator|.
name|localizeResources
argument_list|()
expr_stmt|;
name|wc
operator|.
name|launchContainer
argument_list|()
expr_stmt|;
name|reset
argument_list|(
name|wc
operator|.
name|localizerBus
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now in RUNNING, handle ContainerResourceFailedEvent, cause NPE before
name|wc
operator|.
name|handleContainerResourceFailedEvent
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// mocked generic
DECL|method|testCleanupOnKillRequest ()
specifier|public
name|void
name|testCleanupOnKillRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|12
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|)
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
name|wc
operator|.
name|localizeResources
argument_list|()
expr_stmt|;
name|wc
operator|.
name|launchContainer
argument_list|()
expr_stmt|;
name|reset
argument_list|(
name|wc
operator|.
name|localizerBus
argument_list|)
expr_stmt|;
name|wc
operator|.
name|killContainer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|containerKilledOnRequest
argument_list|()
expr_stmt|;
name|verifyCleanupCall
argument_list|(
name|wc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testKillOnNew ()
specifier|public
name|void
name|testKillOnNew
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|13
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|NEW
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|killed
init|=
name|metrics
operator|.
name|getKilledContainers
argument_list|()
decl_stmt|;
name|wc
operator|.
name|killContainer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|verifyOutofBandHeartBeat
argument_list|(
name|wc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerExitStatus
operator|.
name|KILLED_BY_RESOURCEMANAGER
argument_list|,
name|wc
operator|.
name|c
operator|.
name|cloneAndGetContainerStatus
argument_list|()
operator|.
name|getExitStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|wc
operator|.
name|c
operator|.
name|cloneAndGetContainerStatus
argument_list|()
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|contains
argument_list|(
literal|"KillRequest"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|killed
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getKilledContainers
argument_list|()
argument_list|)
expr_stmt|;
comment|// check container metrics is generated.
name|ContainerMetrics
name|containerMetrics
init|=
name|ContainerMetrics
operator|.
name|forContainer
argument_list|(
name|wc
operator|.
name|cId
argument_list|,
literal|1
argument_list|,
literal|5000
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerExitStatus
operator|.
name|KILLED_BY_RESOURCEMANAGER
argument_list|,
name|containerMetrics
operator|.
name|exitCode
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerMetrics
operator|.
name|startTime
operator|.
name|value
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerMetrics
operator|.
name|finishTime
operator|.
name|value
argument_list|()
operator|>
name|containerMetrics
operator|.
name|startTime
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerEventType
operator|.
name|KILL_CONTAINER
argument_list|,
name|wc
operator|.
name|initStateToEvent
operator|.
name|get
argument_list|(
name|ContainerState
operator|.
name|NEW
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|wc
operator|.
name|eventToFinalState
operator|.
name|get
argument_list|(
name|ContainerEventType
operator|.
name|KILL_CONTAINER
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testKillOnLocalizing ()
specifier|public
name|void
name|testKillOnLocalizing
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|14
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|)
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|LOCALIZING
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|killContainer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerExitStatus
operator|.
name|KILLED_BY_RESOURCEMANAGER
argument_list|,
name|wc
operator|.
name|c
operator|.
name|cloneAndGetContainerStatus
argument_list|()
operator|.
name|getExitStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|wc
operator|.
name|c
operator|.
name|cloneAndGetContainerStatus
argument_list|()
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|contains
argument_list|(
literal|"KillRequest"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|killed
init|=
name|metrics
operator|.
name|getKilledContainers
argument_list|()
decl_stmt|;
name|wc
operator|.
name|containerResourcesCleanup
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|killed
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getKilledContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testKillOnLocalizationFailed ()
specifier|public
name|void
name|testKillOnLocalizationFailed
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|15
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|)
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
name|wc
operator|.
name|failLocalizeResources
argument_list|(
name|wc
operator|.
name|getLocalResourceCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|killContainer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCleanupCall
argument_list|(
name|wc
argument_list|)
expr_stmt|;
name|int
name|failed
init|=
name|metrics
operator|.
name|getFailedContainers
argument_list|()
decl_stmt|;
name|wc
operator|.
name|containerResourcesCleanup
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|failed
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getFailedContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testKillOnLocalizedWhenContainerNotLaunchedContainerKilled ()
specifier|public
name|void
name|testKillOnLocalizedWhenContainerNotLaunchedContainerKilled
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|17
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|)
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
name|wc
operator|.
name|localizeResources
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|SCHEDULED
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerLaunch
name|launcher
init|=
name|wc
operator|.
name|launcher
operator|.
name|running
operator|.
name|get
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
name|wc
operator|.
name|killContainer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|launcher
operator|.
name|call
argument_list|()
expr_stmt|;
name|wc
operator|.
name|drainDispatcherEvents
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|CONTAINER_CLEANEDUP_AFTER_KILL
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCleanupCall
argument_list|(
name|wc
argument_list|)
expr_stmt|;
name|int
name|killed
init|=
name|metrics
operator|.
name|getKilledContainers
argument_list|()
decl_stmt|;
name|wc
operator|.
name|c
operator|.
name|handle
argument_list|(
operator|new
name|ContainerEvent
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_RESOURCES_CLEANEDUP
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|killed
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getKilledContainers
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getRunningContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testDockerKillOnLocalizedWhenContainerNotLaunchedContainerKilled ()
specifier|public
name|void
name|testDockerKillOnLocalizedWhenContainerNotLaunchedContainerKilled
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|17
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|)
expr_stmt|;
name|wc
operator|.
name|setupDockerContainerEnv
argument_list|()
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
name|wc
operator|.
name|localizeResources
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|SCHEDULED
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerLaunch
name|launcher
init|=
name|wc
operator|.
name|launcher
operator|.
name|running
operator|.
name|get
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
name|wc
operator|.
name|killContainer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|launcher
operator|.
name|call
argument_list|()
expr_stmt|;
name|wc
operator|.
name|drainDispatcherEvents
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|CONTAINER_CLEANEDUP_AFTER_KILL
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|verifyDockerContainerCleanupCall
argument_list|(
name|wc
argument_list|)
expr_stmt|;
name|int
name|killed
init|=
name|metrics
operator|.
name|getKilledContainers
argument_list|()
decl_stmt|;
name|wc
operator|.
name|c
operator|.
name|handle
argument_list|(
operator|new
name|ContainerEvent
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_RESOURCES_CLEANEDUP
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|killed
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getKilledContainers
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getRunningContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testKillOnLocalizedWhenContainerNotLaunchedContainerSuccess ()
specifier|public
name|void
name|testKillOnLocalizedWhenContainerNotLaunchedContainerSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|17
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|)
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
name|wc
operator|.
name|localizeResources
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|SCHEDULED
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|killContainer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|containerSuccessful
argument_list|()
expr_stmt|;
name|wc
operator|.
name|drainDispatcherEvents
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|EXITED_WITH_SUCCESS
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCleanupCall
argument_list|(
name|wc
argument_list|)
expr_stmt|;
name|wc
operator|.
name|c
operator|.
name|handle
argument_list|(
operator|new
name|ContainerEvent
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_RESOURCES_CLEANEDUP
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getRunningContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testKillOnLocalizedWhenContainerNotLaunchedContainerFailure ()
specifier|public
name|void
name|testKillOnLocalizedWhenContainerNotLaunchedContainerFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|17
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|)
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
name|wc
operator|.
name|localizeResources
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|SCHEDULED
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|killContainer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|containerFailed
argument_list|(
name|ExitCode
operator|.
name|FORCE_KILLED
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|drainDispatcherEvents
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCleanupCall
argument_list|(
name|wc
argument_list|)
expr_stmt|;
name|wc
operator|.
name|c
operator|.
name|handle
argument_list|(
operator|new
name|ContainerEvent
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_RESOURCES_CLEANEDUP
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getRunningContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testDockerKillOnLocalizedContainerNotLaunchedContainerFailure ()
specifier|public
name|void
name|testDockerKillOnLocalizedContainerNotLaunchedContainerFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|17
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|)
expr_stmt|;
name|wc
operator|.
name|setupDockerContainerEnv
argument_list|()
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
name|wc
operator|.
name|localizeResources
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|SCHEDULED
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|killContainer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|containerFailed
argument_list|(
name|ExitCode
operator|.
name|FORCE_KILLED
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|drainDispatcherEvents
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|verifyDockerContainerCleanupCall
argument_list|(
name|wc
argument_list|)
expr_stmt|;
name|wc
operator|.
name|c
operator|.
name|handle
argument_list|(
operator|new
name|ContainerEvent
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_RESOURCES_CLEANEDUP
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getRunningContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testKillOnLocalizedWhenContainerLaunched ()
specifier|public
name|void
name|testKillOnLocalizedWhenContainerLaunched
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|17
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|)
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
name|wc
operator|.
name|localizeResources
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|SCHEDULED
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerLaunch
name|launcher
init|=
name|wc
operator|.
name|launcher
operator|.
name|running
operator|.
name|get
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
name|launcher
operator|.
name|call
argument_list|()
expr_stmt|;
name|wc
operator|.
name|drainDispatcherEvents
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|killContainer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCleanupCall
argument_list|(
name|wc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testDockerKillOnLocalizedWhenContainerLaunched ()
specifier|public
name|void
name|testDockerKillOnLocalizedWhenContainerLaunched
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|17
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|)
expr_stmt|;
name|wc
operator|.
name|setupDockerContainerEnv
argument_list|()
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
name|wc
operator|.
name|localizeResources
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|SCHEDULED
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerLaunch
name|launcher
init|=
name|wc
operator|.
name|launcher
operator|.
name|running
operator|.
name|get
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
name|launcher
operator|.
name|call
argument_list|()
expr_stmt|;
name|wc
operator|.
name|drainDispatcherEvents
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|killContainer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|EXITED_WITH_FAILURE
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|verifyDockerContainerCleanupCall
argument_list|(
name|wc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testResourceLocalizedOnLocalizationFailed ()
specifier|public
name|void
name|testResourceLocalizedOnLocalizationFailed
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|16
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|)
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
name|int
name|failCount
init|=
name|wc
operator|.
name|getLocalResourceCount
argument_list|()
operator|/
literal|2
decl_stmt|;
if|if
condition|(
name|failCount
operator|==
literal|0
condition|)
block|{
name|failCount
operator|=
literal|1
expr_stmt|;
block|}
name|wc
operator|.
name|failLocalizeResources
argument_list|(
name|failCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|localizeResourcesFromInvalidState
argument_list|(
name|failCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCleanupCall
argument_list|(
name|wc
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|wc
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|contains
argument_list|(
name|FAKE_LOCALIZATION_ERROR
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testResourceFailedOnLocalizationFailed ()
specifier|public
name|void
name|testResourceFailedOnLocalizationFailed
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|16
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|)
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|lRsrcKeys
init|=
name|wc
operator|.
name|localResources
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|key1
init|=
name|lRsrcKeys
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key2
init|=
name|lRsrcKeys
operator|.
name|next
argument_list|()
decl_stmt|;
name|wc
operator|.
name|failLocalizeSpecificResource
argument_list|(
name|key1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|failLocalizeSpecificResource
argument_list|(
name|key2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|LOCALIZATION_FAILED
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCleanupCall
argument_list|(
name|wc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testResourceFailedOnKilling ()
specifier|public
name|void
name|testResourceFailedOnKilling
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|16
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|)
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|lRsrcKeys
init|=
name|wc
operator|.
name|localResources
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|key1
init|=
name|lRsrcKeys
operator|.
name|next
argument_list|()
decl_stmt|;
name|wc
operator|.
name|killContainer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|failLocalizeSpecificResource
argument_list|(
name|key1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCleanupCall
argument_list|(
name|wc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Verify serviceData correctly sent.    */
annotation|@
name|Test
DECL|method|testServiceData ()
specifier|public
name|void
name|testServiceData
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|9
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|NEW
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|e
range|:
name|wc
operator|.
name|serviceData
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ArgumentMatcher
argument_list|<
name|AuxServicesEvent
argument_list|>
name|matchesServiceReq
init|=
operator|new
name|ArgumentMatcher
argument_list|<
name|AuxServicesEvent
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|AuxServicesEvent
name|evt
init|=
operator|(
name|AuxServicesEvent
operator|)
name|o
decl_stmt|;
return|return
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|evt
operator|.
name|getServiceID
argument_list|()
argument_list|)
operator|&&
literal|0
operator|==
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|compareTo
argument_list|(
name|evt
operator|.
name|getServiceData
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|verify
argument_list|(
name|wc
operator|.
name|auxBus
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
name|matchesServiceReq
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|WrappedContainer
name|wcf
init|=
name|wc
decl_stmt|;
comment|// verify launch on empty resource request
name|ArgumentMatcher
argument_list|<
name|ContainersLauncherEvent
argument_list|>
name|matchesLaunchReq
init|=
operator|new
name|ArgumentMatcher
argument_list|<
name|ContainersLauncherEvent
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|ContainersLauncherEvent
name|evt
init|=
operator|(
name|ContainersLauncherEvent
operator|)
name|o
decl_stmt|;
return|return
name|evt
operator|.
name|getType
argument_list|()
operator|==
name|ContainersLauncherEventType
operator|.
name|LAUNCH_CONTAINER
operator|&&
name|wcf
operator|.
name|cId
operator|.
name|equals
argument_list|(
name|evt
operator|.
name|getContainer
argument_list|()
operator|.
name|getContainerId
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|verify
argument_list|(
name|wc
operator|.
name|launcherBus
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
name|matchesLaunchReq
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testLaunchAfterKillRequest ()
specifier|public
name|void
name|testLaunchAfterKillRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|14
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|)
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
name|wc
operator|.
name|localizeResources
argument_list|()
expr_stmt|;
name|wc
operator|.
name|killContainer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|launchContainer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|containerKilledOnRequest
argument_list|()
expr_stmt|;
name|verifyCleanupCall
argument_list|(
name|wc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testDockerContainerLaunchAfterKillRequest ()
specifier|public
name|void
name|testDockerContainerLaunchAfterKillRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|14
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|)
expr_stmt|;
name|wc
operator|.
name|setupDockerContainerEnv
argument_list|()
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
name|wc
operator|.
name|localizeResources
argument_list|()
expr_stmt|;
name|wc
operator|.
name|killContainer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|launchContainer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|KILLING
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|wc
operator|.
name|c
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|wc
operator|.
name|containerKilledOnRequest
argument_list|()
expr_stmt|;
name|verifyDockerContainerCleanupCall
argument_list|(
name|wc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testContainerRetry ()
specifier|public
name|void
name|testContainerRetry
parameter_list|()
throws|throws
name|Exception
block|{
name|ContainerRetryContext
name|containerRetryContext1
init|=
name|ContainerRetryContext
operator|.
name|newInstance
argument_list|(
name|ContainerRetryPolicy
operator|.
name|NEVER_RETRY
argument_list|,
literal|null
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|testContainerRetry
argument_list|(
name|containerRetryContext1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ContainerRetryContext
name|containerRetryContext2
init|=
name|ContainerRetryContext
operator|.
name|newInstance
argument_list|(
name|ContainerRetryPolicy
operator|.
name|RETRY_ON_ALL_ERRORS
argument_list|,
literal|null
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|testContainerRetry
argument_list|(
name|containerRetryContext2
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|ContainerRetryContext
name|containerRetryContext3
init|=
name|ContainerRetryContext
operator|.
name|newInstance
argument_list|(
name|ContainerRetryPolicy
operator|.
name|RETRY_ON_ALL_ERRORS
argument_list|,
literal|null
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// If exit code is 0, it will not retry
name|testContainerRetry
argument_list|(
name|containerRetryContext3
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ContainerRetryContext
name|containerRetryContext4
init|=
name|ContainerRetryContext
operator|.
name|newInstance
argument_list|(
name|ContainerRetryPolicy
operator|.
name|RETRY_ON_SPECIFIC_ERROR_CODES
argument_list|,
literal|null
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|testContainerRetry
argument_list|(
name|containerRetryContext4
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|Integer
argument_list|>
name|errorCodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|errorCodes
operator|.
name|add
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|errorCodes
operator|.
name|add
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|ContainerRetryContext
name|containerRetryContext5
init|=
name|ContainerRetryContext
operator|.
name|newInstance
argument_list|(
name|ContainerRetryPolicy
operator|.
name|RETRY_ON_SPECIFIC_ERROR_CODES
argument_list|,
name|errorCodes
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|testContainerRetry
argument_list|(
name|containerRetryContext5
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|Integer
argument_list|>
name|errorCodes2
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|errorCodes
operator|.
name|add
argument_list|(
literal|143
argument_list|)
expr_stmt|;
name|ContainerRetryContext
name|containerRetryContext6
init|=
name|ContainerRetryContext
operator|.
name|newInstance
argument_list|(
name|ContainerRetryPolicy
operator|.
name|RETRY_ON_SPECIFIC_ERROR_CODES
argument_list|,
name|errorCodes2
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// If exit code is 143(SIGTERM), it will not retry even it is in errorCodes.
name|testContainerRetry
argument_list|(
name|containerRetryContext6
argument_list|,
literal|143
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testContainerRetry (ContainerRetryContext containerRetryContext, int exitCode, int expectedRetries)
specifier|private
name|void
name|testContainerRetry
parameter_list|(
name|ContainerRetryContext
name|containerRetryContext
parameter_list|,
name|int
name|exitCode
parameter_list|,
name|int
name|expectedRetries
parameter_list|)
throws|throws
name|Exception
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|int
name|retryTimes
init|=
literal|0
decl_stmt|;
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|24
argument_list|,
literal|314159265358979L
argument_list|,
literal|4344
argument_list|,
literal|"yak"
argument_list|,
name|containerRetryContext
argument_list|)
expr_stmt|;
name|wc
operator|.
name|initContainer
argument_list|()
expr_stmt|;
name|wc
operator|.
name|localizeResources
argument_list|()
expr_stmt|;
name|wc
operator|.
name|launchContainer
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|wc
operator|.
name|containerFailed
argument_list|(
name|exitCode
argument_list|)
expr_stmt|;
if|if
condition|(
name|wc
operator|.
name|c
operator|.
name|getContainerState
argument_list|()
operator|==
name|ContainerState
operator|.
name|RUNNING
condition|)
block|{
name|retryTimes
operator|++
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedRetries
argument_list|,
name|retryTimes
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testContainerRestartInterval ()
specifier|public
name|void
name|testContainerRestartInterval
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CONTAINER_RETRY_MINIMUM_INTERVAL_MS
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|ContainerRetryContext
name|containerRetryContext1
init|=
name|ContainerRetryContext
operator|.
name|newInstance
argument_list|(
name|ContainerRetryPolicy
operator|.
name|NEVER_RETRY
argument_list|,
literal|null
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|testContainerRestartInterval
argument_list|(
name|containerRetryContext1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ContainerRetryContext
name|containerRetryContext2
init|=
name|ContainerRetryContext
operator|.
name|newInstance
argument_list|(
name|ContainerRetryPolicy
operator|.
name|RETRY_ON_ALL_ERRORS
argument_list|,
literal|null
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|testContainerRestartInterval
argument_list|(
name|containerRetryContext2
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|ContainerRetryContext
name|containerRetryContext3
init|=
name|ContainerRetryContext
operator|.
name|newInstance
argument_list|(
name|ContainerRetryPolicy
operator|.
name|RETRY_ON_ALL_ERRORS
argument_list|,
literal|null
argument_list|,
literal|3
argument_list|,
literal|4000
argument_list|)
decl_stmt|;
name|testContainerRestartInterval
argument_list|(
name|containerRetryContext3
argument_list|,
literal|4000
argument_list|)
expr_stmt|;
block|}
DECL|method|testContainerRestartInterval ( ContainerRetryContext containerRetryContext, int expectedRestartInterval)
specifier|private
name|void
name|testContainerRestartInterval
parameter_list|(
name|ContainerRetryContext
name|containerRetryContext
parameter_list|,
name|int
name|expectedRestartInterval
parameter_list|)
throws|throws
name|IOException
block|{
name|WrappedContainer
name|wc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wc
operator|=
operator|new
name|WrappedContainer
argument_list|(
literal|25
argument_list|,
literal|314159265358980L
argument_list|,
literal|4345
argument_list|,
literal|"yak"
argument_list|,
name|containerRetryContext
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
operator|(
name|ContainerImpl
operator|)
name|wc
operator|.
name|c
operator|)
operator|.
name|getContainerRetryContext
argument_list|()
operator|.
name|getRetryInterval
argument_list|()
argument_list|,
name|expectedRestartInterval
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wc
operator|!=
literal|null
condition|)
block|{
name|wc
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifyCleanupCall (WrappedContainer wc)
specifier|private
name|void
name|verifyCleanupCall
parameter_list|(
name|WrappedContainer
name|wc
parameter_list|)
throws|throws
name|Exception
block|{
name|ResourcesReleasedMatcher
name|matchesReq
init|=
operator|new
name|ResourcesReleasedMatcher
argument_list|(
name|wc
operator|.
name|localResources
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|wc
operator|.
name|localizerBus
argument_list|,
name|atLeastOnce
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
name|matchesReq
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyOutofBandHeartBeat (WrappedContainer wc)
specifier|private
name|void
name|verifyOutofBandHeartBeat
parameter_list|(
name|WrappedContainer
name|wc
parameter_list|)
block|{
name|verify
argument_list|(
name|wc
operator|.
name|context
operator|.
name|getNodeStatusUpdater
argument_list|()
argument_list|)
operator|.
name|sendOutofBandHeartBeat
argument_list|()
expr_stmt|;
block|}
DECL|method|verifyDockerContainerCleanupCall (WrappedContainer wc)
specifier|private
name|void
name|verifyDockerContainerCleanupCall
parameter_list|(
name|WrappedContainer
name|wc
parameter_list|)
throws|throws
name|Exception
block|{
name|DeletionService
name|delService
init|=
name|wc
operator|.
name|context
operator|.
name|getDeletionService
argument_list|()
decl_stmt|;
name|verify
argument_list|(
name|delService
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|delete
argument_list|(
name|argThat
argument_list|(
operator|new
name|DockerContainerDeletionMatcher
argument_list|(
name|delService
argument_list|,
name|wc
operator|.
name|c
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|ResourcesReleasedMatcher
specifier|private
specifier|static
class|class
name|ResourcesReleasedMatcher
extends|extends
name|ArgumentMatcher
argument_list|<
name|LocalizationEvent
argument_list|>
block|{
DECL|field|resources
specifier|final
name|HashSet
argument_list|<
name|LocalResourceRequest
argument_list|>
name|resources
init|=
operator|new
name|HashSet
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|ResourcesReleasedMatcher (Map<String, LocalResource> allResources, EnumSet<LocalResourceVisibility> vis)
name|ResourcesReleasedMatcher
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|allResources
parameter_list|,
name|EnumSet
argument_list|<
name|LocalResourceVisibility
argument_list|>
name|vis
parameter_list|)
throws|throws
name|URISyntaxException
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|e
range|:
name|allResources
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|vis
operator|.
name|contains
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getVisibility
argument_list|()
argument_list|)
condition|)
block|{
name|resources
operator|.
name|add
argument_list|(
operator|new
name|LocalResourceRequest
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|matches (Object o)
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|ContainerLocalizationCleanupEvent
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ContainerLocalizationCleanupEvent
name|evt
init|=
operator|(
name|ContainerLocalizationCleanupEvent
operator|)
name|o
decl_stmt|;
specifier|final
name|HashSet
argument_list|<
name|LocalResourceRequest
argument_list|>
name|expected
init|=
operator|new
name|HashSet
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|(
name|resources
argument_list|)
decl_stmt|;
for|for
control|(
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
name|rc
range|:
name|evt
operator|.
name|getResources
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|LocalResourceRequest
name|rsrc
range|:
name|rc
control|)
block|{
if|if
condition|(
operator|!
name|expected
operator|.
name|remove
argument_list|(
name|rsrc
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
name|expected
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
comment|// Accept iff the resource payload matches.
DECL|class|ResourcesRequestedMatcher
specifier|private
specifier|static
class|class
name|ResourcesRequestedMatcher
extends|extends
name|ArgumentMatcher
argument_list|<
name|LocalizationEvent
argument_list|>
block|{
DECL|field|resources
specifier|final
name|HashSet
argument_list|<
name|LocalResourceRequest
argument_list|>
name|resources
init|=
operator|new
name|HashSet
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|ResourcesRequestedMatcher (Map<String, LocalResource> allResources, EnumSet<LocalResourceVisibility> vis)
name|ResourcesRequestedMatcher
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|allResources
parameter_list|,
name|EnumSet
argument_list|<
name|LocalResourceVisibility
argument_list|>
name|vis
parameter_list|)
throws|throws
name|URISyntaxException
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|e
range|:
name|allResources
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|vis
operator|.
name|contains
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getVisibility
argument_list|()
argument_list|)
condition|)
block|{
name|resources
operator|.
name|add
argument_list|(
operator|new
name|LocalResourceRequest
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|matches (Object o)
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|ContainerLocalizationRequestEvent
name|evt
init|=
operator|(
name|ContainerLocalizationRequestEvent
operator|)
name|o
decl_stmt|;
specifier|final
name|HashSet
argument_list|<
name|LocalResourceRequest
argument_list|>
name|expected
init|=
operator|new
name|HashSet
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|(
name|resources
argument_list|)
decl_stmt|;
for|for
control|(
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
name|rc
range|:
name|evt
operator|.
name|getRequestedResources
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|LocalResourceRequest
name|rsrc
range|:
name|rc
control|)
block|{
if|if
condition|(
operator|!
name|expected
operator|.
name|remove
argument_list|(
name|rsrc
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
name|expected
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
DECL|method|getMockRsrc (Random r, LocalResourceVisibility vis)
specifier|private
specifier|static
name|Entry
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|getMockRsrc
parameter_list|(
name|Random
name|r
parameter_list|,
name|LocalResourceVisibility
name|vis
parameter_list|)
block|{
name|String
name|name
init|=
name|Long
operator|.
name|toHexString
argument_list|(
name|r
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
name|BuilderUtils
operator|.
name|newURL
argument_list|(
literal|"file"
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|"/local"
operator|+
name|vis
operator|+
literal|"/"
operator|+
name|name
argument_list|)
decl_stmt|;
name|LocalResource
name|rsrc
init|=
name|BuilderUtils
operator|.
name|newLocalResource
argument_list|(
name|url
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|vis
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
literal|1024
argument_list|)
operator|+
literal|1024L
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
literal|1024
argument_list|)
operator|+
literal|2048L
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
operator|new
name|SimpleEntry
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|(
name|name
argument_list|,
name|rsrc
argument_list|)
return|;
block|}
DECL|method|createLocalResources (Random r)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|createLocalResources
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|+
literal|5
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|rsrc
init|=
name|getMockRsrc
argument_list|(
name|r
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|)
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|rsrc
operator|.
name|getKey
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|+
literal|5
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|rsrc
init|=
name|getMockRsrc
argument_list|(
name|r
argument_list|,
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|)
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|rsrc
operator|.
name|getKey
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
operator|+
literal|2
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|rsrc
init|=
name|getMockRsrc
argument_list|(
name|r
argument_list|,
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|rsrc
operator|.
name|getKey
argument_list|()
argument_list|,
name|rsrc
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|localResources
return|;
block|}
DECL|method|createServiceData (Random r)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|createServiceData
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|serviceData
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|+
literal|5
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|String
name|service
init|=
name|Long
operator|.
name|toHexString
argument_list|(
name|r
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|r
operator|.
name|nextInt
argument_list|(
literal|1024
argument_list|)
operator|+
literal|1024
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|serviceData
operator|.
name|put
argument_list|(
name|service
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|serviceData
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|WrappedContainer
specifier|private
class|class
name|WrappedContainer
block|{
DECL|field|dispatcher
specifier|final
name|DrainDispatcher
name|dispatcher
decl_stmt|;
DECL|field|localizerBus
specifier|final
name|EventHandler
argument_list|<
name|LocalizationEvent
argument_list|>
name|localizerBus
decl_stmt|;
DECL|field|launcherBus
specifier|final
name|EventHandler
argument_list|<
name|ContainersLauncherEvent
argument_list|>
name|launcherBus
decl_stmt|;
DECL|field|monitorBus
specifier|final
name|EventHandler
argument_list|<
name|ContainersMonitorEvent
argument_list|>
name|monitorBus
decl_stmt|;
DECL|field|auxBus
specifier|final
name|EventHandler
argument_list|<
name|AuxServicesEvent
argument_list|>
name|auxBus
decl_stmt|;
DECL|field|appBus
specifier|final
name|EventHandler
argument_list|<
name|ApplicationEvent
argument_list|>
name|appBus
decl_stmt|;
DECL|field|LogBus
specifier|final
name|EventHandler
argument_list|<
name|LogHandlerEvent
argument_list|>
name|LogBus
decl_stmt|;
DECL|field|schedBus
specifier|final
name|EventHandler
argument_list|<
name|ContainerSchedulerEvent
argument_list|>
name|schedBus
decl_stmt|;
DECL|field|launcher
specifier|final
name|ContainersLauncher
name|launcher
decl_stmt|;
DECL|field|ctxt
specifier|final
name|ContainerLaunchContext
name|ctxt
decl_stmt|;
DECL|field|cId
specifier|final
name|ContainerId
name|cId
decl_stmt|;
DECL|field|c
specifier|final
name|Container
name|c
decl_stmt|;
DECL|field|localResources
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
decl_stmt|;
DECL|field|serviceData
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|serviceData
decl_stmt|;
DECL|field|context
specifier|final
name|Context
name|context
init|=
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|delService
specifier|private
specifier|final
name|DeletionService
name|delService
decl_stmt|;
DECL|field|initStateToEvent
specifier|private
specifier|final
name|Map
argument_list|<
name|ContainerState
argument_list|,
name|ContainerEventType
argument_list|>
name|initStateToEvent
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|eventToFinalState
specifier|private
specifier|final
name|Map
argument_list|<
name|ContainerEventType
argument_list|,
name|ContainerState
argument_list|>
name|eventToFinalState
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|WrappedContainer (int appId, long timestamp, int id, String user)
name|WrappedContainer
parameter_list|(
name|int
name|appId
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|appId
argument_list|,
name|timestamp
argument_list|,
name|id
argument_list|,
name|user
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|WrappedContainer (int appId, long timestamp, int id, String user, ContainerRetryContext containerRetryContext)
name|WrappedContainer
parameter_list|(
name|int
name|appId
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|user
parameter_list|,
name|ContainerRetryContext
name|containerRetryContext
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|appId
argument_list|,
name|timestamp
argument_list|,
name|id
argument_list|,
name|user
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|containerRetryContext
argument_list|)
expr_stmt|;
block|}
DECL|method|WrappedContainer (int appId, long timestamp, int id, String user, boolean withLocalRes, boolean withServiceData)
name|WrappedContainer
parameter_list|(
name|int
name|appId
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|user
parameter_list|,
name|boolean
name|withLocalRes
parameter_list|,
name|boolean
name|withServiceData
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|appId
argument_list|,
name|timestamp
argument_list|,
name|id
argument_list|,
name|user
argument_list|,
name|withLocalRes
argument_list|,
name|withServiceData
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|WrappedContainer (int appId, long timestamp, int id, String user, boolean withLocalRes, boolean withServiceData, ContainerRetryContext containerRetryContext)
name|WrappedContainer
parameter_list|(
name|int
name|appId
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|user
parameter_list|,
name|boolean
name|withLocalRes
parameter_list|,
name|boolean
name|withServiceData
parameter_list|,
name|ContainerRetryContext
name|containerRetryContext
parameter_list|)
throws|throws
name|IOException
block|{
name|dispatcher
operator|=
operator|new
name|DrainDispatcher
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|localizerBus
operator|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|launcherBus
operator|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|monitorBus
operator|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|auxBus
operator|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|appBus
operator|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|LogBus
operator|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|delService
operator|=
name|mock
argument_list|(
name|DeletionService
operator|.
name|class
argument_list|)
expr_stmt|;
name|schedBus
operator|=
operator|new
name|ContainerScheduler
argument_list|(
name|context
argument_list|,
name|dispatcher
argument_list|,
name|metrics
argument_list|,
literal|0
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|scheduleContainer
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
name|container
operator|.
name|sendLaunchEvent
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|LocalizationEventType
operator|.
name|class
argument_list|,
name|localizerBus
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainersLauncherEventType
operator|.
name|class
argument_list|,
name|launcherBus
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainersMonitorEventType
operator|.
name|class
argument_list|,
name|monitorBus
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainerSchedulerEventType
operator|.
name|class
argument_list|,
name|schedBus
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|AuxServicesEventType
operator|.
name|class
argument_list|,
name|auxBus
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ApplicationEventType
operator|.
name|class
argument_list|,
name|appBus
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|LogHandlerEventType
operator|.
name|class
argument_list|,
name|LogBus
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getApplications
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|Application
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|NMNullStateStoreService
name|stateStore
init|=
operator|new
name|NMNullStateStoreService
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getNMStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|stateStore
argument_list|)
expr_stmt|;
name|NodeStatusUpdater
name|nodeStatusUpdater
init|=
name|mock
argument_list|(
name|NodeStatusUpdater
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getNodeStatusUpdater
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nodeStatusUpdater
argument_list|)
expr_stmt|;
name|ContainerExecutor
name|executor
init|=
name|mock
argument_list|(
name|ContainerExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|executor
argument_list|)
operator|.
name|pauseContainer
argument_list|(
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|executor
argument_list|)
operator|.
name|resumeContainer
argument_list|(
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|launcher
operator|=
operator|new
name|ContainersLauncher
argument_list|(
name|context
argument_list|,
name|dispatcher
argument_list|,
name|executor
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// create a mock ExecutorService, which will not really launch
comment|// ContainerLaunch at all.
name|launcher
operator|.
name|containerLauncher
operator|=
name|mock
argument_list|(
name|ExecutorService
operator|.
name|class
argument_list|)
expr_stmt|;
name|Future
name|future
init|=
name|mock
argument_list|(
name|Future
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|launcher
operator|.
name|containerLauncher
operator|.
name|submit
argument_list|(
name|any
argument_list|(
name|Callable
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|future
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|launcher
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|launcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainersLauncherEventType
operator|.
name|class
argument_list|,
name|launcher
argument_list|)
expr_stmt|;
name|ctxt
operator|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
name|mockContainer
init|=
name|mock
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|cId
operator|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|,
name|timestamp
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContainer
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContainer
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|String
name|host
init|=
literal|"127.0.0.1"
decl_stmt|;
name|int
name|port
init|=
literal|1234
decl_stmt|;
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ContainerTokenIdentifier
name|identifier
init|=
operator|new
name|ContainerTokenIdentifier
argument_list|(
name|cId
argument_list|,
literal|"127.0.0.1"
argument_list|,
name|user
argument_list|,
name|resource
argument_list|,
name|currentTime
operator|+
literal|10000L
argument_list|,
literal|123
argument_list|,
name|currentTime
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Token
name|token
init|=
name|BuilderUtils
operator|.
name|newContainerToken
argument_list|(
name|BuilderUtils
operator|.
name|newNodeId
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|,
literal|"password"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|identifier
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContainer
operator|.
name|getContainerToken
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|token
argument_list|)
expr_stmt|;
if|if
condition|(
name|withLocalRes
condition|)
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"WrappedContainerLocalResource seed: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|localResources
operator|=
name|createLocalResources
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|localResources
operator|=
name|Collections
operator|.
expr|<
name|String
operator|,
name|LocalResource
operator|>
name|emptyMap
argument_list|()
expr_stmt|;
block|}
name|when
argument_list|(
name|ctxt
operator|.
name|getLocalResources
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|localResources
argument_list|)
expr_stmt|;
if|if
condition|(
name|withServiceData
condition|)
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ServiceData seed: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|serviceData
operator|=
name|createServiceData
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serviceData
operator|=
name|Collections
operator|.
expr|<
name|String
operator|,
name|ByteBuffer
operator|>
name|emptyMap
argument_list|()
expr_stmt|;
block|}
name|when
argument_list|(
name|ctxt
operator|.
name|getServiceData
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|serviceData
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ctxt
operator|.
name|getContainerRetryContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerRetryContext
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getDeletionService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|delService
argument_list|)
expr_stmt|;
name|ContainerStateTransitionListener
name|listener
init|=
operator|new
name|ContainerStateTransitionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|Context
name|cntxt
parameter_list|)
block|{}
annotation|@
name|Override
specifier|public
name|void
name|preTransition
parameter_list|(
name|ContainerImpl
name|op
parameter_list|,
name|ContainerState
name|beforeState
parameter_list|,
name|ContainerEvent
name|eventToBeProcessed
parameter_list|)
block|{
name|initStateToEvent
operator|.
name|put
argument_list|(
name|beforeState
argument_list|,
name|eventToBeProcessed
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postTransition
parameter_list|(
name|ContainerImpl
name|op
parameter_list|,
name|ContainerState
name|beforeState
parameter_list|,
name|ContainerState
name|afterState
parameter_list|,
name|ContainerEvent
name|processedEvent
parameter_list|)
block|{
name|eventToFinalState
operator|.
name|put
argument_list|(
name|processedEvent
operator|.
name|getType
argument_list|()
argument_list|,
name|afterState
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|NodeManager
operator|.
name|DefaultContainerStateListener
name|multi
init|=
operator|new
name|NodeManager
operator|.
name|DefaultContainerStateListener
argument_list|()
decl_stmt|;
name|multi
operator|.
name|addListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getContainerStateTransitionListener
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|multi
argument_list|)
expr_stmt|;
name|c
operator|=
operator|new
name|ContainerImpl
argument_list|(
name|conf
argument_list|,
name|dispatcher
argument_list|,
name|ctxt
argument_list|,
literal|null
argument_list|,
name|metrics
argument_list|,
name|identifier
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainerEventType
operator|.
name|class
argument_list|,
operator|new
name|EventHandler
argument_list|<
name|ContainerEvent
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|ContainerEvent
name|event
parameter_list|)
block|{
name|c
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|drainDispatcherEvents ()
specifier|private
name|void
name|drainDispatcherEvents
parameter_list|()
block|{
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
DECL|method|finished ()
specifier|public
name|void
name|finished
parameter_list|()
block|{
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|initContainer ()
specifier|public
name|void
name|initContainer
parameter_list|()
block|{
name|c
operator|.
name|handle
argument_list|(
operator|new
name|ContainerEvent
argument_list|(
name|cId
argument_list|,
name|ContainerEventType
operator|.
name|INIT_CONTAINER
argument_list|)
argument_list|)
expr_stmt|;
name|drainDispatcherEvents
argument_list|()
expr_stmt|;
block|}
DECL|method|resourceFailedContainer ()
specifier|public
name|void
name|resourceFailedContainer
parameter_list|()
block|{
name|c
operator|.
name|handle
argument_list|(
operator|new
name|ContainerEvent
argument_list|(
name|cId
argument_list|,
name|ContainerEventType
operator|.
name|RESOURCE_FAILED
argument_list|)
argument_list|)
expr_stmt|;
name|drainDispatcherEvents
argument_list|()
expr_stmt|;
block|}
DECL|method|handleContainerResourceFailedEvent ()
specifier|public
name|void
name|handleContainerResourceFailedEvent
parameter_list|()
block|{
name|c
operator|.
name|handle
argument_list|(
operator|new
name|ContainerResourceFailedEvent
argument_list|(
name|cId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|drainDispatcherEvents
argument_list|()
expr_stmt|;
block|}
comment|// Localize resources
comment|// Skip some resources so as to consider them failed
DECL|method|doLocalizeResources ( boolean checkLocalizingState, int skipRsrcCount)
specifier|public
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|doLocalizeResources
parameter_list|(
name|boolean
name|checkLocalizingState
parameter_list|,
name|int
name|skipRsrcCount
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|Path
name|cache
init|=
operator|new
name|Path
argument_list|(
literal|"file:///cache"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|localPaths
init|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|rsrc
range|:
name|localResources
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|counter
operator|++
operator|<
name|skipRsrcCount
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|checkLocalizingState
condition|)
block|{
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|LOCALIZING
argument_list|,
name|c
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LocalResourceRequest
name|req
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|rsrc
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|cache
argument_list|,
name|rsrc
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|localPaths
operator|.
name|put
argument_list|(
name|p
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|rsrc
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// rsrc copied to p
name|c
operator|.
name|handle
argument_list|(
operator|new
name|ContainerResourceLocalizedEvent
argument_list|(
name|c
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|req
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|drainDispatcherEvents
argument_list|()
expr_stmt|;
return|return
name|localPaths
return|;
block|}
DECL|method|localizeResources ()
specifier|public
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|localizeResources
parameter_list|()
throws|throws
name|URISyntaxException
block|{
return|return
name|doLocalizeResources
argument_list|(
literal|true
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|localizeResourcesFromInvalidState (int skipRsrcCount)
specifier|public
name|void
name|localizeResourcesFromInvalidState
parameter_list|(
name|int
name|skipRsrcCount
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|doLocalizeResources
argument_list|(
literal|false
argument_list|,
name|skipRsrcCount
argument_list|)
expr_stmt|;
block|}
DECL|method|failLocalizeSpecificResource (String rsrcKey)
specifier|public
name|void
name|failLocalizeSpecificResource
parameter_list|(
name|String
name|rsrcKey
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|LocalResource
name|rsrc
init|=
name|localResources
operator|.
name|get
argument_list|(
name|rsrcKey
argument_list|)
decl_stmt|;
name|LocalResourceRequest
name|req
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|rsrc
argument_list|)
decl_stmt|;
name|Exception
name|e
init|=
operator|new
name|Exception
argument_list|(
name|FAKE_LOCALIZATION_ERROR
argument_list|)
decl_stmt|;
name|c
operator|.
name|handle
argument_list|(
operator|new
name|ContainerResourceFailedEvent
argument_list|(
name|c
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|req
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|drainDispatcherEvents
argument_list|()
expr_stmt|;
block|}
comment|// fail to localize some resources
DECL|method|failLocalizeResources (int failRsrcCount)
specifier|public
name|void
name|failLocalizeResources
parameter_list|(
name|int
name|failRsrcCount
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|rsrc
range|:
name|localResources
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|counter
operator|>=
name|failRsrcCount
condition|)
block|{
break|break;
block|}
operator|++
name|counter
expr_stmt|;
name|LocalResourceRequest
name|req
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|rsrc
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|Exception
name|e
init|=
operator|new
name|Exception
argument_list|(
name|FAKE_LOCALIZATION_ERROR
argument_list|)
decl_stmt|;
name|c
operator|.
name|handle
argument_list|(
operator|new
name|ContainerResourceFailedEvent
argument_list|(
name|c
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|req
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|drainDispatcherEvents
argument_list|()
expr_stmt|;
block|}
DECL|method|launchContainer ()
specifier|public
name|void
name|launchContainer
parameter_list|()
block|{
name|c
operator|.
name|handle
argument_list|(
operator|new
name|ContainerEvent
argument_list|(
name|cId
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_LAUNCHED
argument_list|)
argument_list|)
expr_stmt|;
name|drainDispatcherEvents
argument_list|()
expr_stmt|;
block|}
DECL|method|containerSuccessful ()
specifier|public
name|void
name|containerSuccessful
parameter_list|()
block|{
name|c
operator|.
name|handle
argument_list|(
operator|new
name|ContainerEvent
argument_list|(
name|cId
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
name|drainDispatcherEvents
argument_list|()
expr_stmt|;
block|}
DECL|method|containerResourcesCleanup ()
specifier|public
name|void
name|containerResourcesCleanup
parameter_list|()
block|{
name|c
operator|.
name|handle
argument_list|(
operator|new
name|ContainerEvent
argument_list|(
name|cId
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_RESOURCES_CLEANEDUP
argument_list|)
argument_list|)
expr_stmt|;
name|drainDispatcherEvents
argument_list|()
expr_stmt|;
block|}
DECL|method|dockerContainerResourcesCleanup ()
specifier|public
name|void
name|dockerContainerResourcesCleanup
parameter_list|()
block|{
name|c
operator|.
name|handle
argument_list|(
operator|new
name|ContainerEvent
argument_list|(
name|cId
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_RESOURCES_CLEANEDUP
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|delService
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|delete
argument_list|(
name|argThat
argument_list|(
operator|new
name|DockerContainerDeletionMatcher
argument_list|(
name|delService
argument_list|,
name|cId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|drainDispatcherEvents
argument_list|()
expr_stmt|;
block|}
DECL|method|setupDockerContainerEnv ()
specifier|public
name|void
name|setupDockerContainerEnv
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
name|ContainerRuntimeConstants
operator|.
name|ENV_CONTAINER_TYPE
argument_list|,
literal|"docker"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|this
operator|.
name|ctxt
operator|.
name|getEnvironment
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
DECL|method|containerFailed (int exitCode)
specifier|public
name|void
name|containerFailed
parameter_list|(
name|int
name|exitCode
parameter_list|)
block|{
name|String
name|diagnosticMsg
init|=
literal|"Container completed with exit code "
operator|+
name|exitCode
decl_stmt|;
name|c
operator|.
name|handle
argument_list|(
operator|new
name|ContainerExitEvent
argument_list|(
name|cId
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_FAILURE
argument_list|,
name|exitCode
argument_list|,
name|diagnosticMsg
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerStatus
name|containerStatus
init|=
name|c
operator|.
name|cloneAndGetContainerStatus
argument_list|()
decl_stmt|;
assert|assert
name|containerStatus
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|contains
argument_list|(
name|diagnosticMsg
argument_list|)
assert|;
assert|assert
name|containerStatus
operator|.
name|getExitStatus
argument_list|()
operator|==
name|exitCode
assert|;
name|drainDispatcherEvents
argument_list|()
expr_stmt|;
comment|// If container needs retry, relaunch it
if|if
condition|(
name|c
operator|.
name|getContainerState
argument_list|()
operator|==
name|ContainerState
operator|.
name|RELAUNCHING
condition|)
block|{
name|launchContainer
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|killContainer ()
specifier|public
name|void
name|killContainer
parameter_list|()
block|{
name|c
operator|.
name|handle
argument_list|(
operator|new
name|ContainerKillEvent
argument_list|(
name|cId
argument_list|,
name|ContainerExitStatus
operator|.
name|KILLED_BY_RESOURCEMANAGER
argument_list|,
literal|"KillRequest"
argument_list|)
argument_list|)
expr_stmt|;
name|drainDispatcherEvents
argument_list|()
expr_stmt|;
block|}
DECL|method|pauseContainer ()
specifier|public
name|void
name|pauseContainer
parameter_list|()
block|{
name|c
operator|.
name|handle
argument_list|(
operator|new
name|ContainerPauseEvent
argument_list|(
name|cId
argument_list|,
literal|"PauseRequest"
argument_list|)
argument_list|)
expr_stmt|;
name|drainDispatcherEvents
argument_list|()
expr_stmt|;
block|}
DECL|method|resumeContainer ()
specifier|public
name|void
name|resumeContainer
parameter_list|()
block|{
name|c
operator|.
name|handle
argument_list|(
operator|new
name|ContainerResumeEvent
argument_list|(
name|cId
argument_list|,
literal|"ResumeRequest"
argument_list|)
argument_list|)
expr_stmt|;
name|drainDispatcherEvents
argument_list|()
expr_stmt|;
block|}
DECL|method|containerKilledOnRequest ()
specifier|public
name|void
name|containerKilledOnRequest
parameter_list|()
block|{
name|int
name|exitCode
init|=
name|ContainerExitStatus
operator|.
name|KILLED_BY_RESOURCEMANAGER
decl_stmt|;
name|String
name|diagnosticMsg
init|=
literal|"Container completed with exit code "
operator|+
name|exitCode
decl_stmt|;
name|c
operator|.
name|handle
argument_list|(
operator|new
name|ContainerExitEvent
argument_list|(
name|cId
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_KILLED_ON_REQUEST
argument_list|,
name|exitCode
argument_list|,
name|diagnosticMsg
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerStatus
name|containerStatus
init|=
name|c
operator|.
name|cloneAndGetContainerStatus
argument_list|()
decl_stmt|;
assert|assert
name|containerStatus
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|contains
argument_list|(
name|diagnosticMsg
argument_list|)
assert|;
assert|assert
name|containerStatus
operator|.
name|getExitStatus
argument_list|()
operator|==
name|exitCode
assert|;
name|drainDispatcherEvents
argument_list|()
expr_stmt|;
block|}
DECL|method|getLocalResourceCount ()
specifier|public
name|int
name|getLocalResourceCount
parameter_list|()
block|{
return|return
name|localResources
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getDiagnostics ()
specifier|public
name|String
name|getDiagnostics
parameter_list|()
block|{
return|return
name|c
operator|.
name|cloneAndGetContainerStatus
argument_list|()
operator|.
name|getDiagnostics
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

