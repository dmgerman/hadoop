begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * *  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements. See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership. The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License. You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  * /  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.privileged
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|TestPrivilegedOperationExecutor
specifier|public
class|class
name|TestPrivilegedOperationExecutor
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestPrivilegedOperationExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|localDataDir
specifier|private
name|String
name|localDataDir
decl_stmt|;
DECL|field|customExecutorPath
specifier|private
name|String
name|customExecutorPath
decl_stmt|;
DECL|field|nullConf
specifier|private
name|Configuration
name|nullConf
init|=
literal|null
decl_stmt|;
DECL|field|emptyConf
specifier|private
name|Configuration
name|emptyConf
decl_stmt|;
DECL|field|confWithExecutorPath
specifier|private
name|Configuration
name|confWithExecutorPath
decl_stmt|;
DECL|field|cGroupTasksNone
specifier|private
name|String
name|cGroupTasksNone
decl_stmt|;
DECL|field|cGroupTasksInvalid
specifier|private
name|String
name|cGroupTasksInvalid
decl_stmt|;
DECL|field|cGroupTasks1
specifier|private
name|String
name|cGroupTasks1
decl_stmt|;
DECL|field|cGroupTasks2
specifier|private
name|String
name|cGroupTasks2
decl_stmt|;
DECL|field|cGroupTasks3
specifier|private
name|String
name|cGroupTasks3
decl_stmt|;
DECL|field|opDisallowed
specifier|private
name|PrivilegedOperation
name|opDisallowed
decl_stmt|;
DECL|field|opTasksNone
specifier|private
name|PrivilegedOperation
name|opTasksNone
decl_stmt|;
DECL|field|opTasksInvalid
specifier|private
name|PrivilegedOperation
name|opTasksInvalid
decl_stmt|;
DECL|field|opTasks1
specifier|private
name|PrivilegedOperation
name|opTasks1
decl_stmt|;
DECL|field|opTasks2
specifier|private
name|PrivilegedOperation
name|opTasks2
decl_stmt|;
DECL|field|opTasks3
specifier|private
name|PrivilegedOperation
name|opTasks3
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|localDataDir
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|)
expr_stmt|;
name|customExecutorPath
operator|=
name|localDataDir
operator|+
literal|"/bin/container-executor"
expr_stmt|;
name|emptyConf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|confWithExecutorPath
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|confWithExecutorPath
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LINUX_CONTAINER_EXECUTOR_PATH
argument_list|,
name|customExecutorPath
argument_list|)
expr_stmt|;
name|cGroupTasksNone
operator|=
literal|"none"
expr_stmt|;
name|cGroupTasksInvalid
operator|=
literal|"invalid_string"
expr_stmt|;
name|cGroupTasks1
operator|=
literal|"cpu/hadoop_yarn/container_01/tasks"
expr_stmt|;
name|cGroupTasks2
operator|=
literal|"net_cls/hadoop_yarn/container_01/tasks"
expr_stmt|;
name|cGroupTasks3
operator|=
literal|"blkio/hadoop_yarn/container_01/tasks"
expr_stmt|;
name|opDisallowed
operator|=
operator|new
name|PrivilegedOperation
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|DELETE_AS_USER
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|opTasksNone
operator|=
operator|new
name|PrivilegedOperation
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|ADD_PID_TO_CGROUP
argument_list|,
name|PrivilegedOperation
operator|.
name|CGROUP_ARG_PREFIX
operator|+
name|cGroupTasksNone
argument_list|)
expr_stmt|;
name|opTasksInvalid
operator|=
operator|new
name|PrivilegedOperation
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|ADD_PID_TO_CGROUP
argument_list|,
name|cGroupTasksInvalid
argument_list|)
expr_stmt|;
name|opTasks1
operator|=
operator|new
name|PrivilegedOperation
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|ADD_PID_TO_CGROUP
argument_list|,
name|PrivilegedOperation
operator|.
name|CGROUP_ARG_PREFIX
operator|+
name|cGroupTasks1
argument_list|)
expr_stmt|;
name|opTasks2
operator|=
operator|new
name|PrivilegedOperation
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|ADD_PID_TO_CGROUP
argument_list|,
name|PrivilegedOperation
operator|.
name|CGROUP_ARG_PREFIX
operator|+
name|cGroupTasks2
argument_list|)
expr_stmt|;
name|opTasks3
operator|=
operator|new
name|PrivilegedOperation
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|ADD_PID_TO_CGROUP
argument_list|,
name|PrivilegedOperation
operator|.
name|CGROUP_ARG_PREFIX
operator|+
name|cGroupTasks3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExecutorPath ()
specifier|public
name|void
name|testExecutorPath
parameter_list|()
block|{
name|String
name|containerExePath
init|=
name|PrivilegedOperationExecutor
operator|.
name|getContainerExecutorExecutablePath
argument_list|(
name|nullConf
argument_list|)
decl_stmt|;
comment|//In case HADOOP_YARN_HOME isn't set, CWD is used. If conf is null or
comment|//NM_LINUX_CONTAINER_EXECUTOR_PATH is not set, then a defaultPath is
comment|//constructed.
name|String
name|yarnHomeEnvVar
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"HADOOP_YARN_HOME"
argument_list|)
decl_stmt|;
name|String
name|yarnHome
init|=
name|yarnHomeEnvVar
operator|!=
literal|null
condition|?
name|yarnHomeEnvVar
else|:
operator|new
name|File
argument_list|(
literal|""
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|String
name|expectedPath
init|=
name|yarnHome
operator|+
literal|"/bin/container-executor"
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedPath
argument_list|,
name|containerExePath
argument_list|)
expr_stmt|;
name|containerExePath
operator|=
name|PrivilegedOperationExecutor
operator|.
name|getContainerExecutorExecutablePath
argument_list|(
name|emptyConf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedPath
argument_list|,
name|containerExePath
argument_list|)
expr_stmt|;
comment|//if NM_LINUX_CONTAINER_EXECUTOR_PATH is set, this must be returned
name|expectedPath
operator|=
name|customExecutorPath
expr_stmt|;
name|containerExePath
operator|=
name|PrivilegedOperationExecutor
operator|.
name|getContainerExecutorExecutablePath
argument_list|(
name|confWithExecutorPath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedPath
argument_list|,
name|containerExePath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExecutionCommand ()
specifier|public
name|void
name|testExecutionCommand
parameter_list|()
block|{
name|PrivilegedOperationExecutor
name|exec
init|=
name|PrivilegedOperationExecutor
operator|.
name|getInstance
argument_list|(
name|confWithExecutorPath
argument_list|)
decl_stmt|;
name|PrivilegedOperation
name|op
init|=
operator|new
name|PrivilegedOperation
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|TC_MODIFY_STATE
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
decl_stmt|;
name|String
index|[]
name|cmdArray
init|=
name|exec
operator|.
name|getPrivilegedOperationExecutionCommand
argument_list|(
literal|null
argument_list|,
name|op
argument_list|)
decl_stmt|;
comment|//No arguments added - so the resulting array should consist of
comment|//1)full path to executor 2) cli switch
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cmdArray
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|customExecutorPath
argument_list|,
name|cmdArray
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|op
operator|.
name|getOperationType
argument_list|()
operator|.
name|getOption
argument_list|()
argument_list|,
name|cmdArray
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|//other (dummy) arguments to tc modify state
name|String
index|[]
name|additionalArgs
init|=
block|{
literal|"cmd_file_1"
block|,
literal|"cmd_file_2"
block|,
literal|"cmd_file_3"
block|}
decl_stmt|;
name|op
operator|.
name|appendArgs
argument_list|(
name|additionalArgs
argument_list|)
expr_stmt|;
name|cmdArray
operator|=
name|exec
operator|.
name|getPrivilegedOperationExecutionCommand
argument_list|(
literal|null
argument_list|,
name|op
argument_list|)
expr_stmt|;
comment|//Resulting array should be of length 2 greater than the number of
comment|//additional arguments added.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
operator|+
name|additionalArgs
operator|.
name|length
argument_list|,
name|cmdArray
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|customExecutorPath
argument_list|,
name|cmdArray
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|op
operator|.
name|getOperationType
argument_list|()
operator|.
name|getOption
argument_list|()
argument_list|,
name|cmdArray
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|//Rest of args should be same as additional args.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|additionalArgs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|additionalArgs
index|[
name|i
index|]
argument_list|,
name|cmdArray
index|[
literal|2
operator|+
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|//Now test prefix commands
name|List
argument_list|<
name|String
argument_list|>
name|prefixCommands
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"nice"
argument_list|,
literal|"-10"
argument_list|)
decl_stmt|;
name|cmdArray
operator|=
name|exec
operator|.
name|getPrivilegedOperationExecutionCommand
argument_list|(
name|prefixCommands
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|int
name|prefixLength
init|=
name|prefixCommands
operator|.
name|size
argument_list|()
decl_stmt|;
comment|//Resulting array should be of length of prefix command args + 2 (exec
comment|// path + switch) + length of additional args.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|prefixLength
operator|+
literal|2
operator|+
name|additionalArgs
operator|.
name|length
argument_list|,
name|cmdArray
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//Prefix command array comes first
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prefixLength
condition|;
operator|++
name|i
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|prefixCommands
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|cmdArray
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|//Followed by the container executor path and the cli switch
name|Assert
operator|.
name|assertEquals
argument_list|(
name|customExecutorPath
argument_list|,
name|cmdArray
index|[
name|prefixLength
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|op
operator|.
name|getOperationType
argument_list|()
operator|.
name|getOption
argument_list|()
argument_list|,
name|cmdArray
index|[
name|prefixLength
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
comment|//Followed by the rest of the args
comment|//Rest of args should be same as additional args.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|additionalArgs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|additionalArgs
index|[
name|i
index|]
argument_list|,
name|cmdArray
index|[
name|prefixLength
operator|+
literal|2
operator|+
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSquashCGroupOperationsWithInvalidOperations ()
specifier|public
name|void
name|testSquashCGroupOperationsWithInvalidOperations
parameter_list|()
block|{
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|ops
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|//Ensure that disallowed ops are rejected
name|ops
operator|.
name|add
argument_list|(
name|opTasksNone
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|opDisallowed
argument_list|)
expr_stmt|;
try|try
block|{
name|PrivilegedOperationExecutor
operator|.
name|squashCGroupOperations
argument_list|(
name|ops
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected squash operation to fail with an exception!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PrivilegedOperationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught expected exception : "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
comment|//Ensure that invalid strings are rejected
name|ops
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|opTasksNone
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|opTasksInvalid
argument_list|)
expr_stmt|;
try|try
block|{
name|PrivilegedOperationExecutor
operator|.
name|squashCGroupOperations
argument_list|(
name|ops
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected squash operation to fail with an exception!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PrivilegedOperationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught expected exception : "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSquashCGroupOperationsWithValidOperations ()
specifier|public
name|void
name|testSquashCGroupOperationsWithValidOperations
parameter_list|()
block|{
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|ops
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|//Test squashing, including 'none'
name|ops
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|opTasks1
argument_list|)
expr_stmt|;
comment|//this is expected to be ignored
name|ops
operator|.
name|add
argument_list|(
name|opTasksNone
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|opTasks2
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|opTasks3
argument_list|)
expr_stmt|;
try|try
block|{
name|PrivilegedOperation
name|op
init|=
name|PrivilegedOperationExecutor
operator|.
name|squashCGroupOperations
argument_list|(
name|ops
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
operator|new
name|StringBuffer
argument_list|(
name|PrivilegedOperation
operator|.
name|CGROUP_ARG_PREFIX
argument_list|)
operator|.
name|append
argument_list|(
name|cGroupTasks1
argument_list|)
operator|.
name|append
argument_list|(
name|PrivilegedOperation
operator|.
name|LINUX_FILE_PATH_SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|cGroupTasks2
argument_list|)
operator|.
name|append
argument_list|(
name|PrivilegedOperation
operator|.
name|LINUX_FILE_PATH_SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|cGroupTasks3
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|//We expect axactly one argument
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|op
operator|.
name|getArguments
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//Squashed list of tasks files
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|op
operator|.
name|getArguments
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PrivilegedOperationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught unexpected exception : "
operator|+
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Caught unexpected exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

