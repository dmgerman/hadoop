begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebServicesTestUtils
operator|.
name|assertResponseStatusCode
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|JettyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|LocalDirsHandlerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeHealthCheckerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ResourceView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|webapp
operator|.
name|WebServer
operator|.
name|NMWebApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|GenericExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|GuiceServletConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|JerseyTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebServicesTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|ServletModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|UniformInterfaceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|guice
operator|.
name|spi
operator|.
name|container
operator|.
name|servlet
operator|.
name|GuiceContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|test
operator|.
name|framework
operator|.
name|WebAppDescriptor
import|;
end_import

begin_class
DECL|class|TestNMWebServicesApps
specifier|public
class|class
name|TestNMWebServicesApps
extends|extends
name|JerseyTestBase
block|{
DECL|field|nmContext
specifier|private
specifier|static
name|Context
name|nmContext
decl_stmt|;
DECL|field|resourceView
specifier|private
specifier|static
name|ResourceView
name|resourceView
decl_stmt|;
DECL|field|aclsManager
specifier|private
specifier|static
name|ApplicationACLsManager
name|aclsManager
decl_stmt|;
DECL|field|dirsHandler
specifier|private
specifier|static
name|LocalDirsHandlerService
name|dirsHandler
decl_stmt|;
DECL|field|nmWebApp
specifier|private
specifier|static
name|WebApp
name|nmWebApp
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|testRootDir
specifier|private
specifier|static
specifier|final
name|File
name|testRootDir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|TestNMWebServicesApps
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|testLogDir
specifier|private
specifier|static
name|File
name|testLogDir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|TestNMWebServicesApps
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"LogDir"
argument_list|)
decl_stmt|;
DECL|class|WebServletModule
specifier|private
specifier|static
class|class
name|WebServletModule
extends|extends
name|ServletModule
block|{
annotation|@
name|Override
DECL|method|configureServlets ()
specifier|protected
name|void
name|configureServlets
parameter_list|()
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|testRootDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|testLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|LocalDirsHandlerService
name|dirsHandler
init|=
operator|new
name|LocalDirsHandlerService
argument_list|()
decl_stmt|;
name|NodeHealthCheckerService
name|healthChecker
init|=
operator|new
name|NodeHealthCheckerService
argument_list|(
name|NodeManager
operator|.
name|getNodeHealthScriptRunner
argument_list|(
name|conf
argument_list|)
argument_list|,
name|dirsHandler
argument_list|)
decl_stmt|;
name|healthChecker
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dirsHandler
operator|=
name|healthChecker
operator|.
name|getDiskHandler
argument_list|()
expr_stmt|;
name|aclsManager
operator|=
operator|new
name|ApplicationACLsManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nmContext
operator|=
operator|new
name|NodeManager
operator|.
name|NMContext
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|dirsHandler
argument_list|,
name|aclsManager
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"testhost.foo.com"
argument_list|,
literal|9999
argument_list|)
decl_stmt|;
operator|(
operator|(
name|NodeManager
operator|.
name|NMContext
operator|)
name|nmContext
operator|)
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|resourceView
operator|=
operator|new
name|ResourceView
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|getVmemAllocatedForContainers
parameter_list|()
block|{
comment|// 15.5G in bytes
return|return
operator|new
name|Long
argument_list|(
literal|"16642998272"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPmemAllocatedForContainers
parameter_list|()
block|{
comment|// 16G in bytes
return|return
operator|new
name|Long
argument_list|(
literal|"17179869184"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getVCoresAllocatedForContainers
parameter_list|()
block|{
return|return
operator|new
name|Long
argument_list|(
literal|"4000"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isVmemCheckEnabled
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPmemCheckEnabled
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
expr_stmt|;
name|nmWebApp
operator|=
operator|new
name|NMWebApp
argument_list|(
name|resourceView
argument_list|,
name|aclsManager
argument_list|,
name|dirsHandler
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|JAXBContextResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|NMWebServices
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|GenericExceptionHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|Context
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|nmContext
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|WebApp
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|nmWebApp
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|ResourceView
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|resourceView
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|ApplicationACLsManager
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|aclsManager
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|LocalDirsHandlerService
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|dirsHandler
argument_list|)
expr_stmt|;
name|serve
argument_list|(
literal|"/*"
argument_list|)
operator|.
name|with
argument_list|(
name|GuiceContainer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
static|static
block|{
name|GuiceServletConfig
operator|.
name|setInjector
argument_list|(
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|WebServletModule
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|GuiceServletConfig
operator|.
name|setInjector
argument_list|(
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|WebServletModule
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|testRootDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|testLogDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|cleanup ()
specifier|static
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|testRootDir
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|testLogDir
argument_list|)
expr_stmt|;
block|}
DECL|method|TestNMWebServicesApps ()
specifier|public
name|TestNMWebServicesApps
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|WebAppDescriptor
operator|.
name|Builder
argument_list|(
literal|"org.apache.hadoop.yarn.server.nodemanager.webapp"
argument_list|)
operator|.
name|contextListenerClass
argument_list|(
name|GuiceServletConfig
operator|.
name|class
argument_list|)
operator|.
name|filterClass
argument_list|(
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceFilter
operator|.
name|class
argument_list|)
operator|.
name|contextPath
argument_list|(
literal|"jersey-guice-filter"
argument_list|)
operator|.
name|servletPath
argument_list|(
literal|"/"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeAppsNone ()
specifier|public
name|void
name|testNodeAppsNone
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"node"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"apps isn't empty"
argument_list|,
operator|new
name|JSONObject
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|json
operator|.
name|get
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addAppContainers (Application app)
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|addAppContainers
parameter_list|(
name|Application
name|app
parameter_list|)
throws|throws
name|IOException
block|{
name|Dispatcher
name|dispatcher
init|=
operator|new
name|AsyncDispatcher
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Container
name|container1
init|=
operator|new
name|MockContainer
argument_list|(
name|appAttemptId
argument_list|,
name|dispatcher
argument_list|,
name|conf
argument_list|,
name|app
operator|.
name|getUser
argument_list|()
argument_list|,
name|app
operator|.
name|getAppId
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Container
name|container2
init|=
operator|new
name|MockContainer
argument_list|(
name|appAttemptId
argument_list|,
name|dispatcher
argument_list|,
name|conf
argument_list|,
name|app
operator|.
name|getUser
argument_list|()
argument_list|,
name|app
operator|.
name|getAppId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getContainers
argument_list|()
operator|.
name|put
argument_list|(
name|container1
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|container1
argument_list|)
expr_stmt|;
name|nmContext
operator|.
name|getContainers
argument_list|()
operator|.
name|put
argument_list|(
name|container2
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|container2
argument_list|)
expr_stmt|;
name|app
operator|.
name|getContainers
argument_list|()
operator|.
name|put
argument_list|(
name|container1
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|container1
argument_list|)
expr_stmt|;
name|app
operator|.
name|getContainers
argument_list|()
operator|.
name|put
argument_list|(
name|container2
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|container2
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hash
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|hash
operator|.
name|put
argument_list|(
name|container1
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|container1
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hash
operator|.
name|put
argument_list|(
name|container2
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|container2
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|hash
return|;
block|}
annotation|@
name|Test
DECL|method|testNodeApps ()
specifier|public
name|void
name|testNodeApps
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|testNodeHelper
argument_list|(
literal|"apps"
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeAppsSlash ()
specifier|public
name|void
name|testNodeAppsSlash
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|testNodeHelper
argument_list|(
literal|"apps/"
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
block|}
comment|// make sure default is json output
annotation|@
name|Test
DECL|method|testNodeAppsDefault ()
specifier|public
name|void
name|testNodeAppsDefault
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|testNodeHelper
argument_list|(
literal|"apps/"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|testNodeHelper (String path, String media)
specifier|public
name|void
name|testNodeHelper
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|media
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Application
name|app
init|=
operator|new
name|MockApp
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hash
init|=
name|addAppContainers
argument_list|(
name|app
argument_list|)
decl_stmt|;
name|Application
name|app2
init|=
operator|new
name|MockApp
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|app2
operator|.
name|getAppId
argument_list|()
argument_list|,
name|app2
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hash2
init|=
name|addAppContainers
argument_list|(
name|app2
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"node"
argument_list|)
operator|.
name|path
argument_list|(
name|path
argument_list|)
operator|.
name|accept
argument_list|(
name|media
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|info
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|info
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|appInfo
init|=
name|info
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|2
argument_list|,
name|appInfo
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|appInfo
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|matches
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|verifyNodeAppInfo
argument_list|(
name|appInfo
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
argument_list|,
name|app
argument_list|,
name|hash
argument_list|)
expr_stmt|;
name|verifyNodeAppInfo
argument_list|(
name|appInfo
operator|.
name|getJSONObject
argument_list|(
literal|1
argument_list|)
argument_list|,
name|app2
argument_list|,
name|hash2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verifyNodeAppInfo
argument_list|(
name|appInfo
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
argument_list|,
name|app2
argument_list|,
name|hash2
argument_list|)
expr_stmt|;
name|verifyNodeAppInfo
argument_list|(
name|appInfo
operator|.
name|getJSONObject
argument_list|(
literal|1
argument_list|)
argument_list|,
name|app
argument_list|,
name|hash
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNodeAppsUser ()
specifier|public
name|void
name|testNodeAppsUser
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Application
name|app
init|=
operator|new
name|MockApp
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hash
init|=
name|addAppContainers
argument_list|(
name|app
argument_list|)
decl_stmt|;
name|Application
name|app2
init|=
operator|new
name|MockApp
argument_list|(
literal|"foo"
argument_list|,
literal|1234
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|app2
operator|.
name|getAppId
argument_list|()
argument_list|,
name|app2
argument_list|)
expr_stmt|;
name|addAppContainers
argument_list|(
name|app2
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"node"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"user"
argument_list|,
literal|"mockUser"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|info
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|info
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|appInfo
init|=
name|info
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|appInfo
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|verifyNodeAppInfo
argument_list|(
name|appInfo
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
argument_list|,
name|app
argument_list|,
name|hash
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeAppsUserNone ()
specifier|public
name|void
name|testNodeAppsUserNone
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Application
name|app
init|=
operator|new
name|MockApp
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|addAppContainers
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|Application
name|app2
init|=
operator|new
name|MockApp
argument_list|(
literal|"foo"
argument_list|,
literal|1234
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|app2
operator|.
name|getAppId
argument_list|()
argument_list|,
name|app2
argument_list|)
expr_stmt|;
name|addAppContainers
argument_list|(
name|app2
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"node"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"user"
argument_list|,
literal|"george"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"apps is not empty"
argument_list|,
operator|new
name|JSONObject
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|json
operator|.
name|get
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeAppsUserEmpty ()
specifier|public
name|void
name|testNodeAppsUserEmpty
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Application
name|app
init|=
operator|new
name|MockApp
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|addAppContainers
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|Application
name|app2
init|=
operator|new
name|MockApp
argument_list|(
literal|"foo"
argument_list|,
literal|1234
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|app2
operator|.
name|getAppId
argument_list|()
argument_list|,
name|app2
argument_list|)
expr_stmt|;
name|addAppContainers
argument_list|(
name|app2
argument_list|)
expr_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"node"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"user"
argument_list|,
literal|""
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid user query"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception message"
argument_list|,
literal|"java.lang.Exception: Error: You must specify a non-empty string for the user"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"BadRequestException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"org.apache.hadoop.yarn.webapp.BadRequestException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNodeAppsState ()
specifier|public
name|void
name|testNodeAppsState
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Application
name|app
init|=
operator|new
name|MockApp
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|addAppContainers
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|MockApp
name|app2
init|=
operator|new
name|MockApp
argument_list|(
literal|"foo"
argument_list|,
literal|1234
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|app2
operator|.
name|getAppId
argument_list|()
argument_list|,
name|app2
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hash2
init|=
name|addAppContainers
argument_list|(
name|app2
argument_list|)
decl_stmt|;
name|app2
operator|.
name|setState
argument_list|(
name|ApplicationState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"node"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"state"
argument_list|,
name|ApplicationState
operator|.
name|RUNNING
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|info
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|info
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|appInfo
init|=
name|info
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|appInfo
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|verifyNodeAppInfo
argument_list|(
name|appInfo
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
argument_list|,
name|app2
argument_list|,
name|hash2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeAppsStateNone ()
specifier|public
name|void
name|testNodeAppsStateNone
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Application
name|app
init|=
operator|new
name|MockApp
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|addAppContainers
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|Application
name|app2
init|=
operator|new
name|MockApp
argument_list|(
literal|"foo"
argument_list|,
literal|1234
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|app2
operator|.
name|getAppId
argument_list|()
argument_list|,
name|app2
argument_list|)
expr_stmt|;
name|addAppContainers
argument_list|(
name|app2
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"node"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"state"
argument_list|,
name|ApplicationState
operator|.
name|INITING
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"apps is not empty"
argument_list|,
operator|new
name|JSONObject
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|json
operator|.
name|get
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeAppsStateInvalid ()
specifier|public
name|void
name|testNodeAppsStateInvalid
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Application
name|app
init|=
operator|new
name|MockApp
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|addAppContainers
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|Application
name|app2
init|=
operator|new
name|MockApp
argument_list|(
literal|"foo"
argument_list|,
literal|1234
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|app2
operator|.
name|getAppId
argument_list|()
argument_list|,
name|app2
argument_list|)
expr_stmt|;
name|addAppContainers
argument_list|(
name|app2
argument_list|)
expr_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"node"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"state"
argument_list|,
literal|"FOO_STATE"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid user query"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|verifyStateInvalidException
argument_list|(
name|message
argument_list|,
name|type
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
block|}
comment|// verify the exception object default format is JSON
annotation|@
name|Test
DECL|method|testNodeAppsStateInvalidDefault ()
specifier|public
name|void
name|testNodeAppsStateInvalidDefault
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Application
name|app
init|=
operator|new
name|MockApp
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|addAppContainers
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|Application
name|app2
init|=
operator|new
name|MockApp
argument_list|(
literal|"foo"
argument_list|,
literal|1234
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|app2
operator|.
name|getAppId
argument_list|()
argument_list|,
name|app2
argument_list|)
expr_stmt|;
name|addAppContainers
argument_list|(
name|app2
argument_list|)
expr_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"node"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"state"
argument_list|,
literal|"FOO_STATE"
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid user query"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|verifyStateInvalidException
argument_list|(
name|message
argument_list|,
name|type
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
block|}
comment|// test that the exception output also returns XML
annotation|@
name|Test
DECL|method|testNodeAppsStateInvalidXML ()
specifier|public
name|void
name|testNodeAppsStateInvalidXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Application
name|app
init|=
operator|new
name|MockApp
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|addAppContainers
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|Application
name|app2
init|=
operator|new
name|MockApp
argument_list|(
literal|"foo"
argument_list|,
literal|1234
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|app2
operator|.
name|getAppId
argument_list|()
argument_list|,
name|app2
argument_list|)
expr_stmt|;
name|addAppContainers
argument_list|(
name|app2
argument_list|)
expr_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"node"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"state"
argument_list|,
literal|"FOO_STATE"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid user query"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|nodes
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|message
init|=
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|verifyStateInvalidException
argument_list|(
name|message
argument_list|,
name|type
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyStateInvalidException (String message, String type, String classname)
specifier|private
name|void
name|verifyStateInvalidException
parameter_list|(
name|String
name|message
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|classname
parameter_list|)
block|{
name|WebServicesTestUtils
operator|.
name|checkStringContains
argument_list|(
literal|"exception message"
argument_list|,
literal|"org.apache.hadoop.yarn.server.nodemanager.containermanager.application.ApplicationState.FOO_STATE"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"IllegalArgumentException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"java.lang.IllegalArgumentException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeSingleApps ()
specifier|public
name|void
name|testNodeSingleApps
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|testNodeSingleAppHelper
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
block|}
comment|// make sure default is json output
annotation|@
name|Test
DECL|method|testNodeSingleAppsDefault ()
specifier|public
name|void
name|testNodeSingleAppsDefault
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|testNodeSingleAppHelper
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|testNodeSingleAppHelper (String media)
specifier|public
name|void
name|testNodeSingleAppHelper
parameter_list|(
name|String
name|media
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Application
name|app
init|=
operator|new
name|MockApp
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hash
init|=
name|addAppContainers
argument_list|(
name|app
argument_list|)
decl_stmt|;
name|Application
name|app2
init|=
operator|new
name|MockApp
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|app2
operator|.
name|getAppId
argument_list|()
argument_list|,
name|app2
argument_list|)
expr_stmt|;
name|addAppContainers
argument_list|(
name|app2
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"node"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|path
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|media
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyNodeAppInfo
argument_list|(
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"app"
argument_list|)
argument_list|,
name|app
argument_list|,
name|hash
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeSingleAppsSlash ()
specifier|public
name|void
name|testNodeSingleAppsSlash
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Application
name|app
init|=
operator|new
name|MockApp
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hash
init|=
name|addAppContainers
argument_list|(
name|app
argument_list|)
decl_stmt|;
name|Application
name|app2
init|=
operator|new
name|MockApp
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|app2
operator|.
name|getAppId
argument_list|()
argument_list|,
name|app2
argument_list|)
expr_stmt|;
name|addAppContainers
argument_list|(
name|app2
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"node"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|path
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyNodeAppInfo
argument_list|(
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"app"
argument_list|)
argument_list|,
name|app
argument_list|,
name|hash
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeSingleAppsInvalid ()
specifier|public
name|void
name|testNodeSingleAppsInvalid
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Application
name|app
init|=
operator|new
name|MockApp
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|addAppContainers
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|Application
name|app2
init|=
operator|new
name|MockApp
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|app2
operator|.
name|getAppId
argument_list|()
argument_list|,
name|app2
argument_list|)
expr_stmt|;
name|addAppContainers
argument_list|(
name|app2
argument_list|)
expr_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"node"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|path
argument_list|(
literal|"app_foo_0000"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid user query"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception message"
argument_list|,
literal|"java.lang.IllegalArgumentException: Invalid ApplicationId prefix: "
operator|+
literal|"app_foo_0000. The valid ApplicationId should start with prefix"
operator|+
literal|" application"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"BadRequestException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"org.apache.hadoop.yarn.webapp.BadRequestException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNodeSingleAppsMissing ()
specifier|public
name|void
name|testNodeSingleAppsMissing
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Application
name|app
init|=
operator|new
name|MockApp
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|addAppContainers
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|Application
name|app2
init|=
operator|new
name|MockApp
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|app2
operator|.
name|getAppId
argument_list|()
argument_list|,
name|app2
argument_list|)
expr_stmt|;
name|addAppContainers
argument_list|(
name|app2
argument_list|)
expr_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"node"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|path
argument_list|(
literal|"application_1234_0009"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid user query"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception message"
argument_list|,
literal|"java.lang.Exception: app with id application_1234_0009 not found"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"NotFoundException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"org.apache.hadoop.yarn.webapp.NotFoundException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNodeAppsXML ()
specifier|public
name|void
name|testNodeAppsXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Application
name|app
init|=
operator|new
name|MockApp
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|addAppContainers
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|Application
name|app2
init|=
operator|new
name|MockApp
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|app2
operator|.
name|getAppId
argument_list|()
argument_list|,
name|app2
argument_list|)
expr_stmt|;
name|addAppContainers
argument_list|(
name|app2
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"node"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|nodes
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|2
argument_list|,
name|nodes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeSingleAppsXML ()
specifier|public
name|void
name|testNodeSingleAppsXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|Application
name|app
init|=
operator|new
name|MockApp
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hash
init|=
name|addAppContainers
argument_list|(
name|app
argument_list|)
decl_stmt|;
name|Application
name|app2
init|=
operator|new
name|MockApp
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|app2
operator|.
name|getAppId
argument_list|()
argument_list|,
name|app2
argument_list|)
expr_stmt|;
name|addAppContainers
argument_list|(
name|app2
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"node"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|path
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|nodes
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|nodes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|verifyNodeAppInfoXML
argument_list|(
name|nodes
argument_list|,
name|app
argument_list|,
name|hash
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyNodeAppInfoXML (NodeList nodes, Application app, HashMap<String, String> hash)
specifier|public
name|void
name|verifyNodeAppInfoXML
parameter_list|(
name|NodeList
name|nodes
parameter_list|,
name|Application
name|app
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hash
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|verifyNodeAppInfoGeneric
argument_list|(
name|app
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"id"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"state"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"user"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeList
name|ids
init|=
name|element
operator|.
name|getElementsByTagName
argument_list|(
literal|"containerids"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|ids
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Element
name|line
init|=
operator|(
name|Element
operator|)
name|ids
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|Node
name|first
init|=
name|line
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
name|String
name|val
init|=
name|first
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"extra containerid: "
operator|+
name|val
argument_list|,
name|val
argument_list|,
name|hash
operator|.
name|remove
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"missing containerids"
argument_list|,
name|hash
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyNodeAppInfo (JSONObject info, Application app, HashMap<String, String> hash)
specifier|public
name|void
name|verifyNodeAppInfo
parameter_list|(
name|JSONObject
name|info
parameter_list|,
name|Application
name|app
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hash
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|4
argument_list|,
name|info
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|verifyNodeAppInfoGeneric
argument_list|(
name|app
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"user"
argument_list|)
argument_list|)
expr_stmt|;
name|JSONArray
name|containerids
init|=
name|info
operator|.
name|getJSONArray
argument_list|(
literal|"containerids"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|containerids
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|containerids
operator|.
name|getString
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"extra containerid: "
operator|+
name|id
argument_list|,
name|id
argument_list|,
name|hash
operator|.
name|remove
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"missing containerids"
argument_list|,
name|hash
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyNodeAppInfoGeneric (Application app, String id, String state, String user)
specifier|public
name|void
name|verifyNodeAppInfoGeneric
parameter_list|(
name|Application
name|app
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|state
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"id"
argument_list|,
name|app
operator|.
name|getAppId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"state"
argument_list|,
name|app
operator|.
name|getApplicationState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"user"
argument_list|,
name|app
operator|.
name|getUser
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

