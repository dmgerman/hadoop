begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.launcher
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|InlineDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|LocalDirsHandlerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|executor
operator|.
name|ContainerStartContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMNullStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_comment
comment|/** Unit tests for relaunching containers. */
end_comment

begin_class
DECL|class|TestContainerRelaunch
specifier|public
class|class
name|TestContainerRelaunch
block|{
annotation|@
name|Test
DECL|method|testRelaunchContext ()
specifier|public
name|void
name|testRelaunchContext
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Context
name|mockContext
init|=
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
operator|new
name|NMNullStateStoreService
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|mockContext
argument_list|)
operator|.
name|getNMStateStore
argument_list|()
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|cid
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Application
name|mockApp
init|=
name|mock
argument_list|(
name|Application
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|appId
argument_list|)
operator|.
name|when
argument_list|(
name|mockApp
argument_list|)
operator|.
name|getAppId
argument_list|()
expr_stmt|;
name|Container
name|mockContainer
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"somebody"
argument_list|)
operator|.
name|when
argument_list|(
name|mockContainer
argument_list|)
operator|.
name|getUser
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|cid
argument_list|)
operator|.
name|when
argument_list|(
name|mockContainer
argument_list|)
operator|.
name|getContainerId
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|"/foo"
argument_list|)
operator|.
name|when
argument_list|(
name|mockContainer
argument_list|)
operator|.
name|getWorkDir
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|"/bar"
argument_list|)
operator|.
name|when
argument_list|(
name|mockContainer
argument_list|)
operator|.
name|getLogDir
argument_list|()
expr_stmt|;
name|LocalDirsHandlerService
name|mockDirsHandler
init|=
name|mock
argument_list|(
name|LocalDirsHandlerService
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|mockDirsHandler
argument_list|)
operator|.
name|isGoodLocalDir
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|mockDirsHandler
argument_list|)
operator|.
name|isGoodLogDir
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|mockDirsHandler
argument_list|)
operator|.
name|areDisksHealthy
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/some/file"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockDirsHandler
argument_list|)
operator|.
name|getLocalPathForRead
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|Dispatcher
name|dispatcher
init|=
operator|new
name|InlineDispatcher
argument_list|()
decl_stmt|;
name|ContainerExecutor
name|mockExecutor
init|=
name|mock
argument_list|(
name|ContainerExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerRelaunch
name|cr
init|=
operator|new
name|ContainerRelaunch
argument_list|(
name|mockContext
argument_list|,
name|conf
argument_list|,
name|dispatcher
argument_list|,
name|mockExecutor
argument_list|,
name|mockApp
argument_list|,
name|mockContainer
argument_list|,
name|mockDirsHandler
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|int
name|result
init|=
name|cr
operator|.
name|call
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"relaunch failed"
argument_list|,
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|ContainerStartContext
argument_list|>
name|captor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|ContainerStartContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockExecutor
argument_list|)
operator|.
name|launchContainer
argument_list|(
name|captor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerStartContext
name|csc
init|=
name|captor
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"app ID null"
argument_list|,
name|csc
operator|.
name|getAppId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"container null"
argument_list|,
name|csc
operator|.
name|getContainer
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"container local dirs null"
argument_list|,
name|csc
operator|.
name|getContainerLocalDirs
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"container log dirs null"
argument_list|,
name|csc
operator|.
name|getContainerLogDirs
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"work dir null"
argument_list|,
name|csc
operator|.
name|getContainerWorkDir
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"filecache dirs null"
argument_list|,
name|csc
operator|.
name|getFilecacheDirs
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"local dirs null"
argument_list|,
name|csc
operator|.
name|getLocalDirs
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"localized resources null"
argument_list|,
name|csc
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"log dirs null"
argument_list|,
name|csc
operator|.
name|getLogDirs
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"script path null"
argument_list|,
name|csc
operator|.
name|getNmPrivateContainerScriptPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"tokens path null"
argument_list|,
name|csc
operator|.
name|getNmPrivateTokensPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"user null"
argument_list|,
name|csc
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"user local dirs null"
argument_list|,
name|csc
operator|.
name|getUserLocalDirs
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"user filecache dirs null"
argument_list|,
name|csc
operator|.
name|getUserFilecacheDirs
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"application local dirs null"
argument_list|,
name|csc
operator|.
name|getApplicationLocalDirs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

