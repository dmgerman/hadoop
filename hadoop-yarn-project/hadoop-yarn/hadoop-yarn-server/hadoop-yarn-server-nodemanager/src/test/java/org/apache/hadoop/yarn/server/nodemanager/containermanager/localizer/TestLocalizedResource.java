begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|argThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|isA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|DrainDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizerResourceRequestEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ResourceLocalizedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ResourceReleaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ResourceRequestEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatcher
import|;
end_import

begin_class
DECL|class|TestLocalizedResource
specifier|public
class|class
name|TestLocalizedResource
block|{
DECL|method|getMockContainer (int id)
specifier|static
name|ContainerId
name|getMockContainer
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|ApplicationId
name|appId
init|=
name|mock
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|appId
operator|.
name|getClusterTimestamp
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|314159265L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appId
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|mock
argument_list|(
name|ApplicationAttemptId
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appAttemptId
operator|.
name|getAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ContainerId
name|container
init|=
name|mock
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
return|return
name|container
return|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// mocked generic
DECL|method|testNotification ()
specifier|public
name|void
name|testNotification
parameter_list|()
throws|throws
name|Exception
block|{
name|DrainDispatcher
name|dispatcher
init|=
operator|new
name|DrainDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|EventHandler
argument_list|<
name|ContainerEvent
argument_list|>
name|containerBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|EventHandler
argument_list|<
name|LocalizerEvent
argument_list|>
name|localizerBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainerEventType
operator|.
name|class
argument_list|,
name|containerBus
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|LocalizerEventType
operator|.
name|class
argument_list|,
name|localizerBus
argument_list|)
expr_stmt|;
comment|// mock resource
name|LocalResource
name|apiRsrc
init|=
name|createMockResource
argument_list|()
decl_stmt|;
specifier|final
name|ContainerId
name|container0
init|=
name|getMockContainer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Credentials
name|creds0
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
specifier|final
name|LocalResourceVisibility
name|vis0
init|=
name|LocalResourceVisibility
operator|.
name|PRIVATE
decl_stmt|;
specifier|final
name|LocalizerContext
name|ctxt0
init|=
operator|new
name|LocalizerContext
argument_list|(
literal|"yak"
argument_list|,
name|container0
argument_list|,
name|creds0
argument_list|)
decl_stmt|;
name|LocalResourceRequest
name|rsrcA
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|apiRsrc
argument_list|)
decl_stmt|;
name|LocalizedResource
name|local
init|=
operator|new
name|LocalizedResource
argument_list|(
name|rsrcA
argument_list|,
name|dispatcher
argument_list|)
decl_stmt|;
name|local
operator|.
name|handle
argument_list|(
operator|new
name|ResourceRequestEvent
argument_list|(
name|rsrcA
argument_list|,
name|vis0
argument_list|,
name|ctxt0
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Register C0, verify request event
name|LocalizerEventMatcher
name|matchesL0Req
init|=
operator|new
name|LocalizerEventMatcher
argument_list|(
name|container0
argument_list|,
name|creds0
argument_list|,
name|vis0
argument_list|,
name|LocalizerEventType
operator|.
name|REQUEST_RESOURCE_LOCALIZATION
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|localizerBus
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
name|matchesL0Req
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResourceState
operator|.
name|DOWNLOADING
argument_list|,
name|local
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Register C1, verify request event
specifier|final
name|Credentials
name|creds1
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
specifier|final
name|ContainerId
name|container1
init|=
name|getMockContainer
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|LocalizerContext
name|ctxt1
init|=
operator|new
name|LocalizerContext
argument_list|(
literal|"yak"
argument_list|,
name|container1
argument_list|,
name|creds1
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceVisibility
name|vis1
init|=
name|LocalResourceVisibility
operator|.
name|PUBLIC
decl_stmt|;
name|local
operator|.
name|handle
argument_list|(
operator|new
name|ResourceRequestEvent
argument_list|(
name|rsrcA
argument_list|,
name|vis1
argument_list|,
name|ctxt1
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|LocalizerEventMatcher
name|matchesL1Req
init|=
operator|new
name|LocalizerEventMatcher
argument_list|(
name|container1
argument_list|,
name|creds1
argument_list|,
name|vis1
argument_list|,
name|LocalizerEventType
operator|.
name|REQUEST_RESOURCE_LOCALIZATION
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|localizerBus
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
name|matchesL1Req
argument_list|)
argument_list|)
expr_stmt|;
comment|// Release C0 container localization, verify no notification
name|local
operator|.
name|handle
argument_list|(
operator|new
name|ResourceReleaseEvent
argument_list|(
name|rsrcA
argument_list|,
name|container0
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|containerBus
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|isA
argument_list|(
name|ContainerEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResourceState
operator|.
name|DOWNLOADING
argument_list|,
name|local
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Release C1 container localization, verify no notification
name|local
operator|.
name|handle
argument_list|(
operator|new
name|ResourceReleaseEvent
argument_list|(
name|rsrcA
argument_list|,
name|container1
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|containerBus
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|isA
argument_list|(
name|ContainerEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResourceState
operator|.
name|DOWNLOADING
argument_list|,
name|local
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Register C2, C3
specifier|final
name|ContainerId
name|container2
init|=
name|getMockContainer
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceVisibility
name|vis2
init|=
name|LocalResourceVisibility
operator|.
name|PRIVATE
decl_stmt|;
specifier|final
name|Credentials
name|creds2
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
specifier|final
name|LocalizerContext
name|ctxt2
init|=
operator|new
name|LocalizerContext
argument_list|(
literal|"yak"
argument_list|,
name|container2
argument_list|,
name|creds2
argument_list|)
decl_stmt|;
specifier|final
name|ContainerId
name|container3
init|=
name|getMockContainer
argument_list|(
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceVisibility
name|vis3
init|=
name|LocalResourceVisibility
operator|.
name|PRIVATE
decl_stmt|;
specifier|final
name|Credentials
name|creds3
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
specifier|final
name|LocalizerContext
name|ctxt3
init|=
operator|new
name|LocalizerContext
argument_list|(
literal|"yak"
argument_list|,
name|container3
argument_list|,
name|creds3
argument_list|)
decl_stmt|;
name|local
operator|.
name|handle
argument_list|(
operator|new
name|ResourceRequestEvent
argument_list|(
name|rsrcA
argument_list|,
name|vis2
argument_list|,
name|ctxt2
argument_list|)
argument_list|)
expr_stmt|;
name|local
operator|.
name|handle
argument_list|(
operator|new
name|ResourceRequestEvent
argument_list|(
name|rsrcA
argument_list|,
name|vis3
argument_list|,
name|ctxt3
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|LocalizerEventMatcher
name|matchesL2Req
init|=
operator|new
name|LocalizerEventMatcher
argument_list|(
name|container2
argument_list|,
name|creds2
argument_list|,
name|vis2
argument_list|,
name|LocalizerEventType
operator|.
name|REQUEST_RESOURCE_LOCALIZATION
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|localizerBus
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
name|matchesL2Req
argument_list|)
argument_list|)
expr_stmt|;
name|LocalizerEventMatcher
name|matchesL3Req
init|=
operator|new
name|LocalizerEventMatcher
argument_list|(
name|container3
argument_list|,
name|creds3
argument_list|,
name|vis3
argument_list|,
name|LocalizerEventType
operator|.
name|REQUEST_RESOURCE_LOCALIZATION
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|localizerBus
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
name|matchesL3Req
argument_list|)
argument_list|)
expr_stmt|;
comment|// Successful localization. verify notification C2, C3
name|Path
name|locA
init|=
operator|new
name|Path
argument_list|(
literal|"file:///cache/rsrcA"
argument_list|)
decl_stmt|;
name|local
operator|.
name|handle
argument_list|(
operator|new
name|ResourceLocalizedEvent
argument_list|(
name|rsrcA
argument_list|,
name|locA
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|ContainerEventMatcher
name|matchesC2Localized
init|=
operator|new
name|ContainerEventMatcher
argument_list|(
name|container2
argument_list|,
name|ContainerEventType
operator|.
name|RESOURCE_LOCALIZED
argument_list|)
decl_stmt|;
name|ContainerEventMatcher
name|matchesC3Localized
init|=
operator|new
name|ContainerEventMatcher
argument_list|(
name|container3
argument_list|,
name|ContainerEventType
operator|.
name|RESOURCE_LOCALIZED
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|containerBus
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
name|matchesC2Localized
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|containerBus
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
name|matchesC3Localized
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResourceState
operator|.
name|LOCALIZED
argument_list|,
name|local
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Register C4, verify notification
specifier|final
name|ContainerId
name|container4
init|=
name|getMockContainer
argument_list|(
literal|4
argument_list|)
decl_stmt|;
specifier|final
name|Credentials
name|creds4
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
specifier|final
name|LocalizerContext
name|ctxt4
init|=
operator|new
name|LocalizerContext
argument_list|(
literal|"yak"
argument_list|,
name|container4
argument_list|,
name|creds4
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceVisibility
name|vis4
init|=
name|LocalResourceVisibility
operator|.
name|PRIVATE
decl_stmt|;
name|local
operator|.
name|handle
argument_list|(
operator|new
name|ResourceRequestEvent
argument_list|(
name|rsrcA
argument_list|,
name|vis4
argument_list|,
name|ctxt4
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|ContainerEventMatcher
name|matchesC4Localized
init|=
operator|new
name|ContainerEventMatcher
argument_list|(
name|container4
argument_list|,
name|ContainerEventType
operator|.
name|RESOURCE_LOCALIZED
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|containerBus
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
name|matchesC4Localized
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResourceState
operator|.
name|LOCALIZED
argument_list|,
name|local
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createMockResource ()
specifier|static
name|LocalResource
name|createMockResource
parameter_list|()
block|{
comment|// mock rsrc location
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
name|uriA
init|=
name|mock
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|uriA
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|uriA
operator|.
name|getHost
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|uriA
operator|.
name|getFile
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"/localA/rsrc"
argument_list|)
expr_stmt|;
name|LocalResource
name|apiRsrc
init|=
name|mock
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|apiRsrc
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|uriA
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|apiRsrc
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|4344L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|apiRsrc
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
return|return
name|apiRsrc
return|;
block|}
DECL|class|LocalizerEventMatcher
specifier|static
class|class
name|LocalizerEventMatcher
extends|extends
name|ArgumentMatcher
argument_list|<
name|LocalizerEvent
argument_list|>
block|{
DECL|field|creds
name|Credentials
name|creds
decl_stmt|;
DECL|field|vis
name|LocalResourceVisibility
name|vis
decl_stmt|;
DECL|field|idRef
specifier|private
specifier|final
name|ContainerId
name|idRef
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
name|LocalizerEventType
name|type
decl_stmt|;
DECL|method|LocalizerEventMatcher (ContainerId idRef, Credentials creds, LocalResourceVisibility vis, LocalizerEventType type)
specifier|public
name|LocalizerEventMatcher
parameter_list|(
name|ContainerId
name|idRef
parameter_list|,
name|Credentials
name|creds
parameter_list|,
name|LocalResourceVisibility
name|vis
parameter_list|,
name|LocalizerEventType
name|type
parameter_list|)
block|{
name|this
operator|.
name|vis
operator|=
name|vis
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|creds
operator|=
name|creds
expr_stmt|;
name|this
operator|.
name|idRef
operator|=
name|idRef
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|matches (Object o)
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|LocalizerResourceRequestEvent
operator|)
condition|)
return|return
literal|false
return|;
name|LocalizerResourceRequestEvent
name|evt
init|=
operator|(
name|LocalizerResourceRequestEvent
operator|)
name|o
decl_stmt|;
return|return
name|idRef
operator|==
name|evt
operator|.
name|getContext
argument_list|()
operator|.
name|getContainerId
argument_list|()
operator|&&
name|type
operator|==
name|evt
operator|.
name|getType
argument_list|()
operator|&&
name|vis
operator|==
name|evt
operator|.
name|getVisibility
argument_list|()
operator|&&
name|creds
operator|==
name|evt
operator|.
name|getContext
argument_list|()
operator|.
name|getCredentials
argument_list|()
return|;
block|}
block|}
DECL|class|ContainerEventMatcher
specifier|static
class|class
name|ContainerEventMatcher
extends|extends
name|ArgumentMatcher
argument_list|<
name|ContainerEvent
argument_list|>
block|{
DECL|field|idRef
specifier|private
specifier|final
name|ContainerId
name|idRef
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
name|ContainerEventType
name|type
decl_stmt|;
DECL|method|ContainerEventMatcher (ContainerId idRef, ContainerEventType type)
specifier|public
name|ContainerEventMatcher
parameter_list|(
name|ContainerId
name|idRef
parameter_list|,
name|ContainerEventType
name|type
parameter_list|)
block|{
name|this
operator|.
name|idRef
operator|=
name|idRef
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|matches (Object o)
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|ContainerEvent
operator|)
condition|)
return|return
literal|false
return|;
name|ContainerEvent
name|evt
init|=
operator|(
name|ContainerEvent
operator|)
name|o
decl_stmt|;
return|return
name|idRef
operator|==
name|evt
operator|.
name|getContainerID
argument_list|()
operator|&&
name|type
operator|==
name|evt
operator|.
name|getType
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

