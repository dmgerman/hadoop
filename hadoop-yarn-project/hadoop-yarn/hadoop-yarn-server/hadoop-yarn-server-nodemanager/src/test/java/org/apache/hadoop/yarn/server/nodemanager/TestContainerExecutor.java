begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|util
operator|.
name|NodeManagerHardwareUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ResourceCalculatorPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_class
DECL|class|TestContainerExecutor
specifier|public
class|class
name|TestContainerExecutor
block|{
DECL|field|containerExecutor
specifier|private
name|ContainerExecutor
name|containerExecutor
init|=
operator|new
name|DefaultContainerExecutor
argument_list|()
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testRunCommandNoPriority ()
specifier|public
name|void
name|testRunCommandNoPriority
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|String
index|[]
name|command
init|=
name|containerExecutor
operator|.
name|getRunCommand
argument_list|(
literal|"echo"
argument_list|,
literal|"group1"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"first command should be the run command for the platform"
argument_list|,
name|command
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|Shell
operator|.
name|WINUTILS
argument_list|)
operator|||
name|command
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"bash"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testRunCommandwithPriority ()
specifier|public
name|void
name|testRunCommandwithPriority
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CONTAINER_EXECUTOR_SCHED_PRIORITY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|String
index|[]
name|command
init|=
name|containerExecutor
operator|.
name|getRunCommand
argument_list|(
literal|"echo"
argument_list|,
literal|"group1"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
comment|// windows doesn't currently support
name|assertEquals
argument_list|(
literal|"first command should be the run command for the platform"
argument_list|,
name|Shell
operator|.
name|WINUTILS
argument_list|,
name|command
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"first command should be nice"
argument_list|,
literal|"nice"
argument_list|,
name|command
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"second command should be -n"
argument_list|,
literal|"-n"
argument_list|,
name|command
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"third command should be the priority"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|2
argument_list|)
argument_list|,
name|command
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
comment|// test with negative number
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CONTAINER_EXECUTOR_SCHED_PRIORITY
argument_list|,
operator|-
literal|5
argument_list|)
expr_stmt|;
name|command
operator|=
name|containerExecutor
operator|.
name|getRunCommand
argument_list|(
literal|"echo"
argument_list|,
literal|"group1"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
comment|// windows doesn't currently support
name|assertEquals
argument_list|(
literal|"first command should be the run command for the platform"
argument_list|,
name|Shell
operator|.
name|WINUTILS
argument_list|,
name|command
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"first command should be nice"
argument_list|,
literal|"nice"
argument_list|,
name|command
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"second command should be -n"
argument_list|,
literal|"-n"
argument_list|,
name|command
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"third command should be the priority"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
operator|-
literal|5
argument_list|)
argument_list|,
name|command
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testRunCommandWithNoResources ()
specifier|public
name|void
name|testRunCommandWithNoResources
parameter_list|()
block|{
comment|// Windows only test
name|assumeTrue
argument_list|(
name|Shell
operator|.
name|WINDOWS
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|String
index|[]
name|command
init|=
name|containerExecutor
operator|.
name|getRunCommand
argument_list|(
literal|"echo"
argument_list|,
literal|"group1"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// Assert the cpu and memory limits are set correctly in the command
name|String
index|[]
name|expected
init|=
block|{
name|Shell
operator|.
name|WINUTILS
block|,
literal|"task"
block|,
literal|"create"
block|,
literal|"-m"
block|,
literal|"-1"
block|,
literal|"-c"
block|,
literal|"-1"
block|,
literal|"group1"
block|,
literal|"cmd /c "
operator|+
literal|"echo"
block|}
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|expected
argument_list|,
name|command
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testRunCommandWithMemoryOnlyResources ()
specifier|public
name|void
name|testRunCommandWithMemoryOnlyResources
parameter_list|()
block|{
comment|// Windows only test
name|assumeTrue
argument_list|(
name|Shell
operator|.
name|WINDOWS
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|String
index|[]
name|command
init|=
name|containerExecutor
operator|.
name|getRunCommand
argument_list|(
literal|"echo"
argument_list|,
literal|"group1"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// Assert the cpu and memory limits are set correctly in the command
name|String
index|[]
name|expected
init|=
block|{
name|Shell
operator|.
name|WINUTILS
block|,
literal|"task"
block|,
literal|"create"
block|,
literal|"-m"
block|,
literal|"1024"
block|,
literal|"-c"
block|,
literal|"-1"
block|,
literal|"group1"
block|,
literal|"cmd /c "
operator|+
literal|"echo"
block|}
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|expected
argument_list|,
name|command
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testRunCommandWithCpuAndMemoryResources ()
specifier|public
name|void
name|testRunCommandWithCpuAndMemoryResources
parameter_list|()
block|{
comment|// Windows only test
name|assumeTrue
argument_list|(
name|Shell
operator|.
name|WINDOWS
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|String
index|[]
name|command
init|=
name|containerExecutor
operator|.
name|getRunCommand
argument_list|(
literal|"echo"
argument_list|,
literal|"group1"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|float
name|yarnProcessors
init|=
name|NodeManagerHardwareUtils
operator|.
name|getContainersCores
argument_list|(
name|ResourceCalculatorPlugin
operator|.
name|getResourceCalculatorPlugin
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|int
name|cpuRate
init|=
name|Math
operator|.
name|min
argument_list|(
literal|10000
argument_list|,
call|(
name|int
call|)
argument_list|(
operator|(
literal|1
operator|*
literal|10000
operator|)
operator|/
name|yarnProcessors
argument_list|)
argument_list|)
decl_stmt|;
comment|// Assert the cpu and memory limits are set correctly in the command
name|String
index|[]
name|expected
init|=
block|{
name|Shell
operator|.
name|WINUTILS
block|,
literal|"task"
block|,
literal|"create"
block|,
literal|"-m"
block|,
literal|"1024"
block|,
literal|"-c"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|cpuRate
argument_list|)
block|,
literal|"group1"
block|,
literal|"cmd /c "
operator|+
literal|"echo"
block|}
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|expected
argument_list|,
name|command
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

