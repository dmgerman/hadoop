begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.runtime.docker
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|docker
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|MockPrivilegedOperationCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|CGroupsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|DockerLinuxContainerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|TestDockerContainerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|runtime
operator|.
name|ContainerRuntimeContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|CONTAINER_ID_STR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|docker
operator|.
name|DockerCommandExecutor
operator|.
name|DockerContainerStatus
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Test common docker commands.  */
end_comment

begin_class
DECL|class|TestDockerCommandExecutor
specifier|public
class|class
name|TestDockerCommandExecutor
block|{
DECL|field|MOCK_CONTAINER_ID
specifier|private
specifier|static
specifier|final
name|String
name|MOCK_CONTAINER_ID
init|=
literal|"container_id"
decl_stmt|;
DECL|field|MOCK_LOCAL_IMAGE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|MOCK_LOCAL_IMAGE_NAME
init|=
literal|"local_image_name"
decl_stmt|;
DECL|field|MOCK_IMAGE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|MOCK_IMAGE_NAME
init|=
literal|"image_name"
decl_stmt|;
DECL|field|mockExecutor
specifier|private
name|PrivilegedOperationExecutor
name|mockExecutor
decl_stmt|;
DECL|field|mockCGroupsHandler
specifier|private
name|CGroupsHandler
name|mockCGroupsHandler
decl_stmt|;
DECL|field|configuration
specifier|private
name|Configuration
name|configuration
decl_stmt|;
DECL|field|builder
specifier|private
name|ContainerRuntimeContext
operator|.
name|Builder
name|builder
decl_stmt|;
DECL|field|runtime
specifier|private
name|DockerLinuxContainerRuntime
name|runtime
decl_stmt|;
DECL|field|container
specifier|private
name|Container
name|container
decl_stmt|;
DECL|field|cId
specifier|private
name|ContainerId
name|cId
decl_stmt|;
DECL|field|context
specifier|private
name|ContainerLaunchContext
name|context
decl_stmt|;
DECL|field|env
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|mockExecutor
operator|=
name|mock
argument_list|(
name|PrivilegedOperationExecutor
operator|.
name|class
argument_list|)
expr_stmt|;
name|mockCGroupsHandler
operator|=
name|mock
argument_list|(
name|CGroupsHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|configuration
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|runtime
operator|=
operator|new
name|DockerLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
expr_stmt|;
name|container
operator|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
expr_stmt|;
name|cId
operator|=
name|mock
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
expr_stmt|;
name|context
operator|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|env
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|builder
operator|=
operator|new
name|ContainerRuntimeContext
operator|.
name|Builder
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|MOCK_CONTAINER_ID
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getLaunchContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getEnvironment
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setExecutionAttribute
argument_list|(
name|CONTAINER_ID_STR
argument_list|,
name|MOCK_CONTAINER_ID
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|TestDockerContainerRuntime
operator|.
name|enableMockContainerExecutor
argument_list|(
name|configuration
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExecuteDockerCommand ()
specifier|public
name|void
name|testExecuteDockerCommand
parameter_list|()
throws|throws
name|Exception
block|{
name|DockerStopCommand
name|dockerStopCommand
init|=
operator|new
name|DockerStopCommand
argument_list|(
name|MOCK_CONTAINER_ID
argument_list|)
decl_stmt|;
name|DockerCommandExecutor
operator|.
name|executeDockerCommand
argument_list|(
name|dockerStopCommand
argument_list|,
name|cId
operator|.
name|toString
argument_list|()
argument_list|,
name|env
argument_list|,
name|configuration
argument_list|,
name|mockExecutor
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|ops
init|=
name|MockPrivilegedOperationCaptor
operator|.
name|capturePrivilegedOperations
argument_list|(
name|mockExecutor
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|RUN_DOCKER_CMD
operator|.
name|name
argument_list|()
argument_list|,
name|ops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOperationType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExecuteDockerRm ()
specifier|public
name|void
name|testExecuteDockerRm
parameter_list|()
throws|throws
name|Exception
block|{
name|DockerRmCommand
name|dockerCommand
init|=
operator|new
name|DockerRmCommand
argument_list|(
name|MOCK_CONTAINER_ID
argument_list|)
decl_stmt|;
name|DockerCommandExecutor
operator|.
name|executeDockerCommand
argument_list|(
name|dockerCommand
argument_list|,
name|MOCK_CONTAINER_ID
argument_list|,
name|env
argument_list|,
name|configuration
argument_list|,
name|mockExecutor
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|ops
init|=
name|MockPrivilegedOperationCaptor
operator|.
name|capturePrivilegedOperations
argument_list|(
name|mockExecutor
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dockerCommands
init|=
name|getValidatedDockerCommands
argument_list|(
name|ops
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|RUN_DOCKER_CMD
operator|.
name|name
argument_list|()
argument_list|,
name|ops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOperationType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dockerCommands
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rm "
operator|+
name|MOCK_CONTAINER_ID
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExecuteDockerStop ()
specifier|public
name|void
name|testExecuteDockerStop
parameter_list|()
throws|throws
name|Exception
block|{
name|DockerStopCommand
name|dockerCommand
init|=
operator|new
name|DockerStopCommand
argument_list|(
name|MOCK_CONTAINER_ID
argument_list|)
decl_stmt|;
name|DockerCommandExecutor
operator|.
name|executeDockerCommand
argument_list|(
name|dockerCommand
argument_list|,
name|MOCK_CONTAINER_ID
argument_list|,
name|env
argument_list|,
name|configuration
argument_list|,
name|mockExecutor
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|ops
init|=
name|MockPrivilegedOperationCaptor
operator|.
name|capturePrivilegedOperations
argument_list|(
name|mockExecutor
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dockerCommands
init|=
name|getValidatedDockerCommands
argument_list|(
name|ops
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|RUN_DOCKER_CMD
operator|.
name|name
argument_list|()
argument_list|,
name|ops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOperationType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dockerCommands
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"stop "
operator|+
name|MOCK_CONTAINER_ID
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExecuteDockerInspectStatus ()
specifier|public
name|void
name|testExecuteDockerInspectStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|DockerInspectCommand
name|dockerCommand
init|=
operator|new
name|DockerInspectCommand
argument_list|(
name|MOCK_CONTAINER_ID
argument_list|)
operator|.
name|getContainerStatus
argument_list|()
decl_stmt|;
name|DockerCommandExecutor
operator|.
name|executeDockerCommand
argument_list|(
name|dockerCommand
argument_list|,
name|MOCK_CONTAINER_ID
argument_list|,
name|env
argument_list|,
name|configuration
argument_list|,
name|mockExecutor
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|ops
init|=
name|MockPrivilegedOperationCaptor
operator|.
name|capturePrivilegedOperations
argument_list|(
name|mockExecutor
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dockerCommands
init|=
name|getValidatedDockerCommands
argument_list|(
name|ops
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|RUN_DOCKER_CMD
operator|.
name|name
argument_list|()
argument_list|,
name|ops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOperationType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dockerCommands
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"inspect --format='{{.State.Status}}' "
operator|+
name|MOCK_CONTAINER_ID
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExecuteDockerPull ()
specifier|public
name|void
name|testExecuteDockerPull
parameter_list|()
throws|throws
name|Exception
block|{
name|DockerPullCommand
name|dockerCommand
init|=
operator|new
name|DockerPullCommand
argument_list|(
name|MOCK_IMAGE_NAME
argument_list|)
decl_stmt|;
name|DockerCommandExecutor
operator|.
name|executeDockerCommand
argument_list|(
name|dockerCommand
argument_list|,
name|MOCK_CONTAINER_ID
argument_list|,
name|env
argument_list|,
name|configuration
argument_list|,
name|mockExecutor
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|ops
init|=
name|MockPrivilegedOperationCaptor
operator|.
name|capturePrivilegedOperations
argument_list|(
name|mockExecutor
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dockerCommands
init|=
name|getValidatedDockerCommands
argument_list|(
name|ops
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|RUN_DOCKER_CMD
operator|.
name|name
argument_list|()
argument_list|,
name|ops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOperationType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dockerCommands
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pull "
operator|+
name|MOCK_IMAGE_NAME
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExecuteDockerLoad ()
specifier|public
name|void
name|testExecuteDockerLoad
parameter_list|()
throws|throws
name|Exception
block|{
name|DockerLoadCommand
name|dockerCommand
init|=
operator|new
name|DockerLoadCommand
argument_list|(
name|MOCK_LOCAL_IMAGE_NAME
argument_list|)
decl_stmt|;
name|DockerCommandExecutor
operator|.
name|executeDockerCommand
argument_list|(
name|dockerCommand
argument_list|,
name|MOCK_CONTAINER_ID
argument_list|,
name|env
argument_list|,
name|configuration
argument_list|,
name|mockExecutor
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|ops
init|=
name|MockPrivilegedOperationCaptor
operator|.
name|capturePrivilegedOperations
argument_list|(
name|mockExecutor
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dockerCommands
init|=
name|getValidatedDockerCommands
argument_list|(
name|ops
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|RUN_DOCKER_CMD
operator|.
name|name
argument_list|()
argument_list|,
name|ops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOperationType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dockerCommands
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"load --i="
operator|+
name|MOCK_LOCAL_IMAGE_NAME
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetContainerStatus ()
specifier|public
name|void
name|testGetContainerStatus
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|DockerContainerStatus
name|status
range|:
name|DockerContainerStatus
operator|.
name|values
argument_list|()
control|)
block|{
name|when
argument_list|(
name|mockExecutor
operator|.
name|executePrivilegedOperation
argument_list|(
name|eq
argument_list|(
literal|null
argument_list|)
argument_list|,
name|any
argument_list|(
name|PrivilegedOperation
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|null
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|,
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|status
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|status
argument_list|,
name|DockerCommandExecutor
operator|.
name|getContainerStatus
argument_list|(
name|MOCK_CONTAINER_ID
argument_list|,
name|configuration
argument_list|,
name|mockExecutor
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getValidatedDockerCommands ( List<PrivilegedOperation> ops)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getValidatedDockerCommands
parameter_list|(
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|ops
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|dockerCommands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PrivilegedOperation
name|op
range|:
name|ops
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|op
operator|.
name|getOperationType
argument_list|()
argument_list|,
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|RUN_DOCKER_CMD
argument_list|)
expr_stmt|;
name|String
name|dockerCommandFile
init|=
name|op
operator|.
name|getArguments
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dockerCommandFileContents
init|=
name|Files
operator|.
name|readAllLines
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|dockerCommandFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|dockerCommands
operator|.
name|addAll
argument_list|(
name|dockerCommandFileContents
argument_list|)
expr_stmt|;
block|}
return|return
name|dockerCommands
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to read the docker command file."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

