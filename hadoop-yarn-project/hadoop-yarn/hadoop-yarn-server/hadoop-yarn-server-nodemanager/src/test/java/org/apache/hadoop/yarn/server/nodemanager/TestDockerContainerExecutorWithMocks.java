begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|LineNumberReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|RETURNS_DEEP_STUBS
import|;
end_import

begin_comment
comment|/**  * Mock tests for docker container executor  */
end_comment

begin_class
DECL|class|TestDockerContainerExecutorWithMocks
specifier|public
class|class
name|TestDockerContainerExecutorWithMocks
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestDockerContainerExecutorWithMocks
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DOCKER_LAUNCH_COMMAND
specifier|public
specifier|static
specifier|final
name|String
name|DOCKER_LAUNCH_COMMAND
init|=
literal|"/bin/true"
decl_stmt|;
DECL|field|dockerContainerExecutor
specifier|private
name|DockerContainerExecutor
name|dockerContainerExecutor
init|=
literal|null
decl_stmt|;
DECL|field|dirsHandler
specifier|private
name|LocalDirsHandlerService
name|dirsHandler
decl_stmt|;
DECL|field|workDir
specifier|private
name|Path
name|workDir
decl_stmt|;
DECL|field|lfs
specifier|private
name|FileContext
name|lfs
decl_stmt|;
DECL|field|yarnImage
specifier|private
name|String
name|yarnImage
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|assumeTrue
argument_list|(
name|Shell
operator|.
name|LINUX
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"./src/test/resources/mock-container-executor"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|FileUtil
operator|.
name|canExecute
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|f
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|String
name|executorPath
init|=
name|f
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|yarnImage
operator|=
literal|"yarnImage"
expr_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LINUX_CONTAINER_EXECUTOR_PATH
argument_list|,
name|executorPath
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
literal|"/tmp/nm-local-dir"
operator|+
name|time
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
literal|"/tmp/userlogs"
operator|+
name|time
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_CONTAINER_EXECUTOR_IMAGE_NAME
argument_list|,
name|yarnImage
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_CONTAINER_EXECUTOR_EXEC_NAME
argument_list|,
name|DOCKER_LAUNCH_COMMAND
argument_list|)
expr_stmt|;
name|dockerContainerExecutor
operator|=
operator|new
name|DockerContainerExecutor
argument_list|()
expr_stmt|;
name|dirsHandler
operator|=
operator|new
name|LocalDirsHandlerService
argument_list|()
expr_stmt|;
name|dirsHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dockerContainerExecutor
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|lfs
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|lfs
operator|=
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
expr_stmt|;
name|workDir
operator|=
operator|new
name|Path
argument_list|(
literal|"/tmp/temp-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|mkdir
argument_list|(
name|workDir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|lfs
operator|!=
literal|null
condition|)
block|{
name|lfs
operator|.
name|delete
argument_list|(
name|workDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
DECL|method|testContainerInitSecure ()
specifier|public
name|void
name|testContainerInitSecure
parameter_list|()
throws|throws
name|IOException
block|{
name|dockerContainerExecutor
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|dockerContainerExecutor
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testContainerLaunchNullImage ()
specifier|public
name|void
name|testContainerLaunchNullImage
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|appSubmitter
init|=
literal|"nobody"
decl_stmt|;
name|String
name|appId
init|=
literal|"APP_ID"
decl_stmt|;
name|String
name|containerId
init|=
literal|"CONTAINER_ID"
decl_stmt|;
name|String
name|testImage
init|=
literal|""
decl_stmt|;
name|Container
name|container
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|,
name|RETURNS_DEEP_STUBS
argument_list|)
decl_stmt|;
name|ContainerId
name|cId
init|=
name|mock
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|,
name|RETURNS_DEEP_STUBS
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|context
init|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getLaunchContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getEnvironment
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_CONTAINER_EXECUTOR_IMAGE_NAME
argument_list|,
name|testImage
argument_list|)
expr_stmt|;
name|dockerContainerExecutor
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_CONTAINER_EXECUTOR_IMAGE_NAME
argument_list|,
name|testImage
argument_list|)
expr_stmt|;
name|Path
name|scriptPath
init|=
operator|new
name|Path
argument_list|(
literal|"file:///bin/echo"
argument_list|)
decl_stmt|;
name|Path
name|tokensPath
init|=
operator|new
name|Path
argument_list|(
literal|"file:///dev/null"
argument_list|)
decl_stmt|;
name|Path
name|pidFile
init|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"pid.txt"
argument_list|)
decl_stmt|;
name|dockerContainerExecutor
operator|.
name|activateContainer
argument_list|(
name|cId
argument_list|,
name|pidFile
argument_list|)
expr_stmt|;
name|dockerContainerExecutor
operator|.
name|launchContainer
argument_list|(
name|container
argument_list|,
name|scriptPath
argument_list|,
name|tokensPath
argument_list|,
name|appSubmitter
argument_list|,
name|appId
argument_list|,
name|workDir
argument_list|,
name|dirsHandler
operator|.
name|getLocalDirs
argument_list|()
argument_list|,
name|dirsHandler
operator|.
name|getLogDirs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testContainerLaunchInvalidImage ()
specifier|public
name|void
name|testContainerLaunchInvalidImage
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|appSubmitter
init|=
literal|"nobody"
decl_stmt|;
name|String
name|appId
init|=
literal|"APP_ID"
decl_stmt|;
name|String
name|containerId
init|=
literal|"CONTAINER_ID"
decl_stmt|;
name|String
name|testImage
init|=
literal|"testrepo.com/test-image rm -rf $HADOOP_PREFIX/*"
decl_stmt|;
name|Container
name|container
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|,
name|RETURNS_DEEP_STUBS
argument_list|)
decl_stmt|;
name|ContainerId
name|cId
init|=
name|mock
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|,
name|RETURNS_DEEP_STUBS
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|context
init|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getLaunchContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getEnvironment
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_CONTAINER_EXECUTOR_IMAGE_NAME
argument_list|,
name|testImage
argument_list|)
expr_stmt|;
name|dockerContainerExecutor
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_CONTAINER_EXECUTOR_IMAGE_NAME
argument_list|,
name|testImage
argument_list|)
expr_stmt|;
name|Path
name|scriptPath
init|=
operator|new
name|Path
argument_list|(
literal|"file:///bin/echo"
argument_list|)
decl_stmt|;
name|Path
name|tokensPath
init|=
operator|new
name|Path
argument_list|(
literal|"file:///dev/null"
argument_list|)
decl_stmt|;
name|Path
name|pidFile
init|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"pid.txt"
argument_list|)
decl_stmt|;
name|dockerContainerExecutor
operator|.
name|activateContainer
argument_list|(
name|cId
argument_list|,
name|pidFile
argument_list|)
expr_stmt|;
name|dockerContainerExecutor
operator|.
name|launchContainer
argument_list|(
name|container
argument_list|,
name|scriptPath
argument_list|,
name|tokensPath
argument_list|,
name|appSubmitter
argument_list|,
name|appId
argument_list|,
name|workDir
argument_list|,
name|dirsHandler
operator|.
name|getLocalDirs
argument_list|()
argument_list|,
name|dirsHandler
operator|.
name|getLogDirs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerLaunch ()
specifier|public
name|void
name|testContainerLaunch
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|appSubmitter
init|=
literal|"nobody"
decl_stmt|;
name|String
name|appId
init|=
literal|"APP_ID"
decl_stmt|;
name|String
name|containerId
init|=
literal|"CONTAINER_ID"
decl_stmt|;
name|String
name|testImage
init|=
literal|"\"sequenceiq/hadoop-docker:2.4.1\""
decl_stmt|;
name|Container
name|container
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|,
name|RETURNS_DEEP_STUBS
argument_list|)
decl_stmt|;
name|ContainerId
name|cId
init|=
name|mock
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|,
name|RETURNS_DEEP_STUBS
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|context
init|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getLaunchContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getEnvironment
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_CONTAINER_EXECUTOR_IMAGE_NAME
argument_list|,
name|testImage
argument_list|)
expr_stmt|;
name|Path
name|scriptPath
init|=
operator|new
name|Path
argument_list|(
literal|"file:///bin/echo"
argument_list|)
decl_stmt|;
name|Path
name|tokensPath
init|=
operator|new
name|Path
argument_list|(
literal|"file:///dev/null"
argument_list|)
decl_stmt|;
name|Path
name|pidFile
init|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"pid"
argument_list|)
decl_stmt|;
name|dockerContainerExecutor
operator|.
name|activateContainer
argument_list|(
name|cId
argument_list|,
name|pidFile
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|dockerContainerExecutor
operator|.
name|launchContainer
argument_list|(
name|container
argument_list|,
name|scriptPath
argument_list|,
name|tokensPath
argument_list|,
name|appSubmitter
argument_list|,
name|appId
argument_list|,
name|workDir
argument_list|,
name|dirsHandler
operator|.
name|getLocalDirs
argument_list|()
argument_list|,
name|dirsHandler
operator|.
name|getLogDirs
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
comment|//get the script
name|Path
name|sessionScriptPath
init|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
name|Shell
operator|.
name|appendScriptExtension
argument_list|(
name|DockerContainerExecutor
operator|.
name|DOCKER_CONTAINER_EXECUTOR_SESSION_SCRIPT
argument_list|)
argument_list|)
decl_stmt|;
name|LineNumberReader
name|lnr
init|=
operator|new
name|LineNumberReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|sessionScriptPath
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|cmdFound
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|localDirs
init|=
name|dirsToMount
argument_list|(
name|dirsHandler
operator|.
name|getLocalDirs
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|logDirs
init|=
name|dirsToMount
argument_list|(
name|dirsHandler
operator|.
name|getLogDirs
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|workDirMount
init|=
name|dirsToMount
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|workDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedCommands
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|DOCKER_LAUNCH_COMMAND
argument_list|,
literal|"run"
argument_list|,
literal|"--rm"
argument_list|,
literal|"--net=host"
argument_list|,
literal|"--name"
argument_list|,
name|containerId
argument_list|)
argument_list|)
decl_stmt|;
name|expectedCommands
operator|.
name|addAll
argument_list|(
name|localDirs
argument_list|)
expr_stmt|;
name|expectedCommands
operator|.
name|addAll
argument_list|(
name|logDirs
argument_list|)
expr_stmt|;
name|expectedCommands
operator|.
name|addAll
argument_list|(
name|workDirMount
argument_list|)
expr_stmt|;
name|String
name|shellScript
init|=
name|workDir
operator|+
literal|"/launch_container.sh"
decl_stmt|;
name|expectedCommands
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|testImage
operator|.
name|replaceAll
argument_list|(
literal|"['\"]"
argument_list|,
literal|""
argument_list|)
argument_list|,
literal|"bash"
argument_list|,
literal|"\""
operator|+
name|shellScript
operator|+
literal|"\""
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|expectedPidString
init|=
literal|"echo `/bin/true inspect --format {{.State.Pid}} "
operator|+
name|containerId
operator|+
literal|"`> "
operator|+
name|pidFile
operator|.
name|toString
argument_list|()
operator|+
literal|".tmp"
decl_stmt|;
name|boolean
name|pidSetterFound
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|lnr
operator|.
name|ready
argument_list|()
condition|)
block|{
name|String
name|line
init|=
name|lnr
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"line: "
operator|+
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
name|DOCKER_LAUNCH_COMMAND
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|command
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|line
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
control|)
block|{
name|command
operator|.
name|add
argument_list|(
name|s
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedCommands
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|cmdFound
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"echo"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|expectedPidString
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|pidSetterFound
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|cmdFound
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pidSetterFound
argument_list|)
expr_stmt|;
block|}
DECL|method|dirsToMount (List<String> dirs)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|dirsToMount
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|dirs
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|localDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dir
range|:
name|dirs
control|)
block|{
name|localDirs
operator|.
name|add
argument_list|(
literal|"-v"
argument_list|)
expr_stmt|;
name|localDirs
operator|.
name|add
argument_list|(
name|dir
operator|+
literal|":"
operator|+
name|dir
argument_list|)
expr_stmt|;
block|}
return|return
name|localDirs
return|;
block|}
block|}
end_class

end_unit

