begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.resources.numa
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|numa
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ResourceMappings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ResourceMappings
operator|.
name|AssignedResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test class for NumaResourceAllocator.  */
end_comment

begin_class
DECL|class|TestNumaResourceAllocator
specifier|public
class|class
name|TestNumaResourceAllocator
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|numaResourceAllocator
specifier|private
name|NumaResourceAllocator
name|numaResourceAllocator
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|Context
name|mockContext
init|=
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|ConcurrentHashMap
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
name|mockContainers
init|=
name|mock
argument_list|(
name|ConcurrentHashMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|Container
name|mockContainer
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContainer
operator|.
name|getResourceMappings
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ResourceMappings
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContainers
operator|.
name|get
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockContainer
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockContainers
argument_list|)
expr_stmt|;
name|NMStateStoreService
name|mock
init|=
name|mock
argument_list|(
name|NMStateStoreService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getNMStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|)
expr_stmt|;
name|numaResourceAllocator
operator|=
operator|new
name|NumaResourceAllocator
argument_list|(
name|mockContext
argument_list|)
expr_stmt|;
name|setNumaTopologyConfigs
argument_list|()
expr_stmt|;
name|numaResourceAllocator
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadNumaTopologyFromConfigurations ()
specifier|public
name|void
name|testReadNumaTopologyFromConfigurations
parameter_list|()
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|NumaNodeResource
argument_list|>
name|nodesList
init|=
name|numaResourceAllocator
operator|.
name|getNumaNodesList
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|NumaNodeResource
argument_list|>
name|expectedNodesList
init|=
name|getExpectedNumaNodesList
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedNodesList
argument_list|,
name|nodesList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadNumaTopologyFromCmdOutput ()
specifier|public
name|void
name|testReadNumaTopologyFromCmdOutput
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NUMA_AWARENESS_READ_TOPOLOGY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|cmdOutput
init|=
literal|"available: 2 nodes (0-1)\n\t"
operator|+
literal|"node 0 cpus: 0 2 4 6\n\t"
operator|+
literal|"node 0 size: 73717 MB\n\t"
operator|+
literal|"node 0 free: 17272 MB\n\t"
operator|+
literal|"node 1 cpus: 1 3 5 7\n\t"
operator|+
literal|"node 1 size: 73727 MB\n\t"
operator|+
literal|"node 1 free: 10699 MB\n\t"
operator|+
literal|"node distances:\n\t"
operator|+
literal|"node 0 1\n\t"
operator|+
literal|"0: 10 20\n\t"
operator|+
literal|"1: 20 10"
decl_stmt|;
name|numaResourceAllocator
operator|=
operator|new
name|NumaResourceAllocator
argument_list|(
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
name|String
name|executeNGetCmdOutput
parameter_list|(
name|Configuration
name|config
parameter_list|)
throws|throws
name|YarnRuntimeException
block|{
return|return
name|cmdOutput
return|;
block|}
block|}
expr_stmt|;
name|numaResourceAllocator
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|NumaNodeResource
argument_list|>
name|nodesList
init|=
name|numaResourceAllocator
operator|.
name|getNumaNodesList
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|NumaNodeResource
argument_list|>
name|expectedNodesList
init|=
name|getExpectedNumaNodesList
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedNodesList
argument_list|,
name|nodesList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocateNumaNode ()
specifier|public
name|void
name|testAllocateNumaNode
parameter_list|()
throws|throws
name|Exception
block|{
name|NumaResourceAllocation
name|nodeInfo
init|=
name|numaResourceAllocator
operator|.
name|allocateNumaNodes
argument_list|(
name|getContainer
argument_list|(
name|ContainerId
operator|.
name|fromString
argument_list|(
literal|"container_1481156246874_0001_01_000001"
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|nodeInfo
operator|.
name|getMemNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|nodeInfo
operator|.
name|getCpuNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocateNumaNodeWithRoundRobinFashionAssignment ()
specifier|public
name|void
name|testAllocateNumaNodeWithRoundRobinFashionAssignment
parameter_list|()
throws|throws
name|Exception
block|{
name|NumaResourceAllocation
name|nodeInfo1
init|=
name|numaResourceAllocator
operator|.
name|allocateNumaNodes
argument_list|(
name|getContainer
argument_list|(
name|ContainerId
operator|.
name|fromString
argument_list|(
literal|"container_1481156246874_0001_01_000001"
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|nodeInfo1
operator|.
name|getMemNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|nodeInfo1
operator|.
name|getCpuNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|NumaResourceAllocation
name|nodeInfo2
init|=
name|numaResourceAllocator
operator|.
name|allocateNumaNodes
argument_list|(
name|getContainer
argument_list|(
name|ContainerId
operator|.
name|fromString
argument_list|(
literal|"container_1481156246874_0001_01_000002"
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|nodeInfo2
operator|.
name|getMemNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|nodeInfo2
operator|.
name|getCpuNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|NumaResourceAllocation
name|nodeInfo3
init|=
name|numaResourceAllocator
operator|.
name|allocateNumaNodes
argument_list|(
name|getContainer
argument_list|(
name|ContainerId
operator|.
name|fromString
argument_list|(
literal|"container_1481156246874_0001_01_000003"
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|nodeInfo3
operator|.
name|getMemNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|nodeInfo3
operator|.
name|getCpuNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|NumaResourceAllocation
name|nodeInfo4
init|=
name|numaResourceAllocator
operator|.
name|allocateNumaNodes
argument_list|(
name|getContainer
argument_list|(
name|ContainerId
operator|.
name|fromString
argument_list|(
literal|"container_1481156246874_0001_01_000003"
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|nodeInfo4
operator|.
name|getMemNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|nodeInfo4
operator|.
name|getCpuNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocateNumaNodeWithMultipleNodesForMemory ()
specifier|public
name|void
name|testAllocateNumaNodeWithMultipleNodesForMemory
parameter_list|()
throws|throws
name|Exception
block|{
name|NumaResourceAllocation
name|nodeInfo
init|=
name|numaResourceAllocator
operator|.
name|allocateNumaNodes
argument_list|(
name|getContainer
argument_list|(
name|ContainerId
operator|.
name|fromString
argument_list|(
literal|"container_1481156246874_0001_01_000001"
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|102400
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0,1"
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|nodeInfo
operator|.
name|getMemNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|nodeInfo
operator|.
name|getCpuNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocateNumaNodeWithMultipleNodesForCpus ()
specifier|public
name|void
name|testAllocateNumaNodeWithMultipleNodesForCpus
parameter_list|()
throws|throws
name|Exception
block|{
name|NumaResourceAllocation
name|nodeInfo
init|=
name|numaResourceAllocator
operator|.
name|allocateNumaNodes
argument_list|(
name|getContainer
argument_list|(
name|ContainerId
operator|.
name|fromString
argument_list|(
literal|"container_1481156246874_0001_01_000001"
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|6
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|nodeInfo
operator|.
name|getMemNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0,1"
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|nodeInfo
operator|.
name|getCpuNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocateNumaNodeWhenNoNumaMemResourcesAvailable ()
specifier|public
name|void
name|testAllocateNumaNodeWhenNoNumaMemResourcesAvailable
parameter_list|()
throws|throws
name|Exception
block|{
name|NumaResourceAllocation
name|nodeInfo
init|=
name|numaResourceAllocator
operator|.
name|allocateNumaNodes
argument_list|(
name|getContainer
argument_list|(
name|ContainerId
operator|.
name|fromString
argument_list|(
literal|"container_1481156246874_0001_01_000001"
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048000
argument_list|,
literal|6
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Should not assign numa nodes when there"
operator|+
literal|" are no sufficient memory resources available."
argument_list|,
name|nodeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocateNumaNodeWhenNoNumaCpuResourcesAvailable ()
specifier|public
name|void
name|testAllocateNumaNodeWhenNoNumaCpuResourcesAvailable
parameter_list|()
throws|throws
name|Exception
block|{
name|NumaResourceAllocation
name|nodeInfo
init|=
name|numaResourceAllocator
operator|.
name|allocateNumaNodes
argument_list|(
name|getContainer
argument_list|(
name|ContainerId
operator|.
name|fromString
argument_list|(
literal|"container_1481156246874_0001_01_000001"
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|600
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Should not assign numa nodes when there"
operator|+
literal|" are no sufficient cpu resources available."
argument_list|,
name|nodeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReleaseNumaResourcess ()
specifier|public
name|void
name|testReleaseNumaResourcess
parameter_list|()
throws|throws
name|Exception
block|{
name|NumaResourceAllocation
name|nodeInfo
init|=
name|numaResourceAllocator
operator|.
name|allocateNumaNodes
argument_list|(
name|getContainer
argument_list|(
name|ContainerId
operator|.
name|fromString
argument_list|(
literal|"container_1481156246874_0001_01_000001"
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|8
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|nodeInfo
operator|.
name|getMemNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0,1"
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|nodeInfo
operator|.
name|getCpuNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Request the resource when all cpu nodes occupied
name|nodeInfo
operator|=
name|numaResourceAllocator
operator|.
name|allocateNumaNodes
argument_list|(
name|getContainer
argument_list|(
name|ContainerId
operator|.
name|fromString
argument_list|(
literal|"container_1481156246874_0001_01_000002"
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Should not assign numa nodes when there"
operator|+
literal|" are no sufficient cpu resources available."
argument_list|,
name|nodeInfo
argument_list|)
expr_stmt|;
comment|// Release the resources
name|numaResourceAllocator
operator|.
name|releaseNumaResource
argument_list|(
name|ContainerId
operator|.
name|fromString
argument_list|(
literal|"container_1481156246874_0001_01_000001"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Request the resources
name|nodeInfo
operator|=
name|numaResourceAllocator
operator|.
name|allocateNumaNodes
argument_list|(
name|getContainer
argument_list|(
name|ContainerId
operator|.
name|fromString
argument_list|(
literal|"container_1481156246874_0001_01_000003"
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|nodeInfo
operator|.
name|getMemNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|nodeInfo
operator|.
name|getCpuNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRecoverNumaResource ()
specifier|public
name|void
name|testRecoverNumaResource
parameter_list|()
throws|throws
name|Exception
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|ConcurrentHashMap
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
name|mockContainers
init|=
name|mock
argument_list|(
name|ConcurrentHashMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|Context
name|mockContext
init|=
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
decl_stmt|;
name|Container
name|mockContainer
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|ResourceMappings
name|value
init|=
operator|new
name|ResourceMappings
argument_list|()
decl_stmt|;
name|AssignedResources
name|assignedResources
init|=
operator|new
name|AssignedResources
argument_list|()
decl_stmt|;
name|assignedResources
operator|.
name|updateAssignedResources
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|NumaResourceAllocation
argument_list|(
literal|"0"
argument_list|,
literal|70000
argument_list|,
literal|"0"
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|value
operator|.
name|addAssignedResources
argument_list|(
literal|"numa"
argument_list|,
name|assignedResources
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContainer
operator|.
name|getResourceMappings
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContainers
operator|.
name|get
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockContainer
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockContainers
argument_list|)
expr_stmt|;
name|NMStateStoreService
name|mock
init|=
name|mock
argument_list|(
name|NMStateStoreService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getNMStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|)
expr_stmt|;
name|numaResourceAllocator
operator|=
operator|new
name|NumaResourceAllocator
argument_list|(
name|mockContext
argument_list|)
expr_stmt|;
name|numaResourceAllocator
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Recover the resources
name|numaResourceAllocator
operator|.
name|recoverNumaResource
argument_list|(
name|ContainerId
operator|.
name|fromString
argument_list|(
literal|"container_1481156246874_0001_01_000001"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Request resources based on the availability
name|NumaResourceAllocation
name|numaNode
init|=
name|numaResourceAllocator
operator|.
name|allocateNumaNodes
argument_list|(
name|getContainer
argument_list|(
name|ContainerId
operator|.
name|fromString
argument_list|(
literal|"container_1481156246874_0001_01_000005"
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|numaNode
operator|.
name|getMemNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|numaNode
operator|.
name|getCpuNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Request resources more than the available
name|numaNode
operator|=
name|numaResourceAllocator
operator|.
name|allocateNumaNodes
argument_list|(
name|getContainer
argument_list|(
name|ContainerId
operator|.
name|fromString
argument_list|(
literal|"container_1481156246874_0001_01_000006"
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|numaNode
argument_list|)
expr_stmt|;
block|}
DECL|method|setNumaTopologyConfigs ()
specifier|private
name|void
name|setNumaTopologyConfigs
parameter_list|()
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NUMA_AWARENESS_NODE_IDS
argument_list|,
literal|"0,1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.nodemanager.numa-awareness.0.memory"
argument_list|,
literal|"73717"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.nodemanager.numa-awareness.0.cpus"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.nodemanager.numa-awareness.1.memory"
argument_list|,
literal|"73727"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.nodemanager.numa-awareness.1.cpus"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
block|}
DECL|method|getExpectedNumaNodesList ()
specifier|private
name|Collection
argument_list|<
name|NumaNodeResource
argument_list|>
name|getExpectedNumaNodesList
parameter_list|()
block|{
name|Collection
argument_list|<
name|NumaNodeResource
argument_list|>
name|expectedNodesList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|expectedNodesList
operator|.
name|add
argument_list|(
operator|new
name|NumaNodeResource
argument_list|(
literal|"0"
argument_list|,
literal|73717
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|expectedNodesList
operator|.
name|add
argument_list|(
operator|new
name|NumaNodeResource
argument_list|(
literal|"1"
argument_list|,
literal|73727
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|expectedNodesList
return|;
block|}
DECL|method|getContainer (ContainerId containerId, Resource resource)
specifier|private
name|Container
name|getContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Resource
name|resource
parameter_list|)
block|{
name|Container
name|mockContainer
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContainer
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resource
argument_list|)
expr_stmt|;
return|return
name|mockContainer
return|;
block|}
block|}
end_class

end_unit

