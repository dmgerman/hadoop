begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.com.nvidia
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|com
operator|.
name|nvidia
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|Device
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|DeviceRuntimeSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|YarnRuntimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anySet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|reset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Test case for NvidiaGPUPluginForRuntimeV2 device plugin.  * */
end_comment

begin_class
DECL|class|TestNvidiaGPUPluginForRuntimeV2
specifier|public
class|class
name|TestNvidiaGPUPluginForRuntimeV2
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestNvidiaGPUPluginForRuntimeV2
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testGetNvidiaDevices ()
specifier|public
name|void
name|testGetNvidiaDevices
parameter_list|()
throws|throws
name|Exception
block|{
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|NvidiaCommandExecutor
name|mockShell
init|=
name|mock
argument_list|(
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|NvidiaCommandExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|deviceInfoShellOutput
init|=
literal|"0, 00000000:04:00.0\n"
operator|+
literal|"1, 00000000:82:00.0"
decl_stmt|;
name|String
name|majorMinorNumber0
init|=
literal|"c3:0"
decl_stmt|;
name|String
name|majorMinorNumber1
init|=
literal|"c3:1"
decl_stmt|;
name|when
argument_list|(
name|mockShell
operator|.
name|getDeviceInfo
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|deviceInfoShellOutput
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockShell
operator|.
name|getMajorMinorInfo
argument_list|(
literal|"nvidia0"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|majorMinorNumber0
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockShell
operator|.
name|getMajorMinorInfo
argument_list|(
literal|"nvidia1"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|majorMinorNumber1
argument_list|)
expr_stmt|;
name|NvidiaGPUPluginForRuntimeV2
name|plugin
init|=
operator|new
name|NvidiaGPUPluginForRuntimeV2
argument_list|()
decl_stmt|;
name|plugin
operator|.
name|setShellExecutor
argument_list|(
name|mockShell
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|setPathOfGpuBinary
argument_list|(
literal|"/fake/nvidia-smi"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Device
argument_list|>
name|expectedDevices
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedDevices
operator|.
name|add
argument_list|(
name|Device
operator|.
name|Builder
operator|.
name|newInstance
argument_list|()
operator|.
name|setId
argument_list|(
literal|0
argument_list|)
operator|.
name|setHealthy
argument_list|(
literal|true
argument_list|)
operator|.
name|setBusID
argument_list|(
literal|"00000000:04:00.0"
argument_list|)
operator|.
name|setDevPath
argument_list|(
literal|"/dev/nvidia0"
argument_list|)
operator|.
name|setMajorNumber
argument_list|(
literal|195
argument_list|)
operator|.
name|setMinorNumber
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|expectedDevices
operator|.
name|add
argument_list|(
name|Device
operator|.
name|Builder
operator|.
name|newInstance
argument_list|()
operator|.
name|setId
argument_list|(
literal|1
argument_list|)
operator|.
name|setHealthy
argument_list|(
literal|true
argument_list|)
operator|.
name|setBusID
argument_list|(
literal|"00000000:82:00.0"
argument_list|)
operator|.
name|setDevPath
argument_list|(
literal|"/dev/nvidia1"
argument_list|)
operator|.
name|setMajorNumber
argument_list|(
literal|195
argument_list|)
operator|.
name|setMinorNumber
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Device
argument_list|>
name|devices
init|=
name|plugin
operator|.
name|getDevices
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedDevices
argument_list|,
name|devices
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOnDeviceAllocated ()
specifier|public
name|void
name|testOnDeviceAllocated
parameter_list|()
throws|throws
name|Exception
block|{
name|NvidiaGPUPluginForRuntimeV2
name|plugin
init|=
operator|new
name|NvidiaGPUPluginForRuntimeV2
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Device
argument_list|>
name|allocatedDevices
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|DeviceRuntimeSpec
name|spec
init|=
name|plugin
operator|.
name|onDevicesAllocated
argument_list|(
name|allocatedDevices
argument_list|,
name|YarnRuntimeType
operator|.
name|RUNTIME_DEFAULT
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|spec
argument_list|)
expr_stmt|;
comment|// allocate one device
name|allocatedDevices
operator|.
name|add
argument_list|(
name|Device
operator|.
name|Builder
operator|.
name|newInstance
argument_list|()
operator|.
name|setId
argument_list|(
literal|0
argument_list|)
operator|.
name|setHealthy
argument_list|(
literal|true
argument_list|)
operator|.
name|setBusID
argument_list|(
literal|"00000000:04:00.0"
argument_list|)
operator|.
name|setDevPath
argument_list|(
literal|"/dev/nvidia0"
argument_list|)
operator|.
name|setMajorNumber
argument_list|(
literal|195
argument_list|)
operator|.
name|setMinorNumber
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|spec
operator|=
name|plugin
operator|.
name|onDevicesAllocated
argument_list|(
name|allocatedDevices
argument_list|,
name|YarnRuntimeType
operator|.
name|RUNTIME_DOCKER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"nvidia"
argument_list|,
name|spec
operator|.
name|getContainerRuntime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|spec
operator|.
name|getEnvs
argument_list|()
operator|.
name|get
argument_list|(
literal|"NVIDIA_VISIBLE_DEVICES"
argument_list|)
argument_list|)
expr_stmt|;
comment|// two device allowed
name|allocatedDevices
operator|.
name|add
argument_list|(
name|Device
operator|.
name|Builder
operator|.
name|newInstance
argument_list|()
operator|.
name|setId
argument_list|(
literal|0
argument_list|)
operator|.
name|setHealthy
argument_list|(
literal|true
argument_list|)
operator|.
name|setBusID
argument_list|(
literal|"00000000:82:00.0"
argument_list|)
operator|.
name|setDevPath
argument_list|(
literal|"/dev/nvidia1"
argument_list|)
operator|.
name|setMajorNumber
argument_list|(
literal|195
argument_list|)
operator|.
name|setMinorNumber
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|spec
operator|=
name|plugin
operator|.
name|onDevicesAllocated
argument_list|(
name|allocatedDevices
argument_list|,
name|YarnRuntimeType
operator|.
name|RUNTIME_DOCKER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"nvidia"
argument_list|,
name|spec
operator|.
name|getContainerRuntime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0,1"
argument_list|,
name|spec
operator|.
name|getEnvs
argument_list|()
operator|.
name|get
argument_list|(
literal|"NVIDIA_VISIBLE_DEVICES"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|mockEightGPUPlugin ()
specifier|private
name|NvidiaGPUPluginForRuntimeV2
name|mockEightGPUPlugin
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|topoInfo
init|=
literal|"\tGPU0\tGPU1\tGPU2\tGPU3\tGPU4\tGPU5\tGPU6\tGPU7\tCPU Affinity\n"
operator|+
literal|"GPU0\t X \tNV1\tNV1\tNV2\tNV2\tPHB\tPHB\tPHB\t0-63\n"
operator|+
literal|"GPU1\tNV1\t X \tNV2\tNV1\tPHB\tNV2\tPHB\tPHB\t0-63\n"
operator|+
literal|"GPU2\tNV1\tNV2\t X \tNV2\tPHB\tPHB\tNV1\tPHB\t0-63\n"
operator|+
literal|"GPU3\tNV2\tNV1\tNV2\t X \tPHB\tPHB\tPHB\tNV1\t0-63\n"
operator|+
literal|"GPU4\tNV2\tPHB\tPHB\tPHB\t X \tNV1\tNV1\tNV2\t0-63\n"
operator|+
literal|"GPU5\tPHB\tNV2\tPHB\tPHB\tNV1\t X \tNV2\tNV1\t0-63\n"
operator|+
literal|"GPU6\tPHB\tPHB\tNV1\tPHB\tNV1\tNV2\t X \tNV2\t0-63\n"
operator|+
literal|"GPU7\tPHB\tPHB\tPHB\tNV1\tNV2\tNV1\tNV2\t X \t0-63\n"
operator|+
literal|"\n"
operator|+
literal|"Legend:\n"
operator|+
literal|"\n"
operator|+
literal|"  X    = Self\n"
operator|+
literal|"  SYS  = Connection traversing PCIe as well as the SMP interconnect"
operator|+
literal|" between NUMA nodes (e.g., QPI/UPI)\n"
operator|+
literal|"  NODE = Connection traversing PCIe as well as the interconnect"
operator|+
literal|" between PCIe Host Bridges within a NUMA node\n"
operator|+
literal|"  PHB  = Connection traversing PCIe as well as a PCIe Host Bridge"
operator|+
literal|" (typically the CPU)\n"
operator|+
literal|"  PXB  = Connection traversing multiple PCIe switches"
operator|+
literal|" (without traversing the PCIe Host Bridge)\n"
operator|+
literal|"  PIX  = Connection traversing a single PCIe switch\n"
operator|+
literal|"  NV#  = Connection traversing a bonded set of # NVLinks\n"
decl_stmt|;
name|String
name|deviceInfoShellOutput
init|=
literal|"0, 00000000:04:00.0\n"
operator|+
literal|"1, 00000000:82:00.0\n"
operator|+
literal|"2, 00000000:83:00.0\n"
operator|+
literal|"3, 00000000:84:00.0\n"
operator|+
literal|"4, 00000000:85:00.0\n"
operator|+
literal|"5, 00000000:86:00.0\n"
operator|+
literal|"6, 00000000:87:00.0\n"
operator|+
literal|"7, 00000000:88:00.0"
decl_stmt|;
name|String
name|majorMinorNumber0
init|=
literal|"c3:0"
decl_stmt|;
name|String
name|majorMinorNumber1
init|=
literal|"c3:1"
decl_stmt|;
name|String
name|majorMinorNumber2
init|=
literal|"c3:2"
decl_stmt|;
name|String
name|majorMinorNumber3
init|=
literal|"c3:3"
decl_stmt|;
name|String
name|majorMinorNumber4
init|=
literal|"c3:4"
decl_stmt|;
name|String
name|majorMinorNumber5
init|=
literal|"c3:5"
decl_stmt|;
name|String
name|majorMinorNumber6
init|=
literal|"c3:6"
decl_stmt|;
name|String
name|majorMinorNumber7
init|=
literal|"c3:7"
decl_stmt|;
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|NvidiaCommandExecutor
name|mockShell
init|=
name|mock
argument_list|(
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|NvidiaCommandExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockShell
operator|.
name|getDeviceInfo
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|deviceInfoShellOutput
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockShell
operator|.
name|getMajorMinorInfo
argument_list|(
literal|"nvidia0"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|majorMinorNumber0
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockShell
operator|.
name|getMajorMinorInfo
argument_list|(
literal|"nvidia1"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|majorMinorNumber1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockShell
operator|.
name|getMajorMinorInfo
argument_list|(
literal|"nvidia2"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|majorMinorNumber2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockShell
operator|.
name|getMajorMinorInfo
argument_list|(
literal|"nvidia3"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|majorMinorNumber3
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockShell
operator|.
name|getMajorMinorInfo
argument_list|(
literal|"nvidia4"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|majorMinorNumber4
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockShell
operator|.
name|getMajorMinorInfo
argument_list|(
literal|"nvidia5"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|majorMinorNumber5
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockShell
operator|.
name|getMajorMinorInfo
argument_list|(
literal|"nvidia6"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|majorMinorNumber6
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockShell
operator|.
name|getMajorMinorInfo
argument_list|(
literal|"nvidia7"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|majorMinorNumber7
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockShell
operator|.
name|getTopologyInfo
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|topoInfo
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockShell
operator|.
name|getDeviceInfo
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|deviceInfoShellOutput
argument_list|)
expr_stmt|;
name|NvidiaGPUPluginForRuntimeV2
name|plugin
init|=
operator|new
name|NvidiaGPUPluginForRuntimeV2
argument_list|()
decl_stmt|;
name|plugin
operator|.
name|setShellExecutor
argument_list|(
name|mockShell
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|setPathOfGpuBinary
argument_list|(
literal|"/fake/nvidia-smi"
argument_list|)
expr_stmt|;
return|return
name|plugin
return|;
block|}
DECL|method|mockFourGPUPlugin ()
specifier|private
name|NvidiaGPUPluginForRuntimeV2
name|mockFourGPUPlugin
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|topoInfo
init|=
literal|"\tGPU0\tGPU1\tGPU2\tGPU3\tCPU Affinity\n"
operator|+
literal|"GPU0\t X \tPHB\tSOC\tSOC\t0-31\n"
operator|+
literal|"GPU1\tPHB\t X \tSOC\tSOC\t0-31\n"
operator|+
literal|"GPU2\tSOC\tSOC\t X \tPHB\t0-31\n"
operator|+
literal|"GPU3\tSOC\tSOC\tPHB\t X \t0-31\n"
operator|+
literal|"\n"
operator|+
literal|"\n"
operator|+
literal|" Legend:\n"
operator|+
literal|"\n"
operator|+
literal|" X   = Self\n"
operator|+
literal|" SOC  = Connection traversing PCIe as well as the SMP link between\n"
operator|+
literal|" CPU sockets(e.g. QPI)\n"
operator|+
literal|" PHB  = Connection traversing PCIe as well as a PCIe Host Bridge\n"
operator|+
literal|" (typically the CPU)\n"
operator|+
literal|" PXB  = Connection traversing multiple PCIe switches\n"
operator|+
literal|" (without traversing the PCIe Host Bridge)\n"
operator|+
literal|" PIX  = Connection traversing a single PCIe switch\n"
operator|+
literal|" NV#  = Connection traversing a bonded set of # NVLinks"
decl_stmt|;
name|String
name|deviceInfoShellOutput
init|=
literal|"0, 00000000:04:00.0\n"
operator|+
literal|"1, 00000000:82:00.0\n"
operator|+
literal|"2, 00000000:83:00.0\n"
operator|+
literal|"3, 00000000:84:00.0"
decl_stmt|;
name|String
name|majorMinorNumber0
init|=
literal|"c3:0"
decl_stmt|;
name|String
name|majorMinorNumber1
init|=
literal|"c3:1"
decl_stmt|;
name|String
name|majorMinorNumber2
init|=
literal|"c3:2"
decl_stmt|;
name|String
name|majorMinorNumber3
init|=
literal|"c3:3"
decl_stmt|;
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|NvidiaCommandExecutor
name|mockShell
init|=
name|mock
argument_list|(
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|NvidiaCommandExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockShell
operator|.
name|getDeviceInfo
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|deviceInfoShellOutput
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockShell
operator|.
name|getMajorMinorInfo
argument_list|(
literal|"nvidia0"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|majorMinorNumber0
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockShell
operator|.
name|getMajorMinorInfo
argument_list|(
literal|"nvidia1"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|majorMinorNumber1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockShell
operator|.
name|getMajorMinorInfo
argument_list|(
literal|"nvidia2"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|majorMinorNumber2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockShell
operator|.
name|getMajorMinorInfo
argument_list|(
literal|"nvidia3"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|majorMinorNumber3
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockShell
operator|.
name|getTopologyInfo
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|topoInfo
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockShell
operator|.
name|getDeviceInfo
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|deviceInfoShellOutput
argument_list|)
expr_stmt|;
name|NvidiaGPUPluginForRuntimeV2
name|plugin
init|=
operator|new
name|NvidiaGPUPluginForRuntimeV2
argument_list|()
decl_stmt|;
name|plugin
operator|.
name|setShellExecutor
argument_list|(
name|mockShell
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|setPathOfGpuBinary
argument_list|(
literal|"/fake/nvidia-smi"
argument_list|)
expr_stmt|;
return|return
name|plugin
return|;
block|}
annotation|@
name|Test
DECL|method|testTopologySchedulingWithPackPolicy ()
specifier|public
name|void
name|testTopologySchedulingWithPackPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|NvidiaGPUPluginForRuntimeV2
name|plugin
init|=
name|mockFourGPUPlugin
argument_list|()
decl_stmt|;
name|NvidiaGPUPluginForRuntimeV2
name|spyPlugin
init|=
name|spy
argument_list|(
name|plugin
argument_list|)
decl_stmt|;
comment|// cache the total devices
name|Set
argument_list|<
name|Device
argument_list|>
name|allDevices
init|=
name|spyPlugin
operator|.
name|getDevices
argument_list|()
decl_stmt|;
comment|// environment variable to use PACK policy
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|TOPOLOGY_POLICY_ENV_KEY
argument_list|,
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|TOPOLOGY_POLICY_PACK
argument_list|)
expr_stmt|;
comment|// Case 0. if available devices is less than 3, no topo scheduling needed
name|Set
argument_list|<
name|Device
argument_list|>
name|copyAvailableDevices
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|allDevices
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Device
argument_list|>
name|iterator0
init|=
name|copyAvailableDevices
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|iterator0
operator|.
name|next
argument_list|()
expr_stmt|;
name|iterator0
operator|.
name|remove
argument_list|()
expr_stmt|;
name|iterator0
operator|.
name|next
argument_list|()
expr_stmt|;
name|iterator0
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|// Case 0. allocate 1 device
name|reset
argument_list|(
name|spyPlugin
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Device
argument_list|>
name|allocation
init|=
name|spyPlugin
operator|.
name|allocateDevices
argument_list|(
name|copyAvailableDevices
argument_list|,
literal|1
argument_list|,
name|env
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|allocation
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spyPlugin
argument_list|)
operator|.
name|basicSchedule
argument_list|(
name|anySet
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anySet
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|spyPlugin
operator|.
name|isTopoInitialized
argument_list|()
argument_list|)
expr_stmt|;
comment|// Case 1. allocate 1 device
name|reset
argument_list|(
name|spyPlugin
argument_list|)
expr_stmt|;
name|allocation
operator|=
name|spyPlugin
operator|.
name|allocateDevices
argument_list|(
name|allDevices
argument_list|,
literal|1
argument_list|,
name|env
argument_list|)
expr_stmt|;
comment|// ensure no topology scheduling needed
name|assertThat
argument_list|(
name|allocation
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spyPlugin
argument_list|)
operator|.
name|basicSchedule
argument_list|(
name|anySet
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anySet
argument_list|()
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|spyPlugin
argument_list|)
expr_stmt|;
comment|// Case 2. allocate all available
name|allocation
operator|=
name|spyPlugin
operator|.
name|allocateDevices
argument_list|(
name|allDevices
argument_list|,
name|allDevices
operator|.
name|size
argument_list|()
argument_list|,
name|env
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|allocation
operator|.
name|size
argument_list|()
argument_list|,
name|allDevices
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spyPlugin
argument_list|)
operator|.
name|basicSchedule
argument_list|(
name|anySet
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anySet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Case 3. allocate 2 devices
name|reset
argument_list|(
name|spyPlugin
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|2
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|pairToWeight
init|=
name|spyPlugin
operator|.
name|getDevicePairToWeight
argument_list|()
decl_stmt|;
name|allocation
operator|=
name|spyPlugin
operator|.
name|allocateDevices
argument_list|(
name|allDevices
argument_list|,
name|count
argument_list|,
name|env
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
argument_list|)
operator|.
name|hasSize
argument_list|(
name|count
argument_list|)
expr_stmt|;
comment|// the costTable should be init and used topology scheduling
name|verify
argument_list|(
name|spyPlugin
argument_list|)
operator|.
name|initCostTable
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|spyPlugin
operator|.
name|isTopoInitialized
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spyPlugin
argument_list|)
operator|.
name|topologyAwareSchedule
argument_list|(
name|anySet
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyMap
argument_list|()
argument_list|,
name|anySet
argument_list|()
argument_list|,
name|anyMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
argument_list|)
operator|.
name|hasSize
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|Device
index|[]
name|allocatedDevices
init|=
name|allocation
operator|.
name|toArray
argument_list|(
operator|new
name|Device
index|[
name|count
index|]
argument_list|)
decl_stmt|;
comment|// Check weights
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|DeviceLinkType
operator|.
name|P2PLinkSameCPUSocket
operator|.
name|getWeight
argument_list|()
argument_list|,
name|spyPlugin
operator|.
name|computeCostOfDevices
argument_list|(
name|allocatedDevices
argument_list|)
argument_list|)
expr_stmt|;
comment|// Case 4. allocate 3 devices
name|reset
argument_list|(
name|spyPlugin
argument_list|)
expr_stmt|;
name|count
operator|=
literal|3
expr_stmt|;
name|allocation
operator|=
name|spyPlugin
operator|.
name|allocateDevices
argument_list|(
name|allDevices
argument_list|,
name|count
argument_list|,
name|env
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
argument_list|)
operator|.
name|hasSize
argument_list|(
name|count
argument_list|)
expr_stmt|;
comment|// the costTable should be init and used topology scheduling
name|verify
argument_list|(
name|spyPlugin
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|initCostTable
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|spyPlugin
operator|.
name|isTopoInitialized
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spyPlugin
argument_list|)
operator|.
name|topologyAwareSchedule
argument_list|(
name|anySet
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyMap
argument_list|()
argument_list|,
name|anySet
argument_list|()
argument_list|,
name|anyMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
argument_list|)
operator|.
name|hasSize
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|allocatedDevices
operator|=
name|allocation
operator|.
name|toArray
argument_list|(
operator|new
name|Device
index|[
name|count
index|]
argument_list|)
expr_stmt|;
comment|// check weights
name|int
name|expectedWeight
init|=
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|DeviceLinkType
operator|.
name|P2PLinkSameCPUSocket
operator|.
name|getWeight
argument_list|()
operator|+
literal|2
operator|*
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|DeviceLinkType
operator|.
name|P2PLinkCrossCPUSocket
operator|.
name|getWeight
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedWeight
argument_list|,
name|spyPlugin
operator|.
name|computeCostOfDevices
argument_list|(
name|allocatedDevices
argument_list|)
argument_list|)
expr_stmt|;
comment|// Case 5. allocate 2 GPUs from three available devices
name|reset
argument_list|(
name|spyPlugin
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Device
argument_list|>
name|iterator
init|=
name|allDevices
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// remove GPU0
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|count
operator|=
literal|2
expr_stmt|;
name|allocation
operator|=
name|spyPlugin
operator|.
name|allocateDevices
argument_list|(
name|allDevices
argument_list|,
name|count
argument_list|,
name|env
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
argument_list|)
operator|.
name|hasSize
argument_list|(
name|count
argument_list|)
expr_stmt|;
comment|// the costTable should be init and used topology scheduling
name|verify
argument_list|(
name|spyPlugin
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|initCostTable
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|spyPlugin
operator|.
name|isTopoInitialized
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spyPlugin
argument_list|)
operator|.
name|topologyAwareSchedule
argument_list|(
name|anySet
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyMap
argument_list|()
argument_list|,
name|anySet
argument_list|()
argument_list|,
name|anyMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
argument_list|)
operator|.
name|hasSize
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|allocatedDevices
operator|=
name|allocation
operator|.
name|toArray
argument_list|(
operator|new
name|Device
index|[
name|count
index|]
argument_list|)
expr_stmt|;
comment|// check weights
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|DeviceLinkType
operator|.
name|P2PLinkSameCPUSocket
operator|.
name|getWeight
argument_list|()
argument_list|,
name|spyPlugin
operator|.
name|computeCostOfDevices
argument_list|(
name|allocatedDevices
argument_list|)
argument_list|)
expr_stmt|;
comment|// it should allocate GPU 2 and 3
for|for
control|(
name|Device
name|device
range|:
name|allocation
control|)
block|{
if|if
condition|(
name|device
operator|.
name|getMinorNumber
argument_list|()
operator|==
literal|2
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|device
operator|.
name|getMinorNumber
argument_list|()
operator|==
literal|3
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should allocate GPU 2 and 3"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testTopologySchedulingWithSpreadPolicy ()
specifier|public
name|void
name|testTopologySchedulingWithSpreadPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|NvidiaGPUPluginForRuntimeV2
name|plugin
init|=
name|mockFourGPUPlugin
argument_list|()
decl_stmt|;
name|NvidiaGPUPluginForRuntimeV2
name|spyPlugin
init|=
name|spy
argument_list|(
name|plugin
argument_list|)
decl_stmt|;
comment|// cache the total devices
name|Set
argument_list|<
name|Device
argument_list|>
name|allDevices
init|=
name|spyPlugin
operator|.
name|getDevices
argument_list|()
decl_stmt|;
comment|// environment variable to use PACK policy
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|TOPOLOGY_POLICY_ENV_KEY
argument_list|,
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|TOPOLOGY_POLICY_SPREAD
argument_list|)
expr_stmt|;
comment|// Case 1. allocate 1 device
name|Set
argument_list|<
name|Device
argument_list|>
name|allocation
init|=
name|spyPlugin
operator|.
name|allocateDevices
argument_list|(
name|allDevices
argument_list|,
literal|1
argument_list|,
name|env
argument_list|)
decl_stmt|;
comment|// ensure no topology scheduling needed
name|Assert
operator|.
name|assertEquals
argument_list|(
name|allocation
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spyPlugin
argument_list|)
operator|.
name|basicSchedule
argument_list|(
name|anySet
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anySet
argument_list|()
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|spyPlugin
argument_list|)
expr_stmt|;
comment|// Case 2. allocate all available
name|allocation
operator|=
name|spyPlugin
operator|.
name|allocateDevices
argument_list|(
name|allDevices
argument_list|,
name|allDevices
operator|.
name|size
argument_list|()
argument_list|,
name|env
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|allocation
operator|.
name|size
argument_list|()
argument_list|,
name|allDevices
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spyPlugin
argument_list|)
operator|.
name|basicSchedule
argument_list|(
name|anySet
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anySet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Case 3. allocate 2 devices
name|reset
argument_list|(
name|spyPlugin
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|2
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|pairToWeight
init|=
name|spyPlugin
operator|.
name|getDevicePairToWeight
argument_list|()
decl_stmt|;
name|allocation
operator|=
name|spyPlugin
operator|.
name|allocateDevices
argument_list|(
name|allDevices
argument_list|,
name|count
argument_list|,
name|env
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
argument_list|)
operator|.
name|hasSize
argument_list|(
name|count
argument_list|)
expr_stmt|;
comment|// the costTable should be init and used topology scheduling
name|verify
argument_list|(
name|spyPlugin
argument_list|)
operator|.
name|initCostTable
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|spyPlugin
operator|.
name|isTopoInitialized
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spyPlugin
argument_list|)
operator|.
name|topologyAwareSchedule
argument_list|(
name|anySet
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyMap
argument_list|()
argument_list|,
name|anySet
argument_list|()
argument_list|,
name|anyMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
argument_list|)
operator|.
name|hasSize
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|Device
index|[]
name|allocatedDevices
init|=
name|allocation
operator|.
name|toArray
argument_list|(
operator|new
name|Device
index|[
name|count
index|]
argument_list|)
decl_stmt|;
comment|// Check weights
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|DeviceLinkType
operator|.
name|P2PLinkCrossCPUSocket
operator|.
name|getWeight
argument_list|()
argument_list|,
name|spyPlugin
operator|.
name|computeCostOfDevices
argument_list|(
name|allocatedDevices
argument_list|)
argument_list|)
expr_stmt|;
comment|// Case 4. allocate 3 devices
name|reset
argument_list|(
name|spyPlugin
argument_list|)
expr_stmt|;
name|count
operator|=
literal|3
expr_stmt|;
name|allocation
operator|=
name|spyPlugin
operator|.
name|allocateDevices
argument_list|(
name|allDevices
argument_list|,
name|count
argument_list|,
name|env
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
argument_list|)
operator|.
name|hasSize
argument_list|(
name|count
argument_list|)
expr_stmt|;
comment|// the costTable should be init and used topology scheduling
name|verify
argument_list|(
name|spyPlugin
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|initCostTable
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|spyPlugin
operator|.
name|isTopoInitialized
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spyPlugin
argument_list|)
operator|.
name|topologyAwareSchedule
argument_list|(
name|anySet
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyMap
argument_list|()
argument_list|,
name|anySet
argument_list|()
argument_list|,
name|anyMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
argument_list|)
operator|.
name|hasSize
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|allocatedDevices
operator|=
name|allocation
operator|.
name|toArray
argument_list|(
operator|new
name|Device
index|[
name|count
index|]
argument_list|)
expr_stmt|;
comment|// check weights
name|int
name|expectedWeight
init|=
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|DeviceLinkType
operator|.
name|P2PLinkSameCPUSocket
operator|.
name|getWeight
argument_list|()
operator|+
literal|2
operator|*
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|DeviceLinkType
operator|.
name|P2PLinkCrossCPUSocket
operator|.
name|getWeight
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedWeight
argument_list|,
name|spyPlugin
operator|.
name|computeCostOfDevices
argument_list|(
name|allocatedDevices
argument_list|)
argument_list|)
expr_stmt|;
comment|// Case 5. allocate 2 GPUs from three available devices
name|reset
argument_list|(
name|spyPlugin
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Device
argument_list|>
name|iterator
init|=
name|allDevices
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// remove GPU0
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|count
operator|=
literal|2
expr_stmt|;
name|allocation
operator|=
name|spyPlugin
operator|.
name|allocateDevices
argument_list|(
name|allDevices
argument_list|,
name|count
argument_list|,
name|env
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
argument_list|)
operator|.
name|hasSize
argument_list|(
name|count
argument_list|)
expr_stmt|;
comment|// the costTable should be init and used topology scheduling
name|verify
argument_list|(
name|spyPlugin
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|initCostTable
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|spyPlugin
operator|.
name|isTopoInitialized
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spyPlugin
argument_list|)
operator|.
name|topologyAwareSchedule
argument_list|(
name|anySet
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyMap
argument_list|()
argument_list|,
name|anySet
argument_list|()
argument_list|,
name|anyMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocation
argument_list|)
operator|.
name|hasSize
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|allocatedDevices
operator|=
name|allocation
operator|.
name|toArray
argument_list|(
operator|new
name|Device
index|[
name|count
index|]
argument_list|)
expr_stmt|;
comment|// check weights
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|DeviceLinkType
operator|.
name|P2PLinkCrossCPUSocket
operator|.
name|getWeight
argument_list|()
argument_list|,
name|spyPlugin
operator|.
name|computeCostOfDevices
argument_list|(
name|allocatedDevices
argument_list|)
argument_list|)
expr_stmt|;
comment|// it should allocate GPU 1 and 2
for|for
control|(
name|Device
name|device
range|:
name|allocation
control|)
block|{
if|if
condition|(
name|device
operator|.
name|getMinorNumber
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Shouldn't allocate GPU 0"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testCostTableWithNVlink ()
specifier|public
name|void
name|testCostTableWithNVlink
parameter_list|()
throws|throws
name|Exception
block|{
name|NvidiaGPUPluginForRuntimeV2
name|plugin
init|=
name|mockEightGPUPlugin
argument_list|()
decl_stmt|;
name|NvidiaGPUPluginForRuntimeV2
name|spyPlugin
init|=
name|spy
argument_list|(
name|plugin
argument_list|)
decl_stmt|;
comment|// verify the device pair to weight map
name|spyPlugin
operator|.
name|initCostTable
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|devicePairToWeight
init|=
name|spyPlugin
operator|.
name|getDevicePairToWeight
argument_list|()
decl_stmt|;
comment|// 12 combinations when choose 2 GPUs from 8 respect the order. 8!/6!
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|56
argument_list|,
name|devicePairToWeight
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|sameCPUWeight
init|=
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|DeviceLinkType
operator|.
name|P2PLinkSameCPUSocket
operator|.
name|getWeight
argument_list|()
decl_stmt|;
name|int
name|nv1Weight
init|=
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|DeviceLinkType
operator|.
name|P2PLinkNVLink1
operator|.
name|getWeight
argument_list|()
decl_stmt|;
name|int
name|nv2Weight
init|=
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|DeviceLinkType
operator|.
name|P2PLinkNVLink2
operator|.
name|getWeight
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nv1Weight
argument_list|,
operator|(
name|int
operator|)
name|devicePairToWeight
operator|.
name|get
argument_list|(
literal|"0-1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nv1Weight
argument_list|,
operator|(
name|int
operator|)
name|devicePairToWeight
operator|.
name|get
argument_list|(
literal|"1-0"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nv2Weight
argument_list|,
operator|(
name|int
operator|)
name|devicePairToWeight
operator|.
name|get
argument_list|(
literal|"0-4"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nv2Weight
argument_list|,
operator|(
name|int
operator|)
name|devicePairToWeight
operator|.
name|get
argument_list|(
literal|"4-0"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nv2Weight
argument_list|,
operator|(
name|int
operator|)
name|devicePairToWeight
operator|.
name|get
argument_list|(
literal|"0-3"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nv2Weight
argument_list|,
operator|(
name|int
operator|)
name|devicePairToWeight
operator|.
name|get
argument_list|(
literal|"3-0"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sameCPUWeight
argument_list|,
operator|(
name|int
operator|)
name|devicePairToWeight
operator|.
name|get
argument_list|(
literal|"6-3"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sameCPUWeight
argument_list|,
operator|(
name|int
operator|)
name|devicePairToWeight
operator|.
name|get
argument_list|(
literal|"3-6"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nv2Weight
argument_list|,
operator|(
name|int
operator|)
name|devicePairToWeight
operator|.
name|get
argument_list|(
literal|"6-7"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nv2Weight
argument_list|,
operator|(
name|int
operator|)
name|devicePairToWeight
operator|.
name|get
argument_list|(
literal|"7-6"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nv1Weight
argument_list|,
operator|(
name|int
operator|)
name|devicePairToWeight
operator|.
name|get
argument_list|(
literal|"1-3"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nv1Weight
argument_list|,
operator|(
name|int
operator|)
name|devicePairToWeight
operator|.
name|get
argument_list|(
literal|"3-1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify cost Table
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Set
argument_list|<
name|Device
argument_list|>
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|costTable
init|=
name|spyPlugin
operator|.
name|getCostTable
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|costTable
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// C8:2 = 8!/2!/6! = 28
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|28
argument_list|,
name|costTable
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// C8:4 = 8!/4!/4! = 70
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|70
argument_list|,
name|costTable
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|costTable
operator|.
name|get
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Device
argument_list|>
name|allDevices
init|=
name|spyPlugin
operator|.
name|getDevices
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|TOPOLOGY_POLICY_ENV_KEY
argument_list|,
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|TOPOLOGY_POLICY_PACK
argument_list|)
expr_stmt|;
name|spyPlugin
operator|.
name|allocateDevices
argument_list|(
name|allDevices
argument_list|,
literal|3
argument_list|,
name|env
argument_list|)
expr_stmt|;
name|spyPlugin
operator|.
name|allocateDevices
argument_list|(
name|allDevices
argument_list|,
literal|2
argument_list|,
name|env
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the key cost table used for topology scheduling.    * */
annotation|@
name|Test
DECL|method|testCostTable ()
specifier|public
name|void
name|testCostTable
parameter_list|()
throws|throws
name|IOException
block|{
name|NvidiaGPUPluginForRuntimeV2
name|plugin
init|=
name|mockFourGPUPlugin
argument_list|()
decl_stmt|;
name|NvidiaGPUPluginForRuntimeV2
name|spyPlugin
init|=
name|spy
argument_list|(
name|plugin
argument_list|)
decl_stmt|;
comment|// verify the device pair to weight map
name|spyPlugin
operator|.
name|initCostTable
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|devicePairToWeight
init|=
name|spyPlugin
operator|.
name|getDevicePairToWeight
argument_list|()
decl_stmt|;
comment|// 12 combinations when choose 2 GPUs from 4 respect the order. 4!/2!
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|devicePairToWeight
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|sameCPUWeight
init|=
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|DeviceLinkType
operator|.
name|P2PLinkSameCPUSocket
operator|.
name|getWeight
argument_list|()
decl_stmt|;
name|int
name|crossCPUWeight
init|=
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|DeviceLinkType
operator|.
name|P2PLinkCrossCPUSocket
operator|.
name|getWeight
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sameCPUWeight
argument_list|,
operator|(
name|int
operator|)
name|devicePairToWeight
operator|.
name|get
argument_list|(
literal|"0-1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sameCPUWeight
argument_list|,
operator|(
name|int
operator|)
name|devicePairToWeight
operator|.
name|get
argument_list|(
literal|"1-0"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|crossCPUWeight
argument_list|,
operator|(
name|int
operator|)
name|devicePairToWeight
operator|.
name|get
argument_list|(
literal|"0-2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|crossCPUWeight
argument_list|,
operator|(
name|int
operator|)
name|devicePairToWeight
operator|.
name|get
argument_list|(
literal|"2-0"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|crossCPUWeight
argument_list|,
operator|(
name|int
operator|)
name|devicePairToWeight
operator|.
name|get
argument_list|(
literal|"0-3"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|crossCPUWeight
argument_list|,
operator|(
name|int
operator|)
name|devicePairToWeight
operator|.
name|get
argument_list|(
literal|"3-0"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|crossCPUWeight
argument_list|,
operator|(
name|int
operator|)
name|devicePairToWeight
operator|.
name|get
argument_list|(
literal|"1-2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|crossCPUWeight
argument_list|,
operator|(
name|int
operator|)
name|devicePairToWeight
operator|.
name|get
argument_list|(
literal|"2-1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|crossCPUWeight
argument_list|,
operator|(
name|int
operator|)
name|devicePairToWeight
operator|.
name|get
argument_list|(
literal|"1-3"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|crossCPUWeight
argument_list|,
operator|(
name|int
operator|)
name|devicePairToWeight
operator|.
name|get
argument_list|(
literal|"3-1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sameCPUWeight
argument_list|,
operator|(
name|int
operator|)
name|devicePairToWeight
operator|.
name|get
argument_list|(
literal|"2-3"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sameCPUWeight
argument_list|,
operator|(
name|int
operator|)
name|devicePairToWeight
operator|.
name|get
argument_list|(
literal|"3-2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify cost Table
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Set
argument_list|<
name|Device
argument_list|>
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|costTable
init|=
name|spyPlugin
operator|.
name|getCostTable
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|costTable
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|costTable
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|costTable
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|costTable
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test GPU topology allocation.    * And analysis the GPU allocation's performance against the actual    * performance data using tensorflow benchmarks.    * https://github.com/tensorflow/benchmarks    * */
annotation|@
name|Test
DECL|method|testTopologySchedulingPerformanceWithPackPolicyWithNVLink ()
specifier|public
name|void
name|testTopologySchedulingPerformanceWithPackPolicyWithNVLink
parameter_list|()
throws|throws
name|Exception
block|{
name|NvidiaGPUPluginForRuntimeV2
name|plugin
init|=
name|mockEightGPUPlugin
argument_list|()
decl_stmt|;
name|NvidiaGPUPluginForRuntimeV2
name|spyPlugin
init|=
name|spy
argument_list|(
name|plugin
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Device
argument_list|>
name|allDevices
init|=
name|spyPlugin
operator|.
name|getDevices
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|TOPOLOGY_POLICY_ENV_KEY
argument_list|,
name|NvidiaGPUPluginForRuntimeV2
operator|.
name|TOPOLOGY_POLICY_PACK
argument_list|)
expr_stmt|;
comment|/**      * Analyze performance against the real data.      * Get the topology scheduling algorithm's allocation's      * average performance boost against median imagePerSecond and minimum      * imagePerSecond in certain model and batch size combinations.      * And then calculate the average performance boost.      * The average performance boost against      * median value means topology scheduler's allocation can stably      * outperforms 50% of possible allocations.      * The average performance boost against min value means the average boost      * comparing to the worst allocations in various scenarios. Which is more      * beautiful number for public promotion.      * And also the analysis shows the best performance boost against median      * and min value.      * */
name|ActualPerformanceReport
name|report
init|=
operator|new
name|ActualPerformanceReport
argument_list|()
decl_stmt|;
name|report
operator|.
name|readFromFile
argument_list|()
expr_stmt|;
name|ArrayList
argument_list|<
name|ActualPerformanceReport
operator|.
name|DataRecord
argument_list|>
name|dataSet
init|=
name|report
operator|.
name|getDataSet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|dataSet
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2952
argument_list|)
expr_stmt|;
name|String
index|[]
name|allModels
init|=
block|{
literal|"alexnet"
block|,
literal|"resnet50"
block|,
literal|"vgg16"
block|,
literal|"inception3"
block|}
decl_stmt|;
name|int
index|[]
name|batchSizes
init|=
block|{
literal|32
block|,
literal|64
block|,
literal|128
block|}
decl_stmt|;
name|int
index|[]
name|gpuCounts
init|=
block|{
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|}
decl_stmt|;
name|float
name|totalBoostAgainstMedian
init|=
literal|0
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|float
name|maxBoostAgainstMedian
init|=
literal|0
decl_stmt|;
name|float
name|totalBoostAgainstMin
init|=
literal|0
decl_stmt|;
name|float
name|maxBoostAgainstMin
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|model
range|:
name|allModels
control|)
block|{
name|float
name|totalBoostAgainstMinCertainModel
init|=
literal|0
decl_stmt|;
name|float
name|totalBoostAgainstMedianCertainModel
init|=
literal|0
decl_stmt|;
name|float
name|maxBoostAgainstMinCertainModel
init|=
literal|0
decl_stmt|;
name|float
name|maxBoostAgainstMedianCertainModel
init|=
literal|0
decl_stmt|;
name|int
name|countOfEachModel
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|bs
range|:
name|batchSizes
control|)
block|{
for|for
control|(
name|int
name|gpuCount
range|:
name|gpuCounts
control|)
block|{
name|float
name|bstAgainstMedian
init|=
name|calculatePerformanceBoostAgainstMedian
argument_list|(
name|report
argument_list|,
name|model
argument_list|,
name|bs
argument_list|,
name|gpuCount
argument_list|,
name|plugin
argument_list|,
name|allDevices
argument_list|,
name|env
argument_list|)
decl_stmt|;
name|float
name|bstAgainstMinimum
init|=
name|calculatePerformanceBoostAgainstMinimum
argument_list|(
name|report
argument_list|,
name|model
argument_list|,
name|bs
argument_list|,
name|gpuCount
argument_list|,
name|plugin
argument_list|,
name|allDevices
argument_list|,
name|env
argument_list|)
decl_stmt|;
name|totalBoostAgainstMedian
operator|+=
name|bstAgainstMedian
expr_stmt|;
name|totalBoostAgainstMin
operator|+=
name|bstAgainstMinimum
expr_stmt|;
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|maxBoostAgainstMedian
operator|<
name|bstAgainstMedian
condition|)
block|{
name|maxBoostAgainstMedian
operator|=
name|bstAgainstMedian
expr_stmt|;
block|}
if|if
condition|(
name|maxBoostAgainstMin
operator|<
name|bstAgainstMinimum
condition|)
block|{
name|maxBoostAgainstMin
operator|=
name|bstAgainstMinimum
expr_stmt|;
block|}
name|totalBoostAgainstMinCertainModel
operator|+=
name|bstAgainstMinimum
expr_stmt|;
name|totalBoostAgainstMedianCertainModel
operator|+=
name|bstAgainstMedian
expr_stmt|;
if|if
condition|(
name|maxBoostAgainstMinCertainModel
operator|<
name|bstAgainstMinimum
condition|)
block|{
name|maxBoostAgainstMinCertainModel
operator|=
name|bstAgainstMinimum
expr_stmt|;
block|}
if|if
condition|(
name|maxBoostAgainstMedianCertainModel
operator|<
name|bstAgainstMedian
condition|)
block|{
name|maxBoostAgainstMedianCertainModel
operator|=
name|bstAgainstMedian
expr_stmt|;
block|}
name|countOfEachModel
operator|++
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Model:{}, The best performance boost against median value is "
operator|+
literal|"{}"
argument_list|,
name|model
argument_list|,
name|maxBoostAgainstMedianCertainModel
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Model:{}, The aggregated average performance boost against "
operator|+
literal|"median value is {}"
argument_list|,
name|model
argument_list|,
name|totalBoostAgainstMedianCertainModel
operator|/
name|countOfEachModel
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Model:{}, The best performance boost against min value is {}"
argument_list|,
name|model
argument_list|,
name|maxBoostAgainstMinCertainModel
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Model:{}, The aggregated average performance boost against "
operator|+
literal|"min value is {}"
argument_list|,
name|model
argument_list|,
name|totalBoostAgainstMinCertainModel
operator|/
name|countOfEachModel
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"For all, the best performance boost against median value is "
operator|+
name|maxBoostAgainstMedian
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"For all, the aggregated average performance boost against median "
operator|+
literal|"value is "
operator|+
name|totalBoostAgainstMedian
operator|/
name|count
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"For all, the best performance boost against min value is "
operator|+
name|maxBoostAgainstMin
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"For all, the aggregated average performance boost against min "
operator|+
literal|"value is "
operator|+
name|totalBoostAgainstMin
operator|/
name|count
argument_list|)
expr_stmt|;
block|}
comment|/**    * For<code>gpuCount</code> GPUs allocated by the topology algorithm, return    * its performance boost against the median value.    *    * */
DECL|method|calculatePerformanceBoostAgainstMedian ( ActualPerformanceReport report, String model, int bs, int gpuCount, NvidiaGPUPluginForRuntimeV2 plugin, Set<Device> allDevice, Map<String, String> env)
specifier|private
name|float
name|calculatePerformanceBoostAgainstMedian
parameter_list|(
name|ActualPerformanceReport
name|report
parameter_list|,
name|String
name|model
parameter_list|,
name|int
name|bs
parameter_list|,
name|int
name|gpuCount
parameter_list|,
name|NvidiaGPUPluginForRuntimeV2
name|plugin
parameter_list|,
name|Set
argument_list|<
name|Device
argument_list|>
name|allDevice
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|)
block|{
name|Set
argument_list|<
name|Device
argument_list|>
name|allocation
init|=
name|plugin
operator|.
name|allocateDevices
argument_list|(
name|allDevice
argument_list|,
name|gpuCount
argument_list|,
name|env
argument_list|)
decl_stmt|;
name|String
name|gpuAllocationString
init|=
name|convertAllocationToGpuString
argument_list|(
name|allocation
argument_list|)
decl_stmt|;
name|float
index|[]
name|metrics
init|=
name|report
operator|.
name|getVariousImagePerSecond
argument_list|(
name|model
argument_list|,
name|bs
argument_list|,
name|gpuCount
argument_list|,
name|gpuAllocationString
argument_list|)
decl_stmt|;
return|return
name|metrics
index|[
literal|7
index|]
return|;
block|}
comment|/**    * For<code>gpuCount</code> GPUs allocated by the topology algorithm, return    * its performance boost against the minimum value.    *    * */
DECL|method|calculatePerformanceBoostAgainstMinimum ( ActualPerformanceReport report, String model, int bs, int gpuCount, NvidiaGPUPluginForRuntimeV2 plugin, Set<Device> allDevice, Map<String, String> env)
specifier|private
name|float
name|calculatePerformanceBoostAgainstMinimum
parameter_list|(
name|ActualPerformanceReport
name|report
parameter_list|,
name|String
name|model
parameter_list|,
name|int
name|bs
parameter_list|,
name|int
name|gpuCount
parameter_list|,
name|NvidiaGPUPluginForRuntimeV2
name|plugin
parameter_list|,
name|Set
argument_list|<
name|Device
argument_list|>
name|allDevice
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|)
block|{
name|Set
argument_list|<
name|Device
argument_list|>
name|allocation
init|=
name|plugin
operator|.
name|allocateDevices
argument_list|(
name|allDevice
argument_list|,
name|gpuCount
argument_list|,
name|env
argument_list|)
decl_stmt|;
name|String
name|gpuAllocationString
init|=
name|convertAllocationToGpuString
argument_list|(
name|allocation
argument_list|)
decl_stmt|;
name|float
index|[]
name|metrics
init|=
name|report
operator|.
name|getVariousImagePerSecond
argument_list|(
name|model
argument_list|,
name|bs
argument_list|,
name|gpuCount
argument_list|,
name|gpuAllocationString
argument_list|)
decl_stmt|;
return|return
name|metrics
index|[
literal|5
index|]
return|;
block|}
DECL|method|convertAllocationToGpuString (Set<Device> allocation)
specifier|private
name|String
name|convertAllocationToGpuString
parameter_list|(
name|Set
argument_list|<
name|Device
argument_list|>
name|allocation
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Device
name|device
range|:
name|allocation
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|device
operator|.
name|getMinorNumber
argument_list|()
operator|+
literal|"_"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sb
operator|.
name|lastIndexOf
argument_list|(
literal|"_"
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Representation of the performance data report.    * */
DECL|class|ActualPerformanceReport
specifier|private
class|class
name|ActualPerformanceReport
block|{
DECL|field|dataSet
specifier|private
name|ArrayList
argument_list|<
name|DataRecord
argument_list|>
name|dataSet
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|getDataSet ()
specifier|public
name|ArrayList
argument_list|<
name|DataRecord
argument_list|>
name|getDataSet
parameter_list|()
block|{
return|return
name|dataSet
return|;
block|}
comment|/**      * One line in the report.      * */
DECL|class|DataRecord
specifier|private
class|class
name|DataRecord
block|{
DECL|method|DataRecord (String model, int bs, String combination, float fps, int count)
name|DataRecord
parameter_list|(
name|String
name|model
parameter_list|,
name|int
name|bs
parameter_list|,
name|String
name|combination
parameter_list|,
name|float
name|fps
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|this
operator|.
name|batchSize
operator|=
name|bs
expr_stmt|;
name|this
operator|.
name|gpuCombination
operator|=
name|combination
expr_stmt|;
name|this
operator|.
name|gpuCount
operator|=
name|count
expr_stmt|;
name|this
operator|.
name|model
operator|=
name|model
expr_stmt|;
name|this
operator|.
name|imagePerSecond
operator|=
name|fps
expr_stmt|;
block|}
DECL|method|getModel ()
specifier|public
name|String
name|getModel
parameter_list|()
block|{
return|return
name|model
return|;
block|}
DECL|method|getBatchSize ()
specifier|public
name|int
name|getBatchSize
parameter_list|()
block|{
return|return
name|batchSize
return|;
block|}
DECL|method|getGpuCombination ()
specifier|public
name|String
name|getGpuCombination
parameter_list|()
block|{
return|return
name|gpuCombination
return|;
block|}
DECL|method|getImagePerSecond ()
specifier|public
name|float
name|getImagePerSecond
parameter_list|()
block|{
return|return
name|imagePerSecond
return|;
block|}
DECL|method|getGpuCount ()
specifier|public
name|int
name|getGpuCount
parameter_list|()
block|{
return|return
name|gpuCount
return|;
block|}
DECL|field|model
specifier|private
name|String
name|model
decl_stmt|;
DECL|field|batchSize
specifier|private
name|int
name|batchSize
decl_stmt|;
DECL|field|gpuCombination
specifier|private
name|String
name|gpuCombination
decl_stmt|;
DECL|field|imagePerSecond
specifier|private
name|float
name|imagePerSecond
decl_stmt|;
DECL|field|gpuCount
specifier|private
name|int
name|gpuCount
decl_stmt|;
block|}
comment|/**      * The file is a real performance report got from a 8 GPUs AWS instance.      * It contains every combination GPUs' training performance of Tensorflow      * benchmark.      * The columns are the model name, batch size, gpu ids and imagesPerSecond      * */
DECL|method|readFromFile ()
specifier|public
name|void
name|readFromFile
parameter_list|()
block|{
name|String
name|csvReportFilePath
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"tensorflow-bench-result-for-GPU.csv"
argument_list|)
operator|.
name|getFile
argument_list|()
decl_stmt|;
name|BufferedReader
name|br
init|=
literal|null
decl_stmt|;
name|String
name|line
init|=
literal|""
decl_stmt|;
try|try
block|{
name|br
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|csvReportFilePath
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|model
decl_stmt|;
name|int
name|batchSize
decl_stmt|;
name|String
name|gpuCombination
decl_stmt|;
name|float
name|imagePerSecond
decl_stmt|;
name|int
name|gpuCount
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
comment|// skip the licence content
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
index|[]
name|tokens
init|=
name|line
operator|.
name|replaceAll
argument_list|(
literal|"\""
argument_list|,
literal|""
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|!=
literal|4
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"unexpected performance data format!"
argument_list|)
expr_stmt|;
break|break;
block|}
name|model
operator|=
name|tokens
index|[
literal|0
index|]
expr_stmt|;
name|batchSize
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|tokens
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|gpuCombination
operator|=
name|tokens
index|[
literal|2
index|]
expr_stmt|;
name|imagePerSecond
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|tokens
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|gpuCount
operator|=
name|getGpuCount
argument_list|(
name|gpuCombination
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataSet
operator|.
name|add
argument_list|(
operator|new
name|DataRecord
argument_list|(
name|model
argument_list|,
name|batchSize
argument_list|,
name|gpuCombination
argument_list|,
name|imagePerSecond
argument_list|,
name|gpuCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|br
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// end finally
block|}
comment|/**      * Return the maximum, minimum, mean and median performance for model&      * bs& gpuCount. And the imagePerSecond for model& bs& gpuCount&      * gpuCombinations. And imagePerSecond performance boost comparing to      * minimum, mean and media value.      * */
DECL|method|getVariousImagePerSecond (String model, int bs, int gpuCount, String gpuCombinations)
specifier|private
name|float
index|[]
name|getVariousImagePerSecond
parameter_list|(
name|String
name|model
parameter_list|,
name|int
name|bs
parameter_list|,
name|int
name|gpuCount
parameter_list|,
name|String
name|gpuCombinations
parameter_list|)
block|{
name|float
index|[]
name|result
init|=
operator|new
name|float
index|[
literal|8
index|]
decl_stmt|;
name|float
name|max
init|=
literal|0
decl_stmt|;
name|float
name|min
init|=
name|Float
operator|.
name|MAX_VALUE
decl_stmt|;
name|float
name|sum
init|=
literal|0
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|float
name|wantedImagePerSecond
init|=
literal|0
decl_stmt|;
name|float
name|currentImagePerSecond
decl_stmt|;
name|ArrayList
argument_list|<
name|Float
argument_list|>
name|allFps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DataRecord
name|dr
range|:
name|getDataSet
argument_list|()
control|)
block|{
name|currentImagePerSecond
operator|=
name|dr
operator|.
name|getImagePerSecond
argument_list|()
expr_stmt|;
if|if
condition|(
name|dr
operator|.
name|batchSize
operator|==
name|bs
operator|&&
name|model
operator|.
name|equals
argument_list|(
name|dr
operator|.
name|getModel
argument_list|()
argument_list|)
operator|&&
name|gpuCount
operator|==
name|dr
operator|.
name|getGpuCount
argument_list|()
condition|)
block|{
name|sum
operator|+=
name|currentImagePerSecond
expr_stmt|;
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|max
operator|<
name|currentImagePerSecond
condition|)
block|{
name|max
operator|=
name|currentImagePerSecond
expr_stmt|;
block|}
if|if
condition|(
name|min
operator|>
name|currentImagePerSecond
condition|)
block|{
name|min
operator|=
name|currentImagePerSecond
expr_stmt|;
block|}
if|if
condition|(
name|gpuCombinations
operator|.
name|equals
argument_list|(
name|dr
operator|.
name|getGpuCombination
argument_list|()
argument_list|)
condition|)
block|{
name|wantedImagePerSecond
operator|=
name|dr
operator|.
name|getImagePerSecond
argument_list|()
expr_stmt|;
block|}
name|allFps
operator|.
name|add
argument_list|(
name|dr
operator|.
name|getImagePerSecond
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|float
name|median
init|=
name|getMedian
argument_list|(
name|allFps
argument_list|)
decl_stmt|;
name|float
name|mean
init|=
name|sum
operator|/
name|count
decl_stmt|;
name|result
index|[
literal|0
index|]
operator|=
name|max
expr_stmt|;
name|result
index|[
literal|1
index|]
operator|=
name|min
expr_stmt|;
name|result
index|[
literal|2
index|]
operator|=
name|mean
expr_stmt|;
name|result
index|[
literal|3
index|]
operator|=
name|median
expr_stmt|;
name|result
index|[
literal|4
index|]
operator|=
name|wantedImagePerSecond
expr_stmt|;
name|result
index|[
literal|5
index|]
operator|=
name|wantedImagePerSecond
operator|/
name|min
operator|-
literal|1
expr_stmt|;
name|result
index|[
literal|6
index|]
operator|=
name|wantedImagePerSecond
operator|/
name|mean
operator|-
literal|1
expr_stmt|;
name|result
index|[
literal|7
index|]
operator|=
name|wantedImagePerSecond
operator|/
name|median
operator|-
literal|1
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|getMedian (ArrayList<Float> allFps)
specifier|private
name|float
name|getMedian
parameter_list|(
name|ArrayList
argument_list|<
name|Float
argument_list|>
name|allFps
parameter_list|)
block|{
name|float
index|[]
name|all
init|=
name|ArrayUtils
operator|.
name|toPrimitive
argument_list|(
name|allFps
operator|.
name|toArray
argument_list|(
operator|new
name|Float
index|[
literal|0
index|]
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|all
argument_list|)
expr_stmt|;
name|float
name|median
decl_stmt|;
name|int
name|size
init|=
name|all
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|allFps
operator|.
name|size
argument_list|()
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|median
operator|=
operator|(
name|all
index|[
name|size
operator|/
literal|2
index|]
operator|+
name|all
index|[
name|size
operator|/
literal|2
operator|-
literal|1
index|]
operator|)
operator|/
literal|2
expr_stmt|;
block|}
else|else
block|{
name|median
operator|=
name|all
index|[
name|size
operator|/
literal|2
index|]
expr_stmt|;
block|}
return|return
name|median
return|;
block|}
DECL|method|getGpuCount (String gpuCombination)
specifier|private
name|int
name|getGpuCount
parameter_list|(
name|String
name|gpuCombination
parameter_list|)
block|{
name|String
index|[]
name|tokens
init|=
name|gpuCombination
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
return|return
name|tokens
operator|.
name|length
return|;
block|}
block|}
block|}
end_class

end_unit

