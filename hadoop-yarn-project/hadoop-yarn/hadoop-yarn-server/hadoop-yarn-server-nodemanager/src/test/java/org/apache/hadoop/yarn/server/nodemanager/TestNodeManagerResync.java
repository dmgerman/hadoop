begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BrokenBarrierException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnsupportedFileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|ServerSocketUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ContainerUpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ContainerUpdateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerStatusesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|NMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ResourceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NMContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterNodeManagerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterNodeManagerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|BaseContainerManagerTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|ContainerManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|TestContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|metrics
operator|.
name|NodeManagerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|YarnServerBuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestNodeManagerResync
specifier|public
class|class
name|TestNodeManagerResync
block|{
DECL|field|basedir
specifier|static
specifier|final
name|File
name|basedir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|TestNodeManagerResync
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|tmpDir
specifier|static
specifier|final
name|File
name|tmpDir
init|=
operator|new
name|File
argument_list|(
name|basedir
argument_list|,
literal|"tmpDir"
argument_list|)
decl_stmt|;
DECL|field|logsDir
specifier|static
specifier|final
name|File
name|logsDir
init|=
operator|new
name|File
argument_list|(
name|basedir
argument_list|,
literal|"logs"
argument_list|)
decl_stmt|;
DECL|field|remoteLogsDir
specifier|static
specifier|final
name|File
name|remoteLogsDir
init|=
operator|new
name|File
argument_list|(
name|basedir
argument_list|,
literal|"remotelogs"
argument_list|)
decl_stmt|;
DECL|field|nmLocalDir
specifier|static
specifier|final
name|File
name|nmLocalDir
init|=
operator|new
name|File
argument_list|(
name|basedir
argument_list|,
literal|"nm0"
argument_list|)
decl_stmt|;
DECL|field|processStartFile
specifier|static
specifier|final
name|File
name|processStartFile
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"start_file.txt"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
DECL|field|recordFactory
specifier|static
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|user
specifier|static
specifier|final
name|String
name|user
init|=
literal|"nobody"
decl_stmt|;
DECL|field|localFS
specifier|private
name|FileContext
name|localFS
decl_stmt|;
DECL|field|syncBarrier
specifier|private
name|CyclicBarrier
name|syncBarrier
decl_stmt|;
DECL|field|updateBarrier
specifier|private
name|CyclicBarrier
name|updateBarrier
decl_stmt|;
DECL|field|assertionFailedInThread
specifier|private
name|AtomicBoolean
name|assertionFailedInThread
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|isNMShutdownCalled
specifier|private
name|AtomicBoolean
name|isNMShutdownCalled
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|resyncEvent
specifier|private
specifier|final
name|NodeManagerEvent
name|resyncEvent
init|=
operator|new
name|NodeManagerEvent
argument_list|(
name|NodeManagerEventType
operator|.
name|RESYNC
argument_list|)
decl_stmt|;
DECL|field|DUMMY_RM_IDENTIFIER
specifier|private
specifier|final
name|long
name|DUMMY_RM_IDENTIFIER
init|=
literal|1234
decl_stmt|;
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestNodeManagerResync
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|UnsupportedFileSystemException
block|{
name|localFS
operator|=
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
expr_stmt|;
name|tmpDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|logsDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|remoteLogsDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|nmLocalDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|syncBarrier
operator|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|updateBarrier
operator|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|localFS
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|basedir
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertionFailedInThread
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKillContainersOnResync ()
specifier|public
name|void
name|testKillContainersOnResync
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnException
block|{
name|TestNodeManager1
name|nm
init|=
operator|new
name|TestNodeManager1
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|testContainerPreservationOnResyncImpl
argument_list|(
name|nm
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreserveContainersOnResyncKeepingContainers ()
specifier|public
name|void
name|testPreserveContainersOnResyncKeepingContainers
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnException
block|{
name|TestNodeManager1
name|nm
init|=
operator|new
name|TestNodeManager1
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|testContainerPreservationOnResyncImpl
argument_list|(
name|nm
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testContainerPreservationOnResyncImpl (TestNodeManager1 nm, boolean isWorkPreservingRestartEnabled)
specifier|protected
name|void
name|testContainerPreservationOnResyncImpl
parameter_list|(
name|TestNodeManager1
name|nm
parameter_list|,
name|boolean
name|isWorkPreservingRestartEnabled
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
throws|,
name|InterruptedException
block|{
name|int
name|port
init|=
name|ServerSocketUtil
operator|.
name|getPort
argument_list|(
literal|49153
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
name|createNMConfig
argument_list|(
name|port
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_ENABLED
argument_list|,
name|isWorkPreservingRestartEnabled
argument_list|)
expr_stmt|;
try|try
block|{
name|nm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nm
operator|.
name|start
argument_list|()
expr_stmt|;
name|ContainerId
name|cId
init|=
name|TestNodeManagerShutdown
operator|.
name|createContainerId
argument_list|()
decl_stmt|;
name|TestNodeManagerShutdown
operator|.
name|startContainer
argument_list|(
name|nm
argument_list|,
name|cId
argument_list|,
name|localFS
argument_list|,
name|tmpDir
argument_list|,
name|processStartFile
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|nm
operator|.
name|setExistingContainerId
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|TestNodeManager1
operator|)
name|nm
operator|)
operator|.
name|getNMRegistrationCount
argument_list|()
argument_list|)
expr_stmt|;
name|nm
operator|.
name|getNMDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|resyncEvent
argument_list|)
expr_stmt|;
try|try
block|{
name|syncBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BrokenBarrierException
name|e
parameter_list|)
block|{       }
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|TestNodeManager1
operator|)
name|nm
operator|)
operator|.
name|getNMRegistrationCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Only containers should be killed on resync, apps should lie around.
comment|// That way local resources for apps can be used beyond resync without
comment|// relocalization
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nm
operator|.
name|getNMContext
argument_list|()
operator|.
name|getApplications
argument_list|()
operator|.
name|containsKey
argument_list|(
name|cId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|assertionFailedInThread
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|nm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testNMshutdownWhenResyncThrowException ()
specifier|public
name|void
name|testNMshutdownWhenResyncThrowException
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnException
block|{
name|NodeManager
name|nm
init|=
operator|new
name|TestNodeManager3
argument_list|()
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
name|createNMConfig
argument_list|()
decl_stmt|;
name|nm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nm
operator|.
name|start
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|TestNodeManager3
operator|)
name|nm
operator|)
operator|.
name|getNMRegistrationCount
argument_list|()
argument_list|)
expr_stmt|;
name|nm
operator|.
name|getNMDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodeManagerEvent
argument_list|(
name|NodeManagerEventType
operator|.
name|RESYNC
argument_list|)
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|isNMShutdownCalled
init|)
block|{
while|while
condition|(
name|isNMShutdownCalled
operator|.
name|get
argument_list|()
operator|==
literal|false
condition|)
block|{
try|try
block|{
name|isNMShutdownCalled
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{         }
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"NM shutdown not called."
argument_list|,
name|isNMShutdownCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|nm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testContainerResourceIncreaseIsSynchronizedWithRMResync ()
specifier|public
name|void
name|testContainerResourceIncreaseIsSynchronizedWithRMResync
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnException
block|{
name|NodeManager
name|nm
init|=
operator|new
name|TestNodeManager4
argument_list|()
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
name|createNMConfig
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|nm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Start a container and make sure it is in RUNNING state
operator|(
operator|(
name|TestNodeManager4
operator|)
name|nm
operator|)
operator|.
name|startContainer
argument_list|()
expr_stmt|;
comment|// Simulate a container resource increase in a separate thread
operator|(
operator|(
name|TestNodeManager4
operator|)
name|nm
operator|)
operator|.
name|updateContainerResource
argument_list|()
expr_stmt|;
comment|// Simulate RM restart by sending a RESYNC event
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending out RESYNC event"
argument_list|)
expr_stmt|;
name|nm
operator|.
name|getNMDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodeManagerEvent
argument_list|(
name|NodeManagerEventType
operator|.
name|RESYNC
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|syncBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BrokenBarrierException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|assertionFailedInThread
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|nm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|// This is to test when NM gets the resync response from last heart beat, it
comment|// should be able to send the already-sent-via-last-heart-beat container
comment|// statuses again when it re-register with RM.
annotation|@
name|Test
DECL|method|testNMSentContainerStatusOnResync ()
specifier|public
name|void
name|testNMSentContainerStatusOnResync
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ContainerStatus
name|testCompleteContainer
init|=
name|TestNodeStatusUpdater
operator|.
name|createContainerStatus
argument_list|(
literal|2
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
decl_stmt|;
specifier|final
name|Container
name|container
init|=
name|TestNodeStatusUpdater
operator|.
name|getMockContainer
argument_list|(
name|testCompleteContainer
argument_list|)
decl_stmt|;
name|NMContainerStatus
name|report
init|=
name|createNMContainerStatus
argument_list|(
literal|2
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getNMContainerStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|NodeManager
name|nm
init|=
operator|new
name|NodeManager
argument_list|()
block|{
name|int
name|registerCount
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|NodeStatusUpdater
name|createNodeStatusUpdater
parameter_list|(
name|Context
name|context
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|NodeHealthCheckerService
name|healthChecker
parameter_list|)
block|{
return|return
operator|new
name|TestNodeStatusUpdaterResync
argument_list|(
name|context
argument_list|,
name|dispatcher
argument_list|,
name|healthChecker
argument_list|,
name|metrics
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ResourceTracker
name|createResourceTracker
parameter_list|()
block|{
return|return
operator|new
name|MockResourceTracker
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RegisterNodeManagerResponse
name|registerNodeManager
parameter_list|(
name|RegisterNodeManagerRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
if|if
condition|(
name|registerCount
operator|==
literal|0
condition|)
block|{
comment|// first register, no containers info.
try|try
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|request
operator|.
name|getNMContainerStatuses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|error
parameter_list|)
block|{
name|error
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertionFailedInThread
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// put the completed container into the context
name|getNMContext
argument_list|()
operator|.
name|getContainers
argument_list|()
operator|.
name|put
argument_list|(
name|testCompleteContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|container
argument_list|)
expr_stmt|;
name|getNMContext
argument_list|()
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|testCompleteContainer
operator|.
name|getContainerId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|mock
argument_list|(
name|Application
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// second register contains the completed container info.
name|List
argument_list|<
name|NMContainerStatus
argument_list|>
name|statuses
init|=
name|request
operator|.
name|getNMContainerStatuses
argument_list|()
decl_stmt|;
try|try
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statuses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testCompleteContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|statuses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|error
parameter_list|)
block|{
name|error
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertionFailedInThread
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|registerCount
operator|++
expr_stmt|;
return|return
name|super
operator|.
name|registerNodeManager
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeHeartbeatResponse
name|nodeHeartbeat
parameter_list|(
name|NodeHeartbeatRequest
name|request
parameter_list|)
block|{
comment|// first heartBeat contains the completed container info
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|statuses
init|=
name|request
operator|.
name|getNodeStatus
argument_list|()
operator|.
name|getContainersStatuses
argument_list|()
decl_stmt|;
try|try
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statuses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testCompleteContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|statuses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|error
parameter_list|)
block|{
name|error
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertionFailedInThread
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// notify RESYNC on first heartbeat.
return|return
name|YarnServerBuilderUtils
operator|.
name|newNodeHeartbeatResponse
argument_list|(
literal|1
argument_list|,
name|NodeAction
operator|.
name|RESYNC
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|1000L
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
name|createNMConfig
argument_list|()
decl_stmt|;
name|nm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nm
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|syncBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BrokenBarrierException
name|e
parameter_list|)
block|{     }
name|Assert
operator|.
name|assertFalse
argument_list|(
name|assertionFailedInThread
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|nm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|// This can be used as a common base class for testing NM resync behavior.
DECL|class|TestNodeStatusUpdaterResync
class|class
name|TestNodeStatusUpdaterResync
extends|extends
name|MockNodeStatusUpdater
block|{
DECL|method|TestNodeStatusUpdaterResync (Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker, NodeManagerMetrics metrics)
specifier|public
name|TestNodeStatusUpdaterResync
parameter_list|(
name|Context
name|context
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|NodeHealthCheckerService
name|healthChecker
parameter_list|,
name|NodeManagerMetrics
name|metrics
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|dispatcher
argument_list|,
name|healthChecker
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|rebootNodeStatusUpdaterAndRegisterWithRM ()
specifier|protected
name|void
name|rebootNodeStatusUpdaterAndRegisterWithRM
parameter_list|()
block|{
try|try
block|{
comment|// Wait here so as to sync with the main test thread.
name|super
operator|.
name|rebootNodeStatusUpdaterAndRegisterWithRM
argument_list|()
expr_stmt|;
name|syncBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
catch|catch
parameter_list|(
name|BrokenBarrierException
name|e
parameter_list|)
block|{       }
catch|catch
parameter_list|(
name|AssertionError
name|ae
parameter_list|)
block|{
name|ae
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertionFailedInThread
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createNMConfig (int port)
specifier|private
name|YarnConfiguration
name|createNMConfig
parameter_list|(
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_PMEM_MB
argument_list|,
literal|5
operator|*
literal|1024
argument_list|)
expr_stmt|;
comment|// 5GB
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_ADDRESS
argument_list|,
literal|"127.0.0.1:"
operator|+
name|port
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCALIZER_ADDRESS
argument_list|,
literal|"127.0.0.1:"
operator|+
name|ServerSocketUtil
operator|.
name|getPort
argument_list|(
literal|49155
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_WEBAPP_ADDRESS
argument_list|,
literal|"127.0.0.1:"
operator|+
name|ServerSocketUtil
operator|.
name|getPort
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_NM_WEBAPP_PORT
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|logsDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|remoteLogsDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|nmLocalDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_RETAIN_SECONDS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|createNMConfig ()
specifier|private
name|YarnConfiguration
name|createNMConfig
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|createNMConfig
argument_list|(
name|ServerSocketUtil
operator|.
name|getPort
argument_list|(
literal|49156
argument_list|,
literal|10
argument_list|)
argument_list|)
return|;
block|}
DECL|class|TestNodeManager1
class|class
name|TestNodeManager1
extends|extends
name|NodeManager
block|{
DECL|field|registrationCount
specifier|private
name|int
name|registrationCount
init|=
literal|0
decl_stmt|;
DECL|field|containersShouldBePreserved
specifier|private
name|boolean
name|containersShouldBePreserved
decl_stmt|;
DECL|field|existingCid
specifier|private
name|ContainerId
name|existingCid
decl_stmt|;
DECL|method|TestNodeManager1 (boolean containersShouldBePreserved)
specifier|public
name|TestNodeManager1
parameter_list|(
name|boolean
name|containersShouldBePreserved
parameter_list|)
block|{
name|this
operator|.
name|containersShouldBePreserved
operator|=
name|containersShouldBePreserved
expr_stmt|;
block|}
DECL|method|setExistingContainerId (ContainerId cId)
specifier|public
name|void
name|setExistingContainerId
parameter_list|(
name|ContainerId
name|cId
parameter_list|)
block|{
name|existingCid
operator|=
name|cId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createNodeStatusUpdater (Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker)
specifier|protected
name|NodeStatusUpdater
name|createNodeStatusUpdater
parameter_list|(
name|Context
name|context
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|NodeHealthCheckerService
name|healthChecker
parameter_list|)
block|{
return|return
operator|new
name|TestNodeStatusUpdaterImpl1
argument_list|(
name|context
argument_list|,
name|dispatcher
argument_list|,
name|healthChecker
argument_list|,
name|metrics
argument_list|)
return|;
block|}
DECL|method|getNMRegistrationCount ()
specifier|public
name|int
name|getNMRegistrationCount
parameter_list|()
block|{
return|return
name|registrationCount
return|;
block|}
DECL|class|TestNodeStatusUpdaterImpl1
class|class
name|TestNodeStatusUpdaterImpl1
extends|extends
name|MockNodeStatusUpdater
block|{
DECL|method|TestNodeStatusUpdaterImpl1 (Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker, NodeManagerMetrics metrics)
specifier|public
name|TestNodeStatusUpdaterImpl1
parameter_list|(
name|Context
name|context
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|NodeHealthCheckerService
name|healthChecker
parameter_list|,
name|NodeManagerMetrics
name|metrics
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|dispatcher
argument_list|,
name|healthChecker
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|registerWithRM ()
specifier|protected
name|void
name|registerWithRM
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|super
operator|.
name|registerWithRM
argument_list|()
expr_stmt|;
name|registrationCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|rebootNodeStatusUpdaterAndRegisterWithRM ()
specifier|protected
name|void
name|rebootNodeStatusUpdaterAndRegisterWithRM
parameter_list|()
block|{
name|ConcurrentMap
argument_list|<
name|ContainerId
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
argument_list|>
name|containers
init|=
name|getNMContext
argument_list|()
operator|.
name|getContainers
argument_list|()
decl_stmt|;
try|try
block|{
try|try
block|{
if|if
condition|(
name|containersShouldBePreserved
condition|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|containers
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containers
operator|.
name|containsKey
argument_list|(
name|existingCid
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerState
name|state
init|=
name|containers
operator|.
name|get
argument_list|(
name|existingCid
argument_list|)
operator|.
name|cloneAndGetContainerStatus
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
comment|// Wait till RUNNING state...
name|int
name|counter
init|=
literal|50
decl_stmt|;
while|while
condition|(
name|state
operator|!=
name|ContainerState
operator|.
name|RUNNING
operator|&&
name|counter
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|counter
operator|--
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|containers
operator|.
name|get
argument_list|(
name|existingCid
argument_list|)
operator|.
name|cloneAndGetContainerStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// ensure that containers are empty or are completed before
comment|// restart nodeStatusUpdater
if|if
condition|(
operator|!
name|containers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
name|containers
operator|.
name|get
argument_list|(
name|existingCid
argument_list|)
operator|.
name|cloneAndGetContainerStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|rebootNodeStatusUpdaterAndRegisterWithRM
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|ae
parameter_list|)
block|{
name|ae
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertionFailedInThread
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|syncBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{         }
catch|catch
parameter_list|(
name|BrokenBarrierException
name|e
parameter_list|)
block|{         }
catch|catch
parameter_list|(
name|AssertionError
name|ae
parameter_list|)
block|{
name|ae
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertionFailedInThread
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|TestNodeManager3
class|class
name|TestNodeManager3
extends|extends
name|NodeManager
block|{
DECL|field|registrationCount
specifier|private
name|int
name|registrationCount
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|createNodeStatusUpdater (Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker)
specifier|protected
name|NodeStatusUpdater
name|createNodeStatusUpdater
parameter_list|(
name|Context
name|context
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|NodeHealthCheckerService
name|healthChecker
parameter_list|)
block|{
return|return
operator|new
name|TestNodeStatusUpdaterImpl3
argument_list|(
name|context
argument_list|,
name|dispatcher
argument_list|,
name|healthChecker
argument_list|,
name|metrics
argument_list|)
return|;
block|}
DECL|method|getNMRegistrationCount ()
specifier|public
name|int
name|getNMRegistrationCount
parameter_list|()
block|{
return|return
name|registrationCount
return|;
block|}
annotation|@
name|Override
DECL|method|shutDown (int exitCode)
specifier|protected
name|void
name|shutDown
parameter_list|(
name|int
name|exitCode
parameter_list|)
block|{
synchronized|synchronized
init|(
name|isNMShutdownCalled
init|)
block|{
name|isNMShutdownCalled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|isNMShutdownCalled
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|TestNodeStatusUpdaterImpl3
class|class
name|TestNodeStatusUpdaterImpl3
extends|extends
name|MockNodeStatusUpdater
block|{
DECL|method|TestNodeStatusUpdaterImpl3 (Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker, NodeManagerMetrics metrics)
specifier|public
name|TestNodeStatusUpdaterImpl3
parameter_list|(
name|Context
name|context
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|NodeHealthCheckerService
name|healthChecker
parameter_list|,
name|NodeManagerMetrics
name|metrics
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|dispatcher
argument_list|,
name|healthChecker
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|registerWithRM ()
specifier|protected
name|void
name|registerWithRM
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|super
operator|.
name|registerWithRM
argument_list|()
expr_stmt|;
name|registrationCount
operator|++
expr_stmt|;
if|if
condition|(
name|registrationCount
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Registration with RM failed."
argument_list|)
throw|;
block|}
block|}
block|}
block|}
DECL|class|TestNodeManager4
class|class
name|TestNodeManager4
extends|extends
name|NodeManager
block|{
DECL|field|containerUpdateResourceThread
specifier|private
name|Thread
name|containerUpdateResourceThread
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|createNodeStatusUpdater (Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker)
specifier|protected
name|NodeStatusUpdater
name|createNodeStatusUpdater
parameter_list|(
name|Context
name|context
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|NodeHealthCheckerService
name|healthChecker
parameter_list|)
block|{
return|return
operator|new
name|TestNodeStatusUpdaterImpl4
argument_list|(
name|context
argument_list|,
name|dispatcher
argument_list|,
name|healthChecker
argument_list|,
name|metrics
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createContainerManager (Context context, ContainerExecutor exec, DeletionService del, NodeStatusUpdater nodeStatusUpdater, ApplicationACLsManager aclsManager, LocalDirsHandlerService dirsHandler)
specifier|protected
name|ContainerManagerImpl
name|createContainerManager
parameter_list|(
name|Context
name|context
parameter_list|,
name|ContainerExecutor
name|exec
parameter_list|,
name|DeletionService
name|del
parameter_list|,
name|NodeStatusUpdater
name|nodeStatusUpdater
parameter_list|,
name|ApplicationACLsManager
name|aclsManager
parameter_list|,
name|LocalDirsHandlerService
name|dirsHandler
parameter_list|)
block|{
return|return
operator|new
name|ContainerManagerImpl
argument_list|(
name|context
argument_list|,
name|exec
argument_list|,
name|del
argument_list|,
name|nodeStatusUpdater
argument_list|,
name|metrics
argument_list|,
name|dirsHandler
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|authorizeGetAndStopContainerRequest
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Container
name|container
parameter_list|,
name|boolean
name|stopRequest
parameter_list|,
name|NMTokenIdentifier
name|identifier
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// do nothing
block|}
annotation|@
name|Override
specifier|protected
name|void
name|authorizeUser
parameter_list|(
name|UserGroupInformation
name|remoteUgi
parameter_list|,
name|NMTokenIdentifier
name|nmTokenIdentifier
parameter_list|)
block|{
comment|// do nothing
block|}
annotation|@
name|Override
specifier|protected
name|void
name|authorizeStartAndResourceIncreaseRequest
parameter_list|(
name|NMTokenIdentifier
name|nmTokenIdentifier
parameter_list|,
name|ContainerTokenIdentifier
name|containerTokenIdentifier
parameter_list|,
name|boolean
name|startRequest
parameter_list|)
throws|throws
name|YarnException
block|{
try|try
block|{
comment|// Sleep 2 seconds to simulate a pro-longed increase action.
comment|// If during this time a RESYNC event is sent by RM, the
comment|// resync action should block until the increase action is
comment|// completed.
comment|// See testContainerResourceIncreaseIsSynchronizedWithRMResync()
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|updateNMTokenIdentifier
parameter_list|(
name|NMTokenIdentifier
name|nmTokenIdentifier
parameter_list|)
throws|throws
name|SecretManager
operator|.
name|InvalidToken
block|{
comment|// Do nothing
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|getAuxServiceMetaData
parameter_list|()
block|{
return|return
operator|new
name|HashMap
argument_list|<>
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|NMTokenIdentifier
name|selectNMTokenIdentifier
parameter_list|(
name|UserGroupInformation
name|remoteUgi
parameter_list|)
block|{
return|return
operator|new
name|NMTokenIdentifier
argument_list|()
return|;
block|}
block|}
return|;
block|}
comment|// Start a container in NM
DECL|method|startContainer ()
specifier|public
name|void
name|startContainer
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Start a container and wait until it is in RUNNING state"
argument_list|)
expr_stmt|;
name|File
name|scriptFile
init|=
name|Shell
operator|.
name|appendScriptExtension
argument_list|(
name|tmpDir
argument_list|,
literal|"scriptFile"
argument_list|)
decl_stmt|;
name|PrintWriter
name|fileWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|scriptFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@ping -n 100 127.0.0.1>nul"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\numask 0"
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\nexec sleep 100"
argument_list|)
expr_stmt|;
block|}
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|URL
name|resource_alpha
init|=
name|URL
operator|.
name|fromPath
argument_list|(
name|localFS
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|scriptFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|LocalResource
name|rsrc_alpha
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|rsrc_alpha
operator|.
name|setResource
argument_list|(
name|resource_alpha
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setVisibility
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setType
argument_list|(
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setTimestamp
argument_list|(
name|scriptFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|destinationFile
init|=
literal|"dest_file"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|destinationFile
argument_list|,
name|rsrc_alpha
argument_list|)
expr_stmt|;
name|containerLaunchContext
operator|.
name|setLocalResources
argument_list|(
name|localResources
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Shell
operator|.
name|getRunScriptCommand
argument_list|(
name|scriptFile
argument_list|)
argument_list|)
decl_stmt|;
name|containerLaunchContext
operator|.
name|setCommands
argument_list|(
name|commands
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|StartContainerRequest
name|scRequest
init|=
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|getContainerToken
argument_list|(
name|resource
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|StartContainerRequest
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|scRequest
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|getContainerManager
argument_list|()
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
comment|// Make sure the container reaches RUNNING state
name|ContainerId
name|cId
init|=
name|TestContainerManager
operator|.
name|createContainerId
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForNMContainerState
argument_list|(
name|getContainerManager
argument_list|()
argument_list|,
name|cId
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
block|}
comment|// Increase container resource in a thread
DECL|method|updateContainerResource ()
specifier|public
name|void
name|updateContainerResource
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Increase a container resource in a separate thread"
argument_list|)
expr_stmt|;
name|containerUpdateResourceThread
operator|=
operator|new
name|ContainerUpdateResourceThread
argument_list|()
expr_stmt|;
name|containerUpdateResourceThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|class|TestNodeStatusUpdaterImpl4
class|class
name|TestNodeStatusUpdaterImpl4
extends|extends
name|MockNodeStatusUpdater
block|{
DECL|method|TestNodeStatusUpdaterImpl4 (Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker, NodeManagerMetrics metrics)
specifier|public
name|TestNodeStatusUpdaterImpl4
parameter_list|(
name|Context
name|context
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|NodeHealthCheckerService
name|healthChecker
parameter_list|,
name|NodeManagerMetrics
name|metrics
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|dispatcher
argument_list|,
name|healthChecker
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|rebootNodeStatusUpdaterAndRegisterWithRM ()
specifier|protected
name|void
name|rebootNodeStatusUpdaterAndRegisterWithRM
parameter_list|()
block|{
try|try
block|{
try|try
block|{
comment|// Check status before registerWithRM
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containerIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ContainerId
name|cId
init|=
name|TestContainerManager
operator|.
name|createContainerId
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|containerIds
operator|.
name|add
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|GetContainerStatusesRequest
name|gcsRequest
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|containerIds
argument_list|)
decl_stmt|;
name|ContainerStatus
name|containerStatus
init|=
name|getContainerManager
argument_list|()
operator|.
name|getContainerStatuses
argument_list|(
name|gcsRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
name|containerStatus
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
name|updateBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Call the actual rebootNodeStatusUpdaterAndRegisterWithRM().
comment|// This function should be synchronized with
comment|// updateContainer().
name|updateBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|super
operator|.
name|rebootNodeStatusUpdaterAndRegisterWithRM
argument_list|()
expr_stmt|;
comment|// Check status after registerWithRM
name|containerStatus
operator|=
name|getContainerManager
argument_list|()
operator|.
name|getContainerStatuses
argument_list|(
name|gcsRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4096
argument_list|,
literal|2
argument_list|)
argument_list|,
name|containerStatus
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|ae
parameter_list|)
block|{
name|ae
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertionFailedInThread
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|syncBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|ContainerUpdateResourceThread
class|class
name|ContainerUpdateResourceThread
extends|extends
name|Thread
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// Construct container resource increase request
name|List
argument_list|<
name|Token
argument_list|>
name|increaseTokens
init|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|>
argument_list|()
decl_stmt|;
comment|// Add increase request.
name|Resource
name|targetResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4096
argument_list|,
literal|2
argument_list|)
decl_stmt|;
try|try
block|{
try|try
block|{
name|updateBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|increaseTokens
operator|.
name|add
argument_list|(
name|getContainerToken
argument_list|(
name|targetResource
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerUpdateRequest
name|updateRequest
init|=
name|ContainerUpdateRequest
operator|.
name|newInstance
argument_list|(
name|increaseTokens
argument_list|)
decl_stmt|;
name|ContainerUpdateResponse
name|updateResponse
init|=
name|getContainerManager
argument_list|()
operator|.
name|updateContainer
argument_list|(
name|updateRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|updateResponse
operator|.
name|getSuccessfullyUpdatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|updateResponse
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|updateBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|getContainerToken (Resource resource)
specifier|private
name|Token
name|getContainerToken
parameter_list|(
name|Resource
name|resource
parameter_list|)
throws|throws
name|IOException
block|{
name|ContainerId
name|cId
init|=
name|TestContainerManager
operator|.
name|createContainerId
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|TestContainerManager
operator|.
name|createContainerToken
argument_list|(
name|cId
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|getNMContext
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|resource
argument_list|,
name|getNMContext
argument_list|()
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|getContainerToken (Resource resource, int version)
specifier|private
name|Token
name|getContainerToken
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|int
name|version
parameter_list|)
throws|throws
name|IOException
block|{
name|ContainerId
name|cId
init|=
name|TestContainerManager
operator|.
name|createContainerId
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|TestContainerManager
operator|.
name|createContainerToken
argument_list|(
name|cId
argument_list|,
name|version
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|getNMContext
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|resource
argument_list|,
name|getNMContext
argument_list|()
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
DECL|method|createNMContainerStatus (int id, ContainerState containerState)
specifier|public
specifier|static
name|NMContainerStatus
name|createNMContainerStatus
parameter_list|(
name|int
name|id
parameter_list|,
name|ContainerState
name|containerState
parameter_list|)
block|{
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|applicationAttemptId
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|NMContainerStatus
name|containerReport
init|=
name|NMContainerStatus
operator|.
name|newInstance
argument_list|(
name|containerId
argument_list|,
literal|0
argument_list|,
name|containerState
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"recover container"
argument_list|,
literal|0
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|containerReport
return|;
block|}
block|}
end_class

end_unit

