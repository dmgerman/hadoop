begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
operator|.
name|CREATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
operator|.
name|OVERWRITE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|isA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|LocalizationProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|ResourceLocalizationSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LocalizerAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LocalizerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerDiagnosticsUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ContainerLocalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|MockLocalizerHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|executor
operator|.
name|ContainerStartContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|executor
operator|.
name|DeletionAsUserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|executor
operator|.
name|LocalizerStartContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_class
DECL|class|TestDefaultContainerExecutor
specifier|public
class|class
name|TestDefaultContainerExecutor
block|{
comment|/*   // XXX FileContext cannot be mocked to do this   static FSDataInputStream getRandomStream(Random r, int len)       throws IOException {     byte[] bytes = new byte[len];     r.nextBytes(bytes);     DataInputBuffer buf = new DataInputBuffer();     buf.reset(bytes, 0, bytes.length);     return new FSDataInputStream(new FakeFSDataInputStream(buf));   }    class PathEndsWith extends ArgumentMatcher<Path> {     final String suffix;     PathEndsWith(String suffix) {       this.suffix = suffix;     }     @Override     public boolean matches(Object o) {       return       suffix.equals(((Path)o).getName());     }   }    DataOutputBuffer mockStream(       AbstractFileSystem spylfs, Path p, Random r, int len)        throws IOException {     DataOutputBuffer dob = new DataOutputBuffer();     doReturn(getRandomStream(r, len)).when(spylfs).open(p);     doReturn(new FileStatus(len, false, -1, -1L, -1L, p)).when(         spylfs).getFileStatus(argThat(new PathEndsWith(p.getName())));     doReturn(new FSDataOutputStream(dob)).when(spylfs).createInternal(         argThat(new PathEndsWith(p.getName())),         eq(EnumSet.of(OVERWRITE)),         Matchers.<FsPermission>anyObject(), anyInt(), anyShort(), anyLong(),         Matchers.<Progressable>anyObject(), anyInt(), anyBoolean());     return dob;   }   */
DECL|field|BASE_TMP_PATH
specifier|private
specifier|static
name|Path
name|BASE_TMP_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"target"
argument_list|,
name|TestDefaultContainerExecutor
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|AfterClass
DECL|method|deleteTmpFiles ()
specifier|public
specifier|static
name|void
name|deleteTmpFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|FileContext
name|lfs
init|=
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
decl_stmt|;
try|try
block|{
name|lfs
operator|.
name|delete
argument_list|(
name|BASE_TMP_PATH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{     }
block|}
DECL|method|createTmpFile (Path dst, Random r, int len)
name|byte
index|[]
name|createTmpFile
parameter_list|(
name|Path
name|dst
parameter_list|,
name|Random
name|r
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
comment|// use unmodified local context
name|FileContext
name|lfs
init|=
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
decl_stmt|;
name|dst
operator|=
name|lfs
operator|.
name|makeQualified
argument_list|(
name|dst
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|mkdir
argument_list|(
name|dst
operator|.
name|getParent
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
name|lfs
operator|.
name|create
argument_list|(
name|dst
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CREATE
argument_list|,
name|OVERWRITE
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|bytes
return|;
block|}
annotation|@
name|Test
DECL|method|testDirPermissions ()
specifier|public
name|void
name|testDirPermissions
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteTmpFiles
argument_list|()
expr_stmt|;
specifier|final
name|String
name|user
init|=
literal|"somebody"
decl_stmt|;
specifier|final
name|String
name|appId
init|=
literal|"app_12345_123"
decl_stmt|;
specifier|final
name|FsPermission
name|userCachePerm
init|=
operator|new
name|FsPermission
argument_list|(
name|DefaultContainerExecutor
operator|.
name|USER_PERM
argument_list|)
decl_stmt|;
specifier|final
name|FsPermission
name|appCachePerm
init|=
operator|new
name|FsPermission
argument_list|(
name|DefaultContainerExecutor
operator|.
name|APPCACHE_PERM
argument_list|)
decl_stmt|;
specifier|final
name|FsPermission
name|fileCachePerm
init|=
operator|new
name|FsPermission
argument_list|(
name|DefaultContainerExecutor
operator|.
name|FILECACHE_PERM
argument_list|)
decl_stmt|;
specifier|final
name|FsPermission
name|appDirPerm
init|=
operator|new
name|FsPermission
argument_list|(
name|DefaultContainerExecutor
operator|.
name|APPDIR_PERM
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|localDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|localDirs
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|BASE_TMP_PATH
argument_list|,
literal|"localDirA"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|localDirs
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|BASE_TMP_PATH
argument_list|,
literal|"localDirB"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|logDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|logDirs
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|BASE_TMP_PATH
argument_list|,
literal|"logDirA"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|logDirs
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|BASE_TMP_PATH
argument_list|,
literal|"logDirB"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_PERMISSIONS_UMASK_KEY
argument_list|,
literal|"077"
argument_list|)
expr_stmt|;
name|FileContext
name|lfs
init|=
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|DefaultContainerExecutor
name|executor
init|=
operator|new
name|DefaultContainerExecutor
argument_list|(
name|lfs
argument_list|)
decl_stmt|;
name|executor
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|executor
operator|.
name|init
argument_list|()
expr_stmt|;
try|try
block|{
name|executor
operator|.
name|createUserLocalDirs
argument_list|(
name|localDirs
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|executor
operator|.
name|createUserCacheDirs
argument_list|(
name|localDirs
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|executor
operator|.
name|createAppDirs
argument_list|(
name|localDirs
argument_list|,
name|user
argument_list|,
name|appId
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|dir
range|:
name|localDirs
control|)
block|{
name|FileStatus
name|stats
init|=
name|lfs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|ContainerLocalizer
operator|.
name|USERCACHE
argument_list|)
argument_list|,
name|user
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|userCachePerm
argument_list|,
name|stats
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|dir
range|:
name|localDirs
control|)
block|{
name|Path
name|userCachePath
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|ContainerLocalizer
operator|.
name|USERCACHE
argument_list|)
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|Path
name|appCachePath
init|=
operator|new
name|Path
argument_list|(
name|userCachePath
argument_list|,
name|ContainerLocalizer
operator|.
name|APPCACHE
argument_list|)
decl_stmt|;
name|FileStatus
name|stats
init|=
name|lfs
operator|.
name|getFileStatus
argument_list|(
name|appCachePath
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appCachePerm
argument_list|,
name|stats
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|=
name|lfs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|userCachePath
argument_list|,
name|ContainerLocalizer
operator|.
name|FILECACHE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fileCachePerm
argument_list|,
name|stats
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|=
name|lfs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|appCachePath
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appDirPerm
argument_list|,
name|stats
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|permissionsArray
init|=
block|{
literal|"000"
block|,
literal|"111"
block|,
literal|"555"
block|,
literal|"710"
block|,
literal|"777"
block|}
decl_stmt|;
for|for
control|(
name|String
name|perm
range|:
name|permissionsArray
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DEFAULT_CONTAINER_EXECUTOR_LOG_DIRS_PERMISSIONS
argument_list|,
name|perm
argument_list|)
expr_stmt|;
name|executor
operator|.
name|clearLogDirPermissions
argument_list|()
expr_stmt|;
name|FsPermission
name|logDirPerm
init|=
operator|new
name|FsPermission
argument_list|(
name|executor
operator|.
name|getLogDirPermissions
argument_list|()
argument_list|)
decl_stmt|;
name|executor
operator|.
name|createAppLogDirs
argument_list|(
name|appId
argument_list|,
name|logDirs
argument_list|,
name|user
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|dir
range|:
name|logDirs
control|)
block|{
name|FileStatus
name|stats
init|=
name|lfs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|appId
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|logDirPerm
argument_list|,
name|stats
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|appId
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|deleteTmpFiles
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testContainerLaunchError ()
specifier|public
name|void
name|testContainerLaunchError
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|BASE_TMP_PATH
operator|=
operator|new
name|Path
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|TestDefaultContainerExecutor
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Path
name|localDir
init|=
operator|new
name|Path
argument_list|(
name|BASE_TMP_PATH
argument_list|,
literal|"localDir"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|localDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|localDirs
operator|.
name|add
argument_list|(
name|localDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|logDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Path
name|logDir
init|=
operator|new
name|Path
argument_list|(
name|BASE_TMP_PATH
argument_list|,
literal|"logDir"
argument_list|)
decl_stmt|;
name|logDirs
operator|.
name|add
argument_list|(
name|logDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_PERMISSIONS_UMASK_KEY
argument_list|,
literal|"077"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|localDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|logDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|FileContext
name|lfs
init|=
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|DefaultContainerExecutor
name|mockExec
init|=
name|spy
argument_list|(
operator|new
name|DefaultContainerExecutor
argument_list|(
name|lfs
argument_list|)
argument_list|)
decl_stmt|;
name|mockExec
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocationOnMock
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|diagnostics
init|=
operator|(
name|String
operator|)
name|invocationOnMock
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid Diagnostics message: "
operator|+
name|diagnostics
argument_list|,
name|diagnostics
operator|.
name|contains
argument_list|(
literal|"No such file or directory"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|mockExec
argument_list|)
operator|.
name|logOutput
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|appSubmitter
init|=
literal|"nobody"
decl_stmt|;
name|String
name|appId
init|=
literal|"APP_ID"
decl_stmt|;
name|String
name|containerId
init|=
literal|"CONTAINER_ID"
decl_stmt|;
name|Container
name|container
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerId
name|cId
init|=
name|mock
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|context
init|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getLaunchContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
try|try
block|{
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocationOnMock
parameter_list|)
throws|throws
name|Throwable
block|{
name|ContainerDiagnosticsUpdateEvent
name|event
init|=
operator|(
name|ContainerDiagnosticsUpdateEvent
operator|)
name|invocationOnMock
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid Diagnostics message: "
operator|+
name|event
operator|.
name|getDiagnosticsUpdate
argument_list|()
argument_list|,
name|event
operator|.
name|getDiagnosticsUpdate
argument_list|()
operator|.
name|contains
argument_list|(
literal|"No such file or directory"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|container
argument_list|)
operator|.
name|handle
argument_list|(
name|any
argument_list|(
name|ContainerDiagnosticsUpdateEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cId
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getEnvironment
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|mockExec
operator|.
name|createUserLocalDirs
argument_list|(
name|localDirs
argument_list|,
name|appSubmitter
argument_list|)
expr_stmt|;
name|mockExec
operator|.
name|createUserCacheDirs
argument_list|(
name|localDirs
argument_list|,
name|appSubmitter
argument_list|)
expr_stmt|;
name|mockExec
operator|.
name|createAppDirs
argument_list|(
name|localDirs
argument_list|,
name|appSubmitter
argument_list|,
name|appId
argument_list|)
expr_stmt|;
name|mockExec
operator|.
name|createAppLogDirs
argument_list|(
name|appId
argument_list|,
name|logDirs
argument_list|,
name|appSubmitter
argument_list|)
expr_stmt|;
name|Path
name|scriptPath
init|=
operator|new
name|Path
argument_list|(
literal|"file:///bin/echo"
argument_list|)
decl_stmt|;
name|Path
name|tokensPath
init|=
operator|new
name|Path
argument_list|(
literal|"file:///dev/null"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|File
name|tmp
init|=
operator|new
name|File
argument_list|(
name|BASE_TMP_PATH
operator|.
name|toString
argument_list|()
argument_list|,
literal|"test_echo.cmd"
argument_list|)
decl_stmt|;
name|BufferedWriter
name|output
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|tmp
argument_list|)
argument_list|)
decl_stmt|;
name|output
operator|.
name|write
argument_list|(
literal|"Exit 1"
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
literal|"Echo No such file or directory 1>&2"
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
name|scriptPath
operator|=
operator|new
name|Path
argument_list|(
name|tmp
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|tmp
operator|=
operator|new
name|File
argument_list|(
name|BASE_TMP_PATH
operator|.
name|toString
argument_list|()
argument_list|,
literal|"tokens"
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|tokensPath
operator|=
operator|new
name|Path
argument_list|(
name|tmp
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Path
name|workDir
init|=
name|localDir
decl_stmt|;
name|Path
name|pidFile
init|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"pid.txt"
argument_list|)
decl_stmt|;
name|mockExec
operator|.
name|init
argument_list|()
expr_stmt|;
name|mockExec
operator|.
name|activateContainer
argument_list|(
name|cId
argument_list|,
name|pidFile
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|mockExec
operator|.
name|launchContainer
argument_list|(
operator|new
name|ContainerStartContext
operator|.
name|Builder
argument_list|()
operator|.
name|setContainer
argument_list|(
name|container
argument_list|)
operator|.
name|setNmPrivateContainerScriptPath
argument_list|(
name|scriptPath
argument_list|)
operator|.
name|setNmPrivateTokensPath
argument_list|(
name|tokensPath
argument_list|)
operator|.
name|setUser
argument_list|(
name|appSubmitter
argument_list|)
operator|.
name|setAppId
argument_list|(
name|appId
argument_list|)
operator|.
name|setContainerWorkDir
argument_list|(
name|workDir
argument_list|)
operator|.
name|setLocalDirs
argument_list|(
name|localDirs
argument_list|)
operator|.
name|setLogDirs
argument_list|(
name|logDirs
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|mockExec
operator|.
name|deleteAsUser
argument_list|(
operator|new
name|DeletionAsUserContext
operator|.
name|Builder
argument_list|()
operator|.
name|setUser
argument_list|(
name|appSubmitter
argument_list|)
operator|.
name|setSubDir
argument_list|(
name|localDir
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|mockExec
operator|.
name|deleteAsUser
argument_list|(
operator|new
name|DeletionAsUserContext
operator|.
name|Builder
argument_list|()
operator|.
name|setUser
argument_list|(
name|appSubmitter
argument_list|)
operator|.
name|setSubDir
argument_list|(
name|logDir
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testStartLocalizer ()
specifier|public
name|void
name|testStartLocalizer
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnException
block|{
specifier|final
name|Path
name|firstDir
init|=
operator|new
name|Path
argument_list|(
name|BASE_TMP_PATH
argument_list|,
literal|"localDir1"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|localDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|secondDir
init|=
operator|new
name|Path
argument_list|(
name|BASE_TMP_PATH
argument_list|,
literal|"localDir2"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|logDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|logDir
init|=
operator|new
name|Path
argument_list|(
name|BASE_TMP_PATH
argument_list|,
literal|"logDir"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|tokenDir
init|=
operator|new
name|Path
argument_list|(
name|BASE_TMP_PATH
argument_list|,
literal|"tokenDir"
argument_list|)
decl_stmt|;
name|FsPermission
name|perms
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0770
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|FileContext
name|mockLfs
init|=
name|spy
argument_list|(
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|FileContext
operator|.
name|Util
name|mockUtil
init|=
name|spy
argument_list|(
name|mockLfs
operator|.
name|util
argument_list|()
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocationOnMock
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
name|mockUtil
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|mockLfs
argument_list|)
operator|.
name|util
argument_list|()
expr_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocationOnMock
parameter_list|)
throws|throws
name|Throwable
block|{
name|Path
name|dest
init|=
operator|(
name|Path
operator|)
name|invocationOnMock
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|dest
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|firstDir
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
comment|// throw an Exception when copy token to the first local dir
comment|// to simulate no space on the first drive
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No space on this drive "
operator|+
name|dest
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
comment|// copy token to the second local dir
name|DataOutputStream
name|tokenOut
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|tokenOut
operator|=
name|mockLfs
operator|.
name|create
argument_list|(
name|dest
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CREATE
argument_list|,
name|OVERWRITE
argument_list|)
argument_list|)
expr_stmt|;
name|credentials
operator|.
name|writeTokenStorageToStream
argument_list|(
name|tokenOut
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|tokenOut
operator|!=
literal|null
condition|)
block|{
name|tokenOut
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|mockUtil
argument_list|)
operator|.
name|copy
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocationOnMock
parameter_list|)
throws|throws
name|Throwable
block|{
name|Path
name|p
init|=
operator|(
name|Path
operator|)
name|invocationOnMock
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
comment|// let second local directory return more free space than
comment|// first local directory
if|if
condition|(
name|p
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|firstDir
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|FsStatus
argument_list|(
literal|2000
argument_list|,
literal|2000
argument_list|,
literal|0
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|FsStatus
argument_list|(
literal|1000
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|)
return|;
block|}
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|mockLfs
argument_list|)
operator|.
name|getFsStatus
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|DefaultContainerExecutor
name|mockExec
init|=
name|spy
argument_list|(
operator|new
name|DefaultContainerExecutor
argument_list|(
name|mockLfs
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|ContainerLocalizer
name|createContainerLocalizer
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|appId
parameter_list|,
name|String
name|locId
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|localDirs
parameter_list|,
name|FileContext
name|localizerFc
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Spy on the localizer and make it return valid heart-beat
comment|// responses even though there is no real NodeManager.
name|ContainerLocalizer
name|localizer
init|=
name|super
operator|.
name|createContainerLocalizer
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|locId
argument_list|,
name|localDirs
argument_list|,
name|localizerFc
argument_list|)
decl_stmt|;
name|ContainerLocalizer
name|spyLocalizer
init|=
name|spy
argument_list|(
name|localizer
argument_list|)
decl_stmt|;
name|LocalizationProtocol
name|nmProxy
init|=
name|mock
argument_list|(
name|LocalizationProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|when
argument_list|(
name|nmProxy
operator|.
name|heartbeat
argument_list|(
name|isA
argument_list|(
name|LocalizerStatus
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|MockLocalizerHeartbeatResponse
argument_list|(
name|LocalizerAction
operator|.
name|DIE
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ResourceLocalizationSpec
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|when
argument_list|(
name|spyLocalizer
operator|.
name|getProxy
argument_list|(
name|any
argument_list|(
name|InetSocketAddress
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nmProxy
argument_list|)
expr_stmt|;
return|return
name|spyLocalizer
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|mockExec
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|localDirs
operator|.
name|add
argument_list|(
name|mockLfs
operator|.
name|makeQualified
argument_list|(
name|firstDir
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|localDirs
operator|.
name|add
argument_list|(
name|mockLfs
operator|.
name|makeQualified
argument_list|(
name|secondDir
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|logDirs
operator|.
name|add
argument_list|(
name|mockLfs
operator|.
name|makeQualified
argument_list|(
name|logDir
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|localDirs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|localDirs
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|logDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mockLfs
operator|.
name|mkdir
argument_list|(
name|tokenDir
argument_list|,
name|perms
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Path
name|nmPrivateCTokensPath
init|=
operator|new
name|Path
argument_list|(
name|tokenDir
argument_list|,
literal|"test.tokens"
argument_list|)
decl_stmt|;
name|String
name|appSubmitter
init|=
literal|"nobody"
decl_stmt|;
name|String
name|appId
init|=
literal|"APP_ID"
decl_stmt|;
name|String
name|locId
init|=
literal|"LOC_ID"
decl_stmt|;
name|LocalDirsHandlerService
name|dirsHandler
init|=
name|mock
argument_list|(
name|LocalDirsHandlerService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|dirsHandler
operator|.
name|getLocalDirs
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|localDirs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|dirsHandler
operator|.
name|getLogDirs
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|logDirs
argument_list|)
expr_stmt|;
try|try
block|{
name|mockExec
operator|.
name|startLocalizer
argument_list|(
operator|new
name|LocalizerStartContext
operator|.
name|Builder
argument_list|()
operator|.
name|setNmPrivateContainerTokens
argument_list|(
name|nmPrivateCTokensPath
argument_list|)
operator|.
name|setNmAddr
argument_list|(
literal|null
argument_list|)
operator|.
name|setUser
argument_list|(
name|appSubmitter
argument_list|)
operator|.
name|setAppId
argument_list|(
name|appId
argument_list|)
operator|.
name|setLocId
argument_list|(
name|locId
argument_list|)
operator|.
name|setDirsHandler
argument_list|(
name|dirsHandler
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"StartLocalizer failed to copy token file: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|mockExec
operator|.
name|deleteAsUser
argument_list|(
operator|new
name|DeletionAsUserContext
operator|.
name|Builder
argument_list|()
operator|.
name|setUser
argument_list|(
name|appSubmitter
argument_list|)
operator|.
name|setSubDir
argument_list|(
name|firstDir
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|mockExec
operator|.
name|deleteAsUser
argument_list|(
operator|new
name|DeletionAsUserContext
operator|.
name|Builder
argument_list|()
operator|.
name|setUser
argument_list|(
name|appSubmitter
argument_list|)
operator|.
name|setSubDir
argument_list|(
name|secondDir
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|mockExec
operator|.
name|deleteAsUser
argument_list|(
operator|new
name|DeletionAsUserContext
operator|.
name|Builder
argument_list|()
operator|.
name|setUser
argument_list|(
name|appSubmitter
argument_list|)
operator|.
name|setSubDir
argument_list|(
name|logDir
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|deleteTmpFiles
argument_list|()
expr_stmt|;
block|}
comment|// Verify that the calls happen the expected number of times
name|verify
argument_list|(
name|mockUtil
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|copy
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockLfs
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|getFsStatus
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//  @Test
comment|//  public void testInit() throws IOException, InterruptedException {
comment|//    Configuration conf = new Configuration();
comment|//    AbstractFileSystem spylfs =
comment|//      spy(FileContext.getLocalFSFileContext().getDefaultFileSystem());
comment|//    // don't actually create dirs
comment|//    //doNothing().when(spylfs).mkdir(Matchers.<Path>anyObject(),
comment|//    //    Matchers.<FsPermission>anyObject(), anyBoolean());
comment|//    FileContext lfs = FileContext.getFileContext(spylfs, conf);
comment|//
comment|//    Path basedir = new Path("target",
comment|//        TestDefaultContainerExecutor.class.getSimpleName());
comment|//    List<String> localDirs = new ArrayList<String>();
comment|//    List<Path> localPaths = new ArrayList<Path>();
comment|//    for (int i = 0; i< 4; ++i) {
comment|//      Path p = new Path(basedir, i + "");
comment|//      lfs.mkdir(p, null, true);
comment|//      localPaths.add(p);
comment|//      localDirs.add(p.toString());
comment|//    }
comment|//    final String user = "yak";
comment|//    final String appId = "app_RM_0";
comment|//    final Path logDir = new Path(basedir, "logs");
comment|//    final Path nmLocal = new Path(basedir, "nmPrivate/" + user + "/" + appId);
comment|//    final InetSocketAddress nmAddr = new InetSocketAddress("foobar", 8040);
comment|//    System.out.println("NMLOCAL: " + nmLocal);
comment|//    Random r = new Random();
comment|//
comment|//    /*
comment|//    // XXX FileContext cannot be reasonably mocked to do this
comment|//    // mock jobFiles copy
comment|//    long fileSeed = r.nextLong();
comment|//    r.setSeed(fileSeed);
comment|//    System.out.println("SEED: " + seed);
comment|//    Path fileCachePath = new Path(nmLocal, ApplicationLocalizer.FILECACHE_FILE);
comment|//    DataOutputBuffer fileCacheBytes = mockStream(spylfs, fileCachePath, r, 512);
comment|//
comment|//    // mock jobTokens copy
comment|//    long jobSeed = r.nextLong();
comment|//    r.setSeed(jobSeed);
comment|//    System.out.println("SEED: " + seed);
comment|//    Path jobTokenPath = new Path(nmLocal, ApplicationLocalizer.JOBTOKEN_FILE);
comment|//    DataOutputBuffer jobTokenBytes = mockStream(spylfs, jobTokenPath, r, 512);
comment|//    */
comment|//
comment|//    // create jobFiles
comment|//    long fileSeed = r.nextLong();
comment|//    r.setSeed(fileSeed);
comment|//    System.out.println("SEED: " + fileSeed);
comment|//    Path fileCachePath = new Path(nmLocal, ApplicationLocalizer.FILECACHE_FILE);
comment|//    byte[] fileCacheBytes = createTmpFile(fileCachePath, r, 512);
comment|//
comment|//    // create jobTokens
comment|//    long jobSeed = r.nextLong();
comment|//    r.setSeed(jobSeed);
comment|//    System.out.println("SEED: " + jobSeed);
comment|//    Path jobTokenPath = new Path(nmLocal, ApplicationLocalizer.JOBTOKEN_FILE);
comment|//    byte[] jobTokenBytes = createTmpFile(jobTokenPath, r, 512);
comment|//
comment|//    DefaultContainerExecutor dce = new DefaultContainerExecutor(lfs);
comment|//    Localization mockLocalization = mock(Localization.class);
comment|//    ApplicationLocalizer spyLocalizer =
comment|//      spy(new ApplicationLocalizer(lfs, user, appId, logDir,
comment|//            localPaths));
comment|//    // ignore cache localization
comment|//    doNothing().when(spyLocalizer).localizeFiles(
comment|//        Matchers.<Localization>anyObject(), Matchers.<Path>anyObject());
comment|//    Path workingDir = lfs.getWorkingDirectory();
comment|//    dce.initApplication(spyLocalizer, nmLocal, mockLocalization, localPaths);
comment|//    lfs.setWorkingDirectory(workingDir);
comment|//
comment|//    for (Path localdir : localPaths) {
comment|//      Path userdir = lfs.makeQualified(new Path(localdir,
comment|//            new Path(ApplicationLocalizer.USERCACHE, user)));
comment|//      // $localdir/$user
comment|//      verify(spylfs).mkdir(userdir,
comment|//          new FsPermission(ApplicationLocalizer.USER_PERM), true);
comment|//      // $localdir/$user/appcache
comment|//      Path jobdir = new Path(userdir, ApplicationLocalizer.appcache);
comment|//      verify(spylfs).mkdir(jobdir,
comment|//          new FsPermission(ApplicationLocalizer.appcache_PERM), true);
comment|//      // $localdir/$user/filecache
comment|//      Path filedir = new Path(userdir, ApplicationLocalizer.FILECACHE);
comment|//      verify(spylfs).mkdir(filedir,
comment|//          new FsPermission(ApplicationLocalizer.FILECACHE_PERM), true);
comment|//      // $localdir/$user/appcache/$appId
comment|//      Path appdir = new Path(jobdir, appId);
comment|//      verify(spylfs).mkdir(appdir,
comment|//          new FsPermission(ApplicationLocalizer.APPDIR_PERM), true);
comment|//      // $localdir/$user/appcache/$appId/work
comment|//      Path workdir = new Path(appdir, ApplicationLocalizer.WORKDIR);
comment|//      verify(spylfs, atMost(1)).mkdir(workdir, FsPermission.getDefault(), true);
comment|//    }
comment|//    // $logdir/$appId
comment|//    Path logdir = new Path(lfs.makeQualified(logDir), appId);
comment|//    verify(spylfs).mkdir(logdir,
comment|//        new FsPermission(ApplicationLocalizer.LOGDIR_PERM), true);
comment|//  }
block|}
end_class

end_unit

