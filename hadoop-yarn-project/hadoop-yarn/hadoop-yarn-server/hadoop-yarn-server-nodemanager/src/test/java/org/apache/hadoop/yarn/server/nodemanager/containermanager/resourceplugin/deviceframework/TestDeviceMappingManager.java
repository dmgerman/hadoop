begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.deviceframework
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|deviceframework
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|Device
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|DevicePlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|DeviceRegisterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|DeviceRuntimeSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|YarnRuntimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ResourceMappings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|CGroupsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|ResourceHandlerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|runtime
operator|.
name|ContainerRuntimeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|TestResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Tests for DeviceMappingManager.  * Note that we test it under multi-threaded situation  * */
end_comment

begin_class
DECL|class|TestDeviceMappingManager
specifier|public
class|class
name|TestDeviceMappingManager
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestDeviceMappingManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|tempResourceTypesFile
specifier|private
name|String
name|tempResourceTypesFile
decl_stmt|;
DECL|field|dmm
specifier|private
name|DeviceMappingManager
name|dmm
decl_stmt|;
DECL|field|containerLauncher
specifier|private
name|ExecutorService
name|containerLauncher
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|mockCGroupsHandler
specifier|private
name|CGroupsHandler
name|mockCGroupsHandler
decl_stmt|;
DECL|field|mockPrivilegedExecutor
specifier|private
name|PrivilegedOperationExecutor
name|mockPrivilegedExecutor
decl_stmt|;
DECL|field|mockCtx
specifier|private
name|Context
name|mockCtx
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup resource-types.xml
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|ResourceUtils
operator|.
name|resetResourceTypes
argument_list|()
expr_stmt|;
name|String
name|resourceTypesFile
init|=
literal|"resource-types-pluggable-devices.xml"
decl_stmt|;
name|this
operator|.
name|tempResourceTypesFile
operator|=
name|TestResourceUtils
operator|.
name|setupResourceTypes
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|resourceTypesFile
argument_list|)
expr_stmt|;
name|NodeManager
operator|.
name|NMContext
name|context
init|=
name|mock
argument_list|(
name|NodeManager
operator|.
name|NMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|NMStateStoreService
name|storeService
init|=
name|mock
argument_list|(
name|NMStateStoreService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getNMStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|storeService
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|storeService
argument_list|)
operator|.
name|storeAssignedResources
argument_list|(
name|isA
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|dmm
operator|=
operator|new
name|DeviceMappingManager
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|int
name|deviceCount
init|=
literal|100
decl_stmt|;
name|TreeSet
argument_list|<
name|Device
argument_list|>
name|r
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deviceCount
condition|;
name|i
operator|++
control|)
block|{
name|r
operator|.
name|add
argument_list|(
name|Device
operator|.
name|Builder
operator|.
name|newInstance
argument_list|()
operator|.
name|setId
argument_list|(
name|i
argument_list|)
operator|.
name|setDevPath
argument_list|(
literal|"/dev/hdwA"
operator|+
name|i
argument_list|)
operator|.
name|setMajorNumber
argument_list|(
literal|243
argument_list|)
operator|.
name|setMinorNumber
argument_list|(
name|i
argument_list|)
operator|.
name|setBusID
argument_list|(
literal|"0000:65:00."
operator|+
name|i
argument_list|)
operator|.
name|setHealthy
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TreeSet
argument_list|<
name|Device
argument_list|>
name|r1
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deviceCount
condition|;
name|i
operator|++
control|)
block|{
name|r1
operator|.
name|add
argument_list|(
name|Device
operator|.
name|Builder
operator|.
name|newInstance
argument_list|()
operator|.
name|setId
argument_list|(
name|i
argument_list|)
operator|.
name|setDevPath
argument_list|(
literal|"/dev/cmp"
operator|+
name|i
argument_list|)
operator|.
name|setMajorNumber
argument_list|(
literal|100
argument_list|)
operator|.
name|setMinorNumber
argument_list|(
name|i
argument_list|)
operator|.
name|setBusID
argument_list|(
literal|"0000:11:00."
operator|+
name|i
argument_list|)
operator|.
name|setHealthy
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dmm
operator|.
name|addDeviceSet
argument_list|(
literal|"cmpA.com/hdwA"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|dmm
operator|.
name|addDeviceSet
argument_list|(
literal|"cmp.com/cmp"
argument_list|,
name|r1
argument_list|)
expr_stmt|;
name|containerLauncher
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|mockCGroupsHandler
operator|=
name|mock
argument_list|(
name|CGroupsHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|mockPrivilegedExecutor
operator|=
name|mock
argument_list|(
name|PrivilegedOperationExecutor
operator|.
name|class
argument_list|)
expr_stmt|;
name|mockCtx
operator|=
name|mock
argument_list|(
name|NodeManager
operator|.
name|NMContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCtx
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
comment|// cleanup resource-types.xml
name|File
name|dest
init|=
operator|new
name|File
argument_list|(
name|this
operator|.
name|tempResourceTypesFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|dest
operator|.
name|exists
argument_list|()
condition|)
block|{
name|boolean
name|flag
init|=
name|dest
operator|.
name|delete
argument_list|()
decl_stmt|;
block|}
block|}
comment|/**    * Simulate launch different containers requesting different resource.    * */
annotation|@
name|Test
DECL|method|testAllocation ()
specifier|public
name|void
name|testAllocation
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ResourceHandlerException
block|{
name|int
name|totalContainerCount
init|=
literal|10
decl_stmt|;
name|String
name|resourceName1
init|=
literal|"cmpA.com/hdwA"
decl_stmt|;
name|String
name|resourceName2
init|=
literal|"cmp.com/cmp"
decl_stmt|;
name|DeviceMappingManager
name|dmmSpy
init|=
name|spy
argument_list|(
name|dmm
argument_list|)
decl_stmt|;
comment|// generate a list of container
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Container
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|containerSet
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|containerSet
operator|.
name|put
argument_list|(
name|resourceName1
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|containerSet
operator|.
name|put
argument_list|(
name|resourceName2
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|Long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalContainerCount
condition|;
name|i
operator|++
control|)
block|{
comment|// Random requeted device
name|int
name|num
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|+
literal|1
decl_stmt|;
comment|// Random requested resource type
name|String
name|resourceName
decl_stmt|;
name|int
name|seed
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|seed
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|resourceName
operator|=
name|resourceName1
expr_stmt|;
block|}
else|else
block|{
name|resourceName
operator|=
name|resourceName2
expr_stmt|;
block|}
name|Container
name|c
init|=
name|mockContainerWithDeviceRequest
argument_list|(
name|i
argument_list|,
name|resourceName
argument_list|,
name|num
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|containerSet
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|put
argument_list|(
name|c
argument_list|,
name|num
argument_list|)
expr_stmt|;
name|DevicePlugin
name|myPlugin
init|=
operator|new
name|MyTestPlugin
argument_list|()
decl_stmt|;
name|DevicePluginAdapter
name|dpa
init|=
operator|new
name|DevicePluginAdapter
argument_list|(
name|resourceName
argument_list|,
name|myPlugin
argument_list|,
name|dmm
argument_list|)
decl_stmt|;
name|DeviceResourceHandlerImpl
name|dri
init|=
operator|new
name|DeviceResourceHandlerImpl
argument_list|(
name|resourceName
argument_list|,
name|dpa
argument_list|,
name|dmmSpy
argument_list|,
name|mockCGroupsHandler
argument_list|,
name|mockPrivilegedExecutor
argument_list|,
name|mockCtx
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|Integer
argument_list|>
name|f
init|=
name|containerLauncher
operator|.
name|submit
argument_list|(
operator|new
name|MyContainerLaunch
argument_list|(
name|dri
argument_list|,
name|c
argument_list|,
name|i
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
block|}
name|containerLauncher
operator|.
name|shutdown
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|containerLauncher
operator|.
name|awaitTermination
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Wait for the threads to finish"
argument_list|)
expr_stmt|;
block|}
name|Long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Each container preStart spends roughly: {} ms"
argument_list|,
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|/
name|totalContainerCount
argument_list|)
expr_stmt|;
comment|// Ensure invocation times
name|verify
argument_list|(
name|dmmSpy
argument_list|,
name|times
argument_list|(
name|totalContainerCount
argument_list|)
argument_list|)
operator|.
name|assignDevices
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure used devices' count for each type is correct
name|int
name|totalAllocatedCount
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|Device
argument_list|,
name|ContainerId
argument_list|>
name|used1
init|=
name|dmm
operator|.
name|getAllUsedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName1
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Device
argument_list|,
name|ContainerId
argument_list|>
name|used2
init|=
name|dmm
operator|.
name|getAllUsedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName2
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Container
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|containerSet
operator|.
name|get
argument_list|(
name|resourceName1
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|totalAllocatedCount
operator|+=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Container
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|containerSet
operator|.
name|get
argument_list|(
name|resourceName2
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|totalAllocatedCount
operator|+=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totalAllocatedCount
argument_list|,
name|used1
operator|.
name|size
argument_list|()
operator|+
name|used2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure each container has correct devices
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Container
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|containerSet
operator|.
name|get
argument_list|(
name|resourceName1
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|containerWanted
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|actualAllocated
init|=
name|dmm
operator|.
name|getAllocatedDevices
argument_list|(
name|resourceName1
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|containerWanted
argument_list|,
name|actualAllocated
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Container
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|containerSet
operator|.
name|get
argument_list|(
name|resourceName2
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|containerWanted
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|actualAllocated
init|=
name|dmm
operator|.
name|getAllocatedDevices
argument_list|(
name|resourceName2
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|containerWanted
argument_list|,
name|actualAllocated
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Simulate launch containers and cleanup.    * */
annotation|@
name|Test
DECL|method|testAllocationAndCleanup ()
specifier|public
name|void
name|testAllocationAndCleanup
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ResourceHandlerException
throws|,
name|IOException
block|{
name|int
name|totalContainerCount
init|=
literal|10
decl_stmt|;
name|String
name|resourceName1
init|=
literal|"cmpA.com/hdwA"
decl_stmt|;
name|String
name|resourceName2
init|=
literal|"cmp.com/cmp"
decl_stmt|;
name|DeviceMappingManager
name|dmmSpy
init|=
name|spy
argument_list|(
name|dmm
argument_list|)
decl_stmt|;
comment|// generate a list of container
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Container
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|containerSet
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|containerSet
operator|.
name|put
argument_list|(
name|resourceName1
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|containerSet
operator|.
name|put
argument_list|(
name|resourceName2
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalContainerCount
condition|;
name|i
operator|++
control|)
block|{
comment|// Random requeted device
name|int
name|num
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|+
literal|1
decl_stmt|;
comment|// Random requested resource type
name|String
name|resourceName
decl_stmt|;
name|int
name|seed
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|seed
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|resourceName
operator|=
name|resourceName1
expr_stmt|;
block|}
else|else
block|{
name|resourceName
operator|=
name|resourceName2
expr_stmt|;
block|}
name|Container
name|c
init|=
name|mockContainerWithDeviceRequest
argument_list|(
name|i
argument_list|,
name|resourceName
argument_list|,
name|num
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|containerSet
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|put
argument_list|(
name|c
argument_list|,
name|num
argument_list|)
expr_stmt|;
name|DevicePlugin
name|myPlugin
init|=
operator|new
name|MyTestPlugin
argument_list|()
decl_stmt|;
name|DevicePluginAdapter
name|dpa
init|=
operator|new
name|DevicePluginAdapter
argument_list|(
name|resourceName
argument_list|,
name|myPlugin
argument_list|,
name|dmm
argument_list|)
decl_stmt|;
name|DeviceResourceHandlerImpl
name|dri
init|=
operator|new
name|DeviceResourceHandlerImpl
argument_list|(
name|resourceName
argument_list|,
name|dpa
argument_list|,
name|dmmSpy
argument_list|,
name|mockCGroupsHandler
argument_list|,
name|mockPrivilegedExecutor
argument_list|,
name|mockCtx
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|Integer
argument_list|>
name|f
init|=
name|containerLauncher
operator|.
name|submit
argument_list|(
operator|new
name|MyContainerLaunch
argument_list|(
name|dri
argument_list|,
name|c
argument_list|,
name|i
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
block|}
name|containerLauncher
operator|.
name|shutdown
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|containerLauncher
operator|.
name|awaitTermination
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Wait for the threads to finish"
argument_list|)
expr_stmt|;
block|}
comment|// Ensure invocation times
name|verify
argument_list|(
name|dmmSpy
argument_list|,
name|times
argument_list|(
name|totalContainerCount
argument_list|)
argument_list|)
operator|.
name|assignDevices
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dmmSpy
argument_list|,
name|times
argument_list|(
name|totalContainerCount
argument_list|)
argument_list|)
operator|.
name|cleanupAssignedDevices
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure all devices are back
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dmm
operator|.
name|getAllUsedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dmm
operator|.
name|getAllUsedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|mockContainerWithDeviceRequest (int id, String resourceName, int numDeviceRequest, boolean dockerContainerEnabled)
specifier|private
specifier|static
name|Container
name|mockContainerWithDeviceRequest
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|resourceName
parameter_list|,
name|int
name|numDeviceRequest
parameter_list|,
name|boolean
name|dockerContainerEnabled
parameter_list|)
block|{
name|Container
name|c
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getContainerId
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|Resource
name|res
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ResourceMappings
name|resMapping
init|=
operator|new
name|ResourceMappings
argument_list|()
decl_stmt|;
name|res
operator|.
name|setResourceValue
argument_list|(
name|resourceName
argument_list|,
name|numDeviceRequest
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getResourceMappings
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resMapping
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|clc
init|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|dockerContainerEnabled
condition|)
block|{
name|env
operator|.
name|put
argument_list|(
name|ContainerRuntimeConstants
operator|.
name|ENV_CONTAINER_TYPE
argument_list|,
name|ContainerRuntimeConstants
operator|.
name|CONTAINER_RUNTIME_DOCKER
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|clc
operator|.
name|getEnvironment
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getLaunchContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clc
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
DECL|method|getContainerId (int id)
specifier|private
specifier|static
name|ContainerId
name|getContainerId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
name|id
argument_list|)
return|;
block|}
DECL|class|MyContainerLaunch
specifier|private
specifier|static
class|class
name|MyContainerLaunch
implements|implements
name|Callable
argument_list|<
name|Integer
argument_list|>
block|{
DECL|field|deviceResourceHandler
specifier|private
name|DeviceResourceHandlerImpl
name|deviceResourceHandler
decl_stmt|;
DECL|field|container
specifier|private
name|Container
name|container
decl_stmt|;
DECL|field|doCleanup
specifier|private
name|boolean
name|doCleanup
decl_stmt|;
DECL|field|cId
specifier|private
name|int
name|cId
decl_stmt|;
DECL|method|MyContainerLaunch (DeviceResourceHandlerImpl dri, Container c, int id, boolean cleanup)
name|MyContainerLaunch
parameter_list|(
name|DeviceResourceHandlerImpl
name|dri
parameter_list|,
name|Container
name|c
parameter_list|,
name|int
name|id
parameter_list|,
name|boolean
name|cleanup
parameter_list|)
block|{
name|deviceResourceHandler
operator|=
name|dri
expr_stmt|;
name|container
operator|=
name|c
expr_stmt|;
name|doCleanup
operator|=
name|cleanup
expr_stmt|;
name|cId
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|Integer
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|deviceResourceHandler
operator|.
name|preStart
argument_list|(
name|container
argument_list|)
expr_stmt|;
if|if
condition|(
name|doCleanup
condition|)
block|{
name|int
name|seconds
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"sleep "
operator|+
name|seconds
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|seconds
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|deviceResourceHandler
operator|.
name|postComplete
argument_list|(
name|getContainerId
argument_list|(
name|cId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ResourceHandlerException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
block|}
DECL|class|MyTestPlugin
specifier|private
specifier|static
class|class
name|MyTestPlugin
implements|implements
name|DevicePlugin
block|{
DECL|field|RESOURCE_NAME
specifier|private
specifier|final
specifier|static
name|String
name|RESOURCE_NAME
init|=
literal|"abc"
decl_stmt|;
annotation|@
name|Override
DECL|method|getRegisterRequestInfo ()
specifier|public
name|DeviceRegisterRequest
name|getRegisterRequestInfo
parameter_list|()
block|{
return|return
name|DeviceRegisterRequest
operator|.
name|Builder
operator|.
name|newInstance
argument_list|()
operator|.
name|setResourceName
argument_list|(
name|RESOURCE_NAME
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getDevices ()
specifier|public
name|Set
argument_list|<
name|Device
argument_list|>
name|getDevices
parameter_list|()
block|{
name|TreeSet
argument_list|<
name|Device
argument_list|>
name|r
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
return|return
name|r
return|;
block|}
annotation|@
name|Override
DECL|method|onDevicesAllocated (Set<Device> allocatedDevices, YarnRuntimeType yarnRuntime)
specifier|public
name|DeviceRuntimeSpec
name|onDevicesAllocated
parameter_list|(
name|Set
argument_list|<
name|Device
argument_list|>
name|allocatedDevices
parameter_list|,
name|YarnRuntimeType
name|yarnRuntime
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|onDevicesReleased (Set<Device> releasedDevices)
specifier|public
name|void
name|onDevicesReleased
parameter_list|(
name|Set
argument_list|<
name|Device
argument_list|>
name|releasedDevices
parameter_list|)
block|{      }
block|}
comment|// MyPlugin
block|}
end_class

end_unit

