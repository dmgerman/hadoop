begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.resources.numa
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|numa
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ResourceMappings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ResourceMappings
operator|.
name|AssignedResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|ResourceHandlerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test class for NumaResourceHandlerImpl.  *  */
end_comment

begin_class
DECL|class|TestNumaResourceHandlerImpl
specifier|public
class|class
name|TestNumaResourceHandlerImpl
block|{
DECL|field|conf
specifier|private
name|YarnConfiguration
name|conf
decl_stmt|;
DECL|field|numaResourceHandler
specifier|private
name|NumaResourceHandlerImpl
name|numaResourceHandler
decl_stmt|;
DECL|field|mockContainer
specifier|private
name|Container
name|mockContainer
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
throws|,
name|ResourceHandlerException
block|{
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|setNumaTopologyConfigs
argument_list|()
expr_stmt|;
name|Context
name|mockContext
init|=
name|createAndGetMockContext
argument_list|()
decl_stmt|;
name|NMStateStoreService
name|mock
init|=
name|mock
argument_list|(
name|NMStateStoreService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getNMStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|)
expr_stmt|;
name|numaResourceHandler
operator|=
operator|new
name|NumaResourceHandlerImpl
argument_list|(
name|conf
argument_list|,
name|mockContext
argument_list|)
expr_stmt|;
name|numaResourceHandler
operator|.
name|bootstrap
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|mockContainer
operator|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocateNumaMemoryResource ()
specifier|public
name|void
name|testAllocateNumaMemoryResource
parameter_list|()
throws|throws
name|ResourceHandlerException
block|{
comment|// allocates node 0 for memory and cpu
name|testAllocateNumaResource
argument_list|(
literal|"container_1481156246874_0001_01_000001"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"0"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
comment|// allocates node 1 for memory and cpu since allocator uses round
comment|// robin assignment
name|testAllocateNumaResource
argument_list|(
literal|"container_1481156246874_0001_01_000002"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|60000
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"1"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// allocates node 0,1 for memory since there is no sufficient memory in any
comment|// one node
name|testAllocateNumaResource
argument_list|(
literal|"container_1481156246874_0001_01_000003"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|80000
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"0,1"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
comment|// returns null since there are no sufficient resources available for the
comment|// request
name|when
argument_list|(
name|mockContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ContainerId
operator|.
name|fromString
argument_list|(
literal|"container_1481156246874_0001_01_000004"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContainer
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|80000
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|numaResourceHandler
operator|.
name|preStart
argument_list|(
name|mockContainer
argument_list|)
argument_list|)
expr_stmt|;
comment|// allocates node 1 for memory and cpu
name|testAllocateNumaResource
argument_list|(
literal|"container_1481156246874_0001_01_000005"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"1"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocateNumaCpusResource ()
specifier|public
name|void
name|testAllocateNumaCpusResource
parameter_list|()
throws|throws
name|ResourceHandlerException
block|{
comment|// allocates node 0 for memory and cpu
name|testAllocateNumaResource
argument_list|(
literal|"container_1481156246874_0001_01_000001"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"0"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
comment|// allocates node 1 for memory and cpu since allocator uses round
comment|// robin assignment
name|testAllocateNumaResource
argument_list|(
literal|"container_1481156246874_0001_01_000002"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"1"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// allocates node 0,1 for cpus since there is are no sufficient cpus
comment|// available in any one node
name|testAllocateNumaResource
argument_list|(
literal|"container_1481156246874_0001_01_000003"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|"0"
argument_list|,
literal|"0,1"
argument_list|)
expr_stmt|;
comment|// returns null since there are no sufficient resources available for the
comment|// request
name|when
argument_list|(
name|mockContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ContainerId
operator|.
name|fromString
argument_list|(
literal|"container_1481156246874_0001_01_000004"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContainer
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|numaResourceHandler
operator|.
name|preStart
argument_list|(
name|mockContainer
argument_list|)
argument_list|)
expr_stmt|;
comment|// allocates node 1 for memory and cpu
name|testAllocateNumaResource
argument_list|(
literal|"container_1481156246874_0001_01_000005"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"1"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReacquireContainer ()
specifier|public
name|void
name|testReacquireContainer
parameter_list|()
throws|throws
name|Exception
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|ConcurrentHashMap
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
name|mockContainers
init|=
name|mock
argument_list|(
name|ConcurrentHashMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|Context
name|mockContext
init|=
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
decl_stmt|;
name|NMStateStoreService
name|mock
init|=
name|mock
argument_list|(
name|NMStateStoreService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getNMStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|)
expr_stmt|;
name|ResourceMappings
name|resourceMappings
init|=
operator|new
name|ResourceMappings
argument_list|()
decl_stmt|;
name|AssignedResources
name|assignedRscs
init|=
operator|new
name|AssignedResources
argument_list|()
decl_stmt|;
name|NumaResourceAllocation
name|numaResourceAllocation
init|=
operator|new
name|NumaResourceAllocation
argument_list|(
literal|"0"
argument_list|,
literal|70000
argument_list|,
literal|"0"
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|assignedRscs
operator|.
name|updateAssignedResources
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|numaResourceAllocation
argument_list|)
argument_list|)
expr_stmt|;
name|resourceMappings
operator|.
name|addAssignedResources
argument_list|(
literal|"numa"
argument_list|,
name|assignedRscs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContainer
operator|.
name|getResourceMappings
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resourceMappings
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContainers
operator|.
name|get
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockContainer
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockContainers
argument_list|)
expr_stmt|;
name|numaResourceHandler
operator|=
operator|new
name|NumaResourceHandlerImpl
argument_list|(
name|conf
argument_list|,
name|mockContext
argument_list|)
expr_stmt|;
name|numaResourceHandler
operator|.
name|bootstrap
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// recovered numa resources should be added to the used resources and
comment|// remaining will be available for further allocation.
name|numaResourceHandler
operator|.
name|reacquireContainer
argument_list|(
name|ContainerId
operator|.
name|fromString
argument_list|(
literal|"container_1481156246874_0001_01_000001"
argument_list|)
argument_list|)
expr_stmt|;
name|testAllocateNumaResource
argument_list|(
literal|"container_1481156246874_0001_01_000005"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"1"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ContainerId
operator|.
name|fromString
argument_list|(
literal|"container_1481156246874_0001_01_000005"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContainer
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|preStart
init|=
name|numaResourceHandler
operator|.
name|preStart
argument_list|(
name|mockContainer
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|preStart
argument_list|)
expr_stmt|;
block|}
DECL|method|setNumaTopologyConfigs ()
specifier|private
name|void
name|setNumaTopologyConfigs
parameter_list|()
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NUMA_AWARENESS_NODE_IDS
argument_list|,
literal|"0,1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.nodemanager.numa-awareness.0.memory"
argument_list|,
literal|"73717"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.nodemanager.numa-awareness.0.cpus"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.nodemanager.numa-awareness.1.memory"
argument_list|,
literal|"73727"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.nodemanager.numa-awareness.1.cpus"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
block|}
DECL|method|createAndGetMockContext ()
specifier|private
name|Context
name|createAndGetMockContext
parameter_list|()
block|{
name|Context
name|mockContext
init|=
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|ConcurrentHashMap
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
name|mockContainers
init|=
name|mock
argument_list|(
name|ConcurrentHashMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|mockContainer
operator|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContainer
operator|.
name|getResourceMappings
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ResourceMappings
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContainers
operator|.
name|get
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockContainer
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockContainers
argument_list|)
expr_stmt|;
return|return
name|mockContext
return|;
block|}
DECL|method|testAllocateNumaResource (String containerId, Resource resource, String memNodes, String cpuNodes)
specifier|private
name|void
name|testAllocateNumaResource
parameter_list|(
name|String
name|containerId
parameter_list|,
name|Resource
name|resource
parameter_list|,
name|String
name|memNodes
parameter_list|,
name|String
name|cpuNodes
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
name|when
argument_list|(
name|mockContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ContainerId
operator|.
name|fromString
argument_list|(
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContainer
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|preStart
init|=
name|numaResourceHandler
operator|.
name|preStart
argument_list|(
name|mockContainer
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|arguments
init|=
name|preStart
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|arguments
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/usr/bin/numactl"
argument_list|,
literal|"--interleave="
operator|+
name|memNodes
argument_list|,
literal|"--cpunodebind="
operator|+
name|cpuNodes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

