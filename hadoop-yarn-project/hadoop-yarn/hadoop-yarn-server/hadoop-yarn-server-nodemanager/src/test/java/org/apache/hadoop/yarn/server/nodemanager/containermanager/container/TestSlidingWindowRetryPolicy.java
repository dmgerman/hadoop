begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.container
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerRetryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerRetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ControlledClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests for {@link SlidingWindowRetryPolicy}.  */
end_comment

begin_class
DECL|class|TestSlidingWindowRetryPolicy
specifier|public
class|class
name|TestSlidingWindowRetryPolicy
block|{
DECL|field|clock
specifier|private
name|ControlledClock
name|clock
decl_stmt|;
DECL|field|retryPolicy
specifier|private
name|SlidingWindowRetryPolicy
name|retryPolicy
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|clock
operator|=
operator|new
name|ControlledClock
argument_list|()
expr_stmt|;
name|retryPolicy
operator|=
operator|new
name|SlidingWindowRetryPolicy
argument_list|(
name|clock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNeverRetry ()
specifier|public
name|void
name|testNeverRetry
parameter_list|()
block|{
name|ContainerRetryContext
name|retryContext
init|=
name|ContainerRetryContext
operator|.
name|NEVER_RETRY_CONTEXT
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"never retry"
argument_list|,
name|retryPolicy
operator|.
name|shouldRetry
argument_list|(
operator|new
name|SlidingWindowRetryPolicy
operator|.
name|RetryContext
argument_list|(
name|retryContext
argument_list|)
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAlwaysRetry ()
specifier|public
name|void
name|testAlwaysRetry
parameter_list|()
block|{
name|ContainerRetryContext
name|retryContext
init|=
name|ContainerRetryContext
operator|.
name|newInstance
argument_list|(
name|ContainerRetryPolicy
operator|.
name|RETRY_ON_ALL_ERRORS
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"always retry"
argument_list|,
name|retryPolicy
operator|.
name|shouldRetry
argument_list|(
operator|new
name|SlidingWindowRetryPolicy
operator|.
name|RetryContext
argument_list|(
name|retryContext
argument_list|)
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailuresValidityInterval ()
specifier|public
name|void
name|testFailuresValidityInterval
parameter_list|()
block|{
name|ContainerRetryContext
name|retryContext
init|=
name|ContainerRetryContext
operator|.
name|newInstance
argument_list|(
name|ContainerRetryPolicy
operator|.
name|RETRY_ON_ALL_ERRORS
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|SlidingWindowRetryPolicy
operator|.
name|RetryContext
name|windowRetryContext
init|=
operator|new
name|SlidingWindowRetryPolicy
operator|.
name|RetryContext
argument_list|(
name|retryContext
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"retry 1"
argument_list|,
name|retryPolicy
operator|.
name|shouldRetry
argument_list|(
name|windowRetryContext
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"retry 2"
argument_list|,
name|retryPolicy
operator|.
name|shouldRetry
argument_list|(
name|windowRetryContext
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"retry 3"
argument_list|,
name|retryPolicy
operator|.
name|shouldRetry
argument_list|(
name|windowRetryContext
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
literal|45
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"retry failed"
argument_list|,
name|retryPolicy
operator|.
name|shouldRetry
argument_list|(
name|windowRetryContext
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

