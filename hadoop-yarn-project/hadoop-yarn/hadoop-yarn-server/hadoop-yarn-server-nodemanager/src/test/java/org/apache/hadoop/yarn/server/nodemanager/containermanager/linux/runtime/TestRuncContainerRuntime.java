begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * *  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  * /  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.runtime
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|ContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|CGroupsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|RuncContainerRuntime
operator|.
name|RuncRuntimeObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|runc
operator|.
name|HdfsManifestToResourcesPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|runc
operator|.
name|ImageManifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|runc
operator|.
name|ImageTagToManifestPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|runc
operator|.
name|RuncContainerExecutorConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|runc
operator|.
name|RuncContainerExecutorConfig
operator|.
name|OCILayer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|runc
operator|.
name|RuncContainerExecutorConfig
operator|.
name|OCIRuntimeConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|runc
operator|.
name|RuncContainerExecutorConfig
operator|.
name|OCIRuntimeConfig
operator|.
name|OCIMount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|runc
operator|.
name|RuncContainerExecutorConfig
operator|.
name|OCIRuntimeConfig
operator|.
name|OCIProcessConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|runc
operator|.
name|RuncImageTagToManifestPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|runc
operator|.
name|RuncManifestToResourcesPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|ResourcePluginManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|LocalizedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ResourceLocalizationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|runtime
operator|.
name|ContainerExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|runtime
operator|.
name|ContainerRuntimeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|runtime
operator|.
name|ContainerRuntimeContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|LocalDirsHandlerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|NM_RUNC_DEFAULT_RO_MOUNTS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|NM_RUNC_DEFAULT_RW_MOUNTS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|NM_RUNC_LAYER_MOUNTS_TO_KEEP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|RuncContainerRuntime
operator|.
name|ENV_RUNC_CONTAINER_MOUNTS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * This class tests the {@link RuncContainerRuntime}.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestRuncContainerRuntime
specifier|public
class|class
name|TestRuncContainerRuntime
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRuncContainerRuntime
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|mockExecutor
specifier|private
name|PrivilegedOperationExecutor
name|mockExecutor
decl_stmt|;
DECL|field|mockCGroupsHandler
specifier|private
name|CGroupsHandler
name|mockCGroupsHandler
decl_stmt|;
DECL|field|containerId
specifier|private
name|String
name|containerId
decl_stmt|;
DECL|field|container
specifier|private
name|Container
name|container
decl_stmt|;
DECL|field|cId
specifier|private
name|ContainerId
name|cId
decl_stmt|;
DECL|field|appAttemptId
specifier|private
name|ApplicationAttemptId
name|appAttemptId
decl_stmt|;
DECL|field|mockApplicationId
specifier|private
name|ApplicationId
name|mockApplicationId
decl_stmt|;
DECL|field|context
specifier|private
name|ContainerLaunchContext
name|context
decl_stmt|;
DECL|field|nmContext
specifier|private
name|Context
name|nmContext
decl_stmt|;
DECL|field|env
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
decl_stmt|;
DECL|field|image
specifier|private
name|String
name|image
decl_stmt|;
DECL|field|runAsUser
specifier|private
name|String
name|runAsUser
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
DECL|field|user
specifier|private
name|String
name|user
decl_stmt|;
DECL|field|appId
specifier|private
name|String
name|appId
decl_stmt|;
DECL|field|containerIdStr
specifier|private
name|String
name|containerIdStr
decl_stmt|;
DECL|field|containerWorkDir
specifier|private
name|Path
name|containerWorkDir
decl_stmt|;
DECL|field|nmPrivateContainerScriptPath
specifier|private
name|Path
name|nmPrivateContainerScriptPath
decl_stmt|;
DECL|field|nmPrivateTokensPath
specifier|private
name|Path
name|nmPrivateTokensPath
decl_stmt|;
DECL|field|nmPrivateKeystorePath
specifier|private
name|Path
name|nmPrivateKeystorePath
decl_stmt|;
DECL|field|nmPrivateTruststorePath
specifier|private
name|Path
name|nmPrivateTruststorePath
decl_stmt|;
DECL|field|pidFilePath
specifier|private
name|Path
name|pidFilePath
decl_stmt|;
DECL|field|localDirs
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|localDirs
decl_stmt|;
DECL|field|logDirs
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|logDirs
decl_stmt|;
DECL|field|filecacheDirs
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|filecacheDirs
decl_stmt|;
DECL|field|userFilecacheDirs
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|userFilecacheDirs
decl_stmt|;
DECL|field|applicationLocalDirs
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|applicationLocalDirs
decl_stmt|;
DECL|field|containerLogDirs
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|containerLogDirs
decl_stmt|;
DECL|field|localizedResources
specifier|private
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|localizedResources
decl_stmt|;
DECL|field|resourcesOptions
specifier|private
name|String
name|resourcesOptions
decl_stmt|;
DECL|field|builder
specifier|private
name|ContainerRuntimeContext
operator|.
name|Builder
name|builder
decl_stmt|;
DECL|field|submittingUser
specifier|private
specifier|final
name|String
name|submittingUser
init|=
literal|"anakin"
decl_stmt|;
DECL|field|mapper
specifier|private
name|ObjectMapper
name|mapper
decl_stmt|;
DECL|field|runcRuntimeObject
specifier|private
name|RuncContainerRuntime
operator|.
name|RuncRuntimeObject
name|runcRuntimeObject
decl_stmt|;
DECL|field|localResource
specifier|private
name|LocalResource
name|localResource
decl_stmt|;
DECL|field|mockUrl
specifier|private
name|URL
name|mockUrl
decl_stmt|;
DECL|field|resource
specifier|private
name|Resource
name|resource
decl_stmt|;
DECL|field|layersToKeep
specifier|private
name|int
name|layersToKeep
decl_stmt|;
DECL|field|cpuShares
specifier|private
name|int
name|cpuShares
decl_stmt|;
DECL|field|expectedMounts
specifier|private
name|List
argument_list|<
name|OCIMount
argument_list|>
name|expectedMounts
decl_stmt|;
DECL|field|tmpPath
specifier|private
name|String
name|tmpPath
decl_stmt|;
DECL|field|config
specifier|private
name|LocalResource
name|config
decl_stmt|;
DECL|field|layers
specifier|private
name|List
argument_list|<
name|LocalResource
argument_list|>
name|layers
decl_stmt|;
DECL|field|mockRuncImageTagToManifestPlugin
specifier|private
name|RuncImageTagToManifestPlugin
name|mockRuncImageTagToManifestPlugin
init|=
name|mock
argument_list|(
name|ImageTagToManifestPlugin
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mockRuncManifestToResourcesPlugin
specifier|private
name|RuncManifestToResourcesPlugin
name|mockRuncManifestToResourcesPlugin
init|=
name|mock
argument_list|(
name|HdfsManifestToResourcesPlugin
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"https={0}"
argument_list|)
DECL|method|data ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|true
block|}
block|,
block|{
literal|false
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameter
DECL|field|https
specifier|public
name|boolean
name|https
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|ContainerExecutionException
block|{
name|mockExecutor
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|PrivilegedOperationExecutor
operator|.
name|class
argument_list|)
expr_stmt|;
name|mockCGroupsHandler
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CGroupsHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|tmpPath
operator|=
operator|new
name|StringBuffer
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
literal|"hadoop.tmp.dir"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|containerId
operator|=
literal|"container_e11_1518975676334_14532816_01_000001"
expr_stmt|;
name|container
operator|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
expr_stmt|;
name|cId
operator|=
name|mock
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
expr_stmt|;
name|appAttemptId
operator|=
name|mock
argument_list|(
name|ApplicationAttemptId
operator|.
name|class
argument_list|)
expr_stmt|;
name|mockApplicationId
operator|=
name|mock
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
expr_stmt|;
name|context
operator|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|env
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
literal|"FROM_CLIENT"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|image
operator|=
literal|"busybox:latest"
expr_stmt|;
name|nmContext
operator|=
name|createMockNMContext
argument_list|()
expr_stmt|;
name|runcRuntimeObject
operator|=
name|mock
argument_list|(
name|RuncContainerRuntime
operator|.
name|RuncRuntimeObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|localResource
operator|=
name|mock
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
expr_stmt|;
name|mockUrl
operator|=
name|mock
argument_list|(
name|URL
operator|.
name|class
argument_list|)
expr_stmt|;
name|resource
operator|=
name|mock
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
expr_stmt|;
name|appId
operator|=
literal|"app_id"
expr_stmt|;
name|layersToKeep
operator|=
literal|5
expr_stmt|;
name|cpuShares
operator|=
literal|10
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.tmp.dir"
argument_list|,
name|tmpPath
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|NM_RUNC_LAYER_MOUNTS_TO_KEEP
argument_list|,
name|layersToKeep
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|RuncContainerRuntime
operator|.
name|ENV_RUNC_CONTAINER_IMAGE
argument_list|,
name|image
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockApplicationId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockApplicationId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cId
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getLaunchContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getEnvironment
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|submittingUser
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainerRuntimeData
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|runcRuntimeObject
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|resource
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cpuShares
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|runcRuntimeObject
operator|.
name|getConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|localResource
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|localResource
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockUrl
argument_list|)
expr_stmt|;
try|try
block|{
name|when
argument_list|(
name|mockUrl
operator|.
name|toPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test_user_filecache_dir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|use
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|use
argument_list|)
throw|;
block|}
name|user
operator|=
name|submittingUser
expr_stmt|;
name|containerIdStr
operator|=
name|containerId
expr_stmt|;
name|containerWorkDir
operator|=
operator|new
name|Path
argument_list|(
literal|"/test_container_work_dir"
argument_list|)
expr_stmt|;
name|nmPrivateContainerScriptPath
operator|=
operator|new
name|Path
argument_list|(
literal|"/test_script_path"
argument_list|)
expr_stmt|;
name|nmPrivateTokensPath
operator|=
operator|new
name|Path
argument_list|(
literal|"/test_private_tokens_path"
argument_list|)
expr_stmt|;
if|if
condition|(
name|https
condition|)
block|{
name|nmPrivateKeystorePath
operator|=
operator|new
name|Path
argument_list|(
literal|"/test_private_keystore_path"
argument_list|)
expr_stmt|;
name|nmPrivateTruststorePath
operator|=
operator|new
name|Path
argument_list|(
literal|"/test_private_truststore_path"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nmPrivateKeystorePath
operator|=
literal|null
expr_stmt|;
name|nmPrivateTruststorePath
operator|=
literal|null
expr_stmt|;
block|}
name|pidFilePath
operator|=
operator|new
name|Path
argument_list|(
literal|"/test_pid_file_path"
argument_list|)
expr_stmt|;
name|localDirs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|logDirs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|filecacheDirs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|resourcesOptions
operator|=
literal|"cgroups=none"
expr_stmt|;
name|userFilecacheDirs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|applicationLocalDirs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|containerLogDirs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|localizedResources
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|expectedMounts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|String
name|filecachePath
init|=
name|tmpPath
operator|+
literal|"/filecache"
decl_stmt|;
name|String
name|userFilecachePath
init|=
name|tmpPath
operator|+
literal|"/userFilecache"
decl_stmt|;
name|localDirs
operator|.
name|add
argument_list|(
literal|"/test_local_dir"
argument_list|)
expr_stmt|;
name|logDirs
operator|.
name|add
argument_list|(
literal|"/test_log_dir"
argument_list|)
expr_stmt|;
name|filecacheDirs
operator|.
name|add
argument_list|(
name|filecachePath
argument_list|)
expr_stmt|;
name|userFilecacheDirs
operator|.
name|add
argument_list|(
name|userFilecachePath
argument_list|)
expr_stmt|;
name|applicationLocalDirs
operator|.
name|add
argument_list|(
literal|"/test_application_local_dir"
argument_list|)
expr_stmt|;
name|containerLogDirs
operator|.
name|add
argument_list|(
literal|"/test_container_log_dir"
argument_list|)
expr_stmt|;
name|localizedResources
operator|.
name|put
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test_local_dir/test_resource_file"
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"test_dir/test_resource_file"
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|tmpDir
init|=
operator|new
name|File
argument_list|(
name|tmpPath
argument_list|)
decl_stmt|;
name|tmpDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rwOptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|rwOptions
operator|.
name|add
argument_list|(
literal|"rw"
argument_list|)
expr_stmt|;
name|rwOptions
operator|.
name|add
argument_list|(
literal|"rbind"
argument_list|)
expr_stmt|;
name|rwOptions
operator|.
name|add
argument_list|(
literal|"rprivate"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|roOptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|roOptions
operator|.
name|add
argument_list|(
literal|"ro"
argument_list|)
expr_stmt|;
name|roOptions
operator|.
name|add
argument_list|(
literal|"rbind"
argument_list|)
expr_stmt|;
name|roOptions
operator|.
name|add
argument_list|(
literal|"rprivate"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|containerLogDir
range|:
name|containerLogDirs
control|)
block|{
name|expectedMounts
operator|.
name|add
argument_list|(
operator|new
name|OCIMount
argument_list|(
name|containerLogDir
argument_list|,
literal|"bind"
argument_list|,
name|containerLogDir
argument_list|,
name|rwOptions
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|applicationLocalDir
range|:
name|applicationLocalDirs
control|)
block|{
name|expectedMounts
operator|.
name|add
argument_list|(
operator|new
name|OCIMount
argument_list|(
name|applicationLocalDir
argument_list|,
literal|"bind"
argument_list|,
name|applicationLocalDir
argument_list|,
name|rwOptions
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|filecacheDir
range|:
name|filecacheDirs
control|)
block|{
name|File
name|filecacheDirFile
init|=
operator|new
name|File
argument_list|(
name|filecacheDir
argument_list|)
decl_stmt|;
name|filecacheDirFile
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|expectedMounts
operator|.
name|add
argument_list|(
operator|new
name|OCIMount
argument_list|(
name|filecacheDir
argument_list|,
literal|"bind"
argument_list|,
name|filecacheDir
argument_list|,
name|roOptions
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|userFilecacheDir
range|:
name|userFilecacheDirs
control|)
block|{
name|File
name|userFilecacheDirFile
init|=
operator|new
name|File
argument_list|(
name|userFilecacheDir
argument_list|)
decl_stmt|;
name|userFilecacheDirFile
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|expectedMounts
operator|.
name|add
argument_list|(
operator|new
name|OCIMount
argument_list|(
name|userFilecachePath
argument_list|,
literal|"bind"
argument_list|,
name|userFilecachePath
argument_list|,
name|roOptions
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|expectedMounts
operator|.
name|add
argument_list|(
operator|new
name|OCIMount
argument_list|(
literal|"/tmp"
argument_list|,
literal|"bind"
argument_list|,
name|containerWorkDir
operator|+
literal|"/private_slash_tmp"
argument_list|,
name|rwOptions
argument_list|)
argument_list|)
expr_stmt|;
name|expectedMounts
operator|.
name|add
argument_list|(
operator|new
name|OCIMount
argument_list|(
literal|"/var/tmp"
argument_list|,
literal|"bind"
argument_list|,
name|containerWorkDir
operator|+
literal|"/private_var_slash_tmp"
argument_list|,
name|rwOptions
argument_list|)
argument_list|)
expr_stmt|;
name|mapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
expr_stmt|;
name|builder
operator|=
operator|new
name|ContainerRuntimeContext
operator|.
name|Builder
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setExecutionAttribute
argument_list|(
name|RUN_AS_USER
argument_list|,
name|runAsUser
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|USER
argument_list|,
name|user
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|APPID
argument_list|,
name|appId
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|CONTAINER_ID_STR
argument_list|,
name|containerIdStr
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|CONTAINER_WORK_DIR
argument_list|,
name|containerWorkDir
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|NM_PRIVATE_CONTAINER_SCRIPT_PATH
argument_list|,
name|nmPrivateContainerScriptPath
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|NM_PRIVATE_TOKENS_PATH
argument_list|,
name|nmPrivateTokensPath
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|NM_PRIVATE_KEYSTORE_PATH
argument_list|,
name|nmPrivateKeystorePath
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|NM_PRIVATE_TRUSTSTORE_PATH
argument_list|,
name|nmPrivateTruststorePath
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|PID_FILE_PATH
argument_list|,
name|pidFilePath
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|LOCAL_DIRS
argument_list|,
name|localDirs
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|LOG_DIRS
argument_list|,
name|logDirs
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|FILECACHE_DIRS
argument_list|,
name|filecacheDirs
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|USER_FILECACHE_DIRS
argument_list|,
name|userFilecacheDirs
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|APPLICATION_LOCAL_DIRS
argument_list|,
name|applicationLocalDirs
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|CONTAINER_LOG_DIRS
argument_list|,
name|containerLogDirs
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|LOCALIZED_RESOURCES
argument_list|,
name|localizedResources
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|RESOURCES_OPTIONS
argument_list|,
name|resourcesOptions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|tmpDir
init|=
operator|new
name|File
argument_list|(
name|tmpPath
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|tmpDir
argument_list|)
expr_stmt|;
block|}
comment|/**    * This class mocks out the {@link RuncContainerRuntime}.    */
DECL|class|MockRuncContainerRuntime
specifier|public
class|class
name|MockRuncContainerRuntime
extends|extends
name|RuncContainerRuntime
block|{
DECL|method|MockRuncContainerRuntime ( PrivilegedOperationExecutor privilegedOperationExecutor, CGroupsHandler cGroupsHandler)
name|MockRuncContainerRuntime
parameter_list|(
name|PrivilegedOperationExecutor
name|privilegedOperationExecutor
parameter_list|,
name|CGroupsHandler
name|cGroupsHandler
parameter_list|)
block|{
name|super
argument_list|(
name|privilegedOperationExecutor
argument_list|,
name|cGroupsHandler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|chooseImageTagToManifestPlugin ()
specifier|protected
name|RuncImageTagToManifestPlugin
name|chooseImageTagToManifestPlugin
parameter_list|()
throws|throws
name|ContainerExecutionException
block|{
name|ImageManifest
name|mockImageManifest
init|=
name|mock
argument_list|(
name|ImageManifest
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|when
argument_list|(
name|mockRuncImageTagToManifestPlugin
operator|.
name|getManifestFromImageTag
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockImageManifest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
name|mockRuncImageTagToManifestPlugin
return|;
block|}
annotation|@
name|Override
DECL|method|chooseManifestToResourcesPlugin ()
specifier|protected
name|RuncManifestToResourcesPlugin
name|chooseManifestToResourcesPlugin
parameter_list|()
throws|throws
name|ContainerExecutionException
block|{
name|URL
name|configUrl
init|=
name|URL
operator|.
name|fromPath
argument_list|(
operator|new
name|Path
argument_list|(
name|tmpPath
operator|+
literal|"config"
argument_list|)
argument_list|)
decl_stmt|;
name|URL
name|layer1Url
init|=
name|URL
operator|.
name|fromPath
argument_list|(
operator|new
name|Path
argument_list|(
name|tmpPath
operator|+
literal|"layer1"
argument_list|)
argument_list|)
decl_stmt|;
name|URL
name|layer2Url
init|=
name|URL
operator|.
name|fromPath
argument_list|(
operator|new
name|Path
argument_list|(
name|tmpPath
operator|+
literal|"layer2"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|size
init|=
literal|1234
decl_stmt|;
name|long
name|timestamp
init|=
literal|5678
decl_stmt|;
name|config
operator|=
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|configUrl
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|size
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|LocalResource
name|layer1
init|=
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|layer1Url
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|size
argument_list|,
name|timestamp
argument_list|)
decl_stmt|;
name|LocalResource
name|layer2
init|=
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|layer2Url
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|size
argument_list|,
name|timestamp
argument_list|)
decl_stmt|;
name|layers
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|layers
operator|.
name|add
argument_list|(
name|layer1
argument_list|)
expr_stmt|;
name|layers
operator|.
name|add
argument_list|(
name|layer2
argument_list|)
expr_stmt|;
try|try
block|{
name|when
argument_list|(
name|mockRuncManifestToResourcesPlugin
operator|.
name|getConfigResource
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockRuncManifestToResourcesPlugin
operator|.
name|getLayerResources
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|layers
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
name|mockRuncManifestToResourcesPlugin
return|;
block|}
annotation|@
name|Override
DECL|method|extractImageEnv (File configFile)
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|extractImageEnv
parameter_list|(
name|File
name|configFile
parameter_list|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|extractImageEntrypoint (File configFile)
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|extractImageEntrypoint
parameter_list|(
name|File
name|configFile
parameter_list|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
block|}
DECL|method|createMockNMContext ()
specifier|public
name|Context
name|createMockNMContext
parameter_list|()
block|{
name|Context
name|mockNMContext
init|=
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
decl_stmt|;
name|LocalDirsHandlerService
name|localDirsHandler
init|=
name|mock
argument_list|(
name|LocalDirsHandlerService
operator|.
name|class
argument_list|)
decl_stmt|;
name|ResourcePluginManager
name|resourcePluginManager
init|=
name|mock
argument_list|(
name|ResourcePluginManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
name|containerMap
init|=
name|mock
argument_list|(
name|ConcurrentMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockNMContext
operator|.
name|getLocalDirsHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|localDirsHandler
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockNMContext
operator|.
name|getResourcePluginManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resourcePluginManager
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockNMContext
operator|.
name|getContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerMap
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|containerMap
operator|.
name|get
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|ContainerManager
name|mockContainerManager
init|=
name|mock
argument_list|(
name|ContainerManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|ResourceLocalizationService
name|mockLocalzationService
init|=
name|mock
argument_list|(
name|ResourceLocalizationService
operator|.
name|class
argument_list|)
decl_stmt|;
name|LocalizedResource
name|mockLocalizedResource
init|=
name|mock
argument_list|(
name|LocalizedResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockLocalizedResource
operator|.
name|getLocalPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/local/layer1"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockLocalzationService
operator|.
name|getLocalizedResource
argument_list|(
name|any
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockLocalizedResource
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContainerManager
operator|.
name|getResourceLocalizationService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockLocalzationService
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockNMContext
operator|.
name|getContainerManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockContainerManager
argument_list|)
expr_stmt|;
try|try
block|{
name|when
argument_list|(
name|localDirsHandler
operator|.
name|getLocalPathForWrite
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Path
argument_list|(
name|tmpPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"LocalDirsHandler failed"
operator|+
name|ioe
argument_list|)
expr_stmt|;
block|}
return|return
name|mockNMContext
return|;
block|}
DECL|method|captureRuncConfigFile ()
specifier|private
name|File
name|captureRuncConfigFile
parameter_list|()
throws|throws
name|PrivilegedOperationException
block|{
name|PrivilegedOperation
name|op
init|=
name|capturePrivilegedOperation
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|RUN_RUNC_CONTAINER
argument_list|,
name|op
operator|.
name|getOperationType
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|File
argument_list|(
name|op
operator|.
name|getArguments
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
DECL|method|capturePrivilegedOperation (int invocations)
specifier|private
name|PrivilegedOperation
name|capturePrivilegedOperation
parameter_list|(
name|int
name|invocations
parameter_list|)
throws|throws
name|PrivilegedOperationException
block|{
name|ArgumentCaptor
argument_list|<
name|PrivilegedOperation
argument_list|>
name|opCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|PrivilegedOperation
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockExecutor
argument_list|,
name|times
argument_list|(
name|invocations
argument_list|)
argument_list|)
operator|.
name|executePrivilegedOperation
argument_list|(
name|any
argument_list|()
argument_list|,
name|opCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
comment|//verification completed. we need to isolate specific invocations.
comment|// hence, reset mock here
name|Mockito
operator|.
name|reset
argument_list|(
name|mockExecutor
argument_list|)
expr_stmt|;
return|return
name|opCaptor
operator|.
name|getValue
argument_list|()
return|;
block|}
DECL|method|captureRuncRuntimeObject ( int invocations)
specifier|private
name|RuncRuntimeObject
name|captureRuncRuntimeObject
parameter_list|(
name|int
name|invocations
parameter_list|)
block|{
name|ArgumentCaptor
argument_list|<
name|RuncRuntimeObject
argument_list|>
name|opCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|RuncRuntimeObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|container
argument_list|,
name|times
argument_list|(
name|invocations
argument_list|)
argument_list|)
operator|.
name|setContainerRuntimeData
argument_list|(
name|opCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
comment|//verification completed. we need to isolate specific invocations.
comment|// hence, reset mock here
name|Mockito
operator|.
name|reset
argument_list|(
name|container
argument_list|)
expr_stmt|;
return|return
name|opCaptor
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|verifyRuncConfig (File configFile)
specifier|private
name|RuncContainerExecutorConfig
name|verifyRuncConfig
parameter_list|(
name|File
name|configFile
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|configSize
decl_stmt|;
name|String
name|configVersion
decl_stmt|;
name|String
name|configRunAsUser
decl_stmt|;
name|String
name|configUser
decl_stmt|;
name|String
name|configContainerId
decl_stmt|;
name|String
name|configAppId
decl_stmt|;
name|String
name|configPidFile
decl_stmt|;
name|String
name|configContainerScriptPath
decl_stmt|;
name|String
name|configContainerCredentialsPath
decl_stmt|;
name|int
name|configHttps
decl_stmt|;
name|String
name|configKeystorePath
decl_stmt|;
name|String
name|configTruststorePath
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|configLocalDirsList
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|configLogDirsList
decl_stmt|;
name|List
argument_list|<
name|OCILayer
argument_list|>
name|configLayersList
decl_stmt|;
name|int
name|configLayersToKeep
decl_stmt|;
name|String
name|configContainerWorkDir
decl_stmt|;
name|int
name|expectedConfigSize
decl_stmt|;
name|long
name|configCpuShares
decl_stmt|;
name|JsonNode
name|configNode
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|configFile
argument_list|)
decl_stmt|;
name|RuncContainerExecutorConfig
name|runcContainerExecutorConfig
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|configNode
argument_list|,
name|RuncContainerExecutorConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|configSize
operator|=
name|configNode
operator|.
name|size
argument_list|()
expr_stmt|;
name|OCIRuntimeConfig
name|ociRuntimeConfig
init|=
name|runcContainerExecutorConfig
operator|.
name|getOciRuntimeConfig
argument_list|()
decl_stmt|;
name|OCIProcessConfig
name|ociProcessConfig
init|=
name|ociRuntimeConfig
operator|.
name|getProcess
argument_list|()
decl_stmt|;
name|configVersion
operator|=
name|runcContainerExecutorConfig
operator|.
name|getVersion
argument_list|()
expr_stmt|;
name|configRunAsUser
operator|=
name|runcContainerExecutorConfig
operator|.
name|getRunAsUser
argument_list|()
expr_stmt|;
name|configUser
operator|=
name|runcContainerExecutorConfig
operator|.
name|getUsername
argument_list|()
expr_stmt|;
name|configContainerId
operator|=
name|runcContainerExecutorConfig
operator|.
name|getContainerId
argument_list|()
expr_stmt|;
name|configAppId
operator|=
name|runcContainerExecutorConfig
operator|.
name|getApplicationId
argument_list|()
expr_stmt|;
name|configPidFile
operator|=
name|runcContainerExecutorConfig
operator|.
name|getPidFile
argument_list|()
expr_stmt|;
name|configContainerScriptPath
operator|=
name|runcContainerExecutorConfig
operator|.
name|getContainerScriptPath
argument_list|()
expr_stmt|;
name|configContainerCredentialsPath
operator|=
name|runcContainerExecutorConfig
operator|.
name|getContainerCredentialsPath
argument_list|()
expr_stmt|;
name|configHttps
operator|=
name|runcContainerExecutorConfig
operator|.
name|getHttps
argument_list|()
expr_stmt|;
name|configKeystorePath
operator|=
name|runcContainerExecutorConfig
operator|.
name|getKeystorePath
argument_list|()
expr_stmt|;
name|configTruststorePath
operator|=
name|runcContainerExecutorConfig
operator|.
name|getTruststorePath
argument_list|()
expr_stmt|;
name|configLocalDirsList
operator|=
name|runcContainerExecutorConfig
operator|.
name|getLocalDirs
argument_list|()
expr_stmt|;
name|configLogDirsList
operator|=
name|runcContainerExecutorConfig
operator|.
name|getLogDirs
argument_list|()
expr_stmt|;
name|configLayersList
operator|=
name|runcContainerExecutorConfig
operator|.
name|getLayers
argument_list|()
expr_stmt|;
name|configLayersToKeep
operator|=
name|runcContainerExecutorConfig
operator|.
name|getReapLayerKeepCount
argument_list|()
expr_stmt|;
name|configContainerWorkDir
operator|=
name|ociRuntimeConfig
operator|.
name|getProcess
argument_list|()
operator|.
name|getCwd
argument_list|()
expr_stmt|;
name|configCpuShares
operator|=
name|ociRuntimeConfig
operator|.
name|getLinux
argument_list|()
operator|.
name|getResources
argument_list|()
operator|.
name|getCPU
argument_list|()
operator|.
name|getShares
argument_list|()
expr_stmt|;
name|expectedConfigSize
operator|=
operator|(
name|https
operator|)
condition|?
literal|16
else|:
literal|13
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedConfigSize
argument_list|,
name|configSize
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0.1"
argument_list|,
name|configVersion
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|runAsUser
argument_list|,
name|configRunAsUser
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|user
argument_list|,
name|configUser
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|containerId
argument_list|,
name|configContainerId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appId
argument_list|,
name|configAppId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pidFilePath
operator|.
name|toString
argument_list|()
argument_list|,
name|configPidFile
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nmPrivateContainerScriptPath
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|configContainerScriptPath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nmPrivateTokensPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|configContainerCredentialsPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|https
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|configHttps
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nmPrivateKeystorePath
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|configKeystorePath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nmPrivateTruststorePath
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|configTruststorePath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|configHttps
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|configKeystorePath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|configTruststorePath
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|localDirs
argument_list|,
name|configLocalDirsList
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|logDirs
argument_list|,
name|configLogDirsList
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|configLayersList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|layersToKeep
argument_list|,
name|configLayersToKeep
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OCIMount
argument_list|>
name|configMounts
init|=
name|ociRuntimeConfig
operator|.
name|getMounts
argument_list|()
decl_stmt|;
name|verifyRuncMounts
argument_list|(
name|expectedMounts
argument_list|,
name|configMounts
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|processArgsList
init|=
name|ociProcessConfig
operator|.
name|getArgs
argument_list|()
decl_stmt|;
name|String
name|configArgs
init|=
literal|""
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|processArgsList
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|containerWorkDir
operator|.
name|toString
argument_list|()
argument_list|,
name|configContainerWorkDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bash,"
operator|+
name|containerWorkDir
operator|+
literal|"/launch_container.sh"
argument_list|,
name|configArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|cpuShares
argument_list|,
name|configCpuShares
argument_list|)
expr_stmt|;
return|return
name|runcContainerExecutorConfig
return|;
block|}
DECL|method|verifyRuncMounts (List<OCIMount> expectedRuncMounts, List<OCIMount> configMounts)
specifier|private
name|void
name|verifyRuncMounts
parameter_list|(
name|List
argument_list|<
name|OCIMount
argument_list|>
name|expectedRuncMounts
parameter_list|,
name|List
argument_list|<
name|OCIMount
argument_list|>
name|configMounts
parameter_list|)
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedRuncMounts
operator|.
name|size
argument_list|()
argument_list|,
name|configMounts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|found
decl_stmt|;
for|for
control|(
name|OCIMount
name|expectedMount
range|:
name|expectedRuncMounts
control|)
block|{
name|found
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|OCIMount
name|configMount
range|:
name|configMounts
control|)
block|{
if|if
condition|(
name|expectedMount
operator|.
name|getDestination
argument_list|()
operator|.
name|equals
argument_list|(
name|configMount
operator|.
name|getDestination
argument_list|()
argument_list|)
operator|&&
name|expectedMount
operator|.
name|getSource
argument_list|()
operator|.
name|equals
argument_list|(
name|configMount
operator|.
name|getSource
argument_list|()
argument_list|)
operator|&&
name|expectedMount
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|configMount
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
name|expectedMount
operator|.
name|getOptions
argument_list|()
operator|.
name|containsAll
argument_list|(
name|configMount
operator|.
name|getOptions
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|String
name|expectedMountString
init|=
name|expectedMount
operator|.
name|getSource
argument_list|()
operator|+
literal|":"
operator|+
name|expectedMount
operator|.
name|getDestination
argument_list|()
operator|+
literal|", "
operator|+
name|expectedMount
operator|.
name|getType
argument_list|()
operator|+
literal|", "
operator|+
name|expectedMount
operator|.
name|getOptions
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Expected mount not found: "
operator|+
name|expectedMountString
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testSelectRuncContainerType ()
specifier|public
name|void
name|testSelectRuncContainerType
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envRuncType
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envOtherType
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|envRuncType
operator|.
name|put
argument_list|(
name|ContainerRuntimeConstants
operator|.
name|ENV_CONTAINER_TYPE
argument_list|,
name|ContainerRuntimeConstants
operator|.
name|CONTAINER_RUNTIME_RUNC
argument_list|)
expr_stmt|;
name|envOtherType
operator|.
name|put
argument_list|(
name|ContainerRuntimeConstants
operator|.
name|ENV_CONTAINER_TYPE
argument_list|,
literal|"other"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|RuncContainerRuntime
operator|.
name|isRuncContainerRequested
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|RuncContainerRuntime
operator|.
name|isRuncContainerRequested
argument_list|(
name|conf
argument_list|,
name|envRuncType
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|RuncContainerRuntime
operator|.
name|isRuncContainerRequested
argument_list|(
name|conf
argument_list|,
name|envOtherType
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSelectRuncContainerTypeWithRuncAsDefault ()
specifier|public
name|void
name|testSelectRuncContainerTypeWithRuncAsDefault
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envRuncType
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envOtherType
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|LINUX_CONTAINER_RUNTIME_TYPE
argument_list|,
name|ContainerRuntimeConstants
operator|.
name|CONTAINER_RUNTIME_RUNC
argument_list|)
expr_stmt|;
name|envRuncType
operator|.
name|put
argument_list|(
name|ContainerRuntimeConstants
operator|.
name|ENV_CONTAINER_TYPE
argument_list|,
name|ContainerRuntimeConstants
operator|.
name|CONTAINER_RUNTIME_RUNC
argument_list|)
expr_stmt|;
name|envOtherType
operator|.
name|put
argument_list|(
name|ContainerRuntimeConstants
operator|.
name|ENV_CONTAINER_TYPE
argument_list|,
literal|"other"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|RuncContainerRuntime
operator|.
name|isRuncContainerRequested
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|RuncContainerRuntime
operator|.
name|isRuncContainerRequested
argument_list|(
name|conf
argument_list|,
name|envRuncType
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|RuncContainerRuntime
operator|.
name|isRuncContainerRequested
argument_list|(
name|conf
argument_list|,
name|envOtherType
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSelectRuncContainerTypeWithDefaultSet ()
specifier|public
name|void
name|testSelectRuncContainerTypeWithDefaultSet
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envRuncType
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envOtherType
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|LINUX_CONTAINER_RUNTIME_TYPE
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|envRuncType
operator|.
name|put
argument_list|(
name|ContainerRuntimeConstants
operator|.
name|ENV_CONTAINER_TYPE
argument_list|,
name|ContainerRuntimeConstants
operator|.
name|CONTAINER_RUNTIME_RUNC
argument_list|)
expr_stmt|;
name|envOtherType
operator|.
name|put
argument_list|(
name|ContainerRuntimeConstants
operator|.
name|ENV_CONTAINER_TYPE
argument_list|,
literal|"other"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|RuncContainerRuntime
operator|.
name|isRuncContainerRequested
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|RuncContainerRuntime
operator|.
name|isRuncContainerRequested
argument_list|(
name|conf
argument_list|,
name|envRuncType
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|RuncContainerRuntime
operator|.
name|isRuncContainerRequested
argument_list|(
name|conf
argument_list|,
name|envOtherType
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRuncContainerLaunch ()
specifier|public
name|void
name|testRuncContainerLaunch
parameter_list|()
throws|throws
name|ContainerExecutionException
throws|,
name|PrivilegedOperationException
throws|,
name|IOException
block|{
name|MockRuncContainerRuntime
name|runtime
init|=
operator|new
name|MockRuncContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|nmContext
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|configFile
init|=
name|captureRuncConfigFile
argument_list|()
decl_stmt|;
name|verifyRuncConfig
argument_list|(
name|configFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRuncContainerLaunchWithDefaultImage ()
specifier|public
name|void
name|testRuncContainerLaunchWithDefaultImage
parameter_list|()
throws|throws
name|ContainerExecutionException
throws|,
name|IOException
block|{
name|String
name|runcImage
init|=
literal|"busybox:1.2.3"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RUNC_IMAGE_NAME
argument_list|,
name|runcImage
argument_list|)
expr_stmt|;
name|env
operator|.
name|remove
argument_list|(
name|RuncContainerRuntime
operator|.
name|ENV_RUNC_CONTAINER_IMAGE
argument_list|)
expr_stmt|;
name|MockRuncContainerRuntime
name|runtime
init|=
operator|new
name|MockRuncContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|nmContext
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|getLocalResources
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockRuncImageTagToManifestPlugin
argument_list|)
operator|.
name|getManifestFromImageTag
argument_list|(
name|runcImage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCGroupParent ()
specifier|public
name|void
name|testCGroupParent
parameter_list|()
throws|throws
name|ContainerExecutionException
throws|,
name|PrivilegedOperationException
throws|,
name|IOException
block|{
comment|// Case 1: neither hierarchy nor resource options set,
comment|// so cgroup should not be set
name|MockRuncContainerRuntime
name|runtime
init|=
operator|new
name|MockRuncContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|nmContext
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|configFile
init|=
name|captureRuncConfigFile
argument_list|()
decl_stmt|;
name|RuncContainerExecutorConfig
name|runcContainerExecutorConfig
init|=
name|verifyRuncConfig
argument_list|(
name|configFile
argument_list|)
decl_stmt|;
name|String
name|configCgroupsPath
init|=
name|runcContainerExecutorConfig
operator|.
name|getOciRuntimeConfig
argument_list|()
operator|.
name|getLinux
argument_list|()
operator|.
name|getCgroupsPath
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|configCgroupsPath
argument_list|)
expr_stmt|;
comment|// Case 2: hierarchy set, but resource options not,
comment|// so cgroup should not be set
name|String
name|hierarchy
init|=
literal|"hadoop-yarn-test"
decl_stmt|;
name|when
argument_list|(
name|mockCGroupsHandler
operator|.
name|getRelativePathForCGroup
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|hierarchy
argument_list|)
expr_stmt|;
name|runtime
operator|=
operator|new
name|MockRuncContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|nmContext
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|configFile
operator|=
name|captureRuncConfigFile
argument_list|()
expr_stmt|;
name|runcContainerExecutorConfig
operator|=
name|verifyRuncConfig
argument_list|(
name|configFile
argument_list|)
expr_stmt|;
name|configCgroupsPath
operator|=
name|runcContainerExecutorConfig
operator|.
name|getOciRuntimeConfig
argument_list|()
operator|.
name|getLinux
argument_list|()
operator|.
name|getCgroupsPath
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|configCgroupsPath
argument_list|)
expr_stmt|;
comment|// Case 3: resource options set, so cgroup should be set
name|String
name|resourceOptionsCpu
init|=
literal|"/sys/fs/cgroup/cpu/"
operator|+
name|hierarchy
operator|+
name|containerIdStr
decl_stmt|;
name|builder
operator|.
name|setExecutionAttribute
argument_list|(
name|RESOURCES_OPTIONS
argument_list|,
name|resourceOptionsCpu
argument_list|)
expr_stmt|;
name|runtime
operator|=
operator|new
name|MockRuncContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|nmContext
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|configFile
operator|=
name|captureRuncConfigFile
argument_list|()
expr_stmt|;
name|runcContainerExecutorConfig
operator|=
name|verifyRuncConfig
argument_list|(
name|configFile
argument_list|)
expr_stmt|;
name|configCgroupsPath
operator|=
name|runcContainerExecutorConfig
operator|.
name|getOciRuntimeConfig
argument_list|()
operator|.
name|getLinux
argument_list|()
operator|.
name|getCgroupsPath
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"/"
operator|+
name|hierarchy
argument_list|,
name|configCgroupsPath
argument_list|)
expr_stmt|;
comment|// Case 4: cgroupsHandler is null, so cgroup should not be set
name|resourceOptionsCpu
operator|=
literal|"/sys/fs/cgroup/cpu/"
operator|+
name|hierarchy
operator|+
name|containerIdStr
expr_stmt|;
name|builder
operator|.
name|setExecutionAttribute
argument_list|(
name|RESOURCES_OPTIONS
argument_list|,
name|resourceOptionsCpu
argument_list|)
expr_stmt|;
name|runtime
operator|=
operator|new
name|MockRuncContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|nmContext
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|configFile
operator|=
name|captureRuncConfigFile
argument_list|()
expr_stmt|;
name|runcContainerExecutorConfig
operator|=
name|verifyRuncConfig
argument_list|(
name|configFile
argument_list|)
expr_stmt|;
name|configCgroupsPath
operator|=
name|runcContainerExecutorConfig
operator|.
name|getOciRuntimeConfig
argument_list|()
operator|.
name|getLinux
argument_list|()
operator|.
name|getCgroupsPath
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|configCgroupsPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultROMounts ()
specifier|public
name|void
name|testDefaultROMounts
parameter_list|()
throws|throws
name|ContainerExecutionException
throws|,
name|PrivilegedOperationException
throws|,
name|IOException
block|{
name|String
name|roMount1
init|=
name|tmpPath
operator|+
literal|"/foo"
decl_stmt|;
name|File
name|roMountFile1
init|=
operator|new
name|File
argument_list|(
name|roMount1
argument_list|)
decl_stmt|;
name|roMountFile1
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|String
name|roMount2
init|=
name|tmpPath
operator|+
literal|"/bar"
decl_stmt|;
name|File
name|roMountFile2
init|=
operator|new
name|File
argument_list|(
name|roMount2
argument_list|)
decl_stmt|;
name|roMountFile2
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|NM_RUNC_DEFAULT_RO_MOUNTS
argument_list|,
name|roMount1
operator|+
literal|":"
operator|+
name|roMount1
operator|+
literal|","
operator|+
name|roMount2
operator|+
literal|":"
operator|+
name|roMount2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|roOptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|roOptions
operator|.
name|add
argument_list|(
literal|"ro"
argument_list|)
expr_stmt|;
name|roOptions
operator|.
name|add
argument_list|(
literal|"rbind"
argument_list|)
expr_stmt|;
name|roOptions
operator|.
name|add
argument_list|(
literal|"rprivate"
argument_list|)
expr_stmt|;
name|expectedMounts
operator|.
name|add
argument_list|(
operator|new
name|OCIMount
argument_list|(
name|roMount1
argument_list|,
literal|"bind"
argument_list|,
name|roMount1
argument_list|,
name|roOptions
argument_list|)
argument_list|)
expr_stmt|;
name|expectedMounts
operator|.
name|add
argument_list|(
operator|new
name|OCIMount
argument_list|(
name|roMount2
argument_list|,
literal|"bind"
argument_list|,
name|roMount2
argument_list|,
name|roOptions
argument_list|)
argument_list|)
expr_stmt|;
name|MockRuncContainerRuntime
name|runtime
init|=
operator|new
name|MockRuncContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|nmContext
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|configFile
init|=
name|captureRuncConfigFile
argument_list|()
decl_stmt|;
name|verifyRuncConfig
argument_list|(
name|configFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultROMountsInvalid ()
specifier|public
name|void
name|testDefaultROMountsInvalid
parameter_list|()
throws|throws
name|ContainerExecutionException
block|{
name|conf
operator|.
name|setStrings
argument_list|(
name|NM_RUNC_DEFAULT_RO_MOUNTS
argument_list|,
literal|"source,target"
argument_list|)
expr_stmt|;
name|RuncContainerRuntime
name|runtime
init|=
operator|new
name|MockRuncContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|nmContext
argument_list|)
expr_stmt|;
try|try
block|{
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a launch container failure due to invalid mount."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught expected exception : "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDefaultRWMounts ()
specifier|public
name|void
name|testDefaultRWMounts
parameter_list|()
throws|throws
name|ContainerExecutionException
throws|,
name|PrivilegedOperationException
throws|,
name|IOException
block|{
name|String
name|rwMount1
init|=
name|tmpPath
operator|+
literal|"/foo"
decl_stmt|;
name|File
name|rwMountFile1
init|=
operator|new
name|File
argument_list|(
name|rwMount1
argument_list|)
decl_stmt|;
name|rwMountFile1
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|String
name|rwMount2
init|=
name|tmpPath
operator|+
literal|"/bar"
decl_stmt|;
name|File
name|rwMountFile2
init|=
operator|new
name|File
argument_list|(
name|rwMount2
argument_list|)
decl_stmt|;
name|rwMountFile2
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|NM_RUNC_DEFAULT_RW_MOUNTS
argument_list|,
name|rwMount1
operator|+
literal|":"
operator|+
name|rwMount1
operator|+
literal|","
operator|+
name|rwMount2
operator|+
literal|":"
operator|+
name|rwMount2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rwOptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|rwOptions
operator|.
name|add
argument_list|(
literal|"rw"
argument_list|)
expr_stmt|;
name|rwOptions
operator|.
name|add
argument_list|(
literal|"rbind"
argument_list|)
expr_stmt|;
name|rwOptions
operator|.
name|add
argument_list|(
literal|"rprivate"
argument_list|)
expr_stmt|;
name|expectedMounts
operator|.
name|add
argument_list|(
operator|new
name|OCIMount
argument_list|(
name|rwMount1
argument_list|,
literal|"bind"
argument_list|,
name|rwMount1
argument_list|,
name|rwOptions
argument_list|)
argument_list|)
expr_stmt|;
name|expectedMounts
operator|.
name|add
argument_list|(
operator|new
name|OCIMount
argument_list|(
name|rwMount2
argument_list|,
literal|"bind"
argument_list|,
name|rwMount2
argument_list|,
name|rwOptions
argument_list|)
argument_list|)
expr_stmt|;
name|MockRuncContainerRuntime
name|runtime
init|=
operator|new
name|MockRuncContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|nmContext
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|configFile
init|=
name|captureRuncConfigFile
argument_list|()
decl_stmt|;
name|verifyRuncConfig
argument_list|(
name|configFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultRWMountsInvalid ()
specifier|public
name|void
name|testDefaultRWMountsInvalid
parameter_list|()
throws|throws
name|ContainerExecutionException
block|{
name|conf
operator|.
name|setStrings
argument_list|(
name|NM_RUNC_DEFAULT_RW_MOUNTS
argument_list|,
literal|"source,target"
argument_list|)
expr_stmt|;
name|RuncContainerRuntime
name|runtime
init|=
operator|new
name|MockRuncContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|nmContext
argument_list|)
expr_stmt|;
try|try
block|{
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a launch container failure due to invalid mount."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught expected exception : "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUserMounts ()
specifier|public
name|void
name|testUserMounts
parameter_list|()
throws|throws
name|ContainerExecutionException
throws|,
name|PrivilegedOperationException
throws|,
name|IOException
block|{
name|String
name|roMount
init|=
name|tmpPath
operator|+
literal|"/foo"
decl_stmt|;
name|File
name|roMountFile
init|=
operator|new
name|File
argument_list|(
name|roMount
argument_list|)
decl_stmt|;
name|roMountFile
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|String
name|rwMount
init|=
name|tmpPath
operator|+
literal|"/bar"
decl_stmt|;
name|File
name|rwMountFile
init|=
operator|new
name|File
argument_list|(
name|rwMount
argument_list|)
decl_stmt|;
name|rwMountFile
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|ENV_RUNC_CONTAINER_MOUNTS
argument_list|,
name|roMount
operator|+
literal|":"
operator|+
name|roMount
operator|+
literal|":ro,"
operator|+
name|rwMount
operator|+
literal|":"
operator|+
name|rwMount
operator|+
literal|":rw"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rwOptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|rwOptions
operator|.
name|add
argument_list|(
literal|"rw"
argument_list|)
expr_stmt|;
name|rwOptions
operator|.
name|add
argument_list|(
literal|"rbind"
argument_list|)
expr_stmt|;
name|rwOptions
operator|.
name|add
argument_list|(
literal|"rprivate"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|roOptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|roOptions
operator|.
name|add
argument_list|(
literal|"ro"
argument_list|)
expr_stmt|;
name|roOptions
operator|.
name|add
argument_list|(
literal|"rbind"
argument_list|)
expr_stmt|;
name|roOptions
operator|.
name|add
argument_list|(
literal|"rprivate"
argument_list|)
expr_stmt|;
name|expectedMounts
operator|.
name|add
argument_list|(
operator|new
name|OCIMount
argument_list|(
name|roMount
argument_list|,
literal|"bind"
argument_list|,
name|roMount
argument_list|,
name|roOptions
argument_list|)
argument_list|)
expr_stmt|;
name|expectedMounts
operator|.
name|add
argument_list|(
operator|new
name|OCIMount
argument_list|(
name|rwMount
argument_list|,
literal|"bind"
argument_list|,
name|rwMount
argument_list|,
name|rwOptions
argument_list|)
argument_list|)
expr_stmt|;
name|MockRuncContainerRuntime
name|runtime
init|=
operator|new
name|MockRuncContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|nmContext
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|configFile
init|=
name|captureRuncConfigFile
argument_list|()
decl_stmt|;
name|verifyRuncConfig
argument_list|(
name|configFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUserMountsInvalid ()
specifier|public
name|void
name|testUserMountsInvalid
parameter_list|()
throws|throws
name|ContainerExecutionException
block|{
name|env
operator|.
name|put
argument_list|(
name|ENV_RUNC_CONTAINER_MOUNTS
argument_list|,
literal|"source:target"
argument_list|)
expr_stmt|;
name|RuncContainerRuntime
name|runtime
init|=
operator|new
name|MockRuncContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|nmContext
argument_list|)
expr_stmt|;
try|try
block|{
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a launch container failure due to invalid mount."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught expected exception : "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUserMountsModeInvalid ()
specifier|public
name|void
name|testUserMountsModeInvalid
parameter_list|()
throws|throws
name|ContainerExecutionException
block|{
name|env
operator|.
name|put
argument_list|(
name|ENV_RUNC_CONTAINER_MOUNTS
argument_list|,
literal|"source:target:other"
argument_list|)
expr_stmt|;
name|RuncContainerRuntime
name|runtime
init|=
operator|new
name|MockRuncContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|nmContext
argument_list|)
expr_stmt|;
try|try
block|{
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a launch container failure due to invalid mount."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught expected exception : "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUserMountsModeNullInvalid ()
specifier|public
name|void
name|testUserMountsModeNullInvalid
parameter_list|()
throws|throws
name|ContainerExecutionException
block|{
name|env
operator|.
name|put
argument_list|(
name|ENV_RUNC_CONTAINER_MOUNTS
argument_list|,
literal|"s\0ource:target:ro"
argument_list|)
expr_stmt|;
name|RuncContainerRuntime
name|runtime
init|=
operator|new
name|MockRuncContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|nmContext
argument_list|)
expr_stmt|;
try|try
block|{
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a launch container failure due to invalid mount."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught expected exception : "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRuncHostnamePattern ()
specifier|public
name|void
name|testRuncHostnamePattern
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|validNames
init|=
block|{
literal|"ab"
block|,
literal|"a.b.c.d"
block|,
literal|"a1-b.cd.ef"
block|,
literal|"0AB."
block|,
literal|"C_D-"
block|}
decl_stmt|;
name|String
index|[]
name|invalidNames
init|=
block|{
literal|"a"
block|,
literal|"a#.b.c"
block|,
literal|"-a.b.c"
block|,
literal|"a@b.c"
block|,
literal|"a/b/c"
block|}
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|validNames
control|)
block|{
name|RuncContainerRuntime
operator|.
name|validateHostname
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|name
range|:
name|invalidNames
control|)
block|{
try|try
block|{
name|RuncContainerRuntime
operator|.
name|validateHostname
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|name
operator|+
literal|" is an invalid hostname and should fail the regex"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerExecutionException
name|ce
parameter_list|)
block|{
continue|continue;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testValidRuncHostnameLength ()
specifier|public
name|void
name|testValidRuncHostnameLength
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|validLength
init|=
literal|"example.test.site"
decl_stmt|;
name|RuncContainerRuntime
operator|.
name|validateHostname
argument_list|(
name|validLength
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ContainerExecutionException
operator|.
name|class
argument_list|)
DECL|method|testInvalidRuncHostnameLength ()
specifier|public
name|void
name|testInvalidRuncHostnameLength
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|invalidLength
init|=
literal|"exampleexampleexampleexampleexampleexampleexampleexample.test.site"
decl_stmt|;
name|RuncContainerRuntime
operator|.
name|validateHostname
argument_list|(
name|invalidLength
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetLocalResources ()
specifier|public
name|void
name|testGetLocalResources
parameter_list|()
throws|throws
name|Exception
block|{
name|RuncContainerRuntime
name|runtime
init|=
operator|new
name|MockRuncContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|nmContext
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|getLocalResources
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|RuncRuntimeObject
name|runtimeObject
init|=
name|captureRuncRuntimeObject
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|LocalResource
name|testConfig
init|=
name|runtimeObject
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LocalResource
argument_list|>
name|testLayers
init|=
name|runtimeObject
operator|.
name|getOCILayers
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|config
argument_list|,
name|testConfig
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|layers
argument_list|,
name|testLayers
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

