begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.nodelabels
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|nodelabels
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAttributeKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAttributeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_comment
comment|/**  * Test class for node configuration node attributes provider.  */
end_comment

begin_class
DECL|class|TestConfigurationNodeAttributesProvider
specifier|public
class|class
name|TestConfigurationNodeAttributesProvider
block|{
DECL|field|testRootDir
specifier|private
specifier|static
name|File
name|testRootDir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|TestConfigurationNodeAttributesProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-localDir"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
DECL|field|nodeAttributesProvider
specifier|private
name|ConfigurationNodeAttributesProvider
name|nodeAttributesProvider
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|create ()
specifier|public
specifier|static
name|void
name|create
parameter_list|()
block|{
name|testRootDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|nodeAttributesProvider
operator|=
operator|new
name|ConfigurationNodeAttributesProvider
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|nodeAttributesProvider
operator|!=
literal|null
condition|)
block|{
name|nodeAttributesProvider
operator|.
name|close
argument_list|()
expr_stmt|;
name|nodeAttributesProvider
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
DECL|method|remove ()
specifier|public
specifier|static
name|void
name|remove
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|testRootDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|testRootDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000L
argument_list|)
DECL|method|testNodeAttributesFetchInterval ()
specifier|public
name|void
name|testNodeAttributesFetchInterval
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Set
argument_list|<
name|NodeAttribute
argument_list|>
name|expectedAttributes1
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedAttributes1
operator|.
name|add
argument_list|(
name|NodeAttribute
operator|.
name|newInstance
argument_list|(
literal|"test.io"
argument_list|,
literal|"host"
argument_list|,
name|NodeAttributeType
operator|.
name|STRING
argument_list|,
literal|"host1"
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Set fetch interval to 1s for testing
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NODE_ATTRIBUTES_PROVIDER_FETCH_INTERVAL_MS
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|ConfigurationNodeAttributesProvider
name|spyProvider
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|nodeAttributesProvider
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|spyProvider
operator|.
name|parseAttributes
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|expectedAttributes1
argument_list|)
expr_stmt|;
name|spyProvider
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|spyProvider
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Verify init value is honored.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedAttributes1
argument_list|,
name|spyProvider
operator|.
name|getDescriptors
argument_list|()
argument_list|)
expr_stmt|;
comment|// Configuration provider provides a different set of attributes.
name|Set
argument_list|<
name|NodeAttribute
argument_list|>
name|expectedAttributes2
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedAttributes2
operator|.
name|add
argument_list|(
name|NodeAttribute
operator|.
name|newInstance
argument_list|(
literal|"test.io"
argument_list|,
literal|"os"
argument_list|,
name|NodeAttributeType
operator|.
name|STRING
argument_list|,
literal|"windows"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|spyProvider
operator|.
name|parseAttributes
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|expectedAttributes2
argument_list|)
expr_stmt|;
comment|// Since we set fetch interval to 1s, it needs to wait for 1s until
comment|// the updated attributes is updated to the provider. So we are expecting
comment|// to see some old values for a short window.
name|ArrayList
argument_list|<
name|String
argument_list|>
name|keysMet
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numOfOldValue
init|=
literal|0
decl_stmt|;
name|int
name|numOfNewValue
init|=
literal|0
decl_stmt|;
comment|// Run 5 times in 500ms interval
name|int
name|times
init|=
literal|5
decl_stmt|;
while|while
condition|(
name|times
operator|>
literal|0
condition|)
block|{
name|Set
argument_list|<
name|NodeAttribute
argument_list|>
name|current
init|=
name|spyProvider
operator|.
name|getDescriptors
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|current
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|attributeName
init|=
name|current
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getAttributeKey
argument_list|()
operator|.
name|getAttributeName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"host"
operator|.
name|equals
argument_list|(
name|attributeName
argument_list|)
condition|)
block|{
name|numOfOldValue
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"os"
operator|.
name|equals
argument_list|(
name|attributeName
argument_list|)
condition|)
block|{
name|numOfNewValue
operator|++
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|times
operator|--
expr_stmt|;
block|}
comment|// We should either see the old value or the new value.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|numOfNewValue
operator|+
name|numOfOldValue
argument_list|)
expr_stmt|;
comment|// Both values should be more than 0.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|numOfOldValue
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|numOfNewValue
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDisableFetchNodeAttributes ()
specifier|public
name|void
name|testDisableFetchNodeAttributes
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Set
argument_list|<
name|NodeAttribute
argument_list|>
name|expectedAttributes1
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedAttributes1
operator|.
name|add
argument_list|(
name|NodeAttribute
operator|.
name|newInstance
argument_list|(
literal|"test.io"
argument_list|,
literal|"host"
argument_list|,
name|NodeAttributeType
operator|.
name|STRING
argument_list|,
literal|"host1"
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Set fetch interval to -1 to disable refresh.
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NODE_ATTRIBUTES_PROVIDER_FETCH_INTERVAL_MS
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ConfigurationNodeAttributesProvider
name|spyProvider
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|nodeAttributesProvider
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|spyProvider
operator|.
name|parseAttributes
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|expectedAttributes1
argument_list|)
expr_stmt|;
name|spyProvider
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|spyProvider
operator|.
name|start
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedAttributes1
argument_list|,
name|spyProvider
operator|.
name|getDescriptors
argument_list|()
argument_list|)
expr_stmt|;
comment|// The configuration added another attribute,
comment|// as we disabled the fetch interval, this value cannot be
comment|// updated to the provider.
name|Set
argument_list|<
name|NodeAttribute
argument_list|>
name|expectedAttributes2
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedAttributes2
operator|.
name|add
argument_list|(
name|NodeAttribute
operator|.
name|newInstance
argument_list|(
literal|"test.io"
argument_list|,
literal|"os"
argument_list|,
name|NodeAttributeType
operator|.
name|STRING
argument_list|,
literal|"windows"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|spyProvider
operator|.
name|parseAttributes
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|expectedAttributes2
argument_list|)
expr_stmt|;
comment|// Wait a few seconds until we get the value update, expecting a failure.
try|try
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
name|Set
argument_list|<
name|NodeAttribute
argument_list|>
name|attributes
init|=
name|spyProvider
operator|.
name|getDescriptors
argument_list|()
decl_stmt|;
return|return
literal|"os"
operator|.
name|equalsIgnoreCase
argument_list|(
name|attributes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getAttributeKey
argument_list|()
operator|.
name|getAttributeName
argument_list|()
argument_list|)
return|;
block|}
argument_list|,
literal|500
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Make sure we get the timeout exception.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|TimeoutException
argument_list|)
expr_stmt|;
return|return;
block|}
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expecting a failure in previous check!"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFetchAttributesFromConfiguration ()
specifier|public
name|void
name|testFetchAttributesFromConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Set fetch interval to -1 to disable refresh.
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NODE_ATTRIBUTES_PROVIDER_FETCH_INTERVAL_MS
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_PROVIDER_CONFIGURED_NODE_ATTRIBUTES
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParseConfiguration ()
specifier|public
name|void
name|testParseConfiguration
parameter_list|()
throws|throws
name|IOException
block|{
comment|// ATTRIBUTE_NAME,ATTRIBUTE_TYPE,ATTRIBUTE_VALUE
name|String
name|attributesStr
init|=
literal|"hostname,STRING,host1234:uptime,STRING,321543"
decl_stmt|;
name|Set
argument_list|<
name|NodeAttribute
argument_list|>
name|attributes
init|=
name|nodeAttributesProvider
operator|.
name|parseAttributes
argument_list|(
name|attributesStr
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|NodeAttribute
argument_list|>
name|ait
init|=
name|attributes
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|ait
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NodeAttribute
name|attr
init|=
name|ait
operator|.
name|next
argument_list|()
decl_stmt|;
name|NodeAttributeKey
name|at
init|=
name|attr
operator|.
name|getAttributeKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|at
operator|.
name|getAttributeName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hostname"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"hostname"
argument_list|,
name|at
operator|.
name|getAttributeName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAttribute
operator|.
name|PREFIX_DISTRIBUTED
argument_list|,
name|at
operator|.
name|getAttributePrefix
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAttributeType
operator|.
name|STRING
argument_list|,
name|attr
operator|.
name|getAttributeType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"host1234"
argument_list|,
name|attr
operator|.
name|getAttributeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|at
operator|.
name|getAttributeName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"uptime"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"uptime"
argument_list|,
name|at
operator|.
name|getAttributeName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAttribute
operator|.
name|PREFIX_DISTRIBUTED
argument_list|,
name|at
operator|.
name|getAttributePrefix
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAttributeType
operator|.
name|STRING
argument_list|,
name|attr
operator|.
name|getAttributeType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"321543"
argument_list|,
name|attr
operator|.
name|getAttributeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected attribute"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Missing type
name|attributesStr
operator|=
literal|"hostname,host1234"
expr_stmt|;
try|try
block|{
name|nodeAttributesProvider
operator|.
name|parseAttributes
argument_list|(
name|attributesStr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expecting a parsing failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Extra prefix
name|attributesStr
operator|=
literal|"prefix/hostname,STRING,host1234"
expr_stmt|;
try|try
block|{
name|nodeAttributesProvider
operator|.
name|parseAttributes
argument_list|(
name|attributesStr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expecting a parsing failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"should not contain any prefix."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Invalid type
name|attributesStr
operator|=
literal|"hostname,T,host1234"
expr_stmt|;
try|try
block|{
name|nodeAttributesProvider
operator|.
name|parseAttributes
argument_list|(
name|attributesStr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expecting a parsing failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid node attribute type"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

