begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.health
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|health
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test class for {@link NodeHealthScriptRunner}.  */
end_comment

begin_class
DECL|class|TestNodeHealthScriptRunner
specifier|public
class|class
name|TestNodeHealthScriptRunner
block|{
DECL|field|testRootDir
specifier|private
specifier|static
name|File
name|testRootDir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|TestNodeHealthScriptRunner
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-localDir"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
DECL|field|nodeHealthscriptFile
specifier|private
name|File
name|nodeHealthscriptFile
init|=
operator|new
name|File
argument_list|(
name|testRootDir
argument_list|,
name|Shell
operator|.
name|appendScriptExtension
argument_list|(
literal|"failingscript"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|testRootDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|testRootDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|testRootDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeNodeHealthScriptFile (String scriptStr, boolean setExecutable)
specifier|private
name|void
name|writeNodeHealthScriptFile
parameter_list|(
name|String
name|scriptStr
parameter_list|,
name|boolean
name|setExecutable
parameter_list|)
throws|throws
name|IOException
block|{
name|PrintWriter
name|pw
init|=
literal|null
decl_stmt|;
try|try
block|{
name|FileUtil
operator|.
name|setWritable
argument_list|(
name|nodeHealthscriptFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|setReadable
argument_list|(
name|nodeHealthscriptFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|pw
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|nodeHealthscriptFile
argument_list|)
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
name|scriptStr
argument_list|)
expr_stmt|;
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|nodeHealthscriptFile
argument_list|,
name|setExecutable
argument_list|)
expr_stmt|;
block|}
DECL|method|createNodeHealthScript ()
specifier|private
name|NodeHealthScriptRunner
name|createNodeHealthScript
parameter_list|()
block|{
name|String
name|scriptName
init|=
literal|"custom"
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_HEALTH_CHECK_SCRIPTS
argument_list|,
name|scriptName
argument_list|)
expr_stmt|;
name|String
name|timeoutConfig
init|=
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_HEALTH_CHECK_SCRIPT_TIMEOUT_MS_TEMPLATE
argument_list|,
name|scriptName
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|timeoutConfig
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|String
name|intervalConfig
init|=
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_HEALTH_CHECK_SCRIPT_INTERVAL_MS_TEMPLATE
argument_list|,
name|scriptName
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|intervalConfig
argument_list|,
literal|500L
argument_list|)
expr_stmt|;
name|String
name|pathConfig
init|=
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_HEALTH_CHECK_SCRIPT_PATH_TEMPLATE
argument_list|,
name|scriptName
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|pathConfig
argument_list|,
name|nodeHealthscriptFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|NodeHealthScriptRunner
operator|.
name|newInstance
argument_list|(
literal|"custom"
argument_list|,
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testNodeHealthScriptShouldRun ()
specifier|public
name|void
name|testNodeHealthScriptShouldRun
parameter_list|()
throws|throws
name|IOException
block|{
name|assertFalse
argument_list|(
literal|"Node health script should start"
argument_list|,
name|NodeHealthScriptRunner
operator|.
name|shouldRun
argument_list|(
literal|"script"
argument_list|,
name|nodeHealthscriptFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writeNodeHealthScriptFile
argument_list|(
literal|""
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Node health script should not start if the node health script is not
comment|// executable.
name|assertFalse
argument_list|(
literal|"Node health script should start"
argument_list|,
name|NodeHealthScriptRunner
operator|.
name|shouldRun
argument_list|(
literal|"script"
argument_list|,
name|nodeHealthscriptFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writeNodeHealthScriptFile
argument_list|(
literal|""
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Node health script should start"
argument_list|,
name|NodeHealthScriptRunner
operator|.
name|shouldRun
argument_list|(
literal|"script"
argument_list|,
name|nodeHealthscriptFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeHealthScript ()
specifier|public
name|void
name|testNodeHealthScript
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|errorScript
init|=
literal|"echo ERROR\n echo \"Tracker not healthy\""
decl_stmt|;
name|String
name|normalScript
init|=
literal|"echo \"I am all fine\""
decl_stmt|;
name|String
name|timeOutScript
init|=
name|Shell
operator|.
name|WINDOWS
condition|?
literal|"@echo off\nping -n 4 127.0.0.1>nul\necho \"I am fine\""
else|:
literal|"sleep 4\necho \"I am fine\""
decl_stmt|;
name|String
name|exitCodeScript
init|=
literal|"exit 127"
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|writeNodeHealthScriptFile
argument_list|(
name|normalScript
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NodeHealthScriptRunner
name|nodeHealthScriptRunner
init|=
name|createNodeHealthScript
argument_list|()
decl_stmt|;
name|nodeHealthScriptRunner
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|TimerTask
name|timerTask
init|=
name|nodeHealthScriptRunner
operator|.
name|getTimerTask
argument_list|()
decl_stmt|;
name|timerTask
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// Normal Script runs successfully
name|assertTrue
argument_list|(
literal|"Node health status reported unhealthy"
argument_list|,
name|nodeHealthScriptRunner
operator|.
name|isHealthy
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodeHealthScriptRunner
operator|.
name|getHealthReport
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Error script.
name|writeNodeHealthScriptFile
argument_list|(
name|errorScript
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Run timer
name|timerTask
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Node health status reported healthy"
argument_list|,
name|nodeHealthScriptRunner
operator|.
name|isHealthy
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodeHealthScriptRunner
operator|.
name|getHealthReport
argument_list|()
operator|.
name|contains
argument_list|(
literal|"ERROR"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Healthy script.
name|writeNodeHealthScriptFile
argument_list|(
name|normalScript
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|timerTask
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Node health status reported unhealthy"
argument_list|,
name|nodeHealthScriptRunner
operator|.
name|isHealthy
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodeHealthScriptRunner
operator|.
name|getHealthReport
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Timeout script.
name|writeNodeHealthScriptFile
argument_list|(
name|timeOutScript
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|timerTask
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Node health status reported healthy even after timeout"
argument_list|,
name|nodeHealthScriptRunner
operator|.
name|isHealthy
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NodeHealthScriptRunner
operator|.
name|NODE_HEALTH_SCRIPT_TIMED_OUT_MSG
argument_list|,
name|nodeHealthScriptRunner
operator|.
name|getHealthReport
argument_list|()
argument_list|)
expr_stmt|;
comment|// Exit code 127
name|writeNodeHealthScriptFile
argument_list|(
name|exitCodeScript
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|timerTask
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Node health status reported unhealthy"
argument_list|,
name|nodeHealthScriptRunner
operator|.
name|isHealthy
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|nodeHealthScriptRunner
operator|.
name|getHealthReport
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

