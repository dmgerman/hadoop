begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * *  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  * /  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.runtime
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|runc
operator|.
name|HdfsManifestToResourcesPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|runc
operator|.
name|ImageManifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|NM_RUNC_IMAGE_TOPLEVEL_DIR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * This class tests the hdfs manifest to resources plugin used by the  * RuncContainerRuntime to map an image manifest into a list of local resources.  */
end_comment

begin_class
DECL|class|TestHdfsManifestToResourcesPlugin
specifier|public
class|class
name|TestHdfsManifestToResourcesPlugin
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestHdfsManifestToResourcesPlugin
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|tmpPath
specifier|private
name|String
name|tmpPath
init|=
operator|new
name|StringBuffer
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
literal|"hadoop.tmp.dir"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
DECL|field|LAYER_MEDIA_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|LAYER_MEDIA_TYPE
init|=
literal|"application/vnd.docker.image.rootfs.diff.tar.gzip"
decl_stmt|;
DECL|field|CONFIG_MEDIA_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_MEDIA_TYPE
init|=
literal|"application/vnd.docker.container.image.v1+json"
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|File
name|tmpDir
init|=
operator|new
name|File
argument_list|(
name|tmpPath
argument_list|)
decl_stmt|;
name|tmpDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|tmpDir
init|=
operator|new
name|File
argument_list|(
name|tmpPath
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|tmpDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetLayerResources ()
specifier|public
name|void
name|testGetLayerResources
parameter_list|()
throws|throws
name|IOException
block|{
name|ImageManifest
name|mockManifest
init|=
name|mock
argument_list|(
name|ImageManifest
operator|.
name|class
argument_list|)
decl_stmt|;
name|ImageManifest
operator|.
name|Blob
name|mockLayer1
init|=
name|mock
argument_list|(
name|ImageManifest
operator|.
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
name|ImageManifest
operator|.
name|Blob
name|mockLayer2
init|=
name|mock
argument_list|(
name|ImageManifest
operator|.
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|digest1Hash
init|=
literal|"e060f9dd9e8cd9ec0e2814b661a96d78f7298120d7654ba9f83ebfb11ff1fb1e"
decl_stmt|;
name|String
name|digest2Hash
init|=
literal|"5af5ff88469c8473487bfbc2fe81b4e7d84644bd91f1ab9305de47ef5673637e"
decl_stmt|;
name|String
name|digest1
init|=
literal|"sha256:"
operator|+
name|digest1Hash
decl_stmt|;
name|String
name|digest2
init|=
literal|"sha256:"
operator|+
name|digest2Hash
decl_stmt|;
name|long
name|size1
init|=
literal|1234
decl_stmt|;
name|long
name|size2
init|=
literal|5678
decl_stmt|;
name|when
argument_list|(
name|mockLayer1
operator|.
name|getMediaType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|LAYER_MEDIA_TYPE
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockLayer1
operator|.
name|getDigest
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|digest1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockLayer1
operator|.
name|getSize
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|size1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockLayer2
operator|.
name|getMediaType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|LAYER_MEDIA_TYPE
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockLayer2
operator|.
name|getDigest
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|digest2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockLayer2
operator|.
name|getSize
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|size2
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|ImageManifest
operator|.
name|Blob
argument_list|>
name|mockLayers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|mockLayers
operator|.
name|add
argument_list|(
name|mockLayer1
argument_list|)
expr_stmt|;
name|mockLayers
operator|.
name|add
argument_list|(
name|mockLayer2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockManifest
operator|.
name|getLayers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockLayers
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|NM_RUNC_IMAGE_TOPLEVEL_DIR
argument_list|,
name|tmpPath
argument_list|)
expr_stmt|;
name|long
name|modTime
init|=
literal|123456789
decl_stmt|;
name|HdfsManifestToResourcesPlugin
name|hdfsManifestToResourcesPlugin
init|=
operator|new
name|HdfsManifestToResourcesPlugin
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|FileStatus
name|statBlob
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|mockFileStatus
init|=
name|mock
argument_list|(
name|FileStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFileStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|modTime
argument_list|)
expr_stmt|;
return|return
name|mockFileStatus
return|;
block|}
block|}
decl_stmt|;
name|hdfsManifestToResourcesPlugin
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LocalResource
argument_list|>
name|returnedLayers
init|=
name|hdfsManifestToResourcesPlugin
operator|.
name|getLayerResources
argument_list|(
name|mockManifest
argument_list|)
decl_stmt|;
name|URL
name|url1
init|=
name|URL
operator|.
name|fromPath
argument_list|(
operator|new
name|Path
argument_list|(
name|tmpPath
operator|+
literal|"/layers"
argument_list|,
name|digest1Hash
operator|+
literal|".sqsh"
argument_list|)
argument_list|)
decl_stmt|;
name|URL
name|url2
init|=
name|URL
operator|.
name|fromPath
argument_list|(
operator|new
name|Path
argument_list|(
name|tmpPath
operator|+
literal|"/layers"
argument_list|,
name|digest2Hash
operator|+
literal|".sqsh"
argument_list|)
argument_list|)
decl_stmt|;
name|LocalResource
name|rsrc1
init|=
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|url1
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|size1
argument_list|,
name|modTime
argument_list|)
decl_stmt|;
name|LocalResource
name|rsrc2
init|=
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|url2
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|size2
argument_list|,
name|modTime
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rsrc1
argument_list|,
name|returnedLayers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rsrc2
argument_list|,
name|returnedLayers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetConfigResources ()
specifier|public
name|void
name|testGetConfigResources
parameter_list|()
throws|throws
name|IOException
block|{
name|ImageManifest
name|mockManifest
init|=
name|mock
argument_list|(
name|ImageManifest
operator|.
name|class
argument_list|)
decl_stmt|;
name|ImageManifest
operator|.
name|Blob
name|mockConfig
init|=
name|mock
argument_list|(
name|ImageManifest
operator|.
name|Blob
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|digestHash
init|=
literal|"e23cac476d0238f0f859c1e07e5faad85262bca490ef5c3a9da32a5b39c6b204"
decl_stmt|;
name|String
name|digest
init|=
literal|"sha256:"
operator|+
name|digestHash
decl_stmt|;
name|long
name|size
init|=
literal|1234
decl_stmt|;
name|when
argument_list|(
name|mockConfig
operator|.
name|getMediaType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|CONFIG_MEDIA_TYPE
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockConfig
operator|.
name|getDigest
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|digest
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockConfig
operator|.
name|getSize
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockManifest
operator|.
name|getConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockConfig
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|NM_RUNC_IMAGE_TOPLEVEL_DIR
argument_list|,
name|tmpPath
argument_list|)
expr_stmt|;
name|long
name|modTime
init|=
literal|123456789
decl_stmt|;
name|HdfsManifestToResourcesPlugin
name|hdfsManifestToResourcesPlugin
init|=
operator|new
name|HdfsManifestToResourcesPlugin
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|FileStatus
name|statBlob
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|mockFileStatus
init|=
name|mock
argument_list|(
name|FileStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFileStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|modTime
argument_list|)
expr_stmt|;
return|return
name|mockFileStatus
return|;
block|}
block|}
decl_stmt|;
name|hdfsManifestToResourcesPlugin
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|LocalResource
name|returnedLayer
init|=
name|hdfsManifestToResourcesPlugin
operator|.
name|getConfigResource
argument_list|(
name|mockManifest
argument_list|)
decl_stmt|;
name|URL
name|url1
init|=
name|URL
operator|.
name|fromPath
argument_list|(
operator|new
name|Path
argument_list|(
name|tmpPath
operator|+
literal|"/config"
argument_list|,
name|digestHash
argument_list|)
argument_list|)
decl_stmt|;
name|LocalResource
name|rsrc
init|=
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|url1
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|size
argument_list|,
name|modTime
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rsrc
argument_list|,
name|returnedLayer
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

