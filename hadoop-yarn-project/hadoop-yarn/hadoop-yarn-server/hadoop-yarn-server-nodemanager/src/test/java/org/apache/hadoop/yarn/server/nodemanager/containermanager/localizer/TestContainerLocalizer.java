begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|argThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|isA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|same
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doNothing
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|AbstractFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalDirAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|LocalizationProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LocalResourceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LocalizerAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LocalizerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_class
DECL|class|TestContainerLocalizer
specifier|public
class|class
name|TestContainerLocalizer
block|{
DECL|field|basedir
specifier|static
specifier|final
name|Path
name|basedir
init|=
operator|new
name|Path
argument_list|(
literal|"target"
argument_list|,
name|TestContainerLocalizer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|appUser
specifier|static
specifier|final
name|String
name|appUser
init|=
literal|"yak"
decl_stmt|;
DECL|field|appId
specifier|static
specifier|final
name|String
name|appId
init|=
literal|"app_RM_0"
decl_stmt|;
DECL|field|containerId
specifier|static
specifier|final
name|String
name|containerId
init|=
literal|"container_0"
decl_stmt|;
DECL|field|nmAddr
specifier|static
specifier|final
name|InetSocketAddress
name|nmAddr
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"foobar"
argument_list|,
literal|8040
argument_list|)
decl_stmt|;
DECL|field|spylfs
specifier|private
name|AbstractFileSystem
name|spylfs
decl_stmt|;
DECL|field|random
specifier|private
name|Random
name|random
decl_stmt|;
DECL|field|localDirs
specifier|private
name|List
argument_list|<
name|Path
argument_list|>
name|localDirs
decl_stmt|;
DECL|field|tokenPath
specifier|private
name|Path
name|tokenPath
decl_stmt|;
DECL|field|nmProxy
specifier|private
name|LocalizationProtocol
name|nmProxy
decl_stmt|;
annotation|@
name|Test
DECL|method|testContainerLocalizerMain ()
specifier|public
name|void
name|testContainerLocalizerMain
parameter_list|()
throws|throws
name|Exception
block|{
name|ContainerLocalizer
name|localizer
init|=
name|setupContainerLocalizerForTest
argument_list|()
decl_stmt|;
comment|// mock heartbeat responses from NM
name|LocalResource
name|rsrcA
init|=
name|getMockRsrc
argument_list|(
name|random
argument_list|,
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|)
decl_stmt|;
name|LocalResource
name|rsrcB
init|=
name|getMockRsrc
argument_list|(
name|random
argument_list|,
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|)
decl_stmt|;
name|LocalResource
name|rsrcC
init|=
name|getMockRsrc
argument_list|(
name|random
argument_list|,
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
decl_stmt|;
name|LocalResource
name|rsrcD
init|=
name|getMockRsrc
argument_list|(
name|random
argument_list|,
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|nmProxy
operator|.
name|heartbeat
argument_list|(
name|isA
argument_list|(
name|LocalizerStatus
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|MockLocalizerHeartbeatResponse
argument_list|(
name|LocalizerAction
operator|.
name|LIVE
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|rsrcA
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|MockLocalizerHeartbeatResponse
argument_list|(
name|LocalizerAction
operator|.
name|LIVE
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|rsrcB
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|MockLocalizerHeartbeatResponse
argument_list|(
name|LocalizerAction
operator|.
name|LIVE
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|rsrcC
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|MockLocalizerHeartbeatResponse
argument_list|(
name|LocalizerAction
operator|.
name|LIVE
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|rsrcD
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|MockLocalizerHeartbeatResponse
argument_list|(
name|LocalizerAction
operator|.
name|LIVE
argument_list|,
name|Collections
operator|.
expr|<
name|LocalResource
operator|>
name|emptyList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|MockLocalizerHeartbeatResponse
argument_list|(
name|LocalizerAction
operator|.
name|DIE
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
operator|new
name|FakeDownload
argument_list|(
name|rsrcA
operator|.
name|getResource
argument_list|()
operator|.
name|getFile
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|localizer
argument_list|)
operator|.
name|download
argument_list|(
name|isA
argument_list|(
name|LocalDirAllocator
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|rsrcA
argument_list|)
argument_list|,
name|isA
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
operator|new
name|FakeDownload
argument_list|(
name|rsrcB
operator|.
name|getResource
argument_list|()
operator|.
name|getFile
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|localizer
argument_list|)
operator|.
name|download
argument_list|(
name|isA
argument_list|(
name|LocalDirAllocator
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|rsrcB
argument_list|)
argument_list|,
name|isA
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
operator|new
name|FakeDownload
argument_list|(
name|rsrcC
operator|.
name|getResource
argument_list|()
operator|.
name|getFile
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|localizer
argument_list|)
operator|.
name|download
argument_list|(
name|isA
argument_list|(
name|LocalDirAllocator
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|rsrcC
argument_list|)
argument_list|,
name|isA
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
operator|new
name|FakeDownload
argument_list|(
name|rsrcD
operator|.
name|getResource
argument_list|()
operator|.
name|getFile
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|localizer
argument_list|)
operator|.
name|download
argument_list|(
name|isA
argument_list|(
name|LocalDirAllocator
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|rsrcD
argument_list|)
argument_list|,
name|isA
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// run localization
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|localizer
operator|.
name|runLocalization
argument_list|(
name|nmAddr
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify created cache
for|for
control|(
name|Path
name|p
range|:
name|localDirs
control|)
block|{
name|Path
name|base
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|p
argument_list|,
name|ContainerLocalizer
operator|.
name|USERCACHE
argument_list|)
argument_list|,
name|appUser
argument_list|)
decl_stmt|;
name|Path
name|privcache
init|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
name|ContainerLocalizer
operator|.
name|FILECACHE
argument_list|)
decl_stmt|;
comment|// $x/usercache/$user/filecache
name|verify
argument_list|(
name|spylfs
argument_list|)
operator|.
name|mkdir
argument_list|(
name|eq
argument_list|(
name|privcache
argument_list|)
argument_list|,
name|isA
argument_list|(
name|FsPermission
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|appDir
init|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
operator|new
name|Path
argument_list|(
name|ContainerLocalizer
operator|.
name|APPCACHE
argument_list|,
name|appId
argument_list|)
argument_list|)
decl_stmt|;
comment|// $x/usercache/$user/appcache/$appId/filecache
name|Path
name|appcache
init|=
operator|new
name|Path
argument_list|(
name|appDir
argument_list|,
name|ContainerLocalizer
operator|.
name|FILECACHE
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|spylfs
argument_list|)
operator|.
name|mkdir
argument_list|(
name|eq
argument_list|(
name|appcache
argument_list|)
argument_list|,
name|isA
argument_list|(
name|FsPermission
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// verify tokens read at expected location
name|verify
argument_list|(
name|spylfs
argument_list|)
operator|.
name|open
argument_list|(
name|tokenPath
argument_list|)
expr_stmt|;
comment|// verify downloaded resources reported to NM
name|verify
argument_list|(
name|nmProxy
argument_list|)
operator|.
name|heartbeat
argument_list|(
name|argThat
argument_list|(
operator|new
name|HBMatches
argument_list|(
name|rsrcA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|nmProxy
argument_list|)
operator|.
name|heartbeat
argument_list|(
name|argThat
argument_list|(
operator|new
name|HBMatches
argument_list|(
name|rsrcB
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|nmProxy
argument_list|)
operator|.
name|heartbeat
argument_list|(
name|argThat
argument_list|(
operator|new
name|HBMatches
argument_list|(
name|rsrcC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|nmProxy
argument_list|)
operator|.
name|heartbeat
argument_list|(
name|argThat
argument_list|(
operator|new
name|HBMatches
argument_list|(
name|rsrcD
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify all HB use localizerID provided
name|verify
argument_list|(
name|nmProxy
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|heartbeat
argument_list|(
name|argThat
argument_list|(
operator|new
name|ArgumentMatcher
argument_list|<
name|LocalizerStatus
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|LocalizerStatus
name|status
init|=
operator|(
name|LocalizerStatus
operator|)
name|o
decl_stmt|;
return|return
operator|!
name|containerId
operator|.
name|equals
argument_list|(
name|status
operator|.
name|getLocalizerId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// mocked generics
DECL|method|testContainerLocalizerClosesFilesystems ()
specifier|public
name|void
name|testContainerLocalizerClosesFilesystems
parameter_list|()
throws|throws
name|Exception
block|{
comment|// verify filesystems are closed when localizer doesn't fail
name|ContainerLocalizer
name|localizer
init|=
name|setupContainerLocalizerForTest
argument_list|()
decl_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|localizer
argument_list|)
operator|.
name|localizeFiles
argument_list|(
name|any
argument_list|(
name|LocalizationProtocol
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|CompletionService
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|localizer
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|closeFileSystems
argument_list|(
name|any
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|localizer
operator|.
name|runLocalization
argument_list|(
name|nmAddr
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|localizer
argument_list|)
operator|.
name|closeFileSystems
argument_list|(
name|any
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify filesystems are closed when localizer fails
name|localizer
operator|=
name|setupContainerLocalizerForTest
argument_list|()
expr_stmt|;
name|doThrow
argument_list|(
operator|new
name|YarnException
argument_list|(
literal|"Forced Failure"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|localizer
argument_list|)
operator|.
name|localizeFiles
argument_list|(
name|any
argument_list|(
name|LocalizationProtocol
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|CompletionService
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|localizer
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|closeFileSystems
argument_list|(
name|any
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|localizer
operator|.
name|runLocalization
argument_list|(
name|nmAddr
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|localizer
argument_list|)
operator|.
name|closeFileSystems
argument_list|(
name|any
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// mocked generics
DECL|method|setupContainerLocalizerForTest ()
specifier|private
name|ContainerLocalizer
name|setupContainerLocalizerForTest
parameter_list|()
throws|throws
name|Exception
block|{
name|spylfs
operator|=
name|spy
argument_list|(
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|getDefaultFileSystem
argument_list|()
argument_list|)
expr_stmt|;
comment|// don't actually create dirs
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|spylfs
argument_list|)
operator|.
name|mkdir
argument_list|(
name|isA
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|FsPermission
operator|.
name|class
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileContext
name|lfs
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|spylfs
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|localDirs
operator|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|localDirs
operator|.
name|add
argument_list|(
name|lfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
name|i
operator|+
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RecordFactory
name|mockRF
init|=
name|getMockLocalizerRecordFactory
argument_list|()
decl_stmt|;
name|ContainerLocalizer
name|concreteLoc
init|=
operator|new
name|ContainerLocalizer
argument_list|(
name|lfs
argument_list|,
name|appUser
argument_list|,
name|appId
argument_list|,
name|containerId
argument_list|,
name|localDirs
argument_list|,
name|mockRF
argument_list|)
decl_stmt|;
name|ContainerLocalizer
name|localizer
init|=
name|spy
argument_list|(
name|concreteLoc
argument_list|)
decl_stmt|;
comment|// return credential stream instead of opening local file
name|random
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
name|long
name|seed
init|=
name|random
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SEED: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|random
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|DataInputBuffer
name|appTokens
init|=
name|createFakeCredentials
argument_list|(
name|random
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|tokenPath
operator|=
name|lfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|ContainerLocalizer
operator|.
name|TOKEN_FILE_NAME_FMT
argument_list|,
name|containerId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
operator|new
name|FSDataInputStream
argument_list|(
operator|new
name|FakeFSDataInputStream
argument_list|(
name|appTokens
argument_list|)
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spylfs
argument_list|)
operator|.
name|open
argument_list|(
name|tokenPath
argument_list|)
expr_stmt|;
name|nmProxy
operator|=
name|mock
argument_list|(
name|LocalizationProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|nmProxy
argument_list|)
operator|.
name|when
argument_list|(
name|localizer
argument_list|)
operator|.
name|getProxy
argument_list|(
name|nmAddr
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|localizer
argument_list|)
operator|.
name|sleep
argument_list|(
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
comment|// return result instantly for deterministic test
name|ExecutorService
name|syncExec
init|=
name|mock
argument_list|(
name|ExecutorService
operator|.
name|class
argument_list|)
decl_stmt|;
name|CompletionService
argument_list|<
name|Path
argument_list|>
name|cs
init|=
name|mock
argument_list|(
name|CompletionService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|cs
operator|.
name|submit
argument_list|(
name|isA
argument_list|(
name|Callable
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Future
argument_list|<
name|Path
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Future
argument_list|<
name|Path
argument_list|>
name|answer
parameter_list|(
name|InvocationOnMock
name|invoc
parameter_list|)
throws|throws
name|Throwable
block|{
name|Future
argument_list|<
name|Path
argument_list|>
name|done
init|=
name|mock
argument_list|(
name|Future
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|done
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FakeDownload
name|d
init|=
operator|(
name|FakeDownload
operator|)
name|invoc
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|when
argument_list|(
name|done
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|d
operator|.
name|call
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|done
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|syncExec
argument_list|)
operator|.
name|when
argument_list|(
name|localizer
argument_list|)
operator|.
name|createDownloadThreadPool
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|cs
argument_list|)
operator|.
name|when
argument_list|(
name|localizer
argument_list|)
operator|.
name|createCompletionService
argument_list|(
name|syncExec
argument_list|)
expr_stmt|;
return|return
name|localizer
return|;
block|}
DECL|class|HBMatches
specifier|static
class|class
name|HBMatches
extends|extends
name|ArgumentMatcher
argument_list|<
name|LocalizerStatus
argument_list|>
block|{
DECL|field|rsrc
specifier|final
name|LocalResource
name|rsrc
decl_stmt|;
DECL|method|HBMatches (LocalResource rsrc)
name|HBMatches
parameter_list|(
name|LocalResource
name|rsrc
parameter_list|)
block|{
name|this
operator|.
name|rsrc
operator|=
name|rsrc
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|matches (Object o)
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|LocalizerStatus
name|status
init|=
operator|(
name|LocalizerStatus
operator|)
name|o
decl_stmt|;
for|for
control|(
name|LocalResourceStatus
name|localized
range|:
name|status
operator|.
name|getResources
argument_list|()
control|)
block|{
switch|switch
condition|(
name|localized
operator|.
name|getStatus
argument_list|()
condition|)
block|{
case|case
name|FETCH_SUCCESS
case|:
if|if
condition|(
name|localized
operator|.
name|getLocalPath
argument_list|()
operator|.
name|getFile
argument_list|()
operator|.
name|contains
argument_list|(
name|rsrc
operator|.
name|getResource
argument_list|()
operator|.
name|getFile
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
break|break;
default|default:
name|fail
argument_list|(
literal|"Unexpected: "
operator|+
name|localized
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|class|FakeDownload
specifier|static
class|class
name|FakeDownload
implements|implements
name|Callable
argument_list|<
name|Path
argument_list|>
block|{
DECL|field|localPath
specifier|private
specifier|final
name|Path
name|localPath
decl_stmt|;
DECL|field|succeed
specifier|private
specifier|final
name|boolean
name|succeed
decl_stmt|;
DECL|method|FakeDownload (String absPath, boolean succeed)
name|FakeDownload
parameter_list|(
name|String
name|absPath
parameter_list|,
name|boolean
name|succeed
parameter_list|)
block|{
name|this
operator|.
name|localPath
operator|=
operator|new
name|Path
argument_list|(
literal|"file:///localcache"
operator|+
name|absPath
argument_list|)
expr_stmt|;
name|this
operator|.
name|succeed
operator|=
name|succeed
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|Path
name|call
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|succeed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"FAIL "
operator|+
name|localPath
argument_list|)
throw|;
block|}
return|return
name|localPath
return|;
block|}
block|}
DECL|method|getMockLocalizerRecordFactory ()
specifier|static
name|RecordFactory
name|getMockLocalizerRecordFactory
parameter_list|()
block|{
name|RecordFactory
name|mockRF
init|=
name|mock
argument_list|(
name|RecordFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockRF
operator|.
name|newRecordInstance
argument_list|(
name|same
argument_list|(
name|LocalResourceStatus
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|LocalResourceStatus
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|LocalResourceStatus
name|answer
parameter_list|(
name|InvocationOnMock
name|invoc
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
operator|new
name|MockLocalResourceStatus
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockRF
operator|.
name|newRecordInstance
argument_list|(
name|same
argument_list|(
name|LocalizerStatus
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|LocalizerStatus
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|LocalizerStatus
name|answer
parameter_list|(
name|InvocationOnMock
name|invoc
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
operator|new
name|MockLocalizerStatus
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|mockRF
return|;
block|}
DECL|method|getMockRsrc (Random r, LocalResourceVisibility vis)
specifier|static
name|LocalResource
name|getMockRsrc
parameter_list|(
name|Random
name|r
parameter_list|,
name|LocalResourceVisibility
name|vis
parameter_list|)
block|{
name|LocalResource
name|rsrc
init|=
name|mock
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|Long
operator|.
name|toHexString
argument_list|(
name|r
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|URL
name|uri
init|=
name|mock
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|uri
operator|.
name|getFile
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"/local/"
operator|+
name|vis
operator|+
literal|"/"
operator|+
name|name
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsrc
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsrc
operator|.
name|getSize
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
literal|1024
argument_list|)
operator|+
literal|1024L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsrc
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
literal|1024
argument_list|)
operator|+
literal|2048L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsrc
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsrc
operator|.
name|getVisibility
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|vis
argument_list|)
expr_stmt|;
return|return
name|rsrc
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|createFakeCredentials (Random r, int nTok)
specifier|static
name|DataInputBuffer
name|createFakeCredentials
parameter_list|(
name|Random
name|r
parameter_list|,
name|int
name|nTok
parameter_list|)
throws|throws
name|IOException
block|{
name|Credentials
name|creds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|byte
index|[]
name|password
init|=
operator|new
name|byte
index|[
literal|20
index|]
decl_stmt|;
name|Text
name|kind
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|Text
name|service
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|Text
name|alias
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nTok
condition|;
operator|++
name|i
control|)
block|{
name|byte
index|[]
name|identifier
init|=
operator|(
literal|"idef"
operator|+
name|i
operator|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|kind
operator|.
name|set
argument_list|(
literal|"kind"
operator|+
name|i
argument_list|)
expr_stmt|;
name|service
operator|.
name|set
argument_list|(
literal|"service"
operator|+
name|i
argument_list|)
expr_stmt|;
name|alias
operator|.
name|set
argument_list|(
literal|"token"
operator|+
name|i
argument_list|)
expr_stmt|;
name|Token
name|token
init|=
operator|new
name|Token
argument_list|(
name|identifier
argument_list|,
name|password
argument_list|,
name|kind
argument_list|,
name|service
argument_list|)
decl_stmt|;
name|creds
operator|.
name|addToken
argument_list|(
name|alias
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
name|DataOutputBuffer
name|buf
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|creds
operator|.
name|writeTokenStorageToStream
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|DataInputBuffer
name|ret
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|ret
operator|.
name|reset
argument_list|(
name|buf
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

