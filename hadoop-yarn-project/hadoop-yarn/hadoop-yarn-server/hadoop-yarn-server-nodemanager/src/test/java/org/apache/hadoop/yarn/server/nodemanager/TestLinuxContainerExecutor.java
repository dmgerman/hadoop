begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
operator|.
name|CREATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
operator|.
name|OVERWRITE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|executor
operator|.
name|ContainerExecContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|executor
operator|.
name|ContainerReapContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
operator|.
name|Signal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ContainerLocalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ResourceLocalizationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|executor
operator|.
name|ContainerReacquisitionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|executor
operator|.
name|ContainerSignalContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|executor
operator|.
name|ContainerStartContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|executor
operator|.
name|DeletionAsUserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|executor
operator|.
name|LocalizerStartContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|util
operator|.
name|LCEResourcesHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This is intended to test the LinuxContainerExecutor code, but because of some  * security restrictions this can only be done with some special setup first.<br>  *<ol>  *<li>Compile the code with container-executor.conf.dir set to the location you  * want for testing.<br>  *   *<pre>  *<code>  *> mvn clean install -Pnative -Dcontainer-executor.conf.dir=/etc/hadoop  *                          -DskipTests  *</code>  *</pre>  *   *<li>Set up<code>${container-executor.conf.dir}/container-executor.cfg</code>  * container-executor.cfg needs to be owned by root and have in it the proper  * config values.<br>  *   *<pre>  *<code>  *> cat /etc/hadoop/container-executor.cfg  * yarn.nodemanager.linux-container-executor.group=mapred  * #depending on the user id of the application.submitter option  * min.user.id=1  *> sudo chown root:root /etc/hadoop/container-executor.cfg  *> sudo chmod 444 /etc/hadoop/container-executor.cfg  *</code>  *</pre>  *   *<li>Move the binary and set proper permissions on it. It needs to be owned by  * root, the group needs to be the group configured in container-executor.cfg,  * and it needs the setuid bit set. (The build will also overwrite it so you  * need to move it to a place that you can support it.<br>  *   *<pre>  *<code>  *> cp ./hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/c/container-executor/container-executor /tmp/  *> sudo chown root:mapred /tmp/container-executor  *> sudo chmod 4050 /tmp/container-executor  *</code>  *</pre>  *   *<li>Run the tests with the execution enabled (The user you run the tests as  * needs to be part of the group from the config.<br>  *   *<pre>  *<code>  * mvn test -Dtest=TestLinuxContainerExecutor -Dapplication.submitter=nobody -Dcontainer-executor.path=/tmp/container-executor  *</code>  *</pre>  *  *<li>The test suite also contains tests to test mounting of CGroups. By  * default, these tests are not run. To run them, add -Dcgroups.mount=<mount-point>  * Please note that the test does not unmount the CGroups at the end of the test,  * since that requires root permissions.<br>  *  *<li>The tests that are run are sensitive to directory permissions. All parent  * directories must be searchable by the user that the tasks are run as. If you  * wish to run the tests in a different directory, please set it using  * -Dworkspace.dir  *   *</ol>  */
end_comment

begin_class
DECL|class|TestLinuxContainerExecutor
specifier|public
class|class
name|TestLinuxContainerExecutor
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestLinuxContainerExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|workSpace
specifier|private
specifier|static
name|File
name|workSpace
decl_stmt|;
static|static
block|{
name|String
name|basedir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"workspace.dir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|basedir
operator|==
literal|null
operator|||
name|basedir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|basedir
operator|=
literal|"target"
expr_stmt|;
block|}
name|workSpace
operator|=
operator|new
name|File
argument_list|(
name|basedir
argument_list|,
name|TestLinuxContainerExecutor
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-workSpace"
argument_list|)
expr_stmt|;
block|}
DECL|field|exec
specifier|private
name|LinuxContainerExecutor
name|exec
init|=
literal|null
decl_stmt|;
DECL|field|appSubmitter
specifier|private
name|String
name|appSubmitter
init|=
literal|null
decl_stmt|;
DECL|field|dirsHandler
specifier|private
name|LocalDirsHandlerService
name|dirsHandler
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|files
specifier|private
name|FileContext
name|files
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|files
operator|=
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
expr_stmt|;
name|Path
name|workSpacePath
init|=
operator|new
name|Path
argument_list|(
name|workSpace
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|files
operator|.
name|mkdir
argument_list|(
name|workSpacePath
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|chmod
argument_list|(
name|workSpace
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"777"
argument_list|)
expr_stmt|;
name|File
name|localDir
init|=
operator|new
name|File
argument_list|(
name|workSpace
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|,
literal|"localDir"
argument_list|)
decl_stmt|;
name|files
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
name|localDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"777"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|File
name|logDir
init|=
operator|new
name|File
argument_list|(
name|workSpace
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|,
literal|"logDir"
argument_list|)
decl_stmt|;
name|files
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
name|logDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"777"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|exec_path
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"container-executor.path"
argument_list|)
decl_stmt|;
if|if
condition|(
name|exec_path
operator|!=
literal|null
operator|&&
operator|!
name|exec_path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.AbstractFileSystem.file.impl"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|local
operator|.
name|LocalFs
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|AbstractFileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|appSubmitter
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"application.submitter"
argument_list|)
expr_stmt|;
if|if
condition|(
name|appSubmitter
operator|==
literal|null
operator|||
name|appSubmitter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|appSubmitter
operator|=
literal|"nobody"
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NONSECURE_MODE_LOCAL_USER_KEY
argument_list|,
name|appSubmitter
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting "
operator|+
name|YarnConfiguration
operator|.
name|NM_LINUX_CONTAINER_EXECUTOR_PATH
operator|+
literal|"="
operator|+
name|exec_path
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LINUX_CONTAINER_EXECUTOR_PATH
argument_list|,
name|exec_path
argument_list|)
expr_stmt|;
name|exec
operator|=
operator|new
name|LinuxContainerExecutor
argument_list|()
expr_stmt|;
name|exec
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|localDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|logDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|dirsHandler
operator|=
operator|new
name|LocalDirsHandlerService
argument_list|()
expr_stmt|;
name|dirsHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|localDirs
init|=
name|dirsHandler
operator|.
name|getLocalDirs
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dir
range|:
name|localDirs
control|)
block|{
name|Path
name|userDir
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|ContainerLocalizer
operator|.
name|USERCACHE
argument_list|)
decl_stmt|;
name|files
operator|.
name|mkdir
argument_list|(
name|userDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"777"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// $local/filecache
name|Path
name|fileDir
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|ContainerLocalizer
operator|.
name|FILECACHE
argument_list|)
decl_stmt|;
name|files
operator|.
name|mkdir
argument_list|(
name|fileDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"777"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|workSpace
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|cleanupUserAppCache (String user)
specifier|private
name|void
name|cleanupUserAppCache
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|localDirs
init|=
name|dirsHandler
operator|.
name|getLocalDirs
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dir
range|:
name|localDirs
control|)
block|{
name|Path
name|usercachedir
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|ContainerLocalizer
operator|.
name|USERCACHE
argument_list|)
decl_stmt|;
name|Path
name|userdir
init|=
operator|new
name|Path
argument_list|(
name|usercachedir
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|Path
name|appcachedir
init|=
operator|new
name|Path
argument_list|(
name|userdir
argument_list|,
name|ContainerLocalizer
operator|.
name|APPCACHE
argument_list|)
decl_stmt|;
name|exec
operator|.
name|deleteAsUser
argument_list|(
operator|new
name|DeletionAsUserContext
operator|.
name|Builder
argument_list|()
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
operator|.
name|setSubDir
argument_list|(
name|appcachedir
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|delete
argument_list|(
name|usercachedir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|cleanupUserFileCache (String user)
specifier|private
name|void
name|cleanupUserFileCache
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|localDirs
init|=
name|dirsHandler
operator|.
name|getLocalDirs
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dir
range|:
name|localDirs
control|)
block|{
name|Path
name|filecache
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|ContainerLocalizer
operator|.
name|FILECACHE
argument_list|)
decl_stmt|;
name|Path
name|filedir
init|=
operator|new
name|Path
argument_list|(
name|filecache
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|exec
operator|.
name|deleteAsUser
argument_list|(
operator|new
name|DeletionAsUserContext
operator|.
name|Builder
argument_list|()
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
operator|.
name|setSubDir
argument_list|(
name|filedir
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|cleanupLogDirs (String user)
specifier|private
name|void
name|cleanupLogDirs
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|logDirs
init|=
name|dirsHandler
operator|.
name|getLogDirs
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dir
range|:
name|logDirs
control|)
block|{
name|String
name|appId
init|=
literal|"APP_"
operator|+
name|id
decl_stmt|;
name|String
name|containerId
init|=
literal|"CONTAINER_"
operator|+
operator|(
name|id
operator|-
literal|1
operator|)
decl_stmt|;
name|Path
name|appdir
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|Path
name|containerdir
init|=
operator|new
name|Path
argument_list|(
name|appdir
argument_list|,
name|containerId
argument_list|)
decl_stmt|;
name|exec
operator|.
name|deleteAsUser
argument_list|(
operator|new
name|DeletionAsUserContext
operator|.
name|Builder
argument_list|()
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
operator|.
name|setSubDir
argument_list|(
name|containerdir
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|cleanupAppFiles (String user)
specifier|private
name|void
name|cleanupAppFiles
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|Exception
block|{
name|cleanupUserAppCache
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|cleanupUserFileCache
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|cleanupLogDirs
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|String
index|[]
name|files
init|=
block|{
literal|"launch_container.sh"
block|,
literal|"container_tokens"
block|,
literal|"touch-file"
block|}
decl_stmt|;
name|Path
name|ws
init|=
operator|new
name|Path
argument_list|(
name|workSpace
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|workSpace
argument_list|,
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|exec
operator|.
name|deleteAsUser
argument_list|(
operator|new
name|DeletionAsUserContext
operator|.
name|Builder
argument_list|()
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
operator|.
name|setSubDir
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|)
operator|.
name|setBasedirs
argument_list|(
name|ws
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|shouldRun ()
specifier|private
name|boolean
name|shouldRun
parameter_list|()
block|{
if|if
condition|(
name|exec
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Not running test because container-executor.path is not set"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|writeScriptFile (String... cmd)
specifier|private
name|String
name|writeScriptFile
parameter_list|(
name|String
modifier|...
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|f
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"TestLinuxContainerExecutor"
argument_list|,
literal|".sh"
argument_list|)
decl_stmt|;
name|f
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|PrintWriter
name|p
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|println
argument_list|(
literal|"#!/bin/sh"
argument_list|)
expr_stmt|;
name|p
operator|.
name|print
argument_list|(
literal|"exec"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|part
range|:
name|cmd
control|)
block|{
name|p
operator|.
name|print
argument_list|(
literal|" '"
argument_list|)
expr_stmt|;
name|p
operator|.
name|print
argument_list|(
name|part
operator|.
name|replace
argument_list|(
literal|"\\"
argument_list|,
literal|"\\\\"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\\'"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|print
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|println
argument_list|()
expr_stmt|;
name|p
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|f
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
DECL|field|id
specifier|private
name|int
name|id
init|=
literal|0
decl_stmt|;
DECL|method|getNextId ()
specifier|private
specifier|synchronized
name|int
name|getNextId
parameter_list|()
block|{
name|id
operator|+=
literal|1
expr_stmt|;
return|return
name|id
return|;
block|}
DECL|method|getNextContainerId ()
specifier|private
name|ContainerId
name|getNextContainerId
parameter_list|()
block|{
name|ContainerId
name|cId
init|=
name|mock
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|id
init|=
literal|"CONTAINER_"
operator|+
name|getNextId
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|cId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id
argument_list|)
expr_stmt|;
return|return
name|cId
return|;
block|}
DECL|method|runAndBlock (String... cmd)
specifier|private
name|int
name|runAndBlock
parameter_list|(
name|String
modifier|...
name|cmd
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigurationException
block|{
return|return
name|runAndBlock
argument_list|(
name|getNextContainerId
argument_list|()
argument_list|,
name|cmd
argument_list|)
return|;
block|}
DECL|method|runAndBlock (ContainerId cId, String... cmd)
specifier|private
name|int
name|runAndBlock
parameter_list|(
name|ContainerId
name|cId
parameter_list|,
name|String
modifier|...
name|cmd
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigurationException
block|{
name|String
name|appId
init|=
literal|"APP_"
operator|+
name|getNextId
argument_list|()
decl_stmt|;
name|Container
name|container
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|context
init|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getLaunchContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getEnvironment
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|String
name|script
init|=
name|writeScriptFile
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
name|Path
name|scriptPath
init|=
operator|new
name|Path
argument_list|(
name|script
argument_list|)
decl_stmt|;
name|Path
name|tokensPath
init|=
operator|new
name|Path
argument_list|(
literal|"/dev/null"
argument_list|)
decl_stmt|;
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
name|workSpace
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|pidFile
init|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"pid.txt"
argument_list|)
decl_stmt|;
name|exec
operator|.
name|activateContainer
argument_list|(
name|cId
argument_list|,
name|pidFile
argument_list|)
expr_stmt|;
return|return
name|exec
operator|.
name|launchContainer
argument_list|(
operator|new
name|ContainerStartContext
operator|.
name|Builder
argument_list|()
operator|.
name|setContainer
argument_list|(
name|container
argument_list|)
operator|.
name|setNmPrivateContainerScriptPath
argument_list|(
name|scriptPath
argument_list|)
operator|.
name|setNmPrivateTokensPath
argument_list|(
name|tokensPath
argument_list|)
operator|.
name|setUser
argument_list|(
name|appSubmitter
argument_list|)
operator|.
name|setAppId
argument_list|(
name|appId
argument_list|)
operator|.
name|setContainerWorkDir
argument_list|(
name|workDir
argument_list|)
operator|.
name|setLocalDirs
argument_list|(
name|dirsHandler
operator|.
name|getLocalDirs
argument_list|()
argument_list|)
operator|.
name|setLogDirs
argument_list|(
name|dirsHandler
operator|.
name|getLogDirs
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testContainerLocalizer ()
specifier|public
name|void
name|testContainerLocalizer
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|shouldRun
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|locId
init|=
literal|"container_01_01"
decl_stmt|;
name|Path
name|nmPrivateContainerTokensPath
init|=
name|dirsHandler
operator|.
name|getLocalPathForWrite
argument_list|(
name|ResourceLocalizationService
operator|.
name|NM_PRIVATE_DIR
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|String
operator|.
name|format
argument_list|(
name|ContainerLocalizer
operator|.
name|TOKEN_FILE_NAME_FMT
argument_list|,
name|locId
argument_list|)
argument_list|)
decl_stmt|;
name|files
operator|.
name|create
argument_list|(
name|nmPrivateContainerTokensPath
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CREATE
argument_list|,
name|OVERWRITE
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|config
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|nmAddr
init|=
name|config
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|NM_BIND_HOST
argument_list|,
name|YarnConfiguration
operator|.
name|NM_LOCALIZER_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LOCALIZER_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LOCALIZER_PORT
argument_list|)
decl_stmt|;
name|String
name|appId
init|=
literal|"application_01_01"
decl_stmt|;
name|exec
operator|=
operator|new
name|LinuxContainerExecutor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|buildMainArgs
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|command
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|appId
parameter_list|,
name|String
name|locId
parameter_list|,
name|InetSocketAddress
name|nmAddr
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|localDirs
parameter_list|)
block|{
name|MockContainerLocalizer
operator|.
name|buildMainArgs
argument_list|(
name|command
argument_list|,
name|user
argument_list|,
name|appId
argument_list|,
name|locId
argument_list|,
name|nmAddr
argument_list|,
name|localDirs
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|exec
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|exec
operator|.
name|startLocalizer
argument_list|(
operator|new
name|LocalizerStartContext
operator|.
name|Builder
argument_list|()
operator|.
name|setNmPrivateContainerTokens
argument_list|(
name|nmPrivateContainerTokensPath
argument_list|)
operator|.
name|setNmAddr
argument_list|(
name|nmAddr
argument_list|)
operator|.
name|setUser
argument_list|(
name|appSubmitter
argument_list|)
operator|.
name|setAppId
argument_list|(
name|appId
argument_list|)
operator|.
name|setLocId
argument_list|(
name|locId
argument_list|)
operator|.
name|setDirsHandler
argument_list|(
name|dirsHandler
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|locId2
init|=
literal|"container_01_02"
decl_stmt|;
name|Path
name|nmPrivateContainerTokensPath2
init|=
name|dirsHandler
operator|.
name|getLocalPathForWrite
argument_list|(
name|ResourceLocalizationService
operator|.
name|NM_PRIVATE_DIR
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|String
operator|.
name|format
argument_list|(
name|ContainerLocalizer
operator|.
name|TOKEN_FILE_NAME_FMT
argument_list|,
name|locId2
argument_list|)
argument_list|)
decl_stmt|;
name|files
operator|.
name|create
argument_list|(
name|nmPrivateContainerTokensPath2
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CREATE
argument_list|,
name|OVERWRITE
argument_list|)
argument_list|)
expr_stmt|;
name|exec
operator|.
name|startLocalizer
argument_list|(
operator|new
name|LocalizerStartContext
operator|.
name|Builder
argument_list|()
operator|.
name|setNmPrivateContainerTokens
argument_list|(
name|nmPrivateContainerTokensPath2
argument_list|)
operator|.
name|setNmAddr
argument_list|(
name|nmAddr
argument_list|)
operator|.
name|setUser
argument_list|(
name|appSubmitter
argument_list|)
operator|.
name|setAppId
argument_list|(
name|appId
argument_list|)
operator|.
name|setLocId
argument_list|(
name|locId2
argument_list|)
operator|.
name|setDirsHandler
argument_list|(
name|dirsHandler
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|cleanupUserAppCache
argument_list|(
name|appSubmitter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerLaunch ()
specifier|public
name|void
name|testContainerLaunch
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|shouldRun
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedRunAsUser
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NONSECURE_MODE_LOCAL_USER_KEY
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_NONSECURE_MODE_LOCAL_USER
argument_list|)
decl_stmt|;
name|File
name|touchFile
init|=
operator|new
name|File
argument_list|(
name|workSpace
argument_list|,
literal|"touch-file"
argument_list|)
decl_stmt|;
name|int
name|ret
init|=
name|runAndBlock
argument_list|(
literal|"touch"
argument_list|,
name|touchFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|FileStatus
name|fileStatus
init|=
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|touchFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedRunAsUser
argument_list|,
name|fileStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|cleanupAppFiles
argument_list|(
name|expectedRunAsUser
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNonSecureRunAsSubmitter ()
specifier|public
name|void
name|testNonSecureRunAsSubmitter
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|shouldRun
argument_list|()
argument_list|)
expr_stmt|;
name|Assume
operator|.
name|assumeFalse
argument_list|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedRunAsUser
init|=
name|appSubmitter
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NONSECURE_MODE_LIMIT_USERS
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|exec
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|File
name|touchFile
init|=
operator|new
name|File
argument_list|(
name|workSpace
argument_list|,
literal|"touch-file"
argument_list|)
decl_stmt|;
name|int
name|ret
init|=
name|runAndBlock
argument_list|(
literal|"touch"
argument_list|,
name|touchFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|FileStatus
name|fileStatus
init|=
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|touchFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedRunAsUser
argument_list|,
name|fileStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|cleanupAppFiles
argument_list|(
name|expectedRunAsUser
argument_list|)
expr_stmt|;
comment|// reset conf
name|conf
operator|.
name|unset
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NONSECURE_MODE_LIMIT_USERS
argument_list|)
expr_stmt|;
name|exec
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerKill ()
specifier|public
name|void
name|testContainerKill
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|shouldRun
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ContainerId
name|sleepId
init|=
name|getNextContainerId
argument_list|()
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|runAndBlock
argument_list|(
name|sleepId
argument_list|,
literal|"sleep"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|ConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught exception while running sleep"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
block|}
decl_stmt|;
name|t
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// If it does not exit we shouldn't block the test.
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|pid
init|=
literal|null
decl_stmt|;
name|int
name|count
init|=
literal|10
decl_stmt|;
while|while
condition|(
operator|(
name|pid
operator|=
name|exec
operator|.
name|getProcessId
argument_list|(
name|sleepId
argument_list|)
operator|)
operator|==
literal|null
operator|&&
name|count
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sleeping for 200 ms before checking for pid "
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|count
operator|--
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|pid
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Going to killing the process."
argument_list|)
expr_stmt|;
name|exec
operator|.
name|signalContainer
argument_list|(
operator|new
name|ContainerSignalContext
operator|.
name|Builder
argument_list|()
operator|.
name|setUser
argument_list|(
name|appSubmitter
argument_list|)
operator|.
name|setPid
argument_list|(
name|pid
argument_list|)
operator|.
name|setSignal
argument_list|(
name|Signal
operator|.
name|TERM
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"sleeping for 100ms to let the sleep be killed"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|t
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
name|cleanupAppFiles
argument_list|(
name|appSubmitter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCGroups ()
specifier|public
name|void
name|testCGroups
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|shouldRun
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|cgroupsMount
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"cgroups.mount"
argument_list|)
decl_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
operator|(
name|cgroupsMount
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|cgroupsMount
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Cgroups mount point does not exist"
argument_list|,
operator|new
name|File
argument_list|(
name|cgroupsMount
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|cgroupKVs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|hierarchy
init|=
literal|"hadoop-yarn"
decl_stmt|;
name|String
index|[]
name|controllers
init|=
block|{
literal|"cpu"
block|,
literal|"net_cls"
block|}
decl_stmt|;
for|for
control|(
name|String
name|controller
range|:
name|controllers
control|)
block|{
name|cgroupKVs
operator|.
name|add
argument_list|(
name|controller
operator|+
literal|"="
operator|+
name|cgroupsMount
operator|+
literal|"/"
operator|+
name|controller
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|cgroupsMount
argument_list|,
name|controller
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|exec
operator|.
name|mountCgroups
argument_list|(
name|cgroupKVs
argument_list|,
name|hierarchy
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|controller
range|:
name|controllers
control|)
block|{
name|assertTrue
argument_list|(
name|controller
operator|+
literal|" cgroup not mounted"
argument_list|,
operator|new
name|File
argument_list|(
name|cgroupsMount
operator|+
literal|"/"
operator|+
name|controller
operator|+
literal|"/tasks"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|controller
operator|+
literal|" cgroup hierarchy not created"
argument_list|,
operator|new
name|File
argument_list|(
name|cgroupsMount
operator|+
literal|"/"
operator|+
name|controller
operator|+
literal|"/"
operator|+
name|hierarchy
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|controller
operator|+
literal|" cgroup hierarchy created incorrectly"
argument_list|,
operator|new
name|File
argument_list|(
name|cgroupsMount
operator|+
literal|"/"
operator|+
name|controller
operator|+
literal|"/"
operator|+
name|hierarchy
operator|+
literal|"/tasks"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Couldn't mount cgroups "
operator|+
name|ie
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ie
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|testLocalUser ()
specifier|public
name|void
name|testLocalUser
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|shouldRun
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// nonsecure default
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|LinuxContainerExecutor
name|lce
init|=
operator|new
name|LinuxContainerExecutor
argument_list|()
decl_stmt|;
name|lce
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_NM_NONSECURE_MODE_LOCAL_USER
argument_list|,
name|lce
operator|.
name|getRunAsUser
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// nonsecure custom setting
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NONSECURE_MODE_LOCAL_USER_KEY
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|lce
operator|=
operator|new
name|LinuxContainerExecutor
argument_list|()
expr_stmt|;
name|lce
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|lce
operator|.
name|getRunAsUser
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// nonsecure without limits
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NONSECURE_MODE_LOCAL_USER_KEY
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NONSECURE_MODE_LIMIT_USERS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|lce
operator|=
operator|new
name|LinuxContainerExecutor
argument_list|()
expr_stmt|;
name|lce
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|lce
operator|.
name|getRunAsUser
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// secure
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|lce
operator|=
operator|new
name|LinuxContainerExecutor
argument_list|()
expr_stmt|;
name|lce
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|lce
operator|.
name|getRunAsUser
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNonsecureUsernamePattern ()
specifier|public
name|void
name|testNonsecureUsernamePattern
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|shouldRun
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// nonsecure default
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|LinuxContainerExecutor
name|lce
init|=
operator|new
name|LinuxContainerExecutor
argument_list|()
decl_stmt|;
name|lce
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|lce
operator|.
name|verifyUsernamePattern
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
try|try
block|{
name|lce
operator|.
name|verifyUsernamePattern
argument_list|(
literal|"foo/x"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// NOP
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// nonsecure custom setting
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NONSECURE_MODE_USER_PATTERN_KEY
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|lce
operator|=
operator|new
name|LinuxContainerExecutor
argument_list|()
expr_stmt|;
name|lce
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|lce
operator|.
name|verifyUsernamePattern
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
try|try
block|{
name|lce
operator|.
name|verifyUsernamePattern
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// NOP
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// secure, pattern matching does not kick in.
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|lce
operator|=
operator|new
name|LinuxContainerExecutor
argument_list|()
expr_stmt|;
name|lce
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|lce
operator|.
name|verifyUsernamePattern
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|lce
operator|.
name|verifyUsernamePattern
argument_list|(
literal|"foo/w"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testPostExecuteAfterReacquisition ()
specifier|public
name|void
name|testPostExecuteAfterReacquisition
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|shouldRun
argument_list|()
argument_list|)
expr_stmt|;
comment|// make up some bogus container ID
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|12345
argument_list|,
literal|67890
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|54321
argument_list|)
decl_stmt|;
name|ContainerId
name|cid
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|9876
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LINUX_CONTAINER_RESOURCES_HANDLER
argument_list|,
name|TestResourceHandler
operator|.
name|class
argument_list|,
name|LCEResourcesHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|LinuxContainerExecutor
name|lce
init|=
operator|new
name|LinuxContainerExecutor
argument_list|()
decl_stmt|;
name|lce
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|lce
operator|.
name|init
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected if LCE isn't setup right, but not necessary for this test
block|}
name|Container
name|container
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|context
init|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getLaunchContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getEnvironment
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|lce
operator|.
name|reacquireContainer
argument_list|(
operator|new
name|ContainerReacquisitionContext
operator|.
name|Builder
argument_list|()
operator|.
name|setContainer
argument_list|(
name|container
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"foouser"
argument_list|)
operator|.
name|setContainerId
argument_list|(
name|cid
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"postExec not called after reacquisition"
argument_list|,
name|TestResourceHandler
operator|.
name|postExecContainers
operator|.
name|contains
argument_list|(
name|cid
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveDockerContainer ()
specifier|public
name|void
name|testRemoveDockerContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|12345
argument_list|,
literal|67890
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|54321
argument_list|)
decl_stmt|;
name|String
name|cid
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|9876
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LinuxContainerExecutor
name|lce
init|=
name|mock
argument_list|(
name|LinuxContainerExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|lce
operator|.
name|removeDockerContainer
argument_list|(
name|cid
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|lce
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|removeDockerContainer
argument_list|(
name|cid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReapContainer ()
specifier|public
name|void
name|testReapContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|Container
name|container
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|LinuxContainerRuntime
name|containerRuntime
init|=
name|mock
argument_list|(
name|LinuxContainerRuntime
operator|.
name|class
argument_list|)
decl_stmt|;
name|LinuxContainerExecutor
name|lce
init|=
name|spy
argument_list|(
operator|new
name|LinuxContainerExecutor
argument_list|(
name|containerRuntime
argument_list|)
argument_list|)
decl_stmt|;
name|ContainerReapContext
operator|.
name|Builder
name|builder
init|=
operator|new
name|ContainerReapContext
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setContainer
argument_list|(
name|container
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|ContainerReapContext
name|ctx
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|lce
operator|.
name|reapContainer
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|lce
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|reapContainer
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|lce
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|postComplete
argument_list|(
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRelaunchContainer ()
specifier|public
name|void
name|testRelaunchContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|Container
name|container
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|LinuxContainerExecutor
name|lce
init|=
name|mock
argument_list|(
name|LinuxContainerExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerStartContext
operator|.
name|Builder
name|builder
init|=
operator|new
name|ContainerStartContext
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setContainer
argument_list|(
name|container
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|ContainerStartContext
name|ctx
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|lce
operator|.
name|relaunchContainer
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|lce
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|relaunchContainer
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExecContainer ()
specifier|public
name|void
name|testExecContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|Container
name|container
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|LinuxContainerExecutor
name|lce
init|=
name|mock
argument_list|(
name|LinuxContainerExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerExecContext
operator|.
name|Builder
name|builder
init|=
operator|new
name|ContainerExecContext
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setUser
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|setAppId
argument_list|(
literal|"app1"
argument_list|)
operator|.
name|setContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|ContainerExecContext
name|ctx
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|lce
operator|.
name|execContainer
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|lce
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|execContainer
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateYarnSysFS ()
specifier|public
name|void
name|testUpdateYarnSysFS
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
name|String
name|appId
init|=
literal|"app-1"
decl_stmt|;
name|String
name|spec
init|=
literal|""
decl_stmt|;
name|Context
name|ctx
init|=
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
decl_stmt|;
name|LinuxContainerExecutor
name|lce
init|=
name|mock
argument_list|(
name|LinuxContainerExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|lce
operator|.
name|updateYarnSysFS
argument_list|(
name|ctx
argument_list|,
name|user
argument_list|,
name|appId
argument_list|,
name|spec
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|lce
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|updateYarnSysFS
argument_list|(
name|ctx
argument_list|,
name|user
argument_list|,
name|appId
argument_list|,
name|spec
argument_list|)
expr_stmt|;
block|}
DECL|class|TestResourceHandler
specifier|private
specifier|static
class|class
name|TestResourceHandler
implements|implements
name|LCEResourcesHandler
block|{
DECL|field|postExecContainers
specifier|static
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|postExecContainers
init|=
operator|new
name|HashSet
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|init (LinuxContainerExecutor lce)
specifier|public
name|void
name|init
parameter_list|(
name|LinuxContainerExecutor
name|lce
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
DECL|method|preExecute (ContainerId containerId, Resource containerResource)
specifier|public
name|void
name|preExecute
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Resource
name|containerResource
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
DECL|method|postExecute (ContainerId containerId)
specifier|public
name|void
name|postExecute
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|postExecContainers
operator|.
name|add
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getResourcesOption (ContainerId containerId)
specifier|public
name|String
name|getResourcesOption
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

