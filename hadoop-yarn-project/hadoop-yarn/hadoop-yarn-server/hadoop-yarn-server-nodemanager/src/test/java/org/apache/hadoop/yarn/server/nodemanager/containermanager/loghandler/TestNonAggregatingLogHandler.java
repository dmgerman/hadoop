begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.loghandler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|loghandler
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|isA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|NotSerializableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|builder
operator|.
name|EqualsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|AbstractFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnsupportedFileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|DrainDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|InlineDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DeletionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|LocalDirsHandlerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|loghandler
operator|.
name|event
operator|.
name|LogHandlerAppFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|loghandler
operator|.
name|event
operator|.
name|LogHandlerAppStartedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|loghandler
operator|.
name|event
operator|.
name|LogHandlerContainerFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMMemoryStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMNullStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|exceptions
operator|.
name|verification
operator|.
name|WantedButNotInvoked
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|internal
operator|.
name|matchers
operator|.
name|VarargMatcher
import|;
end_import

begin_class
DECL|class|TestNonAggregatingLogHandler
specifier|public
class|class
name|TestNonAggregatingLogHandler
block|{
DECL|field|mockDelService
name|DeletionService
name|mockDelService
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|field|dispatcher
name|DrainDispatcher
name|dispatcher
decl_stmt|;
DECL|field|appEventHandler
specifier|private
name|ApplicationEventHandler
name|appEventHandler
decl_stmt|;
DECL|field|user
name|String
name|user
init|=
literal|"testuser"
decl_stmt|;
DECL|field|appId
name|ApplicationId
name|appId
decl_stmt|;
DECL|field|appAttemptId
name|ApplicationAttemptId
name|appAttemptId
decl_stmt|;
DECL|field|container11
name|ContainerId
name|container11
decl_stmt|;
DECL|field|dirsHandler
name|LocalDirsHandlerService
name|dirsHandler
decl_stmt|;
annotation|@
name|Before
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|mockDelService
operator|=
name|mock
argument_list|(
name|DeletionService
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|dispatcher
operator|=
name|createDispatcher
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|appEventHandler
operator|=
operator|new
name|ApplicationEventHandler
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ApplicationEventType
operator|.
name|class
argument_list|,
name|appEventHandler
argument_list|)
expr_stmt|;
name|appId
operator|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1234
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|appAttemptId
operator|=
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|container11
operator|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|dirsHandler
operator|=
operator|new
name|LocalDirsHandlerService
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|dirsHandler
operator|.
name|stop
argument_list|()
expr_stmt|;
name|dirsHandler
operator|.
name|close
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLogDeletion ()
specifier|public
name|void
name|testLogDeletion
parameter_list|()
throws|throws
name|IOException
block|{
name|File
index|[]
name|localLogDirs
init|=
name|getLocalLogDirFiles
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|String
name|localLogDirsString
init|=
name|localLogDirs
index|[
literal|0
index|]
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|","
operator|+
name|localLogDirs
index|[
literal|1
index|]
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|localLogDirsString
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_RETAIN_SECONDS
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
name|dirsHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|NonAggregatingLogHandler
name|rawLogHandler
init|=
operator|new
name|NonAggregatingLogHandler
argument_list|(
name|dispatcher
argument_list|,
name|mockDelService
argument_list|,
name|dirsHandler
argument_list|,
operator|new
name|NMNullStateStoreService
argument_list|()
argument_list|)
decl_stmt|;
name|NonAggregatingLogHandler
name|logHandler
init|=
name|spy
argument_list|(
name|rawLogHandler
argument_list|)
decl_stmt|;
name|AbstractFileSystem
name|spylfs
init|=
name|spy
argument_list|(
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|getDefaultFileSystem
argument_list|()
argument_list|)
decl_stmt|;
name|FileContext
name|lfs
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|spylfs
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|lfs
argument_list|)
operator|.
name|when
argument_list|(
name|logHandler
argument_list|)
operator|.
name|getLocalFileContext
argument_list|(
name|isA
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FsPermission
name|defaultPermission
init|=
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
operator|.
name|applyUMask
argument_list|(
name|lfs
operator|.
name|getUMask
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|FileStatus
name|fs
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|0
argument_list|,
name|defaultPermission
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
operator|new
name|Path
argument_list|(
name|localLogDirs
index|[
literal|0
index|]
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|fs
argument_list|)
operator|.
name|when
argument_list|(
name|spylfs
argument_list|)
operator|.
name|getFileStatus
argument_list|(
name|isA
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|logHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|logHandler
operator|.
name|start
argument_list|()
expr_stmt|;
name|logHandler
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppStartedEvent
argument_list|(
name|appId
argument_list|,
name|user
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|logHandler
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerContainerFinishedEvent
argument_list|(
name|container11
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|logHandler
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppFinishedEvent
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|Path
index|[]
name|localAppLogDirs
init|=
operator|new
name|Path
index|[
literal|2
index|]
decl_stmt|;
name|localAppLogDirs
index|[
literal|0
index|]
operator|=
operator|new
name|Path
argument_list|(
name|localLogDirs
index|[
literal|0
index|]
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|localAppLogDirs
index|[
literal|1
index|]
operator|=
operator|new
name|Path
argument_list|(
name|localLogDirs
index|[
literal|1
index|]
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|testDeletionServiceCall
argument_list|(
name|mockDelService
argument_list|,
name|user
argument_list|,
literal|5000
argument_list|,
name|localAppLogDirs
argument_list|)
expr_stmt|;
name|logHandler
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|localLogDirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|localLogDirs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDelayedDelete ()
specifier|public
name|void
name|testDelayedDelete
parameter_list|()
throws|throws
name|IOException
block|{
name|File
index|[]
name|localLogDirs
init|=
name|getLocalLogDirFiles
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|String
name|localLogDirsString
init|=
name|localLogDirs
index|[
literal|0
index|]
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|","
operator|+
name|localLogDirs
index|[
literal|1
index|]
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|localLogDirsString
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_RETAIN_SECONDS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LOG_RETAIN_SECONDS
argument_list|)
expr_stmt|;
name|dirsHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|NonAggregatingLogHandler
name|logHandler
init|=
operator|new
name|NonAggregatingLogHandlerWithMockExecutor
argument_list|(
name|dispatcher
argument_list|,
name|mockDelService
argument_list|,
name|dirsHandler
argument_list|)
decl_stmt|;
name|logHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|logHandler
operator|.
name|start
argument_list|()
expr_stmt|;
name|logHandler
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppStartedEvent
argument_list|(
name|appId
argument_list|,
name|user
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|logHandler
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerContainerFinishedEvent
argument_list|(
name|container11
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|logHandler
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppFinishedEvent
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|Path
index|[]
name|localAppLogDirs
init|=
operator|new
name|Path
index|[
literal|2
index|]
decl_stmt|;
name|localAppLogDirs
index|[
literal|0
index|]
operator|=
operator|new
name|Path
argument_list|(
name|localLogDirs
index|[
literal|0
index|]
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|localAppLogDirs
index|[
literal|1
index|]
operator|=
operator|new
name|Path
argument_list|(
name|localLogDirs
index|[
literal|1
index|]
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ScheduledThreadPoolExecutor
name|mockSched
init|=
operator|(
operator|(
name|NonAggregatingLogHandlerWithMockExecutor
operator|)
name|logHandler
operator|)
operator|.
name|mockSched
decl_stmt|;
name|verify
argument_list|(
name|mockSched
argument_list|)
operator|.
name|schedule
argument_list|(
name|any
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|10800l
argument_list|)
argument_list|,
name|eq
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|logHandler
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|localLogDirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|localLogDirs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testStop ()
specifier|public
name|void
name|testStop
parameter_list|()
throws|throws
name|Exception
block|{
name|NonAggregatingLogHandler
name|aggregatingLogHandler
init|=
operator|new
name|NonAggregatingLogHandler
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|NMNullStateStoreService
argument_list|()
argument_list|)
decl_stmt|;
comment|// It should not throw NullPointerException
name|aggregatingLogHandler
operator|.
name|stop
argument_list|()
expr_stmt|;
name|NonAggregatingLogHandlerWithMockExecutor
name|logHandler
init|=
operator|new
name|NonAggregatingLogHandlerWithMockExecutor
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|logHandler
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|logHandler
operator|.
name|stop
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|logHandler
operator|.
name|mockSched
argument_list|)
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|logHandler
operator|.
name|mockSched
argument_list|)
operator|.
name|awaitTermination
argument_list|(
name|eq
argument_list|(
literal|10l
argument_list|)
argument_list|,
name|eq
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|logHandler
operator|.
name|mockSched
argument_list|)
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|logHandler
operator|.
name|close
argument_list|()
expr_stmt|;
name|aggregatingLogHandler
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHandlingApplicationFinishedEvent ()
specifier|public
name|void
name|testHandlingApplicationFinishedEvent
parameter_list|()
throws|throws
name|IOException
block|{
name|DeletionService
name|delService
init|=
operator|new
name|DeletionService
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|NonAggregatingLogHandler
name|aggregatingLogHandler
init|=
operator|new
name|NonAggregatingLogHandler
argument_list|(
operator|new
name|InlineDispatcher
argument_list|()
argument_list|,
name|delService
argument_list|,
name|dirsHandler
argument_list|,
operator|new
name|NMNullStateStoreService
argument_list|()
argument_list|)
decl_stmt|;
name|dirsHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dirsHandler
operator|.
name|start
argument_list|()
expr_stmt|;
name|delService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|delService
operator|.
name|start
argument_list|()
expr_stmt|;
name|aggregatingLogHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|aggregatingLogHandler
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// It should NOT throw RejectedExecutionException
name|aggregatingLogHandler
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppFinishedEvent
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|aggregatingLogHandler
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// It should NOT throw RejectedExecutionException after stopping
comment|// handler service.
name|aggregatingLogHandler
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppFinishedEvent
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|aggregatingLogHandler
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|NonAggregatingLogHandlerWithMockExecutor
specifier|private
class|class
name|NonAggregatingLogHandlerWithMockExecutor
extends|extends
name|NonAggregatingLogHandler
block|{
DECL|field|mockSched
specifier|private
name|ScheduledThreadPoolExecutor
name|mockSched
decl_stmt|;
DECL|method|NonAggregatingLogHandlerWithMockExecutor (Dispatcher dispatcher, DeletionService delService, LocalDirsHandlerService dirsHandler)
specifier|public
name|NonAggregatingLogHandlerWithMockExecutor
parameter_list|(
name|Dispatcher
name|dispatcher
parameter_list|,
name|DeletionService
name|delService
parameter_list|,
name|LocalDirsHandlerService
name|dirsHandler
parameter_list|)
block|{
name|this
argument_list|(
name|dispatcher
argument_list|,
name|delService
argument_list|,
name|dirsHandler
argument_list|,
operator|new
name|NMNullStateStoreService
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|NonAggregatingLogHandlerWithMockExecutor (Dispatcher dispatcher, DeletionService delService, LocalDirsHandlerService dirsHandler, NMStateStoreService stateStore)
specifier|public
name|NonAggregatingLogHandlerWithMockExecutor
parameter_list|(
name|Dispatcher
name|dispatcher
parameter_list|,
name|DeletionService
name|delService
parameter_list|,
name|LocalDirsHandlerService
name|dirsHandler
parameter_list|,
name|NMStateStoreService
name|stateStore
parameter_list|)
block|{
name|super
argument_list|(
name|dispatcher
argument_list|,
name|delService
argument_list|,
name|dirsHandler
argument_list|,
name|stateStore
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createScheduledThreadPoolExecutor ( Configuration conf)
name|ScheduledThreadPoolExecutor
name|createScheduledThreadPoolExecutor
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|mockSched
operator|=
name|mock
argument_list|(
name|ScheduledThreadPoolExecutor
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|mockSched
return|;
block|}
block|}
DECL|method|createDispatcher (Configuration conf)
specifier|private
name|DrainDispatcher
name|createDispatcher
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|DrainDispatcher
name|dispatcher
init|=
operator|new
name|DrainDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|dispatcher
return|;
block|}
comment|/*    * Test to ensure that we handle the cleanup of directories that may not have    * the application log dirs we're trying to delete or may have other problems.    * Test creates 7 log dirs, and fails the directory check for 4 of them and    * then checks to ensure we tried to delete only the ones that passed the    * check.    */
annotation|@
name|Test
DECL|method|testFailedDirLogDeletion ()
specifier|public
name|void
name|testFailedDirLogDeletion
parameter_list|()
throws|throws
name|Exception
block|{
name|File
index|[]
name|localLogDirs
init|=
name|getLocalLogDirFiles
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|7
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|localLogDirPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|localLogDirs
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|localLogDirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|localLogDirPaths
operator|.
name|add
argument_list|(
name|localLogDirs
index|[
name|i
index|]
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|localLogDirsString
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|localLogDirPaths
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|localLogDirsString
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_RETAIN_SECONDS
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
name|LocalDirsHandlerService
name|mockDirsHandler
init|=
name|mock
argument_list|(
name|LocalDirsHandlerService
operator|.
name|class
argument_list|)
decl_stmt|;
name|NonAggregatingLogHandler
name|rawLogHandler
init|=
operator|new
name|NonAggregatingLogHandler
argument_list|(
name|dispatcher
argument_list|,
name|mockDelService
argument_list|,
name|mockDirsHandler
argument_list|,
operator|new
name|NMNullStateStoreService
argument_list|()
argument_list|)
decl_stmt|;
name|NonAggregatingLogHandler
name|logHandler
init|=
name|spy
argument_list|(
name|rawLogHandler
argument_list|)
decl_stmt|;
name|AbstractFileSystem
name|spylfs
init|=
name|spy
argument_list|(
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|getDefaultFileSystem
argument_list|()
argument_list|)
decl_stmt|;
name|FileContext
name|lfs
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|spylfs
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|lfs
argument_list|)
operator|.
name|when
argument_list|(
name|logHandler
argument_list|)
operator|.
name|getLocalFileContext
argument_list|(
name|isA
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|logHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|logHandler
operator|.
name|start
argument_list|()
expr_stmt|;
name|runMockedFailedDirs
argument_list|(
name|logHandler
argument_list|,
name|appId
argument_list|,
name|user
argument_list|,
name|mockDelService
argument_list|,
name|mockDirsHandler
argument_list|,
name|conf
argument_list|,
name|spylfs
argument_list|,
name|lfs
argument_list|,
name|localLogDirs
argument_list|)
expr_stmt|;
name|logHandler
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRecovery ()
specifier|public
name|void
name|testRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|File
index|[]
name|localLogDirs
init|=
name|getLocalLogDirFiles
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|String
name|localLogDirsString
init|=
name|localLogDirs
index|[
literal|0
index|]
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|","
operator|+
name|localLogDirs
index|[
literal|1
index|]
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|localLogDirsString
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_RETAIN_SECONDS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LOG_RETAIN_SECONDS
argument_list|)
expr_stmt|;
name|dirsHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|appEventHandler
operator|.
name|resetLogHandlingEvent
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|appEventHandler
operator|.
name|receiveLogHandlingFinishEvent
argument_list|()
argument_list|)
expr_stmt|;
name|NMStateStoreService
name|stateStore
init|=
operator|new
name|NMMemoryStateStoreService
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|start
argument_list|()
expr_stmt|;
name|NonAggregatingLogHandlerWithMockExecutor
name|logHandler
init|=
operator|new
name|NonAggregatingLogHandlerWithMockExecutor
argument_list|(
name|dispatcher
argument_list|,
name|mockDelService
argument_list|,
name|dirsHandler
argument_list|,
name|stateStore
argument_list|)
decl_stmt|;
name|logHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|logHandler
operator|.
name|start
argument_list|()
expr_stmt|;
name|logHandler
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppStartedEvent
argument_list|(
name|appId
argument_list|,
name|user
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|logHandler
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerContainerFinishedEvent
argument_list|(
name|container11
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|logHandler
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppFinishedEvent
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
comment|// simulate a restart and verify deletion is rescheduled
name|logHandler
operator|.
name|close
argument_list|()
expr_stmt|;
name|logHandler
operator|=
operator|new
name|NonAggregatingLogHandlerWithMockExecutor
argument_list|(
name|dispatcher
argument_list|,
name|mockDelService
argument_list|,
name|dirsHandler
argument_list|,
name|stateStore
argument_list|)
expr_stmt|;
name|logHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|logHandler
operator|.
name|start
argument_list|()
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Runnable
argument_list|>
name|schedArg
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|logHandler
operator|.
name|mockSched
argument_list|)
operator|.
name|schedule
argument_list|(
name|schedArg
operator|.
name|capture
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|eq
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// execute the runnable and verify another restart has nothing scheduled
name|schedArg
operator|.
name|getValue
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
name|logHandler
operator|.
name|close
argument_list|()
expr_stmt|;
name|logHandler
operator|=
operator|new
name|NonAggregatingLogHandlerWithMockExecutor
argument_list|(
name|dispatcher
argument_list|,
name|mockDelService
argument_list|,
name|dirsHandler
argument_list|,
name|stateStore
argument_list|)
expr_stmt|;
name|logHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|logHandler
operator|.
name|start
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|logHandler
operator|.
name|mockSched
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|schedule
argument_list|(
name|any
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|any
argument_list|(
name|TimeUnit
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait events get drained.
name|this
operator|.
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|appEventHandler
operator|.
name|receiveLogHandlingFinishEvent
argument_list|()
argument_list|)
expr_stmt|;
name|appEventHandler
operator|.
name|resetLogHandlingEvent
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|appEventHandler
operator|.
name|receiveLogHandlingFailedEvent
argument_list|()
argument_list|)
expr_stmt|;
comment|// send an app finish event against a removed app
name|logHandler
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppFinishedEvent
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// verify to receive a log failed event.
name|assertTrue
argument_list|(
name|appEventHandler
operator|.
name|receiveLogHandlingFailedEvent
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|appEventHandler
operator|.
name|receiveLogHandlingFinishEvent
argument_list|()
argument_list|)
expr_stmt|;
name|logHandler
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Function to run a log handler with directories failing the getFileStatus    * call. The function accepts the log handler, setup the mocks to fail with    * specific exceptions and ensures the deletion service has the correct calls.    *     * @param logHandler the logHandler implementation to test    *     * @param appId the application id that we wish when sending events to the log    * handler    *     * @param user the user name to use    *     * @param mockDelService a mock of the DeletionService which we will verify    * the delete calls against    *     * @param dirsHandler a spy or mock on the LocalDirsHandler service used to    * when creating the logHandler. It needs to be a spy so that we can intercept    * the getAllLogDirs() call.    *     * @param conf the configuration used    *     * @param spylfs a spy on the AbstractFileSystem object used when creating lfs    *     * @param lfs the FileContext object to be used to mock the getFileStatus()    * calls    *     * @param localLogDirs list of the log dirs to run the test against, must have    * at least 7 entries    */
DECL|method|runMockedFailedDirs (LogHandler logHandler, ApplicationId appId, String user, DeletionService mockDelService, LocalDirsHandlerService dirsHandler, Configuration conf, AbstractFileSystem spylfs, FileContext lfs, File[] localLogDirs)
specifier|public
specifier|static
name|void
name|runMockedFailedDirs
parameter_list|(
name|LogHandler
name|logHandler
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|String
name|user
parameter_list|,
name|DeletionService
name|mockDelService
parameter_list|,
name|LocalDirsHandlerService
name|dirsHandler
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|AbstractFileSystem
name|spylfs
parameter_list|,
name|FileContext
name|lfs
parameter_list|,
name|File
index|[]
name|localLogDirs
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|appAcls
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|localLogDirs
operator|.
name|length
operator|<
literal|7
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Argument localLogDirs must be at least of length 7"
argument_list|)
throw|;
block|}
name|Path
index|[]
name|localAppLogDirPaths
init|=
operator|new
name|Path
index|[
name|localLogDirs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|localAppLogDirPaths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|localAppLogDirPaths
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|localLogDirs
index|[
name|i
index|]
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|localLogDirPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|localLogDirs
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|localLogDirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|localLogDirPaths
operator|.
name|add
argument_list|(
name|localLogDirs
index|[
name|i
index|]
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// setup mocks
name|FsPermission
name|defaultPermission
init|=
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
operator|.
name|applyUMask
argument_list|(
name|lfs
operator|.
name|getUMask
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|FileStatus
name|fs
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|0
argument_list|,
name|defaultPermission
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
operator|new
name|Path
argument_list|(
name|localLogDirs
index|[
literal|0
index|]
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|fs
argument_list|)
operator|.
name|when
argument_list|(
name|spylfs
argument_list|)
operator|.
name|getFileStatus
argument_list|(
name|isA
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|localLogDirPaths
argument_list|)
operator|.
name|when
argument_list|(
name|dirsHandler
argument_list|)
operator|.
name|getLogDirsForCleanup
argument_list|()
expr_stmt|;
name|logHandler
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppStartedEvent
argument_list|(
name|appId
argument_list|,
name|user
argument_list|,
literal|null
argument_list|,
name|appAcls
argument_list|)
argument_list|)
expr_stmt|;
comment|// test case where some dirs have the log dir to delete
comment|// mock some dirs throwing various exceptions
comment|// verify deletion happens only on the others
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|FileNotFoundException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|spylfs
argument_list|)
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|localAppLogDirPaths
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|fs
argument_list|)
operator|.
name|when
argument_list|(
name|spylfs
argument_list|)
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|localAppLogDirPaths
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|AccessControlException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|spylfs
argument_list|)
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|localAppLogDirPaths
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|fs
argument_list|)
operator|.
name|when
argument_list|(
name|spylfs
argument_list|)
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|localAppLogDirPaths
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|spylfs
argument_list|)
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|localAppLogDirPaths
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|UnsupportedFileSystemException
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spylfs
argument_list|)
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|localAppLogDirPaths
index|[
literal|5
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|fs
argument_list|)
operator|.
name|when
argument_list|(
name|spylfs
argument_list|)
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|localAppLogDirPaths
index|[
literal|6
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|logHandler
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppFinishedEvent
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|testDeletionServiceCall
argument_list|(
name|mockDelService
argument_list|,
name|user
argument_list|,
literal|5000
argument_list|,
name|localAppLogDirPaths
index|[
literal|1
index|]
argument_list|,
name|localAppLogDirPaths
index|[
literal|3
index|]
argument_list|,
name|localAppLogDirPaths
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
return|return;
block|}
DECL|class|DeletePathsMatcher
specifier|static
class|class
name|DeletePathsMatcher
extends|extends
name|ArgumentMatcher
argument_list|<
name|Path
index|[]
argument_list|>
implements|implements
name|VarargMatcher
block|{
comment|// to get rid of serialization warning
DECL|field|serialVersionUID
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0
decl_stmt|;
DECL|field|matchPaths
specifier|private
specifier|transient
name|Path
index|[]
name|matchPaths
decl_stmt|;
DECL|method|DeletePathsMatcher (Path... matchPaths)
name|DeletePathsMatcher
parameter_list|(
name|Path
modifier|...
name|matchPaths
parameter_list|)
block|{
name|this
operator|.
name|matchPaths
operator|=
name|matchPaths
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|matches (Object varargs)
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|varargs
parameter_list|)
block|{
return|return
operator|new
name|EqualsBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|matchPaths
argument_list|,
name|varargs
argument_list|)
operator|.
name|isEquals
argument_list|()
return|;
block|}
comment|// function to get rid of FindBugs warning
DECL|method|readObject (ObjectInputStream os)
specifier|private
name|void
name|readObject
parameter_list|(
name|ObjectInputStream
name|os
parameter_list|)
throws|throws
name|NotSerializableException
block|{
throw|throw
operator|new
name|NotSerializableException
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Function to verify that the DeletionService object received the right    * requests.    *     * @param delService the DeletionService mock which we verify against    *     * @param user the user name to use when verifying the deletion    *     * @param timeout amount in milliseconds to wait before we decide the calls    * didn't come through    *     * @param matchPaths the paths to match in the delete calls    *     * @throws WantedButNotInvoked if the calls could not be verified    */
DECL|method|testDeletionServiceCall (DeletionService delService, String user, long timeout, Path... matchPaths)
specifier|static
name|void
name|testDeletionServiceCall
parameter_list|(
name|DeletionService
name|delService
parameter_list|,
name|String
name|user
parameter_list|,
name|long
name|timeout
parameter_list|,
name|Path
modifier|...
name|matchPaths
parameter_list|)
block|{
name|long
name|verifyStartTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|WantedButNotInvoked
name|notInvokedException
init|=
literal|null
decl_stmt|;
name|boolean
name|matched
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|matched
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|verifyStartTime
operator|+
name|timeout
condition|)
block|{
try|try
block|{
name|verify
argument_list|(
name|delService
argument_list|)
operator|.
name|delete
argument_list|(
name|eq
argument_list|(
name|user
argument_list|)
argument_list|,
operator|(
name|Path
operator|)
name|eq
argument_list|(
literal|null
argument_list|)
argument_list|,
name|Mockito
operator|.
name|argThat
argument_list|(
operator|new
name|DeletePathsMatcher
argument_list|(
name|matchPaths
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|matched
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WantedButNotInvoked
name|e
parameter_list|)
block|{
name|notInvokedException
operator|=
name|e
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|50l
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|i
parameter_list|)
block|{         }
block|}
block|}
if|if
condition|(
operator|!
name|matched
condition|)
block|{
throw|throw
name|notInvokedException
throw|;
block|}
return|return;
block|}
DECL|method|getLocalLogDirFiles (String name, int number)
specifier|public
specifier|static
name|File
index|[]
name|getLocalLogDirFiles
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|number
parameter_list|)
block|{
name|File
index|[]
name|dirs
init|=
operator|new
name|File
index|[
name|number
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dirs
index|[
name|i
index|]
operator|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|name
operator|+
literal|"-localLogDir"
operator|+
name|i
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
block|}
return|return
name|dirs
return|;
block|}
DECL|class|ApplicationEventHandler
class|class
name|ApplicationEventHandler
implements|implements
name|EventHandler
argument_list|<
name|ApplicationEvent
argument_list|>
block|{
DECL|field|logHandlingFinished
specifier|private
name|boolean
name|logHandlingFinished
init|=
literal|false
decl_stmt|;
DECL|field|logHandlingFailed
specifier|private
name|boolean
name|logHandlingFailed
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
DECL|method|handle (ApplicationEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|ApplicationEvent
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|APPLICATION_LOG_HANDLING_FINISHED
case|:
name|logHandlingFinished
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|APPLICATION_LOG_HANDLING_FAILED
case|:
name|logHandlingFailed
operator|=
literal|true
expr_stmt|;
default|default:
comment|// do nothing.
block|}
block|}
DECL|method|receiveLogHandlingFinishEvent ()
specifier|public
name|boolean
name|receiveLogHandlingFinishEvent
parameter_list|()
block|{
return|return
name|logHandlingFinished
return|;
block|}
DECL|method|receiveLogHandlingFailedEvent ()
specifier|public
name|boolean
name|receiveLogHandlingFailedEvent
parameter_list|()
block|{
return|return
name|logHandlingFailed
return|;
block|}
DECL|method|resetLogHandlingEvent ()
specifier|public
name|void
name|resetLogHandlingEvent
parameter_list|()
block|{
name|logHandlingFinished
operator|=
literal|false
expr_stmt|;
name|logHandlingFailed
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

