begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.resources
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doNothing
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Test for elastic non-strict memory controller based on cgroups.  */
end_comment

begin_class
DECL|class|TestCGroupElasticMemoryController
specifier|public
class|class
name|TestCGroupElasticMemoryController
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestCGroupElasticMemoryController
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
DECL|field|script
specifier|private
name|File
name|script
init|=
operator|new
name|File
argument_list|(
literal|"target/"
operator|+
name|TestCGroupElasticMemoryController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Test that at least one memory type is requested.    * @throws YarnException on exception    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|YarnException
operator|.
name|class
argument_list|)
DECL|method|testConstructorOff ()
specifier|public
name|void
name|testConstructorOff
parameter_list|()
throws|throws
name|YarnException
block|{
operator|new
name|CGroupElasticMemoryController
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that the OOM logic is pluggable.    * @throws YarnException on exception    */
annotation|@
name|Test
DECL|method|testConstructorHandler ()
specifier|public
name|void
name|testConstructorHandler
parameter_list|()
throws|throws
name|YarnException
block|{
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|NM_ELASTIC_MEMORY_CONTROL_OOM_HANDLER
argument_list|,
name|DummyRunnableWithContext
operator|.
name|class
argument_list|,
name|Runnable
operator|.
name|class
argument_list|)
expr_stmt|;
name|CGroupsHandler
name|handler
init|=
name|mock
argument_list|(
name|CGroupsHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|handler
operator|.
name|getPathForCGroup
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|""
argument_list|)
expr_stmt|;
operator|new
name|CGroupElasticMemoryController
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|handler
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that the handler is notified about multiple OOM events.    * @throws Exception on exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testMultipleOOMEvents ()
specifier|public
name|void
name|testMultipleOOMEvents
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_ELASTIC_MEMORY_CONTROL_OOM_LISTENER_PATH
argument_list|,
name|script
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
name|script
argument_list|,
literal|"#!/bin/bash\nprintf oomevent;printf oomevent;\n"
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Could not set executable"
argument_list|,
name|script
operator|.
name|setExecutable
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|CGroupsHandler
name|cgroups
init|=
name|mock
argument_list|(
name|CGroupsHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|cgroups
operator|.
name|getPathForCGroup
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cgroups
operator|.
name|getCGroupParam
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"under_oom 0"
argument_list|)
expr_stmt|;
name|Runnable
name|handler
init|=
name|mock
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
decl_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|handler
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
name|CGroupElasticMemoryController
name|controller
init|=
operator|new
name|CGroupElasticMemoryController
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|cgroups
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|10000
argument_list|,
name|handler
argument_list|)
decl_stmt|;
name|controller
operator|.
name|run
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|handler
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Could not clean up script %s"
argument_list|,
name|script
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
name|script
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test the scenario that the controller is stopped before.    * the child process starts    * @throws Exception one exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testStopBeforeStart ()
specifier|public
name|void
name|testStopBeforeStart
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_ELASTIC_MEMORY_CONTROL_OOM_LISTENER_PATH
argument_list|,
name|script
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
name|script
argument_list|,
literal|"#!/bin/bash\nprintf oomevent;printf oomevent;\n"
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Could not set executable"
argument_list|,
name|script
operator|.
name|setExecutable
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|CGroupsHandler
name|cgroups
init|=
name|mock
argument_list|(
name|CGroupsHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|cgroups
operator|.
name|getPathForCGroup
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cgroups
operator|.
name|getCGroupParam
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"under_oom 0"
argument_list|)
expr_stmt|;
name|Runnable
name|handler
init|=
name|mock
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
decl_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|handler
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
name|CGroupElasticMemoryController
name|controller
init|=
operator|new
name|CGroupElasticMemoryController
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|cgroups
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|10000
argument_list|,
name|handler
argument_list|)
decl_stmt|;
name|controller
operator|.
name|stopListening
argument_list|()
expr_stmt|;
name|controller
operator|.
name|run
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|handler
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Could not clean up script %s"
argument_list|,
name|script
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
name|script
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test the edge case that OOM is never resolved.    * @throws Exception on exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|,
name|expected
operator|=
name|YarnRuntimeException
operator|.
name|class
argument_list|)
DECL|method|testInfiniteOOM ()
specifier|public
name|void
name|testInfiniteOOM
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_ELASTIC_MEMORY_CONTROL_OOM_LISTENER_PATH
argument_list|,
name|script
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|Runnable
name|handler
init|=
name|mock
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
name|script
argument_list|,
literal|"#!/bin/bash\nprintf oomevent;sleep 1000;\n"
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Could not set executable"
argument_list|,
name|script
operator|.
name|setExecutable
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|CGroupsHandler
name|cgroups
init|=
name|mock
argument_list|(
name|CGroupsHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|cgroups
operator|.
name|getPathForCGroup
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cgroups
operator|.
name|getCGroupParam
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"under_oom 1"
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|handler
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
name|CGroupElasticMemoryController
name|controller
init|=
operator|new
name|CGroupElasticMemoryController
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|cgroups
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|10000
argument_list|,
name|handler
argument_list|)
decl_stmt|;
name|controller
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|verify
argument_list|(
name|handler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Could not clean up script %s"
argument_list|,
name|script
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
name|script
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test the edge case that OOM cannot be resolved due to the lack of    * containers.    * @throws Exception on exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|,
name|expected
operator|=
name|YarnRuntimeException
operator|.
name|class
argument_list|)
DECL|method|testNothingToKill ()
specifier|public
name|void
name|testNothingToKill
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_ELASTIC_MEMORY_CONTROL_OOM_LISTENER_PATH
argument_list|,
name|script
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|Runnable
name|handler
init|=
name|mock
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
name|script
argument_list|,
literal|"#!/bin/bash\nprintf oomevent;sleep 1000;\n"
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Could not set executable"
argument_list|,
name|script
operator|.
name|setExecutable
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|CGroupsHandler
name|cgroups
init|=
name|mock
argument_list|(
name|CGroupsHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|cgroups
operator|.
name|getPathForCGroup
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cgroups
operator|.
name|getCGroupParam
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"under_oom 1"
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Expected"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|handler
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
name|CGroupElasticMemoryController
name|controller
init|=
operator|new
name|CGroupElasticMemoryController
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|cgroups
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|10000
argument_list|,
name|handler
argument_list|)
decl_stmt|;
name|controller
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|verify
argument_list|(
name|handler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Could not clean up script %s"
argument_list|,
name|script
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
name|script
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test that node manager can exit listening.    * This is done by running a long running listener for 10000 seconds.    * Then we wait for 2 seconds and stop listening.    * We do not use a script this time to avoid leaking the child process.    * @throws Exception exception occurred    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testNormalExit ()
specifier|public
name|void
name|testNormalExit
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_ELASTIC_MEMORY_CONTROL_OOM_LISTENER_PATH
argument_list|,
literal|"sleep"
argument_list|)
expr_stmt|;
name|ExecutorService
name|service
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|CGroupsHandler
name|cgroups
init|=
name|mock
argument_list|(
name|CGroupsHandler
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// This will be passed to sleep as an argument
name|when
argument_list|(
name|cgroups
operator|.
name|getPathForCGroup
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"10000"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cgroups
operator|.
name|getCGroupParam
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"under_oom 0"
argument_list|)
expr_stmt|;
name|Runnable
name|handler
init|=
name|mock
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
decl_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|handler
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
name|CGroupElasticMemoryController
name|controller
init|=
operator|new
name|CGroupElasticMemoryController
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|cgroups
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|10000
argument_list|,
name|handler
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|service
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Wait interrupted."
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Calling process destroy in %d ms"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
argument_list|)
expr_stmt|;
name|controller
operator|.
name|stopListening
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Called process destroy."
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|controller
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|service
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test that DefaultOOMHandler is instantiated correctly in    * the elastic constructor.    * @throws YarnException Could not set up elastic memory control.    */
annotation|@
name|Test
DECL|method|testDefaultConstructor ()
specifier|public
name|void
name|testDefaultConstructor
parameter_list|()
throws|throws
name|YarnException
block|{
name|CGroupsHandler
name|handler
init|=
name|mock
argument_list|(
name|CGroupsHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|handler
operator|.
name|getPathForCGroup
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|""
argument_list|)
expr_stmt|;
operator|new
name|CGroupElasticMemoryController
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|handler
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

