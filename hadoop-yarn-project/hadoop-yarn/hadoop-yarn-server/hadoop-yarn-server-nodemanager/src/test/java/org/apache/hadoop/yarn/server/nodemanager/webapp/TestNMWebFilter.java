begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|LocalDirsHandlerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeManager
operator|.
name|NMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|glassfish
operator|.
name|grizzly
operator|.
name|servlet
operator|.
name|HttpServletResponseImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Basic sanity Tests for NMWebFilter.  *  */
end_comment

begin_class
DECL|class|TestNMWebFilter
specifier|public
class|class
name|TestNMWebFilter
block|{
DECL|field|LOG_SERVER_URI
specifier|private
specifier|static
specifier|final
name|String
name|LOG_SERVER_URI
init|=
literal|"log-server:1999/logs"
decl_stmt|;
DECL|field|USER
specifier|private
specifier|static
specifier|final
name|String
name|USER
init|=
literal|"testUser"
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testRedirection ()
specifier|public
name|void
name|testRedirection
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|NMContext
name|mockNMContext
init|=
name|mock
argument_list|(
name|NMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|Application
argument_list|>
name|applications
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|mockNMContext
operator|.
name|getApplications
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|applications
argument_list|)
expr_stmt|;
name|LocalDirsHandlerService
name|mockLocalDirsHandlerService
init|=
name|mock
argument_list|(
name|LocalDirsHandlerService
operator|.
name|class
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_LOG_SERVER_URL
argument_list|,
literal|"http://"
operator|+
name|LOG_SERVER_URI
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockLocalDirsHandlerService
operator|.
name|getConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockNMContext
operator|.
name|getLocalDirsHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockLocalDirsHandlerService
argument_list|)
expr_stmt|;
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"testNM"
argument_list|,
literal|9999
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockNMContext
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|Injector
name|mockInjector
init|=
name|mock
argument_list|(
name|Injector
operator|.
name|class
argument_list|)
decl_stmt|;
name|NMWebAppFilter
name|testFilter
init|=
operator|new
name|NMWebAppFilter
argument_list|(
name|mockInjector
argument_list|,
name|mockNMContext
argument_list|)
decl_stmt|;
name|HttpServletResponseForTest
name|response
init|=
operator|new
name|HttpServletResponseForTest
argument_list|()
decl_stmt|;
comment|// dummy filter
name|FilterChain
name|chain
init|=
operator|new
name|FilterChain
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|servletRequest
parameter_list|,
name|ServletResponse
name|servletResponse
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
comment|// Do Nothing
block|}
block|}
decl_stmt|;
name|String
name|uri
init|=
literal|"testNM:8042/node/containerlogs/"
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|USER
decl_stmt|;
name|HttpServletRequest
name|request
init|=
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|testFilter
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|chain
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpServletResponse
operator|.
name|SC_TEMPORARY_REDIRECT
argument_list|,
name|response
operator|.
name|status
argument_list|)
expr_stmt|;
name|String
name|redirect
init|=
name|response
operator|.
name|getHeader
argument_list|(
literal|"Location"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|redirect
operator|.
name|contains
argument_list|(
name|LOG_SERVER_URI
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|redirect
operator|.
name|contains
argument_list|(
name|nodeId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|redirect
operator|.
name|contains
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|redirect
operator|.
name|contains
argument_list|(
name|USER
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|logType
init|=
literal|"syslog"
decl_stmt|;
name|uri
operator|=
literal|"testNM:8042/node/containerlogs/"
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|USER
operator|+
literal|"/"
operator|+
name|logType
operator|+
literal|"/?start=10"
expr_stmt|;
name|HttpServletRequest
name|request2
init|=
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|request2
operator|.
name|getRequestURI
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|request2
operator|.
name|getQueryString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"start=10"
argument_list|)
expr_stmt|;
name|testFilter
operator|.
name|doFilter
argument_list|(
name|request2
argument_list|,
name|response
argument_list|,
name|chain
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpServletResponse
operator|.
name|SC_TEMPORARY_REDIRECT
argument_list|,
name|response
operator|.
name|status
argument_list|)
expr_stmt|;
name|redirect
operator|=
name|response
operator|.
name|getHeader
argument_list|(
literal|"Location"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|redirect
operator|.
name|contains
argument_list|(
name|LOG_SERVER_URI
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|redirect
operator|.
name|contains
argument_list|(
name|nodeId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|redirect
operator|.
name|contains
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|redirect
operator|.
name|contains
argument_list|(
name|USER
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|redirect
operator|.
name|contains
argument_list|(
name|logType
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|redirect
operator|.
name|contains
argument_list|(
literal|"start=10"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|HttpServletResponseForTest
specifier|private
class|class
name|HttpServletResponseForTest
extends|extends
name|HttpServletResponseImpl
block|{
DECL|field|redirectLocation
name|String
name|redirectLocation
init|=
literal|""
decl_stmt|;
DECL|field|status
name|int
name|status
decl_stmt|;
DECL|field|contentType
specifier|private
name|String
name|contentType
decl_stmt|;
DECL|field|headers
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|body
specifier|private
name|StringWriter
name|body
decl_stmt|;
DECL|method|getRedirect ()
specifier|public
name|String
name|getRedirect
parameter_list|()
block|{
return|return
name|redirectLocation
return|;
block|}
annotation|@
name|Override
DECL|method|sendRedirect (String location)
specifier|public
name|void
name|sendRedirect
parameter_list|(
name|String
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|redirectLocation
operator|=
name|location
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|encodeRedirectURL (String url)
specifier|public
name|String
name|encodeRedirectURL
parameter_list|(
name|String
name|url
parameter_list|)
block|{
return|return
name|url
return|;
block|}
annotation|@
name|Override
DECL|method|setStatus (int status)
specifier|public
name|void
name|setStatus
parameter_list|(
name|int
name|status
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setContentType (String type)
specifier|public
name|void
name|setContentType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|contentType
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setHeader (String name, String value)
specifier|public
name|void
name|setHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|getHeader (String name)
specifier|public
name|String
name|getHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|headers
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getWriter ()
specifier|public
name|PrintWriter
name|getWriter
parameter_list|()
throws|throws
name|IOException
block|{
name|body
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
return|return
operator|new
name|PrintWriter
argument_list|(
name|body
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

