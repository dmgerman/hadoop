begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.resources.gpu
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|gpu
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ResourceMappings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|CGroupsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|ResourceHandlerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|gpu
operator|.
name|GpuDevice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|gpu
operator|.
name|GpuDiscoverer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|runtime
operator|.
name|ContainerRuntimeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMNullStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|TestResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|TestGpuResourceHandler
specifier|public
class|class
name|TestGpuResourceHandler
block|{
DECL|field|mockCGroupsHandler
specifier|private
name|CGroupsHandler
name|mockCGroupsHandler
decl_stmt|;
DECL|field|mockPrivilegedExecutor
specifier|private
name|PrivilegedOperationExecutor
name|mockPrivilegedExecutor
decl_stmt|;
DECL|field|gpuResourceHandler
specifier|private
name|GpuResourceHandlerImpl
name|gpuResourceHandler
decl_stmt|;
DECL|field|mockNMStateStore
specifier|private
name|NMStateStoreService
name|mockNMStateStore
decl_stmt|;
DECL|field|runningContainersMap
specifier|private
name|ConcurrentHashMap
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
name|runningContainersMap
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|TestResourceUtils
operator|.
name|addNewTypesToResources
argument_list|(
name|ResourceInformation
operator|.
name|GPU_URI
argument_list|)
expr_stmt|;
name|mockCGroupsHandler
operator|=
name|mock
argument_list|(
name|CGroupsHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|mockPrivilegedExecutor
operator|=
name|mock
argument_list|(
name|PrivilegedOperationExecutor
operator|.
name|class
argument_list|)
expr_stmt|;
name|mockNMStateStore
operator|=
name|mock
argument_list|(
name|NMStateStoreService
operator|.
name|class
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Context
name|nmctx
init|=
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|nmctx
operator|.
name|getNMStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockNMStateStore
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nmctx
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|runningContainersMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|nmctx
operator|.
name|getContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|runningContainersMap
argument_list|)
expr_stmt|;
name|gpuResourceHandler
operator|=
operator|new
name|GpuResourceHandlerImpl
argument_list|(
name|nmctx
argument_list|,
name|mockCGroupsHandler
argument_list|,
name|mockPrivilegedExecutor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBootStrap ()
specifier|public
name|void
name|testBootStrap
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_GPU_ALLOWED_DEVICES
argument_list|,
literal|"0:0"
argument_list|)
expr_stmt|;
name|GpuDiscoverer
operator|.
name|getInstance
argument_list|()
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|gpuResourceHandler
operator|.
name|bootstrap
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockCGroupsHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|initializeCGroupController
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|DEVICES
argument_list|)
expr_stmt|;
block|}
DECL|method|getContainerId (int id)
specifier|private
specifier|static
name|ContainerId
name|getContainerId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
name|id
argument_list|)
return|;
block|}
DECL|method|mockContainerWithGpuRequest (int id, int numGpuRequest, boolean dockerContainerEnabled)
specifier|private
specifier|static
name|Container
name|mockContainerWithGpuRequest
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|numGpuRequest
parameter_list|,
name|boolean
name|dockerContainerEnabled
parameter_list|)
block|{
name|Container
name|c
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getContainerId
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|Resource
name|res
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ResourceMappings
name|resMapping
init|=
operator|new
name|ResourceMappings
argument_list|()
decl_stmt|;
name|res
operator|.
name|setResourceValue
argument_list|(
name|ResourceInformation
operator|.
name|GPU_URI
argument_list|,
name|numGpuRequest
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getResourceMappings
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resMapping
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|clc
init|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|dockerContainerEnabled
condition|)
block|{
name|env
operator|.
name|put
argument_list|(
name|ContainerRuntimeConstants
operator|.
name|ENV_CONTAINER_TYPE
argument_list|,
name|ContainerRuntimeConstants
operator|.
name|CONTAINER_RUNTIME_DOCKER
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|clc
operator|.
name|getEnvironment
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getLaunchContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clc
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
DECL|method|mockContainerWithGpuRequest (int id, int numGpuRequest)
specifier|private
specifier|static
name|Container
name|mockContainerWithGpuRequest
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|numGpuRequest
parameter_list|)
block|{
return|return
name|mockContainerWithGpuRequest
argument_list|(
name|id
argument_list|,
name|numGpuRequest
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|verifyDeniedDevices (ContainerId containerId, List<GpuDevice> deniedDevices)
specifier|private
name|void
name|verifyDeniedDevices
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|List
argument_list|<
name|GpuDevice
argument_list|>
name|deniedDevices
parameter_list|)
throws|throws
name|ResourceHandlerException
throws|,
name|PrivilegedOperationException
block|{
name|verify
argument_list|(
name|mockCGroupsHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|createCGroup
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|DEVICES
argument_list|,
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|deniedDevices
operator|&&
operator|!
name|deniedDevices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|deniedDevicesMinorNumber
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|GpuDevice
name|deniedDevice
range|:
name|deniedDevices
control|)
block|{
name|deniedDevicesMinorNumber
operator|.
name|add
argument_list|(
name|deniedDevice
operator|.
name|getMinorNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|mockPrivilegedExecutor
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|executePrivilegedOperation
argument_list|(
operator|new
name|PrivilegedOperation
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|GPU
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|GpuResourceHandlerImpl
operator|.
name|CONTAINER_ID_CLI_OPTION
argument_list|,
name|containerId
operator|.
name|toString
argument_list|()
argument_list|,
name|GpuResourceHandlerImpl
operator|.
name|EXCLUDED_GPUS_CLI_OPTION
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|deniedDevicesMinorNumber
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|commonTestAllocation (boolean dockerContainerEnabled)
specifier|private
name|void
name|commonTestAllocation
parameter_list|(
name|boolean
name|dockerContainerEnabled
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_GPU_ALLOWED_DEVICES
argument_list|,
literal|"0:0,1:1,2:3,3:4"
argument_list|)
expr_stmt|;
name|GpuDiscoverer
operator|.
name|getInstance
argument_list|()
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|gpuResourceHandler
operator|.
name|bootstrap
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|gpuResourceHandler
operator|.
name|getGpuAllocator
argument_list|()
operator|.
name|getAvailableGpus
argument_list|()
argument_list|)
expr_stmt|;
comment|/* Start container 1, asks 3 containers */
name|gpuResourceHandler
operator|.
name|preStart
argument_list|(
name|mockContainerWithGpuRequest
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
name|dockerContainerEnabled
argument_list|)
argument_list|)
expr_stmt|;
comment|// Only device=4 will be blocked.
if|if
condition|(
name|dockerContainerEnabled
condition|)
block|{
name|verifyDeniedDevices
argument_list|(
name|getContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verifyDeniedDevices
argument_list|(
name|getContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|GpuDevice
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* Start container 2, asks 2 containers. Excepted to fail */
name|boolean
name|failedToAllocate
init|=
literal|false
decl_stmt|;
try|try
block|{
name|gpuResourceHandler
operator|.
name|preStart
argument_list|(
name|mockContainerWithGpuRequest
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
name|dockerContainerEnabled
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceHandlerException
name|e
parameter_list|)
block|{
name|failedToAllocate
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|failedToAllocate
argument_list|)
expr_stmt|;
comment|/* Start container 3, ask 1 container, succeeded */
name|gpuResourceHandler
operator|.
name|preStart
argument_list|(
name|mockContainerWithGpuRequest
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
name|dockerContainerEnabled
argument_list|)
argument_list|)
expr_stmt|;
comment|// devices = 0/1/3 will be blocked
if|if
condition|(
name|dockerContainerEnabled
condition|)
block|{
name|verifyDeniedDevices
argument_list|(
name|getContainerId
argument_list|(
literal|3
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verifyDeniedDevices
argument_list|(
name|getContainerId
argument_list|(
literal|3
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|GpuDevice
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|GpuDevice
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|GpuDevice
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* Start container 4, ask 0 container, succeeded */
name|gpuResourceHandler
operator|.
name|preStart
argument_list|(
name|mockContainerWithGpuRequest
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|,
name|dockerContainerEnabled
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dockerContainerEnabled
condition|)
block|{
name|verifyDeniedDevices
argument_list|(
name|getContainerId
argument_list|(
literal|4
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// All devices will be blocked
name|verifyDeniedDevices
argument_list|(
name|getContainerId
argument_list|(
literal|4
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|GpuDevice
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|GpuDevice
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|GpuDevice
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
operator|new
name|GpuDevice
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* Release container-1, expect cgroups deleted */
name|gpuResourceHandler
operator|.
name|postComplete
argument_list|(
name|getContainerId
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockCGroupsHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|createCGroup
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|DEVICES
argument_list|,
name|getContainerId
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|gpuResourceHandler
operator|.
name|getGpuAllocator
argument_list|()
operator|.
name|getAvailableGpus
argument_list|()
argument_list|)
expr_stmt|;
comment|/* Release container-3, expect cgroups deleted */
name|gpuResourceHandler
operator|.
name|postComplete
argument_list|(
name|getContainerId
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockCGroupsHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|createCGroup
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|DEVICES
argument_list|,
name|getContainerId
argument_list|(
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|gpuResourceHandler
operator|.
name|getGpuAllocator
argument_list|()
operator|.
name|getAvailableGpus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocationWhenDockerContainerEnabled ()
specifier|public
name|void
name|testAllocationWhenDockerContainerEnabled
parameter_list|()
throws|throws
name|Exception
block|{
comment|// When docker container is enabled, no devices should be written to
comment|// devices.deny.
name|commonTestAllocation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocation ()
specifier|public
name|void
name|testAllocation
parameter_list|()
throws|throws
name|Exception
block|{
name|commonTestAllocation
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|testAssignedGpuWillBeCleanedupWhenStoreOpFails ()
specifier|public
name|void
name|testAssignedGpuWillBeCleanedupWhenStoreOpFails
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_GPU_ALLOWED_DEVICES
argument_list|,
literal|"0:0,1:1,2:3,3:4"
argument_list|)
expr_stmt|;
name|GpuDiscoverer
operator|.
name|getInstance
argument_list|()
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|gpuResourceHandler
operator|.
name|bootstrap
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|gpuResourceHandler
operator|.
name|getGpuAllocator
argument_list|()
operator|.
name|getAvailableGpus
argument_list|()
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Exception ..."
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockNMStateStore
argument_list|)
operator|.
name|storeAssignedResources
argument_list|(
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|anyList
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|exception
init|=
literal|false
decl_stmt|;
comment|/* Start container 1, asks 3 containers */
try|try
block|{
name|gpuResourceHandler
operator|.
name|preStart
argument_list|(
name|mockContainerWithGpuRequest
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceHandlerException
name|e
parameter_list|)
block|{
name|exception
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"preStart should throw exception"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
comment|// After preStart, we still have 4 available GPU since the store op fails.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|gpuResourceHandler
operator|.
name|getGpuAllocator
argument_list|()
operator|.
name|getAvailableGpus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocationWithoutAllowedGpus ()
specifier|public
name|void
name|testAllocationWithoutAllowedGpus
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_GPU_ALLOWED_DEVICES
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|GpuDiscoverer
operator|.
name|getInstance
argument_list|()
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|gpuResourceHandler
operator|.
name|bootstrap
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should fail because no GPU available"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceHandlerException
name|e
parameter_list|)
block|{
comment|// Expected because of no resource available
block|}
comment|/* Start container 1, asks 0 containers */
name|gpuResourceHandler
operator|.
name|preStart
argument_list|(
name|mockContainerWithGpuRequest
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|verifyDeniedDevices
argument_list|(
name|getContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
comment|/* Start container 2, asks 1 containers. Excepted to fail */
name|boolean
name|failedToAllocate
init|=
literal|false
decl_stmt|;
try|try
block|{
name|gpuResourceHandler
operator|.
name|preStart
argument_list|(
name|mockContainerWithGpuRequest
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceHandlerException
name|e
parameter_list|)
block|{
name|failedToAllocate
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|failedToAllocate
argument_list|)
expr_stmt|;
comment|/* Release container 1, expect cgroups deleted */
name|gpuResourceHandler
operator|.
name|postComplete
argument_list|(
name|getContainerId
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockCGroupsHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|createCGroup
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|DEVICES
argument_list|,
name|getContainerId
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|gpuResourceHandler
operator|.
name|getGpuAllocator
argument_list|()
operator|.
name|getAvailableGpus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocationStored ()
specifier|public
name|void
name|testAllocationStored
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_GPU_ALLOWED_DEVICES
argument_list|,
literal|"0:0,1:1,2:3,3:4"
argument_list|)
expr_stmt|;
name|GpuDiscoverer
operator|.
name|getInstance
argument_list|()
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|gpuResourceHandler
operator|.
name|bootstrap
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|gpuResourceHandler
operator|.
name|getGpuAllocator
argument_list|()
operator|.
name|getAvailableGpus
argument_list|()
argument_list|)
expr_stmt|;
comment|/* Start container 1, asks 3 containers */
name|Container
name|container
init|=
name|mockContainerWithGpuRequest
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|gpuResourceHandler
operator|.
name|preStart
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockNMStateStore
argument_list|)
operator|.
name|storeAssignedResources
argument_list|(
name|container
argument_list|,
name|ResourceInformation
operator|.
name|GPU_URI
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|GpuDevice
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|GpuDevice
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|GpuDevice
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Only device=4 will be blocked.
name|verifyDeniedDevices
argument_list|(
name|getContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|GpuDevice
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Start container 2, ask 0 container, succeeded */
name|container
operator|=
name|mockContainerWithGpuRequest
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|gpuResourceHandler
operator|.
name|preStart
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|verifyDeniedDevices
argument_list|(
name|getContainerId
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|GpuDevice
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|GpuDevice
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|GpuDevice
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
operator|new
name|GpuDevice
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|container
operator|.
name|getResourceMappings
argument_list|()
operator|.
name|getAssignedResources
argument_list|(
name|ResourceInformation
operator|.
name|GPU_URI
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Store assigned resource will not be invoked.
name|verify
argument_list|(
name|mockNMStateStore
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|storeAssignedResources
argument_list|(
name|eq
argument_list|(
name|container
argument_list|)
argument_list|,
name|eq
argument_list|(
name|ResourceInformation
operator|.
name|GPU_URI
argument_list|)
argument_list|,
name|anyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocationStoredWithNULLStateStore ()
specifier|public
name|void
name|testAllocationStoredWithNULLStateStore
parameter_list|()
throws|throws
name|Exception
block|{
name|NMNullStateStoreService
name|mockNMNULLStateStore
init|=
name|mock
argument_list|(
name|NMNullStateStoreService
operator|.
name|class
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_GPU_ALLOWED_DEVICES
argument_list|,
literal|"0:0,1:1,2:3,3:4"
argument_list|)
expr_stmt|;
name|Context
name|nmnctx
init|=
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|nmnctx
operator|.
name|getNMStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockNMNULLStateStore
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nmnctx
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|GpuResourceHandlerImpl
name|gpuNULLStateResourceHandler
init|=
operator|new
name|GpuResourceHandlerImpl
argument_list|(
name|nmnctx
argument_list|,
name|mockCGroupsHandler
argument_list|,
name|mockPrivilegedExecutor
argument_list|)
decl_stmt|;
name|GpuDiscoverer
operator|.
name|getInstance
argument_list|()
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|gpuNULLStateResourceHandler
operator|.
name|bootstrap
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|gpuNULLStateResourceHandler
operator|.
name|getGpuAllocator
argument_list|()
operator|.
name|getAvailableGpus
argument_list|()
argument_list|)
expr_stmt|;
comment|/* Start container 1, asks 3 containers */
name|Container
name|container
init|=
name|mockContainerWithGpuRequest
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|gpuNULLStateResourceHandler
operator|.
name|preStart
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|nmnctx
operator|.
name|getNMStateStore
argument_list|()
argument_list|)
operator|.
name|storeAssignedResources
argument_list|(
name|container
argument_list|,
name|ResourceInformation
operator|.
name|GPU_URI
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|GpuDevice
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|GpuDevice
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|GpuDevice
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRecoverResourceAllocation ()
specifier|public
name|void
name|testRecoverResourceAllocation
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_GPU_ALLOWED_DEVICES
argument_list|,
literal|"0:0,1:1,2:3,3:4"
argument_list|)
expr_stmt|;
name|GpuDiscoverer
operator|.
name|getInstance
argument_list|()
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|gpuResourceHandler
operator|.
name|bootstrap
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|gpuResourceHandler
operator|.
name|getGpuAllocator
argument_list|()
operator|.
name|getAvailableGpus
argument_list|()
argument_list|)
expr_stmt|;
name|Container
name|nmContainer
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|ResourceMappings
name|rmap
init|=
operator|new
name|ResourceMappings
argument_list|()
decl_stmt|;
name|ResourceMappings
operator|.
name|AssignedResources
name|ar
init|=
operator|new
name|ResourceMappings
operator|.
name|AssignedResources
argument_list|()
decl_stmt|;
name|ar
operator|.
name|updateAssignedResources
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|GpuDevice
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|GpuDevice
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rmap
operator|.
name|addAssignedResources
argument_list|(
name|ResourceInformation
operator|.
name|GPU_URI
argument_list|,
name|ar
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nmContainer
operator|.
name|getResourceMappings
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rmap
argument_list|)
expr_stmt|;
name|runningContainersMap
operator|.
name|put
argument_list|(
name|getContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|nmContainer
argument_list|)
expr_stmt|;
comment|// TEST CASE
comment|// Reacquire container restore state of GPU Resource Allocator.
name|gpuResourceHandler
operator|.
name|reacquireContainer
argument_list|(
name|getContainerId
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|GpuDevice
argument_list|,
name|ContainerId
argument_list|>
name|deviceAllocationMapping
init|=
name|gpuResourceHandler
operator|.
name|getGpuAllocator
argument_list|()
operator|.
name|getDeviceAllocationMappingCopy
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|deviceAllocationMapping
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|deviceAllocationMapping
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
operator|new
name|GpuDevice
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|deviceAllocationMapping
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
operator|new
name|GpuDevice
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|deviceAllocationMapping
operator|.
name|get
argument_list|(
operator|new
name|GpuDevice
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|getContainerId
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// TEST CASE
comment|// Try to reacquire a container but requested device is not in allowed list.
name|nmContainer
operator|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
expr_stmt|;
name|rmap
operator|=
operator|new
name|ResourceMappings
argument_list|()
expr_stmt|;
name|ar
operator|=
operator|new
name|ResourceMappings
operator|.
name|AssignedResources
argument_list|()
expr_stmt|;
comment|// id=5 is not in allowed list.
name|ar
operator|.
name|updateAssignedResources
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|GpuDevice
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|,
operator|new
name|GpuDevice
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rmap
operator|.
name|addAssignedResources
argument_list|(
name|ResourceInformation
operator|.
name|GPU_URI
argument_list|,
name|ar
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nmContainer
operator|.
name|getResourceMappings
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rmap
argument_list|)
expr_stmt|;
name|runningContainersMap
operator|.
name|put
argument_list|(
name|getContainerId
argument_list|(
literal|2
argument_list|)
argument_list|,
name|nmContainer
argument_list|)
expr_stmt|;
name|boolean
name|caughtException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|gpuResourceHandler
operator|.
name|reacquireContainer
argument_list|(
name|getContainerId
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceHandlerException
name|e
parameter_list|)
block|{
name|caughtException
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should fail since requested device Id is not in allowed list"
argument_list|,
name|caughtException
argument_list|)
expr_stmt|;
comment|// Make sure internal state not changed.
name|deviceAllocationMapping
operator|=
name|gpuResourceHandler
operator|.
name|getGpuAllocator
argument_list|()
operator|.
name|getDeviceAllocationMappingCopy
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|deviceAllocationMapping
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|deviceAllocationMapping
operator|.
name|keySet
argument_list|()
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|GpuDevice
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|GpuDevice
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|deviceAllocationMapping
operator|.
name|get
argument_list|(
operator|new
name|GpuDevice
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|getContainerId
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// TEST CASE
comment|// Try to reacquire a container but requested device is already assigned.
name|nmContainer
operator|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
expr_stmt|;
name|rmap
operator|=
operator|new
name|ResourceMappings
argument_list|()
expr_stmt|;
name|ar
operator|=
operator|new
name|ResourceMappings
operator|.
name|AssignedResources
argument_list|()
expr_stmt|;
comment|// id=3 is already assigned
name|ar
operator|.
name|updateAssignedResources
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|GpuDevice
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|,
operator|new
name|GpuDevice
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rmap
operator|.
name|addAssignedResources
argument_list|(
literal|"gpu"
argument_list|,
name|ar
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nmContainer
operator|.
name|getResourceMappings
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rmap
argument_list|)
expr_stmt|;
name|runningContainersMap
operator|.
name|put
argument_list|(
name|getContainerId
argument_list|(
literal|2
argument_list|)
argument_list|,
name|nmContainer
argument_list|)
expr_stmt|;
name|caughtException
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|gpuResourceHandler
operator|.
name|reacquireContainer
argument_list|(
name|getContainerId
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceHandlerException
name|e
parameter_list|)
block|{
name|caughtException
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should fail since requested device Id is not in allowed list"
argument_list|,
name|caughtException
argument_list|)
expr_stmt|;
comment|// Make sure internal state not changed.
name|deviceAllocationMapping
operator|=
name|gpuResourceHandler
operator|.
name|getGpuAllocator
argument_list|()
operator|.
name|getDeviceAllocationMappingCopy
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|deviceAllocationMapping
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|deviceAllocationMapping
operator|.
name|keySet
argument_list|()
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|GpuDevice
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|GpuDevice
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|deviceAllocationMapping
operator|.
name|get
argument_list|(
operator|new
name|GpuDevice
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|getContainerId
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

