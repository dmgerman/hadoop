begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.recovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|LocalResourceProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|ContainerManagerApplicationProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|DeletionServiceDeleteTaskProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|LocalizedResourceProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|LogDeleterProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|MasterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|MasterKeyPBImpl
import|;
end_import

begin_class
DECL|class|NMMemoryStateStoreService
specifier|public
class|class
name|NMMemoryStateStoreService
extends|extends
name|NMStateStoreService
block|{
DECL|field|apps
specifier|private
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ContainerManagerApplicationProto
argument_list|>
name|apps
decl_stmt|;
DECL|field|finishedApps
specifier|private
name|Set
argument_list|<
name|ApplicationId
argument_list|>
name|finishedApps
decl_stmt|;
DECL|field|containerStates
specifier|private
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|RecoveredContainerState
argument_list|>
name|containerStates
decl_stmt|;
DECL|field|trackerStates
specifier|private
name|Map
argument_list|<
name|TrackerKey
argument_list|,
name|TrackerState
argument_list|>
name|trackerStates
decl_stmt|;
DECL|field|deleteTasks
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|DeletionServiceDeleteTaskProto
argument_list|>
name|deleteTasks
decl_stmt|;
DECL|field|nmTokenState
specifier|private
name|RecoveredNMTokensState
name|nmTokenState
decl_stmt|;
DECL|field|containerTokenState
specifier|private
name|RecoveredContainerTokensState
name|containerTokenState
decl_stmt|;
DECL|field|logDeleterState
specifier|private
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|LogDeleterProto
argument_list|>
name|logDeleterState
decl_stmt|;
DECL|method|NMMemoryStateStoreService ()
specifier|public
name|NMMemoryStateStoreService
parameter_list|()
block|{
name|super
argument_list|(
name|NMMemoryStateStoreService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initStorage (Configuration conf)
specifier|protected
name|void
name|initStorage
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|apps
operator|=
operator|new
name|HashMap
argument_list|<
name|ApplicationId
argument_list|,
name|ContainerManagerApplicationProto
argument_list|>
argument_list|()
expr_stmt|;
name|finishedApps
operator|=
operator|new
name|HashSet
argument_list|<
name|ApplicationId
argument_list|>
argument_list|()
expr_stmt|;
name|containerStates
operator|=
operator|new
name|HashMap
argument_list|<
name|ContainerId
argument_list|,
name|RecoveredContainerState
argument_list|>
argument_list|()
expr_stmt|;
name|nmTokenState
operator|=
operator|new
name|RecoveredNMTokensState
argument_list|()
expr_stmt|;
name|nmTokenState
operator|.
name|applicationMasterKeys
operator|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|MasterKey
argument_list|>
argument_list|()
expr_stmt|;
name|containerTokenState
operator|=
operator|new
name|RecoveredContainerTokensState
argument_list|()
expr_stmt|;
name|containerTokenState
operator|.
name|activeTokens
operator|=
operator|new
name|HashMap
argument_list|<
name|ContainerId
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|trackerStates
operator|=
operator|new
name|HashMap
argument_list|<
name|TrackerKey
argument_list|,
name|TrackerState
argument_list|>
argument_list|()
expr_stmt|;
name|deleteTasks
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|DeletionServiceDeleteTaskProto
argument_list|>
argument_list|()
expr_stmt|;
name|logDeleterState
operator|=
operator|new
name|HashMap
argument_list|<
name|ApplicationId
argument_list|,
name|LogDeleterProto
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startStorage ()
specifier|protected
name|void
name|startStorage
parameter_list|()
block|{   }
annotation|@
name|Override
DECL|method|closeStorage ()
specifier|protected
name|void
name|closeStorage
parameter_list|()
block|{   }
annotation|@
name|Override
DECL|method|loadApplicationsState ()
specifier|public
specifier|synchronized
name|RecoveredApplicationsState
name|loadApplicationsState
parameter_list|()
throws|throws
name|IOException
block|{
name|RecoveredApplicationsState
name|state
init|=
operator|new
name|RecoveredApplicationsState
argument_list|()
decl_stmt|;
name|state
operator|.
name|applications
operator|=
operator|new
name|ArrayList
argument_list|<
name|ContainerManagerApplicationProto
argument_list|>
argument_list|(
name|apps
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|state
operator|.
name|finishedApplications
operator|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationId
argument_list|>
argument_list|(
name|finishedApps
argument_list|)
expr_stmt|;
return|return
name|state
return|;
block|}
annotation|@
name|Override
DECL|method|storeApplication (ApplicationId appId, ContainerManagerApplicationProto proto)
specifier|public
specifier|synchronized
name|void
name|storeApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|ContainerManagerApplicationProto
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
name|ContainerManagerApplicationProto
name|protoCopy
init|=
name|ContainerManagerApplicationProto
operator|.
name|parseFrom
argument_list|(
name|proto
operator|.
name|toByteString
argument_list|()
argument_list|)
decl_stmt|;
name|apps
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|protoCopy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeFinishedApplication (ApplicationId appId)
specifier|public
specifier|synchronized
name|void
name|storeFinishedApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
name|finishedApps
operator|.
name|add
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeApplication (ApplicationId appId)
specifier|public
specifier|synchronized
name|void
name|removeApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|IOException
block|{
name|apps
operator|.
name|remove
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|finishedApps
operator|.
name|remove
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|loadContainersState ()
specifier|public
specifier|synchronized
name|List
argument_list|<
name|RecoveredContainerState
argument_list|>
name|loadContainersState
parameter_list|()
throws|throws
name|IOException
block|{
comment|// return a copy so caller can't modify our state
name|List
argument_list|<
name|RecoveredContainerState
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|RecoveredContainerState
argument_list|>
argument_list|(
name|containerStates
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RecoveredContainerState
name|rcs
range|:
name|containerStates
operator|.
name|values
argument_list|()
control|)
block|{
name|RecoveredContainerState
name|rcsCopy
init|=
operator|new
name|RecoveredContainerState
argument_list|()
decl_stmt|;
name|rcsCopy
operator|.
name|status
operator|=
name|rcs
operator|.
name|status
expr_stmt|;
name|rcsCopy
operator|.
name|exitCode
operator|=
name|rcs
operator|.
name|exitCode
expr_stmt|;
name|rcsCopy
operator|.
name|killed
operator|=
name|rcs
operator|.
name|killed
expr_stmt|;
name|rcsCopy
operator|.
name|diagnostics
operator|=
name|rcs
operator|.
name|diagnostics
expr_stmt|;
name|rcsCopy
operator|.
name|startRequest
operator|=
name|rcs
operator|.
name|startRequest
expr_stmt|;
name|rcsCopy
operator|.
name|capability
operator|=
name|rcs
operator|.
name|capability
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|rcsCopy
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|storeContainer (ContainerId containerId, StartContainerRequest startRequest)
specifier|public
specifier|synchronized
name|void
name|storeContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|StartContainerRequest
name|startRequest
parameter_list|)
throws|throws
name|IOException
block|{
name|RecoveredContainerState
name|rcs
init|=
operator|new
name|RecoveredContainerState
argument_list|()
decl_stmt|;
name|rcs
operator|.
name|startRequest
operator|=
name|startRequest
expr_stmt|;
name|containerStates
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|rcs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeContainerDiagnostics (ContainerId containerId, StringBuilder diagnostics)
specifier|public
specifier|synchronized
name|void
name|storeContainerDiagnostics
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|StringBuilder
name|diagnostics
parameter_list|)
throws|throws
name|IOException
block|{
name|RecoveredContainerState
name|rcs
init|=
name|getRecoveredContainerState
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|rcs
operator|.
name|diagnostics
operator|=
name|diagnostics
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeContainerLaunched (ContainerId containerId)
specifier|public
specifier|synchronized
name|void
name|storeContainerLaunched
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|IOException
block|{
name|RecoveredContainerState
name|rcs
init|=
name|getRecoveredContainerState
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rcs
operator|.
name|exitCode
operator|!=
name|ContainerExitStatus
operator|.
name|INVALID
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Container already completed"
argument_list|)
throw|;
block|}
name|rcs
operator|.
name|status
operator|=
name|RecoveredContainerStatus
operator|.
name|LAUNCHED
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeContainerResourceChanged ( ContainerId containerId, Resource capability)
specifier|public
specifier|synchronized
name|void
name|storeContainerResourceChanged
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Resource
name|capability
parameter_list|)
throws|throws
name|IOException
block|{
name|RecoveredContainerState
name|rcs
init|=
name|getRecoveredContainerState
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|rcs
operator|.
name|capability
operator|=
name|capability
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeContainerKilled (ContainerId containerId)
specifier|public
specifier|synchronized
name|void
name|storeContainerKilled
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|IOException
block|{
name|RecoveredContainerState
name|rcs
init|=
name|getRecoveredContainerState
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|rcs
operator|.
name|killed
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeContainerCompleted (ContainerId containerId, int exitCode)
specifier|public
specifier|synchronized
name|void
name|storeContainerCompleted
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|int
name|exitCode
parameter_list|)
throws|throws
name|IOException
block|{
name|RecoveredContainerState
name|rcs
init|=
name|getRecoveredContainerState
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|rcs
operator|.
name|status
operator|=
name|RecoveredContainerStatus
operator|.
name|COMPLETED
expr_stmt|;
name|rcs
operator|.
name|exitCode
operator|=
name|exitCode
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeContainer (ContainerId containerId)
specifier|public
specifier|synchronized
name|void
name|removeContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|IOException
block|{
name|containerStates
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
DECL|method|getRecoveredContainerState ( ContainerId containerId)
specifier|private
name|RecoveredContainerState
name|getRecoveredContainerState
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|IOException
block|{
name|RecoveredContainerState
name|rcs
init|=
name|containerStates
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rcs
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No start request for "
operator|+
name|containerId
argument_list|)
throw|;
block|}
return|return
name|rcs
return|;
block|}
DECL|method|loadTrackerState (TrackerState ts)
specifier|private
name|LocalResourceTrackerState
name|loadTrackerState
parameter_list|(
name|TrackerState
name|ts
parameter_list|)
block|{
name|LocalResourceTrackerState
name|result
init|=
operator|new
name|LocalResourceTrackerState
argument_list|()
decl_stmt|;
name|result
operator|.
name|localizedResources
operator|.
name|addAll
argument_list|(
name|ts
operator|.
name|localizedResources
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Path
argument_list|,
name|LocalResourceProto
argument_list|>
name|entry
range|:
name|ts
operator|.
name|inProgressMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|result
operator|.
name|inProgressResources
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getTrackerState (TrackerKey key)
specifier|private
name|TrackerState
name|getTrackerState
parameter_list|(
name|TrackerKey
name|key
parameter_list|)
block|{
name|TrackerState
name|ts
init|=
name|trackerStates
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|ts
operator|==
literal|null
condition|)
block|{
name|ts
operator|=
operator|new
name|TrackerState
argument_list|()
expr_stmt|;
name|trackerStates
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
return|return
name|ts
return|;
block|}
annotation|@
name|Override
DECL|method|loadLocalizationState ()
specifier|public
specifier|synchronized
name|RecoveredLocalizationState
name|loadLocalizationState
parameter_list|()
block|{
name|RecoveredLocalizationState
name|result
init|=
operator|new
name|RecoveredLocalizationState
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TrackerKey
argument_list|,
name|TrackerState
argument_list|>
name|e
range|:
name|trackerStates
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TrackerKey
name|tk
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|TrackerState
name|ts
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// check what kind of tracker state we have and recover appropriately
comment|// public trackers have user == null
comment|// private trackers have a valid user but appId == null
comment|// app-specific trackers have a valid user and valid appId
if|if
condition|(
name|tk
operator|.
name|user
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|publicTrackerState
operator|=
name|loadTrackerState
argument_list|(
name|ts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RecoveredUserResources
name|rur
init|=
name|result
operator|.
name|userResources
operator|.
name|get
argument_list|(
name|tk
operator|.
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|rur
operator|==
literal|null
condition|)
block|{
name|rur
operator|=
operator|new
name|RecoveredUserResources
argument_list|()
expr_stmt|;
name|result
operator|.
name|userResources
operator|.
name|put
argument_list|(
name|tk
operator|.
name|user
argument_list|,
name|rur
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tk
operator|.
name|appId
operator|==
literal|null
condition|)
block|{
name|rur
operator|.
name|privateTrackerState
operator|=
name|loadTrackerState
argument_list|(
name|ts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rur
operator|.
name|appTrackerStates
operator|.
name|put
argument_list|(
name|tk
operator|.
name|appId
argument_list|,
name|loadTrackerState
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|startResourceLocalization (String user, ApplicationId appId, LocalResourceProto proto, Path localPath)
specifier|public
specifier|synchronized
name|void
name|startResourceLocalization
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|LocalResourceProto
name|proto
parameter_list|,
name|Path
name|localPath
parameter_list|)
block|{
name|TrackerState
name|ts
init|=
name|getTrackerState
argument_list|(
operator|new
name|TrackerKey
argument_list|(
name|user
argument_list|,
name|appId
argument_list|)
argument_list|)
decl_stmt|;
name|ts
operator|.
name|inProgressMap
operator|.
name|put
argument_list|(
name|localPath
argument_list|,
name|proto
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finishResourceLocalization (String user, ApplicationId appId, LocalizedResourceProto proto)
specifier|public
specifier|synchronized
name|void
name|finishResourceLocalization
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|LocalizedResourceProto
name|proto
parameter_list|)
block|{
name|TrackerState
name|ts
init|=
name|getTrackerState
argument_list|(
operator|new
name|TrackerKey
argument_list|(
name|user
argument_list|,
name|appId
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|localPath
init|=
operator|new
name|Path
argument_list|(
name|proto
operator|.
name|getLocalPath
argument_list|()
argument_list|)
decl_stmt|;
name|ts
operator|.
name|inProgressMap
operator|.
name|remove
argument_list|(
name|localPath
argument_list|)
expr_stmt|;
name|ts
operator|.
name|localizedResources
operator|.
name|put
argument_list|(
name|localPath
argument_list|,
name|proto
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeLocalizedResource (String user, ApplicationId appId, Path localPath)
specifier|public
specifier|synchronized
name|void
name|removeLocalizedResource
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|Path
name|localPath
parameter_list|)
block|{
name|TrackerState
name|ts
init|=
name|trackerStates
operator|.
name|get
argument_list|(
operator|new
name|TrackerKey
argument_list|(
name|user
argument_list|,
name|appId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ts
operator|!=
literal|null
condition|)
block|{
name|ts
operator|.
name|inProgressMap
operator|.
name|remove
argument_list|(
name|localPath
argument_list|)
expr_stmt|;
name|ts
operator|.
name|localizedResources
operator|.
name|remove
argument_list|(
name|localPath
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|loadDeletionServiceState ()
specifier|public
specifier|synchronized
name|RecoveredDeletionServiceState
name|loadDeletionServiceState
parameter_list|()
throws|throws
name|IOException
block|{
name|RecoveredDeletionServiceState
name|result
init|=
operator|new
name|RecoveredDeletionServiceState
argument_list|()
decl_stmt|;
name|result
operator|.
name|tasks
operator|=
operator|new
name|ArrayList
argument_list|<
name|DeletionServiceDeleteTaskProto
argument_list|>
argument_list|(
name|deleteTasks
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|storeDeletionTask (int taskId, DeletionServiceDeleteTaskProto taskProto)
specifier|public
specifier|synchronized
name|void
name|storeDeletionTask
parameter_list|(
name|int
name|taskId
parameter_list|,
name|DeletionServiceDeleteTaskProto
name|taskProto
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteTasks
operator|.
name|put
argument_list|(
name|taskId
argument_list|,
name|taskProto
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeDeletionTask (int taskId)
specifier|public
specifier|synchronized
name|void
name|removeDeletionTask
parameter_list|(
name|int
name|taskId
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteTasks
operator|.
name|remove
argument_list|(
name|taskId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|loadNMTokensState ()
specifier|public
specifier|synchronized
name|RecoveredNMTokensState
name|loadNMTokensState
parameter_list|()
throws|throws
name|IOException
block|{
comment|// return a copy so caller can't modify our state
name|RecoveredNMTokensState
name|result
init|=
operator|new
name|RecoveredNMTokensState
argument_list|()
decl_stmt|;
name|result
operator|.
name|currentMasterKey
operator|=
name|nmTokenState
operator|.
name|currentMasterKey
expr_stmt|;
name|result
operator|.
name|previousMasterKey
operator|=
name|nmTokenState
operator|.
name|previousMasterKey
expr_stmt|;
name|result
operator|.
name|applicationMasterKeys
operator|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|MasterKey
argument_list|>
argument_list|(
name|nmTokenState
operator|.
name|applicationMasterKeys
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|storeNMTokenCurrentMasterKey (MasterKey key)
specifier|public
specifier|synchronized
name|void
name|storeNMTokenCurrentMasterKey
parameter_list|(
name|MasterKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|MasterKeyPBImpl
name|keypb
init|=
operator|(
name|MasterKeyPBImpl
operator|)
name|key
decl_stmt|;
name|nmTokenState
operator|.
name|currentMasterKey
operator|=
operator|new
name|MasterKeyPBImpl
argument_list|(
name|keypb
operator|.
name|getProto
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeNMTokenPreviousMasterKey (MasterKey key)
specifier|public
specifier|synchronized
name|void
name|storeNMTokenPreviousMasterKey
parameter_list|(
name|MasterKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|MasterKeyPBImpl
name|keypb
init|=
operator|(
name|MasterKeyPBImpl
operator|)
name|key
decl_stmt|;
name|nmTokenState
operator|.
name|previousMasterKey
operator|=
operator|new
name|MasterKeyPBImpl
argument_list|(
name|keypb
operator|.
name|getProto
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeNMTokenApplicationMasterKey ( ApplicationAttemptId attempt, MasterKey key)
specifier|public
specifier|synchronized
name|void
name|storeNMTokenApplicationMasterKey
parameter_list|(
name|ApplicationAttemptId
name|attempt
parameter_list|,
name|MasterKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|MasterKeyPBImpl
name|keypb
init|=
operator|(
name|MasterKeyPBImpl
operator|)
name|key
decl_stmt|;
name|nmTokenState
operator|.
name|applicationMasterKeys
operator|.
name|put
argument_list|(
name|attempt
argument_list|,
operator|new
name|MasterKeyPBImpl
argument_list|(
name|keypb
operator|.
name|getProto
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeNMTokenApplicationMasterKey ( ApplicationAttemptId attempt)
specifier|public
specifier|synchronized
name|void
name|removeNMTokenApplicationMasterKey
parameter_list|(
name|ApplicationAttemptId
name|attempt
parameter_list|)
throws|throws
name|IOException
block|{
name|nmTokenState
operator|.
name|applicationMasterKeys
operator|.
name|remove
argument_list|(
name|attempt
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|loadContainerTokensState ()
specifier|public
specifier|synchronized
name|RecoveredContainerTokensState
name|loadContainerTokensState
parameter_list|()
throws|throws
name|IOException
block|{
comment|// return a copy so caller can't modify our state
name|RecoveredContainerTokensState
name|result
init|=
operator|new
name|RecoveredContainerTokensState
argument_list|()
decl_stmt|;
name|result
operator|.
name|currentMasterKey
operator|=
name|containerTokenState
operator|.
name|currentMasterKey
expr_stmt|;
name|result
operator|.
name|previousMasterKey
operator|=
name|containerTokenState
operator|.
name|previousMasterKey
expr_stmt|;
name|result
operator|.
name|activeTokens
operator|=
operator|new
name|HashMap
argument_list|<
name|ContainerId
argument_list|,
name|Long
argument_list|>
argument_list|(
name|containerTokenState
operator|.
name|activeTokens
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|storeContainerTokenCurrentMasterKey (MasterKey key)
specifier|public
specifier|synchronized
name|void
name|storeContainerTokenCurrentMasterKey
parameter_list|(
name|MasterKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|MasterKeyPBImpl
name|keypb
init|=
operator|(
name|MasterKeyPBImpl
operator|)
name|key
decl_stmt|;
name|containerTokenState
operator|.
name|currentMasterKey
operator|=
operator|new
name|MasterKeyPBImpl
argument_list|(
name|keypb
operator|.
name|getProto
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeContainerTokenPreviousMasterKey (MasterKey key)
specifier|public
specifier|synchronized
name|void
name|storeContainerTokenPreviousMasterKey
parameter_list|(
name|MasterKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|MasterKeyPBImpl
name|keypb
init|=
operator|(
name|MasterKeyPBImpl
operator|)
name|key
decl_stmt|;
name|containerTokenState
operator|.
name|previousMasterKey
operator|=
operator|new
name|MasterKeyPBImpl
argument_list|(
name|keypb
operator|.
name|getProto
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeContainerToken (ContainerId containerId, Long expirationTime)
specifier|public
specifier|synchronized
name|void
name|storeContainerToken
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Long
name|expirationTime
parameter_list|)
throws|throws
name|IOException
block|{
name|containerTokenState
operator|.
name|activeTokens
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|expirationTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeContainerToken (ContainerId containerId)
specifier|public
specifier|synchronized
name|void
name|removeContainerToken
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|IOException
block|{
name|containerTokenState
operator|.
name|activeTokens
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|loadLogDeleterState ()
specifier|public
specifier|synchronized
name|RecoveredLogDeleterState
name|loadLogDeleterState
parameter_list|()
throws|throws
name|IOException
block|{
name|RecoveredLogDeleterState
name|state
init|=
operator|new
name|RecoveredLogDeleterState
argument_list|()
decl_stmt|;
name|state
operator|.
name|logDeleterMap
operator|=
operator|new
name|HashMap
argument_list|<
name|ApplicationId
argument_list|,
name|LogDeleterProto
argument_list|>
argument_list|(
name|logDeleterState
argument_list|)
expr_stmt|;
return|return
name|state
return|;
block|}
annotation|@
name|Override
DECL|method|storeLogDeleter (ApplicationId appId, LogDeleterProto proto)
specifier|public
specifier|synchronized
name|void
name|storeLogDeleter
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|LogDeleterProto
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
name|logDeleterState
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|proto
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeLogDeleter (ApplicationId appId)
specifier|public
specifier|synchronized
name|void
name|removeLogDeleter
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|IOException
block|{
name|logDeleterState
operator|.
name|remove
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
DECL|class|TrackerState
specifier|private
specifier|static
class|class
name|TrackerState
block|{
DECL|field|inProgressMap
name|Map
argument_list|<
name|Path
argument_list|,
name|LocalResourceProto
argument_list|>
name|inProgressMap
init|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|LocalResourceProto
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|localizedResources
name|Map
argument_list|<
name|Path
argument_list|,
name|LocalizedResourceProto
argument_list|>
name|localizedResources
init|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|LocalizedResourceProto
argument_list|>
argument_list|()
decl_stmt|;
block|}
DECL|class|TrackerKey
specifier|private
specifier|static
class|class
name|TrackerKey
block|{
DECL|field|user
name|String
name|user
decl_stmt|;
DECL|field|appId
name|ApplicationId
name|appId
decl_stmt|;
DECL|method|TrackerKey (String user, ApplicationId appId)
specifier|public
name|TrackerKey
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|appId
operator|=
name|appId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|appId
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|appId
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|user
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|user
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|TrackerKey
operator|)
condition|)
return|return
literal|false
return|;
name|TrackerKey
name|other
init|=
operator|(
name|TrackerKey
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|appId
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|appId
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|appId
operator|.
name|equals
argument_list|(
name|other
operator|.
name|appId
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|user
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|user
operator|.
name|equals
argument_list|(
name|other
operator|.
name|user
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

