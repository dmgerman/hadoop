begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.amrmproxy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|amrmproxy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|impl
operator|.
name|FSRegistryOperationsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NMToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|PreemptionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|UpdateContainerError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|UpdatedContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ApplicationMasterNotRegisteredException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidApplicationMasterRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|MockResourceManagerFacade
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|manager
operator|.
name|UniformBroadcastPolicyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|impl
operator|.
name|MemoryFederationStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterDeregisterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterRegisterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|utils
operator|.
name|FederationStateStoreFacade
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeManager
operator|.
name|NMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMMemoryStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Extends the TestAMRMProxyService and overrides methods in order to use the  * AMRMProxyService's pipeline test cases for testing the FederationInterceptor  * class. The tests for AMRMProxyService has been written cleverly so that it  * can be reused to validate different request intercepter chains.  */
end_comment

begin_class
DECL|class|TestFederationInterceptor
specifier|public
class|class
name|TestFederationInterceptor
extends|extends
name|BaseAMRMProxyTest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestFederationInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|HOME_SC_ID
specifier|public
specifier|static
specifier|final
name|String
name|HOME_SC_ID
init|=
literal|"SC-home"
decl_stmt|;
DECL|field|interceptor
specifier|private
name|TestableFederationInterceptor
name|interceptor
decl_stmt|;
DECL|field|stateStore
specifier|private
name|MemoryFederationStateStore
name|stateStore
decl_stmt|;
DECL|field|nmStateStore
specifier|private
name|NMStateStoreService
name|nmStateStore
decl_stmt|;
DECL|field|registry
specifier|private
name|RegistryOperations
name|registry
decl_stmt|;
DECL|field|nmContext
specifier|private
name|Context
name|nmContext
decl_stmt|;
DECL|field|testAppId
specifier|private
name|int
name|testAppId
decl_stmt|;
DECL|field|attemptId
specifier|private
name|ApplicationAttemptId
name|attemptId
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|interceptor
operator|=
operator|new
name|TestableFederationInterceptor
argument_list|()
expr_stmt|;
name|stateStore
operator|=
operator|new
name|MemoryFederationStateStore
argument_list|()
expr_stmt|;
name|stateStore
operator|.
name|init
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|FederationStateStoreFacade
operator|.
name|getInstance
argument_list|()
operator|.
name|reinitialize
argument_list|(
name|stateStore
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|nmStateStore
operator|=
operator|new
name|NMMemoryStateStoreService
argument_list|()
expr_stmt|;
name|nmStateStore
operator|.
name|init
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|nmStateStore
operator|.
name|start
argument_list|()
expr_stmt|;
name|registry
operator|=
operator|new
name|FSRegistryOperationsService
argument_list|()
expr_stmt|;
name|registry
operator|.
name|init
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|start
argument_list|()
expr_stmt|;
name|testAppId
operator|=
literal|1
expr_stmt|;
name|attemptId
operator|=
name|getApplicationAttemptId
argument_list|(
name|testAppId
argument_list|)
expr_stmt|;
name|nmContext
operator|=
operator|new
name|NMContext
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|nmStateStore
argument_list|,
literal|false
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|interceptor
operator|.
name|init
argument_list|(
operator|new
name|AMRMProxyApplicationContextImpl
argument_list|(
name|nmContext
argument_list|,
name|getConf
argument_list|()
argument_list|,
name|attemptId
argument_list|,
literal|"test-user"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|registry
argument_list|)
argument_list|)
expr_stmt|;
name|interceptor
operator|.
name|cleanupRegistry
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|interceptor
operator|.
name|cleanupRegistry
argument_list|()
expr_stmt|;
name|interceptor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|registry
operator|.
name|stop
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|protected
name|YarnConfiguration
name|createConfiguration
parameter_list|()
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|AMRM_PROXY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|FEDERATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|mockPassThroughInterceptorClass
init|=
name|PassThroughRequestInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// Create a request intercepter pipeline for testing. The last one in the
comment|// chain is the federation intercepter that calls the mock resource manager.
comment|// The others in the chain will simply forward it to the next one in the
comment|// chain
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|AMRM_PROXY_INTERCEPTOR_CLASS_PIPELINE
argument_list|,
name|mockPassThroughInterceptorClass
operator|+
literal|","
operator|+
name|mockPassThroughInterceptorClass
operator|+
literal|","
operator|+
name|TestableFederationInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|FEDERATION_POLICY_MANAGER
argument_list|,
name|UniformBroadcastPolicyManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CLUSTER_ID
argument_list|,
name|HOME_SC_ID
argument_list|)
expr_stmt|;
comment|// Disable StateStoreFacade cache
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|FEDERATION_CACHE_TIME_TO_LIVE_SECS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|registerSubCluster (SubClusterId subClusterId)
specifier|private
name|void
name|registerSubCluster
parameter_list|(
name|SubClusterId
name|subClusterId
parameter_list|)
throws|throws
name|YarnException
block|{
name|stateStore
operator|.
name|registerSubCluster
argument_list|(
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|SubClusterInfo
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
literal|"1.2.3.4:1"
argument_list|,
literal|"1.2.3.4:2"
argument_list|,
literal|"1.2.3.4:3"
argument_list|,
literal|"1.2.3.4:4"
argument_list|,
name|SubClusterState
operator|.
name|SC_RUNNING
argument_list|,
literal|0
argument_list|,
literal|"capacity"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|deRegisterSubCluster (SubClusterId subClusterId)
specifier|private
name|void
name|deRegisterSubCluster
parameter_list|(
name|SubClusterId
name|subClusterId
parameter_list|)
throws|throws
name|YarnException
block|{
name|stateStore
operator|.
name|deregisterSubCluster
argument_list|(
name|SubClusterDeregisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|SubClusterState
operator|.
name|SC_UNREGISTERED
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getContainersAndAssert (int numberOfResourceRequests, int numberOfAllocationExcepted)
specifier|private
name|List
argument_list|<
name|Container
argument_list|>
name|getContainersAndAssert
parameter_list|(
name|int
name|numberOfResourceRequests
parameter_list|,
name|int
name|numberOfAllocationExcepted
parameter_list|)
throws|throws
name|Exception
block|{
name|AllocateRequest
name|allocateRequest
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|AllocateRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|allocateRequest
operator|.
name|setResponseId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|(
name|numberOfResourceRequests
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|askList
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|(
name|numberOfResourceRequests
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|id
init|=
literal|0
init|;
name|id
operator|<
name|numberOfResourceRequests
condition|;
name|id
operator|++
control|)
block|{
name|askList
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|"test-node-"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|,
literal|6000
argument_list|,
literal|2
argument_list|,
name|id
operator|%
literal|5
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|allocateRequest
operator|.
name|setAskList
argument_list|(
name|askList
argument_list|)
expr_stmt|;
name|AllocateResponse
name|allocateResponse
init|=
name|interceptor
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"allocate() returned null response"
argument_list|,
name|allocateResponse
argument_list|)
expr_stmt|;
name|containers
operator|.
name|addAll
argument_list|(
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of allocated containers in the original request: "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Send max 10 heart beats to receive all the containers. If not, we will
comment|// fail the test
name|int
name|numHeartbeat
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|containers
operator|.
name|size
argument_list|()
operator|<
name|numberOfAllocationExcepted
operator|&&
name|numHeartbeat
operator|++
operator|<
literal|10
condition|)
block|{
name|allocateResponse
operator|=
name|interceptor
operator|.
name|allocate
argument_list|(
name|Records
operator|.
name|newRecord
argument_list|(
name|AllocateRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"allocate() returned null response"
argument_list|,
name|allocateResponse
argument_list|)
expr_stmt|;
name|containers
operator|.
name|addAll
argument_list|(
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of allocated containers in this request: "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Total number of allocated containers: "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|containers
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numberOfAllocationExcepted
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|containers
return|;
block|}
DECL|method|releaseContainersAndAssert (List<Container> containers)
specifier|private
name|void
name|releaseContainersAndAssert
parameter_list|(
name|List
argument_list|<
name|Container
argument_list|>
name|containers
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containers
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|AllocateRequest
name|allocateRequest
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|AllocateRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|allocateRequest
operator|.
name|setResponseId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|relList
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|(
name|containers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Container
name|container
range|:
name|containers
control|)
block|{
name|relList
operator|.
name|add
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|allocateRequest
operator|.
name|setReleaseList
argument_list|(
name|relList
argument_list|)
expr_stmt|;
name|AllocateResponse
name|allocateResponse
init|=
name|interceptor
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|allocateResponse
argument_list|)
expr_stmt|;
comment|// The release request will be split and handled by the corresponding UAM.
comment|// The release containers returned by the mock resource managers will be
comment|// aggregated and returned back to us and we can check if total request size
comment|// and returned size are the same
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containersForReleasedContainerIds
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|newlyFinished
init|=
name|getCompletedContainerIds
argument_list|(
name|allocateResponse
operator|.
name|getCompletedContainersStatuses
argument_list|()
argument_list|)
decl_stmt|;
name|containersForReleasedContainerIds
operator|.
name|addAll
argument_list|(
name|newlyFinished
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of containers received in the original request: "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|newlyFinished
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Send max 10 heart beats to receive all the containers. If not, we will
comment|// fail the test
name|int
name|numHeartbeat
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|containersForReleasedContainerIds
operator|.
name|size
argument_list|()
operator|<
name|relList
operator|.
name|size
argument_list|()
operator|&&
name|numHeartbeat
operator|++
operator|<
literal|10
condition|)
block|{
name|allocateResponse
operator|=
name|interceptor
operator|.
name|allocate
argument_list|(
name|Records
operator|.
name|newRecord
argument_list|(
name|AllocateRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|allocateResponse
argument_list|)
expr_stmt|;
name|newlyFinished
operator|=
name|getCompletedContainerIds
argument_list|(
name|allocateResponse
operator|.
name|getCompletedContainersStatuses
argument_list|()
argument_list|)
expr_stmt|;
name|containersForReleasedContainerIds
operator|.
name|addAll
argument_list|(
name|newlyFinished
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of containers received in this request: "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|newlyFinished
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Total number of containers received: "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|containersForReleasedContainerIds
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|relList
operator|.
name|size
argument_list|()
argument_list|,
name|containersForReleasedContainerIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleSubClusters ()
specifier|public
name|void
name|testMultipleSubClusters
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Register the application
name|RegisterApplicationMasterRequest
name|registerReq
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|RegisterApplicationMasterRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|registerReq
operator|.
name|setHost
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|testAppId
argument_list|)
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setRpcPort
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setTrackingUrl
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|RegisterApplicationMasterResponse
name|registerResponse
init|=
name|interceptor
operator|.
name|registerApplicationMaster
argument_list|(
name|registerReq
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|registerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|interceptor
operator|.
name|getUnmanagedAMPoolSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Allocate the first batch of containers, with sc1 and sc2 active
name|registerSubCluster
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC-1"
argument_list|)
argument_list|)
expr_stmt|;
name|registerSubCluster
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC-2"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|numberOfContainers
init|=
literal|3
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|getContainersAndAssert
argument_list|(
name|numberOfContainers
argument_list|,
name|numberOfContainers
operator|*
literal|2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|interceptor
operator|.
name|getUnmanagedAMPoolSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Allocate the second batch of containers, with sc1 and sc3 active
name|deRegisterSubCluster
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC-2"
argument_list|)
argument_list|)
expr_stmt|;
name|registerSubCluster
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC-3"
argument_list|)
argument_list|)
expr_stmt|;
name|numberOfContainers
operator|=
literal|1
expr_stmt|;
name|containers
operator|.
name|addAll
argument_list|(
name|getContainersAndAssert
argument_list|(
name|numberOfContainers
argument_list|,
name|numberOfContainers
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|interceptor
operator|.
name|getUnmanagedAMPoolSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Allocate the third batch of containers with only in home sub-cluster
comment|// active
name|deRegisterSubCluster
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC-1"
argument_list|)
argument_list|)
expr_stmt|;
name|deRegisterSubCluster
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC-3"
argument_list|)
argument_list|)
expr_stmt|;
name|registerSubCluster
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
name|HOME_SC_ID
argument_list|)
argument_list|)
expr_stmt|;
name|numberOfContainers
operator|=
literal|2
expr_stmt|;
name|containers
operator|.
name|addAll
argument_list|(
name|getContainersAndAssert
argument_list|(
name|numberOfContainers
argument_list|,
name|numberOfContainers
operator|*
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|interceptor
operator|.
name|getUnmanagedAMPoolSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Release all containers
name|releaseContainersAndAssert
argument_list|(
name|containers
argument_list|)
expr_stmt|;
comment|// Finish the application
name|FinishApplicationMasterRequest
name|finishReq
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|FinishApplicationMasterRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|finishReq
operator|.
name|setDiagnostics
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|finishReq
operator|.
name|setTrackingUrl
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|finishReq
operator|.
name|setFinalApplicationStatus
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|FinishApplicationMasterResponse
name|finshResponse
init|=
name|interceptor
operator|.
name|finishApplicationMaster
argument_list|(
name|finishReq
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|finshResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|finshResponse
operator|.
name|getIsUnregistered
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test re-register when RM fails over.    */
annotation|@
name|Test
DECL|method|testReregister ()
specifier|public
name|void
name|testReregister
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Register the application
name|RegisterApplicationMasterRequest
name|registerReq
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|RegisterApplicationMasterRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|registerReq
operator|.
name|setHost
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|testAppId
argument_list|)
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setRpcPort
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setTrackingUrl
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|RegisterApplicationMasterResponse
name|registerResponse
init|=
name|interceptor
operator|.
name|registerApplicationMaster
argument_list|(
name|registerReq
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|registerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|interceptor
operator|.
name|getUnmanagedAMPoolSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Allocate the first batch of containers
name|registerSubCluster
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC-1"
argument_list|)
argument_list|)
expr_stmt|;
name|registerSubCluster
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
name|HOME_SC_ID
argument_list|)
argument_list|)
expr_stmt|;
name|interceptor
operator|.
name|setShouldReRegisterNext
argument_list|()
expr_stmt|;
name|int
name|numberOfContainers
init|=
literal|3
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|getContainersAndAssert
argument_list|(
name|numberOfContainers
argument_list|,
name|numberOfContainers
operator|*
literal|2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|interceptor
operator|.
name|getUnmanagedAMPoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|interceptor
operator|.
name|setShouldReRegisterNext
argument_list|()
expr_stmt|;
comment|// Release all containers
name|releaseContainersAndAssert
argument_list|(
name|containers
argument_list|)
expr_stmt|;
name|interceptor
operator|.
name|setShouldReRegisterNext
argument_list|()
expr_stmt|;
comment|// Finish the application
name|FinishApplicationMasterRequest
name|finishReq
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|FinishApplicationMasterRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|finishReq
operator|.
name|setDiagnostics
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|finishReq
operator|.
name|setTrackingUrl
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|finishReq
operator|.
name|setFinalApplicationStatus
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|FinishApplicationMasterResponse
name|finshResponse
init|=
name|interceptor
operator|.
name|finishApplicationMaster
argument_list|(
name|finishReq
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|finshResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|finshResponse
operator|.
name|getIsUnregistered
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test concurrent register threads. This is possible because the timeout    * between AM and AMRMProxy is shorter than the timeout + failOver between    * FederationInterceptor (AMRMProxy) and RM. When first call is blocked due to    * RM failover and AM timeout, it will call us resulting in a second register    * thread.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testConcurrentRegister ()
specifier|public
name|void
name|testConcurrentRegister
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|ExecutorService
name|threadpool
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
decl_stmt|;
name|ExecutorCompletionService
argument_list|<
name|RegisterApplicationMasterResponse
argument_list|>
name|compSvc
init|=
operator|new
name|ExecutorCompletionService
argument_list|<>
argument_list|(
name|threadpool
argument_list|)
decl_stmt|;
name|Object
name|syncObj
init|=
name|MockResourceManagerFacade
operator|.
name|getSyncObj
argument_list|()
decl_stmt|;
comment|// Two register threads
synchronized|synchronized
init|(
name|syncObj
init|)
block|{
comment|// Make sure first thread will block within RM, before the second thread
comment|// starts
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting first register thread"
argument_list|)
expr_stmt|;
name|compSvc
operator|.
name|submit
argument_list|(
operator|new
name|ConcurrentRegisterAMCallable
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Test main starts waiting for the first thread to block"
argument_list|)
expr_stmt|;
name|syncObj
operator|.
name|wait
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Test main wait finished"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Test main wait interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// The second thread will get already registered exception from RM.
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting second register thread"
argument_list|)
expr_stmt|;
name|compSvc
operator|.
name|submit
argument_list|(
operator|new
name|ConcurrentRegisterAMCallable
argument_list|()
argument_list|)
expr_stmt|;
comment|// Notify the first register thread to return
name|LOG
operator|.
name|info
argument_list|(
literal|"Let first blocked register thread move on"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|syncObj
init|)
block|{
name|syncObj
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
comment|// Both thread should return without exception
name|RegisterApplicationMasterResponse
name|response
init|=
name|compSvc
operator|.
name|take
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|response
operator|=
name|compSvc
operator|.
name|take
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|threadpool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * A callable that calls registerAM to RM with blocking.    */
DECL|class|ConcurrentRegisterAMCallable
specifier|public
class|class
name|ConcurrentRegisterAMCallable
implements|implements
name|Callable
argument_list|<
name|RegisterApplicationMasterResponse
argument_list|>
block|{
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|RegisterApplicationMasterResponse
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|RegisterApplicationMasterResponse
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Use port number 1001 to let mock RM block in the register call
name|response
operator|=
name|interceptor
operator|.
name|registerApplicationMaster
argument_list|(
name|RegisterApplicationMasterRequest
operator|.
name|newInstance
argument_list|(
literal|null
argument_list|,
literal|1001
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Register thread exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|response
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRecoverWithAMRMProxyHA ()
specifier|public
name|void
name|testRecoverWithAMRMProxyHA
parameter_list|()
throws|throws
name|Exception
block|{
name|testRecover
argument_list|(
name|registry
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRecoverWithoutAMRMProxyHA ()
specifier|public
name|void
name|testRecoverWithoutAMRMProxyHA
parameter_list|()
throws|throws
name|Exception
block|{
name|testRecover
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testRecover (RegistryOperations registryObj)
specifier|public
name|void
name|testRecover
parameter_list|(
name|RegistryOperations
name|registryObj
parameter_list|)
throws|throws
name|Exception
block|{
name|ApplicationUserInfo
name|userInfo
init|=
name|getApplicationUserInfo
argument_list|(
name|testAppId
argument_list|)
decl_stmt|;
name|userInfo
operator|.
name|getUser
argument_list|()
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|interceptor
operator|=
operator|new
name|TestableFederationInterceptor
argument_list|()
expr_stmt|;
name|interceptor
operator|.
name|init
argument_list|(
operator|new
name|AMRMProxyApplicationContextImpl
argument_list|(
name|nmContext
argument_list|,
name|getConf
argument_list|()
argument_list|,
name|attemptId
argument_list|,
literal|"test-user"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|registryObj
argument_list|)
argument_list|)
expr_stmt|;
name|interceptor
operator|.
name|cleanupRegistry
argument_list|()
expr_stmt|;
comment|// Register the application
name|RegisterApplicationMasterRequest
name|registerReq
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|RegisterApplicationMasterRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|registerReq
operator|.
name|setHost
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|testAppId
argument_list|)
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setRpcPort
argument_list|(
name|testAppId
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setTrackingUrl
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|RegisterApplicationMasterResponse
name|registerResponse
init|=
name|interceptor
operator|.
name|registerApplicationMaster
argument_list|(
name|registerReq
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|registerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|interceptor
operator|.
name|getUnmanagedAMPoolSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Allocate one batch of containers
name|registerSubCluster
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC-1"
argument_list|)
argument_list|)
expr_stmt|;
name|registerSubCluster
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
name|HOME_SC_ID
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|numberOfContainers
init|=
literal|3
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|getContainersAndAssert
argument_list|(
name|numberOfContainers
argument_list|,
name|numberOfContainers
operator|*
literal|2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|interceptor
operator|.
name|getUnmanagedAMPoolSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Prepare for Federation Interceptor restart and recover
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|recoveredDataMap
init|=
name|recoverDataMapForAppAttempt
argument_list|(
name|nmStateStore
argument_list|,
name|attemptId
argument_list|)
decl_stmt|;
name|String
name|scEntry
init|=
name|FederationInterceptor
operator|.
name|NMSS_SECONDARY_SC_PREFIX
operator|+
literal|"SC-1"
decl_stmt|;
if|if
condition|(
name|registryObj
operator|==
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|recoveredDataMap
operator|.
name|containsKey
argument_list|(
name|scEntry
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// When AMRMPRoxy HA is enabled, NMSS should not have the UAM token,
comment|// it should be in Registry
name|Assert
operator|.
name|assertFalse
argument_list|(
name|recoveredDataMap
operator|.
name|containsKey
argument_list|(
name|scEntry
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Preserve the mock RM instances
name|MockResourceManagerFacade
name|homeRM
init|=
name|interceptor
operator|.
name|getHomeRM
argument_list|()
decl_stmt|;
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|MockResourceManagerFacade
argument_list|>
name|secondaries
init|=
name|interceptor
operator|.
name|getSecondaryRMs
argument_list|()
decl_stmt|;
comment|// Create a new intercepter instance and recover
name|interceptor
operator|=
operator|new
name|TestableFederationInterceptor
argument_list|(
name|homeRM
argument_list|,
name|secondaries
argument_list|)
expr_stmt|;
name|interceptor
operator|.
name|init
argument_list|(
operator|new
name|AMRMProxyApplicationContextImpl
argument_list|(
name|nmContext
argument_list|,
name|getConf
argument_list|()
argument_list|,
name|attemptId
argument_list|,
literal|"test-user"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|registryObj
argument_list|)
argument_list|)
expr_stmt|;
name|interceptor
operator|.
name|recover
argument_list|(
name|recoveredDataMap
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|interceptor
operator|.
name|getUnmanagedAMPoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|interceptor
operator|.
name|getLastHomeResponseId
argument_list|()
argument_list|)
expr_stmt|;
comment|// The first allocate call expects a fail-over exception and re-register
name|int
name|responseId
init|=
literal|10
decl_stmt|;
name|AllocateRequest
name|allocateRequest
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|AllocateRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|allocateRequest
operator|.
name|setResponseId
argument_list|(
name|responseId
argument_list|)
expr_stmt|;
try|try
block|{
name|interceptor
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expecting an ApplicationMasterNotRegisteredException  "
operator|+
literal|" after FederationInterceptor restarts and recovers"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ApplicationMasterNotRegisteredException
name|e
parameter_list|)
block|{         }
name|interceptor
operator|.
name|registerApplicationMaster
argument_list|(
name|registerReq
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|responseId
argument_list|,
name|interceptor
operator|.
name|getLastHomeResponseId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Release all containers
name|releaseContainersAndAssert
argument_list|(
name|containers
argument_list|)
expr_stmt|;
comment|// Finish the application
name|FinishApplicationMasterRequest
name|finishReq
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|FinishApplicationMasterRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|finishReq
operator|.
name|setDiagnostics
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|finishReq
operator|.
name|setTrackingUrl
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|finishReq
operator|.
name|setFinalApplicationStatus
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|FinishApplicationMasterResponse
name|finshResponse
init|=
name|interceptor
operator|.
name|finishApplicationMaster
argument_list|(
name|finishReq
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|finshResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|finshResponse
operator|.
name|getIsUnregistered
argument_list|()
argument_list|)
expr_stmt|;
comment|// After the application succeeds, the registry/NMSS entry should be
comment|// cleaned up
if|if
condition|(
name|registryObj
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|interceptor
operator|.
name|getRegistryClient
argument_list|()
operator|.
name|getAllApplications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|recoveredDataMap
operator|=
name|recoverDataMapForAppAttempt
argument_list|(
name|nmStateStore
argument_list|,
name|attemptId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|recoveredDataMap
operator|.
name|containsKey
argument_list|(
name|scEntry
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRequestInterceptorChainCreation ()
specifier|public
name|void
name|testRequestInterceptorChainCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|RequestInterceptor
name|root
init|=
name|super
operator|.
name|getAMRMProxyService
argument_list|()
operator|.
name|createRequestInterceptorChain
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|index
condition|)
block|{
case|case
literal|0
case|:
case|case
literal|1
case|:
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PassThroughRequestInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|root
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TestableFederationInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|root
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|root
operator|=
name|root
operator|.
name|getNextInterceptor
argument_list|()
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The number of interceptors in chain does not match"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|3
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Between AM and AMRMProxy, FederationInterceptor modifies the RM behavior,    * so that when AM registers more than once, it returns the same register    * success response instead of throwing    * {@link InvalidApplicationMasterRequestException}    *    * We did this because FederationInterceptor can receive concurrent register    * requests from AM because of timeout between AM and AMRMProxy. This can    * possible since the timeout between FederationInterceptor and RM longer    * because of performFailover + timeout.    */
annotation|@
name|Test
DECL|method|testTwoIdenticalRegisterRequest ()
specifier|public
name|void
name|testTwoIdenticalRegisterRequest
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Register the application twice
name|RegisterApplicationMasterRequest
name|registerReq
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|RegisterApplicationMasterRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|registerReq
operator|.
name|setHost
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|testAppId
argument_list|)
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setRpcPort
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setTrackingUrl
argument_list|(
literal|""
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|RegisterApplicationMasterResponse
name|registerResponse
init|=
name|interceptor
operator|.
name|registerApplicationMaster
argument_list|(
name|registerReq
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|registerResponse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTwoDifferentRegisterRequest ()
specifier|public
name|void
name|testTwoDifferentRegisterRequest
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Register the application first time
name|RegisterApplicationMasterRequest
name|registerReq
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|RegisterApplicationMasterRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|registerReq
operator|.
name|setHost
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|testAppId
argument_list|)
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setRpcPort
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setTrackingUrl
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|RegisterApplicationMasterResponse
name|registerResponse
init|=
name|interceptor
operator|.
name|registerApplicationMaster
argument_list|(
name|registerReq
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|registerResponse
argument_list|)
expr_stmt|;
comment|// Register the application second time with a different request obj
name|registerReq
operator|=
name|Records
operator|.
name|newRecord
argument_list|(
name|RegisterApplicationMasterRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setHost
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|testAppId
argument_list|)
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setRpcPort
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setTrackingUrl
argument_list|(
literal|"different"
argument_list|)
expr_stmt|;
try|try
block|{
name|registerResponse
operator|=
name|interceptor
operator|.
name|registerApplicationMaster
argument_list|(
name|registerReq
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should throw if a different request obj is used"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
DECL|method|testAllocateResponse ()
specifier|public
name|void
name|testAllocateResponse
parameter_list|()
throws|throws
name|Exception
block|{
name|interceptor
operator|.
name|registerApplicationMaster
argument_list|(
name|RegisterApplicationMasterRequest
operator|.
name|newInstance
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|AllocateRequest
name|allocateRequest
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|AllocateRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|List
argument_list|<
name|AllocateResponse
argument_list|>
argument_list|>
name|asyncResponseSink
init|=
name|interceptor
operator|.
name|getAsyncResponseSink
argument_list|()
decl_stmt|;
name|ContainerId
name|cid
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ContainerStatus
name|cStatus
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ContainerStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|cStatus
operator|.
name|setContainerId
argument_list|(
name|cid
argument_list|)
expr_stmt|;
name|Container
name|container
init|=
name|Container
operator|.
name|newInstance
argument_list|(
name|cid
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AllocateResponse
name|response
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|AllocateResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|setAllocatedContainers
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|container
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCompletedContainersStatuses
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|cStatus
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setUpdatedNodes
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|Records
operator|.
name|newRecord
argument_list|(
name|NodeReport
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setNMTokens
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|Records
operator|.
name|newRecord
argument_list|(
name|NMToken
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setUpdatedContainers
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|Records
operator|.
name|newRecord
argument_list|(
name|UpdatedContainer
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setUpdateErrors
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|Records
operator|.
name|newRecord
argument_list|(
name|UpdateContainerError
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setAvailableResources
argument_list|(
name|Records
operator|.
name|newRecord
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setPreemptionMessage
argument_list|(
name|Records
operator|.
name|newRecord
argument_list|(
name|PreemptionMessage
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AllocateResponse
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|asyncResponseSink
operator|.
name|put
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC-1"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|response
operator|=
name|interceptor
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
operator|.
name|getAvailableResources
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getCompletedContainersStatuses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getUpdatedNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
operator|.
name|getPreemptionMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getNMTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getUpdatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getUpdateErrors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSecondAttempt ()
specifier|public
name|void
name|testSecondAttempt
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationUserInfo
name|userInfo
init|=
name|getApplicationUserInfo
argument_list|(
name|testAppId
argument_list|)
decl_stmt|;
name|userInfo
operator|.
name|getUser
argument_list|()
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Register the application
name|RegisterApplicationMasterRequest
name|registerReq
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|RegisterApplicationMasterRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|registerReq
operator|.
name|setHost
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|testAppId
argument_list|)
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setRpcPort
argument_list|(
name|testAppId
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setTrackingUrl
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|RegisterApplicationMasterResponse
name|registerResponse
init|=
name|interceptor
operator|.
name|registerApplicationMaster
argument_list|(
name|registerReq
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|registerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|interceptor
operator|.
name|getUnmanagedAMPoolSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Allocate one batch of containers
name|registerSubCluster
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC-1"
argument_list|)
argument_list|)
expr_stmt|;
name|registerSubCluster
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
name|HOME_SC_ID
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|numberOfContainers
init|=
literal|3
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|getContainersAndAssert
argument_list|(
name|numberOfContainers
argument_list|,
name|numberOfContainers
operator|*
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|Container
name|c
range|:
name|containers
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|c
operator|.
name|getId
argument_list|()
operator|+
literal|" ha"
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|interceptor
operator|.
name|getUnmanagedAMPoolSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Preserve the mock RM instances for secondaries
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|MockResourceManagerFacade
argument_list|>
name|secondaries
init|=
name|interceptor
operator|.
name|getSecondaryRMs
argument_list|()
decl_stmt|;
comment|// Increase the attemptId and create a new intercepter instance for it
name|attemptId
operator|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|attemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|attemptId
operator|.
name|getAttemptId
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|interceptor
operator|=
operator|new
name|TestableFederationInterceptor
argument_list|(
literal|null
argument_list|,
name|secondaries
argument_list|)
expr_stmt|;
name|interceptor
operator|.
name|init
argument_list|(
operator|new
name|AMRMProxyApplicationContextImpl
argument_list|(
name|nmContext
argument_list|,
name|getConf
argument_list|()
argument_list|,
name|attemptId
argument_list|,
literal|"test-user"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|registry
argument_list|)
argument_list|)
expr_stmt|;
name|registerResponse
operator|=
name|interceptor
operator|.
name|registerApplicationMaster
argument_list|(
name|registerReq
argument_list|)
expr_stmt|;
comment|// Should re-attach secondaries and get the three running containers
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|interceptor
operator|.
name|getUnmanagedAMPoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numberOfContainers
argument_list|,
name|registerResponse
operator|.
name|getContainersFromPreviousAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Release all containers
name|releaseContainersAndAssert
argument_list|(
name|registerResponse
operator|.
name|getContainersFromPreviousAttempts
argument_list|()
argument_list|)
expr_stmt|;
comment|// Finish the application
name|FinishApplicationMasterRequest
name|finishReq
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|FinishApplicationMasterRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|finishReq
operator|.
name|setDiagnostics
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|finishReq
operator|.
name|setTrackingUrl
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|finishReq
operator|.
name|setFinalApplicationStatus
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|FinishApplicationMasterResponse
name|finshResponse
init|=
name|interceptor
operator|.
name|finishApplicationMaster
argument_list|(
name|finishReq
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|finshResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|finshResponse
operator|.
name|getIsUnregistered
argument_list|()
argument_list|)
expr_stmt|;
comment|// After the application succeeds, the registry entry should be deleted
if|if
condition|(
name|interceptor
operator|.
name|getRegistryClient
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|interceptor
operator|.
name|getRegistryClient
argument_list|()
operator|.
name|getAllApplications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

