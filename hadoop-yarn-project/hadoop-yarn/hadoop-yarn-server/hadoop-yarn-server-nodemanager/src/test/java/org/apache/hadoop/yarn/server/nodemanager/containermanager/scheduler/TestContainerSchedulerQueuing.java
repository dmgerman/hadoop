begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnsupportedFileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ContainerUpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ContainerUpdateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerStatusesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StopContainersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerSubState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|NMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerQueuingLimit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerStateTransitionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DefaultContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DeletionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|BaseContainerManagerTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|ContainerManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|ResourceHandlerChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|ContainersMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|ContainersMonitorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|executor
operator|.
name|ContainerStartContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_comment
comment|/**  * Tests to verify that the {@link ContainerScheduler} is able to queue and  * make room for containers.  */
end_comment

begin_class
DECL|class|TestContainerSchedulerQueuing
specifier|public
class|class
name|TestContainerSchedulerQueuing
extends|extends
name|BaseContainerManagerTest
block|{
DECL|method|TestContainerSchedulerQueuing ()
specifier|public
name|TestContainerSchedulerQueuing
parameter_list|()
throws|throws
name|UnsupportedFileSystemException
block|{
name|super
argument_list|()
expr_stmt|;
block|}
static|static
block|{
name|LOG
operator|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestContainerSchedulerQueuing
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|class|Listener
specifier|private
specifier|static
class|class
name|Listener
implements|implements
name|ContainerStateTransitionListener
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|ContainerId
argument_list|,
DECL|field|states
name|List
argument_list|<
name|ContainerState
argument_list|>
argument_list|>
name|states
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|events
specifier|private
specifier|final
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|List
argument_list|<
name|ContainerEventType
argument_list|>
argument_list|>
name|events
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|init (Context context)
specifier|public
name|void
name|init
parameter_list|(
name|Context
name|context
parameter_list|)
block|{}
annotation|@
name|Override
DECL|method|preTransition (ContainerImpl op, org.apache.hadoop.yarn.server.nodemanager.containermanager.container. ContainerState beforeState, ContainerEvent eventToBeProcessed)
specifier|public
name|void
name|preTransition
parameter_list|(
name|ContainerImpl
name|op
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
name|beforeState
parameter_list|,
name|ContainerEvent
name|eventToBeProcessed
parameter_list|)
block|{
if|if
condition|(
operator|!
name|states
operator|.
name|containsKey
argument_list|(
name|op
operator|.
name|getContainerId
argument_list|()
argument_list|)
condition|)
block|{
name|states
operator|.
name|put
argument_list|(
name|op
operator|.
name|getContainerId
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|states
operator|.
name|get
argument_list|(
name|op
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|beforeState
argument_list|)
expr_stmt|;
name|events
operator|.
name|put
argument_list|(
name|op
operator|.
name|getContainerId
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|postTransition (ContainerImpl op, org.apache.hadoop.yarn.server.nodemanager.containermanager.container. ContainerState beforeState, org.apache.hadoop.yarn.server.nodemanager.containermanager.container. ContainerState afterState, ContainerEvent processedEvent)
specifier|public
name|void
name|postTransition
parameter_list|(
name|ContainerImpl
name|op
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
name|beforeState
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
name|afterState
parameter_list|,
name|ContainerEvent
name|processedEvent
parameter_list|)
block|{
name|states
operator|.
name|get
argument_list|(
name|op
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|afterState
argument_list|)
expr_stmt|;
name|events
operator|.
name|get
argument_list|(
name|op
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|processedEvent
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|delayContainers
specifier|private
name|boolean
name|delayContainers
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
DECL|method|createContainerManager ( DeletionService delSrvc)
specifier|protected
name|ContainerManagerImpl
name|createContainerManager
parameter_list|(
name|DeletionService
name|delSrvc
parameter_list|)
block|{
return|return
operator|new
name|ContainerManagerImpl
argument_list|(
name|context
argument_list|,
name|exec
argument_list|,
name|delSrvc
argument_list|,
name|nodeStatusUpdater
argument_list|,
name|metrics
argument_list|,
name|dirsHandler
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|UserGroupInformation
name|getRemoteUgi
parameter_list|()
throws|throws
name|YarnException
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ugi
operator|.
name|addTokenIdentifier
argument_list|(
operator|new
name|NMTokenIdentifier
argument_list|(
name|appAttemptId
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|context
operator|.
name|getNMTokenSecretManager
argument_list|()
operator|.
name|getCurrentKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ugi
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ContainersMonitor
name|createContainersMonitor
parameter_list|(
name|ContainerExecutor
name|exec
parameter_list|)
block|{
return|return
operator|new
name|ContainersMonitorImpl
argument_list|(
name|exec
argument_list|,
name|dispatcher
argument_list|,
name|this
operator|.
name|context
argument_list|)
block|{
comment|// Define resources available for containers to be executed.
annotation|@
name|Override
specifier|public
name|long
name|getPmemAllocatedForContainers
parameter_list|()
block|{
return|return
literal|2048
operator|*
literal|1024
operator|*
literal|1024L
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getVmemAllocatedForContainers
parameter_list|()
block|{
name|float
name|pmemRatio
init|=
name|getConfig
argument_list|()
operator|.
name|getFloat
argument_list|(
name|YarnConfiguration
operator|.
name|NM_VMEM_PMEM_RATIO
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_VMEM_PMEM_RATIO
argument_list|)
decl_stmt|;
return|return
call|(
name|long
call|)
argument_list|(
name|pmemRatio
operator|*
name|getPmemAllocatedForContainers
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getVCoresAllocatedForContainers
parameter_list|()
block|{
return|return
literal|4
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|createContainerExecutor ()
specifier|protected
name|ContainerExecutor
name|createContainerExecutor
parameter_list|()
block|{
name|DefaultContainerExecutor
name|exec
init|=
operator|new
name|DefaultContainerExecutor
argument_list|()
block|{
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|oversleepMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|launchContainer
parameter_list|(
name|ContainerStartContext
name|ctx
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConfigurationException
block|{
name|oversleepMap
operator|.
name|put
argument_list|(
name|ctx
operator|.
name|getContainer
argument_list|()
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|delayContainers
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
if|if
condition|(
name|oversleepMap
operator|.
name|get
argument_list|(
name|ctx
operator|.
name|getContainer
argument_list|()
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|==
literal|true
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Nothing..
block|}
block|}
return|return
name|super
operator|.
name|launchContainer
argument_list|(
name|ctx
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|pauseContainer
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
comment|// To mimic pausing we force the container to be in the PAUSED state
comment|// a little longer by oversleeping.
name|oversleepMap
operator|.
name|put
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Container was paused"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|resumeContainer
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Container was resumed"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|exec
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|spy
argument_list|(
name|exec
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_OPPORTUNISTIC_CONTAINERS_MAX_QUEUE_LENGTH
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
block|}
comment|/**    * Starting one GUARANTEED and one OPPORTUNISTIC container.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testStartMultipleContainers ()
specifier|public
name|void
name|testStartMultipleContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForContainerState
argument_list|(
name|containerManager
argument_list|,
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForContainerState
argument_list|(
name|containerManager
argument_list|,
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// Ensure all containers are running.
name|List
argument_list|<
name|ContainerId
argument_list|>
name|statList
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|statList
operator|.
name|add
argument_list|(
name|createContainerId
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|GetContainerStatusesRequest
name|statRequest
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|statList
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|statRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerStatus
name|status
range|:
name|containerStatuses
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|status
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Submit both a GUARANTEED and an OPPORTUNISTIC container, each of which    * requires more resources than available at the node, and make sure they    * are both queued.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testQueueMultipleContainers ()
specifier|public
name|void
name|testQueueMultipleContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|3072
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|3072
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|// Ensure both containers are queued.
name|List
argument_list|<
name|ContainerId
argument_list|>
name|statList
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|statList
operator|.
name|add
argument_list|(
name|createContainerId
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|GetContainerStatusesRequest
name|statRequest
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|statList
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|statRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerStatus
name|status
range|:
name|containerStatuses
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerSubState
operator|.
name|SCHEDULED
argument_list|,
name|status
operator|.
name|getContainerSubState
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ContainerScheduler
name|containerScheduler
init|=
name|containerManager
operator|.
name|getContainerScheduler
argument_list|()
decl_stmt|;
comment|// Ensure both containers are properly queued.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|containerScheduler
operator|.
name|getNumQueuedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containerScheduler
operator|.
name|getNumQueuedGuaranteedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containerScheduler
operator|.
name|getNumQueuedOpportunisticContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Starts one OPPORTUNISTIC container that takes up the whole node's    * resources, and submit two more that will be queued.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testStartAndQueueMultipleContainers ()
specifier|public
name|void
name|testStartAndQueueMultipleContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|2
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|// Ensure first container is running and others are queued.
name|List
argument_list|<
name|ContainerId
argument_list|>
name|statList
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|statList
operator|.
name|add
argument_list|(
name|createContainerId
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|GetContainerStatusesRequest
name|statRequest
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|statRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerStatus
name|status
range|:
name|containerStatuses
control|)
block|{
if|if
condition|(
name|status
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerSubState
operator|.
name|RUNNING
argument_list|,
name|status
operator|.
name|getContainerSubState
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerSubState
operator|.
name|SCHEDULED
argument_list|,
name|status
operator|.
name|getContainerSubState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|ContainerScheduler
name|containerScheduler
init|=
name|containerManager
operator|.
name|getContainerScheduler
argument_list|()
decl_stmt|;
comment|// Ensure two containers are properly queued.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|containerScheduler
operator|.
name|getNumQueuedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|containerScheduler
operator|.
name|getNumQueuedGuaranteedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|containerScheduler
operator|.
name|getNumQueuedOpportunisticContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Starts one GUARANTEED container that takes us the whole node's resources.    * and submit more OPPORTUNISTIC containers than the opportunistic container    * queue can hold. OPPORTUNISTIC containers that cannot be queue should be    * killed.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testStartOpportunistcsWhenOppQueueIsFull ()
specifier|public
name|void
name|testStartOpportunistcsWhenOppQueueIsFull
parameter_list|()
throws|throws
name|Exception
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|maxOppQueueLength
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_OPPORTUNISTIC_CONTAINERS_MAX_QUEUE_LENGTH
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_OPPORTUNISTIC_CONTAINERS_MAX_QUEUE_LENGTH
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|maxOppQueueLength
operator|+
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
name|i
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForNMContainerState
argument_list|(
name|containerManager
argument_list|,
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForNMContainerState
argument_list|(
name|containerManager
argument_list|,
name|createContainerId
argument_list|(
name|maxOppQueueLength
operator|+
literal|1
argument_list|)
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|// Get container statuses. Container 0 should be running and container
comment|// 1 to maxOppQueueLength should be queued and the last container should
comment|// be killed
name|List
argument_list|<
name|ContainerId
argument_list|>
name|statList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxOppQueueLength
operator|+
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|statList
operator|.
name|add
argument_list|(
name|createContainerId
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|GetContainerStatusesRequest
name|statRequest
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|statList
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|statRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerStatus
name|status
range|:
name|containerStatuses
control|)
block|{
if|if
condition|(
name|status
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerSubState
operator|.
name|RUNNING
argument_list|,
name|status
operator|.
name|getContainerSubState
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|createContainerId
argument_list|(
name|maxOppQueueLength
operator|+
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|status
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Opportunistic container queue is full"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerSubState
operator|.
name|SCHEDULED
argument_list|,
name|status
operator|.
name|getContainerSubState
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nStatus : ["
operator|+
name|status
operator|+
literal|"]\n"
argument_list|)
expr_stmt|;
block|}
name|ContainerScheduler
name|containerScheduler
init|=
name|containerManager
operator|.
name|getContainerScheduler
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|maxOppQueueLength
argument_list|,
name|containerScheduler
operator|.
name|getNumQueuedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|containerScheduler
operator|.
name|getNumQueuedGuaranteedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|maxOppQueueLength
argument_list|,
name|containerScheduler
operator|.
name|getNumQueuedOpportunisticContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Submit two OPPORTUNISTIC and one GUARANTEED containers. The resources    * requests by each container as such that only one can run in parallel.    * Thus, the OPPORTUNISTIC container that started running, will be    * killed for the GUARANTEED container to start.    * Once the GUARANTEED container finishes its execution, the remaining    * OPPORTUNISTIC container will be executed.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testKillOpportunisticForGuaranteedContainer ()
specifier|public
name|void
name|testKillOpportunisticForGuaranteedContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|2
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForNMContainerState
argument_list|(
name|containerManager
argument_list|,
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|// Get container statuses. Container 0 should be killed, container 1
comment|// should be queued and container 2 should be running.
name|List
argument_list|<
name|ContainerId
argument_list|>
name|statList
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|statList
operator|.
name|add
argument_list|(
name|createContainerId
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|GetContainerStatusesRequest
name|statRequest
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|statList
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|statRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerStatus
name|status
range|:
name|containerStatuses
control|)
block|{
if|if
condition|(
name|status
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|status
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Container Killed to make room for Guaranteed Container"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerSubState
operator|.
name|SCHEDULED
argument_list|,
name|status
operator|.
name|getContainerSubState
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|createContainerId
argument_list|(
literal|2
argument_list|)
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerSubState
operator|.
name|RUNNING
argument_list|,
name|status
operator|.
name|getContainerSubState
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nStatus : ["
operator|+
name|status
operator|+
literal|"]\n"
argument_list|)
expr_stmt|;
block|}
comment|// Make sure the remaining OPPORTUNISTIC container starts its execution.
name|BaseContainerManagerTest
operator|.
name|waitForNMContainerState
argument_list|(
name|containerManager
argument_list|,
name|createContainerId
argument_list|(
literal|2
argument_list|)
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|statRequest
operator|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerStatus
name|contStatus1
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|statRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|contStatus1
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Submit two OPPORTUNISTIC and one GUARANTEED containers. The resources    * requests by each container as such that only one can run in parallel.    * Thus, the OPPORTUNISTIC container that started running, will be    * paused for the GUARANTEED container to start.    * Once the GUARANTEED container finishes its execution, the remaining    * OPPORTUNISTIC container will be executed.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testPauseOpportunisticForGuaranteedContainer ()
specifier|public
name|void
name|testPauseOpportunisticForGuaranteedContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|containerManager
operator|.
name|getContainerScheduler
argument_list|()
operator|.
name|setUsePauseEventForPreemption
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Listener
name|listener
init|=
operator|new
name|Listener
argument_list|()
decl_stmt|;
operator|(
operator|(
name|NodeManager
operator|.
name|DefaultContainerStateListener
operator|)
name|containerManager
operator|.
name|getContext
argument_list|()
operator|.
name|getContainerStateTransitionListener
argument_list|()
operator|)
operator|.
name|addListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForNMContainerState
argument_list|(
name|containerManager
argument_list|,
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|list
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|allRequests
operator|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForNMContainerState
argument_list|(
name|containerManager
argument_list|,
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
literal|40
argument_list|)
expr_stmt|;
comment|// Get container statuses. Container 0 should be paused, container 1
comment|// should be running.
name|List
argument_list|<
name|ContainerId
argument_list|>
name|statList
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|statList
operator|.
name|add
argument_list|(
name|createContainerId
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|GetContainerStatusesRequest
name|statRequest
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|statList
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|statRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerStatus
name|status
range|:
name|containerStatuses
control|)
block|{
if|if
condition|(
name|status
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|status
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Container Paused to make room for Guaranteed Container"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|status
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nStatus : ["
operator|+
name|status
operator|+
literal|"]\n"
argument_list|)
expr_stmt|;
block|}
comment|// Make sure that the GUARANTEED container completes
name|BaseContainerManagerTest
operator|.
name|waitForNMContainerState
argument_list|(
name|containerManager
argument_list|,
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
literal|40
argument_list|)
expr_stmt|;
comment|// Make sure that the PAUSED opportunistic container resumes and
comment|// starts running
name|BaseContainerManagerTest
operator|.
name|waitForNMContainerState
argument_list|(
name|containerManager
argument_list|,
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
argument_list|>
name|containerStates
init|=
name|listener
operator|.
name|states
operator|.
name|get
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
operator|.
name|NEW
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
operator|.
name|SCHEDULED
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
operator|.
name|PAUSING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
operator|.
name|PAUSED
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
operator|.
name|RESUMING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
operator|.
name|EXITED_WITH_SUCCESS
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
operator|.
name|DONE
argument_list|)
argument_list|,
name|containerStates
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerEventType
argument_list|>
name|containerEventTypes
init|=
name|listener
operator|.
name|events
operator|.
name|get
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ContainerEventType
operator|.
name|INIT_CONTAINER
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_LAUNCHED
argument_list|,
name|ContainerEventType
operator|.
name|PAUSE_CONTAINER
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_PAUSED
argument_list|,
name|ContainerEventType
operator|.
name|RESUME_CONTAINER
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_RESUMED
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_SUCCESS
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_RESOURCES_CLEANEDUP
argument_list|)
argument_list|,
name|containerEventTypes
argument_list|)
expr_stmt|;
block|}
comment|/**    * 1. Submit a long running GUARANTEED container to hog all NM resources.    * 2. Submit 6 OPPORTUNISTIC containers, all of which will be queued.    * 3. Update the Queue Limit to 2.    * 4. Ensure only 2 containers remain in the Queue, and 4 are de-Queued.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testQueueShedding ()
specifier|public
name|void
name|testQueueShedding
parameter_list|()
throws|throws
name|Exception
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|containerLaunchContext
operator|.
name|setCommands
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"sleep 100"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|list
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|2
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|3
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|4
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|5
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|6
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|allRequests
operator|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|ContainerScheduler
name|containerScheduler
init|=
name|containerManager
operator|.
name|getContainerScheduler
argument_list|()
decl_stmt|;
comment|// Ensure all containers are properly queued.
name|int
name|numTries
init|=
literal|30
decl_stmt|;
while|while
condition|(
operator|(
name|containerScheduler
operator|.
name|getNumQueuedContainers
argument_list|()
operator|<
literal|6
operator|)
operator|&&
operator|(
name|numTries
operator|--
operator|>
literal|0
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|containerScheduler
operator|.
name|getNumQueuedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerQueuingLimit
name|containerQueuingLimit
init|=
name|ContainerQueuingLimit
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|containerQueuingLimit
operator|.
name|setMaxQueueLength
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|containerScheduler
operator|.
name|updateQueuingLimit
argument_list|(
name|containerQueuingLimit
argument_list|)
expr_stmt|;
name|numTries
operator|=
literal|30
expr_stmt|;
while|while
condition|(
operator|(
name|containerScheduler
operator|.
name|getNumQueuedContainers
argument_list|()
operator|>
literal|2
operator|)
operator|&&
operator|(
name|numTries
operator|--
operator|>
literal|0
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|containerScheduler
operator|.
name|getNumQueuedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|statList
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|statList
operator|.
name|add
argument_list|(
name|createContainerId
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|GetContainerStatusesRequest
name|statRequest
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|statList
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|statRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
decl_stmt|;
name|int
name|deQueuedContainers
init|=
literal|0
decl_stmt|;
name|int
name|numQueuedOppContainers
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ContainerStatus
name|status
range|:
name|containerStatuses
control|)
block|{
if|if
condition|(
name|status
operator|.
name|getExecutionType
argument_list|()
operator|==
name|ExecutionType
operator|.
name|OPPORTUNISTIC
condition|)
block|{
if|if
condition|(
name|status
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Container De-queued to meet NM queuing limits"
argument_list|)
condition|)
block|{
name|deQueuedContainers
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|ContainerSubState
operator|.
name|SCHEDULED
operator|==
name|status
operator|.
name|getContainerSubState
argument_list|()
condition|)
block|{
name|numQueuedOppContainers
operator|++
expr_stmt|;
block|}
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|deQueuedContainers
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|numQueuedOppContainers
argument_list|)
expr_stmt|;
block|}
comment|/**    * 1. Submit a long running GUARANTEED container to hog all NM resources.    * 2. Submit 2 OPPORTUNISTIC containers, both of which will be queued.    * 3. Send Stop Container to one of the queued containers.    * 4. Ensure container is removed from the queue.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testContainerDeQueuedAfterAMKill ()
specifier|public
name|void
name|testContainerDeQueuedAfterAMKill
parameter_list|()
throws|throws
name|Exception
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|containerLaunchContext
operator|.
name|setCommands
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"sleep 100"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|list
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|2
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|allRequests
operator|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|ContainerScheduler
name|containerScheduler
init|=
name|containerManager
operator|.
name|getContainerScheduler
argument_list|()
decl_stmt|;
comment|// Ensure both containers are properly queued.
name|int
name|numTries
init|=
literal|30
decl_stmt|;
while|while
condition|(
operator|(
name|containerScheduler
operator|.
name|getNumQueuedContainers
argument_list|()
operator|<
literal|2
operator|)
operator|&&
operator|(
name|numTries
operator|--
operator|>
literal|0
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|containerScheduler
operator|.
name|getNumQueuedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|stopContainers
argument_list|(
name|StopContainersRequest
operator|.
name|newInstance
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|createContainerId
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|numTries
operator|=
literal|30
expr_stmt|;
while|while
condition|(
operator|(
name|containerScheduler
operator|.
name|getNumQueuedContainers
argument_list|()
operator|>
literal|1
operator|)
operator|&&
operator|(
name|numTries
operator|--
operator|>
literal|0
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containerScheduler
operator|.
name|getNumQueuedContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Submit three OPPORTUNISTIC containers that can run concurrently, and one    * GUARANTEED that needs to kill two of the OPPORTUNISTIC for it to run.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testKillMultipleOpportunisticContainers ()
specifier|public
name|void
name|testKillMultipleOpportunisticContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|2
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|list
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|3
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1500
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|allRequests
operator|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForNMContainerState
argument_list|(
name|containerManager
argument_list|,
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|ContainerState
operator|.
name|CONTAINER_CLEANEDUP_AFTER_KILL
argument_list|)
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|// Get container statuses. Container 0 should be killed, container 1
comment|// should be queued and container 2 should be running.
name|int
name|killedContainers
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|statList
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|statList
operator|.
name|add
argument_list|(
name|createContainerId
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|GetContainerStatusesRequest
name|statRequest
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|statList
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|statRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerStatus
name|status
range|:
name|containerStatuses
control|)
block|{
if|if
condition|(
name|status
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Container Killed to make room for Guaranteed Container"
argument_list|)
condition|)
block|{
name|killedContainers
operator|++
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nStatus : ["
operator|+
name|status
operator|+
literal|"]\n"
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|killedContainers
argument_list|)
expr_stmt|;
block|}
comment|/**    * Submit four OPPORTUNISTIC containers that can run concurrently, and then    * two GUARANTEED that needs to kill Exactly two of the OPPORTUNISTIC for    * it to run. Make sure only 2 are killed.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testKillOnlyRequiredOpportunisticContainers ()
specifier|public
name|void
name|testKillOnlyRequiredOpportunisticContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Fill NM with Opportunistic containers
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
name|i
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|list
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
comment|// Now ask for two Guaranteed containers
for|for
control|(
name|int
name|i
init|=
literal|4
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
name|i
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|allRequests
operator|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForNMContainerState
argument_list|(
name|containerManager
argument_list|,
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|// Get container statuses. Container 0 should be killed, container 1
comment|// should be queued and container 2 should be running.
name|int
name|killedContainers
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|statList
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|statList
operator|.
name|add
argument_list|(
name|createContainerId
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|GetContainerStatusesRequest
name|statRequest
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|statList
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|statRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerStatus
name|status
range|:
name|containerStatuses
control|)
block|{
if|if
condition|(
name|status
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Container Killed to make room for Guaranteed Container"
argument_list|)
condition|)
block|{
name|killedContainers
operator|++
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nStatus : ["
operator|+
name|status
operator|+
literal|"]\n"
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|killedContainers
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start running one GUARANTEED container and queue two OPPORTUNISTIC ones.    * Try killing one of the two queued containers.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testStopQueuedContainer ()
specifier|public
name|void
name|testStopQueuedContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|2
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// Assert there is initially one container running and two queued.
name|int
name|runningContainersNo
init|=
literal|0
decl_stmt|;
name|int
name|queuedContainersNo
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|statList
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|statList
operator|.
name|add
argument_list|(
name|createContainerId
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|GetContainerStatusesRequest
name|statRequest
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|statList
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|statRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerStatus
name|status
range|:
name|containerStatuses
control|)
block|{
if|if
condition|(
name|ContainerSubState
operator|.
name|RUNNING
operator|==
name|status
operator|.
name|getContainerSubState
argument_list|()
condition|)
block|{
name|runningContainersNo
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ContainerSubState
operator|.
name|SCHEDULED
operator|==
name|status
operator|.
name|getContainerSubState
argument_list|()
condition|)
block|{
name|queuedContainersNo
operator|++
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nStatus : ["
operator|+
name|status
operator|+
literal|"]\n"
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|runningContainersNo
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queuedContainersNo
argument_list|)
expr_stmt|;
comment|// Stop one of the two queued containers.
name|StopContainersRequest
name|stopRequest
init|=
name|StopContainersRequest
operator|.
name|newInstance
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|stopContainers
argument_list|(
name|stopRequest
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// Assert queued container got properly stopped.
name|statList
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|statList
operator|.
name|add
argument_list|(
name|createContainerId
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|statRequest
operator|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|statList
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|ContainerSubState
argument_list|,
name|ContainerStatus
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|containerStatuses
operator|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|statRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
expr_stmt|;
for|for
control|(
name|ContainerStatus
name|status
range|:
name|containerStatuses
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nStatus : ["
operator|+
name|status
operator|+
literal|"]\n"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|status
operator|.
name|getContainerSubState
argument_list|()
argument_list|,
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|ContainerSubState
operator|.
name|RUNNING
argument_list|)
operator|&&
name|map
operator|.
name|containsKey
argument_list|(
name|ContainerSubState
operator|.
name|SCHEDULED
argument_list|)
operator|&&
name|map
operator|.
name|containsKey
argument_list|(
name|ContainerSubState
operator|.
name|DONE
argument_list|)
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|ContainerSubState
operator|.
name|RUNNING
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|ContainerSubState
operator|.
name|DONE
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|createContainerId
argument_list|(
literal|2
argument_list|)
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|ContainerSubState
operator|.
name|SCHEDULED
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Starts one OPPORTUNISTIC container that takes up the whole node's    * resources, and submit one more that will be queued. Now promote the    * queued OPPORTUNISTIC container, which should kill the current running    * OPPORTUNISTIC container to make room for the promoted request.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testPromotionOfOpportunisticContainers ()
specifier|public
name|void
name|testPromotionOfOpportunisticContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|Listener
name|listener
init|=
operator|new
name|Listener
argument_list|()
decl_stmt|;
operator|(
operator|(
name|NodeManager
operator|.
name|DefaultContainerStateListener
operator|)
name|containerManager
operator|.
name|getContext
argument_list|()
operator|.
name|getContainerStateTransitionListener
argument_list|()
operator|)
operator|.
name|addListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|// Ensure first container is running and others are queued.
name|List
argument_list|<
name|ContainerId
argument_list|>
name|statList
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|statList
operator|.
name|add
argument_list|(
name|createContainerId
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|GetContainerStatusesRequest
name|statRequest
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|statRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerStatus
name|status
range|:
name|containerStatuses
control|)
block|{
if|if
condition|(
name|status
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerSubState
operator|.
name|RUNNING
argument_list|,
name|status
operator|.
name|getContainerSubState
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerSubState
operator|.
name|SCHEDULED
argument_list|,
name|status
operator|.
name|getContainerSubState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|ContainerScheduler
name|containerScheduler
init|=
name|containerManager
operator|.
name|getContainerScheduler
argument_list|()
decl_stmt|;
name|containerScheduler
operator|.
name|resourceHandlerChain
operator|=
name|mock
argument_list|(
name|ResourceHandlerChain
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Ensure two containers are properly queued.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containerScheduler
operator|.
name|getNumQueuedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|containerScheduler
operator|.
name|getNumQueuedGuaranteedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containerScheduler
operator|.
name|getNumQueuedOpportunisticContainers
argument_list|()
argument_list|)
expr_stmt|;
comment|// Promote Queued Opportunistic Container
name|Token
name|updateToken
init|=
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Token
argument_list|>
name|updateTokens
init|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|>
argument_list|()
decl_stmt|;
name|updateTokens
operator|.
name|add
argument_list|(
name|updateToken
argument_list|)
expr_stmt|;
name|ContainerUpdateRequest
name|updateRequest
init|=
name|ContainerUpdateRequest
operator|.
name|newInstance
argument_list|(
name|updateTokens
argument_list|)
decl_stmt|;
name|ContainerUpdateResponse
name|updateResponse
init|=
name|containerManager
operator|.
name|updateContainer
argument_list|(
name|updateRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|updateResponse
operator|.
name|getSuccessfullyUpdatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|updateResponse
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|waitForContainerState
argument_list|(
name|containerManager
argument_list|,
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|waitForContainerState
argument_list|(
name|containerManager
argument_list|,
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|containerStatuses
operator|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|statRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containerStatuses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ContainerStatus
name|status
range|:
name|containerStatuses
control|)
block|{
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|RUNNING
operator|==
name|status
operator|.
name|getState
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
name|status
operator|.
name|getExecutionType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Ensure no containers are queued.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|containerScheduler
operator|.
name|getNumQueuedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
argument_list|>
name|containerStates
init|=
name|listener
operator|.
name|states
operator|.
name|get
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
operator|.
name|NEW
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
operator|.
name|SCHEDULED
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
operator|.
name|SCHEDULED
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
operator|.
name|RUNNING
argument_list|)
argument_list|,
name|containerStates
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerEventType
argument_list|>
name|containerEventTypes
init|=
name|listener
operator|.
name|events
operator|.
name|get
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ContainerEventType
operator|.
name|INIT_CONTAINER
argument_list|,
name|ContainerEventType
operator|.
name|UPDATE_CONTAINER_TOKEN
argument_list|,
name|ContainerEventType
operator|.
name|CONTAINER_LAUNCHED
argument_list|)
argument_list|,
name|containerEventTypes
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|containerScheduler
operator|.
name|resourceHandlerChain
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|updateContainer
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerUpdateExecTypeGuaranteedToOpportunistic ()
specifier|public
name|void
name|testContainerUpdateExecTypeGuaranteedToOpportunistic
parameter_list|()
throws|throws
name|Exception
block|{
name|delayContainers
operator|=
literal|true
expr_stmt|;
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Construct the Container-id
name|ContainerId
name|cId
init|=
name|createContainerId
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|StartContainerRequest
name|scRequest
init|=
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|cId
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|scRequest
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
comment|// Make sure the container reaches RUNNING state
name|BaseContainerManagerTest
operator|.
name|waitForNMContainerState
argument_list|(
name|containerManager
argument_list|,
name|cId
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// Construct container resource increase request,
name|List
argument_list|<
name|Token
argument_list|>
name|updateTokens
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Token
name|containerToken
init|=
name|createContainerToken
argument_list|(
name|cId
argument_list|,
literal|1
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
decl_stmt|;
name|updateTokens
operator|.
name|add
argument_list|(
name|containerToken
argument_list|)
expr_stmt|;
name|ContainerUpdateRequest
name|updateRequest
init|=
name|ContainerUpdateRequest
operator|.
name|newInstance
argument_list|(
name|updateTokens
argument_list|)
decl_stmt|;
name|ContainerUpdateResponse
name|updateResponse
init|=
name|containerManager
operator|.
name|updateContainer
argument_list|(
name|updateRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|updateResponse
operator|.
name|getSuccessfullyUpdatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|updateResponse
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|GetContainerStatusesRequest
name|statRequest
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|cId
argument_list|)
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
try|try
block|{
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|statRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containerStatuses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerStatus
name|status
init|=
name|containerStatuses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|status
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|status
operator|.
name|getExecutionType
argument_list|()
operator|==
name|ExecutionType
operator|.
name|OPPORTUNISTIC
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|statRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containerStatuses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ContainerStatus
name|status
range|:
name|containerStatuses
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|status
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
name|status
operator|.
name|getExecutionType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

