begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.health
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|health
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|LocalDirsHandlerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|NodeHealthStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_comment
comment|/**  * Test class for {@link NodeHealthCheckerService}.  */
end_comment

begin_class
DECL|class|TestNodeHealthCheckerService
specifier|public
class|class
name|TestNodeHealthCheckerService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestNodeHealthCheckerService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
specifier|final
name|File
name|TEST_ROOT_DIR
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|TestNodeHealthCheckerService
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-localDir"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
DECL|field|NODE_HEALTH_CONFIG_FILE
specifier|private
specifier|static
specifier|final
name|File
name|NODE_HEALTH_CONFIG_FILE
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"modified-mapred-site.xml"
argument_list|)
decl_stmt|;
DECL|field|nodeHealthScriptFile
specifier|private
name|File
name|nodeHealthScriptFile
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
name|Shell
operator|.
name|appendScriptExtension
argument_list|(
literal|"failingscript"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|TEST_ROOT_DIR
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|TEST_ROOT_DIR
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeNodeHealthScriptFile ()
specifier|private
name|void
name|writeNodeHealthScriptFile
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
try|try
init|(
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|nodeHealthScriptFile
argument_list|)
argument_list|)
init|)
block|{
name|FileUtil
operator|.
name|chmod
argument_list|(
name|nodeHealthScriptFile
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
literal|"u+rwx"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getConfForNodeHealthScript (String scriptName)
specifier|private
name|Configuration
name|getConfForNodeHealthScript
parameter_list|(
name|String
name|scriptName
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_HEALTH_CHECK_SCRIPTS
argument_list|,
name|scriptName
argument_list|)
expr_stmt|;
name|String
name|timeoutConfig
init|=
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_HEALTH_CHECK_SCRIPT_TIMEOUT_MS_TEMPLATE
argument_list|,
name|scriptName
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|timeoutConfig
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|String
name|intervalConfig
init|=
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_HEALTH_CHECK_SCRIPT_INTERVAL_MS_TEMPLATE
argument_list|,
name|scriptName
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|intervalConfig
argument_list|,
literal|500L
argument_list|)
expr_stmt|;
name|String
name|pathConfig
init|=
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_HEALTH_CHECK_SCRIPT_PATH_TEMPLATE
argument_list|,
name|scriptName
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|pathConfig
argument_list|,
name|nodeHealthScriptFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|setHealthStatus (NodeHealthStatus healthStatus, boolean isHealthy, String healthReport, long lastHealthReportTime)
specifier|private
name|void
name|setHealthStatus
parameter_list|(
name|NodeHealthStatus
name|healthStatus
parameter_list|,
name|boolean
name|isHealthy
parameter_list|,
name|String
name|healthReport
parameter_list|,
name|long
name|lastHealthReportTime
parameter_list|)
block|{
name|healthStatus
operator|.
name|setHealthReport
argument_list|(
name|healthReport
argument_list|)
expr_stmt|;
name|healthStatus
operator|.
name|setIsNodeHealthy
argument_list|(
name|isHealthy
argument_list|)
expr_stmt|;
name|healthStatus
operator|.
name|setLastHealthReportTime
argument_list|(
name|lastHealthReportTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeHealthService ()
specifier|public
name|void
name|testNodeHealthService
parameter_list|()
throws|throws
name|Exception
block|{
name|RecordFactory
name|factory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|NodeHealthStatus
name|healthStatus
init|=
name|factory
operator|.
name|newRecordInstance
argument_list|(
name|NodeHealthStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|scriptName
init|=
literal|"test"
decl_stmt|;
name|Configuration
name|conf
init|=
name|getConfForNodeHealthScript
argument_list|(
name|scriptName
argument_list|)
decl_stmt|;
name|conf
operator|.
name|writeXml
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|NODE_HEALTH_CONFIG_FILE
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|NODE_HEALTH_CONFIG_FILE
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|writeNodeHealthScriptFile
argument_list|()
expr_stmt|;
name|LocalDirsHandlerService
name|dirsHandler
init|=
operator|new
name|LocalDirsHandlerService
argument_list|()
decl_stmt|;
name|NodeHealthScriptRunner
name|nodeHealthScriptRunner
init|=
name|NodeHealthScriptRunner
operator|.
name|newInstance
argument_list|(
name|scriptName
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeHealthScriptRunner
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Should have created NodeHealthScriptRunner instance"
argument_list|)
expr_stmt|;
block|}
name|nodeHealthScriptRunner
operator|=
name|spy
argument_list|(
name|nodeHealthScriptRunner
argument_list|)
expr_stmt|;
name|NodeHealthCheckerService
name|nodeHealthChecker
init|=
operator|new
name|NodeHealthCheckerService
argument_list|(
name|dirsHandler
argument_list|)
decl_stmt|;
name|nodeHealthChecker
operator|.
name|addHealthReporter
argument_list|(
name|nodeHealthScriptRunner
argument_list|)
expr_stmt|;
name|nodeHealthChecker
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|nodeHealthScriptRunner
argument_list|)
operator|.
name|isHealthy
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|""
argument_list|)
operator|.
name|when
argument_list|(
name|nodeHealthScriptRunner
argument_list|)
operator|.
name|getHealthReport
argument_list|()
expr_stmt|;
name|setHealthStatus
argument_list|(
name|healthStatus
argument_list|,
name|nodeHealthChecker
operator|.
name|isHealthy
argument_list|()
argument_list|,
name|nodeHealthChecker
operator|.
name|getHealthReport
argument_list|()
argument_list|,
name|nodeHealthChecker
operator|.
name|getLastHealthReportTime
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking initial healthy condition"
argument_list|)
expr_stmt|;
comment|// Check proper report conditions.
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Node health status reported unhealthy"
argument_list|,
name|healthStatus
operator|.
name|getIsNodeHealthy
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Node health status reported unhealthy"
argument_list|,
name|healthStatus
operator|.
name|getHealthReport
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeHealthChecker
operator|.
name|getHealthReport
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|when
argument_list|(
name|nodeHealthScriptRunner
argument_list|)
operator|.
name|isHealthy
argument_list|()
expr_stmt|;
comment|// update health status
name|setHealthStatus
argument_list|(
name|healthStatus
argument_list|,
name|nodeHealthChecker
operator|.
name|isHealthy
argument_list|()
argument_list|,
name|nodeHealthChecker
operator|.
name|getHealthReport
argument_list|()
argument_list|,
name|nodeHealthChecker
operator|.
name|getLastHealthReportTime
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking Healthy--->Unhealthy"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Node health status reported healthy"
argument_list|,
name|healthStatus
operator|.
name|getIsNodeHealthy
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Node health status reported healthy"
argument_list|,
name|healthStatus
operator|.
name|getHealthReport
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeHealthChecker
operator|.
name|getHealthReport
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|nodeHealthScriptRunner
argument_list|)
operator|.
name|isHealthy
argument_list|()
expr_stmt|;
name|setHealthStatus
argument_list|(
name|healthStatus
argument_list|,
name|nodeHealthChecker
operator|.
name|isHealthy
argument_list|()
argument_list|,
name|nodeHealthChecker
operator|.
name|getHealthReport
argument_list|()
argument_list|,
name|nodeHealthChecker
operator|.
name|getLastHealthReportTime
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking UnHealthy--->healthy"
argument_list|)
expr_stmt|;
comment|// Check proper report conditions.
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Node health status reported unhealthy"
argument_list|,
name|healthStatus
operator|.
name|getIsNodeHealthy
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Node health status reported unhealthy"
argument_list|,
name|healthStatus
operator|.
name|getHealthReport
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeHealthChecker
operator|.
name|getHealthReport
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Healthy to timeout transition.
name|doReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|when
argument_list|(
name|nodeHealthScriptRunner
argument_list|)
operator|.
name|isHealthy
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|NodeHealthScriptRunner
operator|.
name|NODE_HEALTH_SCRIPT_TIMED_OUT_MSG
argument_list|)
operator|.
name|when
argument_list|(
name|nodeHealthScriptRunner
argument_list|)
operator|.
name|getHealthReport
argument_list|()
expr_stmt|;
name|setHealthStatus
argument_list|(
name|healthStatus
argument_list|,
name|nodeHealthChecker
operator|.
name|isHealthy
argument_list|()
argument_list|,
name|nodeHealthChecker
operator|.
name|getHealthReport
argument_list|()
argument_list|,
name|nodeHealthChecker
operator|.
name|getLastHealthReportTime
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking Healthy--->timeout"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Node health status reported healthy even after timeout"
argument_list|,
name|healthStatus
operator|.
name|getIsNodeHealthy
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Node script time out message not propagated"
argument_list|,
name|healthStatus
operator|.
name|getHealthReport
argument_list|()
operator|.
name|equals
argument_list|(
name|Joiner
operator|.
name|on
argument_list|(
name|NodeHealthCheckerService
operator|.
name|SEPARATOR
argument_list|)
operator|.
name|skipNulls
argument_list|()
operator|.
name|join
argument_list|(
name|NodeHealthScriptRunner
operator|.
name|NODE_HEALTH_SCRIPT_TIMED_OUT_MSG
argument_list|,
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|nodeHealthChecker
operator|.
name|getDiskHandler
argument_list|()
operator|.
name|getDisksHealthReport
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|HealthReporterService
specifier|private
specifier|abstract
class|class
name|HealthReporterService
extends|extends
name|AbstractService
implements|implements
name|HealthReporter
block|{
DECL|method|HealthReporterService ()
name|HealthReporterService
parameter_list|()
block|{
name|super
argument_list|(
name|HealthReporterService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCustomHealthReporter ()
specifier|public
name|void
name|testCustomHealthReporter
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|healthReport
init|=
literal|"dummy health report"
decl_stmt|;
name|HealthReporterService
name|customHealthReporter
init|=
operator|new
name|HealthReporterService
argument_list|()
block|{
specifier|private
name|int
name|counter
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|isHealthy
parameter_list|()
block|{
return|return
name|counter
operator|++
operator|%
literal|2
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHealthReport
parameter_list|()
block|{
return|return
name|healthReport
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLastHealthReportTime
parameter_list|()
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
block|}
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|LocalDirsHandlerService
name|dirsHandler
init|=
operator|new
name|LocalDirsHandlerService
argument_list|()
decl_stmt|;
name|NodeHealthCheckerService
name|nodeHealthChecker
init|=
operator|new
name|NodeHealthCheckerService
argument_list|(
name|dirsHandler
argument_list|)
decl_stmt|;
name|nodeHealthChecker
operator|.
name|addHealthReporter
argument_list|(
name|customHealthReporter
argument_list|)
expr_stmt|;
name|nodeHealthChecker
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nodeHealthChecker
operator|.
name|isHealthy
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|nodeHealthChecker
operator|.
name|isHealthy
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|nodeHealthChecker
operator|.
name|getHealthReport
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|healthReport
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nodeHealthChecker
operator|.
name|getLastHealthReportTime
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExceptionReported ()
specifier|public
name|void
name|testExceptionReported
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|LocalDirsHandlerService
name|dirsHandler
init|=
operator|new
name|LocalDirsHandlerService
argument_list|()
decl_stmt|;
name|NodeHealthCheckerService
name|nodeHealthChecker
init|=
operator|new
name|NodeHealthCheckerService
argument_list|(
name|dirsHandler
argument_list|)
decl_stmt|;
name|nodeHealthChecker
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nodeHealthChecker
operator|.
name|isHealthy
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|String
name|message
init|=
literal|"An exception was thrown."
decl_stmt|;
name|Exception
name|exception
init|=
operator|new
name|Exception
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|nodeHealthChecker
operator|.
name|reportException
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nodeHealthChecker
operator|.
name|isHealthy
argument_list|()
argument_list|)
operator|.
name|isFalse
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|nodeHealthChecker
operator|.
name|getHealthReport
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

