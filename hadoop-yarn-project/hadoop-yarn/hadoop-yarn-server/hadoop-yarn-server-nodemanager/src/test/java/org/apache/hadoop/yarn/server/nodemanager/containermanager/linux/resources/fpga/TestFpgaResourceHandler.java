begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.resources.fpga
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|fpga
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ResourceMappings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|CGroupsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|ResourceHandlerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|fpga
operator|.
name|FpgaDiscoverer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|fpga
operator|.
name|IntelFpgaOpenclPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|CustomResourceTypesConfigurationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestFpgaResourceHandler
specifier|public
class|class
name|TestFpgaResourceHandler
block|{
DECL|field|mockContext
specifier|private
name|Context
name|mockContext
decl_stmt|;
DECL|field|fpgaResourceHandler
specifier|private
name|FpgaResourceHandlerImpl
name|fpgaResourceHandler
decl_stmt|;
DECL|field|configuration
specifier|private
name|Configuration
name|configuration
decl_stmt|;
DECL|field|mockCGroupsHandler
specifier|private
name|CGroupsHandler
name|mockCGroupsHandler
decl_stmt|;
DECL|field|mockPrivilegedExecutor
specifier|private
name|PrivilegedOperationExecutor
name|mockPrivilegedExecutor
decl_stmt|;
DECL|field|mockNMStateStore
specifier|private
name|NMStateStoreService
name|mockNMStateStore
decl_stmt|;
DECL|field|runningContainersMap
specifier|private
name|ConcurrentHashMap
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
name|runningContainersMap
decl_stmt|;
DECL|field|mockVendorPlugin
specifier|private
name|IntelFpgaOpenclPlugin
name|mockVendorPlugin
decl_stmt|;
DECL|field|vendorType
specifier|private
specifier|static
specifier|final
name|String
name|vendorType
init|=
literal|"IntelOpenCL"
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|CustomResourceTypesConfigurationProvider
operator|.
name|initResourceTypes
argument_list|(
name|ResourceInformation
operator|.
name|FPGA_URI
argument_list|)
expr_stmt|;
name|configuration
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|mockCGroupsHandler
operator|=
name|mock
argument_list|(
name|CGroupsHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|mockPrivilegedExecutor
operator|=
name|mock
argument_list|(
name|PrivilegedOperationExecutor
operator|.
name|class
argument_list|)
expr_stmt|;
name|mockNMStateStore
operator|=
name|mock
argument_list|(
name|NMStateStoreService
operator|.
name|class
argument_list|)
expr_stmt|;
name|mockContext
operator|=
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Assumed devices parsed from output
name|List
argument_list|<
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
argument_list|(
name|vendorType
argument_list|,
literal|247
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
argument_list|(
name|vendorType
argument_list|,
literal|247
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
argument_list|(
name|vendorType
argument_list|,
literal|247
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
argument_list|(
name|vendorType
argument_list|,
literal|247
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
argument_list|(
name|vendorType
argument_list|,
literal|247
argument_list|,
literal|4
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|mockVendorPlugin
operator|=
name|mockPlugin
argument_list|(
name|vendorType
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|FpgaDiscoverer
operator|.
name|getInstance
argument_list|()
operator|.
name|setConf
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getNMStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockNMStateStore
argument_list|)
expr_stmt|;
name|runningContainersMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|runningContainersMap
argument_list|)
expr_stmt|;
name|fpgaResourceHandler
operator|=
operator|new
name|FpgaResourceHandlerImpl
argument_list|(
name|mockContext
argument_list|,
name|mockCGroupsHandler
argument_list|,
name|mockPrivilegedExecutor
argument_list|,
name|mockVendorPlugin
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBootstrap ()
specifier|public
name|void
name|testBootstrap
parameter_list|()
throws|throws
name|ResourceHandlerException
block|{
comment|// Case 1. auto
name|String
name|allowed
init|=
literal|"auto"
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_ALLOWED_DEVICES
argument_list|,
name|allowed
argument_list|)
expr_stmt|;
name|fpgaResourceHandler
operator|.
name|bootstrap
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockVendorPlugin
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|initPlugin
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockCGroupsHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|initializeCGroupController
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|DEVICES
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getAvailableFpgaCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getAllowedFpga
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Case 2. subset of devices
name|fpgaResourceHandler
operator|=
operator|new
name|FpgaResourceHandlerImpl
argument_list|(
name|mockContext
argument_list|,
name|mockCGroupsHandler
argument_list|,
name|mockPrivilegedExecutor
argument_list|,
name|mockVendorPlugin
argument_list|)
expr_stmt|;
name|allowed
operator|=
literal|"0,1,2"
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_ALLOWED_DEVICES
argument_list|,
name|allowed
argument_list|)
expr_stmt|;
name|fpgaResourceHandler
operator|.
name|bootstrap
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getAllowedFpga
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
argument_list|>
name|allowedDevices
init|=
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getAllowedFpga
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|allowed
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|boolean
name|check
init|=
literal|false
decl_stmt|;
for|for
control|(
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
name|device
range|:
name|allowedDevices
control|)
block|{
if|if
condition|(
name|device
operator|.
name|getMinor
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|check
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Minor:"
operator|+
name|s
operator|+
literal|"found"
argument_list|,
name|check
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getAvailableFpgaCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Case 3. User configuration contains invalid minor device number
name|fpgaResourceHandler
operator|=
operator|new
name|FpgaResourceHandlerImpl
argument_list|(
name|mockContext
argument_list|,
name|mockCGroupsHandler
argument_list|,
name|mockPrivilegedExecutor
argument_list|,
name|mockVendorPlugin
argument_list|)
expr_stmt|;
name|allowed
operator|=
literal|"0,1,7"
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_ALLOWED_DEVICES
argument_list|,
name|allowed
argument_list|)
expr_stmt|;
name|fpgaResourceHandler
operator|.
name|bootstrap
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getAvailableFpgaCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getAllowedFpga
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBootstrapWithInvalidUserConfiguration ()
specifier|public
name|void
name|testBootstrapWithInvalidUserConfiguration
parameter_list|()
throws|throws
name|ResourceHandlerException
block|{
comment|// User configuration contains invalid minor device number
name|String
name|allowed
init|=
literal|"0,1,7"
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_ALLOWED_DEVICES
argument_list|,
name|allowed
argument_list|)
expr_stmt|;
name|fpgaResourceHandler
operator|.
name|bootstrap
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getAllowedFpga
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getAvailableFpgaCount
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|invalidAllowedStrings
init|=
block|{
literal|"a,1,2,"
block|,
literal|"a,1,2"
block|,
literal|"0,1,2,#"
block|,
literal|"a"
block|,
literal|"1,"
block|}
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|invalidAllowedStrings
control|)
block|{
name|boolean
name|invalidConfiguration
init|=
literal|false
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_ALLOWED_DEVICES
argument_list|,
name|s
argument_list|)
expr_stmt|;
try|try
block|{
name|fpgaResourceHandler
operator|.
name|bootstrap
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceHandlerException
name|e
parameter_list|)
block|{
name|invalidConfiguration
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|invalidConfiguration
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|allowedStrings
init|=
block|{
literal|"1,2"
block|,
literal|"1"
block|}
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|allowedStrings
control|)
block|{
name|boolean
name|invalidConfiguration
init|=
literal|false
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_ALLOWED_DEVICES
argument_list|,
name|s
argument_list|)
expr_stmt|;
try|try
block|{
name|fpgaResourceHandler
operator|.
name|bootstrap
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceHandlerException
name|e
parameter_list|)
block|{
name|invalidConfiguration
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|invalidConfiguration
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testBootStrapWithEmptyUserConfiguration ()
specifier|public
name|void
name|testBootStrapWithEmptyUserConfiguration
parameter_list|()
throws|throws
name|ResourceHandlerException
block|{
comment|// User configuration contains invalid minor device number
name|String
name|allowed
init|=
literal|""
decl_stmt|;
name|boolean
name|invalidConfiguration
init|=
literal|false
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_ALLOWED_DEVICES
argument_list|,
name|allowed
argument_list|)
expr_stmt|;
try|try
block|{
name|fpgaResourceHandler
operator|.
name|bootstrap
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceHandlerException
name|e
parameter_list|)
block|{
name|invalidConfiguration
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|invalidConfiguration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocationWithPreference ()
specifier|public
name|void
name|testAllocationWithPreference
parameter_list|()
throws|throws
name|ResourceHandlerException
throws|,
name|PrivilegedOperationException
block|{
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_ALLOWED_DEVICES
argument_list|,
literal|"0,1,2"
argument_list|)
expr_stmt|;
name|fpgaResourceHandler
operator|.
name|bootstrap
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
comment|// Case 1. The id-0 container request 1 FPGA of IntelOpenCL type and GEMM IP
name|fpgaResourceHandler
operator|.
name|preStart
argument_list|(
name|mockContainer
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|"GEMM"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getUsedFpgaCount
argument_list|()
argument_list|)
expr_stmt|;
name|verifyDeniedDevices
argument_list|(
name|getContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
argument_list|>
name|list
init|=
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getUsedFpga
argument_list|()
operator|.
name|get
argument_list|(
name|getContainerId
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
name|device
range|:
name|list
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"IP should be updated to GEMM"
argument_list|,
literal|"GEMM"
argument_list|,
name|device
operator|.
name|getIPID
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Case 2. The id-1 container request 3 FPGA of IntelOpenCL and GEMM IP. this should fail
name|boolean
name|flag
init|=
literal|false
decl_stmt|;
try|try
block|{
name|fpgaResourceHandler
operator|.
name|preStart
argument_list|(
name|mockContainer
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|"GZIP"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceHandlerException
name|e
parameter_list|)
block|{
name|flag
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|flag
argument_list|)
expr_stmt|;
comment|// Case 3. Release the id-0 container
name|fpgaResourceHandler
operator|.
name|postComplete
argument_list|(
name|getContainerId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getUsedFpgaCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getAvailableFpgaCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now we have enough devices, re-allocate for the id-1 container
name|fpgaResourceHandler
operator|.
name|preStart
argument_list|(
name|mockContainer
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|"GEMM"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Id-1 container should have 0 denied devices
name|verifyDeniedDevices
argument_list|(
name|getContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getUsedFpgaCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getAvailableFpgaCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Release container id-1
name|fpgaResourceHandler
operator|.
name|postComplete
argument_list|(
name|getContainerId
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getUsedFpgaCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getAvailableFpgaCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Case 4. Now all 3 devices should have IPID GEMM
comment|// Try container id-2 and id-3
name|fpgaResourceHandler
operator|.
name|preStart
argument_list|(
name|mockContainer
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|"GZIP"
argument_list|)
argument_list|)
expr_stmt|;
name|fpgaResourceHandler
operator|.
name|postComplete
argument_list|(
name|getContainerId
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|fpgaResourceHandler
operator|.
name|preStart
argument_list|(
name|mockContainer
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|"GEMM"
argument_list|)
argument_list|)
expr_stmt|;
comment|// IPID should be GEMM for id-3 container
name|list
operator|=
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getUsedFpga
argument_list|()
operator|.
name|get
argument_list|(
name|getContainerId
argument_list|(
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
name|device
range|:
name|list
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"IPID should be GEMM"
argument_list|,
literal|"GEMM"
argument_list|,
name|device
operator|.
name|getIPID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getUsedFpgaCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getAvailableFpgaCount
argument_list|()
argument_list|)
expr_stmt|;
name|fpgaResourceHandler
operator|.
name|postComplete
argument_list|(
name|getContainerId
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getUsedFpgaCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getAvailableFpgaCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Case 5. id-4 request 0 FPGA device
name|fpgaResourceHandler
operator|.
name|preStart
argument_list|(
name|mockContainer
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// Deny all devices for id-4
name|verifyDeniedDevices
argument_list|(
name|getContainerId
argument_list|(
literal|4
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getUsedFpgaCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getAvailableFpgaCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Case 6. id-5 with invalid FPGA device
try|try
block|{
name|fpgaResourceHandler
operator|.
name|preStart
argument_list|(
name|mockContainer
argument_list|(
literal|5
argument_list|,
operator|-
literal|2
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceHandlerException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testsAllocationWithExistingIPIDDevices ()
specifier|public
name|void
name|testsAllocationWithExistingIPIDDevices
parameter_list|()
throws|throws
name|ResourceHandlerException
throws|,
name|PrivilegedOperationException
block|{
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_ALLOWED_DEVICES
argument_list|,
literal|"0,1,2"
argument_list|)
expr_stmt|;
name|fpgaResourceHandler
operator|.
name|bootstrap
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
comment|// The id-0 container request 3 FPGA of IntelOpenCL type and GEMM IP
name|fpgaResourceHandler
operator|.
name|preStart
argument_list|(
name|mockContainer
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|"GEMM"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getUsedFpgaCount
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
argument_list|>
name|list
init|=
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getUsedFpga
argument_list|()
operator|.
name|get
argument_list|(
name|getContainerId
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|fpgaResourceHandler
operator|.
name|postComplete
argument_list|(
name|getContainerId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
name|device
range|:
name|list
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"IP should be updated to GEMM"
argument_list|,
literal|"GEMM"
argument_list|,
name|device
operator|.
name|getIPID
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Case 1. id-1 container request preStart, with no plugin.configureIP called
name|fpgaResourceHandler
operator|.
name|preStart
argument_list|(
name|mockContainer
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|"GEMM"
argument_list|)
argument_list|)
expr_stmt|;
name|fpgaResourceHandler
operator|.
name|preStart
argument_list|(
name|mockContainer
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|"GEMM"
argument_list|)
argument_list|)
expr_stmt|;
comment|// we should have 3 times due to id-1 skip 1 invocation
name|verify
argument_list|(
name|mockVendorPlugin
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|configureIP
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|fpgaResourceHandler
operator|.
name|postComplete
argument_list|(
name|getContainerId
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|fpgaResourceHandler
operator|.
name|postComplete
argument_list|(
name|getContainerId
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Case 2. id-2 container request preStart, with 1 plugin.configureIP called
name|fpgaResourceHandler
operator|.
name|preStart
argument_list|(
name|mockContainer
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|"GZIP"
argument_list|)
argument_list|)
expr_stmt|;
comment|// we should have 4 times invocation
name|verify
argument_list|(
name|mockVendorPlugin
argument_list|,
name|times
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|configureIP
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocationWithZeroDevices ()
specifier|public
name|void
name|testAllocationWithZeroDevices
parameter_list|()
throws|throws
name|ResourceHandlerException
throws|,
name|PrivilegedOperationException
block|{
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_ALLOWED_DEVICES
argument_list|,
literal|"0,1,2"
argument_list|)
expr_stmt|;
name|fpgaResourceHandler
operator|.
name|bootstrap
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
comment|// The id-0 container request 0 FPGA
name|fpgaResourceHandler
operator|.
name|preStart
argument_list|(
name|mockContainer
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|verifyDeniedDevices
argument_list|(
name|getContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockVendorPlugin
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|downloadIP
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|anyMap
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockVendorPlugin
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|configureIP
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStateStore ()
specifier|public
name|void
name|testStateStore
parameter_list|()
throws|throws
name|ResourceHandlerException
throws|,
name|IOException
block|{
comment|// Case 1. store 3 devices
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_ALLOWED_DEVICES
argument_list|,
literal|"0,1,2"
argument_list|)
expr_stmt|;
name|fpgaResourceHandler
operator|.
name|bootstrap
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|Container
name|container0
init|=
name|mockContainer
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|"GEMM"
argument_list|)
decl_stmt|;
name|fpgaResourceHandler
operator|.
name|preStart
argument_list|(
name|container0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
argument_list|>
name|assigned
init|=
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getUsedFpga
argument_list|()
operator|.
name|get
argument_list|(
name|getContainerId
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockNMStateStore
argument_list|)
operator|.
name|storeAssignedResources
argument_list|(
name|container0
argument_list|,
name|ResourceInformation
operator|.
name|FPGA_URI
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|assigned
argument_list|)
argument_list|)
expr_stmt|;
name|fpgaResourceHandler
operator|.
name|postComplete
argument_list|(
name|getContainerId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Case 2. ask 0, no store api called
name|Container
name|container1
init|=
name|mockContainer
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|fpgaResourceHandler
operator|.
name|preStart
argument_list|(
name|container1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockNMStateStore
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|storeAssignedResources
argument_list|(
name|eq
argument_list|(
name|container1
argument_list|)
argument_list|,
name|eq
argument_list|(
name|ResourceInformation
operator|.
name|FPGA_URI
argument_list|)
argument_list|,
name|anyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReacquireContainer ()
specifier|public
name|void
name|testReacquireContainer
parameter_list|()
throws|throws
name|ResourceHandlerException
block|{
name|Container
name|c0
init|=
name|mockContainer
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|"GEMM"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
argument_list|>
name|assigned
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|assigned
operator|.
name|add
argument_list|(
operator|new
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
argument_list|(
name|vendorType
argument_list|,
literal|247
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assigned
operator|.
name|add
argument_list|(
operator|new
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
argument_list|(
name|vendorType
argument_list|,
literal|247
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Mock we've stored the c0 states
name|mockStateStoreForContainer
argument_list|(
name|c0
argument_list|,
name|assigned
argument_list|)
expr_stmt|;
comment|// NM start
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_ALLOWED_DEVICES
argument_list|,
literal|"0,1,2"
argument_list|)
expr_stmt|;
name|fpgaResourceHandler
operator|.
name|bootstrap
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getUsedFpgaCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getAvailableFpgaCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Case 1. try recover state for id-0 container
name|fpgaResourceHandler
operator|.
name|reacquireContainer
argument_list|(
name|getContainerId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// minor number matches
name|List
argument_list|<
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
argument_list|>
name|used
init|=
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getUsedFpga
argument_list|()
operator|.
name|get
argument_list|(
name|getContainerId
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
name|device
range|:
name|used
control|)
block|{
if|if
condition|(
name|device
operator|.
name|getMinor
argument_list|()
operator|.
name|equals
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|device
operator|.
name|getMinor
argument_list|()
operator|.
name|equals
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected used minor number in allocator"
argument_list|,
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
argument_list|>
name|available
init|=
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getAvailableFpga
argument_list|()
operator|.
name|get
argument_list|(
name|vendorType
argument_list|)
decl_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
name|device
range|:
name|available
control|)
block|{
if|if
condition|(
name|device
operator|.
name|getMinor
argument_list|()
operator|.
name|equals
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected available minor number in allocator"
argument_list|,
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// Case 2. Recover a not allowed device with minor number 5
name|Container
name|c1
init|=
name|mockContainer
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|"GEMM"
argument_list|)
decl_stmt|;
name|assigned
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|assigned
operator|.
name|add
argument_list|(
operator|new
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
argument_list|(
name|vendorType
argument_list|,
literal|247
argument_list|,
literal|5
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Mock we've stored the c1 states
name|mockStateStoreForContainer
argument_list|(
name|c1
argument_list|,
name|assigned
argument_list|)
expr_stmt|;
name|boolean
name|flag
init|=
literal|false
decl_stmt|;
try|try
block|{
name|fpgaResourceHandler
operator|.
name|reacquireContainer
argument_list|(
name|getContainerId
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceHandlerException
name|e
parameter_list|)
block|{
name|flag
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|flag
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getUsedFpgaCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getAvailableFpgaCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Case 3. recover a already used device by other container
name|Container
name|c2
init|=
name|mockContainer
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|"GEMM"
argument_list|)
decl_stmt|;
name|assigned
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|assigned
operator|.
name|add
argument_list|(
operator|new
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
argument_list|(
name|vendorType
argument_list|,
literal|247
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Mock we've stored the c2 states
name|mockStateStoreForContainer
argument_list|(
name|c2
argument_list|,
name|assigned
argument_list|)
expr_stmt|;
name|flag
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|fpgaResourceHandler
operator|.
name|reacquireContainer
argument_list|(
name|getContainerId
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceHandlerException
name|e
parameter_list|)
block|{
name|flag
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|flag
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getUsedFpgaCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getAvailableFpgaCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Case 4. recover a normal container c3 with remaining minor device number 2
name|Container
name|c3
init|=
name|mockContainer
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|"GEMM"
argument_list|)
decl_stmt|;
name|assigned
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|assigned
operator|.
name|add
argument_list|(
operator|new
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
argument_list|(
name|vendorType
argument_list|,
literal|247
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Mock we've stored the c2 states
name|mockStateStoreForContainer
argument_list|(
name|c3
argument_list|,
name|assigned
argument_list|)
expr_stmt|;
name|fpgaResourceHandler
operator|.
name|reacquireContainer
argument_list|(
name|getContainerId
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getUsedFpgaCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fpgaResourceHandler
operator|.
name|getFpgaAllocator
argument_list|()
operator|.
name|getAvailableFpgaCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyDeniedDevices (ContainerId containerId, List<Integer> deniedDevices)
specifier|private
name|void
name|verifyDeniedDevices
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|deniedDevices
parameter_list|)
throws|throws
name|ResourceHandlerException
throws|,
name|PrivilegedOperationException
block|{
name|verify
argument_list|(
name|mockCGroupsHandler
argument_list|,
name|atLeastOnce
argument_list|()
argument_list|)
operator|.
name|createCGroup
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|DEVICES
argument_list|,
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|deniedDevices
operator|&&
operator|!
name|deniedDevices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|verify
argument_list|(
name|mockPrivilegedExecutor
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|executePrivilegedOperation
argument_list|(
operator|new
name|PrivilegedOperation
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|FPGA
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|FpgaResourceHandlerImpl
operator|.
name|CONTAINER_ID_CLI_OPTION
argument_list|,
name|containerId
operator|.
name|toString
argument_list|()
argument_list|,
name|FpgaResourceHandlerImpl
operator|.
name|EXCLUDED_FPGAS_CLI_OPTION
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|deniedDevices
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deniedDevices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|verify
argument_list|(
name|mockPrivilegedExecutor
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|executePrivilegedOperation
argument_list|(
operator|new
name|PrivilegedOperation
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|FPGA
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|FpgaResourceHandlerImpl
operator|.
name|CONTAINER_ID_CLI_OPTION
argument_list|,
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|mockPlugin (String type, List<FpgaResourceAllocator.FpgaDevice> list)
specifier|private
specifier|static
name|IntelFpgaOpenclPlugin
name|mockPlugin
parameter_list|(
name|String
name|type
parameter_list|,
name|List
argument_list|<
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
argument_list|>
name|list
parameter_list|)
block|{
name|IntelFpgaOpenclPlugin
name|plugin
init|=
name|mock
argument_list|(
name|IntelFpgaOpenclPlugin
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|plugin
operator|.
name|initPlugin
argument_list|(
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|plugin
operator|.
name|getFpgaType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|plugin
operator|.
name|downloadIP
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyMap
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"/tmp"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|plugin
operator|.
name|configureIP
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|plugin
operator|.
name|discover
argument_list|(
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|list
argument_list|)
expr_stmt|;
return|return
name|plugin
return|;
block|}
DECL|method|mockContainer (int id, int numFpga, String IPID)
specifier|private
specifier|static
name|Container
name|mockContainer
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|numFpga
parameter_list|,
name|String
name|IPID
parameter_list|)
block|{
name|Container
name|c
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|Resource
name|res
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ResourceMappings
name|resMapping
init|=
operator|new
name|ResourceMappings
argument_list|()
decl_stmt|;
name|res
operator|.
name|setResourceValue
argument_list|(
name|ResourceInformation
operator|.
name|FPGA_URI
argument_list|,
name|numFpga
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getResourceMappings
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resMapping
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getContainerId
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|clc
init|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|numFpga
operator|>
literal|0
condition|)
block|{
name|envs
operator|.
name|put
argument_list|(
literal|"REQUESTED_FPGA_IP_ID"
argument_list|,
name|IPID
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|c
operator|.
name|getLaunchContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clc
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|clc
operator|.
name|getEnvironment
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|envs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getWorkDir
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"/tmp"
argument_list|)
expr_stmt|;
name|ResourceSet
name|resourceSet
init|=
operator|new
name|ResourceSet
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getResourceSet
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resourceSet
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
DECL|method|mockStateStoreForContainer (Container container, List<FpgaResourceAllocator.FpgaDevice> assigned)
specifier|private
name|void
name|mockStateStoreForContainer
parameter_list|(
name|Container
name|container
parameter_list|,
name|List
argument_list|<
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
argument_list|>
name|assigned
parameter_list|)
block|{
name|ResourceMappings
name|rmap
init|=
operator|new
name|ResourceMappings
argument_list|()
decl_stmt|;
name|ResourceMappings
operator|.
name|AssignedResources
name|ar
init|=
operator|new
name|ResourceMappings
operator|.
name|AssignedResources
argument_list|()
decl_stmt|;
name|ar
operator|.
name|updateAssignedResources
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|assigned
argument_list|)
argument_list|)
expr_stmt|;
name|rmap
operator|.
name|addAssignedResources
argument_list|(
name|ResourceInformation
operator|.
name|FPGA_URI
argument_list|,
name|ar
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getResourceMappings
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rmap
argument_list|)
expr_stmt|;
name|runningContainersMap
operator|.
name|put
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
DECL|method|getContainerId (int id)
specifier|private
specifier|static
name|ContainerId
name|getContainerId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
name|id
argument_list|)
return|;
block|}
block|}
end_class

end_unit

