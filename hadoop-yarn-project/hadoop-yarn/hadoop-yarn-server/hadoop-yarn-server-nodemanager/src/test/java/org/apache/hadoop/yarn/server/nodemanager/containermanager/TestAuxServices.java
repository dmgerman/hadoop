begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
operator|.
name|STATE
operator|.
name|INITED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
operator|.
name|STATE
operator|.
name|STARTED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|FileTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFilePermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ApplicationClassLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|JarFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ApplicationInitializationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ApplicationTerminationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|AuxiliaryLocalPathHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|AuxiliaryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ContainerInitializationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ContainerTerminationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DeletionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|LocalDirsHandlerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|deletion
operator|.
name|task
operator|.
name|FileDeletionTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestAuxServices
specifier|public
class|class
name|TestAuxServices
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestAuxServices
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TEST_DIR
specifier|private
specifier|static
specifier|final
name|File
name|TEST_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|)
argument_list|,
name|TestAuxServices
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|MOCK_AUX_PATH_HANDLER
specifier|private
specifier|final
specifier|static
name|AuxiliaryLocalPathHandler
name|MOCK_AUX_PATH_HANDLER
init|=
name|mock
argument_list|(
name|AuxiliaryLocalPathHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MOCK_CONTEXT
specifier|private
specifier|final
specifier|static
name|Context
name|MOCK_CONTEXT
init|=
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MOCK_DEL_SERVICE
specifier|private
specifier|final
specifier|static
name|DeletionService
name|MOCK_DEL_SERVICE
init|=
name|mock
argument_list|(
name|DeletionService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|LightService
specifier|static
class|class
name|LightService
extends|extends
name|AuxiliaryService
implements|implements
name|Service
block|{
DECL|field|idef
specifier|private
specifier|final
name|char
name|idef
decl_stmt|;
DECL|field|expected_appId
specifier|private
specifier|final
name|int
name|expected_appId
decl_stmt|;
DECL|field|remaining_init
specifier|private
name|int
name|remaining_init
decl_stmt|;
DECL|field|remaining_stop
specifier|private
name|int
name|remaining_stop
decl_stmt|;
DECL|field|meta
specifier|private
name|ByteBuffer
name|meta
init|=
literal|null
decl_stmt|;
DECL|field|stoppedApps
specifier|private
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|stoppedApps
decl_stmt|;
DECL|field|containerId
specifier|private
name|ContainerId
name|containerId
decl_stmt|;
DECL|field|resource
specifier|private
name|Resource
name|resource
decl_stmt|;
DECL|method|LightService (String name, char idef, int expected_appId)
name|LightService
parameter_list|(
name|String
name|name
parameter_list|,
name|char
name|idef
parameter_list|,
name|int
name|expected_appId
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|idef
argument_list|,
name|expected_appId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|LightService (String name, char idef, int expected_appId, ByteBuffer meta)
name|LightService
parameter_list|(
name|String
name|name
parameter_list|,
name|char
name|idef
parameter_list|,
name|int
name|expected_appId
parameter_list|,
name|ByteBuffer
name|meta
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|idef
operator|=
name|idef
expr_stmt|;
name|this
operator|.
name|expected_appId
operator|=
name|expected_appId
expr_stmt|;
name|this
operator|.
name|meta
operator|=
name|meta
expr_stmt|;
name|this
operator|.
name|stoppedApps
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getAppIdsStopped ()
specifier|public
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|getAppIdsStopped
parameter_list|()
block|{
return|return
operator|(
name|ArrayList
argument_list|<
name|Integer
argument_list|>
operator|)
name|this
operator|.
name|stoppedApps
operator|.
name|clone
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|remaining_init
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|idef
operator|+
literal|".expected.init"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|remaining_stop
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|idef
operator|+
literal|".expected.stop"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|remaining_init
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|remaining_stop
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initializeApplication (ApplicationInitializationContext context)
specifier|public
name|void
name|initializeApplication
parameter_list|(
name|ApplicationInitializationContext
name|context
parameter_list|)
block|{
name|ByteBuffer
name|data
init|=
name|context
operator|.
name|getApplicationDataForService
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|idef
argument_list|,
name|data
operator|.
name|getChar
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected_appId
argument_list|,
name|data
operator|.
name|getInt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected_appId
argument_list|,
name|context
operator|.
name|getApplicationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stopApplication (ApplicationTerminationContext context)
specifier|public
name|void
name|stopApplication
parameter_list|(
name|ApplicationTerminationContext
name|context
parameter_list|)
block|{
name|stoppedApps
operator|.
name|add
argument_list|(
name|context
operator|.
name|getApplicationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMetaData ()
specifier|public
name|ByteBuffer
name|getMetaData
parameter_list|()
block|{
return|return
name|meta
return|;
block|}
annotation|@
name|Override
DECL|method|initializeContainer ( ContainerInitializationContext initContainerContext)
specifier|public
name|void
name|initializeContainer
parameter_list|(
name|ContainerInitializationContext
name|initContainerContext
parameter_list|)
block|{
name|containerId
operator|=
name|initContainerContext
operator|.
name|getContainerId
argument_list|()
expr_stmt|;
name|resource
operator|=
name|initContainerContext
operator|.
name|getResource
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stopContainer ( ContainerTerminationContext stopContainerContext)
specifier|public
name|void
name|stopContainer
parameter_list|(
name|ContainerTerminationContext
name|stopContainerContext
parameter_list|)
block|{
name|containerId
operator|=
name|stopContainerContext
operator|.
name|getContainerId
argument_list|()
expr_stmt|;
name|resource
operator|=
name|stopContainerContext
operator|.
name|getResource
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|ServiceA
specifier|static
class|class
name|ServiceA
extends|extends
name|LightService
block|{
DECL|method|ServiceA ()
specifier|public
name|ServiceA
parameter_list|()
block|{
name|super
argument_list|(
literal|"A"
argument_list|,
literal|'A'
argument_list|,
literal|65
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
literal|"A"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ServiceB
specifier|static
class|class
name|ServiceB
extends|extends
name|LightService
block|{
DECL|method|ServiceB ()
specifier|public
name|ServiceB
parameter_list|()
block|{
name|super
argument_list|(
literal|"B"
argument_list|,
literal|'B'
argument_list|,
literal|66
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
literal|"B"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Override getMetaData() method to return current
comment|// class path. This class would be used for
comment|// testCustomizedAuxServiceClassPath.
DECL|class|ServiceC
specifier|static
class|class
name|ServiceC
extends|extends
name|LightService
block|{
DECL|method|ServiceC ()
specifier|public
name|ServiceC
parameter_list|()
block|{
name|super
argument_list|(
literal|"C"
argument_list|,
literal|'C'
argument_list|,
literal|66
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
literal|"C"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMetaData ()
specifier|public
name|ByteBuffer
name|getMetaData
parameter_list|()
block|{
name|ClassLoader
name|loader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|URL
index|[]
name|urls
init|=
operator|(
operator|(
name|URLClassLoader
operator|)
name|loader
operator|)
operator|.
name|getURLs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|urlString
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|URL
name|url
range|:
name|urls
control|)
block|{
name|urlString
operator|.
name|add
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|joinedString
init|=
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|urlString
argument_list|)
decl_stmt|;
return|return
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|joinedString
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
annotation|@
name|Test
DECL|method|testRemoteAuxServiceClassPath ()
specifier|public
name|void
name|testRemoteAuxServiceClassPath
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICES
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ServiceC"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICE_FMT
argument_list|,
literal|"ServiceC"
argument_list|)
argument_list|,
name|ServiceC
operator|.
name|class
argument_list|,
name|Service
operator|.
name|class
argument_list|)
expr_stmt|;
name|Context
name|mockContext2
init|=
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
decl_stmt|;
name|LocalDirsHandlerService
name|mockDirsHandler
init|=
name|mock
argument_list|(
name|LocalDirsHandlerService
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|root
init|=
literal|"target/LocalDir"
decl_stmt|;
name|Path
name|rootAuxServiceDirPath
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"nmAuxService"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockDirsHandler
operator|.
name|getLocalPathForWrite
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rootAuxServiceDirPath
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContext2
operator|.
name|getLocalDirsHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockDirsHandler
argument_list|)
expr_stmt|;
name|File
name|rootDir
init|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rootDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|rootDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|AuxServices
name|aux
init|=
literal|null
decl_stmt|;
name|File
name|testJar
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// the remote jar file should not be be writable by group or others.
try|try
block|{
name|testJar
operator|=
name|JarFinder
operator|.
name|makeClassLoaderTestJar
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
name|rootDir
argument_list|,
literal|"test-runjar.jar"
argument_list|,
literal|2048
argument_list|,
name|ServiceC
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Give group a write permission.
comment|// We should not load the auxservice from remote jar file.
name|Set
argument_list|<
name|PosixFilePermission
argument_list|>
name|perms
init|=
operator|new
name|HashSet
argument_list|<
name|PosixFilePermission
argument_list|>
argument_list|()
decl_stmt|;
name|perms
operator|.
name|add
argument_list|(
name|PosixFilePermission
operator|.
name|OWNER_READ
argument_list|)
expr_stmt|;
name|perms
operator|.
name|add
argument_list|(
name|PosixFilePermission
operator|.
name|OWNER_WRITE
argument_list|)
expr_stmt|;
name|perms
operator|.
name|add
argument_list|(
name|PosixFilePermission
operator|.
name|GROUP_WRITE
argument_list|)
expr_stmt|;
name|Files
operator|.
name|setPosixFilePermissions
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|testJar
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
name|perms
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICE_REMOTE_CLASSPATH
argument_list|,
literal|"ServiceC"
argument_list|)
argument_list|,
name|testJar
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|aux
operator|=
operator|new
name|AuxServices
argument_list|(
name|MOCK_AUX_PATH_HANDLER
argument_list|,
name|mockContext2
argument_list|,
name|MOCK_DEL_SERVICE
argument_list|)
expr_stmt|;
name|aux
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"The permission of the jar is wrong."
operator|+
literal|"Should throw out exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRuntimeException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"The remote jarfile should not be writable by group or others"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Files
operator|.
name|delete
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|testJar
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|testJar
operator|=
name|JarFinder
operator|.
name|makeClassLoaderTestJar
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
name|rootDir
argument_list|,
literal|"test-runjar.jar"
argument_list|,
literal|2048
argument_list|,
name|ServiceC
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICE_REMOTE_CLASSPATH
argument_list|,
literal|"ServiceC"
argument_list|)
argument_list|,
name|testJar
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|aux
operator|=
operator|new
name|AuxServices
argument_list|(
name|MOCK_AUX_PATH_HANDLER
argument_list|,
name|mockContext2
argument_list|,
name|MOCK_DEL_SERVICE
argument_list|)
expr_stmt|;
name|aux
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|aux
operator|.
name|start
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|meta
init|=
name|aux
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|String
name|auxName
init|=
literal|""
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|meta
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|i
range|:
name|meta
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|auxName
operator|=
name|i
operator|.
name|getKey
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ServiceC"
argument_list|,
name|auxName
argument_list|)
expr_stmt|;
name|aux
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
name|FileStatus
index|[]
name|status
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|rootAuxServiceDirPath
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|status
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// initialize the same auxservice again, and make sure that we did not
comment|// re-download the jar from remote directory.
name|aux
operator|=
operator|new
name|AuxServices
argument_list|(
name|MOCK_AUX_PATH_HANDLER
argument_list|,
name|mockContext2
argument_list|,
name|MOCK_DEL_SERVICE
argument_list|)
expr_stmt|;
name|aux
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|aux
operator|.
name|start
argument_list|()
expr_stmt|;
name|meta
operator|=
name|aux
operator|.
name|getMetaData
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|meta
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|i
range|:
name|meta
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|auxName
operator|=
name|i
operator|.
name|getKey
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ServiceC"
argument_list|,
name|auxName
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|MOCK_DEL_SERVICE
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|delete
argument_list|(
name|any
argument_list|(
name|FileDeletionTask
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
name|rootAuxServiceDirPath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|status
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|aux
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
comment|// change the last modification time for remote jar,
comment|// we will re-download the jar and clean the old jar
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|3600
operator|*
literal|1000
decl_stmt|;
name|FileTime
name|fileTime
init|=
name|FileTime
operator|.
name|fromMillis
argument_list|(
name|time
argument_list|)
decl_stmt|;
name|Files
operator|.
name|setLastModifiedTime
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|testJar
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
name|fileTime
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICE_REMOTE_CLASSPATH
argument_list|,
literal|"ServiceC"
argument_list|)
argument_list|,
name|testJar
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|aux
operator|=
operator|new
name|AuxServices
argument_list|(
name|MOCK_AUX_PATH_HANDLER
argument_list|,
name|mockContext2
argument_list|,
name|MOCK_DEL_SERVICE
argument_list|)
expr_stmt|;
name|aux
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|aux
operator|.
name|start
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|MOCK_DEL_SERVICE
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|delete
argument_list|(
name|any
argument_list|(
name|FileDeletionTask
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
name|rootAuxServiceDirPath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|status
operator|.
name|length
operator|==
literal|2
argument_list|)
expr_stmt|;
name|aux
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|testJar
operator|!=
literal|null
condition|)
block|{
name|testJar
operator|.
name|delete
argument_list|()
expr_stmt|;
name|rootDir
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|root
argument_list|)
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|root
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// To verify whether we could load class from customized class path.
comment|// We would use ServiceC in this test. Also create a separate jar file
comment|// including ServiceC class, and add this jar to customized directory.
comment|// By setting some proper configurations, we should load ServiceC class
comment|// from customized class path.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testCustomizedAuxServiceClassPath ()
specifier|public
name|void
name|testCustomizedAuxServiceClassPath
parameter_list|()
throws|throws
name|Exception
block|{
comment|// verify that we can load AuxService Class from default Class path
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICES
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ServiceC"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICE_FMT
argument_list|,
literal|"ServiceC"
argument_list|)
argument_list|,
name|ServiceC
operator|.
name|class
argument_list|,
name|Service
operator|.
name|class
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
name|AuxServices
name|aux
init|=
operator|new
name|AuxServices
argument_list|(
name|MOCK_AUX_PATH_HANDLER
argument_list|,
name|MOCK_CONTEXT
argument_list|,
name|MOCK_DEL_SERVICE
argument_list|)
decl_stmt|;
name|aux
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|aux
operator|.
name|start
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|meta
init|=
name|aux
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|String
name|auxName
init|=
literal|""
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|defaultAuxClassPath
init|=
literal|null
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|meta
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|i
range|:
name|meta
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|auxName
operator|=
name|i
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|String
name|auxClassPath
init|=
name|Charsets
operator|.
name|UTF_8
operator|.
name|decode
argument_list|(
name|i
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|defaultAuxClassPath
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|StringUtils
operator|.
name|getTrimmedStrings
argument_list|(
name|auxClassPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ServiceC"
argument_list|,
name|auxName
argument_list|)
expr_stmt|;
name|aux
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
comment|// create a new jar file, and configure it as customized class path
comment|// for this AuxService, and make sure that we could load the class
comment|// from this configured customized class path
name|File
name|rootDir
init|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rootDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|rootDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|File
name|testJar
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testJar
operator|=
name|JarFinder
operator|.
name|makeClassLoaderTestJar
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
name|rootDir
argument_list|,
literal|"test-runjar.jar"
argument_list|,
literal|2048
argument_list|,
name|ServiceC
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICES
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ServiceC"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICE_FMT
argument_list|,
literal|"ServiceC"
argument_list|)
argument_list|,
name|ServiceC
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICES_CLASSPATH
argument_list|,
literal|"ServiceC"
argument_list|)
argument_list|,
name|testJar
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove "-org.apache.hadoop." from system classes
name|String
name|systemClasses
init|=
literal|"-org.apache.hadoop."
operator|+
literal|","
operator|+
name|ApplicationClassLoader
operator|.
name|SYSTEM_CLASSES_DEFAULT
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICES_SYSTEM_CLASSES
argument_list|,
literal|"ServiceC"
argument_list|)
argument_list|,
name|systemClasses
argument_list|)
expr_stmt|;
name|aux
operator|=
operator|new
name|AuxServices
argument_list|(
name|MOCK_AUX_PATH_HANDLER
argument_list|,
name|MOCK_CONTEXT
argument_list|,
name|MOCK_DEL_SERVICE
argument_list|)
expr_stmt|;
name|aux
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|aux
operator|.
name|start
argument_list|()
expr_stmt|;
name|meta
operator|=
name|aux
operator|.
name|getMetaData
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|meta
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|customizedAuxClassPath
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|i
range|:
name|meta
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|auxName
operator|.
name|equals
argument_list|(
name|i
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|classPath
init|=
name|Charsets
operator|.
name|UTF_8
operator|.
name|decode
argument_list|(
name|i
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|customizedAuxClassPath
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|StringUtils
operator|.
name|getTrimmedStrings
argument_list|(
name|classPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|classPath
operator|.
name|contains
argument_list|(
name|testJar
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|aux
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// Verify that we do not have any overlap between customized class path
comment|// and the default class path.
name|Set
argument_list|<
name|String
argument_list|>
name|mutalClassPath
init|=
name|Sets
operator|.
name|intersection
argument_list|(
name|defaultAuxClassPath
argument_list|,
name|customizedAuxClassPath
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mutalClassPath
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|testJar
operator|!=
literal|null
condition|)
block|{
name|testJar
operator|.
name|delete
argument_list|()
expr_stmt|;
name|rootDir
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testAuxEventDispatch ()
specifier|public
name|void
name|testAuxEventDispatch
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICES
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Asrv"
block|,
literal|"Bsrv"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICE_FMT
argument_list|,
literal|"Asrv"
argument_list|)
argument_list|,
name|ServiceA
operator|.
name|class
argument_list|,
name|Service
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICE_FMT
argument_list|,
literal|"Bsrv"
argument_list|)
argument_list|,
name|ServiceB
operator|.
name|class
argument_list|,
name|Service
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"A.expected.init"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"B.expected.stop"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|AuxServices
name|aux
init|=
operator|new
name|AuxServices
argument_list|(
name|MOCK_AUX_PATH_HANDLER
argument_list|,
name|MOCK_CONTEXT
argument_list|,
name|MOCK_DEL_SERVICE
argument_list|)
decl_stmt|;
name|aux
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|aux
operator|.
name|start
argument_list|()
expr_stmt|;
name|ApplicationId
name|appId1
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|65
argument_list|)
decl_stmt|;
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|buf
operator|.
name|putChar
argument_list|(
literal|'A'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|putInt
argument_list|(
literal|65
argument_list|)
expr_stmt|;
name|buf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|AuxServicesEvent
name|event
init|=
operator|new
name|AuxServicesEvent
argument_list|(
name|AuxServicesEventType
operator|.
name|APPLICATION_INIT
argument_list|,
literal|"user0"
argument_list|,
name|appId1
argument_list|,
literal|"Asrv"
argument_list|,
name|buf
argument_list|)
decl_stmt|;
name|aux
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId2
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|66
argument_list|)
decl_stmt|;
name|event
operator|=
operator|new
name|AuxServicesEvent
argument_list|(
name|AuxServicesEventType
operator|.
name|APPLICATION_STOP
argument_list|,
literal|"user0"
argument_list|,
name|appId2
argument_list|,
literal|"Bsrv"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// verify all services got the stop event
name|aux
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|AuxiliaryService
argument_list|>
name|servs
init|=
name|aux
operator|.
name|getServices
argument_list|()
decl_stmt|;
for|for
control|(
name|AuxiliaryService
name|serv
range|:
name|servs
control|)
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|appIds
init|=
operator|(
operator|(
name|LightService
operator|)
name|serv
operator|)
operator|.
name|getAppIdsStopped
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"app not properly stopped"
argument_list|,
literal|1
argument_list|,
name|appIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"wrong app stopped"
argument_list|,
name|appIds
operator|.
name|contains
argument_list|(
operator|(
name|Integer
operator|)
literal|66
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|AuxiliaryService
name|serv
range|:
name|servs
control|)
block|{
name|assertNull
argument_list|(
operator|(
operator|(
name|LightService
operator|)
name|serv
operator|)
operator|.
name|containerId
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
operator|(
operator|(
name|LightService
operator|)
name|serv
operator|)
operator|.
name|resource
argument_list|)
expr_stmt|;
block|}
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerTokenIdentifier
name|cti
init|=
operator|new
name|ContainerTokenIdentifier
argument_list|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Context
name|context
init|=
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
operator|new
name|ContainerImpl
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|cti
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|container
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|Resource
name|resource
init|=
name|container
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|event
operator|=
operator|new
name|AuxServicesEvent
argument_list|(
name|AuxServicesEventType
operator|.
name|CONTAINER_INIT
argument_list|,
name|container
argument_list|)
expr_stmt|;
name|aux
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
for|for
control|(
name|AuxiliaryService
name|serv
range|:
name|servs
control|)
block|{
name|assertEquals
argument_list|(
name|containerId
argument_list|,
operator|(
operator|(
name|LightService
operator|)
name|serv
operator|)
operator|.
name|containerId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|resource
argument_list|,
operator|(
operator|(
name|LightService
operator|)
name|serv
operator|)
operator|.
name|resource
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LightService
operator|)
name|serv
operator|)
operator|.
name|containerId
operator|=
literal|null
expr_stmt|;
operator|(
operator|(
name|LightService
operator|)
name|serv
operator|)
operator|.
name|resource
operator|=
literal|null
expr_stmt|;
block|}
name|event
operator|=
operator|new
name|AuxServicesEvent
argument_list|(
name|AuxServicesEventType
operator|.
name|CONTAINER_STOP
argument_list|,
name|container
argument_list|)
expr_stmt|;
name|aux
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
for|for
control|(
name|AuxiliaryService
name|serv
range|:
name|servs
control|)
block|{
name|assertEquals
argument_list|(
name|containerId
argument_list|,
operator|(
operator|(
name|LightService
operator|)
name|serv
operator|)
operator|.
name|containerId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|resource
argument_list|,
operator|(
operator|(
name|LightService
operator|)
name|serv
operator|)
operator|.
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAuxServices ()
specifier|public
name|void
name|testAuxServices
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICES
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Asrv"
block|,
literal|"Bsrv"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICE_FMT
argument_list|,
literal|"Asrv"
argument_list|)
argument_list|,
name|ServiceA
operator|.
name|class
argument_list|,
name|Service
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICE_FMT
argument_list|,
literal|"Bsrv"
argument_list|)
argument_list|,
name|ServiceB
operator|.
name|class
argument_list|,
name|Service
operator|.
name|class
argument_list|)
expr_stmt|;
specifier|final
name|AuxServices
name|aux
init|=
operator|new
name|AuxServices
argument_list|(
name|MOCK_AUX_PATH_HANDLER
argument_list|,
name|MOCK_CONTEXT
argument_list|,
name|MOCK_DEL_SERVICE
argument_list|)
decl_stmt|;
name|aux
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|latch
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Service
name|s
range|:
name|aux
operator|.
name|getServices
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|INITED
argument_list|,
name|s
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|instanceof
name|ServiceA
condition|)
block|{
name|latch
operator|*=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|instanceof
name|ServiceB
condition|)
block|{
name|latch
operator|*=
literal|3
expr_stmt|;
block|}
else|else
name|fail
argument_list|(
literal|"Unexpected service type "
operator|+
name|s
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Invalid mix of services"
argument_list|,
literal|6
argument_list|,
name|latch
argument_list|)
expr_stmt|;
name|aux
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|AuxiliaryService
name|s
range|:
name|aux
operator|.
name|getServices
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|STARTED
argument_list|,
name|s
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|getAuxiliaryLocalPathHandler
argument_list|()
argument_list|,
name|MOCK_AUX_PATH_HANDLER
argument_list|)
expr_stmt|;
block|}
name|aux
operator|.
name|stop
argument_list|()
expr_stmt|;
for|for
control|(
name|Service
name|s
range|:
name|aux
operator|.
name|getServices
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|STOPPED
argument_list|,
name|s
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAuxServicesMeta ()
specifier|public
name|void
name|testAuxServicesMeta
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICES
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Asrv"
block|,
literal|"Bsrv"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICE_FMT
argument_list|,
literal|"Asrv"
argument_list|)
argument_list|,
name|ServiceA
operator|.
name|class
argument_list|,
name|Service
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICE_FMT
argument_list|,
literal|"Bsrv"
argument_list|)
argument_list|,
name|ServiceB
operator|.
name|class
argument_list|,
name|Service
operator|.
name|class
argument_list|)
expr_stmt|;
specifier|final
name|AuxServices
name|aux
init|=
operator|new
name|AuxServices
argument_list|(
name|MOCK_AUX_PATH_HANDLER
argument_list|,
name|MOCK_CONTEXT
argument_list|,
name|MOCK_DEL_SERVICE
argument_list|)
decl_stmt|;
name|aux
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|latch
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Service
name|s
range|:
name|aux
operator|.
name|getServices
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|INITED
argument_list|,
name|s
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|instanceof
name|ServiceA
condition|)
block|{
name|latch
operator|*=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|instanceof
name|ServiceB
condition|)
block|{
name|latch
operator|*=
literal|3
expr_stmt|;
block|}
else|else
name|fail
argument_list|(
literal|"Unexpected service type "
operator|+
name|s
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Invalid mix of services"
argument_list|,
literal|6
argument_list|,
name|latch
argument_list|)
expr_stmt|;
name|aux
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|Service
name|s
range|:
name|aux
operator|.
name|getServices
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|STARTED
argument_list|,
name|s
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|meta
init|=
name|aux
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|meta
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
operator|new
name|String
argument_list|(
name|meta
operator|.
name|get
argument_list|(
literal|"Asrv"
argument_list|)
operator|.
name|array
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"B"
argument_list|,
operator|new
name|String
argument_list|(
name|meta
operator|.
name|get
argument_list|(
literal|"Bsrv"
argument_list|)
operator|.
name|array
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|aux
operator|.
name|stop
argument_list|()
expr_stmt|;
for|for
control|(
name|Service
name|s
range|:
name|aux
operator|.
name|getServices
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|STOPPED
argument_list|,
name|s
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAuxUnexpectedStop ()
specifier|public
name|void
name|testAuxUnexpectedStop
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICES
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Asrv"
block|,
literal|"Bsrv"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICE_FMT
argument_list|,
literal|"Asrv"
argument_list|)
argument_list|,
name|ServiceA
operator|.
name|class
argument_list|,
name|Service
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICE_FMT
argument_list|,
literal|"Bsrv"
argument_list|)
argument_list|,
name|ServiceB
operator|.
name|class
argument_list|,
name|Service
operator|.
name|class
argument_list|)
expr_stmt|;
specifier|final
name|AuxServices
name|aux
init|=
operator|new
name|AuxServices
argument_list|(
name|MOCK_AUX_PATH_HANDLER
argument_list|,
name|MOCK_CONTEXT
argument_list|,
name|MOCK_DEL_SERVICE
argument_list|)
decl_stmt|;
name|aux
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|aux
operator|.
name|start
argument_list|()
expr_stmt|;
name|Service
name|s
init|=
name|aux
operator|.
name|getServices
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|s
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Auxiliary service stopped, but AuxService unaffected."
argument_list|,
name|STOPPED
argument_list|,
name|aux
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|aux
operator|.
name|getServices
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidAuxServiceName ()
specifier|public
name|void
name|testValidAuxServiceName
parameter_list|()
block|{
specifier|final
name|AuxServices
name|aux
init|=
operator|new
name|AuxServices
argument_list|(
name|MOCK_AUX_PATH_HANDLER
argument_list|,
name|MOCK_CONTEXT
argument_list|,
name|MOCK_DEL_SERVICE
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICES
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Asrv1"
block|,
literal|"Bsrv_2"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICE_FMT
argument_list|,
literal|"Asrv1"
argument_list|)
argument_list|,
name|ServiceA
operator|.
name|class
argument_list|,
name|Service
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICE_FMT
argument_list|,
literal|"Bsrv_2"
argument_list|)
argument_list|,
name|ServiceB
operator|.
name|class
argument_list|,
name|Service
operator|.
name|class
argument_list|)
expr_stmt|;
try|try
block|{
name|aux
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not receive the exception."
argument_list|)
expr_stmt|;
block|}
comment|//Test bad auxService Name
specifier|final
name|AuxServices
name|aux1
init|=
operator|new
name|AuxServices
argument_list|(
name|MOCK_AUX_PATH_HANDLER
argument_list|,
name|MOCK_CONTEXT
argument_list|,
name|MOCK_DEL_SERVICE
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICES
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1Asrv1"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICE_FMT
argument_list|,
literal|"1Asrv1"
argument_list|)
argument_list|,
name|ServiceA
operator|.
name|class
argument_list|,
name|Service
operator|.
name|class
argument_list|)
expr_stmt|;
try|try
block|{
name|aux1
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should receive the exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"The ServiceName: 1Asrv1 set in "
operator|+
literal|"yarn.nodemanager.aux-services is invalid.The valid service name "
operator|+
literal|"should only contain a-zA-Z0-9_ and can not start with numbers"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAuxServiceRecoverySetup ()
specifier|public
name|void
name|testAuxServiceRecoverySetup
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_DIR
argument_list|,
name|TEST_DIR
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICES
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Asrv"
block|,
literal|"Bsrv"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICE_FMT
argument_list|,
literal|"Asrv"
argument_list|)
argument_list|,
name|RecoverableServiceA
operator|.
name|class
argument_list|,
name|Service
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICE_FMT
argument_list|,
literal|"Bsrv"
argument_list|)
argument_list|,
name|RecoverableServiceB
operator|.
name|class
argument_list|,
name|Service
operator|.
name|class
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|AuxServices
name|aux
init|=
operator|new
name|AuxServices
argument_list|(
name|MOCK_AUX_PATH_HANDLER
argument_list|,
name|MOCK_CONTEXT
argument_list|,
name|MOCK_DEL_SERVICE
argument_list|)
decl_stmt|;
name|aux
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|aux
operator|.
name|getServices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|auxStorageDir
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
name|AuxServices
operator|.
name|STATE_STORE_ROOT_NAME
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|auxStorageDir
operator|.
name|listFiles
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|aux
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|TEST_DIR
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RecoverableAuxService
specifier|static
class|class
name|RecoverableAuxService
extends|extends
name|AuxiliaryService
block|{
DECL|field|RECOVERY_PATH_PERMS
specifier|static
specifier|final
name|FsPermission
name|RECOVERY_PATH_PERMS
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
decl_stmt|;
DECL|field|auxName
name|String
name|auxName
decl_stmt|;
DECL|method|RecoverableAuxService (String name, String auxName)
name|RecoverableAuxService
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|auxName
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|auxName
operator|=
name|auxName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Path
name|storagePath
init|=
name|getRecoveryPath
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Recovery path not present when aux service inits"
argument_list|,
name|storagePath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|storagePath
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|auxName
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Recovery path does not exist"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|storagePath
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Recovery path has wrong permissions"
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|storagePath
argument_list|)
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initializeApplication ( ApplicationInitializationContext initAppContext)
specifier|public
name|void
name|initializeApplication
parameter_list|(
name|ApplicationInitializationContext
name|initAppContext
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|stopApplication (ApplicationTerminationContext stopAppContext)
specifier|public
name|void
name|stopApplication
parameter_list|(
name|ApplicationTerminationContext
name|stopAppContext
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|getMetaData ()
specifier|public
name|ByteBuffer
name|getMetaData
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|class|RecoverableServiceA
specifier|static
class|class
name|RecoverableServiceA
extends|extends
name|RecoverableAuxService
block|{
DECL|method|RecoverableServiceA ()
name|RecoverableServiceA
parameter_list|()
block|{
name|super
argument_list|(
literal|"RecoverableServiceA"
argument_list|,
literal|"Asrv"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RecoverableServiceB
specifier|static
class|class
name|RecoverableServiceB
extends|extends
name|RecoverableAuxService
block|{
DECL|method|RecoverableServiceB ()
name|RecoverableServiceB
parameter_list|()
block|{
name|super
argument_list|(
literal|"RecoverableServiceB"
argument_list|,
literal|"Bsrv"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ConfChangeAuxService
specifier|static
class|class
name|ConfChangeAuxService
extends|extends
name|AuxiliaryService
implements|implements
name|Service
block|{
DECL|method|ConfChangeAuxService ()
name|ConfChangeAuxService
parameter_list|()
block|{
name|super
argument_list|(
literal|"ConfChangeAuxService"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"dummyConfig"
argument_list|,
literal|"changedTestValue"
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initializeApplication ( ApplicationInitializationContext initAppContext)
specifier|public
name|void
name|initializeApplication
parameter_list|(
name|ApplicationInitializationContext
name|initAppContext
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|stopApplication (ApplicationTerminationContext stopAppContext)
specifier|public
name|void
name|stopApplication
parameter_list|(
name|ApplicationTerminationContext
name|stopAppContext
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|getMetaData ()
specifier|public
name|ByteBuffer
name|getMetaData
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAuxServicesConfChange ()
specifier|public
name|void
name|testAuxServicesConfChange
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICES
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ConfChangeAuxService"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICE_FMT
argument_list|,
literal|"ConfChangeAuxService"
argument_list|)
argument_list|,
name|ConfChangeAuxService
operator|.
name|class
argument_list|,
name|Service
operator|.
name|class
argument_list|)
expr_stmt|;
name|AuxServices
name|aux
init|=
operator|new
name|AuxServices
argument_list|(
name|MOCK_AUX_PATH_HANDLER
argument_list|,
name|MOCK_CONTEXT
argument_list|,
name|MOCK_DEL_SERVICE
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dummyConfig"
argument_list|,
literal|"testValue"
argument_list|)
expr_stmt|;
name|aux
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|aux
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|AuxiliaryService
name|s
range|:
name|aux
operator|.
name|getServices
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|STARTED
argument_list|,
name|s
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"dummyConfig"
argument_list|)
argument_list|,
literal|"testValue"
argument_list|)
expr_stmt|;
block|}
name|aux
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

