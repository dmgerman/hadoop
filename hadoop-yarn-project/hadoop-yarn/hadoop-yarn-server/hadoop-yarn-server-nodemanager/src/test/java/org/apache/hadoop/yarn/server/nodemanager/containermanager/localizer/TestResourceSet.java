begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalizationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalizationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Tests of {@link ResourceSet}.  */
end_comment

begin_class
DECL|class|TestResourceSet
specifier|public
class|class
name|TestResourceSet
block|{
annotation|@
name|Test
DECL|method|testGetPendingLS ()
specifier|public
name|void
name|testGetPendingLS
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|ResourceSet
name|resourceSet
init|=
operator|new
name|ResourceSet
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|resources
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|resources
operator|.
name|put
argument_list|(
literal|"resource1"
argument_list|,
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|URL
operator|.
name|fromPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp/file1.txt"
argument_list|)
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
literal|0
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|resourceSet
operator|.
name|addResources
argument_list|(
name|resources
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"num statuses"
argument_list|,
literal|1
argument_list|,
name|resourceSet
operator|.
name|getLocalizationStatuses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LocalizationStatus
name|status
init|=
name|resourceSet
operator|.
name|getLocalizationStatuses
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"status"
argument_list|,
name|LocalizationState
operator|.
name|PENDING
argument_list|,
name|status
operator|.
name|getLocalizationState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetCompletedLS ()
specifier|public
name|void
name|testGetCompletedLS
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|ResourceSet
name|resourceSet
init|=
operator|new
name|ResourceSet
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|resources
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|LocalResource
name|resource1
init|=
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|URL
operator|.
name|fromPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp/file1.txt"
argument_list|)
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
literal|0
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|resources
operator|.
name|put
argument_list|(
literal|"resource1"
argument_list|,
name|resource1
argument_list|)
expr_stmt|;
name|resourceSet
operator|.
name|addResources
argument_list|(
name|resources
argument_list|)
expr_stmt|;
name|LocalResourceRequest
name|lrr
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|resource1
argument_list|)
decl_stmt|;
name|resourceSet
operator|.
name|resourceLocalized
argument_list|(
name|lrr
argument_list|,
operator|new
name|Path
argument_list|(
literal|"file1.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"num statuses"
argument_list|,
literal|1
argument_list|,
name|resourceSet
operator|.
name|getLocalizationStatuses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LocalizationStatus
name|status
init|=
name|resourceSet
operator|.
name|getLocalizationStatuses
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"status"
argument_list|,
name|LocalizationState
operator|.
name|COMPLETED
argument_list|,
name|status
operator|.
name|getLocalizationState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetFailedLS ()
specifier|public
name|void
name|testGetFailedLS
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|ResourceSet
name|resourceSet
init|=
operator|new
name|ResourceSet
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|resources
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|LocalResource
name|resource1
init|=
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|URL
operator|.
name|fromPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp/file1.txt"
argument_list|)
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
literal|0
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|resources
operator|.
name|put
argument_list|(
literal|"resource1"
argument_list|,
name|resource1
argument_list|)
expr_stmt|;
name|resourceSet
operator|.
name|addResources
argument_list|(
name|resources
argument_list|)
expr_stmt|;
name|LocalResourceRequest
name|lrr
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|resource1
argument_list|)
decl_stmt|;
name|resourceSet
operator|.
name|resourceLocalizationFailed
argument_list|(
name|lrr
argument_list|,
literal|"file does not exist"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"num statuses"
argument_list|,
literal|1
argument_list|,
name|resourceSet
operator|.
name|getLocalizationStatuses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LocalizationStatus
name|status
init|=
name|resourceSet
operator|.
name|getLocalizationStatuses
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"status"
argument_list|,
name|LocalizationState
operator|.
name|FAILED
argument_list|,
name|status
operator|.
name|getLocalizationState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"diagnostics"
argument_list|,
literal|"file does not exist"
argument_list|,
name|status
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

