begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * *  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements. See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership. The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License. You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  * /  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.resources
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verifyNoMoreInteractions
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verifyZeroInteractions
import|;
end_import

begin_comment
comment|/**  * Tests for the CGroups handler implementation.  */
end_comment

begin_class
DECL|class|TestCGroupsHandlerImpl
specifier|public
class|class
name|TestCGroupsHandlerImpl
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestCGroupsHandlerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|privilegedOperationExecutorMock
specifier|private
name|PrivilegedOperationExecutor
name|privilegedOperationExecutorMock
decl_stmt|;
DECL|field|tmpPath
specifier|private
name|String
name|tmpPath
decl_stmt|;
DECL|field|hierarchy
specifier|private
name|String
name|hierarchy
decl_stmt|;
DECL|field|controller
specifier|private
name|CGroupsHandler
operator|.
name|CGroupController
name|controller
decl_stmt|;
DECL|field|controllerPath
specifier|private
name|String
name|controllerPath
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|privilegedOperationExecutorMock
operator|=
name|mock
argument_list|(
name|PrivilegedOperationExecutor
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Prepare test directory
name|tmpPath
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|)
operator|+
literal|"/cgroups"
expr_stmt|;
name|File
name|tmpDir
init|=
operator|new
name|File
argument_list|(
name|tmpPath
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|tmpDir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tmpDir
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
comment|//no leading or trailing slashes here
name|hierarchy
operator|=
literal|"test-hadoop-yarn"
expr_stmt|;
comment|// Sample subsystem. Not used by all the tests
name|controller
operator|=
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|NET_CLS
expr_stmt|;
name|controllerPath
operator|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|tmpPath
argument_list|,
name|controller
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|hierarchy
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|tmpPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Security manager simulating access denied.    */
DECL|class|MockSecurityManagerDenyWrite
specifier|private
class|class
name|MockSecurityManagerDenyWrite
extends|extends
name|SecurityManager
block|{
annotation|@
name|Override
DECL|method|checkPermission (Permission perm)
specifier|public
name|void
name|checkPermission
parameter_list|(
name|Permission
name|perm
parameter_list|)
block|{
if|if
condition|(
name|perm
operator|.
name|getActions
argument_list|()
operator|.
name|equals
argument_list|(
literal|"write"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"Mock not allowed"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Create configuration to mount cgroups that do not exist.    * @return configuration object    */
DECL|method|createMountConfiguration ()
specifier|private
name|YarnConfiguration
name|createMountConfiguration
parameter_list|()
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LINUX_CONTAINER_CGROUPS_HIERARCHY
argument_list|,
name|hierarchy
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LINUX_CONTAINER_CGROUPS_MOUNT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LINUX_CONTAINER_CGROUPS_MOUNT_PATH
argument_list|,
name|tmpPath
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * Create configuration where the cgroups are premounted.    * @param myHierarchy YARN cgroup    * @return configuration object    */
DECL|method|createNoMountConfiguration (String myHierarchy)
specifier|private
name|Configuration
name|createNoMountConfiguration
parameter_list|(
name|String
name|myHierarchy
parameter_list|)
block|{
name|Configuration
name|confNoMount
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|confNoMount
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LINUX_CONTAINER_CGROUPS_HIERARCHY
argument_list|,
name|myHierarchy
argument_list|)
expr_stmt|;
name|confNoMount
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LINUX_CONTAINER_CGROUPS_MOUNT
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|confNoMount
return|;
block|}
comment|/**    * Create an empty mtab file. No cgroups are premounted    * @return mtab file    * @throws IOException could not create file    */
DECL|method|createEmptyCgroups ()
specifier|private
name|File
name|createEmptyCgroups
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|emptyMtab
init|=
operator|new
name|File
argument_list|(
name|tmpPath
argument_list|,
literal|"mtab"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"New file should have been created"
argument_list|,
name|emptyMtab
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|emptyMtab
return|;
block|}
comment|/**    * Create simulated cgroups mount point.    * @param parentDir cgroups mount point    * @param cpuAcct simulate newer Linux behavior by mounting cpu with cpuacct    * @return simulated mtab file location    * @throws IOException mtab file was not created    */
DECL|method|createPremountedCgroups (File parentDir, boolean cpuAcct)
specifier|public
specifier|static
name|File
name|createPremountedCgroups
parameter_list|(
name|File
name|parentDir
parameter_list|,
name|boolean
name|cpuAcct
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Mark an empty directory called 'cp' cgroup. It is processed before 'cpu'
name|String
name|cpuMtabContentMissing
init|=
literal|"none "
operator|+
name|parentDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/cp cgroup rw,relatime,cpu 0 0\n"
decl_stmt|;
name|File
name|cpuCgroup
init|=
operator|new
name|File
argument_list|(
name|parentDir
argument_list|,
literal|"cpu"
argument_list|)
decl_stmt|;
name|String
name|cpuMtabContent
init|=
literal|"none "
operator|+
name|cpuCgroup
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" cgroup rw,relatime,cpu"
operator|+
operator|(
name|cpuAcct
condition|?
literal|",cpuacct"
else|:
literal|""
operator|)
operator|+
literal|" 0 0\n"
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Directory should be created"
argument_list|,
name|cpuCgroup
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|blkioCgroup
init|=
operator|new
name|File
argument_list|(
name|parentDir
argument_list|,
literal|"blkio"
argument_list|)
decl_stmt|;
name|String
name|blkioMtabContent
init|=
literal|"none "
operator|+
name|blkioCgroup
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" cgroup rw,relatime,blkio 0 0\n"
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Directory should be created"
argument_list|,
name|blkioCgroup
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|mockMtab
init|=
operator|new
name|File
argument_list|(
name|parentDir
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|mockMtab
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|mockMtab
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
name|String
name|message
init|=
literal|"Could not create file "
operator|+
name|mockMtab
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
name|FileWriter
name|mtabWriter
init|=
operator|new
name|FileWriter
argument_list|(
name|mockMtab
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
decl_stmt|;
name|mtabWriter
operator|.
name|write
argument_list|(
name|cpuMtabContentMissing
argument_list|)
expr_stmt|;
name|mtabWriter
operator|.
name|write
argument_list|(
name|cpuMtabContent
argument_list|)
expr_stmt|;
name|mtabWriter
operator|.
name|write
argument_list|(
name|blkioMtabContent
argument_list|)
expr_stmt|;
name|mtabWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|mockMtab
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
return|return
name|mockMtab
return|;
block|}
annotation|@
name|Test
DECL|method|testMountController ()
specifier|public
name|void
name|testMountController
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|parentDir
init|=
operator|new
name|File
argument_list|(
name|tmpPath
argument_list|)
decl_stmt|;
name|File
name|cgroup
init|=
operator|new
name|File
argument_list|(
name|parentDir
argument_list|,
name|controller
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"cgroup dir should be cerated"
argument_list|,
name|cgroup
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
comment|//Since we enabled (deferred) cgroup controller mounting, no interactions
comment|//should have occurred, with this mock
name|verifyZeroInteractions
argument_list|(
name|privilegedOperationExecutorMock
argument_list|)
expr_stmt|;
name|File
name|emptyMtab
init|=
name|createEmptyCgroups
argument_list|()
decl_stmt|;
try|try
block|{
name|CGroupsHandler
name|cGroupsHandler
init|=
operator|new
name|CGroupsHandlerImpl
argument_list|(
name|createMountConfiguration
argument_list|()
argument_list|,
name|privilegedOperationExecutorMock
argument_list|,
name|emptyMtab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|PrivilegedOperation
name|expectedOp
init|=
operator|new
name|PrivilegedOperation
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|MOUNT_CGROUPS
argument_list|)
decl_stmt|;
comment|//This is expected to be of the form :
comment|//net_cls=<mount_path>/net_cls
name|String
name|controllerKV
init|=
name|controller
operator|.
name|getName
argument_list|()
operator|+
literal|"="
operator|+
name|tmpPath
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|controller
operator|.
name|getName
argument_list|()
decl_stmt|;
name|expectedOp
operator|.
name|appendArgs
argument_list|(
name|hierarchy
argument_list|,
name|controllerKV
argument_list|)
expr_stmt|;
name|cGroupsHandler
operator|.
name|initializeCGroupController
argument_list|(
name|controller
argument_list|)
expr_stmt|;
try|try
block|{
name|ArgumentCaptor
argument_list|<
name|PrivilegedOperation
argument_list|>
name|opCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|PrivilegedOperation
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|privilegedOperationExecutorMock
argument_list|)
operator|.
name|executePrivilegedOperation
argument_list|(
name|opCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|//we'll explicitly capture and assert that the
comment|//captured op and the expected op are identical.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedOp
argument_list|,
name|opCaptor
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|privilegedOperationExecutorMock
argument_list|)
expr_stmt|;
comment|//Try mounting the same controller again - this should be a no-op
name|cGroupsHandler
operator|.
name|initializeCGroupController
argument_list|(
name|controller
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|privilegedOperationExecutorMock
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PrivilegedOperationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected PrivilegedOperationException from mock!"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ResourceHandlerException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected ResourceHandler Exception!"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCGroupPaths ()
specifier|public
name|void
name|testCGroupPaths
parameter_list|()
throws|throws
name|IOException
block|{
comment|//As per junit behavior, we expect a new mock object to be available
comment|//in this test.
name|verifyZeroInteractions
argument_list|(
name|privilegedOperationExecutorMock
argument_list|)
expr_stmt|;
name|CGroupsHandler
name|cGroupsHandler
init|=
literal|null
decl_stmt|;
name|File
name|mtab
init|=
name|createEmptyCgroups
argument_list|()
decl_stmt|;
comment|// Lets manually create a path to (partially) simulate a controller mounted
comment|// later in the test. This is required because the handler uses a mocked
comment|// privileged operation executor
name|assertTrue
argument_list|(
literal|"Sample subsystem should be created"
argument_list|,
operator|new
name|File
argument_list|(
name|controllerPath
argument_list|)
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cGroupsHandler
operator|=
operator|new
name|CGroupsHandlerImpl
argument_list|(
name|createMountConfiguration
argument_list|()
argument_list|,
name|privilegedOperationExecutorMock
argument_list|,
name|mtab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|cGroupsHandler
operator|.
name|initializeCGroupController
argument_list|(
name|controller
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceHandlerException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected ResourceHandlerException when mounting controller!"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|String
name|testCGroup
init|=
literal|"container_01"
decl_stmt|;
name|String
name|expectedPath
init|=
name|controllerPath
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|testCGroup
decl_stmt|;
name|String
name|path
init|=
name|cGroupsHandler
operator|.
name|getPathForCGroup
argument_list|(
name|controller
argument_list|,
name|testCGroup
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedPath
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|String
name|expectedPathTasks
init|=
name|expectedPath
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|CGroupsHandler
operator|.
name|CGROUP_FILE_TASKS
decl_stmt|;
name|path
operator|=
name|cGroupsHandler
operator|.
name|getPathForCGroupTasks
argument_list|(
name|controller
argument_list|,
name|testCGroup
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedPathTasks
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|String
name|param
init|=
name|CGroupsHandler
operator|.
name|CGROUP_PARAM_CLASSID
decl_stmt|;
name|String
name|expectedPathParam
init|=
name|expectedPath
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|controller
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|param
decl_stmt|;
name|path
operator|=
name|cGroupsHandler
operator|.
name|getPathForCGroupParam
argument_list|(
name|controller
argument_list|,
name|testCGroup
argument_list|,
name|param
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedPathParam
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCGroupOperations ()
specifier|public
name|void
name|testCGroupOperations
parameter_list|()
throws|throws
name|IOException
block|{
comment|//As per junit behavior, we expect a new mock object to be available
comment|//in this test.
name|verifyZeroInteractions
argument_list|(
name|privilegedOperationExecutorMock
argument_list|)
expr_stmt|;
name|CGroupsHandler
name|cGroupsHandler
init|=
literal|null
decl_stmt|;
name|File
name|mtab
init|=
name|createEmptyCgroups
argument_list|()
decl_stmt|;
comment|// Lets manually create a path to (partially) simulate a controller mounted
comment|// later in the test. This is required because the handler uses a mocked
comment|// privileged operation executor
name|assertTrue
argument_list|(
literal|"Sample subsystem should be created"
argument_list|,
operator|new
name|File
argument_list|(
name|controllerPath
argument_list|)
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cGroupsHandler
operator|=
operator|new
name|CGroupsHandlerImpl
argument_list|(
name|createMountConfiguration
argument_list|()
argument_list|,
name|privilegedOperationExecutorMock
argument_list|,
name|mtab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|cGroupsHandler
operator|.
name|initializeCGroupController
argument_list|(
name|controller
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceHandlerException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected ResourceHandlerException when mounting controller!"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|String
name|testCGroup
init|=
literal|"container_01"
decl_stmt|;
name|String
name|expectedPath
init|=
name|controllerPath
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|testCGroup
decl_stmt|;
try|try
block|{
name|String
name|path
init|=
name|cGroupsHandler
operator|.
name|createCGroup
argument_list|(
name|controller
argument_list|,
name|testCGroup
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|expectedPath
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedPath
argument_list|,
name|path
argument_list|)
expr_stmt|;
comment|//update param and read param tests.
comment|//We don't use net_cls.classid because as a test param here because
comment|//cgroups provides very specific read/write semantics for classid (only
comment|//numbers can be written - potentially as hex but can be read out only
comment|//as decimal)
name|String
name|param
init|=
literal|"test_param"
decl_stmt|;
name|String
name|paramValue
init|=
literal|"test_param_value"
decl_stmt|;
name|cGroupsHandler
operator|.
name|updateCGroupParam
argument_list|(
name|controller
argument_list|,
name|testCGroup
argument_list|,
name|param
argument_list|,
name|paramValue
argument_list|)
expr_stmt|;
name|String
name|paramPath
init|=
name|expectedPath
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|controller
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|param
decl_stmt|;
name|File
name|paramFile
init|=
operator|new
name|File
argument_list|(
name|paramPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|paramFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|paramValue
argument_list|,
operator|new
name|String
argument_list|(
name|Files
operator|.
name|readAllBytes
argument_list|(
name|paramFile
operator|.
name|toPath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected IOException trying to read cgroup param!"
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|paramValue
argument_list|,
name|cGroupsHandler
operator|.
name|getCGroupParam
argument_list|(
name|controller
argument_list|,
name|testCGroup
argument_list|,
name|param
argument_list|)
argument_list|)
expr_stmt|;
comment|//We can't really do a delete test here. Linux cgroups
comment|//implementation provides additional semantics - the cgroup cannot be
comment|//deleted if there are any tasks still running in the cgroup even if
comment|//the user attempting the delete has the file permissions to do so - we
comment|//cannot simulate that here. Even if we create a dummy 'tasks' file, we
comment|//wouldn't be able to simulate the delete behavior we need, since a cgroup
comment|//can be deleted using using 'rmdir' if the tasks file is empty. Such a
comment|//delete is not possible with a regular non-empty directory.
block|}
catch|catch
parameter_list|(
name|ResourceHandlerException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected ResourceHandlerException during cgroup operations!"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests whether mtab parsing works as expected with a valid hierarchy set.    * @throws Exception the test will fail    */
annotation|@
name|Test
DECL|method|testMtabParsing ()
specifier|public
name|void
name|testMtabParsing
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Initialize mtab and cgroup dir
name|File
name|parentDir
init|=
operator|new
name|File
argument_list|(
name|tmpPath
argument_list|)
decl_stmt|;
comment|// create mock cgroup
name|File
name|mockMtabFile
init|=
name|createPremountedCgroups
argument_list|(
name|parentDir
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Run mtabs parsing
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|newMtab
init|=
name|CGroupsHandlerImpl
operator|.
name|parseMtab
argument_list|(
name|mockMtabFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|CGroupsHandler
operator|.
name|CGroupController
argument_list|,
name|String
argument_list|>
name|controllerPaths
init|=
name|CGroupsHandlerImpl
operator|.
name|initializeControllerPathsFromMtab
argument_list|(
name|newMtab
argument_list|)
decl_stmt|;
comment|// Verify
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|controllerPaths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|controllerPaths
operator|.
name|containsKey
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|controllerPaths
operator|.
name|containsKey
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|BLKIO
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|cpuDir
init|=
name|controllerPaths
operator|.
name|get
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|)
decl_stmt|;
name|String
name|blkioDir
init|=
name|controllerPaths
operator|.
name|get
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|BLKIO
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|parentDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/cpu"
argument_list|,
name|cpuDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|parentDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/blkio"
argument_list|,
name|blkioDir
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests whether mtab parsing works as expected with the specified hierarchy.    * @param myHierarchy path to local cgroup hierarchy    * @throws Exception the test will fail    */
DECL|method|testPreMountedControllerInitialization (String myHierarchy)
specifier|private
name|void
name|testPreMountedControllerInitialization
parameter_list|(
name|String
name|myHierarchy
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Initialize mount point
name|File
name|parentDir
init|=
operator|new
name|File
argument_list|(
name|tmpPath
argument_list|)
decl_stmt|;
name|File
name|mtab
init|=
name|createPremountedCgroups
argument_list|(
name|parentDir
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|File
name|mountPoint
init|=
operator|new
name|File
argument_list|(
name|parentDir
argument_list|,
literal|"cpu"
argument_list|)
decl_stmt|;
comment|// Initialize YARN classes
name|Configuration
name|confNoMount
init|=
name|createNoMountConfiguration
argument_list|(
name|myHierarchy
argument_list|)
decl_stmt|;
name|CGroupsHandlerImpl
name|cGroupsHandler
init|=
operator|new
name|CGroupsHandlerImpl
argument_list|(
name|confNoMount
argument_list|,
name|privilegedOperationExecutorMock
argument_list|,
name|mtab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|cpuCgroupMountDir
init|=
operator|new
name|File
argument_list|(
name|cGroupsHandler
operator|.
name|getPathForCGroup
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
comment|// Test that a missing yarn hierarchy will be created automatically
if|if
condition|(
operator|!
name|cpuCgroupMountDir
operator|.
name|equals
argument_list|(
name|mountPoint
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Directory should be deleted"
argument_list|,
operator|!
name|cpuCgroupMountDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cGroupsHandler
operator|.
name|initializeCGroupController
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Cgroups not writable"
argument_list|,
name|cpuCgroupMountDir
operator|.
name|exists
argument_list|()
operator|&&
name|cpuCgroupMountDir
operator|.
name|canWrite
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test that an inaccessible yarn hierarchy results in an exception
name|assertTrue
argument_list|(
name|cpuCgroupMountDir
operator|.
name|setWritable
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|cGroupsHandler
operator|.
name|initializeCGroupController
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"An inaccessible path should result in an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Unexpected exception "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|e
operator|instanceof
name|ResourceHandlerException
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|assertTrue
argument_list|(
literal|"Could not revert writable permission"
argument_list|,
name|cpuCgroupMountDir
operator|.
name|setWritable
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Test that a non-accessible mount directory results in an exception
if|if
condition|(
operator|!
name|cpuCgroupMountDir
operator|.
name|equals
argument_list|(
name|mountPoint
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Could not delete cgroups"
argument_list|,
name|cpuCgroupMountDir
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Directory should be deleted"
argument_list|,
operator|!
name|cpuCgroupMountDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|mountPoint
operator|.
name|setWritable
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|cGroupsHandler
operator|.
name|initializeCGroupController
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"An inaccessible path should result in an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Unexpected exception "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|e
operator|instanceof
name|ResourceHandlerException
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|assertTrue
argument_list|(
literal|"Could not revert writable permission"
argument_list|,
name|mountPoint
operator|.
name|setWritable
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Test that a SecurityException results in an exception
if|if
condition|(
operator|!
name|cpuCgroupMountDir
operator|.
name|equals
argument_list|(
name|mountPoint
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Could not delete cgroups"
argument_list|,
name|cpuCgroupMountDir
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Directory should be deleted"
argument_list|,
operator|!
name|cpuCgroupMountDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|SecurityManager
name|manager
init|=
name|System
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
name|System
operator|.
name|setSecurityManager
argument_list|(
operator|new
name|MockSecurityManagerDenyWrite
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cGroupsHandler
operator|.
name|initializeCGroupController
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"An inaccessible path should result in an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Unexpected exception "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|e
operator|instanceof
name|ResourceHandlerException
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setSecurityManager
argument_list|(
name|manager
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Test that a non-existing mount directory results in an exception
if|if
condition|(
operator|!
name|cpuCgroupMountDir
operator|.
name|equals
argument_list|(
name|mountPoint
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Could not delete cgroups"
argument_list|,
name|cpuCgroupMountDir
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Directory should be deleted"
argument_list|,
operator|!
name|cpuCgroupMountDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|mountPoint
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cgroups mount point should be deleted"
argument_list|,
operator|!
name|mountPoint
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cGroupsHandler
operator|.
name|initializeCGroupController
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"An inaccessible path should result in an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Unexpected exception "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|e
operator|instanceof
name|ResourceHandlerException
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSelectCgroup ()
specifier|public
name|void
name|testSelectCgroup
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|cpu
init|=
operator|new
name|File
argument_list|(
name|tmpPath
argument_list|,
literal|"cpu"
argument_list|)
decl_stmt|;
name|File
name|cpuNoExist
init|=
operator|new
name|File
argument_list|(
name|tmpPath
argument_list|,
literal|"cpuNoExist"
argument_list|)
decl_stmt|;
name|File
name|memory
init|=
operator|new
name|File
argument_list|(
name|tmpPath
argument_list|,
literal|"memory"
argument_list|)
decl_stmt|;
try|try
block|{
name|CGroupsHandlerImpl
name|handler
init|=
operator|new
name|CGroupsHandlerImpl
argument_list|(
name|createNoMountConfiguration
argument_list|(
name|tmpPath
argument_list|)
argument_list|,
name|privilegedOperationExecutorMock
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|cgroups
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"temp dir should be created"
argument_list|,
name|cpu
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"temp dir should be created"
argument_list|,
name|memory
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"temp dir should not be created"
argument_list|,
name|cpuNoExist
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|cgroups
operator|.
name|put
argument_list|(
name|memory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"memory"
argument_list|)
argument_list|)
expr_stmt|;
name|cgroups
operator|.
name|put
argument_list|(
name|cpuNoExist
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"cpu"
argument_list|)
argument_list|)
expr_stmt|;
name|cgroups
operator|.
name|put
argument_list|(
name|cpu
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"cpu"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|selectedCPU
init|=
name|handler
operator|.
name|findControllerInMtab
argument_list|(
literal|"cpu"
argument_list|,
name|cgroups
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Wrong CPU mount point selected"
argument_list|,
name|cpu
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|selectedCPU
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|cpu
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|memory
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests whether mtab parsing works as expected with an empty hierarchy set.    * @throws Exception the test will fail    */
annotation|@
name|Test
DECL|method|testPreMountedControllerEmpty ()
specifier|public
name|void
name|testPreMountedControllerEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|testPreMountedControllerInitialization
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests whether mtab parsing works as expected with a / hierarchy set.    * @throws Exception the test will fail    */
annotation|@
name|Test
DECL|method|testPreMountedControllerRoot ()
specifier|public
name|void
name|testPreMountedControllerRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|testPreMountedControllerInitialization
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests whether mtab parsing works as expected with the specified hierarchy.    * @throws Exception the test will fail    */
annotation|@
name|Test
DECL|method|testRemount ()
specifier|public
name|void
name|testRemount
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Initialize mount point
name|File
name|parentDir
init|=
operator|new
name|File
argument_list|(
name|tmpPath
argument_list|)
decl_stmt|;
specifier|final
name|String
name|oldMountPointDir
init|=
literal|"oldmount"
decl_stmt|;
specifier|final
name|String
name|newMountPointDir
init|=
literal|"newmount"
decl_stmt|;
name|File
name|oldMountPoint
init|=
operator|new
name|File
argument_list|(
name|parentDir
argument_list|,
name|oldMountPointDir
argument_list|)
decl_stmt|;
name|File
name|mtab
init|=
name|createPremountedCgroups
argument_list|(
name|oldMountPoint
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|File
name|newMountPoint
init|=
operator|new
name|File
argument_list|(
name|parentDir
argument_list|,
name|newMountPointDir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Could not create dirs"
argument_list|,
operator|new
name|File
argument_list|(
name|newMountPoint
argument_list|,
literal|"cpu"
argument_list|)
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
comment|// Initialize YARN classes
name|Configuration
name|confMount
init|=
name|createMountConfiguration
argument_list|()
decl_stmt|;
name|confMount
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LINUX_CONTAINER_CGROUPS_MOUNT_PATH
argument_list|,
name|parentDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|newMountPointDir
argument_list|)
expr_stmt|;
name|CGroupsHandlerImpl
name|cGroupsHandler
init|=
operator|new
name|CGroupsHandlerImpl
argument_list|(
name|confMount
argument_list|,
name|privilegedOperationExecutorMock
argument_list|,
name|mtab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|cGroupsHandler
operator|.
name|initializeCGroupController
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|PrivilegedOperation
argument_list|>
name|opCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|PrivilegedOperation
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|privilegedOperationExecutorMock
argument_list|)
operator|.
name|executePrivilegedOperation
argument_list|(
name|opCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|hierarchyFile
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|newMountPoint
argument_list|,
literal|"cpu"
argument_list|)
argument_list|,
name|this
operator|.
name|hierarchy
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Yarn cgroup should exist"
argument_list|,
name|hierarchyFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testManualCgroupSetting ()
specifier|public
name|void
name|testManualCgroupSetting
parameter_list|()
throws|throws
name|ResourceHandlerException
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LINUX_CONTAINER_CGROUPS_MOUNT_PATH
argument_list|,
name|tmpPath
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LINUX_CONTAINER_CGROUPS_HIERARCHY
argument_list|,
literal|"/hadoop-yarn"
argument_list|)
expr_stmt|;
name|File
name|cpu
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|tmpPath
argument_list|,
literal|"cpuacct,cpu"
argument_list|)
argument_list|,
literal|"/hadoop-yarn"
argument_list|)
decl_stmt|;
try|try
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"temp dir should be created"
argument_list|,
name|cpu
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|CGroupsHandlerImpl
name|cGroupsHandler
init|=
operator|new
name|CGroupsHandlerImpl
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|cGroupsHandler
operator|.
name|initializeCGroupController
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"CPU CGRoup path was not set"
argument_list|,
name|cpu
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
operator|new
name|File
argument_list|(
name|cGroupsHandler
operator|.
name|getPathForCGroup
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|cpu
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

