begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.logaggregation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|logaggregation
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|isA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|atLeast
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|reset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|AbstractFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnsupportedFileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LogAggregationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|DrainDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|InlineDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|AggregatedLogFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|AggregatedLogFormat
operator|.
name|LogKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|AggregatedLogFormat
operator|.
name|LogReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|LogAggregationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|RMDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ContainerLogAggregationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ContainerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|CMgrCompletedAppsEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DeletionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|LocalDirsHandlerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeManager
operator|.
name|NMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|BaseContainerManagerTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|TestContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|loghandler
operator|.
name|TestNonAggregatingLogHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|loghandler
operator|.
name|event
operator|.
name|LogHandlerAppFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|loghandler
operator|.
name|event
operator|.
name|LogHandlerAppStartedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|loghandler
operator|.
name|event
operator|.
name|LogHandlerContainerFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|executor
operator|.
name|DeletionAsUserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|util
operator|.
name|MultiException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|//@Ignore
end_comment

begin_class
DECL|class|TestLogAggregationService
specifier|public
class|class
name|TestLogAggregationService
extends|extends
name|BaseContainerManagerTest
block|{
DECL|field|acls
specifier|private
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
init|=
name|createAppAcls
argument_list|()
decl_stmt|;
static|static
block|{
name|LOG
operator|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestLogAggregationService
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|field|recordFactory
specifier|private
specifier|static
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|remoteRootLogDir
specifier|private
name|File
name|remoteRootLogDir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"-remoteLogDir"
argument_list|)
decl_stmt|;
DECL|method|TestLogAggregationService ()
specifier|public
name|TestLogAggregationService
parameter_list|()
throws|throws
name|UnsupportedFileSystemException
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|remoteRootLogDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
block|}
DECL|field|dispatcher
name|DrainDispatcher
name|dispatcher
decl_stmt|;
DECL|field|appEventHandler
name|EventHandler
argument_list|<
name|ApplicationEvent
argument_list|>
name|appEventHandler
decl_stmt|;
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"0.0.0.0"
argument_list|,
literal|5555
argument_list|)
decl_stmt|;
operator|(
operator|(
name|NMContext
operator|)
name|context
operator|)
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|dispatcher
operator|=
name|createDispatcher
argument_list|()
expr_stmt|;
name|appEventHandler
operator|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ApplicationEventType
operator|.
name|class
argument_list|,
name|appEventHandler
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|createContainerExecutor
argument_list|()
operator|.
name|deleteAsUser
argument_list|(
operator|new
name|DeletionAsUserContext
operator|.
name|Builder
argument_list|()
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
operator|.
name|setSubDir
argument_list|(
operator|new
name|Path
argument_list|(
name|remoteRootLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setBasedirs
argument_list|(
operator|new
name|Path
index|[]
block|{}
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|verifyLocalFileDeletion ( LogAggregationService logAggregationService)
specifier|private
name|void
name|verifyLocalFileDeletion
parameter_list|(
name|LogAggregationService
name|logAggregationService
parameter_list|)
throws|throws
name|Exception
block|{
name|logAggregationService
operator|.
name|init
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|start
argument_list|()
expr_stmt|;
name|ApplicationId
name|application1
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1234
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// AppLogDir should be created
name|File
name|app1LogDir
init|=
operator|new
name|File
argument_list|(
name|localLogDir
argument_list|,
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|application1
argument_list|)
argument_list|)
decl_stmt|;
name|app1LogDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppStartedEvent
argument_list|(
name|application1
argument_list|,
name|this
operator|.
name|user
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|acls
argument_list|)
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|application1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|container11
init|=
name|createContainer
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|,
name|ContainerType
operator|.
name|APPLICATION_MASTER
argument_list|)
decl_stmt|;
comment|// Simulate log-file creation
name|writeContainerLogs
argument_list|(
name|app1LogDir
argument_list|,
name|container11
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"stdout"
block|,
literal|"stderr"
block|,
literal|"syslog"
block|}
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerContainerFinishedEvent
argument_list|(
name|container11
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppFinishedEvent
argument_list|(
name|application1
argument_list|)
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logAggregationService
operator|.
name|getNumAggregators
argument_list|()
argument_list|)
expr_stmt|;
comment|// ensure filesystems were closed
name|verify
argument_list|(
name|logAggregationService
argument_list|)
operator|.
name|closeFileSystems
argument_list|(
name|any
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|delSrvc
argument_list|)
operator|.
name|delete
argument_list|(
name|eq
argument_list|(
name|user
argument_list|)
argument_list|,
name|eq
argument_list|(
operator|(
name|Path
operator|)
literal|null
argument_list|)
argument_list|,
name|eq
argument_list|(
operator|new
name|Path
argument_list|(
name|app1LogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|delSrvc
operator|.
name|stop
argument_list|()
expr_stmt|;
name|String
name|containerIdStr
init|=
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|container11
argument_list|)
decl_stmt|;
name|File
name|containerLogDir
init|=
operator|new
name|File
argument_list|(
name|app1LogDir
argument_list|,
name|containerIdStr
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|fileType
range|:
operator|new
name|String
index|[]
block|{
literal|"stdout"
block|,
literal|"stderr"
block|,
literal|"syslog"
block|}
control|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|containerLogDir
argument_list|,
name|fileType
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"check "
operator|+
name|f
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|app1LogDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|logFilePath
init|=
name|logAggregationService
operator|.
name|getRemoteNodeLogFileForApp
argument_list|(
name|application1
argument_list|,
name|this
operator|.
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Log file ["
operator|+
name|logFilePath
operator|+
literal|"] not found"
argument_list|,
operator|new
name|File
argument_list|(
name|logFilePath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|ApplicationEvent
name|expectedEvents
index|[]
init|=
operator|new
name|ApplicationEvent
index|[]
block|{
operator|new
name|ApplicationEvent
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_INITED
argument_list|)
block|,
operator|new
name|ApplicationEvent
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_FINISHED
argument_list|)
block|}
decl_stmt|;
name|checkEvents
argument_list|(
name|appEventHandler
argument_list|,
name|expectedEvents
argument_list|,
literal|true
argument_list|,
literal|"getType"
argument_list|,
literal|"getApplicationID"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocalFileDeletionAfterUpload ()
specifier|public
name|void
name|testLocalFileDeletionAfterUpload
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|delSrvc
operator|=
operator|new
name|DeletionService
argument_list|(
name|createContainerExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|delSrvc
operator|=
name|spy
argument_list|(
name|delSrvc
argument_list|)
expr_stmt|;
name|this
operator|.
name|delSrvc
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|localLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|this
operator|.
name|remoteRootLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|LogAggregationService
name|logAggregationService
init|=
name|spy
argument_list|(
operator|new
name|LogAggregationService
argument_list|(
name|dispatcher
argument_list|,
name|this
operator|.
name|context
argument_list|,
name|this
operator|.
name|delSrvc
argument_list|,
name|super
operator|.
name|dirsHandler
argument_list|)
argument_list|)
decl_stmt|;
name|verifyLocalFileDeletion
argument_list|(
name|logAggregationService
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocalFileDeletionOnDiskFull ()
specifier|public
name|void
name|testLocalFileDeletionOnDiskFull
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|delSrvc
operator|=
operator|new
name|DeletionService
argument_list|(
name|createContainerExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|delSrvc
operator|=
name|spy
argument_list|(
name|delSrvc
argument_list|)
expr_stmt|;
name|this
operator|.
name|delSrvc
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|localLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|this
operator|.
name|remoteRootLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|logDirs
init|=
name|super
operator|.
name|dirsHandler
operator|.
name|getLogDirs
argument_list|()
decl_stmt|;
name|LocalDirsHandlerService
name|dirsHandler
init|=
name|spy
argument_list|(
name|super
operator|.
name|dirsHandler
argument_list|)
decl_stmt|;
comment|// Simulate disk being full by returning no good log dirs but having a
comment|// directory in full log dirs.
name|when
argument_list|(
name|dirsHandler
operator|.
name|getLogDirs
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|dirsHandler
operator|.
name|getLogDirsForRead
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|logDirs
argument_list|)
expr_stmt|;
name|LogAggregationService
name|logAggregationService
init|=
name|spy
argument_list|(
operator|new
name|LogAggregationService
argument_list|(
name|dispatcher
argument_list|,
name|this
operator|.
name|context
argument_list|,
name|this
operator|.
name|delSrvc
argument_list|,
name|dirsHandler
argument_list|)
argument_list|)
decl_stmt|;
name|verifyLocalFileDeletion
argument_list|(
name|logAggregationService
argument_list|)
expr_stmt|;
block|}
comment|/* Test to verify fix for YARN-3793 */
annotation|@
name|Test
DECL|method|testNoLogsUploadedOnAppFinish ()
specifier|public
name|void
name|testNoLogsUploadedOnAppFinish
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|delSrvc
operator|=
operator|new
name|DeletionService
argument_list|(
name|createContainerExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|delSrvc
operator|=
name|spy
argument_list|(
name|delSrvc
argument_list|)
expr_stmt|;
name|this
operator|.
name|delSrvc
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|localLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|this
operator|.
name|remoteRootLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|LogAggregationService
name|logAggregationService
init|=
operator|new
name|LogAggregationService
argument_list|(
name|dispatcher
argument_list|,
name|this
operator|.
name|context
argument_list|,
name|this
operator|.
name|delSrvc
argument_list|,
name|super
operator|.
name|dirsHandler
argument_list|)
decl_stmt|;
name|logAggregationService
operator|.
name|init
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|start
argument_list|()
expr_stmt|;
name|ApplicationId
name|app
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1234
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|File
name|appLogDir
init|=
operator|new
name|File
argument_list|(
name|localLogDir
argument_list|,
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|app
argument_list|)
argument_list|)
decl_stmt|;
name|appLogDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|LogAggregationContext
name|context
init|=
name|LogAggregationContext
operator|.
name|newInstance
argument_list|(
literal|"HOST*"
argument_list|,
literal|"sys*"
argument_list|)
decl_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppStartedEvent
argument_list|(
name|app
argument_list|,
name|this
operator|.
name|user
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|acls
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|app
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|cont
init|=
name|createContainer
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|,
name|ContainerType
operator|.
name|APPLICATION_MASTER
argument_list|)
decl_stmt|;
name|writeContainerLogs
argument_list|(
name|appLogDir
argument_list|,
name|cont
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"stdout"
block|,
literal|"stderr"
block|,
literal|"syslog"
block|}
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerContainerFinishedEvent
argument_list|(
name|cont
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppFinishedEvent
argument_list|(
name|app
argument_list|)
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|delSrvc
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// Aggregated logs should not be deleted if not uploaded.
name|verify
argument_list|(
name|delSrvc
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|delete
argument_list|(
name|user
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoContainerOnNode ()
specifier|public
name|void
name|testNoContainerOnNode
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|localLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|this
operator|.
name|remoteRootLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|LogAggregationService
name|logAggregationService
init|=
operator|new
name|LogAggregationService
argument_list|(
name|dispatcher
argument_list|,
name|this
operator|.
name|context
argument_list|,
name|this
operator|.
name|delSrvc
argument_list|,
name|super
operator|.
name|dirsHandler
argument_list|)
decl_stmt|;
name|logAggregationService
operator|.
name|init
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|start
argument_list|()
expr_stmt|;
name|ApplicationId
name|application1
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1234
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// AppLogDir should be created
name|File
name|app1LogDir
init|=
operator|new
name|File
argument_list|(
name|localLogDir
argument_list|,
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|application1
argument_list|)
argument_list|)
decl_stmt|;
name|app1LogDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppStartedEvent
argument_list|(
name|application1
argument_list|,
name|this
operator|.
name|user
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|acls
argument_list|)
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppFinishedEvent
argument_list|(
name|application1
argument_list|)
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logAggregationService
operator|.
name|getNumAggregators
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
name|logAggregationService
operator|.
name|getRemoteNodeLogFileForApp
argument_list|(
name|application1
argument_list|,
name|this
operator|.
name|user
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|ApplicationEvent
name|expectedEvents
index|[]
init|=
operator|new
name|ApplicationEvent
index|[]
block|{
operator|new
name|ApplicationEvent
argument_list|(
name|application1
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_INITED
argument_list|)
block|,
operator|new
name|ApplicationEvent
argument_list|(
name|application1
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_FINISHED
argument_list|)
block|}
decl_stmt|;
name|checkEvents
argument_list|(
name|appEventHandler
argument_list|,
name|expectedEvents
argument_list|,
literal|true
argument_list|,
literal|"getType"
argument_list|,
literal|"getApplicationID"
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testMultipleAppsLogAggregation ()
specifier|public
name|void
name|testMultipleAppsLogAggregation
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|localLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|this
operator|.
name|remoteRootLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|fileNames
init|=
operator|new
name|String
index|[]
block|{
literal|"stdout"
block|,
literal|"stderr"
block|,
literal|"syslog"
block|}
decl_stmt|;
name|LogAggregationService
name|logAggregationService
init|=
operator|new
name|LogAggregationService
argument_list|(
name|dispatcher
argument_list|,
name|this
operator|.
name|context
argument_list|,
name|this
operator|.
name|delSrvc
argument_list|,
name|super
operator|.
name|dirsHandler
argument_list|)
decl_stmt|;
name|logAggregationService
operator|.
name|init
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|start
argument_list|()
expr_stmt|;
name|ApplicationId
name|application1
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1234
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// AppLogDir should be created
name|File
name|app1LogDir
init|=
operator|new
name|File
argument_list|(
name|localLogDir
argument_list|,
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|application1
argument_list|)
argument_list|)
decl_stmt|;
name|app1LogDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppStartedEvent
argument_list|(
name|application1
argument_list|,
name|this
operator|.
name|user
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|acls
argument_list|)
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId1
init|=
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|application1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|container11
init|=
name|createContainer
argument_list|(
name|appAttemptId1
argument_list|,
literal|1
argument_list|,
name|ContainerType
operator|.
name|APPLICATION_MASTER
argument_list|)
decl_stmt|;
comment|// Simulate log-file creation
name|writeContainerLogs
argument_list|(
name|app1LogDir
argument_list|,
name|container11
argument_list|,
name|fileNames
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerContainerFinishedEvent
argument_list|(
name|container11
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ApplicationId
name|application2
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1234
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId2
init|=
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|application2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|File
name|app2LogDir
init|=
operator|new
name|File
argument_list|(
name|localLogDir
argument_list|,
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|application2
argument_list|)
argument_list|)
decl_stmt|;
name|app2LogDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|LogAggregationContext
name|contextWithAMOnly
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|LogAggregationContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|contextWithAMOnly
operator|.
name|setLogAggregationPolicyClassName
argument_list|(
name|AMOnlyLogAggregationPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppStartedEvent
argument_list|(
name|application2
argument_list|,
name|this
operator|.
name|user
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|acls
argument_list|,
name|contextWithAMOnly
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerId
name|container21
init|=
name|createContainer
argument_list|(
name|appAttemptId2
argument_list|,
literal|1
argument_list|,
name|ContainerType
operator|.
name|APPLICATION_MASTER
argument_list|)
decl_stmt|;
name|writeContainerLogs
argument_list|(
name|app2LogDir
argument_list|,
name|container21
argument_list|,
name|fileNames
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerContainerFinishedEvent
argument_list|(
name|container21
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerId
name|container12
init|=
name|createContainer
argument_list|(
name|appAttemptId1
argument_list|,
literal|2
argument_list|,
name|ContainerType
operator|.
name|TASK
argument_list|)
decl_stmt|;
name|writeContainerLogs
argument_list|(
name|app1LogDir
argument_list|,
name|container12
argument_list|,
name|fileNames
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerContainerFinishedEvent
argument_list|(
name|container12
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ApplicationId
name|application3
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1234
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId3
init|=
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|application3
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|File
name|app3LogDir
init|=
operator|new
name|File
argument_list|(
name|localLogDir
argument_list|,
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|application3
argument_list|)
argument_list|)
decl_stmt|;
name|app3LogDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|LogAggregationContext
name|contextWithAMAndFailed
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|LogAggregationContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|contextWithAMAndFailed
operator|.
name|setLogAggregationPolicyClassName
argument_list|(
name|AMOrFailedContainerLogAggregationPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppStartedEvent
argument_list|(
name|application3
argument_list|,
name|this
operator|.
name|user
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|acls
argument_list|,
name|contextWithAMAndFailed
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|ApplicationEvent
name|expectedInitEvents
index|[]
init|=
operator|new
name|ApplicationEvent
index|[]
block|{
operator|new
name|ApplicationEvent
argument_list|(
name|application1
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_INITED
argument_list|)
block|,
operator|new
name|ApplicationEvent
argument_list|(
name|application2
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_INITED
argument_list|)
block|,
operator|new
name|ApplicationEvent
argument_list|(
name|application3
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_INITED
argument_list|)
block|}
decl_stmt|;
name|checkEvents
argument_list|(
name|appEventHandler
argument_list|,
name|expectedInitEvents
argument_list|,
literal|false
argument_list|,
literal|"getType"
argument_list|,
literal|"getApplicationID"
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|appEventHandler
argument_list|)
expr_stmt|;
name|ContainerId
name|container31
init|=
name|createContainer
argument_list|(
name|appAttemptId3
argument_list|,
literal|1
argument_list|,
name|ContainerType
operator|.
name|APPLICATION_MASTER
argument_list|)
decl_stmt|;
name|writeContainerLogs
argument_list|(
name|app3LogDir
argument_list|,
name|container31
argument_list|,
name|fileNames
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerContainerFinishedEvent
argument_list|(
name|container31
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerId
name|container32
init|=
name|createContainer
argument_list|(
name|appAttemptId3
argument_list|,
literal|2
argument_list|,
name|ContainerType
operator|.
name|TASK
argument_list|)
decl_stmt|;
name|writeContainerLogs
argument_list|(
name|app3LogDir
argument_list|,
name|container32
argument_list|,
name|fileNames
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerContainerFinishedEvent
argument_list|(
name|container32
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Failed
name|ContainerId
name|container22
init|=
name|createContainer
argument_list|(
name|appAttemptId2
argument_list|,
literal|2
argument_list|,
name|ContainerType
operator|.
name|TASK
argument_list|)
decl_stmt|;
name|writeContainerLogs
argument_list|(
name|app2LogDir
argument_list|,
name|container22
argument_list|,
name|fileNames
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerContainerFinishedEvent
argument_list|(
name|container22
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerId
name|container33
init|=
name|createContainer
argument_list|(
name|appAttemptId3
argument_list|,
literal|3
argument_list|,
name|ContainerType
operator|.
name|TASK
argument_list|)
decl_stmt|;
name|writeContainerLogs
argument_list|(
name|app3LogDir
argument_list|,
name|container33
argument_list|,
name|fileNames
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerContainerFinishedEvent
argument_list|(
name|container33
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppFinishedEvent
argument_list|(
name|application2
argument_list|)
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppFinishedEvent
argument_list|(
name|application3
argument_list|)
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppFinishedEvent
argument_list|(
name|application1
argument_list|)
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logAggregationService
operator|.
name|getNumAggregators
argument_list|()
argument_list|)
expr_stmt|;
name|verifyContainerLogs
argument_list|(
name|logAggregationService
argument_list|,
name|application1
argument_list|,
operator|new
name|ContainerId
index|[]
block|{
name|container11
block|,
name|container12
block|}
argument_list|,
name|fileNames
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyContainerLogs
argument_list|(
name|logAggregationService
argument_list|,
name|application2
argument_list|,
operator|new
name|ContainerId
index|[]
block|{
name|container21
block|}
argument_list|,
name|fileNames
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyContainerLogs
argument_list|(
name|logAggregationService
argument_list|,
name|application3
argument_list|,
operator|new
name|ContainerId
index|[]
block|{
name|container31
block|,
name|container32
block|}
argument_list|,
name|fileNames
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|ApplicationEvent
index|[]
name|expectedFinishedEvents
init|=
operator|new
name|ApplicationEvent
index|[]
block|{
operator|new
name|ApplicationEvent
argument_list|(
name|application1
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_FINISHED
argument_list|)
block|,
operator|new
name|ApplicationEvent
argument_list|(
name|application2
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_FINISHED
argument_list|)
block|,
operator|new
name|ApplicationEvent
argument_list|(
name|application3
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_FINISHED
argument_list|)
block|}
decl_stmt|;
name|checkEvents
argument_list|(
name|appEventHandler
argument_list|,
name|expectedFinishedEvents
argument_list|,
literal|false
argument_list|,
literal|"getType"
argument_list|,
literal|"getApplicationID"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVerifyAndCreateRemoteDirsFailure ()
specifier|public
name|void
name|testVerifyAndCreateRemoteDirsFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|localLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|this
operator|.
name|remoteRootLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|LogAggregationService
name|logAggregationService
init|=
name|spy
argument_list|(
operator|new
name|LogAggregationService
argument_list|(
name|dispatcher
argument_list|,
name|this
operator|.
name|context
argument_list|,
name|this
operator|.
name|delSrvc
argument_list|,
name|super
operator|.
name|dirsHandler
argument_list|)
argument_list|)
decl_stmt|;
name|logAggregationService
operator|.
name|init
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|YarnRuntimeException
name|e
init|=
operator|new
name|YarnRuntimeException
argument_list|(
literal|"KABOOM!"
argument_list|)
decl_stmt|;
name|doThrow
argument_list|(
name|e
argument_list|)
operator|.
name|when
argument_list|(
name|logAggregationService
argument_list|)
operator|.
name|verifyAndCreateRemoteLogDir
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Now try to start an application
name|ApplicationId
name|appId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|1000
argument_list|)
argument_list|)
decl_stmt|;
name|LogAggregationContext
name|contextWithAMAndFailed
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|LogAggregationContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|contextWithAMAndFailed
operator|.
name|setLogAggregationPolicyClassName
argument_list|(
name|AMOrFailedContainerLogAggregationPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppStartedEvent
argument_list|(
name|appId
argument_list|,
name|this
operator|.
name|user
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|acls
argument_list|,
name|contextWithAMAndFailed
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Verify that it failed
name|ApplicationEvent
index|[]
name|expectedEvents
init|=
operator|new
name|ApplicationEvent
index|[]
block|{
operator|new
name|ApplicationEvent
argument_list|(
name|appId
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_FAILED
argument_list|)
block|}
decl_stmt|;
name|checkEvents
argument_list|(
name|appEventHandler
argument_list|,
name|expectedEvents
argument_list|,
literal|false
argument_list|,
literal|"getType"
argument_list|,
literal|"getApplicationID"
argument_list|,
literal|"getDiagnostic"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|reset
argument_list|(
name|logAggregationService
argument_list|)
expr_stmt|;
comment|// Now try to start another one
name|ApplicationId
name|appId2
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|1000
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|appLogDir
init|=
operator|new
name|File
argument_list|(
name|localLogDir
argument_list|,
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|appId2
argument_list|)
argument_list|)
decl_stmt|;
name|appLogDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppStartedEvent
argument_list|(
name|appId2
argument_list|,
name|this
operator|.
name|user
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|acls
argument_list|,
name|contextWithAMAndFailed
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Verify that it worked
name|expectedEvents
operator|=
operator|new
name|ApplicationEvent
index|[]
block|{
operator|new
name|ApplicationEvent
argument_list|(
name|appId
argument_list|,
comment|// original failure
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_FAILED
argument_list|)
block|,
operator|new
name|ApplicationEvent
argument_list|(
name|appId2
argument_list|,
comment|// success
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_INITED
argument_list|)
block|}
expr_stmt|;
name|checkEvents
argument_list|(
name|appEventHandler
argument_list|,
name|expectedEvents
argument_list|,
literal|false
argument_list|,
literal|"getType"
argument_list|,
literal|"getApplicationID"
argument_list|,
literal|"getDiagnostic"
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVerifyAndCreateRemoteDirNonExistence ()
specifier|public
name|void
name|testVerifyAndCreateRemoteDirNonExistence
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|localLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|aNewFile
init|=
operator|new
name|File
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
literal|"tmp"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|aNewFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|LogAggregationService
name|logAggregationService
init|=
name|spy
argument_list|(
operator|new
name|LogAggregationService
argument_list|(
name|dispatcher
argument_list|,
name|this
operator|.
name|context
argument_list|,
name|this
operator|.
name|delSrvc
argument_list|,
name|super
operator|.
name|dirsHandler
argument_list|)
argument_list|)
decl_stmt|;
name|logAggregationService
operator|.
name|init
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|boolean
name|existsBefore
init|=
name|aNewFile
operator|.
name|exists
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The new file already exists!"
argument_list|,
operator|!
name|existsBefore
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|verifyAndCreateRemoteLogDir
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|boolean
name|existsAfter
init|=
name|aNewFile
operator|.
name|exists
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The new aggregate file is not successfully created"
argument_list|,
name|existsAfter
argument_list|)
expr_stmt|;
name|aNewFile
operator|.
name|delete
argument_list|()
expr_stmt|;
comment|//housekeeping
block|}
annotation|@
name|Test
DECL|method|testAppLogDirCreation ()
specifier|public
name|void
name|testAppLogDirCreation
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|logSuffix
init|=
literal|"logs"
decl_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|localLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|this
operator|.
name|remoteRootLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR_SUFFIX
argument_list|,
name|logSuffix
argument_list|)
expr_stmt|;
name|InlineDispatcher
name|dispatcher
init|=
operator|new
name|InlineDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|spyFs
init|=
name|spy
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|this
operator|.
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|LogAggregationService
name|aggSvc
init|=
operator|new
name|LogAggregationService
argument_list|(
name|dispatcher
argument_list|,
name|this
operator|.
name|context
argument_list|,
name|this
operator|.
name|delSrvc
argument_list|,
name|super
operator|.
name|dirsHandler
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|FileSystem
name|getFileSystem
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|spyFs
return|;
block|}
block|}
decl_stmt|;
name|aggSvc
operator|.
name|init
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|aggSvc
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// start an application and verify user, suffix, and app dirs created
name|ApplicationId
name|appId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Path
name|userDir
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|remoteRootLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|this
operator|.
name|user
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|suffixDir
init|=
operator|new
name|Path
argument_list|(
name|userDir
argument_list|,
name|logSuffix
argument_list|)
decl_stmt|;
name|Path
name|appDir
init|=
operator|new
name|Path
argument_list|(
name|suffixDir
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LogAggregationContext
name|contextWithAllContainers
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|LogAggregationContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|contextWithAllContainers
operator|.
name|setLogAggregationPolicyClassName
argument_list|(
name|AllContainerLogAggregationPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|aggSvc
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppStartedEvent
argument_list|(
name|appId
argument_list|,
name|this
operator|.
name|user
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|acls
argument_list|,
name|contextWithAllContainers
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spyFs
argument_list|)
operator|.
name|mkdirs
argument_list|(
name|eq
argument_list|(
name|userDir
argument_list|)
argument_list|,
name|isA
argument_list|(
name|FsPermission
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spyFs
argument_list|)
operator|.
name|mkdirs
argument_list|(
name|eq
argument_list|(
name|suffixDir
argument_list|)
argument_list|,
name|isA
argument_list|(
name|FsPermission
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spyFs
argument_list|)
operator|.
name|mkdirs
argument_list|(
name|eq
argument_list|(
name|appDir
argument_list|)
argument_list|,
name|isA
argument_list|(
name|FsPermission
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// start another application and verify only app dir created
name|ApplicationId
name|appId2
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Path
name|appDir2
init|=
operator|new
name|Path
argument_list|(
name|suffixDir
argument_list|,
name|appId2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|aggSvc
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppStartedEvent
argument_list|(
name|appId2
argument_list|,
name|this
operator|.
name|user
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|acls
argument_list|,
name|contextWithAllContainers
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spyFs
argument_list|)
operator|.
name|mkdirs
argument_list|(
name|eq
argument_list|(
name|appDir2
argument_list|)
argument_list|,
name|isA
argument_list|(
name|FsPermission
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// start another application with the app dir already created and verify
comment|// we do not try to create it again
name|ApplicationId
name|appId3
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Path
name|appDir3
init|=
operator|new
name|Path
argument_list|(
name|suffixDir
argument_list|,
name|appId3
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
operator|new
name|File
argument_list|(
name|appDir3
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|aggSvc
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppStartedEvent
argument_list|(
name|appId3
argument_list|,
name|this
operator|.
name|user
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|acls
argument_list|,
name|contextWithAllContainers
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spyFs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|mkdirs
argument_list|(
name|eq
argument_list|(
name|appDir3
argument_list|)
argument_list|,
name|isA
argument_list|(
name|FsPermission
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|aggSvc
operator|.
name|stop
argument_list|()
expr_stmt|;
name|aggSvc
operator|.
name|close
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testLogAggregationInitAppFailsWithoutKillingNM ()
specifier|public
name|void
name|testLogAggregationInitAppFailsWithoutKillingNM
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|localLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|this
operator|.
name|remoteRootLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|LogAggregationService
name|logAggregationService
init|=
name|spy
argument_list|(
operator|new
name|LogAggregationService
argument_list|(
name|dispatcher
argument_list|,
name|this
operator|.
name|context
argument_list|,
name|this
operator|.
name|delSrvc
argument_list|,
name|super
operator|.
name|dirsHandler
argument_list|)
argument_list|)
decl_stmt|;
name|logAggregationService
operator|.
name|init
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|start
argument_list|()
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|1000
argument_list|)
argument_list|)
decl_stmt|;
name|doThrow
argument_list|(
operator|new
name|YarnRuntimeException
argument_list|(
literal|"KABOOM!"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|logAggregationService
argument_list|)
operator|.
name|initAppAggregator
argument_list|(
name|eq
argument_list|(
name|appId
argument_list|)
argument_list|,
name|eq
argument_list|(
name|user
argument_list|)
argument_list|,
name|any
argument_list|(
name|Credentials
operator|.
name|class
argument_list|)
argument_list|,
name|anyMap
argument_list|()
argument_list|,
name|any
argument_list|(
name|LogAggregationContext
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|LogAggregationContext
name|contextWithAMAndFailed
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|LogAggregationContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|contextWithAMAndFailed
operator|.
name|setLogAggregationPolicyClassName
argument_list|(
name|AMOrFailedContainerLogAggregationPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppStartedEvent
argument_list|(
name|appId
argument_list|,
name|this
operator|.
name|user
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|acls
argument_list|,
name|contextWithAMAndFailed
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|ApplicationEvent
name|expectedEvents
index|[]
init|=
operator|new
name|ApplicationEvent
index|[]
block|{
operator|new
name|ApplicationEvent
argument_list|(
name|appId
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_FAILED
argument_list|)
block|}
decl_stmt|;
name|checkEvents
argument_list|(
name|appEventHandler
argument_list|,
name|expectedEvents
argument_list|,
literal|false
argument_list|,
literal|"getType"
argument_list|,
literal|"getApplicationID"
argument_list|,
literal|"getDiagnostic"
argument_list|)
expr_stmt|;
comment|// no filesystems instantiated yet
name|verify
argument_list|(
name|logAggregationService
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|closeFileSystems
argument_list|(
name|any
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify trying to collect logs for containers/apps we don't know about
comment|// doesn't blow up and tear down the NM
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerContainerFinishedEvent
argument_list|(
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppFinishedEvent
argument_list|(
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLogAggregationCreateDirsFailsWithoutKillingNM ()
specifier|public
name|void
name|testLogAggregationCreateDirsFailsWithoutKillingNM
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|localLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|this
operator|.
name|remoteRootLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|DeletionService
name|spyDelSrvc
init|=
name|spy
argument_list|(
name|this
operator|.
name|delSrvc
argument_list|)
decl_stmt|;
name|LogAggregationService
name|logAggregationService
init|=
name|spy
argument_list|(
operator|new
name|LogAggregationService
argument_list|(
name|dispatcher
argument_list|,
name|this
operator|.
name|context
argument_list|,
name|spyDelSrvc
argument_list|,
name|super
operator|.
name|dirsHandler
argument_list|)
argument_list|)
decl_stmt|;
name|logAggregationService
operator|.
name|init
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|start
argument_list|()
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|1000
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|appLogDir
init|=
operator|new
name|File
argument_list|(
name|localLogDir
argument_list|,
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|appId
argument_list|)
argument_list|)
decl_stmt|;
name|appLogDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|Exception
name|e
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"KABOOM!"
argument_list|)
decl_stmt|;
name|doThrow
argument_list|(
name|e
argument_list|)
operator|.
name|when
argument_list|(
name|logAggregationService
argument_list|)
operator|.
name|createAppDir
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|LogAggregationContext
name|contextWithAMAndFailed
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|LogAggregationContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|contextWithAMAndFailed
operator|.
name|setLogAggregationPolicyClassName
argument_list|(
name|AMOrFailedContainerLogAggregationPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppStartedEvent
argument_list|(
name|appId
argument_list|,
name|this
operator|.
name|user
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|acls
argument_list|,
name|contextWithAMAndFailed
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|ApplicationEvent
name|expectedEvents
index|[]
init|=
operator|new
name|ApplicationEvent
index|[]
block|{
operator|new
name|ApplicationEvent
argument_list|(
name|appId
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_FAILED
argument_list|)
block|}
decl_stmt|;
name|checkEvents
argument_list|(
name|appEventHandler
argument_list|,
name|expectedEvents
argument_list|,
literal|false
argument_list|,
literal|"getType"
argument_list|,
literal|"getApplicationID"
argument_list|,
literal|"getDiagnostic"
argument_list|)
expr_stmt|;
comment|// verify trying to collect logs for containers/apps we don't know about
comment|// doesn't blow up and tear down the NM
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerContainerFinishedEvent
argument_list|(
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppFinishedEvent
argument_list|(
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|logAggregationService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logAggregationService
operator|.
name|getNumAggregators
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spyDelSrvc
argument_list|)
operator|.
name|delete
argument_list|(
name|eq
argument_list|(
name|user
argument_list|)
argument_list|,
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
expr|<
name|Path
operator|>
name|anyVararg
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|logAggregationService
argument_list|)
operator|.
name|closeFileSystems
argument_list|(
name|any
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|writeContainerLogs (File appLogDir, ContainerId containerId, String[] fileName)
specifier|private
name|void
name|writeContainerLogs
parameter_list|(
name|File
name|appLogDir
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|String
index|[]
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// ContainerLogDir should be created
name|String
name|containerStr
init|=
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|File
name|containerLogDir
init|=
operator|new
name|File
argument_list|(
name|appLogDir
argument_list|,
name|containerStr
argument_list|)
decl_stmt|;
name|containerLogDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|fileType
range|:
name|fileName
control|)
block|{
name|Writer
name|writer11
init|=
operator|new
name|FileWriter
argument_list|(
operator|new
name|File
argument_list|(
name|containerLogDir
argument_list|,
name|fileType
argument_list|)
argument_list|)
decl_stmt|;
name|writer11
operator|.
name|write
argument_list|(
name|containerStr
operator|+
literal|" Hello "
operator|+
name|fileType
operator|+
literal|"!"
argument_list|)
expr_stmt|;
name|writer11
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|verifyContainerLogs ( LogAggregationService logAggregationService, ApplicationId appId, ContainerId[] expectedContainerIds, String[] logFiles, int numOfLogsPerContainer, boolean multiLogs)
specifier|private
name|LogFileStatusInLastCycle
name|verifyContainerLogs
parameter_list|(
name|LogAggregationService
name|logAggregationService
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|ContainerId
index|[]
name|expectedContainerIds
parameter_list|,
name|String
index|[]
name|logFiles
parameter_list|,
name|int
name|numOfLogsPerContainer
parameter_list|,
name|boolean
name|multiLogs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|verifyContainerLogs
argument_list|(
name|logAggregationService
argument_list|,
name|appId
argument_list|,
name|expectedContainerIds
argument_list|,
name|expectedContainerIds
operator|.
name|length
argument_list|,
name|expectedContainerIds
operator|.
name|length
argument_list|,
name|logFiles
argument_list|,
name|numOfLogsPerContainer
argument_list|,
name|multiLogs
argument_list|)
return|;
block|}
comment|// expectedContainerIds is the minimal set of containers to check.
comment|// The actual list of containers could be more than that.
comment|// Verify the size of the actual list is in the range of
comment|// [minNumOfContainers, maxNumOfContainers].
DECL|method|verifyContainerLogs ( LogAggregationService logAggregationService, ApplicationId appId, ContainerId[] expectedContainerIds, int minNumOfContainers, int maxNumOfContainers, String[] logFiles, int numOfLogsPerContainer, boolean multiLogs)
specifier|private
name|LogFileStatusInLastCycle
name|verifyContainerLogs
parameter_list|(
name|LogAggregationService
name|logAggregationService
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|ContainerId
index|[]
name|expectedContainerIds
parameter_list|,
name|int
name|minNumOfContainers
parameter_list|,
name|int
name|maxNumOfContainers
parameter_list|,
name|String
index|[]
name|logFiles
parameter_list|,
name|int
name|numOfLogsPerContainer
parameter_list|,
name|boolean
name|multiLogs
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|appLogDir
init|=
name|logAggregationService
operator|.
name|getRemoteAppLogDir
argument_list|(
name|appId
argument_list|,
name|this
operator|.
name|user
argument_list|)
decl_stmt|;
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|nodeFiles
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Path
name|qualifiedLogDir
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|this
operator|.
name|conf
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|appLogDir
argument_list|)
decl_stmt|;
name|nodeFiles
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|qualifiedLogDir
operator|.
name|toUri
argument_list|()
argument_list|,
name|this
operator|.
name|conf
argument_list|)
operator|.
name|listStatus
argument_list|(
name|appLogDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnf
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should have log files"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numOfLogsPerContainer
operator|==
literal|0
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|nodeFiles
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nodeFiles
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|FileStatus
name|targetNodeFile
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|multiLogs
condition|)
block|{
name|targetNodeFile
operator|=
name|nodeFiles
operator|.
name|next
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|targetNodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|LogAggregationUtils
operator|.
name|getNodeString
argument_list|(
name|logAggregationService
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|fileCreateTime
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|nodeFiles
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileStatus
name|nodeFile
init|=
name|nodeFiles
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|nodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
name|LogAggregationUtils
operator|.
name|TMP_FILE_SUFFIX
argument_list|)
condition|)
block|{
name|long
name|time
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|nodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|time
operator|>
name|fileCreateTime
condition|)
block|{
name|targetNodeFile
operator|=
name|nodeFile
expr_stmt|;
name|fileCreateTime
operator|=
name|time
expr_stmt|;
block|}
block|}
block|}
name|String
index|[]
name|fileName
init|=
name|targetNodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fileName
operator|.
name|length
operator|==
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fileName
index|[
literal|0
index|]
operator|+
literal|":"
operator|+
name|fileName
index|[
literal|1
index|]
argument_list|,
name|logAggregationService
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|AggregatedLogFormat
operator|.
name|LogReader
name|reader
init|=
operator|new
name|AggregatedLogFormat
operator|.
name|LogReader
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|targetNodeFile
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|this
operator|.
name|user
argument_list|,
name|reader
operator|.
name|getApplicationOwner
argument_list|()
argument_list|)
expr_stmt|;
name|verifyAcls
argument_list|(
name|reader
operator|.
name|getApplicationAcls
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fileTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|logMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|DataInputStream
name|valueStream
decl_stmt|;
name|LogKey
name|key
init|=
operator|new
name|LogKey
argument_list|()
decl_stmt|;
name|valueStream
operator|=
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|)
expr_stmt|;
while|while
condition|(
name|valueStream
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Found container "
operator|+
name|key
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|perContainerMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|logMap
operator|.
name|put
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|perContainerMap
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|ps
init|=
operator|new
name|PrintStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|LogReader
operator|.
name|readAContainerLogsForALogType
argument_list|(
name|valueStream
argument_list|,
name|ps
argument_list|)
expr_stmt|;
name|String
name|writtenLines
index|[]
init|=
name|baos
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"LogType:"
argument_list|,
name|writtenLines
index|[
literal|0
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|fileType
init|=
name|writtenLines
index|[
literal|0
index|]
operator|.
name|substring
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|fileTypes
operator|.
name|add
argument_list|(
name|fileType
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"LogLength:"
argument_list|,
name|writtenLines
index|[
literal|1
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|fileLengthStr
init|=
name|writtenLines
index|[
literal|1
index|]
operator|.
name|substring
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|long
name|fileLength
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|fileLengthStr
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Log Contents:"
argument_list|,
name|writtenLines
index|[
literal|2
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|logContents
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|writtenLines
argument_list|,
literal|3
argument_list|,
name|writtenLines
operator|.
name|length
argument_list|)
argument_list|,
literal|"\n"
argument_list|)
decl_stmt|;
name|perContainerMap
operator|.
name|put
argument_list|(
name|fileType
argument_list|,
name|logContents
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"LogType:"
operator|+
name|fileType
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"LogLength:"
operator|+
name|fileLength
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Log Contents:\n"
operator|+
name|perContainerMap
operator|.
name|get
argument_list|(
name|fileType
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|eof
parameter_list|)
block|{
break|break;
block|}
block|}
comment|// Next container
name|key
operator|=
operator|new
name|LogKey
argument_list|()
expr_stmt|;
name|valueStream
operator|=
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
comment|// 1 for each container
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"number of containers with logs should be at least "
operator|+
name|minNumOfContainers
argument_list|,
name|logMap
operator|.
name|size
argument_list|()
operator|>=
name|minNumOfContainers
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"number of containers with logs should be at most "
operator|+
name|minNumOfContainers
argument_list|,
name|logMap
operator|.
name|size
argument_list|()
operator|<=
name|maxNumOfContainers
argument_list|)
expr_stmt|;
for|for
control|(
name|ContainerId
name|cId
range|:
name|expectedContainerIds
control|)
block|{
name|String
name|containerStr
init|=
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|cId
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|thisContainerMap
init|=
name|logMap
operator|.
name|remove
argument_list|(
name|containerStr
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numOfLogsPerContainer
argument_list|,
name|thisContainerMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fileType
range|:
name|logFiles
control|)
block|{
name|String
name|expectedValue
init|=
name|containerStr
operator|+
literal|" Hello "
operator|+
name|fileType
operator|+
literal|"!End of LogType:"
operator|+
name|fileType
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected log-content : "
operator|+
operator|new
name|String
argument_list|(
name|expectedValue
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|foundValue
init|=
name|thisContainerMap
operator|.
name|remove
argument_list|(
name|fileType
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cId
operator|+
literal|" "
operator|+
name|fileType
operator|+
literal|" not present in aggregated log-file!"
argument_list|,
name|foundValue
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedValue
argument_list|,
name|foundValue
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|thisContainerMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"number of remaining containers should be at least "
operator|+
operator|(
name|minNumOfContainers
operator|-
name|expectedContainerIds
operator|.
name|length
operator|)
argument_list|,
name|logMap
operator|.
name|size
argument_list|()
operator|>=
name|minNumOfContainers
operator|-
name|expectedContainerIds
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"number of remaining containers should be at most "
operator|+
operator|(
name|maxNumOfContainers
operator|-
name|expectedContainerIds
operator|.
name|length
operator|)
argument_list|,
name|logMap
operator|.
name|size
argument_list|()
operator|<=
name|maxNumOfContainers
operator|-
name|expectedContainerIds
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
operator|new
name|LogFileStatusInLastCycle
argument_list|(
name|targetNodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|fileTypes
argument_list|)
return|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testLogAggregationForRealContainerLaunch ()
specifier|public
name|void
name|testLogAggregationForRealContainerLaunch
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnException
block|{
name|this
operator|.
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|File
name|scriptFile
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"scriptFile.sh"
argument_list|)
decl_stmt|;
name|PrintWriter
name|fileWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|scriptFile
argument_list|)
decl_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\necho Hello World! Stdout!> "
operator|+
operator|new
name|File
argument_list|(
name|localLogDir
argument_list|,
literal|"stdout"
argument_list|)
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\necho Hello World! Stderr!> "
operator|+
operator|new
name|File
argument_list|(
name|localLogDir
argument_list|,
literal|"stderr"
argument_list|)
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\necho Hello World! Syslog!> "
operator|+
operator|new
name|File
argument_list|(
name|localLogDir
argument_list|,
literal|"syslog"
argument_list|)
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// ////// Construct the Container-id
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|cId
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|URL
name|resource_alpha
init|=
name|ConverterUtils
operator|.
name|getYarnUrlFromPath
argument_list|(
name|localFS
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|scriptFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|LocalResource
name|rsrc_alpha
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|rsrc_alpha
operator|.
name|setResource
argument_list|(
name|resource_alpha
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setVisibility
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setType
argument_list|(
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setTimestamp
argument_list|(
name|scriptFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|destinationFile
init|=
literal|"dest_file"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|destinationFile
argument_list|,
name|rsrc_alpha
argument_list|)
expr_stmt|;
name|containerLaunchContext
operator|.
name|setLocalResources
argument_list|(
name|localResources
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|commands
operator|.
name|add
argument_list|(
literal|"/bin/bash"
argument_list|)
expr_stmt|;
name|commands
operator|.
name|add
argument_list|(
name|scriptFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|containerLaunchContext
operator|.
name|setCommands
argument_list|(
name|commands
argument_list|)
expr_stmt|;
name|StartContainerRequest
name|scRequest
init|=
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|TestContainerManager
operator|.
name|createContainerToken
argument_list|(
name|cId
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|StartContainerRequest
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|scRequest
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|this
operator|.
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForContainerState
argument_list|(
name|this
operator|.
name|containerManager
argument_list|,
name|cId
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|this
operator|.
name|containerManager
operator|.
name|handle
argument_list|(
operator|new
name|CMgrCompletedAppsEvent
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|appId
argument_list|)
argument_list|,
name|CMgrCompletedAppsEvent
operator|.
name|Reason
operator|.
name|ON_SHUTDOWN
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|containerManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|verifyAcls (Map<ApplicationAccessType, String> logAcls)
specifier|private
name|void
name|verifyAcls
parameter_list|(
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|logAcls
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|this
operator|.
name|acls
operator|.
name|size
argument_list|()
argument_list|,
name|logAcls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ApplicationAccessType
name|appAccessType
range|:
name|this
operator|.
name|acls
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|this
operator|.
name|acls
operator|.
name|get
argument_list|(
name|appAccessType
argument_list|)
argument_list|,
name|logAcls
operator|.
name|get
argument_list|(
name|appAccessType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createDispatcher ()
specifier|private
name|DrainDispatcher
name|createDispatcher
parameter_list|()
block|{
name|DrainDispatcher
name|dispatcher
init|=
operator|new
name|DrainDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|dispatcher
return|;
block|}
DECL|method|createAppAcls ()
specifier|private
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|createAppAcls
parameter_list|()
block|{
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|appAcls
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|appAcls
operator|.
name|put
argument_list|(
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
literal|"user group"
argument_list|)
expr_stmt|;
name|appAcls
operator|.
name|put
argument_list|(
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
return|return
name|appAcls
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testStopAfterError ()
specifier|public
name|void
name|testStopAfterError
parameter_list|()
throws|throws
name|Exception
block|{
name|DeletionService
name|delSrvc
init|=
name|mock
argument_list|(
name|DeletionService
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// get the AppLogAggregationImpl thread to crash
name|LocalDirsHandlerService
name|mockedDirSvc
init|=
name|mock
argument_list|(
name|LocalDirsHandlerService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockedDirSvc
operator|.
name|getLogDirs
argument_list|()
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|()
argument_list|)
expr_stmt|;
name|LogAggregationService
name|logAggregationService
init|=
operator|new
name|LogAggregationService
argument_list|(
name|dispatcher
argument_list|,
name|this
operator|.
name|context
argument_list|,
name|delSrvc
argument_list|,
name|mockedDirSvc
argument_list|)
decl_stmt|;
name|logAggregationService
operator|.
name|init
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|start
argument_list|()
expr_stmt|;
name|ApplicationId
name|application1
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1234
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|LogAggregationContext
name|contextWithAllContainers
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|LogAggregationContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|contextWithAllContainers
operator|.
name|setLogAggregationPolicyClassName
argument_list|(
name|AllContainerLogAggregationPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppStartedEvent
argument_list|(
name|application1
argument_list|,
name|this
operator|.
name|user
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|acls
argument_list|,
name|contextWithAllContainers
argument_list|)
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logAggregationService
operator|.
name|getNumAggregators
argument_list|()
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLogAggregatorCleanup ()
specifier|public
name|void
name|testLogAggregatorCleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|DeletionService
name|delSrvc
init|=
name|mock
argument_list|(
name|DeletionService
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// get the AppLogAggregationImpl thread to crash
name|LocalDirsHandlerService
name|mockedDirSvc
init|=
name|mock
argument_list|(
name|LocalDirsHandlerService
operator|.
name|class
argument_list|)
decl_stmt|;
name|LogAggregationService
name|logAggregationService
init|=
operator|new
name|LogAggregationService
argument_list|(
name|dispatcher
argument_list|,
name|this
operator|.
name|context
argument_list|,
name|delSrvc
argument_list|,
name|mockedDirSvc
argument_list|)
decl_stmt|;
name|logAggregationService
operator|.
name|init
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|start
argument_list|()
expr_stmt|;
name|ApplicationId
name|application1
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1234
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppStartedEvent
argument_list|(
name|application1
argument_list|,
name|this
operator|.
name|user
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|acls
argument_list|)
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppFinishedEvent
argument_list|(
name|application1
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|int
name|timeToWait
init|=
literal|20
operator|*
literal|1000
decl_stmt|;
while|while
condition|(
name|timeToWait
operator|>
literal|0
operator|&&
name|logAggregationService
operator|.
name|getNumAggregators
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|timeToWait
operator|-=
literal|100
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Log aggregator failed to cleanup!"
argument_list|,
literal|0
argument_list|,
name|logAggregationService
operator|.
name|getNumAggregators
argument_list|()
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|logAggregationService
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|Event
argument_list|<
name|?
argument_list|>
parameter_list|>
DECL|method|checkEvents (EventHandler<T> eventHandler, T expectedEvents[], boolean inOrder, String... methods)
name|void
name|checkEvents
parameter_list|(
name|EventHandler
argument_list|<
name|T
argument_list|>
name|eventHandler
parameter_list|,
name|T
name|expectedEvents
index|[]
parameter_list|,
name|boolean
name|inOrder
parameter_list|,
name|String
modifier|...
name|methods
parameter_list|)
throws|throws
name|Exception
block|{
name|Class
argument_list|<
name|T
argument_list|>
name|genericClass
init|=
operator|(
name|Class
argument_list|<
name|T
argument_list|>
operator|)
name|expectedEvents
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|T
argument_list|>
name|eventCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|genericClass
argument_list|)
decl_stmt|;
comment|// captor work work unless used via a verify
name|verify
argument_list|(
name|eventHandler
argument_list|,
name|atLeast
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|eventCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|actualEvents
init|=
name|eventCaptor
operator|.
name|getAllValues
argument_list|()
decl_stmt|;
comment|// batch up exceptions so junit presents them as one
name|MultiException
name|failures
init|=
operator|new
name|MultiException
argument_list|()
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|"expected events"
argument_list|,
name|expectedEvents
operator|.
name|length
argument_list|,
name|actualEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inOrder
condition|)
block|{
comment|// sequentially verify the events
name|int
name|len
init|=
name|Math
operator|.
name|max
argument_list|(
name|expectedEvents
operator|.
name|length
argument_list|,
name|actualEvents
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|len
condition|;
name|n
operator|++
control|)
block|{
try|try
block|{
name|String
name|expect
init|=
operator|(
name|n
operator|<
name|expectedEvents
operator|.
name|length
operator|)
condition|?
name|eventToString
argument_list|(
name|expectedEvents
index|[
name|n
index|]
argument_list|,
name|methods
argument_list|)
else|:
literal|null
decl_stmt|;
name|String
name|actual
init|=
operator|(
name|n
operator|<
name|actualEvents
operator|.
name|size
argument_list|()
operator|)
condition|?
name|eventToString
argument_list|(
name|actualEvents
operator|.
name|get
argument_list|(
name|n
argument_list|)
argument_list|,
name|methods
argument_list|)
else|:
literal|null
decl_stmt|;
name|assertEquals
argument_list|(
literal|"event#"
operator|+
name|n
argument_list|,
name|expect
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// verify the actual events were expected
comment|// verify no expected events were not seen
name|Set
argument_list|<
name|String
argument_list|>
name|expectedSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|T
name|expectedEvent
range|:
name|expectedEvents
control|)
block|{
name|expectedSet
operator|.
name|add
argument_list|(
name|eventToString
argument_list|(
name|expectedEvent
argument_list|,
name|methods
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|T
name|actualEvent
range|:
name|actualEvents
control|)
block|{
try|try
block|{
name|String
name|actual
init|=
name|eventToString
argument_list|(
name|actualEvent
argument_list|,
name|methods
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"unexpected event: "
operator|+
name|actual
argument_list|,
name|expectedSet
operator|.
name|remove
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|expected
range|:
name|expectedSet
control|)
block|{
try|try
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"missing event: "
operator|+
name|expected
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|failures
operator|.
name|ifExceptionThrow
argument_list|()
expr_stmt|;
block|}
DECL|method|eventToString (Event<?> event, String[] methods)
specifier|private
specifier|static
name|String
name|eventToString
parameter_list|(
name|Event
argument_list|<
name|?
argument_list|>
name|event
parameter_list|,
name|String
index|[]
name|methods
parameter_list|)
throws|throws
name|Exception
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"[ "
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|m
range|:
name|methods
control|)
block|{
try|try
block|{
name|Method
name|method
init|=
name|event
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|method
operator|.
name|invoke
argument_list|(
name|event
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore, actual event may not implement the method...
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/*    * Test to make sure we handle cases where the directories we get back from    * the LocalDirsHandler may have issues including the log dir not being    * present as well as other issues. The test uses helper functions from    * TestNonAggregatingLogHandler.    */
annotation|@
name|Test
DECL|method|testFailedDirsLocalFileDeletionAfterUpload ()
specifier|public
name|void
name|testFailedDirsLocalFileDeletionAfterUpload
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup conf and services
name|DeletionService
name|mockDelService
init|=
name|mock
argument_list|(
name|DeletionService
operator|.
name|class
argument_list|)
decl_stmt|;
name|File
index|[]
name|localLogDirs
init|=
name|TestNonAggregatingLogHandler
operator|.
name|getLocalLogDirFiles
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|7
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|localLogDirPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|localLogDirs
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|localLogDirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|localLogDirPaths
operator|.
name|add
argument_list|(
name|localLogDirs
index|[
name|i
index|]
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|localLogDirsString
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|localLogDirPaths
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|localLogDirsString
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|this
operator|.
name|remoteRootLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DISK_HEALTH_CHECK_INTERVAL_MS
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|ApplicationId
name|application1
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1234
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|application1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|this
operator|.
name|dirsHandler
operator|=
operator|new
name|LocalDirsHandlerService
argument_list|()
expr_stmt|;
name|LocalDirsHandlerService
name|mockDirsHandler
init|=
name|mock
argument_list|(
name|LocalDirsHandlerService
operator|.
name|class
argument_list|)
decl_stmt|;
name|LogAggregationService
name|logAggregationService
init|=
name|spy
argument_list|(
operator|new
name|LogAggregationService
argument_list|(
name|dispatcher
argument_list|,
name|this
operator|.
name|context
argument_list|,
name|mockDelService
argument_list|,
name|mockDirsHandler
argument_list|)
argument_list|)
decl_stmt|;
name|AbstractFileSystem
name|spylfs
init|=
name|spy
argument_list|(
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|getDefaultFileSystem
argument_list|()
argument_list|)
decl_stmt|;
name|FileContext
name|lfs
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|spylfs
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|lfs
argument_list|)
operator|.
name|when
argument_list|(
name|logAggregationService
argument_list|)
operator|.
name|getLocalFileContext
argument_list|(
name|isA
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|init
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|start
argument_list|()
expr_stmt|;
name|TestNonAggregatingLogHandler
operator|.
name|runMockedFailedDirs
argument_list|(
name|logAggregationService
argument_list|,
name|application1
argument_list|,
name|user
argument_list|,
name|mockDelService
argument_list|,
name|mockDirsHandler
argument_list|,
name|conf
argument_list|,
name|spylfs
argument_list|,
name|lfs
argument_list|,
name|localLogDirs
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logAggregationService
operator|.
name|getNumAggregators
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|logAggregationService
argument_list|)
operator|.
name|closeFileSystems
argument_list|(
name|any
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ApplicationEvent
name|expectedEvents
index|[]
init|=
operator|new
name|ApplicationEvent
index|[]
block|{
operator|new
name|ApplicationEvent
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_INITED
argument_list|)
block|,
operator|new
name|ApplicationEvent
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_FINISHED
argument_list|)
block|}
decl_stmt|;
name|checkEvents
argument_list|(
name|appEventHandler
argument_list|,
name|expectedEvents
argument_list|,
literal|true
argument_list|,
literal|"getType"
argument_list|,
literal|"getApplicationID"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testLogAggregationServiceWithPatterns ()
specifier|public
name|void
name|testLogAggregationServiceWithPatterns
parameter_list|()
throws|throws
name|Exception
block|{
name|LogAggregationContext
name|logAggregationContextWithIncludePatterns
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|LogAggregationContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|includePattern
init|=
literal|"stdout|syslog"
decl_stmt|;
name|logAggregationContextWithIncludePatterns
operator|.
name|setIncludePattern
argument_list|(
name|includePattern
argument_list|)
expr_stmt|;
name|LogAggregationContext
name|LogAggregationContextWithExcludePatterns
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|LogAggregationContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|excludePattern
init|=
literal|"stdout|syslog"
decl_stmt|;
name|LogAggregationContextWithExcludePatterns
operator|.
name|setExcludePattern
argument_list|(
name|excludePattern
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|localLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|this
operator|.
name|remoteRootLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationId
name|application1
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1234
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationId
name|application2
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1234
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationId
name|application3
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1234
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ApplicationId
name|application4
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1234
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|Application
name|mockApp
init|=
name|mock
argument_list|(
name|Application
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockApp
operator|.
name|getContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|HashMap
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|application1
argument_list|,
name|mockApp
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|application2
argument_list|,
name|mockApp
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|application3
argument_list|,
name|mockApp
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|application4
argument_list|,
name|mockApp
argument_list|)
expr_stmt|;
name|LogAggregationService
name|logAggregationService
init|=
operator|new
name|LogAggregationService
argument_list|(
name|dispatcher
argument_list|,
name|this
operator|.
name|context
argument_list|,
name|this
operator|.
name|delSrvc
argument_list|,
name|super
operator|.
name|dirsHandler
argument_list|)
decl_stmt|;
name|logAggregationService
operator|.
name|init
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// LogContext for application1 has includePatten which includes
comment|// stdout and syslog.
comment|// After logAggregation is finished, we expect the logs for application1
comment|// has only logs from stdout and syslog
comment|// AppLogDir should be created
name|File
name|appLogDir1
init|=
operator|new
name|File
argument_list|(
name|localLogDir
argument_list|,
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|application1
argument_list|)
argument_list|)
decl_stmt|;
name|appLogDir1
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppStartedEvent
argument_list|(
name|application1
argument_list|,
name|this
operator|.
name|user
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|acls
argument_list|,
name|logAggregationContextWithIncludePatterns
argument_list|)
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId1
init|=
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|application1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|container1
init|=
name|createContainer
argument_list|(
name|appAttemptId1
argument_list|,
literal|1
argument_list|,
name|ContainerType
operator|.
name|APPLICATION_MASTER
argument_list|)
decl_stmt|;
comment|// Simulate log-file creation
name|writeContainerLogs
argument_list|(
name|appLogDir1
argument_list|,
name|container1
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"stdout"
block|,
literal|"stderr"
block|,
literal|"syslog"
block|}
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerContainerFinishedEvent
argument_list|(
name|container1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// LogContext for application2 has excludePatten which includes
comment|// stdout and syslog.
comment|// After logAggregation is finished, we expect the logs for application2
comment|// has only logs from stderr
name|ApplicationAttemptId
name|appAttemptId2
init|=
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|application2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|File
name|app2LogDir
init|=
operator|new
name|File
argument_list|(
name|localLogDir
argument_list|,
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|application2
argument_list|)
argument_list|)
decl_stmt|;
name|app2LogDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|LogAggregationContextWithExcludePatterns
operator|.
name|setLogAggregationPolicyClassName
argument_list|(
name|AMOnlyLogAggregationPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppStartedEvent
argument_list|(
name|application2
argument_list|,
name|this
operator|.
name|user
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|acls
argument_list|,
name|LogAggregationContextWithExcludePatterns
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerId
name|container2
init|=
name|createContainer
argument_list|(
name|appAttemptId2
argument_list|,
literal|1
argument_list|,
name|ContainerType
operator|.
name|APPLICATION_MASTER
argument_list|)
decl_stmt|;
name|writeContainerLogs
argument_list|(
name|app2LogDir
argument_list|,
name|container2
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"stdout"
block|,
literal|"stderr"
block|,
literal|"syslog"
block|}
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerContainerFinishedEvent
argument_list|(
name|container2
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// LogContext for application3 has includePattern which is *.log and
comment|// excludePatten which includes std.log and sys.log.
comment|// After logAggregation is finished, we expect the logs for application3
comment|// has all logs whose suffix is .log but excluding sys.log and std.log
name|LogAggregationContext
name|context1
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|LogAggregationContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|context1
operator|.
name|setIncludePattern
argument_list|(
literal|".*.log"
argument_list|)
expr_stmt|;
name|context1
operator|.
name|setExcludePattern
argument_list|(
literal|"sys.log|std.log"
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId3
init|=
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|application3
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|File
name|app3LogDir
init|=
operator|new
name|File
argument_list|(
name|localLogDir
argument_list|,
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|application3
argument_list|)
argument_list|)
decl_stmt|;
name|app3LogDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|context1
operator|.
name|setLogAggregationPolicyClassName
argument_list|(
name|AMOnlyLogAggregationPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppStartedEvent
argument_list|(
name|application3
argument_list|,
name|this
operator|.
name|user
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|acls
argument_list|,
name|context1
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerId
name|container3
init|=
name|createContainer
argument_list|(
name|appAttemptId3
argument_list|,
literal|1
argument_list|,
name|ContainerType
operator|.
name|APPLICATION_MASTER
argument_list|)
decl_stmt|;
name|writeContainerLogs
argument_list|(
name|app3LogDir
argument_list|,
name|container3
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"stdout"
block|,
literal|"sys.log"
block|,
literal|"std.log"
block|,
literal|"out.log"
block|,
literal|"err.log"
block|,
literal|"log"
block|}
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerContainerFinishedEvent
argument_list|(
name|container3
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// LogContext for application4 has includePattern
comment|// which includes std.log and sys.log and
comment|// excludePatten which includes std.log.
comment|// After logAggregation is finished, we expect the logs for application4
comment|// only has sys.log
name|LogAggregationContext
name|context2
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|LogAggregationContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|context2
operator|.
name|setIncludePattern
argument_list|(
literal|"sys.log|std.log"
argument_list|)
expr_stmt|;
name|context2
operator|.
name|setExcludePattern
argument_list|(
literal|"std.log"
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId4
init|=
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|application4
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|File
name|app4LogDir
init|=
operator|new
name|File
argument_list|(
name|localLogDir
argument_list|,
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|application4
argument_list|)
argument_list|)
decl_stmt|;
name|app4LogDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|context2
operator|.
name|setLogAggregationPolicyClassName
argument_list|(
name|AMOnlyLogAggregationPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppStartedEvent
argument_list|(
name|application4
argument_list|,
name|this
operator|.
name|user
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|acls
argument_list|,
name|context2
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerId
name|container4
init|=
name|createContainer
argument_list|(
name|appAttemptId4
argument_list|,
literal|1
argument_list|,
name|ContainerType
operator|.
name|APPLICATION_MASTER
argument_list|)
decl_stmt|;
name|writeContainerLogs
argument_list|(
name|app4LogDir
argument_list|,
name|container4
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"stdout"
block|,
literal|"sys.log"
block|,
literal|"std.log"
block|,
literal|"out.log"
block|,
literal|"err.log"
block|,
literal|"log"
block|}
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerContainerFinishedEvent
argument_list|(
name|container4
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|ApplicationEvent
name|expectedInitEvents
index|[]
init|=
operator|new
name|ApplicationEvent
index|[]
block|{
operator|new
name|ApplicationEvent
argument_list|(
name|application1
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_INITED
argument_list|)
block|,
operator|new
name|ApplicationEvent
argument_list|(
name|application2
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_INITED
argument_list|)
block|,
operator|new
name|ApplicationEvent
argument_list|(
name|application3
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_INITED
argument_list|)
block|,
operator|new
name|ApplicationEvent
argument_list|(
name|application4
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_INITED
argument_list|)
block|}
decl_stmt|;
name|checkEvents
argument_list|(
name|appEventHandler
argument_list|,
name|expectedInitEvents
argument_list|,
literal|false
argument_list|,
literal|"getType"
argument_list|,
literal|"getApplicationID"
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|appEventHandler
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppFinishedEvent
argument_list|(
name|application1
argument_list|)
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppFinishedEvent
argument_list|(
name|application2
argument_list|)
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppFinishedEvent
argument_list|(
name|application3
argument_list|)
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppFinishedEvent
argument_list|(
name|application4
argument_list|)
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logAggregationService
operator|.
name|getNumAggregators
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|logFiles
init|=
operator|new
name|String
index|[]
block|{
literal|"stdout"
block|,
literal|"syslog"
block|}
decl_stmt|;
name|verifyContainerLogs
argument_list|(
name|logAggregationService
argument_list|,
name|application1
argument_list|,
operator|new
name|ContainerId
index|[]
block|{
name|container1
block|}
argument_list|,
name|logFiles
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|logFiles
operator|=
operator|new
name|String
index|[]
block|{
literal|"stderr"
block|}
expr_stmt|;
name|verifyContainerLogs
argument_list|(
name|logAggregationService
argument_list|,
name|application2
argument_list|,
operator|new
name|ContainerId
index|[]
block|{
name|container2
block|}
argument_list|,
name|logFiles
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|logFiles
operator|=
operator|new
name|String
index|[]
block|{
literal|"out.log"
block|,
literal|"err.log"
block|}
expr_stmt|;
name|verifyContainerLogs
argument_list|(
name|logAggregationService
argument_list|,
name|application3
argument_list|,
operator|new
name|ContainerId
index|[]
block|{
name|container3
block|}
argument_list|,
name|logFiles
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|logFiles
operator|=
operator|new
name|String
index|[]
block|{
literal|"sys.log"
block|}
expr_stmt|;
name|verifyContainerLogs
argument_list|(
name|logAggregationService
argument_list|,
name|application4
argument_list|,
operator|new
name|ContainerId
index|[]
block|{
name|container4
block|}
argument_list|,
name|logFiles
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|ApplicationEvent
index|[]
name|expectedFinishedEvents
init|=
operator|new
name|ApplicationEvent
index|[]
block|{
operator|new
name|ApplicationEvent
argument_list|(
name|application1
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_FINISHED
argument_list|)
block|,
operator|new
name|ApplicationEvent
argument_list|(
name|application2
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_FINISHED
argument_list|)
block|,
operator|new
name|ApplicationEvent
argument_list|(
name|application3
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_FINISHED
argument_list|)
block|,
operator|new
name|ApplicationEvent
argument_list|(
name|application4
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_FINISHED
argument_list|)
block|}
decl_stmt|;
name|checkEvents
argument_list|(
name|appEventHandler
argument_list|,
name|expectedFinishedEvents
argument_list|,
literal|false
argument_list|,
literal|"getType"
argument_list|,
literal|"getApplicationID"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testNoneContainerPolicy ()
specifier|public
name|void
name|testNoneContainerPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|createApplication
argument_list|()
decl_stmt|;
comment|// LogContext specifies policy to not aggregate any container logs
name|LogAggregationService
name|logAggregationService
init|=
name|createLogAggregationService
argument_list|(
name|appId
argument_list|,
name|NoneContainerLogAggregationPolicy
operator|.
name|class
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
index|[]
name|logFiles
init|=
operator|new
name|String
index|[]
block|{
literal|"stdout"
block|}
decl_stmt|;
name|ContainerId
name|container1
init|=
name|finishContainer
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|,
name|ContainerType
operator|.
name|APPLICATION_MASTER
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|logFiles
argument_list|)
decl_stmt|;
name|finishApplication
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|)
expr_stmt|;
name|verifyContainerLogs
argument_list|(
name|logAggregationService
argument_list|,
name|appId
argument_list|,
operator|new
name|ContainerId
index|[]
block|{
name|container1
block|}
argument_list|,
name|logFiles
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyLogAggFinishEvent
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testFailedContainerPolicy ()
specifier|public
name|void
name|testFailedContainerPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|createApplication
argument_list|()
decl_stmt|;
name|LogAggregationService
name|logAggregationService
init|=
name|createLogAggregationService
argument_list|(
name|appId
argument_list|,
name|FailedContainerLogAggregationPolicy
operator|.
name|class
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
index|[]
name|logFiles
init|=
operator|new
name|String
index|[]
block|{
literal|"stdout"
block|}
decl_stmt|;
name|ContainerId
name|container1
init|=
name|finishContainer
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|,
name|ContainerType
operator|.
name|APPLICATION_MASTER
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|logFiles
argument_list|)
decl_stmt|;
name|finishContainer
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|,
name|ContainerType
operator|.
name|TASK
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
name|logFiles
argument_list|)
expr_stmt|;
name|finishContainer
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|,
name|ContainerType
operator|.
name|TASK
argument_list|,
literal|3
argument_list|,
name|ContainerExecutor
operator|.
name|ExitCode
operator|.
name|FORCE_KILLED
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|logFiles
argument_list|)
expr_stmt|;
name|finishApplication
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|)
expr_stmt|;
name|verifyContainerLogs
argument_list|(
name|logAggregationService
argument_list|,
name|appId
argument_list|,
operator|new
name|ContainerId
index|[]
block|{
name|container1
block|}
argument_list|,
name|logFiles
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyLogAggFinishEvent
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testAMOrFailedContainerPolicy ()
specifier|public
name|void
name|testAMOrFailedContainerPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|createApplication
argument_list|()
decl_stmt|;
name|LogAggregationService
name|logAggregationService
init|=
name|createLogAggregationService
argument_list|(
name|appId
argument_list|,
name|AMOrFailedContainerLogAggregationPolicy
operator|.
name|class
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
index|[]
name|logFiles
init|=
operator|new
name|String
index|[]
block|{
literal|"stdout"
block|}
decl_stmt|;
name|ContainerId
name|container1
init|=
name|finishContainer
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|,
name|ContainerType
operator|.
name|APPLICATION_MASTER
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|logFiles
argument_list|)
decl_stmt|;
name|ContainerId
name|container2
init|=
name|finishContainer
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|,
name|ContainerType
operator|.
name|TASK
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
name|logFiles
argument_list|)
decl_stmt|;
name|finishContainer
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|,
name|ContainerType
operator|.
name|TASK
argument_list|,
literal|3
argument_list|,
name|ContainerExecutor
operator|.
name|ExitCode
operator|.
name|FORCE_KILLED
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|logFiles
argument_list|)
expr_stmt|;
name|finishApplication
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|)
expr_stmt|;
name|verifyContainerLogs
argument_list|(
name|logAggregationService
argument_list|,
name|appId
argument_list|,
operator|new
name|ContainerId
index|[]
block|{
name|container1
block|,
name|container2
block|}
argument_list|,
name|logFiles
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyLogAggFinishEvent
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testFailedOrKilledContainerPolicy ()
specifier|public
name|void
name|testFailedOrKilledContainerPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|createApplication
argument_list|()
decl_stmt|;
name|LogAggregationService
name|logAggregationService
init|=
name|createLogAggregationService
argument_list|(
name|appId
argument_list|,
name|FailedOrKilledContainerLogAggregationPolicy
operator|.
name|class
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
index|[]
name|logFiles
init|=
operator|new
name|String
index|[]
block|{
literal|"stdout"
block|}
decl_stmt|;
name|finishContainer
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|,
name|ContainerType
operator|.
name|APPLICATION_MASTER
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|logFiles
argument_list|)
expr_stmt|;
name|ContainerId
name|container2
init|=
name|finishContainer
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|,
name|ContainerType
operator|.
name|TASK
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
name|logFiles
argument_list|)
decl_stmt|;
name|ContainerId
name|container3
init|=
name|finishContainer
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|,
name|ContainerType
operator|.
name|TASK
argument_list|,
literal|3
argument_list|,
name|ContainerExecutor
operator|.
name|ExitCode
operator|.
name|FORCE_KILLED
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|logFiles
argument_list|)
decl_stmt|;
name|finishApplication
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|)
expr_stmt|;
name|verifyContainerLogs
argument_list|(
name|logAggregationService
argument_list|,
name|appId
argument_list|,
operator|new
name|ContainerId
index|[]
block|{
name|container2
block|,
name|container3
block|}
argument_list|,
name|logFiles
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyLogAggFinishEvent
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testAMOnlyContainerPolicy ()
specifier|public
name|void
name|testAMOnlyContainerPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|createApplication
argument_list|()
decl_stmt|;
name|LogAggregationService
name|logAggregationService
init|=
name|createLogAggregationService
argument_list|(
name|appId
argument_list|,
name|AMOnlyLogAggregationPolicy
operator|.
name|class
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
index|[]
name|logFiles
init|=
operator|new
name|String
index|[]
block|{
literal|"stdout"
block|}
decl_stmt|;
name|ContainerId
name|container1
init|=
name|finishContainer
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|,
name|ContainerType
operator|.
name|APPLICATION_MASTER
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|logFiles
argument_list|)
decl_stmt|;
name|finishContainer
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|,
name|ContainerType
operator|.
name|TASK
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
name|logFiles
argument_list|)
expr_stmt|;
name|finishContainer
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|,
name|ContainerType
operator|.
name|TASK
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
name|logFiles
argument_list|)
expr_stmt|;
name|finishApplication
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|)
expr_stmt|;
name|verifyContainerLogs
argument_list|(
name|logAggregationService
argument_list|,
name|appId
argument_list|,
operator|new
name|ContainerId
index|[]
block|{
name|container1
block|}
argument_list|,
name|logFiles
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyLogAggFinishEvent
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
comment|// Test sample container policy with an app that has
comment|// the same number of successful containers as
comment|// SampleContainerLogAggregationPolicy.DEFAULT_SAMPLE_MIN_THRESHOLD.
comment|// and verify all those containers' logs are aggregated.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testSampleContainerPolicyWithSmallApp ()
specifier|public
name|void
name|testSampleContainerPolicyWithSmallApp
parameter_list|()
throws|throws
name|Exception
block|{
name|setupAndTestSampleContainerPolicy
argument_list|(
name|SampleContainerLogAggregationPolicy
operator|.
name|DEFAULT_SAMPLE_MIN_THRESHOLD
argument_list|,
name|SampleContainerLogAggregationPolicy
operator|.
name|DEFAULT_SAMPLE_RATE
argument_list|,
name|SampleContainerLogAggregationPolicy
operator|.
name|DEFAULT_SAMPLE_MIN_THRESHOLD
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Test sample container policy with an app that has
comment|// more successful containers than
comment|// SampleContainerLogAggregationPolicy.DEFAULT_SAMPLE_MIN_THRESHOLD.
comment|// and verify some of those containers' logs are aggregated.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testSampleContainerPolicyWithLargeApp ()
specifier|public
name|void
name|testSampleContainerPolicyWithLargeApp
parameter_list|()
throws|throws
name|Exception
block|{
name|setupAndTestSampleContainerPolicy
argument_list|(
name|SampleContainerLogAggregationPolicy
operator|.
name|DEFAULT_SAMPLE_MIN_THRESHOLD
operator|*
literal|10
argument_list|,
name|SampleContainerLogAggregationPolicy
operator|.
name|DEFAULT_SAMPLE_RATE
argument_list|,
name|SampleContainerLogAggregationPolicy
operator|.
name|DEFAULT_SAMPLE_MIN_THRESHOLD
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Test sample container policy with zero sample rate.
comment|// and verify there is no sampling beyond the MIN_THRESHOLD containers.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testSampleContainerPolicyWithZeroSampleRate ()
specifier|public
name|void
name|testSampleContainerPolicyWithZeroSampleRate
parameter_list|()
throws|throws
name|Exception
block|{
name|setupAndTestSampleContainerPolicy
argument_list|(
name|SampleContainerLogAggregationPolicy
operator|.
name|DEFAULT_SAMPLE_MIN_THRESHOLD
operator|*
literal|10
argument_list|,
literal|0
argument_list|,
name|SampleContainerLogAggregationPolicy
operator|.
name|DEFAULT_SAMPLE_MIN_THRESHOLD
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Test sample container policy with 100 percent sample rate.
comment|// and verify all containers' logs are aggregated.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testSampleContainerPolicyWith100PercentSampleRate ()
specifier|public
name|void
name|testSampleContainerPolicyWith100PercentSampleRate
parameter_list|()
throws|throws
name|Exception
block|{
name|setupAndTestSampleContainerPolicy
argument_list|(
name|SampleContainerLogAggregationPolicy
operator|.
name|DEFAULT_SAMPLE_MIN_THRESHOLD
operator|*
literal|10
argument_list|,
literal|1.0f
argument_list|,
name|SampleContainerLogAggregationPolicy
operator|.
name|DEFAULT_SAMPLE_MIN_THRESHOLD
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Test sample container policy with zero min threshold.
comment|// and verify some containers' logs are aggregated.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testSampleContainerPolicyWithZeroMinThreshold ()
specifier|public
name|void
name|testSampleContainerPolicyWithZeroMinThreshold
parameter_list|()
throws|throws
name|Exception
block|{
name|setupAndTestSampleContainerPolicy
argument_list|(
name|SampleContainerLogAggregationPolicy
operator|.
name|DEFAULT_SAMPLE_MIN_THRESHOLD
operator|*
literal|10
argument_list|,
name|SampleContainerLogAggregationPolicy
operator|.
name|DEFAULT_SAMPLE_RATE
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Test sample container policy with customized settings.
comment|// and verify some containers' logs are aggregated.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testSampleContainerPolicyWithCustomizedSettings ()
specifier|public
name|void
name|testSampleContainerPolicyWithCustomizedSettings
parameter_list|()
throws|throws
name|Exception
block|{
name|setupAndTestSampleContainerPolicy
argument_list|(
literal|500
argument_list|,
literal|0.5f
argument_list|,
literal|50
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Test cluster-wide sample container policy.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testClusterSampleContainerPolicy ()
specifier|public
name|void
name|testClusterSampleContainerPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|setupAndTestSampleContainerPolicy
argument_list|(
literal|500
argument_list|,
literal|0.5f
argument_list|,
literal|50
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Test the default cluster-wide sample container policy.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testDefaultClusterSampleContainerPolicy ()
specifier|public
name|void
name|testDefaultClusterSampleContainerPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|setupAndTestSampleContainerPolicy
argument_list|(
name|SampleContainerLogAggregationPolicy
operator|.
name|DEFAULT_SAMPLE_MIN_THRESHOLD
operator|*
literal|10
argument_list|,
name|SampleContainerLogAggregationPolicy
operator|.
name|DEFAULT_SAMPLE_RATE
argument_list|,
name|SampleContainerLogAggregationPolicy
operator|.
name|DEFAULT_SAMPLE_MIN_THRESHOLD
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// The application specifies invalid policy class
comment|// NM should fallback to the default policy which is to aggregate all
comment|// containers.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testInvalidPolicyClassName ()
specifier|public
name|void
name|testInvalidPolicyClassName
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|createApplication
argument_list|()
decl_stmt|;
name|LogAggregationService
name|logAggregationService
init|=
name|createLogAggregationService
argument_list|(
name|appId
argument_list|,
literal|"foo"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|verifyDefaultPolicy
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|)
expr_stmt|;
block|}
comment|// The application specifies LogAggregationContext, but not policy class.
comment|// NM should fallback to the default policy which is to aggregate all
comment|// containers.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testNullPolicyClassName ()
specifier|public
name|void
name|testNullPolicyClassName
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|createApplication
argument_list|()
decl_stmt|;
name|LogAggregationService
name|logAggregationService
init|=
name|createLogAggregationService
argument_list|(
name|appId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|verifyDefaultPolicy
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|)
expr_stmt|;
block|}
comment|// The application doesn't specifies LogAggregationContext.
comment|// NM should fallback to the default policy which is to aggregate all
comment|// containers.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testDefaultPolicyWithoutLogAggregationContext ()
specifier|public
name|void
name|testDefaultPolicyWithoutLogAggregationContext
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|createApplication
argument_list|()
decl_stmt|;
name|LogAggregationService
name|logAggregationService
init|=
name|createLogAggregationService
argument_list|(
name|appId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|verifyDefaultPolicy
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyDefaultPolicy (ApplicationId appId, LogAggregationService logAggregationService)
specifier|private
name|void
name|verifyDefaultPolicy
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|LogAggregationService
name|logAggregationService
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|logFiles
init|=
operator|new
name|String
index|[]
block|{
literal|"stdout"
block|}
decl_stmt|;
name|ContainerId
name|container1
init|=
name|finishContainer
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|,
name|ContainerType
operator|.
name|APPLICATION_MASTER
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|logFiles
argument_list|)
decl_stmt|;
name|ContainerId
name|container2
init|=
name|finishContainer
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|,
name|ContainerType
operator|.
name|TASK
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
name|logFiles
argument_list|)
decl_stmt|;
name|ContainerId
name|container3
init|=
name|finishContainer
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|,
name|ContainerType
operator|.
name|TASK
argument_list|,
literal|3
argument_list|,
name|ContainerExecutor
operator|.
name|ExitCode
operator|.
name|FORCE_KILLED
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|logFiles
argument_list|)
decl_stmt|;
name|finishApplication
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|)
expr_stmt|;
name|verifyContainerLogs
argument_list|(
name|logAggregationService
argument_list|,
name|appId
argument_list|,
operator|new
name|ContainerId
index|[]
block|{
name|container1
block|,
name|container2
block|,
name|container3
block|}
argument_list|,
name|logFiles
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyLogAggFinishEvent
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
comment|// If enableAtClusterLevel is false, the policy is set up via
comment|// LogAggregationContext at the application level. If it is true,
comment|// the policy is set up via Configuration at the cluster level.
DECL|method|setupAndTestSampleContainerPolicy (int successfulContainers, float sampleRate, int minThreshold, boolean enableAtClusterLevel)
specifier|private
name|void
name|setupAndTestSampleContainerPolicy
parameter_list|(
name|int
name|successfulContainers
parameter_list|,
name|float
name|sampleRate
parameter_list|,
name|int
name|minThreshold
parameter_list|,
name|boolean
name|enableAtClusterLevel
parameter_list|)
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|createApplication
argument_list|()
decl_stmt|;
name|String
name|policyParameters
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sampleRate
operator|!=
name|SampleContainerLogAggregationPolicy
operator|.
name|DEFAULT_SAMPLE_RATE
operator|||
name|minThreshold
operator|!=
name|SampleContainerLogAggregationPolicy
operator|.
name|DEFAULT_SAMPLE_MIN_THRESHOLD
condition|)
block|{
name|policyParameters
operator|=
name|SampleContainerLogAggregationPolicy
operator|.
name|buildParameters
argument_list|(
name|sampleRate
argument_list|,
name|minThreshold
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enableAtClusterLevel
condition|)
block|{
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_AGG_POLICY_CLASS
argument_list|,
name|SampleContainerLogAggregationPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|policyParameters
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_AGG_POLICY_CLASS_PARAMETERS
argument_list|,
name|policyParameters
argument_list|)
expr_stmt|;
block|}
block|}
name|LogAggregationService
name|logAggregationService
init|=
name|createLogAggregationService
argument_list|(
name|appId
argument_list|,
name|SampleContainerLogAggregationPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|policyParameters
argument_list|,
operator|!
name|enableAtClusterLevel
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
name|containerIds
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|logFiles
init|=
operator|new
name|String
index|[]
block|{
literal|"stdout"
block|}
decl_stmt|;
name|int
name|cid
init|=
literal|1
decl_stmt|;
comment|// AM container
name|containerIds
operator|.
name|add
argument_list|(
name|finishContainer
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|,
name|ContainerType
operator|.
name|APPLICATION_MASTER
argument_list|,
name|cid
operator|++
argument_list|,
literal|0
argument_list|,
name|logFiles
argument_list|)
argument_list|)
expr_stmt|;
comment|// Successful containers
comment|// We expect the minThreshold containers will be log aggregated.
if|if
condition|(
name|minThreshold
operator|>
literal|0
condition|)
block|{
name|containerIds
operator|.
name|addAll
argument_list|(
name|finishContainers
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|,
name|cid
argument_list|,
operator|(
name|successfulContainers
operator|>
name|minThreshold
operator|)
condition|?
name|minThreshold
else|:
name|successfulContainers
argument_list|,
literal|0
argument_list|,
name|logFiles
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cid
operator|=
name|containerIds
operator|.
name|size
argument_list|()
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|successfulContainers
operator|>
name|minThreshold
condition|)
block|{
name|List
argument_list|<
name|ContainerId
argument_list|>
name|restOfSuccessfulContainers
init|=
name|finishContainers
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|,
name|cid
argument_list|,
name|successfulContainers
operator|-
name|minThreshold
argument_list|,
literal|0
argument_list|,
name|logFiles
argument_list|)
decl_stmt|;
name|cid
operator|+=
name|successfulContainers
operator|-
name|minThreshold
expr_stmt|;
comment|// If the sample rate is 100 percent, restOfSuccessfulContainers will be
comment|// all be log aggregated.
if|if
condition|(
name|sampleRate
operator|==
literal|1.0
condition|)
block|{
name|containerIds
operator|.
name|addAll
argument_list|(
name|restOfSuccessfulContainers
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Failed container
name|containerIds
operator|.
name|add
argument_list|(
name|finishContainer
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|,
name|ContainerType
operator|.
name|TASK
argument_list|,
name|cid
operator|++
argument_list|,
literal|1
argument_list|,
name|logFiles
argument_list|)
argument_list|)
expr_stmt|;
comment|// Killed container
name|containerIds
operator|.
name|add
argument_list|(
name|finishContainer
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|,
name|ContainerType
operator|.
name|TASK
argument_list|,
name|cid
operator|++
argument_list|,
name|ContainerExecutor
operator|.
name|ExitCode
operator|.
name|FORCE_KILLED
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|logFiles
argument_list|)
argument_list|)
expr_stmt|;
name|finishApplication
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|)
expr_stmt|;
comment|// The number of containers with logs should be 3(AM + failed + killed) +
comment|// DEFAULT_SAMPLE_MIN_THRESHOLD +
comment|// ( successfulContainers - DEFAULT_SAMPLE_MIN_THRESHOLD ) * SAMPLE_RATE
comment|// Due to the sampling nature, the exact number could vary.
comment|// So we only check for a range.
comment|// For the cases where successfulContainers is the same as minThreshold
comment|// or sampleRate is zero, minOfContainersWithLogs and
comment|// maxOfContainersWithLogs will the same.
name|int
name|minOfContainersWithLogs
init|=
literal|3
operator|+
name|minThreshold
operator|+
call|(
name|int
call|)
argument_list|(
operator|(
name|successfulContainers
operator|-
name|minThreshold
operator|)
operator|*
name|sampleRate
operator|/
literal|2
argument_list|)
decl_stmt|;
name|int
name|maxOfContainersWithLogs
init|=
literal|3
operator|+
name|minThreshold
operator|+
call|(
name|int
call|)
argument_list|(
operator|(
name|successfulContainers
operator|-
name|minThreshold
operator|)
operator|*
name|sampleRate
operator|*
literal|2
argument_list|)
decl_stmt|;
name|verifyContainerLogs
argument_list|(
name|logAggregationService
argument_list|,
name|appId
argument_list|,
name|containerIds
operator|.
name|toArray
argument_list|(
operator|new
name|ContainerId
index|[
name|containerIds
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|minOfContainersWithLogs
argument_list|,
name|maxOfContainersWithLogs
argument_list|,
name|logFiles
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyLogAggFinishEvent
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
DECL|method|createApplication ()
specifier|private
name|ApplicationId
name|createApplication
parameter_list|()
block|{
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|localLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|this
operator|.
name|remoteRootLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1234
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Application
name|mockApp
init|=
name|mock
argument_list|(
name|Application
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockApp
operator|.
name|getContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|HashMap
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|mockApp
argument_list|)
expr_stmt|;
return|return
name|appId
return|;
block|}
DECL|method|createLogAggregationService ( ApplicationId appId, Class<? extends ContainerLogAggregationPolicy> policy, String parameters)
specifier|private
name|LogAggregationService
name|createLogAggregationService
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|ContainerLogAggregationPolicy
argument_list|>
name|policy
parameter_list|,
name|String
name|parameters
parameter_list|)
block|{
return|return
name|createLogAggregationService
argument_list|(
name|appId
argument_list|,
name|policy
operator|.
name|getName
argument_list|()
argument_list|,
name|parameters
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|createLogAggregationService ( ApplicationId appId, String className, String parameters, boolean createLogAggContext)
specifier|private
name|LogAggregationService
name|createLogAggregationService
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|className
parameter_list|,
name|String
name|parameters
parameter_list|,
name|boolean
name|createLogAggContext
parameter_list|)
block|{
name|ConcurrentHashMap
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
name|containers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
argument_list|()
decl_stmt|;
name|LogAggregationService
name|logAggregationService
init|=
operator|new
name|LogAggregationService
argument_list|(
name|dispatcher
argument_list|,
name|this
operator|.
name|context
argument_list|,
name|this
operator|.
name|delSrvc
argument_list|,
name|super
operator|.
name|dirsHandler
argument_list|)
decl_stmt|;
name|logAggregationService
operator|.
name|init
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|start
argument_list|()
expr_stmt|;
name|LogAggregationContext
name|logAggContext
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|createLogAggContext
condition|)
block|{
name|logAggContext
operator|=
name|Records
operator|.
name|newRecord
argument_list|(
name|LogAggregationContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|logAggContext
operator|.
name|setLogAggregationPolicyClassName
argument_list|(
name|className
argument_list|)
expr_stmt|;
if|if
condition|(
name|parameters
operator|!=
literal|null
condition|)
block|{
name|logAggContext
operator|.
name|setLogAggregationPolicyParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
block|}
block|}
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppStartedEvent
argument_list|(
name|appId
argument_list|,
name|this
operator|.
name|user
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|acls
argument_list|,
name|logAggContext
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|logAggregationService
return|;
block|}
DECL|method|createContainer (ApplicationAttemptId appAttemptId1, long cId, ContainerType containerType)
specifier|private
name|ContainerId
name|createContainer
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId1
parameter_list|,
name|long
name|cId
parameter_list|,
name|ContainerType
name|containerType
parameter_list|)
block|{
name|ContainerId
name|containerId
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|appAttemptId1
argument_list|,
name|cId
argument_list|)
decl_stmt|;
name|Resource
name|r
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerTokenIdentifier
name|containerToken
init|=
operator|new
name|ContainerTokenIdentifier
argument_list|(
name|containerId
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|user
argument_list|,
name|r
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|100000L
argument_list|,
literal|123
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|containerType
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|context
operator|.
name|getContainers
argument_list|()
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|container
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainerTokenIdentifier
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerToken
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
return|return
name|containerId
return|;
block|}
DECL|method|finishContainer (ApplicationId application1, LogAggregationService logAggregationService, ContainerType containerType, long cId, int exitCode, String[] logFiles)
specifier|private
name|ContainerId
name|finishContainer
parameter_list|(
name|ApplicationId
name|application1
parameter_list|,
name|LogAggregationService
name|logAggregationService
parameter_list|,
name|ContainerType
name|containerType
parameter_list|,
name|long
name|cId
parameter_list|,
name|int
name|exitCode
parameter_list|,
name|String
index|[]
name|logFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|ApplicationAttemptId
name|appAttemptId1
init|=
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|application1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|createContainer
argument_list|(
name|appAttemptId1
argument_list|,
name|cId
argument_list|,
name|containerType
argument_list|)
decl_stmt|;
comment|// Simulate log-file creation
name|File
name|appLogDir1
init|=
operator|new
name|File
argument_list|(
name|localLogDir
argument_list|,
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|application1
argument_list|)
argument_list|)
decl_stmt|;
name|appLogDir1
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|writeContainerLogs
argument_list|(
name|appLogDir1
argument_list|,
name|containerId
argument_list|,
name|logFiles
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerContainerFinishedEvent
argument_list|(
name|containerId
argument_list|,
name|exitCode
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|containerId
return|;
block|}
DECL|method|finishContainers (ApplicationId appId, LogAggregationService logAggregationService, long startingCid, int count, int exitCode, String[] logFiles)
specifier|private
name|List
argument_list|<
name|ContainerId
argument_list|>
name|finishContainers
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|LogAggregationService
name|logAggregationService
parameter_list|,
name|long
name|startingCid
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|exitCode
parameter_list|,
name|String
index|[]
name|logFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
name|containerIds
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|cid
init|=
name|startingCid
init|;
name|cid
operator|<
name|startingCid
operator|+
name|count
condition|;
name|cid
operator|++
control|)
block|{
name|containerIds
operator|.
name|add
argument_list|(
name|finishContainer
argument_list|(
name|appId
argument_list|,
name|logAggregationService
argument_list|,
name|ContainerType
operator|.
name|TASK
argument_list|,
name|cid
argument_list|,
name|exitCode
argument_list|,
name|logFiles
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|containerIds
return|;
block|}
DECL|method|finishApplication (ApplicationId appId, LogAggregationService logAggregationService)
specifier|private
name|void
name|finishApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|LogAggregationService
name|logAggregationService
parameter_list|)
throws|throws
name|Exception
block|{
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|ApplicationEvent
name|expectedInitEvents
index|[]
init|=
operator|new
name|ApplicationEvent
index|[]
block|{
operator|new
name|ApplicationEvent
argument_list|(
name|appId
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_INITED
argument_list|)
block|}
decl_stmt|;
name|checkEvents
argument_list|(
name|appEventHandler
argument_list|,
name|expectedInitEvents
argument_list|,
literal|false
argument_list|,
literal|"getType"
argument_list|,
literal|"getApplicationID"
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|appEventHandler
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppFinishedEvent
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logAggregationService
operator|.
name|getNumAggregators
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyLogAggFinishEvent (ApplicationId appId)
specifier|private
name|void
name|verifyLogAggFinishEvent
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|Exception
block|{
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|ApplicationEvent
index|[]
name|expectedFinishedEvents
init|=
operator|new
name|ApplicationEvent
index|[]
block|{
operator|new
name|ApplicationEvent
argument_list|(
name|appId
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_FINISHED
argument_list|)
block|}
decl_stmt|;
name|checkEvents
argument_list|(
name|appEventHandler
argument_list|,
name|expectedFinishedEvents
argument_list|,
literal|false
argument_list|,
literal|"getType"
argument_list|,
literal|"getApplicationID"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
DECL|method|testLogAggregationServiceWithInterval ()
specifier|public
name|void
name|testLogAggregationServiceWithInterval
parameter_list|()
throws|throws
name|Exception
block|{
name|testLogAggregationService
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
DECL|method|testLogAggregationServiceWithRetention ()
specifier|public
name|void
name|testLogAggregationServiceWithRetention
parameter_list|()
throws|throws
name|Exception
block|{
name|testLogAggregationService
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testLogAggregationService (boolean retentionSizeLimitation)
specifier|private
name|void
name|testLogAggregationService
parameter_list|(
name|boolean
name|retentionSizeLimitation
parameter_list|)
throws|throws
name|Exception
block|{
name|LogAggregationContext
name|logAggregationContextWithInterval
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|LogAggregationContext
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// set IncludePattern/excludePattern in rolling fashion
comment|// we expect all the logs except std_final will be uploaded
comment|// when app is running. The std_final will be uploaded when
comment|// the app finishes.
name|logAggregationContextWithInterval
operator|.
name|setRolledLogsIncludePattern
argument_list|(
literal|".*"
argument_list|)
expr_stmt|;
name|logAggregationContextWithInterval
operator|.
name|setRolledLogsExcludePattern
argument_list|(
literal|"std_final"
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|localLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|//configure YarnConfiguration.NM_REMOTE_APP_LOG_DIR to
comment|//have fully qualified path
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
literal|"file://"
operator|+
name|this
operator|.
name|remoteRootLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
if|if
condition|(
name|retentionSizeLimitation
condition|)
block|{
comment|// set the retention size as 1. The number of logs for one application
comment|// in one NM should be 1.
name|this
operator|.
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_PREFIX
operator|+
literal|"log-aggregation.num-log-files-per-app"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// by setting this configuration, the log files will not be deleted immediately after
comment|// they are aggregated to remote directory.
comment|// We could use it to test whether the previous aggregated log files will be aggregated
comment|// again in next cycle.
name|this
operator|.
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|DEBUG_NM_DELETE_DELAY_SEC
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|ApplicationId
name|application
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|123456
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|application
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|container
init|=
name|createContainer
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|,
name|ContainerType
operator|.
name|APPLICATION_MASTER
argument_list|)
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|Application
argument_list|>
name|maps
init|=
name|this
operator|.
name|context
operator|.
name|getApplications
argument_list|()
decl_stmt|;
name|Application
name|app
init|=
name|mock
argument_list|(
name|Application
operator|.
name|class
argument_list|)
decl_stmt|;
name|maps
operator|.
name|put
argument_list|(
name|application
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|this
operator|.
name|context
operator|.
name|getContainers
argument_list|()
argument_list|)
expr_stmt|;
name|LogAggregationService
name|logAggregationService
init|=
operator|new
name|LogAggregationService
argument_list|(
name|dispatcher
argument_list|,
name|context
argument_list|,
name|this
operator|.
name|delSrvc
argument_list|,
name|super
operator|.
name|dirsHandler
argument_list|)
decl_stmt|;
name|logAggregationService
operator|.
name|init
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// AppLogDir should be created
name|File
name|appLogDir
init|=
operator|new
name|File
argument_list|(
name|localLogDir
argument_list|,
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|application
argument_list|)
argument_list|)
decl_stmt|;
name|appLogDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppStartedEvent
argument_list|(
name|application
argument_list|,
name|this
operator|.
name|user
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|acls
argument_list|,
name|logAggregationContextWithInterval
argument_list|)
argument_list|)
expr_stmt|;
name|LogFileStatusInLastCycle
name|logFileStatusInLastCycle
init|=
literal|null
decl_stmt|;
comment|// Simulate log-file creation
comment|// create std_final in log directory which will not be aggregated
comment|// until the app finishes.
name|String
index|[]
name|logFiles1WithFinalLog
init|=
operator|new
name|String
index|[]
block|{
literal|"stdout"
block|,
literal|"stderr"
block|,
literal|"syslog"
block|,
literal|"std_final"
block|}
decl_stmt|;
name|String
index|[]
name|logFiles1
init|=
operator|new
name|String
index|[]
block|{
literal|"stdout"
block|,
literal|"stderr"
block|,
literal|"syslog"
block|}
decl_stmt|;
name|writeContainerLogs
argument_list|(
name|appLogDir
argument_list|,
name|container
argument_list|,
name|logFiles1WithFinalLog
argument_list|)
expr_stmt|;
comment|// Do log aggregation
name|AppLogAggregatorImpl
name|aggregator
init|=
operator|(
name|AppLogAggregatorImpl
operator|)
name|logAggregationService
operator|.
name|getAppLogAggregators
argument_list|()
operator|.
name|get
argument_list|(
name|application
argument_list|)
decl_stmt|;
name|aggregator
operator|.
name|doLogAggregationOutOfBand
argument_list|()
expr_stmt|;
if|if
condition|(
name|retentionSizeLimitation
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waitAndCheckLogNum
argument_list|(
name|logAggregationService
argument_list|,
name|application
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waitAndCheckLogNum
argument_list|(
name|logAggregationService
argument_list|,
name|application
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Container logs should be uploaded
name|logFileStatusInLastCycle
operator|=
name|verifyContainerLogs
argument_list|(
name|logAggregationService
argument_list|,
name|application
argument_list|,
operator|new
name|ContainerId
index|[]
block|{
name|container
block|}
argument_list|,
name|logFiles1
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|logFile
range|:
name|logFiles1
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|logFileStatusInLastCycle
operator|.
name|getLogFileTypesInLastCycle
argument_list|()
operator|.
name|contains
argument_list|(
name|logFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Make sure the std_final is not uploaded.
name|Assert
operator|.
name|assertFalse
argument_list|(
name|logFileStatusInLastCycle
operator|.
name|getLogFileTypesInLastCycle
argument_list|()
operator|.
name|contains
argument_list|(
literal|"std_final"
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// There is no log generated at this time. Do the log aggregation again.
name|aggregator
operator|.
name|doLogAggregationOutOfBand
argument_list|()
expr_stmt|;
comment|// Same logs will not be aggregated again.
comment|// Only one aggregated log file in Remote file directory.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numOfLogsAvailable
argument_list|(
name|logAggregationService
argument_list|,
name|application
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// Do log aggregation
name|String
index|[]
name|logFiles2
init|=
operator|new
name|String
index|[]
block|{
literal|"stdout_1"
block|,
literal|"stderr_1"
block|,
literal|"syslog_1"
block|}
decl_stmt|;
name|writeContainerLogs
argument_list|(
name|appLogDir
argument_list|,
name|container
argument_list|,
name|logFiles2
argument_list|)
expr_stmt|;
name|aggregator
operator|.
name|doLogAggregationOutOfBand
argument_list|()
expr_stmt|;
if|if
condition|(
name|retentionSizeLimitation
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waitAndCheckLogNum
argument_list|(
name|logAggregationService
argument_list|,
name|application
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|logFileStatusInLastCycle
operator|.
name|getLogFilePathInLastCycle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waitAndCheckLogNum
argument_list|(
name|logAggregationService
argument_list|,
name|application
argument_list|,
literal|50
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Container logs should be uploaded
name|logFileStatusInLastCycle
operator|=
name|verifyContainerLogs
argument_list|(
name|logAggregationService
argument_list|,
name|application
argument_list|,
operator|new
name|ContainerId
index|[]
block|{
name|container
block|}
argument_list|,
name|logFiles2
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|logFile
range|:
name|logFiles2
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|logFileStatusInLastCycle
operator|.
name|getLogFileTypesInLastCycle
argument_list|()
operator|.
name|contains
argument_list|(
name|logFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Make sure the std_final is not uploaded.
name|Assert
operator|.
name|assertFalse
argument_list|(
name|logFileStatusInLastCycle
operator|.
name|getLogFileTypesInLastCycle
argument_list|()
operator|.
name|contains
argument_list|(
literal|"std_final"
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// create another logs
name|String
index|[]
name|logFiles3
init|=
operator|new
name|String
index|[]
block|{
literal|"stdout_2"
block|,
literal|"stderr_2"
block|,
literal|"syslog_2"
block|}
decl_stmt|;
name|writeContainerLogs
argument_list|(
name|appLogDir
argument_list|,
name|container
argument_list|,
name|logFiles3
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerContainerFinishedEvent
argument_list|(
name|container
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppFinishedEvent
argument_list|(
name|application
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|retentionSizeLimitation
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waitAndCheckLogNum
argument_list|(
name|logAggregationService
argument_list|,
name|application
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|logFileStatusInLastCycle
operator|.
name|getLogFilePathInLastCycle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waitAndCheckLogNum
argument_list|(
name|logAggregationService
argument_list|,
name|application
argument_list|,
literal|50
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// the app is finished. The log "std_final" should be aggregated this time.
name|String
index|[]
name|logFiles3WithFinalLog
init|=
operator|new
name|String
index|[]
block|{
literal|"stdout_2"
block|,
literal|"stderr_2"
block|,
literal|"syslog_2"
block|,
literal|"std_final"
block|}
decl_stmt|;
name|verifyContainerLogs
argument_list|(
name|logAggregationService
argument_list|,
name|application
argument_list|,
operator|new
name|ContainerId
index|[]
block|{
name|container
block|}
argument_list|,
name|logFiles3WithFinalLog
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logAggregationService
operator|.
name|getNumAggregators
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testAddNewTokenSentFromRMForLogAggregation ()
specifier|public
name|void
name|testAddNewTokenSentFromRMForLogAggregation
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ApplicationId
name|application1
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1234
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Application
name|mockApp
init|=
name|mock
argument_list|(
name|Application
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockApp
operator|.
name|getContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|HashMap
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|application1
argument_list|,
name|mockApp
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
name|LogAggregationService
name|logAggregationService
init|=
operator|new
name|LogAggregationService
argument_list|(
name|dispatcher
argument_list|,
name|this
operator|.
name|context
argument_list|,
name|this
operator|.
name|delSrvc
argument_list|,
name|super
operator|.
name|dirsHandler
argument_list|)
decl_stmt|;
name|logAggregationService
operator|.
name|init
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|start
argument_list|()
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppStartedEvent
argument_list|(
name|application1
argument_list|,
name|this
operator|.
name|user
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|acls
argument_list|,
name|Records
operator|.
name|newRecord
argument_list|(
name|LogAggregationContext
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Inject new token for log-aggregation after app log-aggregator init
name|Text
name|userText1
init|=
operator|new
name|Text
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|RMDelegationTokenIdentifier
name|dtId1
init|=
operator|new
name|RMDelegationTokenIdentifier
argument_list|(
name|userText1
argument_list|,
operator|new
name|Text
argument_list|(
literal|"renewer1"
argument_list|)
argument_list|,
name|userText1
argument_list|)
decl_stmt|;
specifier|final
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|token1
init|=
operator|new
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
argument_list|(
name|dtId1
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"password1"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|dtId1
operator|.
name|getKind
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
literal|"service1"
argument_list|)
argument_list|)
decl_stmt|;
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|credentials
operator|.
name|addToken
argument_list|(
name|userText1
argument_list|,
name|token1
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|.
name|getSystemCredentialsForApps
argument_list|()
operator|.
name|put
argument_list|(
name|application1
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|handle
argument_list|(
operator|new
name|LogHandlerAppFinishedEvent
argument_list|(
name|application1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|UserGroupInformation
name|ugi
init|=
operator|(
operator|(
name|AppLogAggregatorImpl
operator|)
name|logAggregationService
operator|.
name|getAppLogAggregators
argument_list|()
operator|.
name|get
argument_list|(
name|application1
argument_list|)
operator|)
operator|.
name|getUgi
argument_list|()
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|boolean
name|hasNewToken
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
range|:
name|ugi
operator|.
name|getCredentials
argument_list|()
operator|.
name|getAllTokens
argument_list|()
control|)
block|{
if|if
condition|(
name|token
operator|.
name|equals
argument_list|(
name|token1
argument_list|)
condition|)
block|{
name|hasNewToken
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|hasNewToken
return|;
block|}
block|}
argument_list|,
literal|1000
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
name|logAggregationService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|numOfLogsAvailable (LogAggregationService logAggregationService, ApplicationId appId, boolean sizeLimited, String lastLogFile)
specifier|private
name|int
name|numOfLogsAvailable
parameter_list|(
name|LogAggregationService
name|logAggregationService
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|boolean
name|sizeLimited
parameter_list|,
name|String
name|lastLogFile
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|appLogDir
init|=
name|logAggregationService
operator|.
name|getRemoteAppLogDir
argument_list|(
name|appId
argument_list|,
name|this
operator|.
name|user
argument_list|)
decl_stmt|;
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|nodeFiles
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Path
name|qualifiedLogDir
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|this
operator|.
name|conf
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|appLogDir
argument_list|)
decl_stmt|;
name|nodeFiles
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|qualifiedLogDir
operator|.
name|toUri
argument_list|()
argument_list|,
name|this
operator|.
name|conf
argument_list|)
operator|.
name|listStatus
argument_list|(
name|appLogDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnf
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|nodeFiles
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileStatus
name|status
init|=
name|nodeFiles
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|filename
init|=
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|filename
operator|.
name|contains
argument_list|(
name|LogAggregationUtils
operator|.
name|TMP_FILE_SUFFIX
argument_list|)
operator|||
operator|(
name|lastLogFile
operator|!=
literal|null
operator|&&
name|filename
operator|.
name|contains
argument_list|(
name|lastLogFile
argument_list|)
operator|&&
name|sizeLimited
operator|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|filename
operator|.
name|contains
argument_list|(
name|LogAggregationUtils
operator|.
name|getNodeString
argument_list|(
name|logAggregationService
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
DECL|method|waitAndCheckLogNum ( LogAggregationService logAggregationService, ApplicationId application, int maxAttempts, int expectNum, boolean sizeLimited, String lastLogFile)
specifier|private
name|boolean
name|waitAndCheckLogNum
parameter_list|(
name|LogAggregationService
name|logAggregationService
parameter_list|,
name|ApplicationId
name|application
parameter_list|,
name|int
name|maxAttempts
parameter_list|,
name|int
name|expectNum
parameter_list|,
name|boolean
name|sizeLimited
parameter_list|,
name|String
name|lastLogFile
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|numOfLogsAvailable
argument_list|(
name|logAggregationService
argument_list|,
name|application
argument_list|,
name|sizeLimited
argument_list|,
name|lastLogFile
argument_list|)
operator|!=
name|expectNum
operator|&&
name|count
operator|<=
name|maxAttempts
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
return|return
name|numOfLogsAvailable
argument_list|(
name|logAggregationService
argument_list|,
name|application
argument_list|,
name|sizeLimited
argument_list|,
name|lastLogFile
argument_list|)
operator|==
name|expectNum
return|;
block|}
DECL|class|LogFileStatusInLastCycle
specifier|private
specifier|static
class|class
name|LogFileStatusInLastCycle
block|{
DECL|field|logFilePathInLastCycle
specifier|private
name|String
name|logFilePathInLastCycle
decl_stmt|;
DECL|field|logFileTypesInLastCycle
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|logFileTypesInLastCycle
decl_stmt|;
DECL|method|LogFileStatusInLastCycle (String logFilePathInLastCycle, List<String> logFileTypesInLastCycle)
specifier|public
name|LogFileStatusInLastCycle
parameter_list|(
name|String
name|logFilePathInLastCycle
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|logFileTypesInLastCycle
parameter_list|)
block|{
name|this
operator|.
name|logFilePathInLastCycle
operator|=
name|logFilePathInLastCycle
expr_stmt|;
name|this
operator|.
name|logFileTypesInLastCycle
operator|=
name|logFileTypesInLastCycle
expr_stmt|;
block|}
DECL|method|getLogFilePathInLastCycle ()
specifier|public
name|String
name|getLogFilePathInLastCycle
parameter_list|()
block|{
return|return
name|this
operator|.
name|logFilePathInLastCycle
return|;
block|}
DECL|method|getLogFileTypesInLastCycle ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLogFileTypesInLastCycle
parameter_list|()
block|{
return|return
name|this
operator|.
name|logFileTypesInLastCycle
return|;
block|}
block|}
block|}
end_class

end_unit

