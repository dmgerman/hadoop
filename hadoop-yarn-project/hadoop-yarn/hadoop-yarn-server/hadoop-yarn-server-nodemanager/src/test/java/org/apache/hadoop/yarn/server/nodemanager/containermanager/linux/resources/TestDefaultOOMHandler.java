begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.resources
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationIdPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|executor
operator|.
name|ContainerSignalContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|CGroupsHandler
operator|.
name|CGROUP_FILE_TASKS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|CGroupsHandler
operator|.
name|CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|CGroupsHandler
operator|.
name|CGROUP_PARAM_MEMORY_OOM_CONTROL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|CGroupsHandler
operator|.
name|CGROUP_PARAM_MEMORY_USAGE_BYTES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Test default out of memory handler.  */
end_comment

begin_class
DECL|class|TestDefaultOOMHandler
specifier|public
class|class
name|TestDefaultOOMHandler
block|{
comment|/**    * Test an OOM situation where no containers are running.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|YarnRuntimeException
operator|.
name|class
argument_list|)
DECL|method|testNoContainers ()
specifier|public
name|void
name|testNoContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|Context
name|context
init|=
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|CGroupsHandler
name|cGroupsHandler
init|=
name|mock
argument_list|(
name|CGroupsHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|cGroupsHandler
operator|.
name|getCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|MEMORY
argument_list|,
literal|""
argument_list|,
name|CGROUP_PARAM_MEMORY_OOM_CONTROL
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"under_oom 1"
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"under_oom 0"
argument_list|)
expr_stmt|;
name|DefaultOOMHandler
name|handler
init|=
operator|new
name|DefaultOOMHandler
argument_list|(
name|context
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|handler
operator|.
name|setCGroupsHandler
argument_list|(
name|cGroupsHandler
argument_list|)
expr_stmt|;
name|handler
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
comment|/**    * We have two containers, both out of limit. We should kill the later one.    *    * @throws Exception exception    */
annotation|@
name|Test
DECL|method|testBothContainersOOM ()
specifier|public
name|void
name|testBothContainersOOM
parameter_list|()
throws|throws
name|Exception
block|{
name|ConcurrentHashMap
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
name|containers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|Container
name|c1
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerId
name|cid1
init|=
name|createContainerId
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|c1
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cid1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c1
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c1
operator|.
name|getContainerStartTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|(
name|long
operator|)
literal|1
argument_list|)
expr_stmt|;
name|containers
operator|.
name|put
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|c1
argument_list|)
expr_stmt|;
name|Container
name|c2
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerId
name|cid2
init|=
name|createContainerId
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|c2
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cid2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c2
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c2
operator|.
name|getContainerStartTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|(
name|long
operator|)
literal|2
argument_list|)
expr_stmt|;
name|containers
operator|.
name|put
argument_list|(
name|cid2
argument_list|,
name|c2
argument_list|)
expr_stmt|;
name|CGroupsHandler
name|cGroupsHandler
init|=
name|mock
argument_list|(
name|CGroupsHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|cGroupsHandler
operator|.
name|getCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|MEMORY
argument_list|,
name|cid1
operator|.
name|toString
argument_list|()
argument_list|,
name|CGROUP_FILE_TASKS
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"1234"
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cGroupsHandler
operator|.
name|getCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|MEMORY
argument_list|,
name|cid1
operator|.
name|toString
argument_list|()
argument_list|,
name|CGROUP_PARAM_MEMORY_USAGE_BYTES
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getMB
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cGroupsHandler
operator|.
name|getCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|MEMORY
argument_list|,
name|cid1
operator|.
name|toString
argument_list|()
argument_list|,
name|CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getMB
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cGroupsHandler
operator|.
name|getCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|MEMORY
argument_list|,
name|cid2
operator|.
name|toString
argument_list|()
argument_list|,
name|CGROUP_FILE_TASKS
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"1235"
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cGroupsHandler
operator|.
name|getCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|MEMORY
argument_list|,
name|cid2
operator|.
name|toString
argument_list|()
argument_list|,
name|CGROUP_PARAM_MEMORY_USAGE_BYTES
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getMB
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cGroupsHandler
operator|.
name|getCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|MEMORY
argument_list|,
name|cid2
operator|.
name|toString
argument_list|()
argument_list|,
name|CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getMB
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerExecutor
name|ex
init|=
name|mock
argument_list|(
name|ContainerExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|runOOMHandler
argument_list|(
name|containers
argument_list|,
name|cGroupsHandler
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ex
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|signalContainer
argument_list|(
operator|new
name|ContainerSignalContext
operator|.
name|Builder
argument_list|()
operator|.
name|setPid
argument_list|(
literal|"1235"
argument_list|)
operator|.
name|setContainer
argument_list|(
name|c2
argument_list|)
operator|.
name|setSignal
argument_list|(
name|ContainerExecutor
operator|.
name|Signal
operator|.
name|KILL
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ex
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|signalContainer
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * We have two containers, one out of limit. We should kill that one.    * This should happen even, if it was started earlier    *    * @throws Exception exception    */
annotation|@
name|Test
DECL|method|testOneContainerOOM ()
specifier|public
name|void
name|testOneContainerOOM
parameter_list|()
throws|throws
name|Exception
block|{
name|ConcurrentHashMap
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
name|containers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|Container
name|c1
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerId
name|cid1
init|=
name|createContainerId
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|c1
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cid1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c1
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c1
operator|.
name|getContainerStartTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|(
name|long
operator|)
literal|2
argument_list|)
expr_stmt|;
name|containers
operator|.
name|put
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|c1
argument_list|)
expr_stmt|;
name|Container
name|c2
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerId
name|cid2
init|=
name|createContainerId
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|c2
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cid2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c2
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c2
operator|.
name|getContainerStartTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|(
name|long
operator|)
literal|1
argument_list|)
expr_stmt|;
name|containers
operator|.
name|put
argument_list|(
name|cid2
argument_list|,
name|c2
argument_list|)
expr_stmt|;
name|CGroupsHandler
name|cGroupsHandler
init|=
name|mock
argument_list|(
name|CGroupsHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|cGroupsHandler
operator|.
name|getCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|MEMORY
argument_list|,
name|cid1
operator|.
name|toString
argument_list|()
argument_list|,
name|CGROUP_FILE_TASKS
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"1234"
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cGroupsHandler
operator|.
name|getCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|MEMORY
argument_list|,
name|cid1
operator|.
name|toString
argument_list|()
argument_list|,
name|CGROUP_PARAM_MEMORY_USAGE_BYTES
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getMB
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cGroupsHandler
operator|.
name|getCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|MEMORY
argument_list|,
name|cid1
operator|.
name|toString
argument_list|()
argument_list|,
name|CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getMB
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cGroupsHandler
operator|.
name|getCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|MEMORY
argument_list|,
name|cid2
operator|.
name|toString
argument_list|()
argument_list|,
name|CGROUP_FILE_TASKS
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"1235"
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cGroupsHandler
operator|.
name|getCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|MEMORY
argument_list|,
name|cid2
operator|.
name|toString
argument_list|()
argument_list|,
name|CGROUP_PARAM_MEMORY_USAGE_BYTES
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getMB
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cGroupsHandler
operator|.
name|getCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|MEMORY
argument_list|,
name|cid2
operator|.
name|toString
argument_list|()
argument_list|,
name|CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getMB
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerExecutor
name|ex
init|=
name|mock
argument_list|(
name|ContainerExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|runOOMHandler
argument_list|(
name|containers
argument_list|,
name|cGroupsHandler
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ex
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|signalContainer
argument_list|(
operator|new
name|ContainerSignalContext
operator|.
name|Builder
argument_list|()
operator|.
name|setPid
argument_list|(
literal|"1235"
argument_list|)
operator|.
name|setContainer
argument_list|(
name|c2
argument_list|)
operator|.
name|setSignal
argument_list|(
name|ContainerExecutor
operator|.
name|Signal
operator|.
name|KILL
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ex
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|signalContainer
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * We have two containers, neither out of limit. We should kill the later one.    *    * @throws Exception exception    */
annotation|@
name|Test
DECL|method|testNoContainerOOM ()
specifier|public
name|void
name|testNoContainerOOM
parameter_list|()
throws|throws
name|Exception
block|{
name|ConcurrentHashMap
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
name|containers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|Container
name|c1
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerId
name|cid1
init|=
name|createContainerId
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|c1
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cid1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c1
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c1
operator|.
name|getContainerStartTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|(
name|long
operator|)
literal|1
argument_list|)
expr_stmt|;
name|containers
operator|.
name|put
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|c1
argument_list|)
expr_stmt|;
name|Container
name|c2
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerId
name|cid2
init|=
name|createContainerId
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|c2
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cid2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c2
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c2
operator|.
name|getContainerStartTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|(
name|long
operator|)
literal|2
argument_list|)
expr_stmt|;
name|containers
operator|.
name|put
argument_list|(
name|cid2
argument_list|,
name|c2
argument_list|)
expr_stmt|;
name|CGroupsHandler
name|cGroupsHandler
init|=
name|mock
argument_list|(
name|CGroupsHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|cGroupsHandler
operator|.
name|getCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|MEMORY
argument_list|,
name|cid1
operator|.
name|toString
argument_list|()
argument_list|,
name|CGROUP_FILE_TASKS
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"1234"
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cGroupsHandler
operator|.
name|getCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|MEMORY
argument_list|,
name|cid1
operator|.
name|toString
argument_list|()
argument_list|,
name|CGROUP_PARAM_MEMORY_USAGE_BYTES
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getMB
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cGroupsHandler
operator|.
name|getCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|MEMORY
argument_list|,
name|cid1
operator|.
name|toString
argument_list|()
argument_list|,
name|CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getMB
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cGroupsHandler
operator|.
name|getCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|MEMORY
argument_list|,
name|cid2
operator|.
name|toString
argument_list|()
argument_list|,
name|CGROUP_FILE_TASKS
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"1235"
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cGroupsHandler
operator|.
name|getCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|MEMORY
argument_list|,
name|cid2
operator|.
name|toString
argument_list|()
argument_list|,
name|CGROUP_PARAM_MEMORY_USAGE_BYTES
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getMB
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cGroupsHandler
operator|.
name|getCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|MEMORY
argument_list|,
name|cid2
operator|.
name|toString
argument_list|()
argument_list|,
name|CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getMB
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerExecutor
name|ex
init|=
name|mock
argument_list|(
name|ContainerExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|runOOMHandler
argument_list|(
name|containers
argument_list|,
name|cGroupsHandler
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ex
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|signalContainer
argument_list|(
operator|new
name|ContainerSignalContext
operator|.
name|Builder
argument_list|()
operator|.
name|setPid
argument_list|(
literal|"1235"
argument_list|)
operator|.
name|setContainer
argument_list|(
name|c2
argument_list|)
operator|.
name|setSignal
argument_list|(
name|ContainerExecutor
operator|.
name|Signal
operator|.
name|KILL
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ex
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|signalContainer
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|runOOMHandler ( ConcurrentHashMap<ContainerId, Container> containers, CGroupsHandler cGroupsHandler, ContainerExecutor ex)
specifier|private
name|void
name|runOOMHandler
parameter_list|(
name|ConcurrentHashMap
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
name|containers
parameter_list|,
name|CGroupsHandler
name|cGroupsHandler
parameter_list|,
name|ContainerExecutor
name|ex
parameter_list|)
throws|throws
name|IOException
throws|,
name|ResourceHandlerException
block|{
name|Context
name|context
init|=
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containers
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ex
operator|.
name|signalContainer
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
block|{
name|assertEquals
argument_list|(
literal|"Wrong pid killed"
argument_list|,
literal|"1235"
argument_list|,
operator|(
operator|(
name|ContainerSignalContext
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getPid
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cGroupsHandler
operator|.
name|getCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|MEMORY
argument_list|,
literal|""
argument_list|,
name|CGROUP_PARAM_MEMORY_OOM_CONTROL
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"under_oom 1"
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"under_oom 0"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getContainerExecutor
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|DefaultOOMHandler
name|handler
init|=
operator|new
name|DefaultOOMHandler
argument_list|(
name|context
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|handler
operator|.
name|setCGroupsHandler
argument_list|(
name|cGroupsHandler
argument_list|)
expr_stmt|;
name|handler
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
DECL|class|AppId
specifier|private
class|class
name|AppId
extends|extends
name|ApplicationIdPBImpl
block|{
DECL|method|AppId (long clusterTs, int appId)
name|AppId
parameter_list|(
name|long
name|clusterTs
parameter_list|,
name|int
name|appId
parameter_list|)
block|{
name|this
operator|.
name|setClusterTimestamp
argument_list|(
name|clusterTs
argument_list|)
expr_stmt|;
name|this
operator|.
name|setId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createContainerId (int id)
specifier|private
name|ContainerId
name|createContainerId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|ApplicationId
name|applicationId
init|=
operator|new
name|AppId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|mock
argument_list|(
name|ApplicationAttemptId
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|applicationAttemptId
operator|.
name|getAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId
init|=
name|mock
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|containerId
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Long
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|containerId
return|;
block|}
DECL|method|getToken ()
name|ContainerTokenIdentifier
name|getToken
parameter_list|()
block|{
name|ContainerTokenIdentifier
name|id
init|=
name|mock
argument_list|(
name|ContainerTokenIdentifier
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|id
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
DECL|method|getMB (long mb)
name|String
name|getMB
parameter_list|(
name|long
name|mb
parameter_list|)
block|{
return|return
name|Long
operator|.
name|toString
argument_list|(
name|mb
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
return|;
block|}
block|}
end_class

end_unit

