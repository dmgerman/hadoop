begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|ServiceOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DeletionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|LinuxContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|LocalDirsHandlerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeHealthCheckerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeManagerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeStatusUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|ContainerManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|CGroupsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|ResourceHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|ResourceHandlerChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|ResourceHandlerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_class
DECL|class|TestResourcePluginManager
specifier|public
class|class
name|TestResourcePluginManager
extends|extends
name|NodeManagerTestBase
block|{
DECL|field|nm
specifier|private
name|NodeManager
name|nm
decl_stmt|;
DECL|field|conf
specifier|private
name|YarnConfiguration
name|conf
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|conf
operator|=
name|createNMConfig
argument_list|()
expr_stmt|;
block|}
DECL|method|stubResourcePluginmanager ()
name|ResourcePluginManager
name|stubResourcePluginmanager
parameter_list|()
block|{
comment|// Stub ResourcePluginManager
specifier|final
name|ResourcePluginManager
name|rpm
init|=
name|mock
argument_list|(
name|ResourcePluginManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ResourcePlugin
argument_list|>
name|plugins
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// First resource plugin
name|ResourcePlugin
name|resourcePlugin
init|=
name|mock
argument_list|(
name|ResourcePlugin
operator|.
name|class
argument_list|)
decl_stmt|;
name|NodeResourceUpdaterPlugin
name|nodeResourceUpdaterPlugin
init|=
name|mock
argument_list|(
name|NodeResourceUpdaterPlugin
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|resourcePlugin
operator|.
name|getNodeResourceHandlerInstance
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nodeResourceUpdaterPlugin
argument_list|)
expr_stmt|;
name|plugins
operator|.
name|put
argument_list|(
literal|"resource1"
argument_list|,
name|resourcePlugin
argument_list|)
expr_stmt|;
comment|// Second resource plugin
name|resourcePlugin
operator|=
name|mock
argument_list|(
name|ResourcePlugin
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|resourcePlugin
operator|.
name|createResourceHandler
argument_list|(
name|any
argument_list|(
name|Context
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|CGroupsHandler
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|PrivilegedOperationExecutor
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|CustomizedResourceHandler
argument_list|()
argument_list|)
expr_stmt|;
name|plugins
operator|.
name|put
argument_list|(
literal|"resource2"
argument_list|,
name|resourcePlugin
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rpm
operator|.
name|getNameToPlugins
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|plugins
argument_list|)
expr_stmt|;
return|return
name|rpm
return|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|nm
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ServiceOperations
operator|.
name|stop
argument_list|(
name|nm
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
DECL|class|CustomizedResourceHandler
specifier|private
class|class
name|CustomizedResourceHandler
implements|implements
name|ResourceHandler
block|{
annotation|@
name|Override
DECL|method|bootstrap (Configuration configuration)
specifier|public
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|bootstrap
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|preStart (Container container)
specifier|public
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|preStart
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|reacquireContainer (ContainerId containerId)
specifier|public
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|reacquireContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|updateContainer (Container container)
specifier|public
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|updateContainer
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|postComplete (ContainerId containerId)
specifier|public
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|postComplete
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|ResourceHandlerException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|teardown ()
specifier|public
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|teardown
parameter_list|()
throws|throws
name|ResourceHandlerException
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|class|MyMockNM
specifier|private
class|class
name|MyMockNM
extends|extends
name|NodeManager
block|{
DECL|field|rpm
specifier|private
specifier|final
name|ResourcePluginManager
name|rpm
decl_stmt|;
DECL|method|MyMockNM (ResourcePluginManager rpm)
specifier|public
name|MyMockNM
parameter_list|(
name|ResourcePluginManager
name|rpm
parameter_list|)
block|{
name|this
operator|.
name|rpm
operator|=
name|rpm
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createNodeStatusUpdater (Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker)
specifier|protected
name|NodeStatusUpdater
name|createNodeStatusUpdater
parameter_list|(
name|Context
name|context
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|NodeHealthCheckerService
name|healthChecker
parameter_list|)
block|{
operator|(
operator|(
name|NodeManager
operator|.
name|NMContext
operator|)
name|context
operator|)
operator|.
name|setResourcePluginManager
argument_list|(
name|rpm
argument_list|)
expr_stmt|;
return|return
operator|new
name|BaseNodeStatusUpdaterForTest
argument_list|(
name|context
argument_list|,
name|dispatcher
argument_list|,
name|healthChecker
argument_list|,
name|metrics
argument_list|,
operator|new
name|BaseResourceTrackerForTest
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createContainerManager (Context context, ContainerExecutor exec, DeletionService del, NodeStatusUpdater nodeStatusUpdater, ApplicationACLsManager aclsManager, LocalDirsHandlerService diskhandler)
specifier|protected
name|ContainerManagerImpl
name|createContainerManager
parameter_list|(
name|Context
name|context
parameter_list|,
name|ContainerExecutor
name|exec
parameter_list|,
name|DeletionService
name|del
parameter_list|,
name|NodeStatusUpdater
name|nodeStatusUpdater
parameter_list|,
name|ApplicationACLsManager
name|aclsManager
parameter_list|,
name|LocalDirsHandlerService
name|diskhandler
parameter_list|)
block|{
return|return
operator|new
name|MyContainerManager
argument_list|(
name|context
argument_list|,
name|exec
argument_list|,
name|del
argument_list|,
name|nodeStatusUpdater
argument_list|,
name|metrics
argument_list|,
name|diskhandler
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createResourcePluginManager ()
specifier|protected
name|ResourcePluginManager
name|createResourcePluginManager
parameter_list|()
block|{
return|return
name|rpm
return|;
block|}
block|}
DECL|class|MyLCE
specifier|public
class|class
name|MyLCE
extends|extends
name|LinuxContainerExecutor
block|{
DECL|field|poe
specifier|private
name|PrivilegedOperationExecutor
name|poe
init|=
name|mock
argument_list|(
name|PrivilegedOperationExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|getPrivilegedOperationExecutor ()
specifier|protected
name|PrivilegedOperationExecutor
name|getPrivilegedOperationExecutor
parameter_list|()
block|{
return|return
name|poe
return|;
block|}
block|}
comment|/*    * Make sure ResourcePluginManager is initialized during NM start up.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testResourcePluginManagerInitialization ()
specifier|public
name|void
name|testResourcePluginManagerInitialization
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ResourcePluginManager
name|rpm
init|=
name|stubResourcePluginmanager
argument_list|()
decl_stmt|;
name|nm
operator|=
operator|new
name|MyMockNM
argument_list|(
name|rpm
argument_list|)
expr_stmt|;
name|nm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rpm
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|initialize
argument_list|(
name|any
argument_list|(
name|Context
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Make sure ResourcePluginManager is invoked during NM update.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testNodeStatusUpdaterWithResourcePluginsEnabled ()
specifier|public
name|void
name|testNodeStatusUpdaterWithResourcePluginsEnabled
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ResourcePluginManager
name|rpm
init|=
name|stubResourcePluginmanager
argument_list|()
decl_stmt|;
name|nm
operator|=
operator|new
name|MyMockNM
argument_list|(
name|rpm
argument_list|)
expr_stmt|;
name|nm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nm
operator|.
name|start
argument_list|()
expr_stmt|;
name|NodeResourceUpdaterPlugin
name|nodeResourceUpdaterPlugin
init|=
name|rpm
operator|.
name|getNameToPlugins
argument_list|()
operator|.
name|get
argument_list|(
literal|"resource1"
argument_list|)
operator|.
name|getNodeResourceHandlerInstance
argument_list|()
decl_stmt|;
name|verify
argument_list|(
name|nodeResourceUpdaterPlugin
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|updateConfiguredResource
argument_list|(
name|any
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Make sure ResourcePluginManager is used to initialize ResourceHandlerChain    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testLinuxContainerExecutorWithResourcePluginsEnabled ()
specifier|public
name|void
name|testLinuxContainerExecutorWithResourcePluginsEnabled
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ResourcePluginManager
name|rpm
init|=
name|stubResourcePluginmanager
argument_list|()
decl_stmt|;
specifier|final
name|LinuxContainerExecutor
name|lce
init|=
operator|new
name|MyLCE
argument_list|()
decl_stmt|;
name|nm
operator|=
operator|new
name|NodeManager
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|NodeStatusUpdater
name|createNodeStatusUpdater
parameter_list|(
name|Context
name|context
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|NodeHealthCheckerService
name|healthChecker
parameter_list|)
block|{
operator|(
operator|(
name|NMContext
operator|)
name|context
operator|)
operator|.
name|setResourcePluginManager
argument_list|(
name|rpm
argument_list|)
expr_stmt|;
return|return
operator|new
name|BaseNodeStatusUpdaterForTest
argument_list|(
name|context
argument_list|,
name|dispatcher
argument_list|,
name|healthChecker
argument_list|,
name|metrics
argument_list|,
operator|new
name|BaseResourceTrackerForTest
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ContainerManagerImpl
name|createContainerManager
parameter_list|(
name|Context
name|context
parameter_list|,
name|ContainerExecutor
name|exec
parameter_list|,
name|DeletionService
name|del
parameter_list|,
name|NodeStatusUpdater
name|nodeStatusUpdater
parameter_list|,
name|ApplicationACLsManager
name|aclsManager
parameter_list|,
name|LocalDirsHandlerService
name|diskhandler
parameter_list|)
block|{
return|return
operator|new
name|MyContainerManager
argument_list|(
name|context
argument_list|,
name|exec
argument_list|,
name|del
argument_list|,
name|nodeStatusUpdater
argument_list|,
name|metrics
argument_list|,
name|diskhandler
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ContainerExecutor
name|createContainerExecutor
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
operator|(
operator|(
name|NMContext
operator|)
name|this
operator|.
name|getNMContext
argument_list|()
operator|)
operator|.
name|setResourcePluginManager
argument_list|(
name|rpm
argument_list|)
expr_stmt|;
name|lce
operator|.
name|setConf
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
return|return
name|lce
return|;
block|}
block|}
expr_stmt|;
name|nm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nm
operator|.
name|start
argument_list|()
expr_stmt|;
name|ResourceHandler
name|handler
init|=
name|lce
operator|.
name|getResourceHandler
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|handler
operator|instanceof
name|ResourceHandlerChain
argument_list|)
expr_stmt|;
name|boolean
name|newHandlerAdded
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ResourceHandler
name|h
range|:
operator|(
operator|(
name|ResourceHandlerChain
operator|)
name|handler
operator|)
operator|.
name|getResourceHandlerList
argument_list|()
control|)
block|{
if|if
condition|(
name|h
operator|instanceof
name|CustomizedResourceHandler
condition|)
block|{
name|newHandlerAdded
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"New ResourceHandler should be added"
argument_list|,
name|newHandlerAdded
argument_list|)
expr_stmt|;
block|}
comment|// Disabled pluggable framework in configuration.
comment|// We use spy object of real rpm to verify "initializePluggableDevicePlugins"
comment|// because use mock rpm will not working
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testInitializationWithPluggableDeviceFrameworkDisabled ()
specifier|public
name|void
name|testInitializationWithPluggableDeviceFrameworkDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourcePluginManager
name|rpm
init|=
operator|new
name|ResourcePluginManager
argument_list|()
decl_stmt|;
name|ResourcePluginManager
name|rpmSpy
init|=
name|spy
argument_list|(
name|rpm
argument_list|)
decl_stmt|;
name|nm
operator|=
operator|new
name|MyMockNM
argument_list|(
name|rpmSpy
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|nm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nm
operator|.
name|start
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|rpmSpy
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|initialize
argument_list|(
name|any
argument_list|(
name|Context
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rpmSpy
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|initializePluggableDevicePlugins
argument_list|(
name|any
argument_list|(
name|Context
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// No related configuration set.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testInitializationWithPluggableDeviceFrameworkDisabled2 ()
specifier|public
name|void
name|testInitializationWithPluggableDeviceFrameworkDisabled2
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourcePluginManager
name|rpm
init|=
operator|new
name|ResourcePluginManager
argument_list|()
decl_stmt|;
name|ResourcePluginManager
name|rpmSpy
init|=
name|spy
argument_list|(
name|rpm
argument_list|)
decl_stmt|;
name|nm
operator|=
operator|new
name|MyMockNM
argument_list|(
name|rpmSpy
argument_list|)
expr_stmt|;
name|nm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nm
operator|.
name|start
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|rpmSpy
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|initialize
argument_list|(
name|any
argument_list|(
name|Context
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rpmSpy
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|initializePluggableDevicePlugins
argument_list|(
name|any
argument_list|(
name|Context
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Enable framework and configure pluggable device classes
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testInitializationWithPluggableDeviceFrameworkEnabled ()
specifier|public
name|void
name|testInitializationWithPluggableDeviceFrameworkEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourcePluginManager
name|rpm
init|=
operator|new
name|ResourcePluginManager
argument_list|()
decl_stmt|;
name|ResourcePluginManager
name|rpmSpy
init|=
name|spy
argument_list|(
name|rpm
argument_list|)
decl_stmt|;
name|nm
operator|=
operator|new
name|MyMockNM
argument_list|(
name|rpmSpy
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_PLUGGABLE_DEVICE_FRAMEWORK_DEVICE_CLASSES
argument_list|,
literal|"com.cmp1.hdw1plugin"
argument_list|)
expr_stmt|;
name|nm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nm
operator|.
name|start
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|rpmSpy
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|initialize
argument_list|(
name|any
argument_list|(
name|Context
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rpmSpy
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|initializePluggableDevicePlugins
argument_list|(
name|any
argument_list|(
name|Context
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Enable pluggable framework, but leave device classes un-configured
comment|// initializePluggableDevicePlugins invoked but it should throw an exception
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testInitializationWithPluggableDeviceFrameworkEnabled2 ()
specifier|public
name|void
name|testInitializationWithPluggableDeviceFrameworkEnabled2
parameter_list|()
block|{
name|ResourcePluginManager
name|rpm
init|=
operator|new
name|ResourcePluginManager
argument_list|()
decl_stmt|;
name|ResourcePluginManager
name|rpmSpy
init|=
name|spy
argument_list|(
name|rpm
argument_list|)
decl_stmt|;
name|nm
operator|=
operator|new
name|MyMockNM
argument_list|(
name|rpmSpy
argument_list|)
expr_stmt|;
name|Boolean
name|fail
init|=
literal|false
decl_stmt|;
try|try
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_PLUGGABLE_DEVICE_FRAMEWORK_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|nm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nm
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRuntimeException
name|e
parameter_list|)
block|{
name|fail
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{      }
name|verify
argument_list|(
name|rpmSpy
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|initializePluggableDevicePlugins
argument_list|(
name|any
argument_list|(
name|Context
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fail
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

