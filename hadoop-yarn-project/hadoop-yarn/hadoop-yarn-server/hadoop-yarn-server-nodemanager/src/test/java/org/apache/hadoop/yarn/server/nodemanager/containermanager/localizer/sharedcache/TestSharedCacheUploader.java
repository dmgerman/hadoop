begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer.sharedcache
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|sharedcache
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|isA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|SCMUploaderProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SCMUploaderNotifyRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SCMUploaderNotifyResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestSharedCacheUploader
specifier|public
class|class
name|TestSharedCacheUploader
block|{
comment|/**    * If verifyAccess fails, the upload should fail    */
annotation|@
name|Test
DECL|method|testFailVerifyAccess ()
specifier|public
name|void
name|testFailVerifyAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|SharedCacheUploader
name|spied
init|=
name|createSpiedUploader
argument_list|()
decl_stmt|;
name|doReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|when
argument_list|(
name|spied
argument_list|)
operator|.
name|verifyAccess
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|spied
operator|.
name|call
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * If rename fails, the upload should fail    */
annotation|@
name|Test
DECL|method|testRenameFail ()
specifier|public
name|void
name|testRenameFail
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|SHARED_CACHE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LocalResource
name|resource
init|=
name|mock
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|Path
name|localPath
init|=
name|mock
argument_list|(
name|Path
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|localPath
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"foo.jar"
argument_list|)
expr_stmt|;
name|String
name|user
init|=
literal|"joe"
decl_stmt|;
name|SCMUploaderProtocol
name|scmClient
init|=
name|mock
argument_list|(
name|SCMUploaderProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|SCMUploaderNotifyResponse
name|response
init|=
name|mock
argument_list|(
name|SCMUploaderNotifyResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|response
operator|.
name|getAccepted
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scmClient
operator|.
name|notify
argument_list|(
name|isA
argument_list|(
name|SCMUploaderNotifyRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// return false when rename is called
name|when
argument_list|(
name|fs
operator|.
name|rename
argument_list|(
name|isA
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|SharedCacheUploader
name|spied
init|=
name|createSpiedUploader
argument_list|(
name|resource
argument_list|,
name|localPath
argument_list|,
name|user
argument_list|,
name|conf
argument_list|,
name|scmClient
argument_list|,
name|fs
argument_list|,
name|localFs
argument_list|)
decl_stmt|;
comment|// stub verifyAccess() to return true
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|spied
argument_list|)
operator|.
name|verifyAccess
argument_list|()
expr_stmt|;
comment|// stub getActualPath()
name|doReturn
argument_list|(
name|localPath
argument_list|)
operator|.
name|when
argument_list|(
name|spied
argument_list|)
operator|.
name|getActualPath
argument_list|()
expr_stmt|;
comment|// stub computeChecksum()
name|doReturn
argument_list|(
literal|"abcdef0123456789"
argument_list|)
operator|.
name|when
argument_list|(
name|spied
argument_list|)
operator|.
name|computeChecksum
argument_list|(
name|isA
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// stub uploadFile() to return true
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|spied
argument_list|)
operator|.
name|uploadFile
argument_list|(
name|isA
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|spied
operator|.
name|call
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * If verifyAccess, uploadFile, rename, and notification succeed, the upload    * should succeed    */
annotation|@
name|Test
DECL|method|testSuccess ()
specifier|public
name|void
name|testSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|SHARED_CACHE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LocalResource
name|resource
init|=
name|mock
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|Path
name|localPath
init|=
name|mock
argument_list|(
name|Path
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|localPath
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"foo.jar"
argument_list|)
expr_stmt|;
name|String
name|user
init|=
literal|"joe"
decl_stmt|;
name|SCMUploaderProtocol
name|scmClient
init|=
name|mock
argument_list|(
name|SCMUploaderProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|SCMUploaderNotifyResponse
name|response
init|=
name|mock
argument_list|(
name|SCMUploaderNotifyResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|response
operator|.
name|getAccepted
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scmClient
operator|.
name|notify
argument_list|(
name|isA
argument_list|(
name|SCMUploaderNotifyRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// return false when rename is called
name|when
argument_list|(
name|fs
operator|.
name|rename
argument_list|(
name|isA
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|SharedCacheUploader
name|spied
init|=
name|createSpiedUploader
argument_list|(
name|resource
argument_list|,
name|localPath
argument_list|,
name|user
argument_list|,
name|conf
argument_list|,
name|scmClient
argument_list|,
name|fs
argument_list|,
name|localFs
argument_list|)
decl_stmt|;
comment|// stub verifyAccess() to return true
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|spied
argument_list|)
operator|.
name|verifyAccess
argument_list|()
expr_stmt|;
comment|// stub getActualPath()
name|doReturn
argument_list|(
name|localPath
argument_list|)
operator|.
name|when
argument_list|(
name|spied
argument_list|)
operator|.
name|getActualPath
argument_list|()
expr_stmt|;
comment|// stub computeChecksum()
name|doReturn
argument_list|(
literal|"abcdef0123456789"
argument_list|)
operator|.
name|when
argument_list|(
name|spied
argument_list|)
operator|.
name|computeChecksum
argument_list|(
name|isA
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// stub uploadFile() to return true
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|spied
argument_list|)
operator|.
name|uploadFile
argument_list|(
name|isA
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// stub notifySharedCacheManager to return true
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|spied
argument_list|)
operator|.
name|notifySharedCacheManager
argument_list|(
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|spied
operator|.
name|call
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * If verifyAccess, uploadFile, and rename succed, but it receives a nay from    * SCM, the file should be deleted    */
annotation|@
name|Test
DECL|method|testNotifySCMFail ()
specifier|public
name|void
name|testNotifySCMFail
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|SHARED_CACHE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LocalResource
name|resource
init|=
name|mock
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|Path
name|localPath
init|=
name|mock
argument_list|(
name|Path
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|localPath
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"foo.jar"
argument_list|)
expr_stmt|;
name|String
name|user
init|=
literal|"joe"
decl_stmt|;
name|FileSystem
name|fs
init|=
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// return false when rename is called
name|when
argument_list|(
name|fs
operator|.
name|rename
argument_list|(
name|isA
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|SharedCacheUploader
name|spied
init|=
name|createSpiedUploader
argument_list|(
name|resource
argument_list|,
name|localPath
argument_list|,
name|user
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|,
name|fs
argument_list|,
name|localFs
argument_list|)
decl_stmt|;
comment|// stub verifyAccess() to return true
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|spied
argument_list|)
operator|.
name|verifyAccess
argument_list|()
expr_stmt|;
comment|// stub getActualPath()
name|doReturn
argument_list|(
name|localPath
argument_list|)
operator|.
name|when
argument_list|(
name|spied
argument_list|)
operator|.
name|getActualPath
argument_list|()
expr_stmt|;
comment|// stub computeChecksum()
name|doReturn
argument_list|(
literal|"abcdef0123456789"
argument_list|)
operator|.
name|when
argument_list|(
name|spied
argument_list|)
operator|.
name|computeChecksum
argument_list|(
name|isA
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// stub uploadFile() to return true
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|spied
argument_list|)
operator|.
name|uploadFile
argument_list|(
name|isA
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// stub notifySharedCacheManager to return true
name|doReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|when
argument_list|(
name|spied
argument_list|)
operator|.
name|notifySharedCacheManager
argument_list|(
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|spied
operator|.
name|call
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|)
operator|.
name|delete
argument_list|(
name|isA
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * If resource is public, verifyAccess should succeed    */
annotation|@
name|Test
DECL|method|testVerifyAccessPublicResource ()
specifier|public
name|void
name|testVerifyAccessPublicResource
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|SHARED_CACHE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LocalResource
name|resource
init|=
name|mock
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// give public visibility
name|when
argument_list|(
name|resource
operator|.
name|getVisibility
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|)
expr_stmt|;
name|Path
name|localPath
init|=
name|mock
argument_list|(
name|Path
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|localPath
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"foo.jar"
argument_list|)
expr_stmt|;
name|String
name|user
init|=
literal|"joe"
decl_stmt|;
name|SCMUploaderProtocol
name|scmClient
init|=
name|mock
argument_list|(
name|SCMUploaderProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|SharedCacheUploader
name|spied
init|=
name|createSpiedUploader
argument_list|(
name|resource
argument_list|,
name|localPath
argument_list|,
name|user
argument_list|,
name|conf
argument_list|,
name|scmClient
argument_list|,
name|fs
argument_list|,
name|localFs
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|spied
operator|.
name|verifyAccess
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * If the localPath does not exists, getActualPath should get to one level    * down    */
annotation|@
name|Test
DECL|method|testGetActualPath ()
specifier|public
name|void
name|testGetActualPath
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|SHARED_CACHE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LocalResource
name|resource
init|=
name|mock
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// give public visibility
name|when
argument_list|(
name|resource
operator|.
name|getVisibility
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|)
expr_stmt|;
name|Path
name|localPath
init|=
operator|new
name|Path
argument_list|(
literal|"foo.jar"
argument_list|)
decl_stmt|;
name|String
name|user
init|=
literal|"joe"
decl_stmt|;
name|SCMUploaderProtocol
name|scmClient
init|=
name|mock
argument_list|(
name|SCMUploaderProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|FileSystem
name|localFs
init|=
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// stub it to return a status that indicates a directory
name|FileStatus
name|status
init|=
name|mock
argument_list|(
name|FileStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|status
operator|.
name|isDirectory
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|localFs
operator|.
name|getFileStatus
argument_list|(
name|localPath
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|SharedCacheUploader
name|spied
init|=
name|createSpiedUploader
argument_list|(
name|resource
argument_list|,
name|localPath
argument_list|,
name|user
argument_list|,
name|conf
argument_list|,
name|scmClient
argument_list|,
name|fs
argument_list|,
name|localFs
argument_list|)
decl_stmt|;
name|Path
name|actualPath
init|=
name|spied
operator|.
name|getActualPath
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|actualPath
operator|.
name|getName
argument_list|()
argument_list|,
name|localPath
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|actualPath
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|localPath
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createSpiedUploader ()
specifier|private
name|SharedCacheUploader
name|createSpiedUploader
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|SHARED_CACHE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LocalResource
name|resource
init|=
name|mock
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|Path
name|localPath
init|=
name|mock
argument_list|(
name|Path
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|user
init|=
literal|"foo"
decl_stmt|;
name|SCMUploaderProtocol
name|scmClient
init|=
name|mock
argument_list|(
name|SCMUploaderProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|createSpiedUploader
argument_list|(
name|resource
argument_list|,
name|localPath
argument_list|,
name|user
argument_list|,
name|conf
argument_list|,
name|scmClient
argument_list|,
name|fs
argument_list|,
name|localFs
argument_list|)
return|;
block|}
DECL|method|createSpiedUploader (LocalResource resource, Path localPath, String user, Configuration conf, SCMUploaderProtocol scmClient, FileSystem fs, FileSystem localFs)
specifier|private
name|SharedCacheUploader
name|createSpiedUploader
parameter_list|(
name|LocalResource
name|resource
parameter_list|,
name|Path
name|localPath
parameter_list|,
name|String
name|user
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|SCMUploaderProtocol
name|scmClient
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|FileSystem
name|localFs
parameter_list|)
throws|throws
name|IOException
block|{
name|SharedCacheUploader
name|uploader
init|=
operator|new
name|SharedCacheUploader
argument_list|(
name|resource
argument_list|,
name|localPath
argument_list|,
name|user
argument_list|,
name|conf
argument_list|,
name|scmClient
argument_list|,
name|fs
argument_list|,
name|localFs
argument_list|)
decl_stmt|;
return|return
name|spy
argument_list|(
name|uploader
argument_list|)
return|;
block|}
block|}
end_class

end_unit

