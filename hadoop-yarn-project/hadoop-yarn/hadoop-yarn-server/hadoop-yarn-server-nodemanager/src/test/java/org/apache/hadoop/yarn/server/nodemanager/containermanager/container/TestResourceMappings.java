begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.container
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|Device
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|TestResourceMappings
specifier|public
class|class
name|TestResourceMappings
block|{
DECL|field|testResources
specifier|private
specifier|static
specifier|final
name|ResourceMappings
operator|.
name|AssignedResources
name|testResources
init|=
operator|new
name|ResourceMappings
operator|.
name|AssignedResources
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
block|{
name|testResources
operator|.
name|updateAssignedResources
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|Device
operator|.
name|Builder
operator|.
name|newInstance
argument_list|()
operator|.
name|setId
argument_list|(
literal|0
argument_list|)
operator|.
name|setDevPath
argument_list|(
literal|"/dev/hdwA0"
argument_list|)
operator|.
name|setMajorNumber
argument_list|(
literal|256
argument_list|)
operator|.
name|setMinorNumber
argument_list|(
literal|0
argument_list|)
operator|.
name|setBusID
argument_list|(
literal|"0000:80:00.0"
argument_list|)
operator|.
name|setHealthy
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Device
operator|.
name|Builder
operator|.
name|newInstance
argument_list|()
operator|.
name|setId
argument_list|(
literal|1
argument_list|)
operator|.
name|setDevPath
argument_list|(
literal|"/dev/hdwA1"
argument_list|)
operator|.
name|setMajorNumber
argument_list|(
literal|256
argument_list|)
operator|.
name|setMinorNumber
argument_list|(
literal|0
argument_list|)
operator|.
name|setBusID
argument_list|(
literal|"0000:80:00.1"
argument_list|)
operator|.
name|setHealthy
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSerializeAssignedResourcesWithSerializationUtils ()
specifier|public
name|void
name|testSerializeAssignedResourcesWithSerializationUtils
parameter_list|()
block|{
try|try
block|{
name|byte
index|[]
name|serializedString
init|=
name|testResources
operator|.
name|toBytes
argument_list|()
decl_stmt|;
name|ResourceMappings
operator|.
name|AssignedResources
name|deserialized
init|=
name|ResourceMappings
operator|.
name|AssignedResources
operator|.
name|fromBytes
argument_list|(
name|serializedString
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testResources
operator|.
name|getAssignedResources
argument_list|()
argument_list|,
name|deserialized
operator|.
name|getAssignedResources
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Serialization of test AssignedResources "
operator|+
literal|"failed with %s"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAssignedResourcesCanDeserializePreviouslySerializedValues ()
specifier|public
name|void
name|testAssignedResourcesCanDeserializePreviouslySerializedValues
parameter_list|()
block|{
try|try
block|{
name|byte
index|[]
name|serializedString
init|=
name|toBytes
argument_list|(
name|testResources
operator|.
name|getAssignedResources
argument_list|()
argument_list|)
decl_stmt|;
name|ResourceMappings
operator|.
name|AssignedResources
name|deserialized
init|=
name|ResourceMappings
operator|.
name|AssignedResources
operator|.
name|fromBytes
argument_list|(
name|serializedString
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testResources
operator|.
name|getAssignedResources
argument_list|()
argument_list|,
name|deserialized
operator|.
name|getAssignedResources
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Deserialization of test AssignedResources "
operator|+
literal|"failed with %s"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This was the legacy way to serialize resources. This is here for    * backward compatibility to ensure that after YARN-9128 we can still    * deserialize previously serialized resources.    *    * @param resources the list of resources    * @return byte array representation of the resource    * @throws IOException    */
DECL|method|toBytes (List<Serializable> resources)
specifier|private
name|byte
index|[]
name|toBytes
parameter_list|(
name|List
argument_list|<
name|Serializable
argument_list|>
name|resources
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectOutputStream
name|oos
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|bytes
decl_stmt|;
try|try
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|oos
operator|=
operator|new
name|ObjectOutputStream
argument_list|(
name|bos
argument_list|)
expr_stmt|;
name|oos
operator|.
name|writeObject
argument_list|(
name|resources
argument_list|)
expr_stmt|;
name|bytes
operator|=
name|bos
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|oos
argument_list|)
expr_stmt|;
block|}
return|return
name|bytes
return|;
block|}
block|}
end_class

end_unit

