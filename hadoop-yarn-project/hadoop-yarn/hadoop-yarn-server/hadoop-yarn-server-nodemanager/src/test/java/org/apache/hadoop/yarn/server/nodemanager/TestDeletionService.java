begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnsupportedFileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|deletion
operator|.
name|task
operator|.
name|FileDeletionTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|executor
operator|.
name|DeletionAsUserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMMemoryStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|TestDeletionService
specifier|public
class|class
name|TestDeletionService
block|{
DECL|field|lfs
specifier|private
specifier|static
specifier|final
name|FileContext
name|lfs
init|=
name|getLfs
argument_list|()
decl_stmt|;
DECL|method|getLfs ()
specifier|private
specifier|static
specifier|final
name|FileContext
name|getLfs
parameter_list|()
block|{
try|try
block|{
return|return
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedFileSystemException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|field|base
specifier|private
specifier|static
specifier|final
name|Path
name|base
init|=
name|lfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"target"
argument_list|,
name|TestDeletionService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|AfterClass
DECL|method|removeBase ()
specifier|public
specifier|static
name|void
name|removeBase
parameter_list|()
throws|throws
name|IOException
block|{
name|lfs
operator|.
name|delete
argument_list|(
name|base
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|buildDirs (Random r, Path root, int numpaths)
specifier|public
name|List
argument_list|<
name|Path
argument_list|>
name|buildDirs
parameter_list|(
name|Random
name|r
parameter_list|,
name|Path
name|root
parameter_list|,
name|int
name|numpaths
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numpaths
condition|;
operator|++
name|i
control|)
block|{
name|Path
name|p
init|=
name|root
decl_stmt|;
name|long
name|name
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
do|do
block|{
name|p
operator|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
literal|""
operator|+
name|name
argument_list|)
expr_stmt|;
name|name
operator|=
name|r
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
literal|0
operator|==
operator|(
name|name
operator|%
literal|2
operator|)
condition|)
do|;
name|ret
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|createDirs (Path base, List<Path> dirs)
specifier|public
name|void
name|createDirs
parameter_list|(
name|Path
name|base
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|dirs
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Path
name|dir
range|:
name|dirs
control|)
block|{
name|lfs
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
name|base
argument_list|,
name|dir
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FakeDefaultContainerExecutor
specifier|static
class|class
name|FakeDefaultContainerExecutor
extends|extends
name|DefaultContainerExecutor
block|{
annotation|@
name|Override
DECL|method|deleteAsUser (DeletionAsUserContext ctx)
specifier|public
name|void
name|deleteAsUser
parameter_list|(
name|DeletionAsUserContext
name|ctx
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|user
init|=
name|ctx
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|Path
name|subDir
init|=
name|ctx
operator|.
name|getSubDir
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|basedirs
init|=
name|ctx
operator|.
name|getBasedirs
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|Long
operator|.
name|parseLong
argument_list|(
name|subDir
operator|.
name|getName
argument_list|()
argument_list|)
operator|%
literal|2
operator|)
operator|==
literal|0
condition|)
block|{
name|assertNull
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"dingo"
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
name|DeletionAsUserContext
operator|.
name|Builder
name|builder
init|=
operator|new
name|DeletionAsUserContext
operator|.
name|Builder
argument_list|()
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
operator|.
name|setSubDir
argument_list|(
name|subDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|basedirs
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setBasedirs
argument_list|(
name|basedirs
operator|.
name|toArray
argument_list|(
operator|new
name|Path
index|[
name|basedirs
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|deleteAsUser
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lfs
operator|.
name|util
argument_list|()
operator|.
name|exists
argument_list|(
name|subDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAbsDelete ()
specifier|public
name|void
name|testAbsDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SEED: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|dirs
init|=
name|buildDirs
argument_list|(
name|r
argument_list|,
name|base
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|createDirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"."
argument_list|)
argument_list|,
name|dirs
argument_list|)
expr_stmt|;
name|FakeDefaultContainerExecutor
name|exec
init|=
operator|new
name|FakeDefaultContainerExecutor
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|exec
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|DeletionService
name|del
init|=
operator|new
name|DeletionService
argument_list|(
name|exec
argument_list|)
decl_stmt|;
name|del
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|del
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|Path
name|p
range|:
name|dirs
control|)
block|{
name|FileDeletionTask
name|deletionTask
init|=
operator|new
name|FileDeletionTask
argument_list|(
name|del
argument_list|,
operator|(
name|Long
operator|.
name|parseLong
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
operator|%
literal|2
operator|)
operator|==
literal|0
condition|?
literal|null
else|:
literal|"dingo"
argument_list|,
name|p
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|del
operator|.
name|delete
argument_list|(
name|deletionTask
argument_list|)
expr_stmt|;
block|}
name|int
name|msecToWait
init|=
literal|20
operator|*
literal|1000
decl_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|dirs
control|)
block|{
while|while
condition|(
name|msecToWait
operator|>
literal|0
operator|&&
name|lfs
operator|.
name|util
argument_list|()
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|msecToWait
operator|-=
literal|100
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|lfs
operator|.
name|util
argument_list|()
operator|.
name|exists
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|del
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRelativeDelete ()
specifier|public
name|void
name|testRelativeDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SEED: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|baseDirs
init|=
name|buildDirs
argument_list|(
name|r
argument_list|,
name|base
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|createDirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"."
argument_list|)
argument_list|,
name|baseDirs
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|content
init|=
name|buildDirs
argument_list|(
name|r
argument_list|,
operator|new
name|Path
argument_list|(
literal|"."
argument_list|)
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|b
range|:
name|baseDirs
control|)
block|{
name|createDirs
argument_list|(
name|b
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
name|DeletionService
name|del
init|=
operator|new
name|DeletionService
argument_list|(
operator|new
name|FakeDefaultContainerExecutor
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|del
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|del
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|content
control|)
block|{
name|assertTrue
argument_list|(
name|lfs
operator|.
name|util
argument_list|()
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|baseDirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|p
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|FileDeletionTask
name|deletionTask
init|=
operator|new
name|FileDeletionTask
argument_list|(
name|del
argument_list|,
operator|(
name|Long
operator|.
name|parseLong
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
operator|%
literal|2
operator|)
operator|==
literal|0
condition|?
literal|null
else|:
literal|"dingo"
argument_list|,
name|p
argument_list|,
name|baseDirs
argument_list|)
decl_stmt|;
name|del
operator|.
name|delete
argument_list|(
name|deletionTask
argument_list|)
expr_stmt|;
block|}
name|int
name|msecToWait
init|=
literal|20
operator|*
literal|1000
decl_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|baseDirs
control|)
block|{
for|for
control|(
name|Path
name|q
range|:
name|content
control|)
block|{
name|Path
name|fp
init|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
name|q
argument_list|)
decl_stmt|;
while|while
condition|(
name|msecToWait
operator|>
literal|0
operator|&&
name|lfs
operator|.
name|util
argument_list|()
operator|.
name|exists
argument_list|(
name|fp
argument_list|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|msecToWait
operator|-=
literal|100
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|lfs
operator|.
name|util
argument_list|()
operator|.
name|exists
argument_list|(
name|fp
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|del
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNoDelete ()
specifier|public
name|void
name|testNoDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SEED: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|dirs
init|=
name|buildDirs
argument_list|(
name|r
argument_list|,
name|base
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|createDirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"."
argument_list|)
argument_list|,
name|dirs
argument_list|)
expr_stmt|;
name|FakeDefaultContainerExecutor
name|exec
init|=
operator|new
name|FakeDefaultContainerExecutor
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|DEBUG_NM_DELETE_DELAY_SEC
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|exec
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|DeletionService
name|del
init|=
operator|new
name|DeletionService
argument_list|(
name|exec
argument_list|)
decl_stmt|;
try|try
block|{
name|del
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|del
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|dirs
control|)
block|{
name|FileDeletionTask
name|deletionTask
init|=
operator|new
name|FileDeletionTask
argument_list|(
name|del
argument_list|,
operator|(
name|Long
operator|.
name|parseLong
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
operator|%
literal|2
operator|)
operator|==
literal|0
condition|?
literal|null
else|:
literal|"dingo"
argument_list|,
name|p
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|del
operator|.
name|delete
argument_list|(
name|deletionTask
argument_list|)
expr_stmt|;
block|}
name|int
name|msecToWait
init|=
literal|20
operator|*
literal|1000
decl_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|dirs
control|)
block|{
while|while
condition|(
name|msecToWait
operator|>
literal|0
operator|&&
name|lfs
operator|.
name|util
argument_list|()
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|msecToWait
operator|-=
literal|100
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|lfs
operator|.
name|util
argument_list|()
operator|.
name|exists
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|del
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testStopWithDelayedTasks ()
specifier|public
name|void
name|testStopWithDelayedTasks
parameter_list|()
throws|throws
name|Exception
block|{
name|DeletionService
name|del
init|=
operator|new
name|DeletionService
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|ContainerExecutor
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|DEBUG_NM_DELETE_DELAY_SEC
argument_list|,
literal|60
argument_list|)
expr_stmt|;
try|try
block|{
name|del
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|del
operator|.
name|start
argument_list|()
expr_stmt|;
name|FileDeletionTask
name|deletionTask
init|=
operator|new
name|FileDeletionTask
argument_list|(
name|del
argument_list|,
literal|"dingo"
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/does/not/exist"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|del
operator|.
name|delete
argument_list|(
name|deletionTask
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|del
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|del
operator|.
name|isTerminated
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testFileDeletionTaskDependency ()
specifier|public
name|void
name|testFileDeletionTaskDependency
parameter_list|()
throws|throws
name|Exception
block|{
name|FakeDefaultContainerExecutor
name|exec
init|=
operator|new
name|FakeDefaultContainerExecutor
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|exec
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|DeletionService
name|del
init|=
operator|new
name|DeletionService
argument_list|(
name|exec
argument_list|)
decl_stmt|;
name|del
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|del
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SEED: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|dirs
init|=
name|buildDirs
argument_list|(
name|r
argument_list|,
name|base
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|createDirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"."
argument_list|)
argument_list|,
name|dirs
argument_list|)
expr_stmt|;
comment|// first we will try to delete sub directories which are present. This
comment|// should then trigger parent directory to be deleted.
name|List
argument_list|<
name|Path
argument_list|>
name|subDirs
init|=
name|buildDirs
argument_list|(
name|r
argument_list|,
name|dirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|FileDeletionTask
name|dependentDeletionTask
init|=
operator|new
name|FileDeletionTask
argument_list|(
name|del
argument_list|,
literal|null
argument_list|,
name|dirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FileDeletionTask
argument_list|>
name|deletionTasks
init|=
operator|new
name|ArrayList
argument_list|<
name|FileDeletionTask
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|subDir
range|:
name|subDirs
control|)
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|subDirList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|subDirList
operator|.
name|add
argument_list|(
name|subDir
argument_list|)
expr_stmt|;
name|FileDeletionTask
name|deletionTask
init|=
operator|new
name|FileDeletionTask
argument_list|(
name|del
argument_list|,
literal|null
argument_list|,
name|dirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|subDirList
argument_list|)
decl_stmt|;
name|deletionTask
operator|.
name|addDeletionTaskDependency
argument_list|(
name|dependentDeletionTask
argument_list|)
expr_stmt|;
name|deletionTasks
operator|.
name|add
argument_list|(
name|deletionTask
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FileDeletionTask
name|task
range|:
name|deletionTasks
control|)
block|{
name|del
operator|.
name|delete
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
name|int
name|msecToWait
init|=
literal|20
operator|*
literal|1000
decl_stmt|;
while|while
condition|(
name|msecToWait
operator|>
literal|0
operator|&&
operator|(
name|lfs
operator|.
name|util
argument_list|()
operator|.
name|exists
argument_list|(
name|dirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|msecToWait
operator|-=
literal|100
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|lfs
operator|.
name|util
argument_list|()
operator|.
name|exists
argument_list|(
name|dirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now we will try to delete sub directories; one of the deletion task we
comment|// will mark as failure and then parent directory should not be deleted.
name|subDirs
operator|=
name|buildDirs
argument_list|(
name|r
argument_list|,
name|dirs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|subDirs
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|dirs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"absentFile"
argument_list|)
argument_list|)
expr_stmt|;
name|dependentDeletionTask
operator|=
operator|new
name|FileDeletionTask
argument_list|(
name|del
argument_list|,
literal|null
argument_list|,
name|dirs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|deletionTasks
operator|=
operator|new
name|ArrayList
argument_list|<
name|FileDeletionTask
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Path
name|subDir
range|:
name|subDirs
control|)
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|subDirList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|subDirList
operator|.
name|add
argument_list|(
name|subDir
argument_list|)
expr_stmt|;
name|FileDeletionTask
name|deletionTask
init|=
operator|new
name|FileDeletionTask
argument_list|(
name|del
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|subDirList
argument_list|)
decl_stmt|;
name|deletionTask
operator|.
name|addDeletionTaskDependency
argument_list|(
name|dependentDeletionTask
argument_list|)
expr_stmt|;
name|deletionTasks
operator|.
name|add
argument_list|(
name|deletionTask
argument_list|)
expr_stmt|;
block|}
comment|// marking one of the tasks as a failure.
name|deletionTasks
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|setSuccess
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|FileDeletionTask
name|task
range|:
name|deletionTasks
control|)
block|{
name|del
operator|.
name|delete
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
name|msecToWait
operator|=
literal|20
operator|*
literal|1000
expr_stmt|;
while|while
condition|(
name|msecToWait
operator|>
literal|0
operator|&&
operator|(
name|lfs
operator|.
name|util
argument_list|()
operator|.
name|exists
argument_list|(
name|subDirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
name|lfs
operator|.
name|util
argument_list|()
operator|.
name|exists
argument_list|(
name|subDirs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|msecToWait
operator|-=
literal|100
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|lfs
operator|.
name|util
argument_list|()
operator|.
name|exists
argument_list|(
name|dirs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|del
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRecovery ()
specifier|public
name|void
name|testRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SEED: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|baseDirs
init|=
name|buildDirs
argument_list|(
name|r
argument_list|,
name|base
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|createDirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"."
argument_list|)
argument_list|,
name|baseDirs
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|content
init|=
name|buildDirs
argument_list|(
name|r
argument_list|,
operator|new
name|Path
argument_list|(
literal|"."
argument_list|)
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|b
range|:
name|baseDirs
control|)
block|{
name|createDirs
argument_list|(
name|b
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|DEBUG_NM_DELETE_DELAY_SEC
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|NMMemoryStateStoreService
name|stateStore
init|=
operator|new
name|NMMemoryStateStoreService
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|start
argument_list|()
expr_stmt|;
name|DeletionService
name|del
init|=
operator|new
name|DeletionService
argument_list|(
operator|new
name|FakeDefaultContainerExecutor
argument_list|()
argument_list|,
name|stateStore
argument_list|)
decl_stmt|;
try|try
block|{
name|del
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|del
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|content
control|)
block|{
name|assertTrue
argument_list|(
name|lfs
operator|.
name|util
argument_list|()
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|baseDirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|p
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|FileDeletionTask
name|deletionTask
init|=
operator|new
name|FileDeletionTask
argument_list|(
name|del
argument_list|,
operator|(
name|Long
operator|.
name|parseLong
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
operator|%
literal|2
operator|)
operator|==
literal|0
condition|?
literal|null
else|:
literal|"dingo"
argument_list|,
name|p
argument_list|,
name|baseDirs
argument_list|)
decl_stmt|;
name|del
operator|.
name|delete
argument_list|(
name|deletionTask
argument_list|)
expr_stmt|;
block|}
comment|// restart the deletion service
name|del
operator|.
name|stop
argument_list|()
expr_stmt|;
name|del
operator|=
operator|new
name|DeletionService
argument_list|(
operator|new
name|FakeDefaultContainerExecutor
argument_list|()
argument_list|,
name|stateStore
argument_list|)
expr_stmt|;
name|del
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|del
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// verify paths are still eventually deleted
name|int
name|msecToWait
init|=
literal|10
operator|*
literal|1000
decl_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|baseDirs
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST Basedir: "
operator|+
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|q
range|:
name|content
control|)
block|{
name|Path
name|fp
init|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST Path: "
operator|+
name|fp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|msecToWait
operator|>
literal|0
operator|&&
name|lfs
operator|.
name|util
argument_list|()
operator|.
name|exists
argument_list|(
name|fp
argument_list|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|msecToWait
operator|-=
literal|100
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|lfs
operator|.
name|util
argument_list|()
operator|.
name|exists
argument_list|(
name|fp
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|del
operator|.
name|close
argument_list|()
expr_stmt|;
name|stateStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

