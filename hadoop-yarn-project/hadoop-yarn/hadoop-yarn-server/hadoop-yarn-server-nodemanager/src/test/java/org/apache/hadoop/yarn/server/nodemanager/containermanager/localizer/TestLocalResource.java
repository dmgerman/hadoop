begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|LocalResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestLocalResource
specifier|public
class|class
name|TestLocalResource
block|{
DECL|method|getYarnResource (Path p, long size, long timestamp, LocalResourceType type, LocalResourceVisibility state, String pattern)
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
name|getYarnResource
parameter_list|(
name|Path
name|p
parameter_list|,
name|long
name|size
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|LocalResourceType
name|type
parameter_list|,
name|LocalResourceVisibility
name|state
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
name|ret
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|ret
operator|.
name|setResource
argument_list|(
name|URL
operator|.
name|fromURI
argument_list|(
name|p
operator|.
name|toUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setVisibility
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setPattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|checkEqual (LocalResourceRequest a, LocalResourceRequest b)
specifier|static
name|void
name|checkEqual
parameter_list|(
name|LocalResourceRequest
name|a
parameter_list|,
name|LocalResourceRequest
name|b
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|.
name|hashCode
argument_list|()
argument_list|,
name|b
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|b
operator|.
name|compareTo
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkNotEqual (LocalResourceRequest a, LocalResourceRequest b)
specifier|static
name|void
name|checkNotEqual
parameter_list|(
name|LocalResourceRequest
name|a
parameter_list|,
name|LocalResourceRequest
name|b
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|b
operator|.
name|equals
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|a
operator|.
name|hashCode
argument_list|()
operator|==
name|b
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|0
operator|==
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|0
operator|==
name|b
operator|.
name|compareTo
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResourceEquality ()
specifier|public
name|void
name|testResourceEquality
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SEED: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|long
name|basetime
init|=
name|r
operator|.
name|nextLong
argument_list|()
operator|>>>
literal|2
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
name|yA
init|=
name|getYarnResource
argument_list|(
operator|new
name|Path
argument_list|(
literal|"http://yak.org:80/foobar"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
name|basetime
argument_list|,
name|FILE
argument_list|,
name|PUBLIC
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
name|yB
init|=
name|getYarnResource
argument_list|(
operator|new
name|Path
argument_list|(
literal|"http://yak.org:80/foobar"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
name|basetime
argument_list|,
name|FILE
argument_list|,
name|PUBLIC
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceRequest
name|a
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|yA
argument_list|)
decl_stmt|;
name|LocalResourceRequest
name|b
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|yA
argument_list|)
decl_stmt|;
name|checkEqual
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|b
operator|=
operator|new
name|LocalResourceRequest
argument_list|(
name|yB
argument_list|)
expr_stmt|;
name|checkEqual
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
comment|// ignore visibility
name|yB
operator|=
name|getYarnResource
argument_list|(
operator|new
name|Path
argument_list|(
literal|"http://yak.org:80/foobar"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
name|basetime
argument_list|,
name|FILE
argument_list|,
name|PRIVATE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|b
operator|=
operator|new
name|LocalResourceRequest
argument_list|(
name|yB
argument_list|)
expr_stmt|;
name|checkEqual
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
comment|// ignore size
name|yB
operator|=
name|getYarnResource
argument_list|(
operator|new
name|Path
argument_list|(
literal|"http://yak.org:80/foobar"
argument_list|)
argument_list|,
literal|0
argument_list|,
name|basetime
argument_list|,
name|FILE
argument_list|,
name|PRIVATE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|b
operator|=
operator|new
name|LocalResourceRequest
argument_list|(
name|yB
argument_list|)
expr_stmt|;
name|checkEqual
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
comment|// note path
name|yB
operator|=
name|getYarnResource
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://dingo.org:80/foobar"
argument_list|)
argument_list|,
literal|0
argument_list|,
name|basetime
argument_list|,
name|ARCHIVE
argument_list|,
name|PUBLIC
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|b
operator|=
operator|new
name|LocalResourceRequest
argument_list|(
name|yB
argument_list|)
expr_stmt|;
name|checkNotEqual
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
comment|// note type
name|yB
operator|=
name|getYarnResource
argument_list|(
operator|new
name|Path
argument_list|(
literal|"http://yak.org:80/foobar"
argument_list|)
argument_list|,
literal|0
argument_list|,
name|basetime
argument_list|,
name|ARCHIVE
argument_list|,
name|PUBLIC
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|b
operator|=
operator|new
name|LocalResourceRequest
argument_list|(
name|yB
argument_list|)
expr_stmt|;
name|checkNotEqual
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
comment|// note timestamp
name|yB
operator|=
name|getYarnResource
argument_list|(
operator|new
name|Path
argument_list|(
literal|"http://yak.org:80/foobar"
argument_list|)
argument_list|,
literal|0
argument_list|,
name|basetime
operator|+
literal|1
argument_list|,
name|FILE
argument_list|,
name|PUBLIC
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|b
operator|=
operator|new
name|LocalResourceRequest
argument_list|(
name|yB
argument_list|)
expr_stmt|;
name|checkNotEqual
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
comment|// note pattern
name|yB
operator|=
name|getYarnResource
argument_list|(
operator|new
name|Path
argument_list|(
literal|"http://yak.org:80/foobar"
argument_list|)
argument_list|,
literal|0
argument_list|,
name|basetime
operator|+
literal|1
argument_list|,
name|FILE
argument_list|,
name|PUBLIC
argument_list|,
literal|"^/foo/.*"
argument_list|)
expr_stmt|;
name|b
operator|=
operator|new
name|LocalResourceRequest
argument_list|(
name|yB
argument_list|)
expr_stmt|;
name|checkNotEqual
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResourceOrder ()
specifier|public
name|void
name|testResourceOrder
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SEED: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|long
name|basetime
init|=
name|r
operator|.
name|nextLong
argument_list|()
operator|>>>
literal|2
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
name|yA
init|=
name|getYarnResource
argument_list|(
operator|new
name|Path
argument_list|(
literal|"http://yak.org:80/foobar"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
name|basetime
argument_list|,
name|FILE
argument_list|,
name|PUBLIC
argument_list|,
literal|"^/foo/.*"
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceRequest
name|a
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|yA
argument_list|)
decl_stmt|;
comment|// Path primary
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
name|yB
init|=
name|getYarnResource
argument_list|(
operator|new
name|Path
argument_list|(
literal|"http://yak.org:80/foobaz"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
name|basetime
argument_list|,
name|FILE
argument_list|,
name|PUBLIC
argument_list|,
literal|"^/foo/.*"
argument_list|)
decl_stmt|;
name|LocalResourceRequest
name|b
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|yB
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|>
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
comment|// timestamp secondary
name|yB
operator|=
name|getYarnResource
argument_list|(
operator|new
name|Path
argument_list|(
literal|"http://yak.org:80/foobar"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
name|basetime
operator|+
literal|1
argument_list|,
name|FILE
argument_list|,
name|PUBLIC
argument_list|,
literal|"^/foo/.*"
argument_list|)
expr_stmt|;
name|b
operator|=
operator|new
name|LocalResourceRequest
argument_list|(
name|yB
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|>
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
comment|// type tertiary
name|yB
operator|=
name|getYarnResource
argument_list|(
operator|new
name|Path
argument_list|(
literal|"http://yak.org:80/foobar"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
name|basetime
argument_list|,
name|ARCHIVE
argument_list|,
name|PUBLIC
argument_list|,
literal|"^/foo/.*"
argument_list|)
expr_stmt|;
name|b
operator|=
operator|new
name|LocalResourceRequest
argument_list|(
name|yB
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|!=
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
comment|// don't care about order, just ne
comment|// path 4th
name|yB
operator|=
name|getYarnResource
argument_list|(
operator|new
name|Path
argument_list|(
literal|"http://yak.org:80/foobar"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
name|basetime
argument_list|,
name|ARCHIVE
argument_list|,
name|PUBLIC
argument_list|,
literal|"^/food/.*"
argument_list|)
expr_stmt|;
name|b
operator|=
operator|new
name|LocalResourceRequest
argument_list|(
name|yB
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|!=
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
comment|// don't care about order, just ne
name|yB
operator|=
name|getYarnResource
argument_list|(
operator|new
name|Path
argument_list|(
literal|"http://yak.org:80/foobar"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
name|basetime
argument_list|,
name|ARCHIVE
argument_list|,
name|PUBLIC
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|b
operator|=
operator|new
name|LocalResourceRequest
argument_list|(
name|yB
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|!=
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
comment|// don't care about order, just ne
block|}
block|}
end_class

end_unit

