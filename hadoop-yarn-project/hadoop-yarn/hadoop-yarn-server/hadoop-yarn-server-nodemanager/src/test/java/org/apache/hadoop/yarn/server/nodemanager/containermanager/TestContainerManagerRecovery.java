begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|isA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnsupportedFileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|ServerSocketUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ContainerUpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ContainerUpdateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerStatusesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LogAggregationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceUtilization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|NMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ContainerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|MasterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|MasterKeyPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|CMgrCompletedAppsEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DeletionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|LocalDirsHandlerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeHealthCheckerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeManager
operator|.
name|NMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeStatusUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationFinishEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ResourceMappings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
operator|.
name|ContainersLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
operator|.
name|ContainersLauncherEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ResourceLocalizationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|loghandler
operator|.
name|LogHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|ContainersMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|ContainersMonitorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|scheduler
operator|.
name|ContainerScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|metrics
operator|.
name|NodeManagerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|metrics
operator|.
name|TestNodeManagerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMMemoryStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMNullStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|security
operator|.
name|NMContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|security
operator|.
name|NMTokenSecretManagerInNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|timelineservice
operator|.
name|NMTimelinePublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|timeline
operator|.
name|TimelineUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestContainerManagerRecovery
specifier|public
class|class
name|TestContainerManagerRecovery
extends|extends
name|BaseContainerManagerTest
block|{
DECL|method|TestContainerManagerRecovery ()
specifier|public
name|TestContainerManagerRecovery
parameter_list|()
throws|throws
name|UnsupportedFileSystemException
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|localFS
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|localDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|localFS
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|tmpDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|localFS
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|localLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|localFS
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|remoteLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|localDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|tmpDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|localLogDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|remoteLogDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created localDir in "
operator|+
name|localDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created tmpDir in "
operator|+
name|tmpDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|bindAddress
init|=
literal|"0.0.0.0:"
operator|+
name|ServerSocketUtil
operator|.
name|getPort
argument_list|(
literal|49160
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_ADDRESS
argument_list|,
name|bindAddress
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|localDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|localLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|remoteLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_RETAIN_SECONDS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// enable atsv2 by default in test
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_VERSION
argument_list|,
literal|2.0f
argument_list|)
expr_stmt|;
comment|// Default delSrvc
name|delSrvc
operator|=
name|createDeletionService
argument_list|()
expr_stmt|;
name|delSrvc
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|exec
operator|=
name|createContainerExecutor
argument_list|()
expr_stmt|;
name|dirsHandler
operator|=
operator|new
name|LocalDirsHandlerService
argument_list|()
expr_stmt|;
name|nodeHealthChecker
operator|=
operator|new
name|NodeHealthCheckerService
argument_list|(
name|NodeManager
operator|.
name|getNodeHealthScriptRunner
argument_list|(
name|conf
argument_list|)
argument_list|,
name|dirsHandler
argument_list|)
expr_stmt|;
name|nodeHealthChecker
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testApplicationRecovery ()
specifier|public
name|void
name|testApplicationRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_SUPERVISED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
literal|"yarn_admin_user"
argument_list|)
expr_stmt|;
name|NMStateStoreService
name|stateStore
init|=
operator|new
name|NMMemoryStateStoreService
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|start
argument_list|()
expr_stmt|;
name|Context
name|context
init|=
name|createContext
argument_list|(
name|conf
argument_list|,
name|stateStore
argument_list|)
decl_stmt|;
name|ContainerManagerImpl
name|cm
init|=
name|createContainerManager
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|cm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// add an application by starting a container
name|String
name|appName
init|=
literal|"app_name1"
decl_stmt|;
name|String
name|appUser
init|=
literal|"app_user1"
decl_stmt|;
name|String
name|modUser
init|=
literal|"modify_user1"
decl_stmt|;
name|String
name|viewUser
init|=
literal|"view_user1"
decl_stmt|;
name|String
name|enemyUser
init|=
literal|"enemy_user"
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|cid
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|containerEnv
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|setFlowContext
argument_list|(
name|containerEnv
argument_list|,
name|appName
argument_list|,
name|appId
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|containerCmds
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|serviceData
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
name|Credentials
name|containerCreds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|containerCreds
operator|.
name|writeTokenStorageToStream
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|ByteBuffer
name|containerTokens
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|acls
operator|.
name|put
argument_list|(
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
name|modUser
argument_list|)
expr_stmt|;
name|acls
operator|.
name|put
argument_list|(
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|viewUser
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|clc
init|=
name|ContainerLaunchContext
operator|.
name|newInstance
argument_list|(
name|localResources
argument_list|,
name|containerEnv
argument_list|,
name|containerCmds
argument_list|,
name|serviceData
argument_list|,
name|containerTokens
argument_list|,
name|acls
argument_list|)
decl_stmt|;
comment|// create the logAggregationContext
name|LogAggregationContext
name|logAggregationContext
init|=
name|LogAggregationContext
operator|.
name|newInstance
argument_list|(
literal|"includePattern"
argument_list|,
literal|"excludePattern"
argument_list|,
literal|"includePatternInRollingAggregation"
argument_list|,
literal|"excludePatternInRollingAggregation"
argument_list|)
decl_stmt|;
name|StartContainersResponse
name|startResponse
init|=
name|startContainer
argument_list|(
name|context
argument_list|,
name|cm
argument_list|,
name|cid
argument_list|,
name|clc
argument_list|,
name|logAggregationContext
argument_list|,
name|ContainerType
operator|.
name|TASK
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|startResponse
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Application
name|app
init|=
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|waitForAppState
argument_list|(
name|app
argument_list|,
name|ApplicationState
operator|.
name|INITING
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|context
operator|.
name|getApplicationACLsManager
argument_list|()
operator|.
name|checkAccess
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|modUser
argument_list|)
argument_list|,
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
name|appUser
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|context
operator|.
name|getApplicationACLsManager
argument_list|()
operator|.
name|checkAccess
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|viewUser
argument_list|)
argument_list|,
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
name|appUser
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|context
operator|.
name|getApplicationACLsManager
argument_list|()
operator|.
name|checkAccess
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|viewUser
argument_list|)
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|appUser
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|context
operator|.
name|getApplicationACLsManager
argument_list|()
operator|.
name|checkAccess
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|enemyUser
argument_list|)
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|appUser
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
comment|// reset container manager and verify app recovered with proper acls
name|cm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|context
operator|=
name|createContext
argument_list|(
name|conf
argument_list|,
name|stateStore
argument_list|)
expr_stmt|;
name|cm
operator|=
name|createContainerManager
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|cm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cm
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|app
operator|=
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|app
argument_list|)
expr_stmt|;
comment|// check whether LogAggregationContext is recovered correctly
name|LogAggregationContext
name|recovered
init|=
operator|(
operator|(
name|ApplicationImpl
operator|)
name|app
operator|)
operator|.
name|getLogAggregationContext
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|recovered
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|logAggregationContext
operator|.
name|getIncludePattern
argument_list|()
argument_list|,
name|recovered
operator|.
name|getIncludePattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|logAggregationContext
operator|.
name|getExcludePattern
argument_list|()
argument_list|,
name|recovered
operator|.
name|getExcludePattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|logAggregationContext
operator|.
name|getRolledLogsIncludePattern
argument_list|()
argument_list|,
name|recovered
operator|.
name|getRolledLogsIncludePattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|logAggregationContext
operator|.
name|getRolledLogsExcludePattern
argument_list|()
argument_list|,
name|recovered
operator|.
name|getRolledLogsExcludePattern
argument_list|()
argument_list|)
expr_stmt|;
name|waitForAppState
argument_list|(
name|app
argument_list|,
name|ApplicationState
operator|.
name|INITING
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|context
operator|.
name|getApplicationACLsManager
argument_list|()
operator|.
name|checkAccess
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|modUser
argument_list|)
argument_list|,
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
name|appUser
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|context
operator|.
name|getApplicationACLsManager
argument_list|()
operator|.
name|checkAccess
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|viewUser
argument_list|)
argument_list|,
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
name|appUser
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|context
operator|.
name|getApplicationACLsManager
argument_list|()
operator|.
name|checkAccess
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|viewUser
argument_list|)
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|appUser
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|context
operator|.
name|getApplicationACLsManager
argument_list|()
operator|.
name|checkAccess
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|enemyUser
argument_list|)
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|appUser
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
comment|// simulate application completion
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|finishedApps
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationId
argument_list|>
argument_list|()
decl_stmt|;
name|finishedApps
operator|.
name|add
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|app
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationFinishEvent
argument_list|(
name|appId
argument_list|,
literal|"Application killed by ResourceManager"
argument_list|)
argument_list|)
expr_stmt|;
name|waitForAppState
argument_list|(
name|app
argument_list|,
name|ApplicationState
operator|.
name|APPLICATION_RESOURCES_CLEANINGUP
argument_list|)
expr_stmt|;
comment|// restart and verify app is marked for finishing
name|cm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|context
operator|=
name|createContext
argument_list|(
name|conf
argument_list|,
name|stateStore
argument_list|)
expr_stmt|;
name|cm
operator|=
name|createContainerManager
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|cm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cm
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|app
operator|=
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|app
argument_list|)
expr_stmt|;
comment|// no longer saving FINISH_APP event in NM stateStore,
comment|// simulate by resending FINISH_APP event
name|app
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationFinishEvent
argument_list|(
name|appId
argument_list|,
literal|"Application killed by ResourceManager"
argument_list|)
argument_list|)
expr_stmt|;
name|waitForAppState
argument_list|(
name|app
argument_list|,
name|ApplicationState
operator|.
name|APPLICATION_RESOURCES_CLEANINGUP
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|context
operator|.
name|getApplicationACLsManager
argument_list|()
operator|.
name|checkAccess
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|modUser
argument_list|)
argument_list|,
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
name|appUser
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|context
operator|.
name|getApplicationACLsManager
argument_list|()
operator|.
name|checkAccess
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|viewUser
argument_list|)
argument_list|,
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
name|appUser
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|context
operator|.
name|getApplicationACLsManager
argument_list|()
operator|.
name|checkAccess
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|viewUser
argument_list|)
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|appUser
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|context
operator|.
name|getApplicationACLsManager
argument_list|()
operator|.
name|checkAccess
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|enemyUser
argument_list|)
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|appUser
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
comment|// simulate log aggregation completion
name|app
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationEvent
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_RESOURCES_CLEANEDUP
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|,
name|ApplicationState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|app
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationEvent
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_FINISHED
argument_list|)
argument_list|)
expr_stmt|;
comment|// restart and verify app is no longer present after recovery
name|cm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|context
operator|=
name|createContext
argument_list|(
name|conf
argument_list|,
name|stateStore
argument_list|)
expr_stmt|;
name|cm
operator|=
name|createContainerManager
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|cm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cm
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|cm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNMRecoveryForAppFinishedWithLogAggregationFailure ()
specifier|public
name|void
name|testNMRecoveryForAppFinishedWithLogAggregationFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_SUPERVISED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NMStateStoreService
name|stateStore
init|=
operator|new
name|NMMemoryStateStoreService
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|start
argument_list|()
expr_stmt|;
name|Context
name|context
init|=
name|createContext
argument_list|(
name|conf
argument_list|,
name|stateStore
argument_list|)
decl_stmt|;
name|ContainerManagerImpl
name|cm
init|=
name|createContainerManager
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|cm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// add an application by starting a container
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|cid
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|containerEnv
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|setFlowContext
argument_list|(
name|containerEnv
argument_list|,
literal|"app_name1"
argument_list|,
name|appId
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|containerCmds
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|serviceData
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
name|ContainerLaunchContext
name|clc
init|=
name|ContainerLaunchContext
operator|.
name|newInstance
argument_list|(
name|localResources
argument_list|,
name|containerEnv
argument_list|,
name|containerCmds
argument_list|,
name|serviceData
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StartContainersResponse
name|startResponse
init|=
name|startContainer
argument_list|(
name|context
argument_list|,
name|cm
argument_list|,
name|cid
argument_list|,
name|clc
argument_list|,
literal|null
argument_list|,
name|ContainerType
operator|.
name|TASK
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|startResponse
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Application
name|app
init|=
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|waitForAppState
argument_list|(
name|app
argument_list|,
name|ApplicationState
operator|.
name|INITING
argument_list|)
expr_stmt|;
comment|// simulate application completion
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|finishedApps
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationId
argument_list|>
argument_list|()
decl_stmt|;
name|finishedApps
operator|.
name|add
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|app
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationFinishEvent
argument_list|(
name|appId
argument_list|,
literal|"Application killed by ResourceManager"
argument_list|)
argument_list|)
expr_stmt|;
name|waitForAppState
argument_list|(
name|app
argument_list|,
name|ApplicationState
operator|.
name|APPLICATION_RESOURCES_CLEANINGUP
argument_list|)
expr_stmt|;
name|app
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationEvent
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_RESOURCES_CLEANEDUP
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|,
name|ApplicationState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
comment|// application is still in NM context.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// restart and verify app is still there and marked as finished.
name|cm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|context
operator|=
name|createContext
argument_list|(
name|conf
argument_list|,
name|stateStore
argument_list|)
expr_stmt|;
name|cm
operator|=
name|createContainerManager
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|cm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cm
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|app
operator|=
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|app
argument_list|)
expr_stmt|;
comment|// no longer saving FINISH_APP event in NM stateStore,
comment|// simulate by resending FINISH_APP event
name|app
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationFinishEvent
argument_list|(
name|appId
argument_list|,
literal|"Application killed by ResourceManager"
argument_list|)
argument_list|)
expr_stmt|;
name|waitForAppState
argument_list|(
name|app
argument_list|,
name|ApplicationState
operator|.
name|APPLICATION_RESOURCES_CLEANINGUP
argument_list|)
expr_stmt|;
comment|// TODO need to figure out why additional APPLICATION_RESOURCES_CLEANEDUP
comment|// is needed.
name|app
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationEvent
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_RESOURCES_CLEANEDUP
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|,
name|ApplicationState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
comment|// simulate log aggregation failed.
name|app
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationEvent
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_FAILED
argument_list|)
argument_list|)
expr_stmt|;
comment|// restart and verify app is no longer present after recovery
name|cm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|context
operator|=
name|createContext
argument_list|(
name|conf
argument_list|,
name|stateStore
argument_list|)
expr_stmt|;
name|cm
operator|=
name|createContainerManager
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|cm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cm
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|cm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeManagerMetricsRecovery ()
specifier|public
name|void
name|testNodeManagerMetricsRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_SUPERVISED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NMStateStoreService
name|stateStore
init|=
operator|new
name|NMMemoryStateStoreService
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|start
argument_list|()
expr_stmt|;
name|Context
name|context
init|=
name|createContext
argument_list|(
name|conf
argument_list|,
name|stateStore
argument_list|)
decl_stmt|;
name|ContainerManagerImpl
name|cm
init|=
name|createContainerManager
argument_list|(
name|context
argument_list|,
name|delSrvc
argument_list|)
decl_stmt|;
name|cm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cm
operator|.
name|start
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|addResource
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10240
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
comment|// add an application by starting a container
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|cid
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|containerEnv
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|serviceData
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"sleep 60s"
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|clc
init|=
name|ContainerLaunchContext
operator|.
name|newInstance
argument_list|(
name|localResources
argument_list|,
name|containerEnv
argument_list|,
name|commands
argument_list|,
name|serviceData
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StartContainersResponse
name|startResponse
init|=
name|startContainer
argument_list|(
name|context
argument_list|,
name|cm
argument_list|,
name|cid
argument_list|,
name|clc
argument_list|,
literal|null
argument_list|,
name|ContainerType
operator|.
name|TASK
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|startResponse
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Application
name|app
init|=
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|app
argument_list|)
expr_stmt|;
comment|// make sure the container reaches RUNNING state
name|waitForNMContainerState
argument_list|(
name|cm
argument_list|,
name|cid
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|TestNodeManagerMetrics
operator|.
name|checkMetrics
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|9
argument_list|,
literal|1
argument_list|,
literal|7
argument_list|)
expr_stmt|;
comment|// restart and verify metrics could be recovered
name|cm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|DefaultMetricsSystem
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|metrics
operator|=
name|NodeManagerMetrics
operator|.
name|create
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|addResource
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10240
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|TestNodeManagerMetrics
operator|.
name|checkMetrics
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|context
operator|=
name|createContext
argument_list|(
name|conf
argument_list|,
name|stateStore
argument_list|)
expr_stmt|;
name|cm
operator|=
name|createContainerManager
argument_list|(
name|context
argument_list|,
name|delSrvc
argument_list|)
expr_stmt|;
name|cm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cm
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|app
operator|=
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|TestNodeManagerMetrics
operator|.
name|checkMetrics
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|9
argument_list|,
literal|1
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|cm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerResizeRecovery ()
specifier|public
name|void
name|testContainerResizeRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_SUPERVISED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NMStateStoreService
name|stateStore
init|=
operator|new
name|NMMemoryStateStoreService
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|start
argument_list|()
expr_stmt|;
name|context
operator|=
name|createContext
argument_list|(
name|conf
argument_list|,
name|stateStore
argument_list|)
expr_stmt|;
name|ContainerManagerImpl
name|cm
init|=
name|createContainerManager
argument_list|(
name|context
argument_list|,
name|delSrvc
argument_list|)
decl_stmt|;
operator|(
operator|(
name|NMContext
operator|)
name|context
operator|)
operator|.
name|setContainerManager
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|cm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// add an application by starting a container
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|cid
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|commonLaunchContainer
argument_list|(
name|appId
argument_list|,
name|cid
argument_list|,
name|cm
argument_list|)
expr_stmt|;
name|Application
name|app
init|=
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|Resource
name|targetResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ContainerUpdateResponse
name|updateResponse
init|=
name|updateContainers
argument_list|(
name|context
argument_list|,
name|cm
argument_list|,
name|cid
argument_list|,
name|targetResource
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|updateResponse
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// check status
name|ContainerStatus
name|containerStatus
init|=
name|getContainerStatus
argument_list|(
name|context
argument_list|,
name|cm
argument_list|,
name|cid
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|targetResource
argument_list|,
name|containerStatus
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
comment|// restart and verify container is running and recovered
comment|// to the correct size
name|cm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|context
operator|=
name|createContext
argument_list|(
name|conf
argument_list|,
name|stateStore
argument_list|)
expr_stmt|;
name|cm
operator|=
name|createContainerManager
argument_list|(
name|context
argument_list|)
expr_stmt|;
operator|(
operator|(
name|NMContext
operator|)
name|context
operator|)
operator|.
name|setContainerManager
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|cm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cm
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|app
operator|=
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|containerStatus
operator|=
name|getContainerStatus
argument_list|(
name|context
argument_list|,
name|cm
argument_list|,
name|cid
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targetResource
argument_list|,
name|containerStatus
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
name|cm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerSchedulerRecovery ()
specifier|public
name|void
name|testContainerSchedulerRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_SUPERVISED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NMStateStoreService
name|stateStore
init|=
operator|new
name|NMMemoryStateStoreService
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|start
argument_list|()
expr_stmt|;
name|context
operator|=
name|createContext
argument_list|(
name|conf
argument_list|,
name|stateStore
argument_list|)
expr_stmt|;
name|ContainerManagerImpl
name|cm
init|=
name|createContainerManager
argument_list|(
name|context
argument_list|,
name|delSrvc
argument_list|)
decl_stmt|;
operator|(
operator|(
name|NMContext
operator|)
name|context
operator|)
operator|.
name|setContainerManager
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|cm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// add an application by starting a container
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|cid
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|commonLaunchContainer
argument_list|(
name|appId
argument_list|,
name|cid
argument_list|,
name|cm
argument_list|)
expr_stmt|;
name|Application
name|app
init|=
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|ResourceUtilization
name|utilization
init|=
name|ResourceUtilization
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|2048
argument_list|,
literal|0.25F
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|cm
operator|.
name|getContainerScheduler
argument_list|()
operator|.
name|getNumRunningContainers
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|utilization
argument_list|,
name|cm
operator|.
name|getContainerScheduler
argument_list|()
operator|.
name|getCurrentUtilization
argument_list|()
argument_list|)
expr_stmt|;
comment|// restart and verify container scheduler has recovered correctly
name|cm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|context
operator|=
name|createContext
argument_list|(
name|conf
argument_list|,
name|stateStore
argument_list|)
expr_stmt|;
name|cm
operator|=
name|createContainerManager
argument_list|(
name|context
argument_list|,
name|delSrvc
argument_list|)
expr_stmt|;
operator|(
operator|(
name|NMContext
operator|)
name|context
operator|)
operator|.
name|setContainerManager
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|cm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cm
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|app
operator|=
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|waitForNMContainerState
argument_list|(
name|cm
argument_list|,
name|cid
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cm
operator|.
name|getContainerScheduler
argument_list|()
operator|.
name|getNumRunningContainers
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|utilization
argument_list|,
name|cm
operator|.
name|getContainerScheduler
argument_list|()
operator|.
name|getCurrentUtilization
argument_list|()
argument_list|)
expr_stmt|;
name|cm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResourceMappingRecoveryForContainer ()
specifier|public
name|void
name|testResourceMappingRecoveryForContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_SUPERVISED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NMStateStoreService
name|stateStore
init|=
operator|new
name|NMMemoryStateStoreService
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|start
argument_list|()
expr_stmt|;
name|context
operator|=
name|createContext
argument_list|(
name|conf
argument_list|,
name|stateStore
argument_list|)
expr_stmt|;
name|ContainerManagerImpl
name|cm
init|=
name|createContainerManager
argument_list|(
name|context
argument_list|,
name|delSrvc
argument_list|)
decl_stmt|;
operator|(
operator|(
name|NMContext
operator|)
name|context
operator|)
operator|.
name|setContainerManager
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|cm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// add an application by starting a container
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|cid
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|commonLaunchContainer
argument_list|(
name|appId
argument_list|,
name|cid
argument_list|,
name|cm
argument_list|)
expr_stmt|;
name|Container
name|nmContainer
init|=
name|context
operator|.
name|getContainers
argument_list|()
operator|.
name|get
argument_list|(
name|cid
argument_list|)
decl_stmt|;
name|Application
name|app
init|=
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|app
argument_list|)
expr_stmt|;
comment|// store resource mapping of the container
name|List
argument_list|<
name|Serializable
argument_list|>
name|gpuResources
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|storeAssignedResources
argument_list|(
name|nmContainer
argument_list|,
literal|"gpu"
argument_list|,
name|gpuResources
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Serializable
argument_list|>
name|numaResources
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"numa1"
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|storeAssignedResources
argument_list|(
name|nmContainer
argument_list|,
literal|"numa"
argument_list|,
name|numaResources
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Serializable
argument_list|>
name|fpgaResources
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"fpga1"
argument_list|,
literal|"fpga2"
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|storeAssignedResources
argument_list|(
name|nmContainer
argument_list|,
literal|"fpga"
argument_list|,
name|fpgaResources
argument_list|)
expr_stmt|;
name|cm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|context
operator|=
name|createContext
argument_list|(
name|conf
argument_list|,
name|stateStore
argument_list|)
expr_stmt|;
name|cm
operator|=
name|createContainerManager
argument_list|(
name|context
argument_list|)
expr_stmt|;
operator|(
operator|(
name|NMContext
operator|)
name|context
operator|)
operator|.
name|setContainerManager
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|cm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cm
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|app
operator|=
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|nmContainer
argument_list|)
expr_stmt|;
name|ResourceMappings
name|resourceMappings
init|=
name|nmContainer
operator|.
name|getResourceMappings
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Serializable
argument_list|>
name|assignedResource
init|=
name|resourceMappings
operator|.
name|getAssignedResources
argument_list|(
literal|"gpu"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|assignedResource
operator|.
name|equals
argument_list|(
name|gpuResources
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resourceMappings
operator|.
name|getAssignedResources
argument_list|(
literal|"numa"
argument_list|)
operator|.
name|equals
argument_list|(
name|numaResources
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resourceMappings
operator|.
name|getAssignedResources
argument_list|(
literal|"fpga"
argument_list|)
operator|.
name|equals
argument_list|(
name|fpgaResources
argument_list|)
argument_list|)
expr_stmt|;
name|cm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerCleanupOnShutdown ()
specifier|public
name|void
name|testContainerCleanupOnShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|cid
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|containerEnv
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|setFlowContext
argument_list|(
name|containerEnv
argument_list|,
literal|"app_name1"
argument_list|,
name|appId
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|containerCmds
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|serviceData
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
name|Credentials
name|containerCreds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|containerCreds
operator|.
name|writeTokenStorageToStream
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|ByteBuffer
name|containerTokens
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
name|ContainerLaunchContext
name|clc
init|=
name|ContainerLaunchContext
operator|.
name|newInstance
argument_list|(
name|localResources
argument_list|,
name|containerEnv
argument_list|,
name|containerCmds
argument_list|,
name|serviceData
argument_list|,
name|containerTokens
argument_list|,
name|acls
argument_list|)
decl_stmt|;
comment|// create the logAggregationContext
name|LogAggregationContext
name|logAggregationContext
init|=
name|LogAggregationContext
operator|.
name|newInstance
argument_list|(
literal|"includePattern"
argument_list|,
literal|"excludePattern"
argument_list|)
decl_stmt|;
comment|// verify containers are stopped on shutdown without recovery
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_SUPERVISED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Context
name|context
init|=
name|createContext
argument_list|(
name|conf
argument_list|,
operator|new
name|NMNullStateStoreService
argument_list|()
argument_list|)
decl_stmt|;
name|ContainerManagerImpl
name|cm
init|=
name|spy
argument_list|(
name|createContainerManager
argument_list|(
name|context
argument_list|)
argument_list|)
decl_stmt|;
name|cm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cm
operator|.
name|start
argument_list|()
expr_stmt|;
name|StartContainersResponse
name|startResponse
init|=
name|startContainer
argument_list|(
name|context
argument_list|,
name|cm
argument_list|,
name|cid
argument_list|,
name|clc
argument_list|,
name|logAggregationContext
argument_list|,
name|ContainerType
operator|.
name|TASK
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|startResponse
operator|.
name|getSuccessfullyStartedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|cm
argument_list|)
operator|.
name|handle
argument_list|(
name|isA
argument_list|(
name|CMgrCompletedAppsEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify containers are stopped on shutdown with unsupervised recovery
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_SUPERVISED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|NMMemoryStateStoreService
name|memStore
init|=
operator|new
name|NMMemoryStateStoreService
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|memStore
operator|.
name|start
argument_list|()
expr_stmt|;
name|context
operator|=
name|createContext
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|cm
operator|=
name|spy
argument_list|(
name|createContainerManager
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|cm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cm
operator|.
name|start
argument_list|()
expr_stmt|;
name|startResponse
operator|=
name|startContainer
argument_list|(
name|context
argument_list|,
name|cm
argument_list|,
name|cid
argument_list|,
name|clc
argument_list|,
name|logAggregationContext
argument_list|,
name|ContainerType
operator|.
name|TASK
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|startResponse
operator|.
name|getSuccessfullyStartedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|memStore
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|cm
argument_list|)
operator|.
name|handle
argument_list|(
name|isA
argument_list|(
name|CMgrCompletedAppsEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify containers are not stopped on shutdown with supervised recovery
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_SUPERVISED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|memStore
operator|=
operator|new
name|NMMemoryStateStoreService
argument_list|()
expr_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|memStore
operator|.
name|start
argument_list|()
expr_stmt|;
name|context
operator|=
name|createContext
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|cm
operator|=
name|spy
argument_list|(
name|createContainerManager
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|cm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cm
operator|.
name|start
argument_list|()
expr_stmt|;
name|startResponse
operator|=
name|startContainer
argument_list|(
name|context
argument_list|,
name|cm
argument_list|,
name|cid
argument_list|,
name|clc
argument_list|,
name|logAggregationContext
argument_list|,
name|ContainerType
operator|.
name|TASK
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|startResponse
operator|.
name|getSuccessfullyStartedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|memStore
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|cm
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|isA
argument_list|(
name|CMgrCompletedAppsEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|commonLaunchContainer (ApplicationId appId, ContainerId cid, ContainerManagerImpl cm)
specifier|private
name|void
name|commonLaunchContainer
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|ContainerId
name|cid
parameter_list|,
name|ContainerManagerImpl
name|cm
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|containerEnv
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|setFlowContext
argument_list|(
name|containerEnv
argument_list|,
literal|"app_name1"
argument_list|,
name|appId
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|serviceData
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
name|Credentials
name|containerCreds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|containerCreds
operator|.
name|writeTokenStorageToStream
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|ByteBuffer
name|containerTokens
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
name|File
name|tmpDir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"-tmpDir"
argument_list|)
decl_stmt|;
name|File
name|scriptFile
init|=
name|Shell
operator|.
name|appendScriptExtension
argument_list|(
name|tmpDir
argument_list|,
literal|"scriptFile"
argument_list|)
decl_stmt|;
name|PrintWriter
name|fileWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|scriptFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@ping -n 100 127.0.0.1>nul"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\numask 0"
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\nexec sleep 100"
argument_list|)
expr_stmt|;
block|}
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileContext
name|localFS
init|=
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
decl_stmt|;
name|URL
name|resource_alpha
init|=
name|URL
operator|.
name|fromPath
argument_list|(
name|localFS
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|scriptFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|LocalResource
name|rsrc_alpha
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|rsrc_alpha
operator|.
name|setResource
argument_list|(
name|resource_alpha
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setVisibility
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setType
argument_list|(
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setTimestamp
argument_list|(
name|scriptFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|destinationFile
init|=
literal|"dest_file"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|destinationFile
argument_list|,
name|rsrc_alpha
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Shell
operator|.
name|getRunScriptCommand
argument_list|(
name|scriptFile
argument_list|)
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|clc
init|=
name|ContainerLaunchContext
operator|.
name|newInstance
argument_list|(
name|localResources
argument_list|,
name|containerEnv
argument_list|,
name|commands
argument_list|,
name|serviceData
argument_list|,
name|containerTokens
argument_list|,
name|acls
argument_list|)
decl_stmt|;
name|StartContainersResponse
name|startResponse
init|=
name|startContainer
argument_list|(
name|context
argument_list|,
name|cm
argument_list|,
name|cid
argument_list|,
name|clc
argument_list|,
literal|null
argument_list|,
name|ContainerType
operator|.
name|TASK
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|startResponse
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure the container reaches RUNNING state
name|waitForNMContainerState
argument_list|(
name|cm
argument_list|,
name|cid
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
block|}
DECL|method|createContainerManager (Context context, DeletionService delSrvc)
specifier|private
name|ContainerManagerImpl
name|createContainerManager
parameter_list|(
name|Context
name|context
parameter_list|,
name|DeletionService
name|delSrvc
parameter_list|)
block|{
return|return
operator|new
name|ContainerManagerImpl
argument_list|(
name|context
argument_list|,
name|exec
argument_list|,
name|delSrvc
argument_list|,
name|mock
argument_list|(
name|NodeStatusUpdater
operator|.
name|class
argument_list|)
argument_list|,
name|metrics
argument_list|,
name|dirsHandler
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|authorizeGetAndStopContainerRequest
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Container
name|container
parameter_list|,
name|boolean
name|stopRequest
parameter_list|,
name|NMTokenIdentifier
name|identifier
parameter_list|)
throws|throws
name|YarnException
block|{
if|if
condition|(
name|container
operator|==
literal|null
operator|||
name|container
operator|.
name|getUser
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Fail"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Reject this container"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|ContainerScheduler
name|createContainerScheduler
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
return|return
operator|new
name|ContainerScheduler
argument_list|(
name|context
argument_list|,
name|dispatcher
argument_list|,
name|metrics
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|ContainersMonitor
name|getContainersMonitor
parameter_list|()
block|{
return|return
operator|new
name|ContainersMonitorImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|float
name|getVmemRatio
parameter_list|()
block|{
return|return
literal|2.0f
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getVmemAllocatedForContainers
parameter_list|()
block|{
return|return
literal|20480
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPmemAllocatedForContainers
parameter_list|()
block|{
return|return
operator|(
name|long
operator|)
literal|2048
operator|<<
literal|20
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getVCoresAllocatedForContainers
parameter_list|()
block|{
return|return
literal|4
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
DECL|method|createContext (Configuration conf, NMStateStoreService stateStore)
specifier|private
name|NMContext
name|createContext
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|NMStateStoreService
name|stateStore
parameter_list|)
block|{
name|NMContext
name|context
init|=
operator|new
name|NMContext
argument_list|(
operator|new
name|NMContainerTokenSecretManager
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|NMTokenSecretManagerInNM
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|new
name|ApplicationACLsManager
argument_list|(
name|conf
argument_list|)
argument_list|,
name|stateStore
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
block|{
specifier|public
name|int
name|getHttpPort
parameter_list|()
block|{
return|return
name|HTTP_PORT
return|;
block|}
block|}
decl_stmt|;
comment|// simulate registration with RM
name|MasterKey
name|masterKey
init|=
operator|new
name|MasterKeyPBImpl
argument_list|()
decl_stmt|;
name|masterKey
operator|.
name|setKeyId
argument_list|(
literal|123
argument_list|)
expr_stmt|;
name|masterKey
operator|.
name|setBytes
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|new
name|Integer
argument_list|(
literal|123
argument_list|)
operator|.
name|byteValue
argument_list|()
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
operator|.
name|setMasterKey
argument_list|(
name|masterKey
argument_list|)
expr_stmt|;
name|context
operator|.
name|getNMTokenSecretManager
argument_list|()
operator|.
name|setMasterKey
argument_list|(
name|masterKey
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
DECL|method|startContainer (Context context, final ContainerManagerImpl cm, ContainerId cid, ContainerLaunchContext clc, LogAggregationContext logAggregationContext, ContainerType containerType)
specifier|private
name|StartContainersResponse
name|startContainer
parameter_list|(
name|Context
name|context
parameter_list|,
specifier|final
name|ContainerManagerImpl
name|cm
parameter_list|,
name|ContainerId
name|cid
parameter_list|,
name|ContainerLaunchContext
name|clc
parameter_list|,
name|LogAggregationContext
name|logAggregationContext
parameter_list|,
name|ContainerType
name|containerType
parameter_list|)
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|user
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|cid
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|StartContainerRequest
name|scReq
init|=
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|clc
argument_list|,
name|TestContainerManager
operator|.
name|createContainerToken
argument_list|(
name|cid
argument_list|,
literal|0
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
name|logAggregationContext
argument_list|,
name|containerType
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|scReqList
init|=
operator|new
name|ArrayList
argument_list|<
name|StartContainerRequest
argument_list|>
argument_list|()
decl_stmt|;
name|scReqList
operator|.
name|add
argument_list|(
name|scReq
argument_list|)
expr_stmt|;
name|NMTokenIdentifier
name|nmToken
init|=
operator|new
name|NMTokenIdentifier
argument_list|(
name|cid
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|context
operator|.
name|getNMTokenSecretManager
argument_list|()
operator|.
name|getCurrentKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
argument_list|)
decl_stmt|;
name|user
operator|.
name|addTokenIdentifier
argument_list|(
name|nmToken
argument_list|)
expr_stmt|;
return|return
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|StartContainersResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|StartContainersResponse
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|cm
operator|.
name|startContainers
argument_list|(
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|scReqList
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|updateContainers ( Context context, final ContainerManagerImpl cm, ContainerId cid, Resource capability)
specifier|private
name|ContainerUpdateResponse
name|updateContainers
parameter_list|(
name|Context
name|context
parameter_list|,
specifier|final
name|ContainerManagerImpl
name|cm
parameter_list|,
name|ContainerId
name|cid
parameter_list|,
name|Resource
name|capability
parameter_list|)
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|user
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|cid
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// construct container resource increase request
specifier|final
name|List
argument_list|<
name|Token
argument_list|>
name|increaseTokens
init|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|>
argument_list|()
decl_stmt|;
comment|// add increase request
name|Token
name|containerToken
init|=
name|TestContainerManager
operator|.
name|createContainerToken
argument_list|(
name|cid
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|capability
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|increaseTokens
operator|.
name|add
argument_list|(
name|containerToken
argument_list|)
expr_stmt|;
specifier|final
name|ContainerUpdateRequest
name|updateRequest
init|=
name|ContainerUpdateRequest
operator|.
name|newInstance
argument_list|(
name|increaseTokens
argument_list|)
decl_stmt|;
name|NMTokenIdentifier
name|nmToken
init|=
operator|new
name|NMTokenIdentifier
argument_list|(
name|cid
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|context
operator|.
name|getNMTokenSecretManager
argument_list|()
operator|.
name|getCurrentKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
argument_list|)
decl_stmt|;
name|user
operator|.
name|addTokenIdentifier
argument_list|(
name|nmToken
argument_list|)
expr_stmt|;
return|return
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|ContainerUpdateResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ContainerUpdateResponse
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|cm
operator|.
name|updateContainer
argument_list|(
name|updateRequest
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|getContainerStatus ( Context context, final ContainerManagerImpl cm, ContainerId cid)
specifier|private
name|ContainerStatus
name|getContainerStatus
parameter_list|(
name|Context
name|context
parameter_list|,
specifier|final
name|ContainerManagerImpl
name|cm
parameter_list|,
name|ContainerId
name|cid
parameter_list|)
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|user
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|cid
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|NMTokenIdentifier
name|nmToken
init|=
operator|new
name|NMTokenIdentifier
argument_list|(
name|cid
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|context
operator|.
name|getNMTokenSecretManager
argument_list|()
operator|.
name|getCurrentKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
argument_list|)
decl_stmt|;
name|user
operator|.
name|addTokenIdentifier
argument_list|(
name|nmToken
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containerIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|containerIds
operator|.
name|add
argument_list|(
name|cid
argument_list|)
expr_stmt|;
specifier|final
name|GetContainerStatusesRequest
name|gcsRequest
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|containerIds
argument_list|)
decl_stmt|;
return|return
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ContainerStatus
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|cm
operator|.
name|getContainerStatuses
argument_list|(
name|gcsRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|waitForAppState (Application app, ApplicationState state)
specifier|private
name|void
name|waitForAppState
parameter_list|(
name|Application
name|app
parameter_list|,
name|ApplicationState
name|state
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|msecPerSleep
init|=
literal|10
decl_stmt|;
name|int
name|msecLeft
init|=
literal|5000
decl_stmt|;
while|while
condition|(
name|app
operator|.
name|getApplicationState
argument_list|()
operator|!=
name|state
operator|&&
name|msecLeft
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|msecPerSleep
argument_list|)
expr_stmt|;
name|msecLeft
operator|-=
name|msecPerSleep
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|state
argument_list|,
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createContainerManager (Context context)
specifier|private
name|ContainerManagerImpl
name|createContainerManager
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
specifier|final
name|LogHandler
name|logHandler
init|=
name|mock
argument_list|(
name|LogHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|NodeManagerMetrics
name|metrics
init|=
name|mock
argument_list|(
name|NodeManagerMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ResourceLocalizationService
name|rsrcSrv
init|=
operator|new
name|ResourceLocalizationService
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|context
argument_list|,
name|metrics
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{           }
annotation|@
name|Override
specifier|public
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// do nothing
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// do nothing
block|}
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|LocalizationEvent
name|event
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
decl_stmt|;
specifier|final
name|ContainersLauncher
name|launcher
init|=
operator|new
name|ContainersLauncher
argument_list|(
name|context
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|ContainersLauncherEvent
name|event
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
decl_stmt|;
name|ContainerManagerImpl
name|containerManager
init|=
operator|new
name|ContainerManagerImpl
argument_list|(
name|context
argument_list|,
name|mock
argument_list|(
name|ContainerExecutor
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|DeletionService
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|NodeStatusUpdater
operator|.
name|class
argument_list|)
argument_list|,
name|metrics
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|LogHandler
name|createLogHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Context
name|context
parameter_list|,
name|DeletionService
name|deletionService
parameter_list|)
block|{
return|return
name|logHandler
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ResourceLocalizationService
name|createResourceLocalizationService
parameter_list|(
name|ContainerExecutor
name|exec
parameter_list|,
name|DeletionService
name|deletionContext
parameter_list|,
name|Context
name|context
parameter_list|,
name|NodeManagerMetrics
name|metrics
parameter_list|)
block|{
return|return
name|rsrcSrv
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ContainersLauncher
name|createContainersLauncher
parameter_list|(
name|Context
name|context
parameter_list|,
name|ContainerExecutor
name|exec
parameter_list|)
block|{
return|return
name|launcher
return|;
block|}
annotation|@
name|Override
specifier|public
name|NMTimelinePublisher
name|createNMTimelinePublisher
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|containerManager
operator|.
name|dispatcher
operator|.
name|disableExitOnDispatchException
argument_list|()
expr_stmt|;
return|return
name|containerManager
return|;
block|}
DECL|method|setFlowContext (Map<String, String> containerEnv, String appName, ApplicationId appId)
specifier|private
name|void
name|setFlowContext
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|containerEnv
parameter_list|,
name|String
name|appName
parameter_list|,
name|ApplicationId
name|appId
parameter_list|)
block|{
if|if
condition|(
name|YarnConfiguration
operator|.
name|timelineServiceV2Enabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|setFlowTags
argument_list|(
name|containerEnv
argument_list|,
name|TimelineUtils
operator|.
name|FLOW_NAME_TAG_PREFIX
argument_list|,
name|TimelineUtils
operator|.
name|generateDefaultFlowName
argument_list|(
name|appName
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|setFlowTags
argument_list|(
name|containerEnv
argument_list|,
name|TimelineUtils
operator|.
name|FLOW_VERSION_TAG_PREFIX
argument_list|,
name|TimelineUtils
operator|.
name|DEFAULT_FLOW_VERSION
argument_list|)
expr_stmt|;
name|setFlowTags
argument_list|(
name|containerEnv
argument_list|,
name|TimelineUtils
operator|.
name|FLOW_RUN_ID_TAG_PREFIX
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setFlowTags (Map<String, String> environment, String tagPrefix, String value)
specifier|private
specifier|static
name|void
name|setFlowTags
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
parameter_list|,
name|String
name|tagPrefix
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|environment
operator|.
name|put
argument_list|(
name|tagPrefix
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testApplicationRecoveryAfterFlowContextUpdated ()
specifier|public
name|void
name|testApplicationRecoveryAfterFlowContextUpdated
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_SUPERVISED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
literal|"yarn_admin_user"
argument_list|)
expr_stmt|;
name|NMStateStoreService
name|stateStore
init|=
operator|new
name|NMMemoryStateStoreService
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|start
argument_list|()
expr_stmt|;
name|Context
name|context
init|=
name|createContext
argument_list|(
name|conf
argument_list|,
name|stateStore
argument_list|)
decl_stmt|;
name|ContainerManagerImpl
name|cm
init|=
name|createContainerManager
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|cm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// add an application by starting a container
name|String
name|appName
init|=
literal|"app_name1"
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// create 1nd attempt container with containerId 2
name|ContainerId
name|cid
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|containerEnv
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|containerCmds
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|serviceData
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
name|Credentials
name|containerCreds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|containerCreds
operator|.
name|writeTokenStorageToStream
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|ByteBuffer
name|containerTokens
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ContainerLaunchContext
name|clc
init|=
name|ContainerLaunchContext
operator|.
name|newInstance
argument_list|(
name|localResources
argument_list|,
name|containerEnv
argument_list|,
name|containerCmds
argument_list|,
name|serviceData
argument_list|,
name|containerTokens
argument_list|,
name|acls
argument_list|)
decl_stmt|;
comment|// create the logAggregationContext
name|LogAggregationContext
name|logAggregationContext
init|=
name|LogAggregationContext
operator|.
name|newInstance
argument_list|(
literal|"includePattern"
argument_list|,
literal|"excludePattern"
argument_list|,
literal|"includePatternInRollingAggregation"
argument_list|,
literal|"excludePatternInRollingAggregation"
argument_list|)
decl_stmt|;
name|StartContainersResponse
name|startResponse
init|=
name|startContainer
argument_list|(
name|context
argument_list|,
name|cm
argument_list|,
name|cid
argument_list|,
name|clc
argument_list|,
name|logAggregationContext
argument_list|,
name|ContainerType
operator|.
name|TASK
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|startResponse
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationImpl
name|app
init|=
operator|(
name|ApplicationImpl
operator|)
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|waitForAppState
argument_list|(
name|app
argument_list|,
name|ApplicationState
operator|.
name|INITING
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|app
operator|.
name|getFlowName
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2nd attempt
name|ApplicationAttemptId
name|attemptId2
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// create 2nd attempt master container
name|ContainerId
name|cid2
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|setFlowContext
argument_list|(
name|containerEnv
argument_list|,
name|appName
argument_list|,
name|appId
argument_list|)
expr_stmt|;
comment|// once again create for updating launch context
name|clc
operator|=
name|ContainerLaunchContext
operator|.
name|newInstance
argument_list|(
name|localResources
argument_list|,
name|containerEnv
argument_list|,
name|containerCmds
argument_list|,
name|serviceData
argument_list|,
name|containerTokens
argument_list|,
name|acls
argument_list|)
expr_stmt|;
comment|// start container with container type AM.
name|startResponse
operator|=
name|startContainer
argument_list|(
name|context
argument_list|,
name|cm
argument_list|,
name|cid2
argument_list|,
name|clc
argument_list|,
name|logAggregationContext
argument_list|,
name|ContainerType
operator|.
name|APPLICATION_MASTER
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|startResponse
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|waitForAppState
argument_list|(
name|app
argument_list|,
name|ApplicationState
operator|.
name|INITING
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appName
argument_list|,
name|app
operator|.
name|getFlowName
argument_list|()
argument_list|)
expr_stmt|;
comment|// reset container manager and verify flow context information
name|cm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|context
operator|=
name|createContext
argument_list|(
name|conf
argument_list|,
name|stateStore
argument_list|)
expr_stmt|;
name|cm
operator|=
name|createContainerManager
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|cm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cm
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|app
operator|=
operator|(
name|ApplicationImpl
operator|)
name|context
operator|.
name|getApplications
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appName
argument_list|,
name|app
operator|.
name|getFlowName
argument_list|()
argument_list|)
expr_stmt|;
name|waitForAppState
argument_list|(
name|app
argument_list|,
name|ApplicationState
operator|.
name|INITING
argument_list|)
expr_stmt|;
name|cm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

