begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.timelineservice
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|timelineservice
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|impl
operator|.
name|TimelineV2ClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ResourceCalculatorProcessTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestNMTimelinePublisher
specifier|public
class|class
name|TestNMTimelinePublisher
block|{
DECL|field|MEMORY_ID
specifier|private
specifier|static
specifier|final
name|String
name|MEMORY_ID
init|=
literal|"MEMORY"
decl_stmt|;
DECL|field|CPU_ID
specifier|private
specifier|static
specifier|final
name|String
name|CPU_ID
init|=
literal|"CPU"
decl_stmt|;
annotation|@
name|Test
DECL|method|testContainerResourceUsage ()
specifier|public
name|void
name|testContainerResourceUsage
parameter_list|()
block|{
name|Context
name|context
init|=
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|DummyTimelineClient
name|timelineClient
init|=
operator|new
name|DummyTimelineClient
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"localhost"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_VERSION
argument_list|,
literal|2.0f
argument_list|)
expr_stmt|;
name|NMTimelinePublisher
name|publisher
init|=
operator|new
name|NMTimelinePublisher
argument_list|(
name|context
argument_list|)
block|{
specifier|public
name|void
name|createTimelineClient
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getAppToClientMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|appId
argument_list|)
condition|)
block|{
name|timelineClient
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|timelineClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|getAppToClientMap
argument_list|()
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|timelineClient
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|publisher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|publisher
operator|.
name|start
argument_list|()
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|publisher
operator|.
name|createTimelineClient
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|Container
name|aContainer
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|aContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|publisher
operator|.
name|reportContainerResourceUsage
argument_list|(
name|aContainer
argument_list|,
literal|1024L
argument_list|,
literal|8F
argument_list|)
expr_stmt|;
name|verifyPublishedResourceUsageMetrics
argument_list|(
name|timelineClient
argument_list|,
literal|1024L
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|timelineClient
operator|.
name|reset
argument_list|()
expr_stmt|;
name|publisher
operator|.
name|reportContainerResourceUsage
argument_list|(
name|aContainer
argument_list|,
literal|1024L
argument_list|,
literal|0.8F
argument_list|)
expr_stmt|;
name|verifyPublishedResourceUsageMetrics
argument_list|(
name|timelineClient
argument_list|,
literal|1024L
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|timelineClient
operator|.
name|reset
argument_list|()
expr_stmt|;
name|publisher
operator|.
name|reportContainerResourceUsage
argument_list|(
name|aContainer
argument_list|,
literal|1024L
argument_list|,
literal|0.49F
argument_list|)
expr_stmt|;
name|verifyPublishedResourceUsageMetrics
argument_list|(
name|timelineClient
argument_list|,
literal|1024L
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|timelineClient
operator|.
name|reset
argument_list|()
expr_stmt|;
name|publisher
operator|.
name|reportContainerResourceUsage
argument_list|(
name|aContainer
argument_list|,
literal|1024L
argument_list|,
operator|(
name|float
operator|)
name|ResourceCalculatorProcessTree
operator|.
name|UNAVAILABLE
argument_list|)
expr_stmt|;
name|verifyPublishedResourceUsageMetrics
argument_list|(
name|timelineClient
argument_list|,
literal|1024L
argument_list|,
name|ResourceCalculatorProcessTree
operator|.
name|UNAVAILABLE
argument_list|)
expr_stmt|;
name|publisher
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|verifyPublishedResourceUsageMetrics ( DummyTimelineClient timelineClient, long memoryUsage, int cpuUsage)
specifier|private
name|void
name|verifyPublishedResourceUsageMetrics
parameter_list|(
name|DummyTimelineClient
name|timelineClient
parameter_list|,
name|long
name|memoryUsage
parameter_list|,
name|int
name|cpuUsage
parameter_list|)
block|{
name|TimelineEntity
index|[]
name|entities
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|entities
operator|=
name|timelineClient
operator|.
name|getLastPublishedEntities
argument_list|()
expr_stmt|;
if|if
condition|(
name|entities
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|150L
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
name|int
name|numberOfResourceMetrics
init|=
literal|0
decl_stmt|;
name|numberOfResourceMetrics
operator|+=
operator|(
name|memoryUsage
operator|==
name|ResourceCalculatorProcessTree
operator|.
name|UNAVAILABLE
operator|)
condition|?
literal|0
else|:
literal|1
expr_stmt|;
name|numberOfResourceMetrics
operator|+=
operator|(
name|cpuUsage
operator|==
name|ResourceCalculatorProcessTree
operator|.
name|UNAVAILABLE
operator|)
condition|?
literal|0
else|:
literal|1
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"entities are expected to be published"
argument_list|,
name|entities
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected number of metrics notpublished"
argument_list|,
name|numberOfResourceMetrics
argument_list|,
name|entities
index|[
literal|0
index|]
operator|.
name|getMetrics
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|TimelineMetric
argument_list|>
name|metrics
init|=
name|entities
index|[
literal|0
index|]
operator|.
name|getMetrics
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|metrics
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|TimelineMetric
name|metric
init|=
name|metrics
operator|.
name|next
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|Number
argument_list|>
argument_list|>
name|entrySet
decl_stmt|;
switch|switch
condition|(
name|metric
operator|.
name|getId
argument_list|()
condition|)
block|{
case|case
name|CPU_ID
case|:
if|if
condition|(
name|cpuUsage
operator|==
name|ResourceCalculatorProcessTree
operator|.
name|UNAVAILABLE
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Not Expecting CPU Metric to be published"
argument_list|)
expr_stmt|;
block|}
name|entrySet
operator|=
name|metric
operator|.
name|getValues
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CPU usage metric not matching"
argument_list|,
name|cpuUsage
argument_list|,
name|entrySet
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|MEMORY_ID
case|:
if|if
condition|(
name|memoryUsage
operator|==
name|ResourceCalculatorProcessTree
operator|.
name|UNAVAILABLE
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Not Expecting Memory Metric to be published"
argument_list|)
expr_stmt|;
block|}
name|entrySet
operator|=
name|metric
operator|.
name|getValues
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Memory usage metric not matching"
argument_list|,
name|memoryUsage
argument_list|,
name|entrySet
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|Assert
operator|.
name|fail
argument_list|(
literal|"Invalid Resource Usage metric"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|class|DummyTimelineClient
specifier|protected
specifier|static
class|class
name|DummyTimelineClient
extends|extends
name|TimelineV2ClientImpl
block|{
DECL|method|DummyTimelineClient (ApplicationId appId)
specifier|public
name|DummyTimelineClient
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
name|super
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
DECL|field|lastPublishedEntities
specifier|private
name|TimelineEntity
index|[]
name|lastPublishedEntities
decl_stmt|;
annotation|@
name|Override
DECL|method|putEntitiesAsync (TimelineEntity... entities)
specifier|public
name|void
name|putEntitiesAsync
parameter_list|(
name|TimelineEntity
modifier|...
name|entities
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|this
operator|.
name|lastPublishedEntities
operator|=
name|entities
expr_stmt|;
block|}
DECL|method|getLastPublishedEntities ()
specifier|public
name|TimelineEntity
index|[]
name|getLastPublishedEntities
parameter_list|()
block|{
return|return
name|lastPublishedEntities
return|;
block|}
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|lastPublishedEntities
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

