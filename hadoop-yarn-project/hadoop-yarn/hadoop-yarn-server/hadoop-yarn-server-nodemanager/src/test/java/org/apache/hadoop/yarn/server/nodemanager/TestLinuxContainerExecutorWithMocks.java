begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|PlatformAssumptions
operator|.
name|assumeNotWindows
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|LineNumberReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerDiagnosticsUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|DefaultLinuxContainerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|runtime
operator|.
name|ContainerExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|executor
operator|.
name|ContainerSignalContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|executor
operator|.
name|ContainerStartContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|executor
operator|.
name|DeletionAsUserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|executor
operator|.
name|LocalizerStartContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyListOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_class
DECL|class|TestLinuxContainerExecutorWithMocks
specifier|public
class|class
name|TestLinuxContainerExecutorWithMocks
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestLinuxContainerExecutorWithMocks
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MOCK_EXECUTOR
specifier|private
specifier|static
specifier|final
name|String
name|MOCK_EXECUTOR
init|=
literal|"./src/test/resources/mock-container-executor"
decl_stmt|;
DECL|field|MOCK_EXECUTOR_WITH_ERROR
specifier|private
specifier|static
specifier|final
name|String
name|MOCK_EXECUTOR_WITH_ERROR
init|=
literal|"./src/test/resources/mock-container-executer-with-error"
decl_stmt|;
DECL|field|MOCK_EXECUTOR_WITH_CONFIG_ERROR
specifier|private
specifier|static
specifier|final
name|String
name|MOCK_EXECUTOR_WITH_CONFIG_ERROR
init|=
literal|"./src/test/resources/mock-container-executer-with-configuration-error"
decl_stmt|;
DECL|field|tmpMockExecutor
specifier|private
name|String
name|tmpMockExecutor
decl_stmt|;
DECL|field|mockExec
specifier|private
name|LinuxContainerExecutor
name|mockExec
init|=
literal|null
decl_stmt|;
DECL|field|mockExecMockRuntime
specifier|private
name|LinuxContainerExecutor
name|mockExecMockRuntime
init|=
literal|null
decl_stmt|;
DECL|field|mockPrivilegedExec
specifier|private
name|PrivilegedOperationExecutor
name|mockPrivilegedExec
decl_stmt|;
DECL|field|mockParamFile
specifier|private
specifier|final
name|File
name|mockParamFile
init|=
operator|new
name|File
argument_list|(
literal|"./params.txt"
argument_list|)
decl_stmt|;
DECL|field|dirsHandler
specifier|private
name|LocalDirsHandlerService
name|dirsHandler
decl_stmt|;
DECL|method|deleteMockParamFile ()
specifier|private
name|void
name|deleteMockParamFile
parameter_list|()
block|{
if|if
condition|(
name|mockParamFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|mockParamFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|readMockParams ()
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|readMockParams
parameter_list|()
throws|throws
name|IOException
block|{
name|LinkedList
argument_list|<
name|String
argument_list|>
name|ret
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|LineNumberReader
name|reader
init|=
operator|new
name|LineNumberReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|mockParamFile
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|setupMockExecutor (String executorPath, Configuration conf)
specifier|private
name|void
name|setupMockExecutor
parameter_list|(
name|String
name|executorPath
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|//we'll always use the tmpMockExecutor - since
comment|// PrivilegedOperationExecutor can only be initialized once.
name|Files
operator|.
name|copy
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|executorPath
argument_list|)
argument_list|,
name|Paths
operator|.
name|get
argument_list|(
name|tmpMockExecutor
argument_list|)
argument_list|,
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
name|File
name|executor
init|=
operator|new
name|File
argument_list|(
name|tmpMockExecutor
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|FileUtil
operator|.
name|canExecute
argument_list|(
name|executor
argument_list|)
condition|)
block|{
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|executor
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|String
name|executorAbsolutePath
init|=
name|executor
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LINUX_CONTAINER_EXECUTOR_PATH
argument_list|,
name|executorAbsolutePath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
throws|,
name|ContainerExecutionException
block|{
name|assumeNotWindows
argument_list|()
expr_stmt|;
name|tmpMockExecutor
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|)
operator|+
literal|"/tmp-mock-container-executor"
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|LinuxContainerRuntime
name|linuxContainerRuntime
decl_stmt|;
name|LinuxContainerRuntime
name|mockLinuxContainerRuntime
decl_stmt|;
name|setupMockExecutor
argument_list|(
name|MOCK_EXECUTOR
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|linuxContainerRuntime
operator|=
operator|new
name|DefaultLinuxContainerRuntime
argument_list|(
name|PrivilegedOperationExecutor
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|mockPrivilegedExec
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|PrivilegedOperationExecutor
operator|.
name|class
argument_list|)
expr_stmt|;
name|mockLinuxContainerRuntime
operator|=
operator|new
name|DefaultLinuxContainerRuntime
argument_list|(
name|mockPrivilegedExec
argument_list|)
expr_stmt|;
name|dirsHandler
operator|=
operator|new
name|LocalDirsHandlerService
argument_list|()
expr_stmt|;
name|dirsHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|linuxContainerRuntime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mockExec
operator|=
operator|new
name|LinuxContainerExecutor
argument_list|(
name|linuxContainerRuntime
argument_list|)
expr_stmt|;
name|mockExec
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|mockExecMockRuntime
operator|=
operator|new
name|LinuxContainerExecutor
argument_list|(
name|mockLinuxContainerRuntime
argument_list|)
expr_stmt|;
name|mockExecMockRuntime
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|deleteMockParamFile
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerLaunch ()
specifier|public
name|void
name|testContainerLaunch
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigurationException
block|{
name|String
name|appSubmitter
init|=
literal|"nobody"
decl_stmt|;
name|String
name|cmd
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|PrivilegedOperation
operator|.
name|RunAsUserCommand
operator|.
name|LAUNCH_CONTAINER
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|appId
init|=
literal|"APP_ID"
decl_stmt|;
name|String
name|containerId
init|=
literal|"CONTAINER_ID"
decl_stmt|;
name|Container
name|container
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerId
name|cId
init|=
name|mock
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|context
init|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getLaunchContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getEnvironment
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|Path
name|scriptPath
init|=
operator|new
name|Path
argument_list|(
literal|"file:///bin/echo"
argument_list|)
decl_stmt|;
name|Path
name|tokensPath
init|=
operator|new
name|Path
argument_list|(
literal|"file:///dev/null"
argument_list|)
decl_stmt|;
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
decl_stmt|;
name|Path
name|pidFile
init|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"pid.txt"
argument_list|)
decl_stmt|;
name|mockExec
operator|.
name|activateContainer
argument_list|(
name|cId
argument_list|,
name|pidFile
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|mockExec
operator|.
name|launchContainer
argument_list|(
operator|new
name|ContainerStartContext
operator|.
name|Builder
argument_list|()
operator|.
name|setContainer
argument_list|(
name|container
argument_list|)
operator|.
name|setNmPrivateContainerScriptPath
argument_list|(
name|scriptPath
argument_list|)
operator|.
name|setNmPrivateTokensPath
argument_list|(
name|tokensPath
argument_list|)
operator|.
name|setUser
argument_list|(
name|appSubmitter
argument_list|)
operator|.
name|setAppId
argument_list|(
name|appId
argument_list|)
operator|.
name|setContainerWorkDir
argument_list|(
name|workDir
argument_list|)
operator|.
name|setLocalDirs
argument_list|(
name|dirsHandler
operator|.
name|getLocalDirs
argument_list|()
argument_list|)
operator|.
name|setLogDirs
argument_list|(
name|dirsHandler
operator|.
name|getLogDirs
argument_list|()
argument_list|)
operator|.
name|setFilecacheDirs
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|setUserLocalDirs
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|setContainerLocalDirs
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|setContainerLogDirs
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_NM_NONSECURE_MODE_LOCAL_USER
argument_list|,
name|appSubmitter
argument_list|,
name|cmd
argument_list|,
name|appId
argument_list|,
name|containerId
argument_list|,
name|workDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|"/bin/echo"
argument_list|,
literal|"/dev/null"
argument_list|,
name|pidFile
operator|.
name|toString
argument_list|()
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|PrivilegedOperation
operator|.
name|LINUX_FILE_PATH_SEPARATOR
argument_list|,
name|dirsHandler
operator|.
name|getLocalDirs
argument_list|()
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|PrivilegedOperation
operator|.
name|LINUX_FILE_PATH_SEPARATOR
argument_list|,
name|dirsHandler
operator|.
name|getLogDirs
argument_list|()
argument_list|)
argument_list|,
literal|"cgroups=none"
argument_list|)
argument_list|,
name|readMockParams
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testContainerLaunchWithPriority ()
specifier|public
name|void
name|testContainerLaunchWithPriority
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigurationException
block|{
comment|// set the scheduler priority to make sure still works with nice -n prio
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|setupMockExecutor
argument_list|(
name|MOCK_EXECUTOR
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CONTAINER_EXECUTOR_SCHED_PRIORITY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mockExec
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|command
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|mockExec
operator|.
name|addSchedPriorityCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"first should be nice"
argument_list|,
literal|"nice"
argument_list|,
name|command
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"second should be -n"
argument_list|,
literal|"-n"
argument_list|,
name|command
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"third should be the priority"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|2
argument_list|)
argument_list|,
name|command
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|testContainerLaunch
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testLaunchCommandWithoutPriority ()
specifier|public
name|void
name|testLaunchCommandWithoutPriority
parameter_list|()
throws|throws
name|IOException
block|{
comment|// make sure the command doesn't contain the nice -n since priority
comment|// not specified
name|List
argument_list|<
name|String
argument_list|>
name|command
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|mockExec
operator|.
name|addSchedPriorityCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"addSchedPriority should be empty"
argument_list|,
literal|0
argument_list|,
name|command
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testStartLocalizer ()
specifier|public
name|void
name|testStartLocalizer
parameter_list|()
throws|throws
name|IOException
block|{
name|InetSocketAddress
name|address
init|=
name|InetSocketAddress
operator|.
name|createUnresolved
argument_list|(
literal|"localhost"
argument_list|,
literal|8040
argument_list|)
decl_stmt|;
name|Path
name|nmPrivateCTokensPath
init|=
operator|new
name|Path
argument_list|(
literal|"file:///bin/nmPrivateCTokensPath"
argument_list|)
decl_stmt|;
try|try
block|{
name|mockExec
operator|.
name|startLocalizer
argument_list|(
operator|new
name|LocalizerStartContext
operator|.
name|Builder
argument_list|()
operator|.
name|setNmPrivateContainerTokens
argument_list|(
name|nmPrivateCTokensPath
argument_list|)
operator|.
name|setNmAddr
argument_list|(
name|address
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setAppId
argument_list|(
literal|"application_0"
argument_list|)
operator|.
name|setLocId
argument_list|(
literal|"12345"
argument_list|)
operator|.
name|setDirsHandler
argument_list|(
name|dirsHandler
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|readMockParams
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|19
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_NONSECURE_MODE_LOCAL_USER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|"application_0"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|"/bin/nmPrivateCTokensPath"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|8
argument_list|)
argument_list|,
literal|"-classpath"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|11
argument_list|)
argument_list|,
literal|"-Xmx256m"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|12
argument_list|)
argument_list|,
literal|"org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer.ContainerLocalizer"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|13
argument_list|)
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|14
argument_list|)
argument_list|,
literal|"application_0"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|15
argument_list|)
argument_list|,
literal|"12345"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|16
argument_list|)
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|17
argument_list|)
argument_list|,
literal|"8040"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testContainerLaunchError ()
specifier|public
name|void
name|testContainerLaunchError
parameter_list|()
throws|throws
name|IOException
throws|,
name|ContainerExecutionException
block|{
specifier|final
name|String
index|[]
name|expecetedMessage
init|=
block|{
literal|"badcommand"
block|,
literal|"Exit code: 24"
block|}
decl_stmt|;
specifier|final
name|String
index|[]
name|executor
init|=
block|{
name|MOCK_EXECUTOR_WITH_ERROR
block|,
name|MOCK_EXECUTOR_WITH_CONFIG_ERROR
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expecetedMessage
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|j
init|=
name|i
decl_stmt|;
comment|// reinitialize executer
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|setupMockExecutor
argument_list|(
name|executor
index|[
name|j
index|]
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
literal|"file:///bin/echo"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
literal|"file:///dev/null"
argument_list|)
expr_stmt|;
name|LinuxContainerExecutor
name|exec
decl_stmt|;
name|LinuxContainerRuntime
name|linuxContainerRuntime
init|=
operator|new
name|DefaultLinuxContainerRuntime
argument_list|(
name|PrivilegedOperationExecutor
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|linuxContainerRuntime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|exec
operator|=
operator|new
name|LinuxContainerExecutor
argument_list|(
name|linuxContainerRuntime
argument_list|)
expr_stmt|;
name|mockExec
operator|=
name|spy
argument_list|(
name|exec
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocationOnMock
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|diagnostics
init|=
operator|(
name|String
operator|)
name|invocationOnMock
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid Diagnostics message: "
operator|+
name|diagnostics
argument_list|,
name|diagnostics
operator|.
name|contains
argument_list|(
name|expecetedMessage
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|mockExec
argument_list|)
operator|.
name|logOutput
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|dirsHandler
operator|=
operator|new
name|LocalDirsHandlerService
argument_list|()
expr_stmt|;
name|dirsHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|mockExec
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|appSubmitter
init|=
literal|"nobody"
decl_stmt|;
name|String
name|cmd
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|PrivilegedOperation
operator|.
name|RunAsUserCommand
operator|.
name|LAUNCH_CONTAINER
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|appId
init|=
literal|"APP_ID"
decl_stmt|;
name|String
name|containerId
init|=
literal|"CONTAINER_ID"
decl_stmt|;
name|Container
name|container
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerId
name|cId
init|=
name|mock
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|context
init|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getLaunchContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocationOnMock
parameter_list|)
throws|throws
name|Throwable
block|{
name|ContainerDiagnosticsUpdateEvent
name|event
init|=
operator|(
name|ContainerDiagnosticsUpdateEvent
operator|)
name|invocationOnMock
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid Diagnostics message: "
operator|+
name|event
operator|.
name|getDiagnosticsUpdate
argument_list|()
argument_list|,
name|event
operator|.
name|getDiagnosticsUpdate
argument_list|()
operator|.
name|contains
argument_list|(
name|expecetedMessage
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|container
argument_list|)
operator|.
name|handle
argument_list|(
name|any
argument_list|(
name|ContainerDiagnosticsUpdateEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getEnvironment
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|Path
name|scriptPath
init|=
operator|new
name|Path
argument_list|(
literal|"file:///bin/echo"
argument_list|)
decl_stmt|;
name|Path
name|tokensPath
init|=
operator|new
name|Path
argument_list|(
literal|"file:///dev/null"
argument_list|)
decl_stmt|;
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
decl_stmt|;
name|Path
name|pidFile
init|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"pid.txt"
argument_list|)
decl_stmt|;
name|mockExec
operator|.
name|activateContainer
argument_list|(
name|cId
argument_list|,
name|pidFile
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|ret
init|=
name|mockExec
operator|.
name|launchContainer
argument_list|(
operator|new
name|ContainerStartContext
operator|.
name|Builder
argument_list|()
operator|.
name|setContainer
argument_list|(
name|container
argument_list|)
operator|.
name|setNmPrivateContainerScriptPath
argument_list|(
name|scriptPath
argument_list|)
operator|.
name|setNmPrivateTokensPath
argument_list|(
name|tokensPath
argument_list|)
operator|.
name|setUser
argument_list|(
name|appSubmitter
argument_list|)
operator|.
name|setAppId
argument_list|(
name|appId
argument_list|)
operator|.
name|setContainerWorkDir
argument_list|(
name|workDir
argument_list|)
operator|.
name|setLocalDirs
argument_list|(
name|dirsHandler
operator|.
name|getLocalDirs
argument_list|()
argument_list|)
operator|.
name|setLogDirs
argument_list|(
name|dirsHandler
operator|.
name|getLogDirs
argument_list|()
argument_list|)
operator|.
name|setFilecacheDirs
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|setUserLocalDirs
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|setContainerLocalDirs
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|setContainerLogDirs
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_NM_NONSECURE_MODE_LOCAL_USER
argument_list|,
name|appSubmitter
argument_list|,
name|cmd
argument_list|,
name|appId
argument_list|,
name|containerId
argument_list|,
name|workDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|"/bin/echo"
argument_list|,
literal|"/dev/null"
argument_list|,
name|pidFile
operator|.
name|toString
argument_list|()
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|PrivilegedOperation
operator|.
name|LINUX_FILE_PATH_SEPARATOR
argument_list|,
name|dirsHandler
operator|.
name|getLocalDirs
argument_list|()
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|PrivilegedOperation
operator|.
name|LINUX_FILE_PATH_SEPARATOR
argument_list|,
name|dirsHandler
operator|.
name|getLogDirs
argument_list|()
argument_list|)
argument_list|,
literal|"cgroups=none"
argument_list|)
argument_list|,
name|readMockParams
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|"Expected YarnRuntimeException"
argument_list|,
name|MOCK_EXECUTOR_WITH_CONFIG_ERROR
argument_list|,
name|executor
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigurationException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|MOCK_EXECUTOR_WITH_CONFIG_ERROR
argument_list|,
name|executor
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Linux Container Executor reached unrecoverable "
operator|+
literal|"exception"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testInit ()
specifier|public
name|void
name|testInit
parameter_list|()
throws|throws
name|Exception
block|{
name|mockExec
operator|.
name|init
argument_list|(
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"--checksetup"
argument_list|)
argument_list|,
name|readMockParams
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerKill ()
specifier|public
name|void
name|testContainerKill
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|appSubmitter
init|=
literal|"nobody"
decl_stmt|;
name|String
name|cmd
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|PrivilegedOperation
operator|.
name|RunAsUserCommand
operator|.
name|SIGNAL_CONTAINER
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|ContainerExecutor
operator|.
name|Signal
name|signal
init|=
name|ContainerExecutor
operator|.
name|Signal
operator|.
name|QUIT
decl_stmt|;
name|String
name|sigVal
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|signal
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerId
name|cId
init|=
name|mock
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|context
init|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getLaunchContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|mockExec
operator|.
name|signalContainer
argument_list|(
operator|new
name|ContainerSignalContext
operator|.
name|Builder
argument_list|()
operator|.
name|setContainer
argument_list|(
name|container
argument_list|)
operator|.
name|setUser
argument_list|(
name|appSubmitter
argument_list|)
operator|.
name|setPid
argument_list|(
literal|"1000"
argument_list|)
operator|.
name|setSignal
argument_list|(
name|signal
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_NM_NONSECURE_MODE_LOCAL_USER
argument_list|,
name|appSubmitter
argument_list|,
name|cmd
argument_list|,
literal|"1000"
argument_list|,
name|sigVal
argument_list|)
argument_list|,
name|readMockParams
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteAsUser ()
specifier|public
name|void
name|testDeleteAsUser
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|appSubmitter
init|=
literal|"nobody"
decl_stmt|;
name|String
name|cmd
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|PrivilegedOperation
operator|.
name|RunAsUserCommand
operator|.
name|DELETE_AS_USER
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/testdir"
argument_list|)
decl_stmt|;
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"testfile"
argument_list|)
decl_stmt|;
name|Path
name|baseDir0
init|=
operator|new
name|Path
argument_list|(
literal|"/grid/0/BaseDir"
argument_list|)
decl_stmt|;
name|Path
name|baseDir1
init|=
operator|new
name|Path
argument_list|(
literal|"/grid/1/BaseDir"
argument_list|)
decl_stmt|;
name|mockExec
operator|.
name|deleteAsUser
argument_list|(
operator|new
name|DeletionAsUserContext
operator|.
name|Builder
argument_list|()
operator|.
name|setUser
argument_list|(
name|appSubmitter
argument_list|)
operator|.
name|setSubDir
argument_list|(
name|dir
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_NM_NONSECURE_MODE_LOCAL_USER
argument_list|,
name|appSubmitter
argument_list|,
name|cmd
argument_list|,
literal|"/tmp/testdir"
argument_list|)
argument_list|,
name|readMockParams
argument_list|()
argument_list|)
expr_stmt|;
name|mockExec
operator|.
name|deleteAsUser
argument_list|(
operator|new
name|DeletionAsUserContext
operator|.
name|Builder
argument_list|()
operator|.
name|setUser
argument_list|(
name|appSubmitter
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_NM_NONSECURE_MODE_LOCAL_USER
argument_list|,
name|appSubmitter
argument_list|,
name|cmd
argument_list|,
literal|""
argument_list|)
argument_list|,
name|readMockParams
argument_list|()
argument_list|)
expr_stmt|;
name|mockExec
operator|.
name|deleteAsUser
argument_list|(
operator|new
name|DeletionAsUserContext
operator|.
name|Builder
argument_list|()
operator|.
name|setUser
argument_list|(
name|appSubmitter
argument_list|)
operator|.
name|setSubDir
argument_list|(
name|testFile
argument_list|)
operator|.
name|setBasedirs
argument_list|(
name|baseDir0
argument_list|,
name|baseDir1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_NM_NONSECURE_MODE_LOCAL_USER
argument_list|,
name|appSubmitter
argument_list|,
name|cmd
argument_list|,
name|testFile
operator|.
name|toString
argument_list|()
argument_list|,
name|baseDir0
operator|.
name|toString
argument_list|()
argument_list|,
name|baseDir1
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|readMockParams
argument_list|()
argument_list|)
expr_stmt|;
name|mockExec
operator|.
name|deleteAsUser
argument_list|(
operator|new
name|DeletionAsUserContext
operator|.
name|Builder
argument_list|()
operator|.
name|setUser
argument_list|(
name|appSubmitter
argument_list|)
operator|.
name|setBasedirs
argument_list|(
name|baseDir0
argument_list|,
name|baseDir1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_NM_NONSECURE_MODE_LOCAL_USER
argument_list|,
name|appSubmitter
argument_list|,
name|cmd
argument_list|,
literal|""
argument_list|,
name|baseDir0
operator|.
name|toString
argument_list|()
argument_list|,
name|baseDir1
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|readMockParams
argument_list|()
argument_list|)
expr_stmt|;
empty_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|setupMockExecutor
argument_list|(
name|MOCK_EXECUTOR
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|mockExec
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|mockExec
operator|.
name|deleteAsUser
argument_list|(
operator|new
name|DeletionAsUserContext
operator|.
name|Builder
argument_list|()
operator|.
name|setUser
argument_list|(
name|appSubmitter
argument_list|)
operator|.
name|setSubDir
argument_list|(
name|dir
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_NM_NONSECURE_MODE_LOCAL_USER
argument_list|,
name|appSubmitter
argument_list|,
name|cmd
argument_list|,
literal|"/tmp/testdir"
argument_list|)
argument_list|,
name|readMockParams
argument_list|()
argument_list|)
expr_stmt|;
name|mockExec
operator|.
name|deleteAsUser
argument_list|(
operator|new
name|DeletionAsUserContext
operator|.
name|Builder
argument_list|()
operator|.
name|setUser
argument_list|(
name|appSubmitter
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_NM_NONSECURE_MODE_LOCAL_USER
argument_list|,
name|appSubmitter
argument_list|,
name|cmd
argument_list|,
literal|""
argument_list|)
argument_list|,
name|readMockParams
argument_list|()
argument_list|)
expr_stmt|;
name|mockExec
operator|.
name|deleteAsUser
argument_list|(
operator|new
name|DeletionAsUserContext
operator|.
name|Builder
argument_list|()
operator|.
name|setUser
argument_list|(
name|appSubmitter
argument_list|)
operator|.
name|setSubDir
argument_list|(
name|testFile
argument_list|)
operator|.
name|setBasedirs
argument_list|(
name|baseDir0
argument_list|,
name|baseDir1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_NM_NONSECURE_MODE_LOCAL_USER
argument_list|,
name|appSubmitter
argument_list|,
name|cmd
argument_list|,
name|testFile
operator|.
name|toString
argument_list|()
argument_list|,
name|baseDir0
operator|.
name|toString
argument_list|()
argument_list|,
name|baseDir1
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|readMockParams
argument_list|()
argument_list|)
expr_stmt|;
name|mockExec
operator|.
name|deleteAsUser
argument_list|(
operator|new
name|DeletionAsUserContext
operator|.
name|Builder
argument_list|()
operator|.
name|setUser
argument_list|(
name|appSubmitter
argument_list|)
operator|.
name|setBasedirs
argument_list|(
name|baseDir0
argument_list|,
name|baseDir1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_NM_NONSECURE_MODE_LOCAL_USER
argument_list|,
name|appSubmitter
argument_list|,
name|cmd
argument_list|,
literal|""
argument_list|,
name|baseDir0
operator|.
name|toString
argument_list|()
argument_list|,
name|baseDir1
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|readMockParams
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoExitCodeFromPrivilegedOperation ()
specifier|public
name|void
name|testNoExitCodeFromPrivilegedOperation
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|PrivilegedOperationExecutor
name|spyPrivilegedExecutor
init|=
name|spy
argument_list|(
name|PrivilegedOperationExecutor
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|doThrow
argument_list|(
operator|new
name|PrivilegedOperationException
argument_list|(
literal|"interrupted"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyPrivilegedExecutor
argument_list|)
operator|.
name|executePrivilegedOperation
argument_list|(
name|any
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|PrivilegedOperation
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|File
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|LinuxContainerRuntime
name|runtime
init|=
operator|new
name|DefaultLinuxContainerRuntime
argument_list|(
name|spyPrivilegedExecutor
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mockExec
operator|=
operator|new
name|LinuxContainerExecutor
argument_list|(
name|runtime
argument_list|)
expr_stmt|;
name|mockExec
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|LinuxContainerExecutor
name|lce
init|=
operator|new
name|LinuxContainerExecutor
argument_list|(
name|runtime
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|PrivilegedOperationExecutor
name|getPrivilegedOperationExecutor
parameter_list|()
block|{
return|return
name|spyPrivilegedExecutor
return|;
block|}
block|}
decl_stmt|;
name|lce
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|address
init|=
name|InetSocketAddress
operator|.
name|createUnresolved
argument_list|(
literal|"localhost"
argument_list|,
literal|8040
argument_list|)
decl_stmt|;
name|Path
name|nmPrivateCTokensPath
init|=
operator|new
name|Path
argument_list|(
literal|"file:///bin/nmPrivateCTokensPath"
argument_list|)
decl_stmt|;
name|LocalDirsHandlerService
name|dirService
init|=
operator|new
name|LocalDirsHandlerService
argument_list|()
decl_stmt|;
name|dirService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|appSubmitter
init|=
literal|"nobody"
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|cid
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Container
name|container
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|context
init|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cid
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getLaunchContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getEnvironment
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
decl_stmt|;
try|try
block|{
name|lce
operator|.
name|startLocalizer
argument_list|(
operator|new
name|LocalizerStartContext
operator|.
name|Builder
argument_list|()
operator|.
name|setNmPrivateContainerTokens
argument_list|(
name|nmPrivateCTokensPath
argument_list|)
operator|.
name|setNmAddr
argument_list|(
name|address
argument_list|)
operator|.
name|setUser
argument_list|(
name|appSubmitter
argument_list|)
operator|.
name|setAppId
argument_list|(
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setLocId
argument_list|(
literal|"12345"
argument_list|)
operator|.
name|setDirsHandler
argument_list|(
name|dirService
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"startLocalizer should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Unexpected exception "
operator|+
name|e
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"exitCode"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lce
operator|.
name|activateContainer
argument_list|(
name|cid
argument_list|,
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"pid.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|lce
operator|.
name|launchContainer
argument_list|(
operator|new
name|ContainerStartContext
operator|.
name|Builder
argument_list|()
operator|.
name|setContainer
argument_list|(
name|container
argument_list|)
operator|.
name|setNmPrivateContainerScriptPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"file:///bin/echo"
argument_list|)
argument_list|)
operator|.
name|setNmPrivateTokensPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"file:///dev/null"
argument_list|)
argument_list|)
operator|.
name|setUser
argument_list|(
name|appSubmitter
argument_list|)
operator|.
name|setAppId
argument_list|(
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setContainerWorkDir
argument_list|(
name|workDir
argument_list|)
operator|.
name|setLocalDirs
argument_list|(
name|dirsHandler
operator|.
name|getLocalDirs
argument_list|()
argument_list|)
operator|.
name|setLogDirs
argument_list|(
name|dirsHandler
operator|.
name|getLogDirs
argument_list|()
argument_list|)
operator|.
name|setFilecacheDirs
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|setUserLocalDirs
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|setContainerLocalDirs
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|setContainerLogDirs
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|lce
operator|.
name|deleteAsUser
argument_list|(
operator|new
name|DeletionAsUserContext
operator|.
name|Builder
argument_list|()
operator|.
name|setUser
argument_list|(
name|appSubmitter
argument_list|)
operator|.
name|setSubDir
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp/testdir"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|lce
operator|.
name|mountCgroups
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|,
literal|"hierarchy"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"mountCgroups should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Unexpected exception "
operator|+
name|e
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"exit code"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testContainerLaunchEnvironment ()
specifier|public
name|void
name|testContainerLaunchEnvironment
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigurationException
throws|,
name|PrivilegedOperationException
block|{
name|String
name|appSubmitter
init|=
literal|"nobody"
decl_stmt|;
name|String
name|appId
init|=
literal|"APP_ID"
decl_stmt|;
name|String
name|containerId
init|=
literal|"CONTAINER_ID"
decl_stmt|;
name|Container
name|container
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerId
name|cId
init|=
name|mock
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|context
init|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
literal|"FROM_CLIENT"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getLaunchContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getEnvironment
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|Path
name|scriptPath
init|=
operator|new
name|Path
argument_list|(
literal|"file:///bin/echo"
argument_list|)
decl_stmt|;
name|Path
name|tokensPath
init|=
operator|new
name|Path
argument_list|(
literal|"file:///dev/null"
argument_list|)
decl_stmt|;
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
decl_stmt|;
name|Path
name|pidFile
init|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"pid.txt"
argument_list|)
decl_stmt|;
name|mockExecMockRuntime
operator|.
name|activateContainer
argument_list|(
name|cId
argument_list|,
name|pidFile
argument_list|)
expr_stmt|;
name|mockExecMockRuntime
operator|.
name|launchContainer
argument_list|(
operator|new
name|ContainerStartContext
operator|.
name|Builder
argument_list|()
operator|.
name|setContainer
argument_list|(
name|container
argument_list|)
operator|.
name|setNmPrivateContainerScriptPath
argument_list|(
name|scriptPath
argument_list|)
operator|.
name|setNmPrivateTokensPath
argument_list|(
name|tokensPath
argument_list|)
operator|.
name|setUser
argument_list|(
name|appSubmitter
argument_list|)
operator|.
name|setAppId
argument_list|(
name|appId
argument_list|)
operator|.
name|setContainerWorkDir
argument_list|(
name|workDir
argument_list|)
operator|.
name|setLocalDirs
argument_list|(
name|dirsHandler
operator|.
name|getLocalDirs
argument_list|()
argument_list|)
operator|.
name|setLogDirs
argument_list|(
name|dirsHandler
operator|.
name|getLogDirs
argument_list|()
argument_list|)
operator|.
name|setFilecacheDirs
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|setUserLocalDirs
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|setContainerLocalDirs
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|setContainerLogDirs
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|PrivilegedOperation
argument_list|>
name|opCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|PrivilegedOperation
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Verify that
name|verify
argument_list|(
name|mockPrivilegedExec
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|executePrivilegedOperation
argument_list|(
name|anyListOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|opCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|File
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|null
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

