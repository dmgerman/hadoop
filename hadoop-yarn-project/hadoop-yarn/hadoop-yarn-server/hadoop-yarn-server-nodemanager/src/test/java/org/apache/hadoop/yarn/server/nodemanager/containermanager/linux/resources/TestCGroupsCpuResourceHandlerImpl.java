begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.resources
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ResourceCalculatorPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_class
DECL|class|TestCGroupsCpuResourceHandlerImpl
specifier|public
class|class
name|TestCGroupsCpuResourceHandlerImpl
block|{
DECL|field|mockCGroupsHandler
specifier|private
name|CGroupsHandler
name|mockCGroupsHandler
decl_stmt|;
DECL|field|cGroupsCpuResourceHandler
specifier|private
name|CGroupsCpuResourceHandlerImpl
name|cGroupsCpuResourceHandler
decl_stmt|;
DECL|field|plugin
specifier|private
name|ResourceCalculatorPlugin
name|plugin
decl_stmt|;
DECL|field|numProcessors
specifier|final
name|int
name|numProcessors
init|=
literal|4
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|mockCGroupsHandler
operator|=
name|mock
argument_list|(
name|CGroupsHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|cGroupsCpuResourceHandler
operator|=
operator|new
name|CGroupsCpuResourceHandlerImpl
argument_list|(
name|mockCGroupsHandler
argument_list|)
expr_stmt|;
name|plugin
operator|=
name|mock
argument_list|(
name|ResourceCalculatorPlugin
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|numProcessors
argument_list|)
operator|.
name|when
argument_list|(
name|plugin
argument_list|)
operator|.
name|getNumProcessors
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|numProcessors
argument_list|)
operator|.
name|when
argument_list|(
name|plugin
argument_list|)
operator|.
name|getNumCores
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBootstrap ()
specifier|public
name|void
name|testBootstrap
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|ret
init|=
name|cGroupsCpuResourceHandler
operator|.
name|bootstrap
argument_list|(
name|plugin
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockCGroupsHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|initializeCGroupController
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockCGroupsHandler
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|updateCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|,
literal|""
argument_list|,
name|CGroupsHandler
operator|.
name|CGROUP_CPU_PERIOD_US
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockCGroupsHandler
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|updateCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|,
literal|""
argument_list|,
name|CGroupsHandler
operator|.
name|CGROUP_CPU_QUOTA_US
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBootstrapLimits ()
specifier|public
name|void
name|testBootstrapLimits
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|int
name|cpuPerc
init|=
literal|80
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT
argument_list|,
name|cpuPerc
argument_list|)
expr_stmt|;
name|int
name|period
init|=
operator|(
name|CGroupsCpuResourceHandlerImpl
operator|.
name|MAX_QUOTA_US
operator|*
literal|100
operator|)
operator|/
operator|(
name|cpuPerc
operator|*
name|numProcessors
operator|)
decl_stmt|;
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|ret
init|=
name|cGroupsCpuResourceHandler
operator|.
name|bootstrap
argument_list|(
name|plugin
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockCGroupsHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|initializeCGroupController
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockCGroupsHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|updateCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|,
literal|""
argument_list|,
name|CGroupsHandler
operator|.
name|CGROUP_CPU_PERIOD_US
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|period
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockCGroupsHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|updateCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|,
literal|""
argument_list|,
name|CGroupsHandler
operator|.
name|CGROUP_CPU_QUOTA_US
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|CGroupsCpuResourceHandlerImpl
operator|.
name|MAX_QUOTA_US
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBootstrapExistingLimits ()
specifier|public
name|void
name|testBootstrapExistingLimits
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|existingLimit
init|=
operator|new
name|File
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|CGroupsHandler
operator|.
name|CGROUP_CPU_QUOTA_US
argument_list|)
decl_stmt|;
try|try
block|{
name|FileUtils
operator|.
name|write
argument_list|(
name|existingLimit
argument_list|,
literal|"10000"
argument_list|)
expr_stmt|;
comment|// value doesn't matter
name|when
argument_list|(
name|mockCGroupsHandler
operator|.
name|getPathForCGroup
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|ret
init|=
name|cGroupsCpuResourceHandler
operator|.
name|bootstrap
argument_list|(
name|plugin
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockCGroupsHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|initializeCGroupController
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockCGroupsHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|updateCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|,
literal|""
argument_list|,
name|CGroupsHandler
operator|.
name|CGROUP_CPU_QUOTA_US
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|existingLimit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPreStart ()
specifier|public
name|void
name|testPreStart
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|id
init|=
literal|"container_01_01"
decl_stmt|;
name|String
name|path
init|=
literal|"test-path/"
operator|+
name|id
decl_stmt|;
name|ContainerId
name|mockContainerId
init|=
name|mock
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContainerId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|Container
name|mockContainer
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockContainerId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCGroupsHandler
operator|.
name|getPathForCGroupTasks
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|,
name|id
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContainer
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|ret
init|=
name|cGroupsCpuResourceHandler
operator|.
name|preStart
argument_list|(
name|mockContainer
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockCGroupsHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|createCGroup
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockCGroupsHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|updateCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|,
name|id
argument_list|,
name|CGroupsHandler
operator|.
name|CGROUP_CPU_SHARES
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|CGroupsCpuResourceHandlerImpl
operator|.
name|CPU_DEFAULT_WEIGHT
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// don't set quota or period
name|verify
argument_list|(
name|mockCGroupsHandler
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|updateCGroupParam
argument_list|(
name|eq
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|)
argument_list|,
name|eq
argument_list|(
name|id
argument_list|)
argument_list|,
name|eq
argument_list|(
name|CGroupsHandler
operator|.
name|CGROUP_CPU_PERIOD_US
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockCGroupsHandler
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|updateCGroupParam
argument_list|(
name|eq
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|)
argument_list|,
name|eq
argument_list|(
name|id
argument_list|)
argument_list|,
name|eq
argument_list|(
name|CGroupsHandler
operator|.
name|CGROUP_CPU_QUOTA_US
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ret
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PrivilegedOperation
name|op
init|=
name|ret
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|ADD_PID_TO_CGROUP
argument_list|,
name|op
operator|.
name|getOperationType
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|op
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|args
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrivilegedOperation
operator|.
name|CGROUP_ARG_PREFIX
operator|+
name|path
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreStartStrictUsage ()
specifier|public
name|void
name|testPreStartStrictUsage
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|id
init|=
literal|"container_01_01"
decl_stmt|;
name|String
name|path
init|=
literal|"test-path/"
operator|+
name|id
decl_stmt|;
name|ContainerId
name|mockContainerId
init|=
name|mock
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContainerId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|Container
name|mockContainer
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockContainerId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCGroupsHandler
operator|.
name|getPathForCGroupTasks
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|,
name|id
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContainer
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cGroupsCpuResourceHandler
operator|.
name|bootstrap
argument_list|(
name|plugin
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|int
name|defaultVCores
init|=
literal|8
decl_stmt|;
name|float
name|share
init|=
operator|(
name|float
operator|)
name|numProcessors
operator|/
operator|(
name|float
operator|)
name|defaultVCores
decl_stmt|;
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|ret
init|=
name|cGroupsCpuResourceHandler
operator|.
name|preStart
argument_list|(
name|mockContainer
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockCGroupsHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|createCGroup
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockCGroupsHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|updateCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|,
name|id
argument_list|,
name|CGroupsHandler
operator|.
name|CGROUP_CPU_SHARES
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|CGroupsCpuResourceHandlerImpl
operator|.
name|CPU_DEFAULT_WEIGHT
argument_list|)
argument_list|)
expr_stmt|;
comment|// set quota and period
name|verify
argument_list|(
name|mockCGroupsHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|updateCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|,
name|id
argument_list|,
name|CGroupsHandler
operator|.
name|CGROUP_CPU_PERIOD_US
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|CGroupsCpuResourceHandlerImpl
operator|.
name|MAX_QUOTA_US
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockCGroupsHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|updateCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|,
name|id
argument_list|,
name|CGroupsHandler
operator|.
name|CGROUP_CPU_QUOTA_US
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
call|(
name|int
call|)
argument_list|(
name|CGroupsCpuResourceHandlerImpl
operator|.
name|MAX_QUOTA_US
operator|*
name|share
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ret
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PrivilegedOperation
name|op
init|=
name|ret
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|ADD_PID_TO_CGROUP
argument_list|,
name|op
operator|.
name|getOperationType
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|op
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|args
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrivilegedOperation
operator|.
name|CGROUP_ARG_PREFIX
operator|+
name|path
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreStartRestrictedContainers ()
specifier|public
name|void
name|testPreStartRestrictedContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|id
init|=
literal|"container_01_01"
decl_stmt|;
name|String
name|path
init|=
literal|"test-path/"
operator|+
name|id
decl_stmt|;
name|int
name|defaultVCores
init|=
literal|8
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|int
name|cpuPerc
init|=
literal|75
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT
argument_list|,
name|cpuPerc
argument_list|)
expr_stmt|;
name|cGroupsCpuResourceHandler
operator|.
name|bootstrap
argument_list|(
name|plugin
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockCGroupsHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|updateCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|,
literal|""
argument_list|,
name|CGroupsHandler
operator|.
name|CGROUP_CPU_PERIOD_US
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|"333333"
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockCGroupsHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|updateCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|,
literal|""
argument_list|,
name|CGroupsHandler
operator|.
name|CGROUP_CPU_QUOTA_US
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|CGroupsCpuResourceHandlerImpl
operator|.
name|MAX_QUOTA_US
argument_list|)
argument_list|)
expr_stmt|;
name|float
name|yarnCores
init|=
operator|(
name|cpuPerc
operator|*
name|numProcessors
operator|)
operator|/
literal|100
decl_stmt|;
name|int
index|[]
name|containerVCores
init|=
block|{
literal|2
block|,
literal|4
block|}
decl_stmt|;
for|for
control|(
name|int
name|cVcores
range|:
name|containerVCores
control|)
block|{
name|ContainerId
name|mockContainerId
init|=
name|mock
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContainerId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|Container
name|mockContainer
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockContainerId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCGroupsHandler
operator|.
name|getPathForCGroupTasks
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|,
name|id
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContainer
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
name|cVcores
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCGroupsHandler
operator|.
name|getPathForCGroupTasks
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|,
name|id
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|float
name|share
init|=
operator|(
name|cVcores
operator|*
name|yarnCores
operator|)
operator|/
name|defaultVCores
decl_stmt|;
name|int
name|quotaUS
decl_stmt|;
name|int
name|periodUS
decl_stmt|;
if|if
condition|(
name|share
operator|>
literal|1.0f
condition|)
block|{
name|quotaUS
operator|=
name|CGroupsCpuResourceHandlerImpl
operator|.
name|MAX_QUOTA_US
expr_stmt|;
name|periodUS
operator|=
call|(
name|int
call|)
argument_list|(
operator|(
name|float
operator|)
name|CGroupsCpuResourceHandlerImpl
operator|.
name|MAX_QUOTA_US
operator|/
name|share
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|quotaUS
operator|=
call|(
name|int
call|)
argument_list|(
name|CGroupsCpuResourceHandlerImpl
operator|.
name|MAX_QUOTA_US
operator|*
name|share
argument_list|)
expr_stmt|;
name|periodUS
operator|=
name|CGroupsCpuResourceHandlerImpl
operator|.
name|MAX_QUOTA_US
expr_stmt|;
block|}
name|cGroupsCpuResourceHandler
operator|.
name|preStart
argument_list|(
name|mockContainer
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockCGroupsHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|updateCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|,
name|id
argument_list|,
name|CGroupsHandler
operator|.
name|CGROUP_CPU_SHARES
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|CGroupsCpuResourceHandlerImpl
operator|.
name|CPU_DEFAULT_WEIGHT
operator|*
name|cVcores
argument_list|)
argument_list|)
expr_stmt|;
comment|// set quota and period
name|verify
argument_list|(
name|mockCGroupsHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|updateCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|,
name|id
argument_list|,
name|CGroupsHandler
operator|.
name|CGROUP_CPU_PERIOD_US
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|periodUS
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockCGroupsHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|updateCGroupParam
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|,
name|id
argument_list|,
name|CGroupsHandler
operator|.
name|CGROUP_CPU_QUOTA_US
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|quotaUS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testReacquireContainer ()
specifier|public
name|void
name|testReacquireContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|ContainerId
name|containerIdMock
init|=
name|mock
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|cGroupsCpuResourceHandler
operator|.
name|reacquireContainer
argument_list|(
name|containerIdMock
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPostComplete ()
specifier|public
name|void
name|testPostComplete
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|id
init|=
literal|"container_01_01"
decl_stmt|;
name|ContainerId
name|mockContainerId
init|=
name|mock
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContainerId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|cGroupsCpuResourceHandler
operator|.
name|postComplete
argument_list|(
name|mockContainerId
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockCGroupsHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|deleteCGroup
argument_list|(
name|CGroupsHandler
operator|.
name|CGroupController
operator|.
name|CPU
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTeardown ()
specifier|public
name|void
name|testTeardown
parameter_list|()
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|cGroupsCpuResourceHandler
operator|.
name|teardown
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStrictResourceUsage ()
specifier|public
name|void
name|testStrictResourceUsage
parameter_list|()
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|cGroupsCpuResourceHandler
operator|.
name|teardown
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

