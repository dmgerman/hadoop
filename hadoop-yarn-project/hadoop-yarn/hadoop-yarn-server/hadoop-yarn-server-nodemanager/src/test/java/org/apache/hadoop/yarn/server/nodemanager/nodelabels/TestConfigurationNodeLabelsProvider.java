begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.nodelabels
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|nodelabels
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|NodeLabelTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestConfigurationNodeLabelsProvider
specifier|public
class|class
name|TestConfigurationNodeLabelsProvider
extends|extends
name|NodeLabelTestBase
block|{
DECL|field|testRootDir
specifier|protected
specifier|static
name|File
name|testRootDir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|TestConfigurationNodeLabelsProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-localDir"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
DECL|field|nodeLabelsConfigFile
specifier|final
specifier|static
name|File
name|nodeLabelsConfigFile
init|=
operator|new
name|File
argument_list|(
name|testRootDir
argument_list|,
literal|"yarn-site.xml"
argument_list|)
decl_stmt|;
DECL|field|loader
specifier|private
specifier|static
name|XMLPathClassLoader
name|loader
decl_stmt|;
DECL|field|nodeLabelsProvider
specifier|private
name|ConfigurationNodeLabelsProvider
name|nodeLabelsProvider
decl_stmt|;
DECL|field|classContextClassLoader
specifier|private
specifier|static
name|ClassLoader
name|classContextClassLoader
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|create ()
specifier|public
specifier|static
name|void
name|create
parameter_list|()
block|{
name|classContextClassLoader
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
expr_stmt|;
name|loader
operator|=
operator|new
name|XMLPathClassLoader
argument_list|(
name|TestConfigurationNodeLabelsProvider
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|testRootDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|loader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|nodeLabelsProvider
operator|=
operator|new
name|ConfigurationNodeLabelsProvider
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|nodeLabelsProvider
operator|!=
literal|null
condition|)
block|{
name|nodeLabelsProvider
operator|.
name|close
argument_list|()
expr_stmt|;
name|nodeLabelsProvider
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
DECL|method|remove ()
specifier|public
specifier|static
name|void
name|remove
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|classContextClassLoader
operator|!=
literal|null
condition|)
block|{
comment|// testcases will fail after testcases present in this class, as
comment|// yarn-site.xml will be deleted
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|classContextClassLoader
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|testRootDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|testRootDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNodeLabelsFromConfig ()
specifier|public
name|void
name|testNodeLabelsFromConfig
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|modifyConf
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|nodeLabelsProvider
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// test for ensuring labels are set during initialization of the class
name|nodeLabelsProvider
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertNLCollectionEquals
argument_list|(
name|toNodeLabelSet
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|nodeLabelsProvider
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
expr_stmt|;
comment|// test for valid Modification
name|TimerTask
name|timerTask
init|=
name|nodeLabelsProvider
operator|.
name|getTimerTask
argument_list|()
decl_stmt|;
name|modifyConf
argument_list|(
literal|"X"
argument_list|)
expr_stmt|;
name|timerTask
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertNLCollectionEquals
argument_list|(
name|toNodeLabelSet
argument_list|(
literal|"X"
argument_list|)
argument_list|,
name|nodeLabelsProvider
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfigForNoTimer ()
specifier|public
name|void
name|testConfigForNoTimer
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|modifyConf
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NODE_LABELS_PROVIDER_FETCH_INTERVAL_MS
argument_list|,
name|AbstractNodeLabelsProvider
operator|.
name|DISABLE_NODE_LABELS_PROVIDER_FETCH_TIMER
argument_list|)
expr_stmt|;
name|nodeLabelsProvider
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nodeLabelsProvider
operator|.
name|start
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Timer is not expected to be created when interval is configured as -1"
argument_list|,
name|nodeLabelsProvider
operator|.
name|nodeLabelsScheduler
argument_list|)
expr_stmt|;
comment|// Ensure that even though timer is not run, node labels are fetched at least once so
comment|// that NM registers/updates Labels with RM
name|assertNLCollectionEquals
argument_list|(
name|toNodeLabelSet
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|nodeLabelsProvider
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfigTimer ()
specifier|public
name|void
name|testConfigTimer
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|modifyConf
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NODE_LABELS_PROVIDER_FETCH_INTERVAL_MS
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|nodeLabelsProvider
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nodeLabelsProvider
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Ensure that even though timer is not run, node labels are fetched at
comment|// least once so
comment|// that NM registers/updates Labels with RM
name|assertNLCollectionEquals
argument_list|(
name|toNodeLabelSet
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|nodeLabelsProvider
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
expr_stmt|;
name|modifyConf
argument_list|(
literal|"X"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1500
argument_list|)
expr_stmt|;
name|assertNLCollectionEquals
argument_list|(
name|toNodeLabelSet
argument_list|(
literal|"X"
argument_list|)
argument_list|,
name|nodeLabelsProvider
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|modifyConf (String nodeLabels)
specifier|private
specifier|static
name|void
name|modifyConf
parameter_list|(
name|String
name|nodeLabels
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_PROVIDER_CONFIGURED_NODE_PARTITION
argument_list|,
name|nodeLabels
argument_list|)
expr_stmt|;
name|FileOutputStream
name|confStream
init|=
operator|new
name|FileOutputStream
argument_list|(
name|nodeLabelsConfigFile
argument_list|)
decl_stmt|;
name|conf
operator|.
name|writeXml
argument_list|(
name|confStream
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|confStream
argument_list|)
expr_stmt|;
block|}
DECL|class|XMLPathClassLoader
specifier|private
specifier|static
class|class
name|XMLPathClassLoader
extends|extends
name|ClassLoader
block|{
DECL|method|XMLPathClassLoader (ClassLoader wrapper)
specifier|public
name|XMLPathClassLoader
parameter_list|(
name|ClassLoader
name|wrapper
parameter_list|)
block|{
name|super
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
block|}
DECL|method|getResource (String name)
specifier|public
name|URL
name|getResource
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_SITE_CONFIGURATION_FILE
argument_list|)
condition|)
block|{
try|try
block|{
return|return
name|nodeLabelsConfigFile
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|super
operator|.
name|getResource
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

