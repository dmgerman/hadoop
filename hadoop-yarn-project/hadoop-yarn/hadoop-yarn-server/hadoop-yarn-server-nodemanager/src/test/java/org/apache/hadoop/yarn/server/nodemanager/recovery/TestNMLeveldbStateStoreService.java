begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.recovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|fusesource
operator|.
name|leveldbjni
operator|.
name|JniDBFactory
operator|.
name|bytes
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|isNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|timeout
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|ServiceStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationIdPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|LocalResourcePBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|LocalResourceProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|ContainerManagerApplicationProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|DeletionServiceDeleteTaskProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|LocalizedResourceProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|LogDeleterProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|MasterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
operator|.
name|LocalResourceTrackerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
operator|.
name|RecoveredApplicationsState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
operator|.
name|RecoveredContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
operator|.
name|RecoveredContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
operator|.
name|RecoveredContainerTokensState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
operator|.
name|RecoveredContainerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
operator|.
name|RecoveredDeletionServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
operator|.
name|RecoveredLocalizationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
operator|.
name|RecoveredLogDeleterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
operator|.
name|RecoveredNMTokensState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
operator|.
name|RecoveredUserResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|records
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|BaseContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|BaseNMTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestNMLeveldbStateStoreService
specifier|public
class|class
name|TestNMLeveldbStateStoreService
block|{
DECL|field|TMP_DIR
specifier|private
specifier|static
specifier|final
name|File
name|TMP_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|)
argument_list|,
name|TestNMLeveldbStateStoreService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|conf
name|YarnConfiguration
name|conf
decl_stmt|;
DECL|field|stateStore
name|NMLeveldbStateStoreService
name|stateStore
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|TMP_DIR
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_DIR
argument_list|,
name|TMP_DIR
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|stateStore
operator|!=
literal|null
condition|)
block|{
name|stateStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|TMP_DIR
argument_list|)
expr_stmt|;
block|}
DECL|method|restartStateStore ()
specifier|private
name|void
name|restartStateStore
parameter_list|()
throws|throws
name|IOException
block|{
comment|// need to close so leveldb releases database lock
if|if
condition|(
name|stateStore
operator|!=
literal|null
condition|)
block|{
name|stateStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|stateStore
operator|=
operator|new
name|NMLeveldbStateStoreService
argument_list|()
expr_stmt|;
name|stateStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|verifyEmptyState ()
specifier|private
name|void
name|verifyEmptyState
parameter_list|()
throws|throws
name|IOException
block|{
name|RecoveredLocalizationState
name|state
init|=
name|stateStore
operator|.
name|loadLocalizationState
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|LocalResourceTrackerState
name|pubts
init|=
name|state
operator|.
name|getPublicTrackerState
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|pubts
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pubts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pubts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getUserResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIsNewlyCreated ()
specifier|public
name|void
name|testIsNewlyCreated
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|stateStore
operator|.
name|isNewlyCreated
argument_list|()
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|stateStore
operator|.
name|isNewlyCreated
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptyState ()
specifier|public
name|void
name|testEmptyState
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|stateStore
operator|.
name|canRecover
argument_list|()
argument_list|)
expr_stmt|;
name|verifyEmptyState
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCheckVersion ()
specifier|public
name|void
name|testCheckVersion
parameter_list|()
throws|throws
name|IOException
block|{
comment|// default version
name|Version
name|defaultVersion
init|=
name|stateStore
operator|.
name|getCurrentVersion
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|defaultVersion
argument_list|,
name|stateStore
operator|.
name|loadVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|// compatible version
name|Version
name|compatibleVersion
init|=
name|Version
operator|.
name|newInstance
argument_list|(
name|defaultVersion
operator|.
name|getMajorVersion
argument_list|()
argument_list|,
name|defaultVersion
operator|.
name|getMinorVersion
argument_list|()
operator|+
literal|2
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|storeVersion
argument_list|(
name|compatibleVersion
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|compatibleVersion
argument_list|,
name|stateStore
operator|.
name|loadVersion
argument_list|()
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
comment|// overwrite the compatible version
name|Assert
operator|.
name|assertEquals
argument_list|(
name|defaultVersion
argument_list|,
name|stateStore
operator|.
name|loadVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|// incompatible version
name|Version
name|incompatibleVersion
init|=
name|Version
operator|.
name|newInstance
argument_list|(
name|defaultVersion
operator|.
name|getMajorVersion
argument_list|()
operator|+
literal|1
argument_list|,
name|defaultVersion
operator|.
name|getMinorVersion
argument_list|()
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|storeVersion
argument_list|(
name|incompatibleVersion
argument_list|)
expr_stmt|;
try|try
block|{
name|restartStateStore
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Incompatible version, should expect fail here."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceStateException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Exception message mismatch"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Incompatible version for NM state:"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testApplicationStorage ()
specifier|public
name|void
name|testApplicationStorage
parameter_list|()
throws|throws
name|IOException
block|{
comment|// test empty when no state
name|RecoveredApplicationsState
name|state
init|=
name|stateStore
operator|.
name|loadApplicationsState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getApplications
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// store an application and verify recovered
specifier|final
name|ApplicationId
name|appId1
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerManagerApplicationProto
operator|.
name|Builder
name|builder
init|=
name|ContainerManagerApplicationProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setId
argument_list|(
operator|(
operator|(
name|ApplicationIdPBImpl
operator|)
name|appId1
operator|)
operator|.
name|getProto
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setUser
argument_list|(
literal|"user1"
argument_list|)
expr_stmt|;
name|ContainerManagerApplicationProto
name|appProto1
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|storeApplication
argument_list|(
name|appId1
argument_list|,
name|appProto1
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|state
operator|=
name|stateStore
operator|.
name|loadApplicationsState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|state
operator|.
name|getApplications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appProto1
argument_list|,
name|state
operator|.
name|getApplications
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// add a new app
specifier|final
name|ApplicationId
name|appId2
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|builder
operator|=
name|ContainerManagerApplicationProto
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setId
argument_list|(
operator|(
operator|(
name|ApplicationIdPBImpl
operator|)
name|appId2
operator|)
operator|.
name|getProto
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setUser
argument_list|(
literal|"user2"
argument_list|)
expr_stmt|;
name|ContainerManagerApplicationProto
name|appProto2
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|storeApplication
argument_list|(
name|appId2
argument_list|,
name|appProto2
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|state
operator|=
name|stateStore
operator|.
name|loadApplicationsState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|state
operator|.
name|getApplications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getApplications
argument_list|()
operator|.
name|contains
argument_list|(
name|appProto1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getApplications
argument_list|()
operator|.
name|contains
argument_list|(
name|appProto2
argument_list|)
argument_list|)
expr_stmt|;
comment|// test removing an application
name|stateStore
operator|.
name|removeApplication
argument_list|(
name|appId2
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|state
operator|=
name|stateStore
operator|.
name|loadApplicationsState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|state
operator|.
name|getApplications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appProto1
argument_list|,
name|state
operator|.
name|getApplications
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerStorage ()
specifier|public
name|void
name|testContainerStorage
parameter_list|()
throws|throws
name|IOException
block|{
comment|// test empty when no state
name|List
argument_list|<
name|RecoveredContainerState
argument_list|>
name|recoveredContainers
init|=
name|stateStore
operator|.
name|loadContainersState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|recoveredContainers
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// create a container request
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|StartContainerRequest
name|containerReq
init|=
name|createContainerRequest
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
comment|// store a container and verify recovered
name|stateStore
operator|.
name|storeContainer
argument_list|(
name|containerId
argument_list|,
literal|0
argument_list|,
name|containerReq
argument_list|)
expr_stmt|;
comment|// verify the container version key is not stored for new containers
name|DB
name|db
init|=
name|stateStore
operator|.
name|getDB
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
literal|"version key present for new container"
argument_list|,
name|db
operator|.
name|get
argument_list|(
name|bytes
argument_list|(
name|stateStore
operator|.
name|getContainerVersionKey
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|recoveredContainers
operator|=
name|stateStore
operator|.
name|loadContainersState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|recoveredContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RecoveredContainerState
name|rcs
init|=
name|recoveredContainers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rcs
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RecoveredContainerStatus
operator|.
name|REQUESTED
argument_list|,
name|rcs
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerExitStatus
operator|.
name|INVALID
argument_list|,
name|rcs
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rcs
operator|.
name|getKilled
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|containerReq
argument_list|,
name|rcs
operator|.
name|getStartRequest
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rcs
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// store a new container record without StartContainerRequest
name|ContainerId
name|containerId1
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|storeContainerLaunched
argument_list|(
name|containerId1
argument_list|)
expr_stmt|;
name|recoveredContainers
operator|=
name|stateStore
operator|.
name|loadContainersState
argument_list|()
expr_stmt|;
comment|// check whether the new container record is discarded
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|recoveredContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// queue the container, and verify recovered
name|stateStore
operator|.
name|storeContainerQueued
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|recoveredContainers
operator|=
name|stateStore
operator|.
name|loadContainersState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|recoveredContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rcs
operator|=
name|recoveredContainers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RecoveredContainerStatus
operator|.
name|QUEUED
argument_list|,
name|rcs
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerExitStatus
operator|.
name|INVALID
argument_list|,
name|rcs
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rcs
operator|.
name|getKilled
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|containerReq
argument_list|,
name|rcs
operator|.
name|getStartRequest
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rcs
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// launch the container, add some diagnostics, and verify recovered
name|StringBuilder
name|diags
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|storeContainerLaunched
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|diags
operator|.
name|append
argument_list|(
literal|"some diags for container"
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|storeContainerDiagnostics
argument_list|(
name|containerId
argument_list|,
name|diags
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|recoveredContainers
operator|=
name|stateStore
operator|.
name|loadContainersState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|recoveredContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rcs
operator|=
name|recoveredContainers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RecoveredContainerStatus
operator|.
name|LAUNCHED
argument_list|,
name|rcs
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerExitStatus
operator|.
name|INVALID
argument_list|,
name|rcs
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rcs
operator|.
name|getKilled
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|containerReq
argument_list|,
name|rcs
operator|.
name|getStartRequest
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|diags
operator|.
name|toString
argument_list|()
argument_list|,
name|rcs
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
comment|// increase the container size, and verify recovered
name|stateStore
operator|.
name|storeContainerResourceChanged
argument_list|(
name|containerId
argument_list|,
literal|2
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2468
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|recoveredContainers
operator|=
name|stateStore
operator|.
name|loadContainersState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|recoveredContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rcs
operator|=
name|recoveredContainers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rcs
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RecoveredContainerStatus
operator|.
name|LAUNCHED
argument_list|,
name|rcs
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerExitStatus
operator|.
name|INVALID
argument_list|,
name|rcs
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rcs
operator|.
name|getKilled
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2468
argument_list|,
literal|4
argument_list|)
argument_list|,
name|rcs
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
comment|// mark the container killed, add some more diags, and verify recovered
name|diags
operator|.
name|append
argument_list|(
literal|"some more diags for container"
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|storeContainerDiagnostics
argument_list|(
name|containerId
argument_list|,
name|diags
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|storeContainerKilled
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|recoveredContainers
operator|=
name|stateStore
operator|.
name|loadContainersState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|recoveredContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rcs
operator|=
name|recoveredContainers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RecoveredContainerStatus
operator|.
name|LAUNCHED
argument_list|,
name|rcs
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerExitStatus
operator|.
name|INVALID
argument_list|,
name|rcs
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rcs
operator|.
name|getKilled
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|containerReq
argument_list|,
name|rcs
operator|.
name|getStartRequest
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|diags
operator|.
name|toString
argument_list|()
argument_list|,
name|rcs
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
comment|// add yet more diags, mark container completed, and verify recovered
name|diags
operator|.
name|append
argument_list|(
literal|"some final diags"
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|storeContainerDiagnostics
argument_list|(
name|containerId
argument_list|,
name|diags
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|storeContainerCompleted
argument_list|(
name|containerId
argument_list|,
literal|21
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|recoveredContainers
operator|=
name|stateStore
operator|.
name|loadContainersState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|recoveredContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rcs
operator|=
name|recoveredContainers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RecoveredContainerStatus
operator|.
name|COMPLETED
argument_list|,
name|rcs
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|21
argument_list|,
name|rcs
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rcs
operator|.
name|getKilled
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|containerReq
argument_list|,
name|rcs
operator|.
name|getStartRequest
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|diags
operator|.
name|toString
argument_list|()
argument_list|,
name|rcs
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
comment|// store remainingRetryAttempts, workDir and logDir
name|stateStore
operator|.
name|storeContainerRemainingRetryAttempts
argument_list|(
name|containerId
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|storeContainerWorkDir
argument_list|(
name|containerId
argument_list|,
literal|"/test/workdir"
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|storeContainerLogDir
argument_list|(
name|containerId
argument_list|,
literal|"/test/logdir"
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|recoveredContainers
operator|=
name|stateStore
operator|.
name|loadContainersState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|recoveredContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rcs
operator|=
name|recoveredContainers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|rcs
operator|.
name|getRemainingRetryAttempts
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/workdir"
argument_list|,
name|rcs
operator|.
name|getWorkDir
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/test/logdir"
argument_list|,
name|rcs
operator|.
name|getLogDir
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove the container and verify not recovered
name|stateStore
operator|.
name|removeContainer
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|recoveredContainers
operator|=
name|stateStore
operator|.
name|loadContainersState
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|recoveredContainers
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createContainerRequest ( ContainerId containerId)
specifier|private
name|StartContainerRequest
name|createContainerRequest
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|LocalResource
name|lrsrc
init|=
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|URL
operator|.
name|newInstance
argument_list|(
literal|"hdfs"
argument_list|,
literal|"somehost"
argument_list|,
literal|12345
argument_list|,
literal|"/some/path/to/rsrc"
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|,
literal|123L
argument_list|,
literal|1234567890L
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
literal|"rsrc"
argument_list|,
name|lrsrc
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
literal|"somevar"
argument_list|,
literal|"someval"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|containerCmds
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|containerCmds
operator|.
name|add
argument_list|(
literal|"somecmd"
argument_list|)
expr_stmt|;
name|containerCmds
operator|.
name|add
argument_list|(
literal|"somearg"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|serviceData
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
name|serviceData
operator|.
name|put
argument_list|(
literal|"someservice"
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x1
block|,
literal|0x2
block|,
literal|0x3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|ByteBuffer
name|containerTokens
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x7
block|,
literal|0x8
block|,
literal|0x9
block|,
literal|0xa
block|}
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|acls
operator|.
name|put
argument_list|(
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
literal|"viewuser"
argument_list|)
expr_stmt|;
name|acls
operator|.
name|put
argument_list|(
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
literal|"moduser"
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|clc
init|=
name|ContainerLaunchContext
operator|.
name|newInstance
argument_list|(
name|localResources
argument_list|,
name|env
argument_list|,
name|containerCmds
argument_list|,
name|serviceData
argument_list|,
name|containerTokens
argument_list|,
name|acls
argument_list|)
decl_stmt|;
name|Resource
name|containerRsrc
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1357
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ContainerTokenIdentifier
name|containerTokenId
init|=
operator|new
name|ContainerTokenIdentifier
argument_list|(
name|containerId
argument_list|,
literal|"host"
argument_list|,
literal|"user"
argument_list|,
name|containerRsrc
argument_list|,
literal|9876543210L
argument_list|,
literal|42
argument_list|,
literal|2468
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|7
argument_list|)
argument_list|,
literal|13579
argument_list|)
decl_stmt|;
name|Token
name|containerToken
init|=
name|Token
operator|.
name|newInstance
argument_list|(
name|containerTokenId
operator|.
name|getBytes
argument_list|()
argument_list|,
name|ContainerTokenIdentifier
operator|.
name|KIND
operator|.
name|toString
argument_list|()
argument_list|,
literal|"password"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"tokenservice"
argument_list|)
decl_stmt|;
return|return
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|clc
argument_list|,
name|containerToken
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testStartResourceLocalization ()
specifier|public
name|void
name|testStartResourceLocalization
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|user
init|=
literal|"somebody"
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// start a local resource for an application
name|Path
name|appRsrcPath
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://some/app/resource"
argument_list|)
decl_stmt|;
name|LocalResourcePBImpl
name|rsrcPb
init|=
operator|(
name|LocalResourcePBImpl
operator|)
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|URL
operator|.
name|fromPath
argument_list|(
name|appRsrcPath
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|ARCHIVE
argument_list|,
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|,
literal|123L
argument_list|,
literal|456L
argument_list|)
decl_stmt|;
name|LocalResourceProto
name|appRsrcProto
init|=
name|rsrcPb
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|Path
name|appRsrcLocalPath
init|=
operator|new
name|Path
argument_list|(
literal|"/some/local/dir/for/apprsrc"
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|startResourceLocalization
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|appRsrcProto
argument_list|,
name|appRsrcLocalPath
argument_list|)
expr_stmt|;
comment|// restart and verify only app resource is marked in-progress
name|restartStateStore
argument_list|()
expr_stmt|;
name|RecoveredLocalizationState
name|state
init|=
name|stateStore
operator|.
name|loadLocalizationState
argument_list|()
decl_stmt|;
name|LocalResourceTrackerState
name|pubts
init|=
name|state
operator|.
name|getPublicTrackerState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|pubts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pubts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RecoveredUserResources
argument_list|>
name|userResources
init|=
name|state
operator|.
name|getUserResources
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|userResources
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RecoveredUserResources
name|rur
init|=
name|userResources
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|LocalResourceTrackerState
name|privts
init|=
name|rur
operator|.
name|getPrivateTrackerState
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|privts
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|privts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|privts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rur
operator|.
name|getAppTrackerStates
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LocalResourceTrackerState
name|appts
init|=
name|rur
operator|.
name|getAppTrackerStates
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|appts
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appRsrcLocalPath
argument_list|,
name|appts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|get
argument_list|(
name|appRsrcProto
argument_list|)
argument_list|)
expr_stmt|;
comment|// start some public and private resources
name|Path
name|pubRsrcPath1
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://some/public/resource1"
argument_list|)
decl_stmt|;
name|rsrcPb
operator|=
operator|(
name|LocalResourcePBImpl
operator|)
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|URL
operator|.
name|fromPath
argument_list|(
name|pubRsrcPath1
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
literal|789L
argument_list|,
literal|135L
argument_list|)
expr_stmt|;
name|LocalResourceProto
name|pubRsrcProto1
init|=
name|rsrcPb
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|Path
name|pubRsrcLocalPath1
init|=
operator|new
name|Path
argument_list|(
literal|"/some/local/dir/for/pubrsrc1"
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|startResourceLocalization
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|pubRsrcProto1
argument_list|,
name|pubRsrcLocalPath1
argument_list|)
expr_stmt|;
name|Path
name|pubRsrcPath2
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://some/public/resource2"
argument_list|)
decl_stmt|;
name|rsrcPb
operator|=
operator|(
name|LocalResourcePBImpl
operator|)
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|URL
operator|.
name|fromPath
argument_list|(
name|pubRsrcPath2
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
literal|789L
argument_list|,
literal|135L
argument_list|)
expr_stmt|;
name|LocalResourceProto
name|pubRsrcProto2
init|=
name|rsrcPb
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|Path
name|pubRsrcLocalPath2
init|=
operator|new
name|Path
argument_list|(
literal|"/some/local/dir/for/pubrsrc2"
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|startResourceLocalization
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|pubRsrcProto2
argument_list|,
name|pubRsrcLocalPath2
argument_list|)
expr_stmt|;
name|Path
name|privRsrcPath
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://some/private/resource"
argument_list|)
decl_stmt|;
name|rsrcPb
operator|=
operator|(
name|LocalResourcePBImpl
operator|)
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|URL
operator|.
name|fromPath
argument_list|(
name|privRsrcPath
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|PATTERN
argument_list|,
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
literal|789L
argument_list|,
literal|680L
argument_list|,
literal|"*pattern*"
argument_list|)
expr_stmt|;
name|LocalResourceProto
name|privRsrcProto
init|=
name|rsrcPb
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|Path
name|privRsrcLocalPath
init|=
operator|new
name|Path
argument_list|(
literal|"/some/local/dir/for/privrsrc"
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|startResourceLocalization
argument_list|(
name|user
argument_list|,
literal|null
argument_list|,
name|privRsrcProto
argument_list|,
name|privRsrcLocalPath
argument_list|)
expr_stmt|;
comment|// restart and verify resources are marked in-progress
name|restartStateStore
argument_list|()
expr_stmt|;
name|state
operator|=
name|stateStore
operator|.
name|loadLocalizationState
argument_list|()
expr_stmt|;
name|pubts
operator|=
name|state
operator|.
name|getPublicTrackerState
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|pubts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pubts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pubRsrcLocalPath1
argument_list|,
name|pubts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|get
argument_list|(
name|pubRsrcProto1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pubRsrcLocalPath2
argument_list|,
name|pubts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|get
argument_list|(
name|pubRsrcProto2
argument_list|)
argument_list|)
expr_stmt|;
name|userResources
operator|=
name|state
operator|.
name|getUserResources
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|userResources
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rur
operator|=
name|userResources
operator|.
name|get
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|privts
operator|=
name|rur
operator|.
name|getPrivateTrackerState
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|privts
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|privts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|privts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|privRsrcLocalPath
argument_list|,
name|privts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|get
argument_list|(
name|privRsrcProto
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rur
operator|.
name|getAppTrackerStates
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|appts
operator|=
name|rur
operator|.
name|getAppTrackerStates
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|appts
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appRsrcLocalPath
argument_list|,
name|appts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|get
argument_list|(
name|appRsrcProto
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFinishResourceLocalization ()
specifier|public
name|void
name|testFinishResourceLocalization
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|user
init|=
literal|"somebody"
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// start and finish a local resource for an application
name|Path
name|appRsrcPath
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://some/app/resource"
argument_list|)
decl_stmt|;
name|LocalResourcePBImpl
name|rsrcPb
init|=
operator|(
name|LocalResourcePBImpl
operator|)
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|URL
operator|.
name|fromPath
argument_list|(
name|appRsrcPath
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|ARCHIVE
argument_list|,
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|,
literal|123L
argument_list|,
literal|456L
argument_list|)
decl_stmt|;
name|LocalResourceProto
name|appRsrcProto
init|=
name|rsrcPb
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|Path
name|appRsrcLocalPath
init|=
operator|new
name|Path
argument_list|(
literal|"/some/local/dir/for/apprsrc"
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|startResourceLocalization
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|appRsrcProto
argument_list|,
name|appRsrcLocalPath
argument_list|)
expr_stmt|;
name|LocalizedResourceProto
name|appLocalizedProto
init|=
name|LocalizedResourceProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setResource
argument_list|(
name|appRsrcProto
argument_list|)
operator|.
name|setLocalPath
argument_list|(
name|appRsrcLocalPath
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setSize
argument_list|(
literal|1234567L
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|finishResourceLocalization
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|appLocalizedProto
argument_list|)
expr_stmt|;
comment|// restart and verify only app resource is completed
name|restartStateStore
argument_list|()
expr_stmt|;
name|RecoveredLocalizationState
name|state
init|=
name|stateStore
operator|.
name|loadLocalizationState
argument_list|()
decl_stmt|;
name|LocalResourceTrackerState
name|pubts
init|=
name|state
operator|.
name|getPublicTrackerState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|pubts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pubts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RecoveredUserResources
argument_list|>
name|userResources
init|=
name|state
operator|.
name|getUserResources
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|userResources
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RecoveredUserResources
name|rur
init|=
name|userResources
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|LocalResourceTrackerState
name|privts
init|=
name|rur
operator|.
name|getPrivateTrackerState
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|privts
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|privts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|privts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rur
operator|.
name|getAppTrackerStates
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LocalResourceTrackerState
name|appts
init|=
name|rur
operator|.
name|getAppTrackerStates
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|appts
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appLocalizedProto
argument_list|,
name|appts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// start some public and private resources
name|Path
name|pubRsrcPath1
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://some/public/resource1"
argument_list|)
decl_stmt|;
name|rsrcPb
operator|=
operator|(
name|LocalResourcePBImpl
operator|)
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|URL
operator|.
name|fromPath
argument_list|(
name|pubRsrcPath1
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
literal|789L
argument_list|,
literal|135L
argument_list|)
expr_stmt|;
name|LocalResourceProto
name|pubRsrcProto1
init|=
name|rsrcPb
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|Path
name|pubRsrcLocalPath1
init|=
operator|new
name|Path
argument_list|(
literal|"/some/local/dir/for/pubrsrc1"
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|startResourceLocalization
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|pubRsrcProto1
argument_list|,
name|pubRsrcLocalPath1
argument_list|)
expr_stmt|;
name|Path
name|pubRsrcPath2
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://some/public/resource2"
argument_list|)
decl_stmt|;
name|rsrcPb
operator|=
operator|(
name|LocalResourcePBImpl
operator|)
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|URL
operator|.
name|fromPath
argument_list|(
name|pubRsrcPath2
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
literal|789L
argument_list|,
literal|135L
argument_list|)
expr_stmt|;
name|LocalResourceProto
name|pubRsrcProto2
init|=
name|rsrcPb
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|Path
name|pubRsrcLocalPath2
init|=
operator|new
name|Path
argument_list|(
literal|"/some/local/dir/for/pubrsrc2"
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|startResourceLocalization
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|pubRsrcProto2
argument_list|,
name|pubRsrcLocalPath2
argument_list|)
expr_stmt|;
name|Path
name|privRsrcPath
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://some/private/resource"
argument_list|)
decl_stmt|;
name|rsrcPb
operator|=
operator|(
name|LocalResourcePBImpl
operator|)
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|URL
operator|.
name|fromPath
argument_list|(
name|privRsrcPath
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|PATTERN
argument_list|,
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
literal|789L
argument_list|,
literal|680L
argument_list|,
literal|"*pattern*"
argument_list|)
expr_stmt|;
name|LocalResourceProto
name|privRsrcProto
init|=
name|rsrcPb
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|Path
name|privRsrcLocalPath
init|=
operator|new
name|Path
argument_list|(
literal|"/some/local/dir/for/privrsrc"
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|startResourceLocalization
argument_list|(
name|user
argument_list|,
literal|null
argument_list|,
name|privRsrcProto
argument_list|,
name|privRsrcLocalPath
argument_list|)
expr_stmt|;
comment|// finish some of the resources
name|LocalizedResourceProto
name|pubLocalizedProto1
init|=
name|LocalizedResourceProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setResource
argument_list|(
name|pubRsrcProto1
argument_list|)
operator|.
name|setLocalPath
argument_list|(
name|pubRsrcLocalPath1
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setSize
argument_list|(
name|pubRsrcProto1
operator|.
name|getSize
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|finishResourceLocalization
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|pubLocalizedProto1
argument_list|)
expr_stmt|;
name|LocalizedResourceProto
name|privLocalizedProto
init|=
name|LocalizedResourceProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setResource
argument_list|(
name|privRsrcProto
argument_list|)
operator|.
name|setLocalPath
argument_list|(
name|privRsrcLocalPath
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setSize
argument_list|(
name|privRsrcProto
operator|.
name|getSize
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|finishResourceLocalization
argument_list|(
name|user
argument_list|,
literal|null
argument_list|,
name|privLocalizedProto
argument_list|)
expr_stmt|;
comment|// restart and verify state
name|restartStateStore
argument_list|()
expr_stmt|;
name|state
operator|=
name|stateStore
operator|.
name|loadLocalizationState
argument_list|()
expr_stmt|;
name|pubts
operator|=
name|state
operator|.
name|getPublicTrackerState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pubts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pubLocalizedProto1
argument_list|,
name|pubts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pubts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pubRsrcLocalPath2
argument_list|,
name|pubts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|get
argument_list|(
name|pubRsrcProto2
argument_list|)
argument_list|)
expr_stmt|;
name|userResources
operator|=
name|state
operator|.
name|getUserResources
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|userResources
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rur
operator|=
name|userResources
operator|.
name|get
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|privts
operator|=
name|rur
operator|.
name|getPrivateTrackerState
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|privts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|privts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|privLocalizedProto
argument_list|,
name|privts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|privts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rur
operator|.
name|getAppTrackerStates
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|appts
operator|=
name|rur
operator|.
name|getAppTrackerStates
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|appts
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appLocalizedProto
argument_list|,
name|appts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveLocalizedResource ()
specifier|public
name|void
name|testRemoveLocalizedResource
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|user
init|=
literal|"somebody"
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// go through the complete lifecycle for an application local resource
name|Path
name|appRsrcPath
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://some/app/resource"
argument_list|)
decl_stmt|;
name|LocalResourcePBImpl
name|rsrcPb
init|=
operator|(
name|LocalResourcePBImpl
operator|)
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|URL
operator|.
name|fromPath
argument_list|(
name|appRsrcPath
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|ARCHIVE
argument_list|,
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|,
literal|123L
argument_list|,
literal|456L
argument_list|)
decl_stmt|;
name|LocalResourceProto
name|appRsrcProto
init|=
name|rsrcPb
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|Path
name|appRsrcLocalPath
init|=
operator|new
name|Path
argument_list|(
literal|"/some/local/dir/for/apprsrc"
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|startResourceLocalization
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|appRsrcProto
argument_list|,
name|appRsrcLocalPath
argument_list|)
expr_stmt|;
name|LocalizedResourceProto
name|appLocalizedProto
init|=
name|LocalizedResourceProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setResource
argument_list|(
name|appRsrcProto
argument_list|)
operator|.
name|setLocalPath
argument_list|(
name|appRsrcLocalPath
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setSize
argument_list|(
literal|1234567L
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|finishResourceLocalization
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|appLocalizedProto
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|removeLocalizedResource
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|appRsrcLocalPath
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|verifyEmptyState
argument_list|()
expr_stmt|;
comment|// remove an app resource that didn't finish
name|stateStore
operator|.
name|startResourceLocalization
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|appRsrcProto
argument_list|,
name|appRsrcLocalPath
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|removeLocalizedResource
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|appRsrcLocalPath
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|verifyEmptyState
argument_list|()
expr_stmt|;
comment|// add public and private resources and remove some
name|Path
name|pubRsrcPath1
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://some/public/resource1"
argument_list|)
decl_stmt|;
name|rsrcPb
operator|=
operator|(
name|LocalResourcePBImpl
operator|)
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|URL
operator|.
name|fromPath
argument_list|(
name|pubRsrcPath1
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
literal|789L
argument_list|,
literal|135L
argument_list|)
expr_stmt|;
name|LocalResourceProto
name|pubRsrcProto1
init|=
name|rsrcPb
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|Path
name|pubRsrcLocalPath1
init|=
operator|new
name|Path
argument_list|(
literal|"/some/local/dir/for/pubrsrc1"
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|startResourceLocalization
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|pubRsrcProto1
argument_list|,
name|pubRsrcLocalPath1
argument_list|)
expr_stmt|;
name|LocalizedResourceProto
name|pubLocalizedProto1
init|=
name|LocalizedResourceProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setResource
argument_list|(
name|pubRsrcProto1
argument_list|)
operator|.
name|setLocalPath
argument_list|(
name|pubRsrcLocalPath1
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setSize
argument_list|(
literal|789L
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|finishResourceLocalization
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|pubLocalizedProto1
argument_list|)
expr_stmt|;
name|Path
name|pubRsrcPath2
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://some/public/resource2"
argument_list|)
decl_stmt|;
name|rsrcPb
operator|=
operator|(
name|LocalResourcePBImpl
operator|)
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|URL
operator|.
name|fromPath
argument_list|(
name|pubRsrcPath2
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
literal|789L
argument_list|,
literal|135L
argument_list|)
expr_stmt|;
name|LocalResourceProto
name|pubRsrcProto2
init|=
name|rsrcPb
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|Path
name|pubRsrcLocalPath2
init|=
operator|new
name|Path
argument_list|(
literal|"/some/local/dir/for/pubrsrc2"
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|startResourceLocalization
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|pubRsrcProto2
argument_list|,
name|pubRsrcLocalPath2
argument_list|)
expr_stmt|;
name|LocalizedResourceProto
name|pubLocalizedProto2
init|=
name|LocalizedResourceProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setResource
argument_list|(
name|pubRsrcProto2
argument_list|)
operator|.
name|setLocalPath
argument_list|(
name|pubRsrcLocalPath2
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setSize
argument_list|(
literal|7654321L
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|finishResourceLocalization
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|pubLocalizedProto2
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|removeLocalizedResource
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|pubRsrcLocalPath2
argument_list|)
expr_stmt|;
name|Path
name|privRsrcPath
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://some/private/resource"
argument_list|)
decl_stmt|;
name|rsrcPb
operator|=
operator|(
name|LocalResourcePBImpl
operator|)
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|URL
operator|.
name|fromPath
argument_list|(
name|privRsrcPath
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|PATTERN
argument_list|,
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
literal|789L
argument_list|,
literal|680L
argument_list|,
literal|"*pattern*"
argument_list|)
expr_stmt|;
name|LocalResourceProto
name|privRsrcProto
init|=
name|rsrcPb
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|Path
name|privRsrcLocalPath
init|=
operator|new
name|Path
argument_list|(
literal|"/some/local/dir/for/privrsrc"
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|startResourceLocalization
argument_list|(
name|user
argument_list|,
literal|null
argument_list|,
name|privRsrcProto
argument_list|,
name|privRsrcLocalPath
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|removeLocalizedResource
argument_list|(
name|user
argument_list|,
literal|null
argument_list|,
name|privRsrcLocalPath
argument_list|)
expr_stmt|;
comment|// restart and verify state
name|restartStateStore
argument_list|()
expr_stmt|;
name|RecoveredLocalizationState
name|state
init|=
name|stateStore
operator|.
name|loadLocalizationState
argument_list|()
decl_stmt|;
name|LocalResourceTrackerState
name|pubts
init|=
name|state
operator|.
name|getPublicTrackerState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|pubts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pubts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pubLocalizedProto1
argument_list|,
name|pubts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RecoveredUserResources
argument_list|>
name|userResources
init|=
name|state
operator|.
name|getUserResources
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|userResources
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeletionTaskStorage ()
specifier|public
name|void
name|testDeletionTaskStorage
parameter_list|()
throws|throws
name|IOException
block|{
comment|// test empty when no state
name|RecoveredDeletionServiceState
name|state
init|=
name|stateStore
operator|.
name|loadDeletionServiceState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getTasks
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// store a deletion task and verify recovered
name|DeletionServiceDeleteTaskProto
name|proto
init|=
name|DeletionServiceDeleteTaskProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setId
argument_list|(
literal|7
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"someuser"
argument_list|)
operator|.
name|setSubdir
argument_list|(
literal|"some/subdir"
argument_list|)
operator|.
name|addBasedirs
argument_list|(
literal|"some/dir/path"
argument_list|)
operator|.
name|addBasedirs
argument_list|(
literal|"some/other/dir/path"
argument_list|)
operator|.
name|setDeletionTime
argument_list|(
literal|123456L
argument_list|)
operator|.
name|addSuccessorIds
argument_list|(
literal|8
argument_list|)
operator|.
name|addSuccessorIds
argument_list|(
literal|9
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|storeDeletionTask
argument_list|(
name|proto
operator|.
name|getId
argument_list|()
argument_list|,
name|proto
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|state
operator|=
name|stateStore
operator|.
name|loadDeletionServiceState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|state
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|proto
argument_list|,
name|state
operator|.
name|getTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// store another deletion task
name|DeletionServiceDeleteTaskProto
name|proto2
init|=
name|DeletionServiceDeleteTaskProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setId
argument_list|(
literal|8
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"user2"
argument_list|)
operator|.
name|setSubdir
argument_list|(
literal|"subdir2"
argument_list|)
operator|.
name|setDeletionTime
argument_list|(
literal|789L
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|storeDeletionTask
argument_list|(
name|proto2
operator|.
name|getId
argument_list|()
argument_list|,
name|proto2
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|state
operator|=
name|stateStore
operator|.
name|loadDeletionServiceState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|state
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getTasks
argument_list|()
operator|.
name|contains
argument_list|(
name|proto
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getTasks
argument_list|()
operator|.
name|contains
argument_list|(
name|proto2
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete a task and verify gone after recovery
name|stateStore
operator|.
name|removeDeletionTask
argument_list|(
name|proto2
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|state
operator|=
name|stateStore
operator|.
name|loadDeletionServiceState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|state
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|proto
argument_list|,
name|state
operator|.
name|getTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete the last task and verify none left
name|stateStore
operator|.
name|removeDeletionTask
argument_list|(
name|proto
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|state
operator|=
name|stateStore
operator|.
name|loadDeletionServiceState
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getTasks
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNMTokenStorage ()
specifier|public
name|void
name|testNMTokenStorage
parameter_list|()
throws|throws
name|IOException
block|{
comment|// test empty when no state
name|RecoveredNMTokensState
name|state
init|=
name|stateStore
operator|.
name|loadNMTokensState
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|state
operator|.
name|getCurrentMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|state
operator|.
name|getPreviousMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getApplicationMasterKeys
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// store a master key and verify recovered
name|NMTokenSecretManagerForTest
name|secretMgr
init|=
operator|new
name|NMTokenSecretManagerForTest
argument_list|()
decl_stmt|;
name|MasterKey
name|currentKey
init|=
name|secretMgr
operator|.
name|generateKey
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|storeNMTokenCurrentMasterKey
argument_list|(
name|currentKey
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|state
operator|=
name|stateStore
operator|.
name|loadNMTokensState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|currentKey
argument_list|,
name|state
operator|.
name|getCurrentMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|state
operator|.
name|getPreviousMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getApplicationMasterKeys
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// store a previous key and verify recovered
name|MasterKey
name|prevKey
init|=
name|secretMgr
operator|.
name|generateKey
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|storeNMTokenPreviousMasterKey
argument_list|(
name|prevKey
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|state
operator|=
name|stateStore
operator|.
name|loadNMTokensState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|currentKey
argument_list|,
name|state
operator|.
name|getCurrentMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|prevKey
argument_list|,
name|state
operator|.
name|getPreviousMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getApplicationMasterKeys
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// store a few application keys and verify recovered
name|ApplicationAttemptId
name|attempt1
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|MasterKey
name|attemptKey1
init|=
name|secretMgr
operator|.
name|generateKey
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|storeNMTokenApplicationMasterKey
argument_list|(
name|attempt1
argument_list|,
name|attemptKey1
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attempt2
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|MasterKey
name|attemptKey2
init|=
name|secretMgr
operator|.
name|generateKey
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|storeNMTokenApplicationMasterKey
argument_list|(
name|attempt2
argument_list|,
name|attemptKey2
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|state
operator|=
name|stateStore
operator|.
name|loadNMTokensState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|currentKey
argument_list|,
name|state
operator|.
name|getCurrentMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|prevKey
argument_list|,
name|state
operator|.
name|getPreviousMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|MasterKey
argument_list|>
name|loadedAppKeys
init|=
name|state
operator|.
name|getApplicationMasterKeys
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|loadedAppKeys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|attemptKey1
argument_list|,
name|loadedAppKeys
operator|.
name|get
argument_list|(
name|attempt1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|attemptKey2
argument_list|,
name|loadedAppKeys
operator|.
name|get
argument_list|(
name|attempt2
argument_list|)
argument_list|)
expr_stmt|;
comment|// add/update/remove keys and verify recovered
name|ApplicationAttemptId
name|attempt3
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|MasterKey
name|attemptKey3
init|=
name|secretMgr
operator|.
name|generateKey
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|storeNMTokenApplicationMasterKey
argument_list|(
name|attempt3
argument_list|,
name|attemptKey3
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|removeNMTokenApplicationMasterKey
argument_list|(
name|attempt1
argument_list|)
expr_stmt|;
name|attemptKey2
operator|=
name|prevKey
expr_stmt|;
name|stateStore
operator|.
name|storeNMTokenApplicationMasterKey
argument_list|(
name|attempt2
argument_list|,
name|attemptKey2
argument_list|)
expr_stmt|;
name|prevKey
operator|=
name|currentKey
expr_stmt|;
name|stateStore
operator|.
name|storeNMTokenPreviousMasterKey
argument_list|(
name|prevKey
argument_list|)
expr_stmt|;
name|currentKey
operator|=
name|secretMgr
operator|.
name|generateKey
argument_list|()
expr_stmt|;
name|stateStore
operator|.
name|storeNMTokenCurrentMasterKey
argument_list|(
name|currentKey
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|state
operator|=
name|stateStore
operator|.
name|loadNMTokensState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|currentKey
argument_list|,
name|state
operator|.
name|getCurrentMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|prevKey
argument_list|,
name|state
operator|.
name|getPreviousMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|loadedAppKeys
operator|=
name|state
operator|.
name|getApplicationMasterKeys
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|loadedAppKeys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|loadedAppKeys
operator|.
name|get
argument_list|(
name|attempt1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|attemptKey2
argument_list|,
name|loadedAppKeys
operator|.
name|get
argument_list|(
name|attempt2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|attemptKey3
argument_list|,
name|loadedAppKeys
operator|.
name|get
argument_list|(
name|attempt3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerTokenStorage ()
specifier|public
name|void
name|testContainerTokenStorage
parameter_list|()
throws|throws
name|IOException
block|{
comment|// test empty when no state
name|RecoveredContainerTokensState
name|state
init|=
name|stateStore
operator|.
name|loadContainerTokensState
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|state
operator|.
name|getCurrentMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|state
operator|.
name|getPreviousMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getActiveTokens
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// store a master key and verify recovered
name|ContainerTokenKeyGeneratorForTest
name|keygen
init|=
operator|new
name|ContainerTokenKeyGeneratorForTest
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|MasterKey
name|currentKey
init|=
name|keygen
operator|.
name|generateKey
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|storeContainerTokenCurrentMasterKey
argument_list|(
name|currentKey
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|state
operator|=
name|stateStore
operator|.
name|loadContainerTokensState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|currentKey
argument_list|,
name|state
operator|.
name|getCurrentMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|state
operator|.
name|getPreviousMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getActiveTokens
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// store a previous key and verify recovered
name|MasterKey
name|prevKey
init|=
name|keygen
operator|.
name|generateKey
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|storeContainerTokenPreviousMasterKey
argument_list|(
name|prevKey
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|state
operator|=
name|stateStore
operator|.
name|loadContainerTokensState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|currentKey
argument_list|,
name|state
operator|.
name|getCurrentMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|prevKey
argument_list|,
name|state
operator|.
name|getPreviousMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getActiveTokens
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// store a few container tokens and verify recovered
name|ContainerId
name|cid1
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Long
name|expTime1
init|=
literal|1234567890L
decl_stmt|;
name|ContainerId
name|cid2
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Long
name|expTime2
init|=
literal|9876543210L
decl_stmt|;
name|stateStore
operator|.
name|storeContainerToken
argument_list|(
name|cid1
argument_list|,
name|expTime1
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|storeContainerToken
argument_list|(
name|cid2
argument_list|,
name|expTime2
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|state
operator|=
name|stateStore
operator|.
name|loadContainerTokensState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|currentKey
argument_list|,
name|state
operator|.
name|getCurrentMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|prevKey
argument_list|,
name|state
operator|.
name|getPreviousMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|Long
argument_list|>
name|loadedActiveTokens
init|=
name|state
operator|.
name|getActiveTokens
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|loadedActiveTokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expTime1
argument_list|,
name|loadedActiveTokens
operator|.
name|get
argument_list|(
name|cid1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expTime2
argument_list|,
name|loadedActiveTokens
operator|.
name|get
argument_list|(
name|cid2
argument_list|)
argument_list|)
expr_stmt|;
comment|// add/update/remove tokens and verify recovered
name|ContainerId
name|cid3
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Long
name|expTime3
init|=
literal|135798642L
decl_stmt|;
name|stateStore
operator|.
name|storeContainerToken
argument_list|(
name|cid3
argument_list|,
name|expTime3
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|removeContainerToken
argument_list|(
name|cid1
argument_list|)
expr_stmt|;
name|expTime2
operator|+=
literal|246897531L
expr_stmt|;
name|stateStore
operator|.
name|storeContainerToken
argument_list|(
name|cid2
argument_list|,
name|expTime2
argument_list|)
expr_stmt|;
name|prevKey
operator|=
name|currentKey
expr_stmt|;
name|stateStore
operator|.
name|storeContainerTokenPreviousMasterKey
argument_list|(
name|prevKey
argument_list|)
expr_stmt|;
name|currentKey
operator|=
name|keygen
operator|.
name|generateKey
argument_list|()
expr_stmt|;
name|stateStore
operator|.
name|storeContainerTokenCurrentMasterKey
argument_list|(
name|currentKey
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|state
operator|=
name|stateStore
operator|.
name|loadContainerTokensState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|currentKey
argument_list|,
name|state
operator|.
name|getCurrentMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|prevKey
argument_list|,
name|state
operator|.
name|getPreviousMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|loadedActiveTokens
operator|=
name|state
operator|.
name|getActiveTokens
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|loadedActiveTokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|loadedActiveTokens
operator|.
name|get
argument_list|(
name|cid1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expTime2
argument_list|,
name|loadedActiveTokens
operator|.
name|get
argument_list|(
name|cid2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expTime3
argument_list|,
name|loadedActiveTokens
operator|.
name|get
argument_list|(
name|cid3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLogDeleterStorage ()
specifier|public
name|void
name|testLogDeleterStorage
parameter_list|()
throws|throws
name|IOException
block|{
comment|// test empty when no state
name|RecoveredLogDeleterState
name|state
init|=
name|stateStore
operator|.
name|loadLogDeleterState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getLogDeleterMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// store log deleter state
specifier|final
name|ApplicationId
name|appId1
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|LogDeleterProto
name|proto1
init|=
name|LogDeleterProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUser
argument_list|(
literal|"user1"
argument_list|)
operator|.
name|setDeletionTime
argument_list|(
literal|1234
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|storeLogDeleter
argument_list|(
name|appId1
argument_list|,
name|proto1
argument_list|)
expr_stmt|;
comment|// restart state store and verify recovered
name|restartStateStore
argument_list|()
expr_stmt|;
name|state
operator|=
name|stateStore
operator|.
name|loadLogDeleterState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|state
operator|.
name|getLogDeleterMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|proto1
argument_list|,
name|state
operator|.
name|getLogDeleterMap
argument_list|()
operator|.
name|get
argument_list|(
name|appId1
argument_list|)
argument_list|)
expr_stmt|;
comment|// store another log deleter
specifier|final
name|ApplicationId
name|appId2
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|LogDeleterProto
name|proto2
init|=
name|LogDeleterProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUser
argument_list|(
literal|"user2"
argument_list|)
operator|.
name|setDeletionTime
argument_list|(
literal|5678
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|storeLogDeleter
argument_list|(
name|appId2
argument_list|,
name|proto2
argument_list|)
expr_stmt|;
comment|// restart state store and verify recovered
name|restartStateStore
argument_list|()
expr_stmt|;
name|state
operator|=
name|stateStore
operator|.
name|loadLogDeleterState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|state
operator|.
name|getLogDeleterMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|proto1
argument_list|,
name|state
operator|.
name|getLogDeleterMap
argument_list|()
operator|.
name|get
argument_list|(
name|appId1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|proto2
argument_list|,
name|state
operator|.
name|getLogDeleterMap
argument_list|()
operator|.
name|get
argument_list|(
name|appId2
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove a deleter and verify removed after restart and recovery
name|stateStore
operator|.
name|removeLogDeleter
argument_list|(
name|appId1
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|state
operator|=
name|stateStore
operator|.
name|loadLogDeleterState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|state
operator|.
name|getLogDeleterMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|proto2
argument_list|,
name|state
operator|.
name|getLogDeleterMap
argument_list|()
operator|.
name|get
argument_list|(
name|appId2
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove last deleter and verify empty after restart and recovery
name|stateStore
operator|.
name|removeLogDeleter
argument_list|(
name|appId2
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|state
operator|=
name|stateStore
operator|.
name|loadLogDeleterState
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getLogDeleterMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCompactionCycle ()
specifier|public
name|void
name|testCompactionCycle
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|DB
name|mockdb
init|=
name|mock
argument_list|(
name|DB
operator|.
name|class
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_COMPACTION_INTERVAL_SECS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|NMLeveldbStateStoreService
name|store
init|=
operator|new
name|NMLeveldbStateStoreService
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|checkVersion
parameter_list|()
block|{}
annotation|@
name|Override
specifier|protected
name|DB
name|openDatabase
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|mockdb
return|;
block|}
block|}
decl_stmt|;
name|store
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|store
operator|.
name|start
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockdb
argument_list|,
name|timeout
argument_list|(
literal|10000
argument_list|)
argument_list|)
operator|.
name|compactRange
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|isNull
argument_list|()
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnexpectedKeyDoesntThrowException ()
specifier|public
name|void
name|testUnexpectedKeyDoesntThrowException
parameter_list|()
throws|throws
name|IOException
block|{
comment|// test empty when no state
name|List
argument_list|<
name|RecoveredContainerState
argument_list|>
name|recoveredContainers
init|=
name|stateStore
operator|.
name|loadContainersState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|recoveredContainers
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// create a container request
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|LocalResource
name|lrsrc
init|=
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|URL
operator|.
name|newInstance
argument_list|(
literal|"hdfs"
argument_list|,
literal|"somehost"
argument_list|,
literal|12345
argument_list|,
literal|"/some/path/to/rsrc"
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|,
literal|123L
argument_list|,
literal|1234567890L
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
literal|"rsrc"
argument_list|,
name|lrsrc
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
literal|"somevar"
argument_list|,
literal|"someval"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|containerCmds
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|containerCmds
operator|.
name|add
argument_list|(
literal|"somecmd"
argument_list|)
expr_stmt|;
name|containerCmds
operator|.
name|add
argument_list|(
literal|"somearg"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|serviceData
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
name|serviceData
operator|.
name|put
argument_list|(
literal|"someservice"
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x1
block|,
literal|0x2
block|,
literal|0x3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|ByteBuffer
name|containerTokens
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x7
block|,
literal|0x8
block|,
literal|0x9
block|,
literal|0xa
block|}
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|acls
operator|.
name|put
argument_list|(
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
literal|"viewuser"
argument_list|)
expr_stmt|;
name|acls
operator|.
name|put
argument_list|(
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
literal|"moduser"
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|clc
init|=
name|ContainerLaunchContext
operator|.
name|newInstance
argument_list|(
name|localResources
argument_list|,
name|env
argument_list|,
name|containerCmds
argument_list|,
name|serviceData
argument_list|,
name|containerTokens
argument_list|,
name|acls
argument_list|)
decl_stmt|;
name|Resource
name|containerRsrc
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1357
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ContainerTokenIdentifier
name|containerTokenId
init|=
operator|new
name|ContainerTokenIdentifier
argument_list|(
name|containerId
argument_list|,
literal|"host"
argument_list|,
literal|"user"
argument_list|,
name|containerRsrc
argument_list|,
literal|9876543210L
argument_list|,
literal|42
argument_list|,
literal|2468
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|7
argument_list|)
argument_list|,
literal|13579
argument_list|)
decl_stmt|;
name|Token
name|containerToken
init|=
name|Token
operator|.
name|newInstance
argument_list|(
name|containerTokenId
operator|.
name|getBytes
argument_list|()
argument_list|,
name|ContainerTokenIdentifier
operator|.
name|KIND
operator|.
name|toString
argument_list|()
argument_list|,
literal|"password"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"tokenservice"
argument_list|)
decl_stmt|;
name|StartContainerRequest
name|containerReq
init|=
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|clc
argument_list|,
name|containerToken
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|storeContainer
argument_list|(
name|containerId
argument_list|,
literal|0
argument_list|,
name|containerReq
argument_list|)
expr_stmt|;
comment|// add a invalid key
name|byte
index|[]
name|invalidKey
init|=
operator|(
literal|"ContainerManager/containers/"
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
literal|"/invalidKey1234"
operator|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|getDB
argument_list|()
operator|.
name|put
argument_list|(
name|invalidKey
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|recoveredContainers
operator|=
name|stateStore
operator|.
name|loadContainersState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|recoveredContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RecoveredContainerState
name|rcs
init|=
name|recoveredContainers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|RecoveredContainerStatus
operator|.
name|REQUESTED
argument_list|,
name|rcs
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ContainerExitStatus
operator|.
name|INVALID
argument_list|,
name|rcs
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rcs
operator|.
name|getKilled
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|containerReq
argument_list|,
name|rcs
operator|.
name|getStartRequest
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rcs
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RecoveredContainerType
operator|.
name|KILL
argument_list|,
name|rcs
operator|.
name|getRecoveryType
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert unknown keys are cleaned up finally
name|assertNotNull
argument_list|(
name|stateStore
operator|.
name|getDB
argument_list|()
operator|.
name|get
argument_list|(
name|invalidKey
argument_list|)
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|removeContainer
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|stateStore
operator|.
name|getDB
argument_list|()
operator|.
name|get
argument_list|(
name|invalidKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|NMTokenSecretManagerForTest
specifier|private
specifier|static
class|class
name|NMTokenSecretManagerForTest
extends|extends
name|BaseNMTokenSecretManager
block|{
DECL|method|generateKey ()
specifier|public
name|MasterKey
name|generateKey
parameter_list|()
block|{
return|return
name|createNewMasterKey
argument_list|()
operator|.
name|getMasterKey
argument_list|()
return|;
block|}
block|}
DECL|class|ContainerTokenKeyGeneratorForTest
specifier|private
specifier|static
class|class
name|ContainerTokenKeyGeneratorForTest
extends|extends
name|BaseContainerTokenSecretManager
block|{
DECL|method|ContainerTokenKeyGeneratorForTest (Configuration conf)
specifier|public
name|ContainerTokenKeyGeneratorForTest
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|generateKey ()
specifier|public
name|MasterKey
name|generateKey
parameter_list|()
block|{
return|return
name|createNewMasterKey
argument_list|()
operator|.
name|getMasterKey
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

