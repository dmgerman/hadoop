begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.recovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|LocalResourcePBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|LocalResourceProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|DeletionServiceDeleteTaskProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|LocalizedResourceProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
operator|.
name|LocalResourceTrackerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
operator|.
name|RecoveredDeletionServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
operator|.
name|RecoveredLocalizationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
operator|.
name|RecoveredUserResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestNMLeveldbStateStoreService
specifier|public
class|class
name|TestNMLeveldbStateStoreService
block|{
DECL|field|TMP_DIR
specifier|private
specifier|static
specifier|final
name|File
name|TMP_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|)
argument_list|,
name|TestNMLeveldbStateStoreService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|conf
name|YarnConfiguration
name|conf
decl_stmt|;
DECL|field|stateStore
name|NMLeveldbStateStoreService
name|stateStore
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|TMP_DIR
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_DIR
argument_list|,
name|TMP_DIR
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|stateStore
operator|!=
literal|null
condition|)
block|{
name|stateStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|TMP_DIR
argument_list|)
expr_stmt|;
block|}
DECL|method|restartStateStore ()
specifier|private
name|void
name|restartStateStore
parameter_list|()
throws|throws
name|IOException
block|{
comment|// need to close so leveldb releases database lock
if|if
condition|(
name|stateStore
operator|!=
literal|null
condition|)
block|{
name|stateStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|stateStore
operator|=
operator|new
name|NMLeveldbStateStoreService
argument_list|()
expr_stmt|;
name|stateStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|verifyEmptyState ()
specifier|private
name|void
name|verifyEmptyState
parameter_list|()
throws|throws
name|IOException
block|{
name|RecoveredLocalizationState
name|state
init|=
name|stateStore
operator|.
name|loadLocalizationState
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|LocalResourceTrackerState
name|pubts
init|=
name|state
operator|.
name|getPublicTrackerState
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|pubts
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pubts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pubts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getUserResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptyState ()
specifier|public
name|void
name|testEmptyState
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|stateStore
operator|.
name|canRecover
argument_list|()
argument_list|)
expr_stmt|;
name|verifyEmptyState
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStartResourceLocalization ()
specifier|public
name|void
name|testStartResourceLocalization
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|user
init|=
literal|"somebody"
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// start a local resource for an application
name|Path
name|appRsrcPath
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://some/app/resource"
argument_list|)
decl_stmt|;
name|LocalResourcePBImpl
name|rsrcPb
init|=
operator|(
name|LocalResourcePBImpl
operator|)
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|ConverterUtils
operator|.
name|getYarnUrlFromPath
argument_list|(
name|appRsrcPath
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|ARCHIVE
argument_list|,
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|,
literal|123L
argument_list|,
literal|456L
argument_list|)
decl_stmt|;
name|LocalResourceProto
name|appRsrcProto
init|=
name|rsrcPb
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|Path
name|appRsrcLocalPath
init|=
operator|new
name|Path
argument_list|(
literal|"/some/local/dir/for/apprsrc"
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|startResourceLocalization
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|appRsrcProto
argument_list|,
name|appRsrcLocalPath
argument_list|)
expr_stmt|;
comment|// restart and verify only app resource is marked in-progress
name|restartStateStore
argument_list|()
expr_stmt|;
name|RecoveredLocalizationState
name|state
init|=
name|stateStore
operator|.
name|loadLocalizationState
argument_list|()
decl_stmt|;
name|LocalResourceTrackerState
name|pubts
init|=
name|state
operator|.
name|getPublicTrackerState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|pubts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pubts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RecoveredUserResources
argument_list|>
name|userResources
init|=
name|state
operator|.
name|getUserResources
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|userResources
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RecoveredUserResources
name|rur
init|=
name|userResources
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|LocalResourceTrackerState
name|privts
init|=
name|rur
operator|.
name|getPrivateTrackerState
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|privts
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|privts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|privts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rur
operator|.
name|getAppTrackerStates
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LocalResourceTrackerState
name|appts
init|=
name|rur
operator|.
name|getAppTrackerStates
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|appts
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appRsrcLocalPath
argument_list|,
name|appts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|get
argument_list|(
name|appRsrcProto
argument_list|)
argument_list|)
expr_stmt|;
comment|// start some public and private resources
name|Path
name|pubRsrcPath1
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://some/public/resource1"
argument_list|)
decl_stmt|;
name|rsrcPb
operator|=
operator|(
name|LocalResourcePBImpl
operator|)
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|ConverterUtils
operator|.
name|getYarnUrlFromPath
argument_list|(
name|pubRsrcPath1
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
literal|789L
argument_list|,
literal|135L
argument_list|)
expr_stmt|;
name|LocalResourceProto
name|pubRsrcProto1
init|=
name|rsrcPb
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|Path
name|pubRsrcLocalPath1
init|=
operator|new
name|Path
argument_list|(
literal|"/some/local/dir/for/pubrsrc1"
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|startResourceLocalization
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|pubRsrcProto1
argument_list|,
name|pubRsrcLocalPath1
argument_list|)
expr_stmt|;
name|Path
name|pubRsrcPath2
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://some/public/resource2"
argument_list|)
decl_stmt|;
name|rsrcPb
operator|=
operator|(
name|LocalResourcePBImpl
operator|)
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|ConverterUtils
operator|.
name|getYarnUrlFromPath
argument_list|(
name|pubRsrcPath2
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
literal|789L
argument_list|,
literal|135L
argument_list|)
expr_stmt|;
name|LocalResourceProto
name|pubRsrcProto2
init|=
name|rsrcPb
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|Path
name|pubRsrcLocalPath2
init|=
operator|new
name|Path
argument_list|(
literal|"/some/local/dir/for/pubrsrc2"
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|startResourceLocalization
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|pubRsrcProto2
argument_list|,
name|pubRsrcLocalPath2
argument_list|)
expr_stmt|;
name|Path
name|privRsrcPath
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://some/private/resource"
argument_list|)
decl_stmt|;
name|rsrcPb
operator|=
operator|(
name|LocalResourcePBImpl
operator|)
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|ConverterUtils
operator|.
name|getYarnUrlFromPath
argument_list|(
name|privRsrcPath
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|PATTERN
argument_list|,
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
literal|789L
argument_list|,
literal|680L
argument_list|,
literal|"*pattern*"
argument_list|)
expr_stmt|;
name|LocalResourceProto
name|privRsrcProto
init|=
name|rsrcPb
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|Path
name|privRsrcLocalPath
init|=
operator|new
name|Path
argument_list|(
literal|"/some/local/dir/for/privrsrc"
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|startResourceLocalization
argument_list|(
name|user
argument_list|,
literal|null
argument_list|,
name|privRsrcProto
argument_list|,
name|privRsrcLocalPath
argument_list|)
expr_stmt|;
comment|// restart and verify resources are marked in-progress
name|restartStateStore
argument_list|()
expr_stmt|;
name|state
operator|=
name|stateStore
operator|.
name|loadLocalizationState
argument_list|()
expr_stmt|;
name|pubts
operator|=
name|state
operator|.
name|getPublicTrackerState
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|pubts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pubts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pubRsrcLocalPath1
argument_list|,
name|pubts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|get
argument_list|(
name|pubRsrcProto1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pubRsrcLocalPath2
argument_list|,
name|pubts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|get
argument_list|(
name|pubRsrcProto2
argument_list|)
argument_list|)
expr_stmt|;
name|userResources
operator|=
name|state
operator|.
name|getUserResources
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|userResources
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rur
operator|=
name|userResources
operator|.
name|get
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|privts
operator|=
name|rur
operator|.
name|getPrivateTrackerState
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|privts
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|privts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|privts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|privRsrcLocalPath
argument_list|,
name|privts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|get
argument_list|(
name|privRsrcProto
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rur
operator|.
name|getAppTrackerStates
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|appts
operator|=
name|rur
operator|.
name|getAppTrackerStates
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|appts
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appRsrcLocalPath
argument_list|,
name|appts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|get
argument_list|(
name|appRsrcProto
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFinishResourceLocalization ()
specifier|public
name|void
name|testFinishResourceLocalization
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|user
init|=
literal|"somebody"
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// start and finish a local resource for an application
name|Path
name|appRsrcPath
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://some/app/resource"
argument_list|)
decl_stmt|;
name|LocalResourcePBImpl
name|rsrcPb
init|=
operator|(
name|LocalResourcePBImpl
operator|)
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|ConverterUtils
operator|.
name|getYarnUrlFromPath
argument_list|(
name|appRsrcPath
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|ARCHIVE
argument_list|,
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|,
literal|123L
argument_list|,
literal|456L
argument_list|)
decl_stmt|;
name|LocalResourceProto
name|appRsrcProto
init|=
name|rsrcPb
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|Path
name|appRsrcLocalPath
init|=
operator|new
name|Path
argument_list|(
literal|"/some/local/dir/for/apprsrc"
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|startResourceLocalization
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|appRsrcProto
argument_list|,
name|appRsrcLocalPath
argument_list|)
expr_stmt|;
name|LocalizedResourceProto
name|appLocalizedProto
init|=
name|LocalizedResourceProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setResource
argument_list|(
name|appRsrcProto
argument_list|)
operator|.
name|setLocalPath
argument_list|(
name|appRsrcLocalPath
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setSize
argument_list|(
literal|1234567L
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|finishResourceLocalization
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|appLocalizedProto
argument_list|)
expr_stmt|;
comment|// restart and verify only app resource is completed
name|restartStateStore
argument_list|()
expr_stmt|;
name|RecoveredLocalizationState
name|state
init|=
name|stateStore
operator|.
name|loadLocalizationState
argument_list|()
decl_stmt|;
name|LocalResourceTrackerState
name|pubts
init|=
name|state
operator|.
name|getPublicTrackerState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|pubts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pubts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RecoveredUserResources
argument_list|>
name|userResources
init|=
name|state
operator|.
name|getUserResources
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|userResources
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RecoveredUserResources
name|rur
init|=
name|userResources
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|LocalResourceTrackerState
name|privts
init|=
name|rur
operator|.
name|getPrivateTrackerState
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|privts
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|privts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|privts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rur
operator|.
name|getAppTrackerStates
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LocalResourceTrackerState
name|appts
init|=
name|rur
operator|.
name|getAppTrackerStates
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|appts
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appLocalizedProto
argument_list|,
name|appts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// start some public and private resources
name|Path
name|pubRsrcPath1
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://some/public/resource1"
argument_list|)
decl_stmt|;
name|rsrcPb
operator|=
operator|(
name|LocalResourcePBImpl
operator|)
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|ConverterUtils
operator|.
name|getYarnUrlFromPath
argument_list|(
name|pubRsrcPath1
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
literal|789L
argument_list|,
literal|135L
argument_list|)
expr_stmt|;
name|LocalResourceProto
name|pubRsrcProto1
init|=
name|rsrcPb
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|Path
name|pubRsrcLocalPath1
init|=
operator|new
name|Path
argument_list|(
literal|"/some/local/dir/for/pubrsrc1"
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|startResourceLocalization
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|pubRsrcProto1
argument_list|,
name|pubRsrcLocalPath1
argument_list|)
expr_stmt|;
name|Path
name|pubRsrcPath2
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://some/public/resource2"
argument_list|)
decl_stmt|;
name|rsrcPb
operator|=
operator|(
name|LocalResourcePBImpl
operator|)
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|ConverterUtils
operator|.
name|getYarnUrlFromPath
argument_list|(
name|pubRsrcPath2
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
literal|789L
argument_list|,
literal|135L
argument_list|)
expr_stmt|;
name|LocalResourceProto
name|pubRsrcProto2
init|=
name|rsrcPb
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|Path
name|pubRsrcLocalPath2
init|=
operator|new
name|Path
argument_list|(
literal|"/some/local/dir/for/pubrsrc2"
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|startResourceLocalization
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|pubRsrcProto2
argument_list|,
name|pubRsrcLocalPath2
argument_list|)
expr_stmt|;
name|Path
name|privRsrcPath
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://some/private/resource"
argument_list|)
decl_stmt|;
name|rsrcPb
operator|=
operator|(
name|LocalResourcePBImpl
operator|)
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|ConverterUtils
operator|.
name|getYarnUrlFromPath
argument_list|(
name|privRsrcPath
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|PATTERN
argument_list|,
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
literal|789L
argument_list|,
literal|680L
argument_list|,
literal|"*pattern*"
argument_list|)
expr_stmt|;
name|LocalResourceProto
name|privRsrcProto
init|=
name|rsrcPb
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|Path
name|privRsrcLocalPath
init|=
operator|new
name|Path
argument_list|(
literal|"/some/local/dir/for/privrsrc"
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|startResourceLocalization
argument_list|(
name|user
argument_list|,
literal|null
argument_list|,
name|privRsrcProto
argument_list|,
name|privRsrcLocalPath
argument_list|)
expr_stmt|;
comment|// finish some of the resources
name|LocalizedResourceProto
name|pubLocalizedProto1
init|=
name|LocalizedResourceProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setResource
argument_list|(
name|pubRsrcProto1
argument_list|)
operator|.
name|setLocalPath
argument_list|(
name|pubRsrcLocalPath1
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setSize
argument_list|(
name|pubRsrcProto1
operator|.
name|getSize
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|finishResourceLocalization
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|pubLocalizedProto1
argument_list|)
expr_stmt|;
name|LocalizedResourceProto
name|privLocalizedProto
init|=
name|LocalizedResourceProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setResource
argument_list|(
name|privRsrcProto
argument_list|)
operator|.
name|setLocalPath
argument_list|(
name|privRsrcLocalPath
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setSize
argument_list|(
name|privRsrcProto
operator|.
name|getSize
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|finishResourceLocalization
argument_list|(
name|user
argument_list|,
literal|null
argument_list|,
name|privLocalizedProto
argument_list|)
expr_stmt|;
comment|// restart and verify state
name|restartStateStore
argument_list|()
expr_stmt|;
name|state
operator|=
name|stateStore
operator|.
name|loadLocalizationState
argument_list|()
expr_stmt|;
name|pubts
operator|=
name|state
operator|.
name|getPublicTrackerState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pubts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pubLocalizedProto1
argument_list|,
name|pubts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pubts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pubRsrcLocalPath2
argument_list|,
name|pubts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|get
argument_list|(
name|pubRsrcProto2
argument_list|)
argument_list|)
expr_stmt|;
name|userResources
operator|=
name|state
operator|.
name|getUserResources
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|userResources
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rur
operator|=
name|userResources
operator|.
name|get
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|privts
operator|=
name|rur
operator|.
name|getPrivateTrackerState
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|privts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|privts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|privLocalizedProto
argument_list|,
name|privts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|privts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rur
operator|.
name|getAppTrackerStates
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|appts
operator|=
name|rur
operator|.
name|getAppTrackerStates
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|appts
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appLocalizedProto
argument_list|,
name|appts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveLocalizedResource ()
specifier|public
name|void
name|testRemoveLocalizedResource
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|user
init|=
literal|"somebody"
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// go through the complete lifecycle for an application local resource
name|Path
name|appRsrcPath
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://some/app/resource"
argument_list|)
decl_stmt|;
name|LocalResourcePBImpl
name|rsrcPb
init|=
operator|(
name|LocalResourcePBImpl
operator|)
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|ConverterUtils
operator|.
name|getYarnUrlFromPath
argument_list|(
name|appRsrcPath
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|ARCHIVE
argument_list|,
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|,
literal|123L
argument_list|,
literal|456L
argument_list|)
decl_stmt|;
name|LocalResourceProto
name|appRsrcProto
init|=
name|rsrcPb
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|Path
name|appRsrcLocalPath
init|=
operator|new
name|Path
argument_list|(
literal|"/some/local/dir/for/apprsrc"
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|startResourceLocalization
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|appRsrcProto
argument_list|,
name|appRsrcLocalPath
argument_list|)
expr_stmt|;
name|LocalizedResourceProto
name|appLocalizedProto
init|=
name|LocalizedResourceProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setResource
argument_list|(
name|appRsrcProto
argument_list|)
operator|.
name|setLocalPath
argument_list|(
name|appRsrcLocalPath
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setSize
argument_list|(
literal|1234567L
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|finishResourceLocalization
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|appLocalizedProto
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|removeLocalizedResource
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|appRsrcLocalPath
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|verifyEmptyState
argument_list|()
expr_stmt|;
comment|// remove an app resource that didn't finish
name|stateStore
operator|.
name|startResourceLocalization
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|appRsrcProto
argument_list|,
name|appRsrcLocalPath
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|removeLocalizedResource
argument_list|(
name|user
argument_list|,
name|appId
argument_list|,
name|appRsrcLocalPath
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|verifyEmptyState
argument_list|()
expr_stmt|;
comment|// add public and private resources and remove some
name|Path
name|pubRsrcPath1
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://some/public/resource1"
argument_list|)
decl_stmt|;
name|rsrcPb
operator|=
operator|(
name|LocalResourcePBImpl
operator|)
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|ConverterUtils
operator|.
name|getYarnUrlFromPath
argument_list|(
name|pubRsrcPath1
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
literal|789L
argument_list|,
literal|135L
argument_list|)
expr_stmt|;
name|LocalResourceProto
name|pubRsrcProto1
init|=
name|rsrcPb
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|Path
name|pubRsrcLocalPath1
init|=
operator|new
name|Path
argument_list|(
literal|"/some/local/dir/for/pubrsrc1"
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|startResourceLocalization
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|pubRsrcProto1
argument_list|,
name|pubRsrcLocalPath1
argument_list|)
expr_stmt|;
name|LocalizedResourceProto
name|pubLocalizedProto1
init|=
name|LocalizedResourceProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setResource
argument_list|(
name|pubRsrcProto1
argument_list|)
operator|.
name|setLocalPath
argument_list|(
name|pubRsrcLocalPath1
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setSize
argument_list|(
literal|789L
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|finishResourceLocalization
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|pubLocalizedProto1
argument_list|)
expr_stmt|;
name|Path
name|pubRsrcPath2
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://some/public/resource2"
argument_list|)
decl_stmt|;
name|rsrcPb
operator|=
operator|(
name|LocalResourcePBImpl
operator|)
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|ConverterUtils
operator|.
name|getYarnUrlFromPath
argument_list|(
name|pubRsrcPath2
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
literal|789L
argument_list|,
literal|135L
argument_list|)
expr_stmt|;
name|LocalResourceProto
name|pubRsrcProto2
init|=
name|rsrcPb
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|Path
name|pubRsrcLocalPath2
init|=
operator|new
name|Path
argument_list|(
literal|"/some/local/dir/for/pubrsrc2"
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|startResourceLocalization
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|pubRsrcProto2
argument_list|,
name|pubRsrcLocalPath2
argument_list|)
expr_stmt|;
name|LocalizedResourceProto
name|pubLocalizedProto2
init|=
name|LocalizedResourceProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setResource
argument_list|(
name|pubRsrcProto2
argument_list|)
operator|.
name|setLocalPath
argument_list|(
name|pubRsrcLocalPath2
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setSize
argument_list|(
literal|7654321L
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|finishResourceLocalization
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|pubLocalizedProto2
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|removeLocalizedResource
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|pubRsrcLocalPath2
argument_list|)
expr_stmt|;
name|Path
name|privRsrcPath
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://some/private/resource"
argument_list|)
decl_stmt|;
name|rsrcPb
operator|=
operator|(
name|LocalResourcePBImpl
operator|)
name|LocalResource
operator|.
name|newInstance
argument_list|(
name|ConverterUtils
operator|.
name|getYarnUrlFromPath
argument_list|(
name|privRsrcPath
argument_list|)
argument_list|,
name|LocalResourceType
operator|.
name|PATTERN
argument_list|,
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
literal|789L
argument_list|,
literal|680L
argument_list|,
literal|"*pattern*"
argument_list|)
expr_stmt|;
name|LocalResourceProto
name|privRsrcProto
init|=
name|rsrcPb
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|Path
name|privRsrcLocalPath
init|=
operator|new
name|Path
argument_list|(
literal|"/some/local/dir/for/privrsrc"
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|startResourceLocalization
argument_list|(
name|user
argument_list|,
literal|null
argument_list|,
name|privRsrcProto
argument_list|,
name|privRsrcLocalPath
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|removeLocalizedResource
argument_list|(
name|user
argument_list|,
literal|null
argument_list|,
name|privRsrcLocalPath
argument_list|)
expr_stmt|;
comment|// restart and verify state
name|restartStateStore
argument_list|()
expr_stmt|;
name|RecoveredLocalizationState
name|state
init|=
name|stateStore
operator|.
name|loadLocalizationState
argument_list|()
decl_stmt|;
name|LocalResourceTrackerState
name|pubts
init|=
name|state
operator|.
name|getPublicTrackerState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|pubts
operator|.
name|getInProgressResources
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pubts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pubLocalizedProto1
argument_list|,
name|pubts
operator|.
name|getLocalizedResources
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RecoveredUserResources
argument_list|>
name|userResources
init|=
name|state
operator|.
name|getUserResources
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|userResources
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeletionTaskStorage ()
specifier|public
name|void
name|testDeletionTaskStorage
parameter_list|()
throws|throws
name|IOException
block|{
comment|// test empty when no state
name|RecoveredDeletionServiceState
name|state
init|=
name|stateStore
operator|.
name|loadDeletionServiceState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getTasks
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// store a deletion task and verify recovered
name|DeletionServiceDeleteTaskProto
name|proto
init|=
name|DeletionServiceDeleteTaskProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setId
argument_list|(
literal|7
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"someuser"
argument_list|)
operator|.
name|setSubdir
argument_list|(
literal|"some/subdir"
argument_list|)
operator|.
name|addBasedirs
argument_list|(
literal|"some/dir/path"
argument_list|)
operator|.
name|addBasedirs
argument_list|(
literal|"some/other/dir/path"
argument_list|)
operator|.
name|setDeletionTime
argument_list|(
literal|123456L
argument_list|)
operator|.
name|addSuccessorIds
argument_list|(
literal|8
argument_list|)
operator|.
name|addSuccessorIds
argument_list|(
literal|9
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|storeDeletionTask
argument_list|(
name|proto
operator|.
name|getId
argument_list|()
argument_list|,
name|proto
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|state
operator|=
name|stateStore
operator|.
name|loadDeletionServiceState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|state
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|proto
argument_list|,
name|state
operator|.
name|getTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// store another deletion task
name|DeletionServiceDeleteTaskProto
name|proto2
init|=
name|DeletionServiceDeleteTaskProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setId
argument_list|(
literal|8
argument_list|)
operator|.
name|setUser
argument_list|(
literal|"user2"
argument_list|)
operator|.
name|setSubdir
argument_list|(
literal|"subdir2"
argument_list|)
operator|.
name|setDeletionTime
argument_list|(
literal|789L
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|storeDeletionTask
argument_list|(
name|proto2
operator|.
name|getId
argument_list|()
argument_list|,
name|proto2
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|state
operator|=
name|stateStore
operator|.
name|loadDeletionServiceState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|state
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getTasks
argument_list|()
operator|.
name|contains
argument_list|(
name|proto
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getTasks
argument_list|()
operator|.
name|contains
argument_list|(
name|proto2
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete a task and verify gone after recovery
name|stateStore
operator|.
name|removeDeletionTask
argument_list|(
name|proto2
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|state
operator|=
name|stateStore
operator|.
name|loadDeletionServiceState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|state
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|proto
argument_list|,
name|state
operator|.
name|getTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete the last task and verify none left
name|stateStore
operator|.
name|removeDeletionTask
argument_list|(
name|proto
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|restartStateStore
argument_list|()
expr_stmt|;
name|state
operator|=
name|stateStore
operator|.
name|loadDeletionServiceState
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|getTasks
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

