begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.logaggregation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|logaggregation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LogAggregationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|AggregatedLogFormat
operator|.
name|LogKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|AggregatedLogFormat
operator|.
name|LogValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|filecontroller
operator|.
name|tfile
operator|.
name|LogAggregationTFileController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ContainerLogContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ContainerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DeletionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|LocalDirsHandlerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|deletion
operator|.
name|task
operator|.
name|FileDeletionTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMNullStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|security
operator|.
name|NMContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|security
operator|.
name|NMTokenSecretManagerInNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_comment
comment|/**  * Unit tests of AppLogAggregatorImpl class.  */
end_comment

begin_class
DECL|class|TestAppLogAggregatorImpl
specifier|public
class|class
name|TestAppLogAggregatorImpl
block|{
DECL|field|LOCAL_LOG_DIR
specifier|private
specifier|static
specifier|final
name|File
name|LOCAL_LOG_DIR
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|TestAppLogAggregatorImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-localLogDir"
argument_list|)
decl_stmt|;
DECL|field|REMOTE_LOG_FILE
specifier|private
specifier|static
specifier|final
name|File
name|REMOTE_LOG_FILE
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|TestAppLogAggregatorImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-remoteLogFile"
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOCAL_LOG_DIR
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|cleanDirectory
argument_list|(
name|LOCAL_LOG_DIR
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|REMOTE_LOG_FILE
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|cleanDirectory
argument_list|(
name|REMOTE_LOG_FILE
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
throws|throws
name|IOException
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|LOCAL_LOG_DIR
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|REMOTE_LOG_FILE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAggregatorWithRetentionPolicyDisabledShouldUploadAllFiles ()
specifier|public
name|void
name|testAggregatorWithRetentionPolicyDisabledShouldUploadAllFiles
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// create artificial log files
specifier|final
name|File
name|appLogDir
init|=
operator|new
name|File
argument_list|(
name|LOCAL_LOG_DIR
argument_list|,
name|applicationId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|File
name|containerLogDir
init|=
operator|new
name|File
argument_list|(
name|appLogDir
argument_list|,
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|containerLogDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|File
argument_list|>
name|logFiles
init|=
name|createContainerLogFiles
argument_list|(
name|containerLogDir
argument_list|,
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|long
name|logRetentionSecs
init|=
literal|10000
decl_stmt|;
specifier|final
name|long
name|recoveredLogInitedTime
init|=
operator|-
literal|1
decl_stmt|;
name|verifyLogAggregationWithExpectedFiles2DeleteAndUpload
argument_list|(
name|applicationId
argument_list|,
name|containerId
argument_list|,
name|logRetentionSecs
argument_list|,
name|recoveredLogInitedTime
argument_list|,
name|logFiles
argument_list|,
name|logFiles
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAggregatorWhenNoFileOlderThanRetentionPolicyShouldUploadAll ()
specifier|public
name|void
name|testAggregatorWhenNoFileOlderThanRetentionPolicyShouldUploadAll
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// create artificial log files
specifier|final
name|File
name|appLogDir
init|=
operator|new
name|File
argument_list|(
name|LOCAL_LOG_DIR
argument_list|,
name|applicationId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|File
name|containerLogDir
init|=
operator|new
name|File
argument_list|(
name|appLogDir
argument_list|,
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|containerLogDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|File
argument_list|>
name|logFiles
init|=
name|createContainerLogFiles
argument_list|(
name|containerLogDir
argument_list|,
literal|3
argument_list|)
decl_stmt|;
comment|// set log retention period to 1 week.
specifier|final
name|long
name|logRententionSec
init|=
literal|7
operator|*
literal|24
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
specifier|final
name|long
name|recoveredLogInitedTimeMillis
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|60
operator|*
literal|60
decl_stmt|;
name|verifyLogAggregationWithExpectedFiles2DeleteAndUpload
argument_list|(
name|applicationId
argument_list|,
name|containerId
argument_list|,
name|logRententionSec
argument_list|,
name|recoveredLogInitedTimeMillis
argument_list|,
name|logFiles
argument_list|,
name|logFiles
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAggregatorWhenAllFilesOlderThanRetentionShouldUploadNone ()
specifier|public
name|void
name|testAggregatorWhenAllFilesOlderThanRetentionShouldUploadNone
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// create artificial log files
specifier|final
name|File
name|appLogDir
init|=
operator|new
name|File
argument_list|(
name|LOCAL_LOG_DIR
argument_list|,
name|applicationId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|File
name|containerLogDir
init|=
operator|new
name|File
argument_list|(
name|appLogDir
argument_list|,
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|containerLogDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|File
argument_list|>
name|logFiles
init|=
name|createContainerLogFiles
argument_list|(
name|containerLogDir
argument_list|,
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|long
name|week
init|=
literal|7
operator|*
literal|24
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
specifier|final
name|long
name|recoveredLogInitedTimeMillis
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|2
operator|*
name|week
operator|*
literal|1000
decl_stmt|;
name|verifyLogAggregationWithExpectedFiles2DeleteAndUpload
argument_list|(
name|applicationId
argument_list|,
name|containerId
argument_list|,
name|week
argument_list|,
name|recoveredLogInitedTimeMillis
argument_list|,
name|logFiles
argument_list|,
operator|new
name|HashSet
argument_list|<
name|File
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create the given number of log files under the container log directory.    * @param containerLogDir the directory to create container log files    * @param numOfFiles  the number of log files to create    * @return the set of log files created    */
DECL|method|createContainerLogFiles (File containerLogDir, int numOfFiles)
specifier|private
specifier|static
name|Set
argument_list|<
name|File
argument_list|>
name|createContainerLogFiles
parameter_list|(
name|File
name|containerLogDir
parameter_list|,
name|int
name|numOfFiles
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
operator|(
name|numOfFiles
operator|>=
literal|0
operator|)
assert|;
assert|assert
operator|(
name|containerLogDir
operator|.
name|exists
argument_list|()
operator|)
assert|;
name|Set
argument_list|<
name|File
argument_list|>
name|containerLogFiles
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfFiles
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|File
name|logFile
init|=
operator|new
name|File
argument_list|(
name|containerLogDir
argument_list|,
literal|"logfile"
operator|+
name|i
argument_list|)
decl_stmt|;
name|logFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|containerLogFiles
operator|.
name|add
argument_list|(
name|logFile
argument_list|)
expr_stmt|;
block|}
return|return
name|containerLogFiles
return|;
block|}
comment|/**    * Verify if the application log aggregator, configured with given log    * retention period and the recovered log initialization time of    * the application, uploads and deletes the set of log files as expected.    * @param appId    application id    * @param containerId  container id    * @param logRetentionSecs log retention period    * @param recoveredLogInitedTimeMillis recovered log initialization time    * @param expectedFilesToDelete   the set of files expected to be deleted    * @param expectedFilesToUpload  the set of files expected to be uploaded.    */
DECL|method|verifyLogAggregationWithExpectedFiles2DeleteAndUpload ( ApplicationId appId, ContainerId containerId, long logRetentionSecs, long recoveredLogInitedTimeMillis, Set<File> expectedFilesToDelete, Set<File> expectedFilesToUpload)
specifier|public
name|void
name|verifyLogAggregationWithExpectedFiles2DeleteAndUpload
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|long
name|logRetentionSecs
parameter_list|,
name|long
name|recoveredLogInitedTimeMillis
parameter_list|,
name|Set
argument_list|<
name|File
argument_list|>
name|expectedFilesToDelete
parameter_list|,
name|Set
argument_list|<
name|File
argument_list|>
name|expectedFilesToUpload
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|filesExpected2Delete
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|expectedFilesToDelete
control|)
block|{
name|filesExpected2Delete
operator|.
name|add
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|filesExpected2Upload
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|expectedFilesToUpload
control|)
block|{
name|filesExpected2Upload
operator|.
name|add
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// deletion service with verification to check files to delete
name|DeletionService
name|deletionServiceWithExpectedFiles
init|=
name|createDeletionServiceWithExpectedFile2Delete
argument_list|(
name|filesExpected2Delete
argument_list|)
decl_stmt|;
specifier|final
name|YarnConfiguration
name|config
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_RETAIN_SECONDS
argument_list|,
name|logRetentionSecs
argument_list|)
expr_stmt|;
specifier|final
name|AppLogAggregatorInTest
name|appLogAggregator
init|=
name|createAppLogAggregator
argument_list|(
name|appId
argument_list|,
name|LOCAL_LOG_DIR
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|config
argument_list|,
name|recoveredLogInitedTimeMillis
argument_list|,
name|deletionServiceWithExpectedFiles
argument_list|)
decl_stmt|;
name|appLogAggregator
operator|.
name|startContainerLogAggregation
argument_list|(
operator|new
name|ContainerLogContext
argument_list|(
name|containerId
argument_list|,
name|ContainerType
operator|.
name|TASK
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// set app finished flag first
name|appLogAggregator
operator|.
name|finishLogAggregation
argument_list|()
expr_stmt|;
name|appLogAggregator
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// verify uploaded files
name|ArgumentCaptor
argument_list|<
name|LogValue
argument_list|>
name|logValCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|LogValue
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|appLogAggregator
operator|.
name|getLogAggregationFileController
argument_list|()
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|LogKey
operator|.
name|class
argument_list|)
argument_list|,
name|logValCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|filesUploaded
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|LogValue
name|logValue
init|=
name|logValCaptor
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|logValue
operator|.
name|getPendingLogFilesToUploadForThisContainer
argument_list|()
control|)
block|{
name|filesUploaded
operator|.
name|add
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|verifyFilesUploaded
argument_list|(
name|filesUploaded
argument_list|,
name|filesExpected2Upload
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyFilesUploaded (Set<String> filesUploaded, Set<String> filesExpected)
specifier|private
specifier|static
name|void
name|verifyFilesUploaded
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|filesUploaded
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|filesExpected
parameter_list|)
block|{
specifier|final
name|String
name|errMsgPrefix
init|=
literal|"The set of files uploaded are not the same "
operator|+
literal|"as expected"
decl_stmt|;
if|if
condition|(
name|filesUploaded
operator|.
name|size
argument_list|()
operator|!=
name|filesExpected
operator|.
name|size
argument_list|()
condition|)
block|{
name|fail
argument_list|(
name|errMsgPrefix
operator|+
literal|": actual size: "
operator|+
name|filesUploaded
operator|.
name|size
argument_list|()
operator|+
literal|" vs "
operator|+
literal|"expected size: "
operator|+
name|filesExpected
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|file
range|:
name|filesExpected
control|)
block|{
if|if
condition|(
operator|!
name|filesUploaded
operator|.
name|contains
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|fail
argument_list|(
name|errMsgPrefix
operator|+
literal|": expecting "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createAppLogAggregator ( ApplicationId applicationId, String rootLogDir, YarnConfiguration config, long recoveredLogInitedTimeMillis, DeletionService deletionServiceWithFilesToExpect)
specifier|private
specifier|static
name|AppLogAggregatorInTest
name|createAppLogAggregator
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|String
name|rootLogDir
parameter_list|,
name|YarnConfiguration
name|config
parameter_list|,
name|long
name|recoveredLogInitedTimeMillis
parameter_list|,
name|DeletionService
name|deletionServiceWithFilesToExpect
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Dispatcher
name|dispatcher
init|=
name|createNullDispatcher
argument_list|()
decl_stmt|;
specifier|final
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"localhost"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|String
name|userId
init|=
literal|"AppLogAggregatorTest"
decl_stmt|;
specifier|final
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|userId
argument_list|)
decl_stmt|;
specifier|final
name|LocalDirsHandlerService
name|dirsService
init|=
name|createLocalDirsHandlerService
argument_list|(
name|config
argument_list|,
name|rootLogDir
argument_list|)
decl_stmt|;
specifier|final
name|DeletionService
name|deletionService
init|=
name|deletionServiceWithFilesToExpect
decl_stmt|;
specifier|final
name|LogAggregationContext
name|logAggregationContext
init|=
literal|null
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|appAcls
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Context
name|context
init|=
name|createContext
argument_list|(
name|config
argument_list|)
decl_stmt|;
specifier|final
name|FileContext
name|fakeLfs
init|=
name|mock
argument_list|(
name|FileContext
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|remoteLogDirForApp
init|=
operator|new
name|Path
argument_list|(
name|REMOTE_LOG_FILE
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|LogAggregationTFileController
name|format
init|=
name|spy
argument_list|(
operator|new
name|LogAggregationTFileController
argument_list|()
argument_list|)
decl_stmt|;
name|format
operator|.
name|initialize
argument_list|(
name|config
argument_list|,
literal|"TFile"
argument_list|)
expr_stmt|;
return|return
operator|new
name|AppLogAggregatorInTest
argument_list|(
name|dispatcher
argument_list|,
name|deletionService
argument_list|,
name|config
argument_list|,
name|applicationId
argument_list|,
name|ugi
argument_list|,
name|nodeId
argument_list|,
name|dirsService
argument_list|,
name|remoteLogDirForApp
argument_list|,
name|appAcls
argument_list|,
name|logAggregationContext
argument_list|,
name|context
argument_list|,
name|fakeLfs
argument_list|,
name|recoveredLogInitedTimeMillis
argument_list|,
name|format
argument_list|)
return|;
block|}
comment|/**    * Create a deletionService that verifies the paths of container log files    * passed to the delete method of DeletionService by AppLogAggregatorImpl.    * This approach is taken due to lack of support of varargs captor in the    * current mockito version 1.8.5 (The support is added in 1.10.x).    **/
DECL|method|createDeletionServiceWithExpectedFile2Delete ( final Set<String> expectedPathsForDeletion)
specifier|private
specifier|static
name|DeletionService
name|createDeletionServiceWithExpectedFile2Delete
parameter_list|(
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|expectedPathsForDeletion
parameter_list|)
block|{
name|DeletionService
name|deletionServiceWithExpectedFiles
init|=
name|mock
argument_list|(
name|DeletionService
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// verify paths passed to first invocation of delete method against
comment|// expected paths
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocationOnMock
parameter_list|)
throws|throws
name|Throwable
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Object
index|[]
name|tasks
init|=
name|invocationOnMock
operator|.
name|getArguments
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tasks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|FileDeletionTask
name|task
init|=
operator|(
name|FileDeletionTask
operator|)
name|tasks
index|[
name|i
index|]
decl_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|task
operator|.
name|getBaseDirs
argument_list|()
control|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getRawPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|verifyFilesToDelete
argument_list|(
name|expectedPathsForDeletion
argument_list|,
name|paths
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|deletionServiceWithExpectedFiles
argument_list|)
operator|.
name|delete
argument_list|(
name|any
argument_list|(
name|FileDeletionTask
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|deletionServiceWithExpectedFiles
return|;
block|}
DECL|method|verifyFilesToDelete (Set<String> files2ToDelete, Set<String> filesExpected)
specifier|private
specifier|static
name|void
name|verifyFilesToDelete
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|files2ToDelete
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|filesExpected
parameter_list|)
block|{
specifier|final
name|String
name|errMsgPrefix
init|=
literal|"The set of paths for deletion are not the "
operator|+
literal|"same as expected"
decl_stmt|;
if|if
condition|(
name|files2ToDelete
operator|.
name|size
argument_list|()
operator|!=
name|filesExpected
operator|.
name|size
argument_list|()
condition|)
block|{
name|fail
argument_list|(
name|errMsgPrefix
operator|+
literal|": actual size: "
operator|+
name|files2ToDelete
operator|.
name|size
argument_list|()
operator|+
literal|" vs "
operator|+
literal|"expected size: "
operator|+
name|filesExpected
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|file
range|:
name|filesExpected
control|)
block|{
if|if
condition|(
operator|!
name|files2ToDelete
operator|.
name|contains
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|fail
argument_list|(
name|errMsgPrefix
operator|+
literal|": expecting "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createNullDispatcher ()
specifier|private
specifier|static
name|Dispatcher
name|createNullDispatcher
parameter_list|()
block|{
return|return
operator|new
name|Dispatcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|EventHandler
argument_list|<
name|Event
argument_list|>
name|getEventHandler
parameter_list|()
block|{
return|return
operator|new
name|EventHandler
argument_list|<
name|Event
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|register
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Enum
argument_list|>
name|eventType
parameter_list|,
name|EventHandler
name|handler
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
return|;
block|}
DECL|method|createLocalDirsHandlerService ( YarnConfiguration conf, final String rootLogDir)
specifier|private
specifier|static
name|LocalDirsHandlerService
name|createLocalDirsHandlerService
parameter_list|(
name|YarnConfiguration
name|conf
parameter_list|,
specifier|final
name|String
name|rootLogDir
parameter_list|)
block|{
name|LocalDirsHandlerService
name|dirsHandlerService
init|=
operator|new
name|LocalDirsHandlerService
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLogDirsForRead
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
block|{
name|add
parameter_list|(
name|rootLogDir
parameter_list|)
constructor_decl|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLogDirsForCleanup
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
block|{
name|add
parameter_list|(
name|rootLogDir
parameter_list|)
constructor_decl|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
name|dirsHandlerService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// appLogAggregator only calls LocalDirsHandlerServer for local directories
comment|// so it is ok to not start the service.
return|return
name|dirsHandlerService
return|;
block|}
DECL|method|createContext (YarnConfiguration conf)
specifier|private
specifier|static
name|Context
name|createContext
parameter_list|(
name|YarnConfiguration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|NodeManager
operator|.
name|NMContext
argument_list|(
operator|new
name|NMContainerTokenSecretManager
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|NMTokenSecretManagerInNM
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|new
name|ApplicationACLsManager
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|NMNullStateStoreService
argument_list|()
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
return|;
block|}
DECL|class|AppLogAggregatorInTest
specifier|private
specifier|static
specifier|final
class|class
name|AppLogAggregatorInTest
extends|extends
name|AppLogAggregatorImpl
block|{
DECL|field|deletionService
specifier|final
name|DeletionService
name|deletionService
decl_stmt|;
DECL|field|applicationId
specifier|final
name|ApplicationId
name|applicationId
decl_stmt|;
DECL|field|logValue
specifier|final
name|ArgumentCaptor
argument_list|<
name|LogValue
argument_list|>
name|logValue
decl_stmt|;
DECL|method|AppLogAggregatorInTest (Dispatcher dispatcher, DeletionService deletionService, Configuration conf, ApplicationId appId, UserGroupInformation ugi, NodeId nodeId, LocalDirsHandlerService dirsHandler, Path remoteNodeLogFileForApp, Map<ApplicationAccessType, String> appAcls, LogAggregationContext logAggregationContext, Context context, FileContext lfs, long recoveredLogInitedTime, LogAggregationTFileController format)
specifier|public
name|AppLogAggregatorInTest
parameter_list|(
name|Dispatcher
name|dispatcher
parameter_list|,
name|DeletionService
name|deletionService
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|LocalDirsHandlerService
name|dirsHandler
parameter_list|,
name|Path
name|remoteNodeLogFileForApp
parameter_list|,
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|appAcls
parameter_list|,
name|LogAggregationContext
name|logAggregationContext
parameter_list|,
name|Context
name|context
parameter_list|,
name|FileContext
name|lfs
parameter_list|,
name|long
name|recoveredLogInitedTime
parameter_list|,
name|LogAggregationTFileController
name|format
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|dispatcher
argument_list|,
name|deletionService
argument_list|,
name|conf
argument_list|,
name|appId
argument_list|,
name|ugi
argument_list|,
name|nodeId
argument_list|,
name|dirsHandler
argument_list|,
name|remoteNodeLogFileForApp
argument_list|,
name|appAcls
argument_list|,
name|logAggregationContext
argument_list|,
name|context
argument_list|,
name|lfs
argument_list|,
operator|-
literal|1
argument_list|,
name|recoveredLogInitedTime
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|this
operator|.
name|applicationId
operator|=
name|appId
expr_stmt|;
name|this
operator|.
name|deletionService
operator|=
name|deletionService
expr_stmt|;
name|this
operator|.
name|logValue
operator|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|LogValue
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

