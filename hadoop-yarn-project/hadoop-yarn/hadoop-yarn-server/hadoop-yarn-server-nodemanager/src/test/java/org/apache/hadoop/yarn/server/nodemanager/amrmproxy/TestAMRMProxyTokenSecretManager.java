begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.amrmproxy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|amrmproxy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMMemoryStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Unit test for AMRMProxyTokenSecretManager.  */
end_comment

begin_class
DECL|class|TestAMRMProxyTokenSecretManager
specifier|public
class|class
name|TestAMRMProxyTokenSecretManager
block|{
DECL|field|conf
specifier|private
name|YarnConfiguration
name|conf
decl_stmt|;
DECL|field|secretManager
specifier|private
name|AMRMProxyTokenSecretManager
name|secretManager
decl_stmt|;
DECL|field|stateStore
specifier|private
name|NMMemoryStateStoreService
name|stateStore
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|stateStore
operator|=
operator|new
name|NMMemoryStateStoreService
argument_list|()
expr_stmt|;
name|stateStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|start
argument_list|()
expr_stmt|;
name|secretManager
operator|=
operator|new
name|AMRMProxyTokenSecretManager
argument_list|(
name|stateStore
argument_list|)
expr_stmt|;
name|secretManager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|secretManager
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|breakdown ()
specifier|public
name|void
name|breakdown
parameter_list|()
block|{
if|if
condition|(
name|secretManager
operator|!=
literal|null
condition|)
block|{
name|secretManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|stateStore
operator|!=
literal|null
condition|)
block|{
name|stateStore
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNormalCase ()
specifier|public
name|void
name|testNormalCase
parameter_list|()
throws|throws
name|IOException
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|localToken
init|=
name|secretManager
operator|.
name|createAndGetAMRMToken
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
name|AMRMTokenIdentifier
name|identifier
init|=
name|secretManager
operator|.
name|createIdentifier
argument_list|()
decl_stmt|;
name|identifier
operator|.
name|readFields
argument_list|(
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|localToken
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|secretManager
operator|.
name|retrievePassword
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
name|secretManager
operator|.
name|applicationMasterFinished
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
try|try
block|{
name|secretManager
operator|.
name|retrievePassword
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expect InvalidToken exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidToken
name|e
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
DECL|method|testRecovery ()
specifier|public
name|void
name|testRecovery
parameter_list|()
throws|throws
name|IOException
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|localToken
init|=
name|secretManager
operator|.
name|createAndGetAMRMToken
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
name|AMRMTokenIdentifier
name|identifier
init|=
name|secretManager
operator|.
name|createIdentifier
argument_list|()
decl_stmt|;
name|identifier
operator|.
name|readFields
argument_list|(
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|localToken
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|secretManager
operator|.
name|retrievePassword
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
comment|// Generate next master key
name|secretManager
operator|.
name|rollMasterKey
argument_list|()
expr_stmt|;
comment|// Restart and recover
name|secretManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|secretManager
operator|=
operator|new
name|AMRMProxyTokenSecretManager
argument_list|(
name|stateStore
argument_list|)
expr_stmt|;
name|secretManager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|secretManager
operator|.
name|recover
argument_list|(
name|stateStore
operator|.
name|loadAMRMProxyState
argument_list|()
argument_list|)
expr_stmt|;
name|secretManager
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Recover the app
name|secretManager
operator|.
name|createAndGetAMRMToken
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
comment|// Current master key should be recovered, and thus pass here
name|secretManager
operator|.
name|retrievePassword
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
comment|// Roll key, current master key will be replaced
name|secretManager
operator|.
name|activateNextMasterKey
argument_list|()
expr_stmt|;
comment|// Restart and recover
name|secretManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|secretManager
operator|=
operator|new
name|AMRMProxyTokenSecretManager
argument_list|(
name|stateStore
argument_list|)
expr_stmt|;
name|secretManager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|secretManager
operator|.
name|recover
argument_list|(
name|stateStore
operator|.
name|loadAMRMProxyState
argument_list|()
argument_list|)
expr_stmt|;
name|secretManager
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Recover the app
name|secretManager
operator|.
name|createAndGetAMRMToken
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
try|try
block|{
name|secretManager
operator|.
name|retrievePassword
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expect InvalidToken exception because the "
operator|+
literal|"old master key should have expired"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidToken
name|e
parameter_list|)
block|{     }
block|}
block|}
end_class

end_unit

