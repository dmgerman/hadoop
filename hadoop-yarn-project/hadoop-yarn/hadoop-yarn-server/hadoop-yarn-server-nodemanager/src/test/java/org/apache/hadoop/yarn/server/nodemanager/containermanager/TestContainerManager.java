begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|timeout
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnsupportedFileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerStatusesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerStatusesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|IncreaseContainersResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|IncreaseContainersResourceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ResourceLocalizationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SignalContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StopContainersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StopContainersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|GetContainerStatusesRequestPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|StartContainersRequestPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|StopContainersRequestPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerRetryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerRetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|SerializedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|SignalContainerCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|NMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ResourceManagerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|CMgrCompletedAppsEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|CMgrDecreaseContainersResourceEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|CMgrSignalContainersEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
operator|.
name|Signal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DefaultContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DeletionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|TestAuxServices
operator|.
name|ServiceA
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
operator|.
name|ContainerLaunch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ContainerLocalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ResourceLocalizationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|executor
operator|.
name|ContainerSignalContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|TestContainerManager
specifier|public
class|class
name|TestContainerManager
extends|extends
name|BaseContainerManagerTest
block|{
DECL|method|TestContainerManager ()
specifier|public
name|TestContainerManager
parameter_list|()
throws|throws
name|UnsupportedFileSystemException
block|{
name|super
argument_list|()
expr_stmt|;
block|}
static|static
block|{
name|LOG
operator|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestContainerManager
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ContainerManagerImpl
DECL|method|createContainerManager (DeletionService delSrvc)
name|createContainerManager
parameter_list|(
name|DeletionService
name|delSrvc
parameter_list|)
block|{
return|return
operator|new
name|ContainerManagerImpl
argument_list|(
name|context
argument_list|,
name|exec
argument_list|,
name|delSrvc
argument_list|,
name|nodeStatusUpdater
argument_list|,
name|metrics
argument_list|,
name|dirsHandler
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|UserGroupInformation
name|getRemoteUgi
parameter_list|()
throws|throws
name|YarnException
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ugi
operator|.
name|addTokenIdentifier
argument_list|(
operator|new
name|NMTokenIdentifier
argument_list|(
name|appAttemptId
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|context
operator|.
name|getNMTokenSecretManager
argument_list|()
operator|.
name|getCurrentKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ugi
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testContainerManagerInitialization ()
specifier|public
name|void
name|testContainerManagerInitialization
parameter_list|()
throws|throws
name|IOException
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|InetAddress
name|localAddr
init|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
decl_stmt|;
name|String
name|fqdn
init|=
name|localAddr
operator|.
name|getCanonicalHostName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|localAddr
operator|.
name|getHostAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|fqdn
argument_list|)
condition|)
block|{
comment|// only check if fqdn is not same as ip
comment|// api returns ip in case of resolution failure
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fqdn
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Just do a query for a non-existing container.
name|boolean
name|throwsException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containerIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ContainerId
name|id
init|=
name|createContainerId
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|containerIds
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|GetContainerStatusesRequest
name|request
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|containerIds
argument_list|)
decl_stmt|;
name|GetContainerStatusesResponse
name|response
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
name|response
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|deSerialize
argument_list|()
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|throwsException
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|throwsException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerSetup ()
specifier|public
name|void
name|testContainerSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// ////// Create the resources for the container
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"dir"
argument_list|)
decl_stmt|;
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|PrintWriter
name|fileWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"Hello World!"
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// ////// Construct the Container-id
name|ContainerId
name|cId
init|=
name|createContainerId
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// ////// Construct the container-spec.
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|URL
name|resource_alpha
init|=
name|URL
operator|.
name|fromPath
argument_list|(
name|localFS
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|LocalResource
name|rsrc_alpha
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|rsrc_alpha
operator|.
name|setResource
argument_list|(
name|resource_alpha
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setVisibility
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setType
argument_list|(
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setTimestamp
argument_list|(
name|file
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|destinationFile
init|=
literal|"dest_file"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|destinationFile
argument_list|,
name|rsrc_alpha
argument_list|)
expr_stmt|;
name|containerLaunchContext
operator|.
name|setLocalResources
argument_list|(
name|localResources
argument_list|)
expr_stmt|;
name|StartContainerRequest
name|scRequest
init|=
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|cId
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|scRequest
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForContainerState
argument_list|(
name|containerManager
argument_list|,
name|cId
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|40
argument_list|)
expr_stmt|;
comment|// Now ascertain that the resources are localised correctly.
name|ApplicationId
name|appId
init|=
name|cId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|String
name|appIDStr
init|=
name|appId
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|containerIDStr
init|=
name|cId
operator|.
name|toString
argument_list|()
decl_stmt|;
name|File
name|userCacheDir
init|=
operator|new
name|File
argument_list|(
name|localDir
argument_list|,
name|ContainerLocalizer
operator|.
name|USERCACHE
argument_list|)
decl_stmt|;
name|File
name|userDir
init|=
operator|new
name|File
argument_list|(
name|userCacheDir
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|File
name|appCache
init|=
operator|new
name|File
argument_list|(
name|userDir
argument_list|,
name|ContainerLocalizer
operator|.
name|APPCACHE
argument_list|)
decl_stmt|;
name|File
name|appDir
init|=
operator|new
name|File
argument_list|(
name|appCache
argument_list|,
name|appIDStr
argument_list|)
decl_stmt|;
name|File
name|containerDir
init|=
operator|new
name|File
argument_list|(
name|appDir
argument_list|,
name|containerIDStr
argument_list|)
decl_stmt|;
name|File
name|targetFile
init|=
operator|new
name|File
argument_list|(
name|containerDir
argument_list|,
name|destinationFile
argument_list|)
decl_stmt|;
name|File
name|sysDir
init|=
operator|new
name|File
argument_list|(
name|localDir
argument_list|,
name|ResourceLocalizationService
operator|.
name|NM_PRIVATE_DIR
argument_list|)
decl_stmt|;
name|File
name|appSysDir
init|=
operator|new
name|File
argument_list|(
name|sysDir
argument_list|,
name|appIDStr
argument_list|)
decl_stmt|;
name|File
name|containerSysDir
init|=
operator|new
name|File
argument_list|(
name|appSysDir
argument_list|,
name|containerIDStr
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|f
range|:
operator|new
name|File
index|[]
block|{
name|localDir
block|,
name|sysDir
block|,
name|userCacheDir
block|,
name|appDir
block|,
name|appSysDir
block|,
name|containerDir
block|,
name|containerSysDir
block|}
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|f
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" doesn't exist!!"
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|f
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" is not a directory!!"
argument_list|,
name|f
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|targetFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" doesn't exist!!"
argument_list|,
name|targetFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now verify the contents of the file
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|targetFile
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Hello World!"
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//@Test
DECL|method|testContainerLaunchAndStop ()
specifier|public
name|void
name|testContainerLaunchAndStop
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnException
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|File
name|scriptFile
init|=
name|Shell
operator|.
name|appendScriptExtension
argument_list|(
name|tmpDir
argument_list|,
literal|"scriptFile"
argument_list|)
decl_stmt|;
name|PrintWriter
name|fileWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|scriptFile
argument_list|)
decl_stmt|;
name|File
name|processStartFile
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"start_file.txt"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
comment|// ////// Construct the Container-id
name|ContainerId
name|cId
init|=
name|createContainerId
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@echo Hello World!> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@echo "
operator|+
name|cId
operator|+
literal|">> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@ping -n 100 127.0.0.1>nul"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\numask 0"
argument_list|)
expr_stmt|;
comment|// So that start file is readable by the test
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\necho Hello World!> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\necho $$>> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\nexec sleep 100"
argument_list|)
expr_stmt|;
block|}
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|URL
name|resource_alpha
init|=
name|URL
operator|.
name|fromPath
argument_list|(
name|localFS
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|scriptFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|LocalResource
name|rsrc_alpha
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|rsrc_alpha
operator|.
name|setResource
argument_list|(
name|resource_alpha
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setVisibility
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setType
argument_list|(
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setTimestamp
argument_list|(
name|scriptFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|destinationFile
init|=
literal|"dest_file"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|destinationFile
argument_list|,
name|rsrc_alpha
argument_list|)
expr_stmt|;
name|containerLaunchContext
operator|.
name|setLocalResources
argument_list|(
name|localResources
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Shell
operator|.
name|getRunScriptCommand
argument_list|(
name|scriptFile
argument_list|)
argument_list|)
decl_stmt|;
name|containerLaunchContext
operator|.
name|setCommands
argument_list|(
name|commands
argument_list|)
expr_stmt|;
name|StartContainerRequest
name|scRequest
init|=
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|cId
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|scRequest
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|int
name|timeoutSecs
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|processStartFile
operator|.
name|exists
argument_list|()
operator|&&
name|timeoutSecs
operator|++
operator|<
literal|20
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for process start-file to be created"
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"ProcessStartFile doesn't exist!"
argument_list|,
name|processStartFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now verify the contents of the file
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|processStartFile
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Hello World!"
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get the pid of the process
name|String
name|pid
init|=
name|reader
operator|.
name|readLine
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// No more lines
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now test the stop functionality.
comment|// Assert that the process is alive
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Process is not alive!"
argument_list|,
name|DefaultContainerExecutor
operator|.
name|containerIsAlive
argument_list|(
name|pid
argument_list|)
argument_list|)
expr_stmt|;
comment|// Once more
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Process is not alive!"
argument_list|,
name|DefaultContainerExecutor
operator|.
name|containerIsAlive
argument_list|(
name|pid
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containerIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|containerIds
operator|.
name|add
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|StopContainersRequest
name|stopRequest
init|=
name|StopContainersRequest
operator|.
name|newInstance
argument_list|(
name|containerIds
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|stopContainers
argument_list|(
name|stopRequest
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForContainerState
argument_list|(
name|containerManager
argument_list|,
name|cId
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|GetContainerStatusesRequest
name|gcsRequest
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|containerIds
argument_list|)
decl_stmt|;
name|ContainerStatus
name|containerStatus
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|gcsRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|expectedExitCode
init|=
name|ContainerExitStatus
operator|.
name|KILLED_BY_APPMASTER
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedExitCode
argument_list|,
name|containerStatus
operator|.
name|getExitStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert that the process is not alive anymore
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Process is still alive!"
argument_list|,
name|DefaultContainerExecutor
operator|.
name|containerIsAlive
argument_list|(
name|pid
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerRestart ()
specifier|public
name|void
name|testContainerRestart
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnException
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// ////// Construct the Container-id
name|ContainerId
name|cId
init|=
name|createContainerId
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|File
name|oldStartFile
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"start_file_o.txt"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|String
name|pid
init|=
name|prepareInitialContainer
argument_list|(
name|cId
argument_list|,
name|oldStartFile
argument_list|)
decl_stmt|;
comment|// Test that the container can restart
comment|// Also, Since there was no rollback context present before the
comment|// restart, rollback should NOT be possible after the restart
name|doRestartTests
argument_list|(
name|cId
argument_list|,
name|oldStartFile
argument_list|,
literal|"Hello World!"
argument_list|,
name|pid
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|doRestartTests (ContainerId cId, File oldStartFile, String testString, String pid, boolean canRollback)
specifier|private
name|String
name|doRestartTests
parameter_list|(
name|ContainerId
name|cId
parameter_list|,
name|File
name|oldStartFile
parameter_list|,
name|String
name|testString
parameter_list|,
name|String
name|pid
parameter_list|,
name|boolean
name|canRollback
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|beforeRestart
init|=
name|metrics
operator|.
name|getRunningContainers
argument_list|()
decl_stmt|;
name|Container
name|container
init|=
name|containerManager
operator|.
name|getContext
argument_list|()
operator|.
name|getContainers
argument_list|()
operator|.
name|get
argument_list|(
name|cId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|container
operator|.
name|isReInitializing
argument_list|()
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|restartContainer
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|container
operator|.
name|isReInitializing
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait for original process to die and the new process to restart
name|int
name|timeoutSecs
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|DefaultContainerExecutor
operator|.
name|containerIsAlive
argument_list|(
name|pid
argument_list|)
operator|&&
operator|(
name|metrics
operator|.
name|getRunningContainers
argument_list|()
operator|==
name|beforeRestart
operator|)
operator|&&
name|container
operator|.
name|isReInitializing
argument_list|()
operator|&&
name|timeoutSecs
operator|++
operator|<
literal|20
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for Original process to die.."
operator|+
literal|"and new process to start!!"
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Old Process Still alive!!"
argument_list|,
name|DefaultContainerExecutor
operator|.
name|containerIsAlive
argument_list|(
name|pid
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|newPid
init|=
literal|null
decl_stmt|;
name|timeoutSecs
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|timeoutSecs
operator|++
operator|<
literal|20
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for New process file to be created!!"
argument_list|)
expr_stmt|;
comment|// Now verify the contents of the file
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|oldStartFile
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testString
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get the pid of the process
name|newPid
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|// No more lines
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|newPid
operator|.
name|equals
argument_list|(
name|pid
argument_list|)
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
comment|// Assert both pids are different
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|pid
argument_list|,
name|newPid
argument_list|)
expr_stmt|;
comment|// Container cannot rollback from a restart
name|Assert
operator|.
name|assertEquals
argument_list|(
name|canRollback
argument_list|,
name|container
operator|.
name|canRollback
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newPid
return|;
block|}
DECL|method|testContainerReInitSuccess (boolean autoCommit)
specifier|private
name|String
index|[]
name|testContainerReInitSuccess
parameter_list|(
name|boolean
name|autoCommit
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnException
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// ////// Construct the Container-id
name|ContainerId
name|cId
init|=
name|createContainerId
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|File
name|oldStartFile
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"start_file_o.txt"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|String
name|pid
init|=
name|prepareInitialContainer
argument_list|(
name|cId
argument_list|,
name|oldStartFile
argument_list|)
decl_stmt|;
name|File
name|newStartFile
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"start_file_n.txt"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|prepareContainerUpgrade
argument_list|(
name|autoCommit
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|cId
argument_list|,
name|newStartFile
argument_list|)
expr_stmt|;
comment|// Assert that the First process is not alive anymore
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Process is still alive!"
argument_list|,
name|DefaultContainerExecutor
operator|.
name|containerIsAlive
argument_list|(
name|pid
argument_list|)
argument_list|)
expr_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|newStartFile
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Upgrade World!"
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get the pid of the process
name|String
name|newPid
init|=
name|reader
operator|.
name|readLine
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|"Old and New Pids must be different !"
argument_list|,
name|pid
argument_list|,
name|newPid
argument_list|)
expr_stmt|;
comment|// No more lines
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Verify old file still exists and is accessible by
comment|// the new process...
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|oldStartFile
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Hello World!"
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert that the New process is alive
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"New Process is not alive!"
argument_list|,
name|DefaultContainerExecutor
operator|.
name|containerIsAlive
argument_list|(
name|newPid
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
index|[]
block|{
name|pid
block|,
name|newPid
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testContainerUpgradeSuccessAutoCommit ()
specifier|public
name|void
name|testContainerUpgradeSuccessAutoCommit
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnException
block|{
name|testContainerReInitSuccess
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Should not be able to Commit (since already auto committed)
try|try
block|{
name|containerManager
operator|.
name|commitLastReInitialization
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Nothing to Commit"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testContainerUpgradeSuccessExplicitCommit ()
specifier|public
name|void
name|testContainerUpgradeSuccessExplicitCommit
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnException
block|{
name|testContainerReInitSuccess
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ContainerId
name|cId
init|=
name|createContainerId
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|commitLastReInitialization
argument_list|(
name|cId
argument_list|)
expr_stmt|;
comment|// Should not be able to Rollback once committed
try|try
block|{
name|containerManager
operator|.
name|rollbackLastReInitialization
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Nothing to rollback to"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testContainerUpgradeSuccessExplicitRollback ()
specifier|public
name|void
name|testContainerUpgradeSuccessExplicitRollback
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnException
block|{
name|String
index|[]
name|pids
init|=
name|testContainerReInitSuccess
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// Test that the container can be Restarted after the successful upgrrade.
comment|// Also, since there is a rollback context present before the restart, it
comment|// should be possible to rollback the container AFTER the restart.
name|pids
index|[
literal|1
index|]
operator|=
name|doRestartTests
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"start_file_n.txt"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|,
literal|"Upgrade World!"
argument_list|,
name|pids
index|[
literal|1
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Delete the old start File..
name|File
name|oldStartFile
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"start_file_o.txt"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|oldStartFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|ContainerId
name|cId
init|=
name|createContainerId
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Explicit Rollback
name|containerManager
operator|.
name|rollbackLastReInitialization
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|Container
name|container
init|=
name|containerManager
operator|.
name|getContext
argument_list|()
operator|.
name|getContainers
argument_list|()
operator|.
name|get
argument_list|(
name|cId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|container
operator|.
name|isReInitializing
argument_list|()
argument_list|)
expr_stmt|;
comment|// Original should be dead anyway
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Original Process is still alive!"
argument_list|,
name|DefaultContainerExecutor
operator|.
name|containerIsAlive
argument_list|(
name|pids
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Wait for new container to startup
name|int
name|timeoutSecs
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|container
operator|.
name|isReInitializing
argument_list|()
operator|&&
name|timeoutSecs
operator|++
operator|<
literal|20
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for ReInitialization to complete.."
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|container
operator|.
name|isReInitializing
argument_list|()
argument_list|)
expr_stmt|;
name|timeoutSecs
operator|=
literal|0
expr_stmt|;
comment|// Wait for new processStartfile to be created
while|while
condition|(
operator|!
name|oldStartFile
operator|.
name|exists
argument_list|()
operator|&&
name|timeoutSecs
operator|++
operator|<
literal|20
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for New process start-file to be created"
argument_list|)
expr_stmt|;
block|}
comment|// Now verify the contents of the file
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|oldStartFile
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Hello World!"
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get the pid of the process
name|String
name|rolledBackPid
init|=
name|reader
operator|.
name|readLine
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// No more lines
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|"The Rolled-back process should be a different pid"
argument_list|,
name|pids
index|[
literal|0
index|]
argument_list|,
name|rolledBackPid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerUpgradeLocalizationFailure ()
specifier|public
name|void
name|testContainerUpgradeLocalizationFailure
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnException
block|{
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
return|return;
block|}
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// ////// Construct the Container-id
name|ContainerId
name|cId
init|=
name|createContainerId
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|File
name|oldStartFile
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"start_file_o.txt"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|String
name|pid
init|=
name|prepareInitialContainer
argument_list|(
name|cId
argument_list|,
name|oldStartFile
argument_list|)
decl_stmt|;
name|File
name|newStartFile
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"start_file_n.txt"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|prepareContainerUpgrade
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|cId
argument_list|,
name|newStartFile
argument_list|)
expr_stmt|;
comment|// Assert that the First process is STILL alive
comment|// since upgrade was terminated..
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Process is NOT alive!"
argument_list|,
name|DefaultContainerExecutor
operator|.
name|containerIsAlive
argument_list|(
name|pid
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerUpgradeProcessFailure ()
specifier|public
name|void
name|testContainerUpgradeProcessFailure
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnException
block|{
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
return|return;
block|}
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// ////// Construct the Container-id
name|ContainerId
name|cId
init|=
name|createContainerId
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|File
name|oldStartFile
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"start_file_o.txt"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|String
name|pid
init|=
name|prepareInitialContainer
argument_list|(
name|cId
argument_list|,
name|oldStartFile
argument_list|)
decl_stmt|;
name|File
name|newStartFile
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"start_file_n.txt"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
comment|// Since Autocommit is true, there is also no rollback context...
comment|// which implies that if the new process fails, since there is no
comment|// rollback, it is terminated.
name|prepareContainerUpgrade
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|cId
argument_list|,
name|newStartFile
argument_list|)
expr_stmt|;
comment|// Assert that the First process is not alive anymore
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Process is still alive!"
argument_list|,
name|DefaultContainerExecutor
operator|.
name|containerIsAlive
argument_list|(
name|pid
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerUpgradeRollbackDueToFailure ()
specifier|public
name|void
name|testContainerUpgradeRollbackDueToFailure
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnException
block|{
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
return|return;
block|}
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// ////// Construct the Container-id
name|ContainerId
name|cId
init|=
name|createContainerId
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|File
name|oldStartFile
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"start_file_o.txt"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|String
name|pid
init|=
name|prepareInitialContainer
argument_list|(
name|cId
argument_list|,
name|oldStartFile
argument_list|)
decl_stmt|;
name|File
name|newStartFile
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"start_file_n.txt"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|prepareContainerUpgrade
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|cId
argument_list|,
name|newStartFile
argument_list|)
expr_stmt|;
comment|// Assert that the First process is not alive anymore
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Original Process is still alive!"
argument_list|,
name|DefaultContainerExecutor
operator|.
name|containerIsAlive
argument_list|(
name|pid
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|timeoutSecs
init|=
literal|0
decl_stmt|;
comment|// Wait for oldStartFile to be created
while|while
condition|(
operator|!
name|oldStartFile
operator|.
name|exists
argument_list|()
operator|&&
name|timeoutSecs
operator|++
operator|<
literal|20
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nFiles: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|oldStartFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|list
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for New process start-file to be created"
argument_list|)
expr_stmt|;
block|}
comment|// Now verify the contents of the file
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|oldStartFile
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Hello World!"
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get the pid of the process
name|String
name|rolledBackPid
init|=
name|reader
operator|.
name|readLine
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// No more lines
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|"The Rolled-back process should be a different pid"
argument_list|,
name|pid
argument_list|,
name|rolledBackPid
argument_list|)
expr_stmt|;
block|}
comment|/**    * Prepare a launch Context for container upgrade and request the    * Container Manager to re-initialize a running container using the    * new launch context.    * @param autoCommit Enable autoCommit.    * @param failCmd injects a start script that intentionally fails.    * @param failLoc injects a bad file Location that will fail localization.    */
DECL|method|prepareContainerUpgrade (boolean autoCommit, boolean failCmd, boolean failLoc, ContainerId cId, File startFile)
specifier|private
name|void
name|prepareContainerUpgrade
parameter_list|(
name|boolean
name|autoCommit
parameter_list|,
name|boolean
name|failCmd
parameter_list|,
name|boolean
name|failLoc
parameter_list|,
name|ContainerId
name|cId
parameter_list|,
name|File
name|startFile
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|YarnException
throws|,
name|InterruptedException
block|{
comment|// Re-write scriptfile and processStartFile
name|File
name|scriptFile
init|=
name|Shell
operator|.
name|appendScriptExtension
argument_list|(
name|tmpDir
argument_list|,
literal|"scriptFile_new"
argument_list|)
decl_stmt|;
name|PrintWriter
name|fileWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|scriptFile
argument_list|)
decl_stmt|;
name|writeScriptFile
argument_list|(
name|fileWriter
argument_list|,
literal|"Upgrade World!"
argument_list|,
name|startFile
argument_list|,
name|cId
argument_list|,
name|failCmd
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|prepareContainerLaunchContext
argument_list|(
name|scriptFile
argument_list|,
literal|"dest_file_new"
argument_list|,
name|failLoc
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|reInitializeContainer
argument_list|(
name|cId
argument_list|,
name|containerLaunchContext
argument_list|,
name|autoCommit
argument_list|)
expr_stmt|;
try|try
block|{
name|containerManager
operator|.
name|reInitializeContainer
argument_list|(
name|cId
argument_list|,
name|containerLaunchContext
argument_list|,
name|autoCommit
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Cannot perform RE_INIT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|timeoutSecs
init|=
literal|0
decl_stmt|;
name|int
name|maxTimeToWait
init|=
name|failLoc
condition|?
literal|10
else|:
literal|20
decl_stmt|;
comment|// Wait for new processStartfile to be created
while|while
condition|(
operator|!
name|startFile
operator|.
name|exists
argument_list|()
operator|&&
name|timeoutSecs
operator|++
operator|<
name|maxTimeToWait
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for New process start-file to be created"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Prepare and start an initial container. This container will be subsequently    * re-initialized for upgrade. It also waits for the container to start and    * returns the Pid of the running container.    */
DECL|method|prepareInitialContainer (ContainerId cId, File startFile)
specifier|private
name|String
name|prepareInitialContainer
parameter_list|(
name|ContainerId
name|cId
parameter_list|,
name|File
name|startFile
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
throws|,
name|InterruptedException
block|{
name|File
name|scriptFileOld
init|=
name|Shell
operator|.
name|appendScriptExtension
argument_list|(
name|tmpDir
argument_list|,
literal|"scriptFile"
argument_list|)
decl_stmt|;
name|PrintWriter
name|fileWriterOld
init|=
operator|new
name|PrintWriter
argument_list|(
name|scriptFileOld
argument_list|)
decl_stmt|;
name|writeScriptFile
argument_list|(
name|fileWriterOld
argument_list|,
literal|"Hello World!"
argument_list|,
name|startFile
argument_list|,
name|cId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|prepareContainerLaunchContext
argument_list|(
name|scriptFileOld
argument_list|,
literal|"dest_file"
argument_list|,
literal|false
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|StartContainerRequest
name|scRequest
init|=
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|cId
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|scRequest
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|int
name|timeoutSecs
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|startFile
operator|.
name|exists
argument_list|()
operator|&&
name|timeoutSecs
operator|++
operator|<
literal|20
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for process start-file to be created"
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"ProcessStartFile doesn't exist!"
argument_list|,
name|startFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now verify the contents of the file
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|startFile
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Hello World!"
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get the pid of the process
name|String
name|pid
init|=
name|reader
operator|.
name|readLine
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// No more lines
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert that the process is alive
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Process is not alive!"
argument_list|,
name|DefaultContainerExecutor
operator|.
name|containerIsAlive
argument_list|(
name|pid
argument_list|)
argument_list|)
expr_stmt|;
comment|// Once more
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Process is not alive!"
argument_list|,
name|DefaultContainerExecutor
operator|.
name|containerIsAlive
argument_list|(
name|pid
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pid
return|;
block|}
DECL|method|writeScriptFile (PrintWriter fileWriter, String startLine, File processStartFile, ContainerId cId, boolean isFailure)
specifier|private
name|void
name|writeScriptFile
parameter_list|(
name|PrintWriter
name|fileWriter
parameter_list|,
name|String
name|startLine
parameter_list|,
name|File
name|processStartFile
parameter_list|,
name|ContainerId
name|cId
parameter_list|,
name|boolean
name|isFailure
parameter_list|)
block|{
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@echo "
operator|+
name|startLine
operator|+
literal|"> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@echo "
operator|+
name|cId
operator|+
literal|">> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@ping -n 100 127.0.0.1>nul"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\numask 0"
argument_list|)
expr_stmt|;
comment|// So that start file is readable by test
if|if
condition|(
name|isFailure
condition|)
block|{
comment|// Echo PID and throw some error code
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\necho $$>> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\nexit 111"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\necho "
operator|+
name|startLine
operator|+
literal|"> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\necho $$>> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\nexec sleep 100"
argument_list|)
expr_stmt|;
block|}
block|}
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|prepareContainerLaunchContext (File scriptFile, String destFName, boolean putBadFile, int numRetries)
specifier|private
name|ContainerLaunchContext
name|prepareContainerLaunchContext
parameter_list|(
name|File
name|scriptFile
parameter_list|,
name|String
name|destFName
parameter_list|,
name|boolean
name|putBadFile
parameter_list|,
name|int
name|numRetries
parameter_list|)
block|{
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|URL
name|resourceAlpha
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|putBadFile
condition|)
block|{
name|File
name|fileToDelete
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"fileToDelete"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|resourceAlpha
operator|=
name|URL
operator|.
name|fromPath
argument_list|(
name|localFS
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|fileToDelete
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fileToDelete
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|resourceAlpha
operator|=
name|URL
operator|.
name|fromPath
argument_list|(
name|localFS
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|scriptFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LocalResource
name|rsrcAlpha
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|rsrcAlpha
operator|.
name|setResource
argument_list|(
name|resourceAlpha
argument_list|)
expr_stmt|;
name|rsrcAlpha
operator|.
name|setSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rsrcAlpha
operator|.
name|setVisibility
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
name|rsrcAlpha
operator|.
name|setType
argument_list|(
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|rsrcAlpha
operator|.
name|setTimestamp
argument_list|(
name|scriptFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|destFName
argument_list|,
name|rsrcAlpha
argument_list|)
expr_stmt|;
name|containerLaunchContext
operator|.
name|setLocalResources
argument_list|(
name|localResources
argument_list|)
expr_stmt|;
name|ContainerRetryContext
name|containerRetryContext
init|=
name|ContainerRetryContext
operator|.
name|newInstance
argument_list|(
name|ContainerRetryPolicy
operator|.
name|RETRY_ON_SPECIFIC_ERROR_CODES
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|111
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|numRetries
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|containerLaunchContext
operator|.
name|setContainerRetryContext
argument_list|(
name|containerRetryContext
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Shell
operator|.
name|getRunScriptCommand
argument_list|(
name|scriptFile
argument_list|)
argument_list|)
decl_stmt|;
name|containerLaunchContext
operator|.
name|setCommands
argument_list|(
name|commands
argument_list|)
expr_stmt|;
return|return
name|containerLaunchContext
return|;
block|}
DECL|method|testContainerLaunchAndExit (int exitCode)
specifier|protected
name|void
name|testContainerLaunchAndExit
parameter_list|(
name|int
name|exitCode
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnException
block|{
name|File
name|scriptFile
init|=
name|Shell
operator|.
name|appendScriptExtension
argument_list|(
name|tmpDir
argument_list|,
literal|"scriptFile"
argument_list|)
decl_stmt|;
name|PrintWriter
name|fileWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|scriptFile
argument_list|)
decl_stmt|;
name|File
name|processStartFile
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"start_file.txt"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
comment|// ////// Construct the Container-id
name|ContainerId
name|cId
init|=
name|createContainerId
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@echo Hello World!> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@echo "
operator|+
name|cId
operator|+
literal|">> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|exitCode
operator|!=
literal|0
condition|)
block|{
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@exit "
operator|+
name|exitCode
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\numask 0"
argument_list|)
expr_stmt|;
comment|// So that start file is readable by the test
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\necho Hello World!> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\necho $$>> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
comment|// Have script throw an exit code at the end
if|if
condition|(
name|exitCode
operator|!=
literal|0
condition|)
block|{
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\nexit "
operator|+
name|exitCode
argument_list|)
expr_stmt|;
block|}
block|}
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|URL
name|resource_alpha
init|=
name|URL
operator|.
name|fromPath
argument_list|(
name|localFS
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|scriptFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|LocalResource
name|rsrc_alpha
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|rsrc_alpha
operator|.
name|setResource
argument_list|(
name|resource_alpha
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setVisibility
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setType
argument_list|(
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setTimestamp
argument_list|(
name|scriptFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|destinationFile
init|=
literal|"dest_file"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|destinationFile
argument_list|,
name|rsrc_alpha
argument_list|)
expr_stmt|;
name|containerLaunchContext
operator|.
name|setLocalResources
argument_list|(
name|localResources
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Shell
operator|.
name|getRunScriptCommand
argument_list|(
name|scriptFile
argument_list|)
argument_list|)
decl_stmt|;
name|containerLaunchContext
operator|.
name|setCommands
argument_list|(
name|commands
argument_list|)
expr_stmt|;
name|StartContainerRequest
name|scRequest
init|=
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|cId
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|scRequest
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForContainerState
argument_list|(
name|containerManager
argument_list|,
name|cId
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containerIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|containerIds
operator|.
name|add
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|GetContainerStatusesRequest
name|gcsRequest
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|containerIds
argument_list|)
decl_stmt|;
name|ContainerStatus
name|containerStatus
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|gcsRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Verify exit status matches exit state of script
name|Assert
operator|.
name|assertEquals
argument_list|(
name|exitCode
argument_list|,
name|containerStatus
operator|.
name|getExitStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerLaunchAndExitSuccess ()
specifier|public
name|void
name|testContainerLaunchAndExitSuccess
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnException
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|exitCode
init|=
literal|0
decl_stmt|;
comment|// launch context for a command that will return exit code 0
comment|// and verify exit code returned
name|testContainerLaunchAndExit
argument_list|(
name|exitCode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerLaunchAndExitFailure ()
specifier|public
name|void
name|testContainerLaunchAndExitFailure
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnException
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|exitCode
init|=
literal|50
decl_stmt|;
comment|// launch context for a command that will return exit code 0
comment|// and verify exit code returned
name|testContainerLaunchAndExit
argument_list|(
name|exitCode
argument_list|)
expr_stmt|;
block|}
DECL|method|setupLocalResources (String fileName, String symLink)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|setupLocalResources
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|symLink
parameter_list|)
throws|throws
name|Exception
block|{
comment|// ////// Create the resources for the container
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"dir"
argument_list|)
decl_stmt|;
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|PrintWriter
name|fileWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"Hello World!"
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|URL
name|resourceURL
init|=
name|URL
operator|.
name|fromPath
argument_list|(
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|LocalResource
name|resource
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setResource
argument_list|(
name|resourceURL
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setVisibility
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setType
argument_list|(
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setTimestamp
argument_list|(
name|file
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|symLink
argument_list|,
name|resource
argument_list|)
expr_stmt|;
return|return
name|localResources
return|;
block|}
comment|// Start the container
comment|// While the container is running, localize new resources.
comment|// Verify the symlink is created properly
annotation|@
name|Test
DECL|method|testLocalingResourceWhileContainerRunning ()
specifier|public
name|void
name|testLocalingResourceWhileContainerRunning
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Real del service
name|delSrvc
operator|=
operator|new
name|DeletionService
argument_list|(
name|exec
argument_list|)
expr_stmt|;
name|delSrvc
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
operator|(
operator|(
name|NodeManager
operator|.
name|NMContext
operator|)
name|context
operator|)
operator|.
name|setContainerExecutor
argument_list|(
name|exec
argument_list|)
expr_stmt|;
name|containerManager
operator|=
name|createContainerManager
argument_list|(
name|delSrvc
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// set up local resources
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResource
init|=
name|setupLocalResources
argument_list|(
literal|"file"
argument_list|,
literal|"symLink1"
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|context
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|context
operator|.
name|setLocalResources
argument_list|(
name|localResource
argument_list|)
expr_stmt|;
comment|// a long running container - sleep
name|context
operator|.
name|setCommands
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"sleep 6"
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerId
name|cId
init|=
name|createContainerId
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// start the container
name|StartContainerRequest
name|scRequest
init|=
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|context
argument_list|,
name|createContainerToken
argument_list|(
name|cId
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|this
operator|.
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|this
operator|.
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|scRequest
argument_list|)
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForContainerState
argument_list|(
name|containerManager
argument_list|,
name|cId
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForApplicationState
argument_list|(
name|containerManager
argument_list|,
name|cId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|ApplicationState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|checkResourceLocalized
argument_list|(
name|cId
argument_list|,
literal|"symLink1"
argument_list|)
expr_stmt|;
comment|// Localize new local resources while container is running
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResource2
init|=
name|setupLocalResources
argument_list|(
literal|"file2"
argument_list|,
literal|"symLink2"
argument_list|)
decl_stmt|;
name|ResourceLocalizationRequest
name|request
init|=
name|ResourceLocalizationRequest
operator|.
name|newInstance
argument_list|(
name|cId
argument_list|,
name|localResource2
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|localize
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// Verify resource is localized and symlink is created.
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
try|try
block|{
name|checkResourceLocalized
argument_list|(
name|cId
argument_list|,
literal|"symLink2"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
argument_list|,
literal|500
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForContainerState
argument_list|(
name|containerManager
argument_list|,
name|cId
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
comment|// Verify container cannot localize resources while at non-running state.
try|try
block|{
name|containerManager
operator|.
name|localize
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Cannot perform LOCALIZE"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkResourceLocalized (ContainerId containerId, String symLink)
specifier|private
name|void
name|checkResourceLocalized
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|String
name|symLink
parameter_list|)
block|{
name|String
name|appId
init|=
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|File
name|userCacheDir
init|=
operator|new
name|File
argument_list|(
name|localDir
argument_list|,
name|ContainerLocalizer
operator|.
name|USERCACHE
argument_list|)
decl_stmt|;
name|File
name|userDir
init|=
operator|new
name|File
argument_list|(
name|userCacheDir
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|File
name|appCache
init|=
operator|new
name|File
argument_list|(
name|userDir
argument_list|,
name|ContainerLocalizer
operator|.
name|APPCACHE
argument_list|)
decl_stmt|;
comment|// localDir/usercache/nobody/appcache/application_0_0000
name|File
name|appDir
init|=
operator|new
name|File
argument_list|(
name|appCache
argument_list|,
name|appId
argument_list|)
decl_stmt|;
comment|// localDir/usercache/nobody/appcache/application_0_0000/container_0_0000_01_000000
name|File
name|containerDir
init|=
operator|new
name|File
argument_list|(
name|appDir
argument_list|,
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// localDir/usercache/nobody/appcache/application_0_0000/container_0_0000_01_000000/symLink1
name|File
name|targetFile
init|=
operator|new
name|File
argument_list|(
name|containerDir
argument_list|,
name|symLink
argument_list|)
decl_stmt|;
name|File
name|sysDir
init|=
operator|new
name|File
argument_list|(
name|localDir
argument_list|,
name|ResourceLocalizationService
operator|.
name|NM_PRIVATE_DIR
argument_list|)
decl_stmt|;
comment|// localDir/nmPrivate/application_0_0000
name|File
name|appSysDir
init|=
operator|new
name|File
argument_list|(
name|sysDir
argument_list|,
name|appId
argument_list|)
decl_stmt|;
comment|// localDir/nmPrivate/application_0_0000/container_0_0000_01_000000
name|File
name|containerSysDir
init|=
operator|new
name|File
argument_list|(
name|appSysDir
argument_list|,
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"AppDir "
operator|+
name|appDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" doesn't exist!!"
argument_list|,
name|appDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"AppSysDir "
operator|+
name|appSysDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" doesn't exist!!"
argument_list|,
name|appSysDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"containerDir "
operator|+
name|containerDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" doesn't exist !"
argument_list|,
name|containerDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"containerSysDir "
operator|+
name|containerSysDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" doesn't exist !"
argument_list|,
name|containerDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"targetFile "
operator|+
name|targetFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" doesn't exist !!"
argument_list|,
name|targetFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocalFilesCleanup ()
specifier|public
name|void
name|testLocalFilesCleanup
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
throws|,
name|YarnException
block|{
comment|// Real del service
name|delSrvc
operator|=
operator|new
name|DeletionService
argument_list|(
name|exec
argument_list|)
expr_stmt|;
name|delSrvc
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|containerManager
operator|=
name|createContainerManager
argument_list|(
name|delSrvc
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// ////// Create the resources for the container
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"dir"
argument_list|)
decl_stmt|;
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|PrintWriter
name|fileWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"Hello World!"
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// ////// Construct the Container-id
name|ContainerId
name|cId
init|=
name|createContainerId
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|cId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
comment|// ////// Construct the container-spec.
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//    containerLaunchContext.resources =
comment|//        new HashMap<CharSequence, LocalResource>();
name|URL
name|resource_alpha
init|=
name|URL
operator|.
name|fromPath
argument_list|(
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|LocalResource
name|rsrc_alpha
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|rsrc_alpha
operator|.
name|setResource
argument_list|(
name|resource_alpha
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setVisibility
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setType
argument_list|(
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setTimestamp
argument_list|(
name|file
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|destinationFile
init|=
literal|"dest_file"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|destinationFile
argument_list|,
name|rsrc_alpha
argument_list|)
expr_stmt|;
name|containerLaunchContext
operator|.
name|setLocalResources
argument_list|(
name|localResources
argument_list|)
expr_stmt|;
name|StartContainerRequest
name|scRequest
init|=
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|cId
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|scRequest
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForContainerState
argument_list|(
name|containerManager
argument_list|,
name|cId
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForApplicationState
argument_list|(
name|containerManager
argument_list|,
name|cId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|ApplicationState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// Now ascertain that the resources are localised correctly.
name|String
name|appIDStr
init|=
name|appId
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|containerIDStr
init|=
name|cId
operator|.
name|toString
argument_list|()
decl_stmt|;
name|File
name|userCacheDir
init|=
operator|new
name|File
argument_list|(
name|localDir
argument_list|,
name|ContainerLocalizer
operator|.
name|USERCACHE
argument_list|)
decl_stmt|;
name|File
name|userDir
init|=
operator|new
name|File
argument_list|(
name|userCacheDir
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|File
name|appCache
init|=
operator|new
name|File
argument_list|(
name|userDir
argument_list|,
name|ContainerLocalizer
operator|.
name|APPCACHE
argument_list|)
decl_stmt|;
name|File
name|appDir
init|=
operator|new
name|File
argument_list|(
name|appCache
argument_list|,
name|appIDStr
argument_list|)
decl_stmt|;
name|File
name|containerDir
init|=
operator|new
name|File
argument_list|(
name|appDir
argument_list|,
name|containerIDStr
argument_list|)
decl_stmt|;
name|File
name|targetFile
init|=
operator|new
name|File
argument_list|(
name|containerDir
argument_list|,
name|destinationFile
argument_list|)
decl_stmt|;
name|File
name|sysDir
init|=
operator|new
name|File
argument_list|(
name|localDir
argument_list|,
name|ResourceLocalizationService
operator|.
name|NM_PRIVATE_DIR
argument_list|)
decl_stmt|;
name|File
name|appSysDir
init|=
operator|new
name|File
argument_list|(
name|sysDir
argument_list|,
name|appIDStr
argument_list|)
decl_stmt|;
name|File
name|containerSysDir
init|=
operator|new
name|File
argument_list|(
name|appSysDir
argument_list|,
name|containerIDStr
argument_list|)
decl_stmt|;
comment|// AppDir should still exist
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"AppDir "
operator|+
name|appDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" doesn't exist!!"
argument_list|,
name|appDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"AppSysDir "
operator|+
name|appSysDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" doesn't exist!!"
argument_list|,
name|appSysDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|File
name|f
range|:
operator|new
name|File
index|[]
block|{
name|containerDir
block|,
name|containerSysDir
block|}
control|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|f
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" exists!!"
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|targetFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" exists!!"
argument_list|,
name|targetFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Simulate RM sending an AppFinish event.
name|containerManager
operator|.
name|handle
argument_list|(
operator|new
name|CMgrCompletedAppsEvent
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|ApplicationId
index|[]
block|{
name|appId
block|}
argument_list|)
argument_list|,
name|CMgrCompletedAppsEvent
operator|.
name|Reason
operator|.
name|ON_SHUTDOWN
argument_list|)
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForApplicationState
argument_list|(
name|containerManager
argument_list|,
name|cId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|ApplicationState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
comment|// Now ascertain that the resources are localised correctly.
for|for
control|(
name|File
name|f
range|:
operator|new
name|File
index|[]
block|{
name|appDir
block|,
name|containerDir
block|,
name|appSysDir
block|,
name|containerSysDir
block|}
control|)
block|{
comment|// Wait for deletion. Deletion can happen long after AppFinish because of
comment|// the async DeletionService
name|int
name|timeout
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|f
operator|.
name|exists
argument_list|()
operator|&&
name|timeout
operator|++
operator|<
literal|15
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|f
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" exists!!"
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Wait for deletion
name|int
name|timeout
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|targetFile
operator|.
name|exists
argument_list|()
operator|&&
name|timeout
operator|++
operator|<
literal|15
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|targetFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" exists!!"
argument_list|,
name|targetFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerLaunchFromPreviousRM ()
specifier|public
name|void
name|testContainerLaunchFromPreviousRM
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnException
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerId
name|cId1
init|=
name|createContainerId
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ContainerId
name|cId2
init|=
name|createContainerId
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|containerLaunchContext
operator|.
name|setLocalResources
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// Construct the Container with Invalid RMIdentifier
name|StartContainerRequest
name|startRequest1
init|=
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|cId1
argument_list|,
name|ResourceManagerConstants
operator|.
name|RM_INVALID_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|startRequest1
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|boolean
name|catchException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|StartContainersResponse
name|response
init|=
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|containsKey
argument_list|(
name|cId1
argument_list|)
condition|)
block|{
throw|throw
name|response
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|get
argument_list|(
name|cId1
argument_list|)
operator|.
name|deSerialize
argument_list|()
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|catchException
operator|=
literal|true
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Container "
operator|+
name|cId1
operator|+
literal|" rejected as it is allocated by a previous RM"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|InvalidContainerException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Verify that startContainer fail because of invalid container request
name|Assert
operator|.
name|assertTrue
argument_list|(
name|catchException
argument_list|)
expr_stmt|;
comment|// Construct the Container with a RMIdentifier within current RM
name|StartContainerRequest
name|startRequest2
init|=
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|cId2
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|startRequest2
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests2
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list2
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests2
argument_list|)
expr_stmt|;
name|boolean
name|noException
init|=
literal|true
decl_stmt|;
try|try
block|{
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|noException
operator|=
literal|false
expr_stmt|;
block|}
comment|// Verify that startContainer get no YarnException
name|Assert
operator|.
name|assertTrue
argument_list|(
name|noException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleContainersLaunch ()
specifier|public
name|void
name|testMultipleContainersLaunch
parameter_list|()
throws|throws
name|Exception
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|ContainerId
name|cId
init|=
name|createContainerId
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|identifier
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|(
name|i
operator|&
literal|1
operator|)
operator|==
literal|0
condition|)
comment|// container with even id fail
name|identifier
operator|=
name|ResourceManagerConstants
operator|.
name|RM_INVALID_IDENTIFIER
expr_stmt|;
else|else
name|identifier
operator|=
name|DUMMY_RM_IDENTIFIER
expr_stmt|;
name|Token
name|containerToken
init|=
name|createContainerToken
argument_list|(
name|cId
argument_list|,
name|identifier
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|)
decl_stmt|;
name|StartContainerRequest
name|request
init|=
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|containerToken
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
name|StartContainersRequest
name|requestList
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|StartContainersResponse
name|response
init|=
name|containerManager
operator|.
name|startContainers
argument_list|(
name|requestList
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|response
operator|.
name|getSuccessfullyStartedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ContainerId
name|id
range|:
name|response
operator|.
name|getSuccessfullyStartedContainers
argument_list|()
control|)
block|{
comment|// Containers with odd id should succeed.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|id
operator|.
name|getContainerId
argument_list|()
operator|&
literal|1
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|response
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ContainerId
argument_list|,
name|SerializedException
argument_list|>
name|entry
range|:
name|response
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// Containers with even id should fail.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getContainerId
argument_list|()
operator|&
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Container "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" rejected as it is allocated by a previous RM"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMultipleContainersStopAndGetStatus ()
specifier|public
name|void
name|testMultipleContainersStopAndGetStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|startRequest
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containerIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|ContainerId
name|cId
decl_stmt|;
if|if
condition|(
operator|(
name|i
operator|&
literal|1
operator|)
operator|==
literal|0
condition|)
block|{
comment|// Containers with even id belong to an unauthorized app
name|cId
operator|=
name|createContainerId
argument_list|(
name|i
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cId
operator|=
name|createContainerId
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|Token
name|containerToken
init|=
name|createContainerToken
argument_list|(
name|cId
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|)
decl_stmt|;
name|StartContainerRequest
name|request
init|=
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|containerToken
argument_list|)
decl_stmt|;
name|startRequest
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|containerIds
operator|.
name|add
argument_list|(
name|cId
argument_list|)
expr_stmt|;
block|}
comment|// start containers
name|StartContainersRequest
name|requestList
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|startRequest
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|requestList
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|// Get container statuses
name|GetContainerStatusesRequest
name|statusRequest
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|containerIds
argument_list|)
decl_stmt|;
name|GetContainerStatusesResponse
name|statusResponse
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|statusRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|statusResponse
operator|.
name|getContainerStatuses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ContainerStatus
name|status
range|:
name|statusResponse
operator|.
name|getContainerStatuses
argument_list|()
control|)
block|{
comment|// Containers with odd id should succeed
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|status
operator|.
name|getContainerId
argument_list|()
operator|.
name|getContainerId
argument_list|()
operator|&
literal|1
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|statusResponse
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ContainerId
argument_list|,
name|SerializedException
argument_list|>
name|entry
range|:
name|statusResponse
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// Containers with even id should fail.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getContainerId
argument_list|()
operator|&
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"attempted to get status for non-application container"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// stop containers
name|StopContainersRequest
name|stopRequest
init|=
name|StopContainersRequest
operator|.
name|newInstance
argument_list|(
name|containerIds
argument_list|)
decl_stmt|;
name|StopContainersResponse
name|stopResponse
init|=
name|containerManager
operator|.
name|stopContainers
argument_list|(
name|stopRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|stopResponse
operator|.
name|getSuccessfullyStoppedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ContainerId
name|id
range|:
name|stopResponse
operator|.
name|getSuccessfullyStoppedContainers
argument_list|()
control|)
block|{
comment|// Containers with odd id should succeed.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|id
operator|.
name|getContainerId
argument_list|()
operator|&
literal|1
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|stopResponse
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ContainerId
argument_list|,
name|SerializedException
argument_list|>
name|entry
range|:
name|stopResponse
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// Containers with even id should fail.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getContainerId
argument_list|()
operator|&
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"attempted to stop non-application container"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUnauthorizedRequests ()
specifier|public
name|void
name|testUnauthorizedRequests
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Create a containerId that belongs to an unauthorized appId
name|ContainerId
name|cId
init|=
name|createContainerId
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// startContainers()
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|StartContainerRequest
name|scRequest
init|=
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|cId
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|scRequest
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|StartContainersResponse
name|startResponse
init|=
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Should not be authorized to start container"
argument_list|,
name|startResponse
operator|.
name|getSuccessfullyStartedContainers
argument_list|()
operator|.
name|contains
argument_list|(
name|cId
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Start container request should fail"
argument_list|,
name|startResponse
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|containsKey
argument_list|(
name|cId
argument_list|)
argument_list|)
expr_stmt|;
comment|// Insert the containerId into context, make it as if it is running
name|ContainerTokenIdentifier
name|containerTokenIdentifier
init|=
name|BuilderUtils
operator|.
name|newContainerTokenIdentifier
argument_list|(
name|scRequest
operator|.
name|getContainerToken
argument_list|()
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
operator|new
name|ContainerImpl
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|containerLaunchContext
argument_list|,
literal|null
argument_list|,
name|metrics
argument_list|,
name|containerTokenIdentifier
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|context
operator|.
name|getContainers
argument_list|()
operator|.
name|put
argument_list|(
name|cId
argument_list|,
name|container
argument_list|)
expr_stmt|;
comment|// stopContainers()
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containerIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|containerIds
operator|.
name|add
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|StopContainersRequest
name|stopRequest
init|=
name|StopContainersRequest
operator|.
name|newInstance
argument_list|(
name|containerIds
argument_list|)
decl_stmt|;
name|StopContainersResponse
name|stopResponse
init|=
name|containerManager
operator|.
name|stopContainers
argument_list|(
name|stopRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Should not be authorized to stop container"
argument_list|,
name|stopResponse
operator|.
name|getSuccessfullyStoppedContainers
argument_list|()
operator|.
name|contains
argument_list|(
name|cId
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Stop container request should fail"
argument_list|,
name|stopResponse
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|containsKey
argument_list|(
name|cId
argument_list|)
argument_list|)
expr_stmt|;
comment|// getContainerStatuses()
name|containerIds
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|containerIds
operator|.
name|add
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|GetContainerStatusesRequest
name|request
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|containerIds
argument_list|)
decl_stmt|;
name|GetContainerStatusesResponse
name|response
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should not be authorized to get container status"
argument_list|,
name|response
operator|.
name|getContainerStatuses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Get status request should fail"
argument_list|,
name|response
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|containsKey
argument_list|(
name|cId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStartContainerFailureWithUnknownAuxService ()
specifier|public
name|void
name|testStartContainerFailureWithUnknownAuxService
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICES
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"existService"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICE_FMT
argument_list|,
literal|"existService"
argument_list|)
argument_list|,
name|ServiceA
operator|.
name|class
argument_list|,
name|Service
operator|.
name|class
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|startRequest
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|serviceData
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|serviceName
init|=
literal|"non_exist_auxService"
decl_stmt|;
name|serviceData
operator|.
name|put
argument_list|(
name|serviceName
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|serviceName
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|containerLaunchContext
operator|.
name|setServiceData
argument_list|(
name|serviceData
argument_list|)
expr_stmt|;
name|ContainerId
name|cId
init|=
name|createContainerId
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|user
init|=
literal|"start_container_fail"
decl_stmt|;
name|Token
name|containerToken
init|=
name|createContainerToken
argument_list|(
name|cId
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|)
decl_stmt|;
name|StartContainerRequest
name|request
init|=
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|containerToken
argument_list|)
decl_stmt|;
comment|// start containers
name|startRequest
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|requestList
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|startRequest
argument_list|)
decl_stmt|;
name|StartContainersResponse
name|response
init|=
name|containerManager
operator|.
name|startContainers
argument_list|(
name|requestList
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getSuccessfullyStartedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|response
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|containsKey
argument_list|(
name|cId
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|response
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|get
argument_list|(
name|cId
argument_list|)
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"The auxService:"
operator|+
name|serviceName
operator|+
literal|" does not exist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* Test added to verify fix in YARN-644 */
annotation|@
name|Test
DECL|method|testNullTokens ()
specifier|public
name|void
name|testNullTokens
parameter_list|()
throws|throws
name|Exception
block|{
name|ContainerManagerImpl
name|cMgrImpl
init|=
operator|new
name|ContainerManagerImpl
argument_list|(
name|context
argument_list|,
name|exec
argument_list|,
name|delSrvc
argument_list|,
name|nodeStatusUpdater
argument_list|,
name|metrics
argument_list|,
name|dirsHandler
argument_list|)
decl_stmt|;
name|String
name|strExceptionMsg
init|=
literal|""
decl_stmt|;
try|try
block|{
name|cMgrImpl
operator|.
name|authorizeStartAndResourceIncreaseRequest
argument_list|(
literal|null
argument_list|,
operator|new
name|ContainerTokenIdentifier
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ye
parameter_list|)
block|{
name|strExceptionMsg
operator|=
name|ye
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|strExceptionMsg
argument_list|,
name|ContainerManagerImpl
operator|.
name|INVALID_NMTOKEN_MSG
argument_list|)
expr_stmt|;
name|strExceptionMsg
operator|=
literal|""
expr_stmt|;
try|try
block|{
name|cMgrImpl
operator|.
name|authorizeStartAndResourceIncreaseRequest
argument_list|(
operator|new
name|NMTokenIdentifier
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ye
parameter_list|)
block|{
name|strExceptionMsg
operator|=
name|ye
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|strExceptionMsg
argument_list|,
name|ContainerManagerImpl
operator|.
name|INVALID_CONTAINERTOKEN_MSG
argument_list|)
expr_stmt|;
name|strExceptionMsg
operator|=
literal|""
expr_stmt|;
try|try
block|{
name|cMgrImpl
operator|.
name|authorizeGetAndStopContainerRequest
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ye
parameter_list|)
block|{
name|strExceptionMsg
operator|=
name|ye
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|strExceptionMsg
argument_list|,
name|ContainerManagerImpl
operator|.
name|INVALID_NMTOKEN_MSG
argument_list|)
expr_stmt|;
name|strExceptionMsg
operator|=
literal|""
expr_stmt|;
try|try
block|{
name|cMgrImpl
operator|.
name|authorizeUser
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ye
parameter_list|)
block|{
name|strExceptionMsg
operator|=
name|ye
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|strExceptionMsg
argument_list|,
name|ContainerManagerImpl
operator|.
name|INVALID_NMTOKEN_MSG
argument_list|)
expr_stmt|;
name|ContainerManagerImpl
name|spyContainerMgr
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|cMgrImpl
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugInfo
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|spyContainerMgr
operator|.
name|getRemoteUgi
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ugInfo
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|spyContainerMgr
operator|.
name|selectNMTokenIdentifier
argument_list|(
name|ugInfo
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|strExceptionMsg
operator|=
literal|""
expr_stmt|;
try|try
block|{
name|spyContainerMgr
operator|.
name|stopContainers
argument_list|(
operator|new
name|StopContainersRequestPBImpl
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ye
parameter_list|)
block|{
name|strExceptionMsg
operator|=
name|ye
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|strExceptionMsg
argument_list|,
name|ContainerManagerImpl
operator|.
name|INVALID_NMTOKEN_MSG
argument_list|)
expr_stmt|;
name|strExceptionMsg
operator|=
literal|""
expr_stmt|;
try|try
block|{
name|spyContainerMgr
operator|.
name|getContainerStatuses
argument_list|(
operator|new
name|GetContainerStatusesRequestPBImpl
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ye
parameter_list|)
block|{
name|strExceptionMsg
operator|=
name|ye
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|strExceptionMsg
argument_list|,
name|ContainerManagerImpl
operator|.
name|INVALID_NMTOKEN_MSG
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|spyContainerMgr
argument_list|)
operator|.
name|authorizeUser
argument_list|(
name|ugInfo
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|reqList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|reqList
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|reqs
init|=
operator|new
name|StartContainersRequestPBImpl
argument_list|()
decl_stmt|;
name|reqs
operator|.
name|setStartContainerRequests
argument_list|(
name|reqList
argument_list|)
expr_stmt|;
name|strExceptionMsg
operator|=
literal|""
expr_stmt|;
try|try
block|{
name|spyContainerMgr
operator|.
name|startContainers
argument_list|(
name|reqs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ye
parameter_list|)
block|{
name|strExceptionMsg
operator|=
name|ye
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|strExceptionMsg
argument_list|,
name|ContainerManagerImpl
operator|.
name|INVALID_CONTAINERTOKEN_MSG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIncreaseContainerResourceWithInvalidRequests ()
specifier|public
name|void
name|testIncreaseContainerResourceWithInvalidRequests
parameter_list|()
throws|throws
name|Exception
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Start 4 containers 0..4 with default resource (1024, 1)
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|ContainerId
name|cId
init|=
name|createContainerId
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|identifier
init|=
name|DUMMY_RM_IDENTIFIER
decl_stmt|;
name|Token
name|containerToken
init|=
name|createContainerToken
argument_list|(
name|cId
argument_list|,
name|identifier
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|)
decl_stmt|;
name|StartContainerRequest
name|request
init|=
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|containerToken
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
name|StartContainersRequest
name|requestList
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|StartContainersResponse
name|response
init|=
name|containerManager
operator|.
name|startContainers
argument_list|(
name|requestList
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|response
operator|.
name|getSuccessfullyStartedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ContainerId
name|id
range|:
name|response
operator|.
name|getSuccessfullyStartedContainers
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|i
argument_list|,
name|id
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// Construct container resource increase request,
name|List
argument_list|<
name|Token
argument_list|>
name|increaseTokens
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Add increase request for container-0, the request will fail as the
comment|// container will have exited, and won't be in RUNNING state
name|ContainerId
name|cId0
init|=
name|createContainerId
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Token
name|containerToken
init|=
name|createContainerToken
argument_list|(
name|cId0
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|3
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|increaseTokens
operator|.
name|add
argument_list|(
name|containerToken
argument_list|)
expr_stmt|;
comment|// Add increase request for container-7, the request will fail as the
comment|// container does not exist
name|ContainerId
name|cId7
init|=
name|createContainerId
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|containerToken
operator|=
name|createContainerToken
argument_list|(
name|cId7
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|3
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|increaseTokens
operator|.
name|add
argument_list|(
name|containerToken
argument_list|)
expr_stmt|;
name|IncreaseContainersResourceRequest
name|increaseRequest
init|=
name|IncreaseContainersResourceRequest
operator|.
name|newInstance
argument_list|(
name|increaseTokens
argument_list|)
decl_stmt|;
name|IncreaseContainersResourceResponse
name|increaseResponse
init|=
name|containerManager
operator|.
name|increaseContainersResource
argument_list|(
name|increaseRequest
argument_list|)
decl_stmt|;
comment|// Check response
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|increaseResponse
operator|.
name|getSuccessfullyIncreasedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|increaseResponse
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ContainerId
argument_list|,
name|SerializedException
argument_list|>
name|entry
range|:
name|increaseResponse
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Failed message"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cId0
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Resource can only be changed when a "
operator|+
literal|"container is in RUNNING state"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cId7
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Container "
operator|+
name|cId7
operator|.
name|toString
argument_list|()
operator|+
literal|" is not handled by this NodeManager"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Received failed request from wrong"
operator|+
literal|" container: "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testIncreaseContainerResourceWithInvalidResource ()
specifier|public
name|void
name|testIncreaseContainerResourceWithInvalidResource
parameter_list|()
throws|throws
name|Exception
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|File
name|scriptFile
init|=
name|Shell
operator|.
name|appendScriptExtension
argument_list|(
name|tmpDir
argument_list|,
literal|"scriptFile"
argument_list|)
decl_stmt|;
name|PrintWriter
name|fileWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|scriptFile
argument_list|)
decl_stmt|;
comment|// Construct the Container-id
name|ContainerId
name|cId
init|=
name|createContainerId
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@ping -n 100 127.0.0.1>nul"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\numask 0"
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\nexec sleep 100"
argument_list|)
expr_stmt|;
block|}
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|URL
name|resource_alpha
init|=
name|URL
operator|.
name|fromPath
argument_list|(
name|localFS
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|scriptFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|LocalResource
name|rsrc_alpha
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|rsrc_alpha
operator|.
name|setResource
argument_list|(
name|resource_alpha
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setVisibility
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setType
argument_list|(
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setTimestamp
argument_list|(
name|scriptFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|destinationFile
init|=
literal|"dest_file"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|destinationFile
argument_list|,
name|rsrc_alpha
argument_list|)
expr_stmt|;
name|containerLaunchContext
operator|.
name|setLocalResources
argument_list|(
name|localResources
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Shell
operator|.
name|getRunScriptCommand
argument_list|(
name|scriptFile
argument_list|)
argument_list|)
decl_stmt|;
name|containerLaunchContext
operator|.
name|setCommands
argument_list|(
name|commands
argument_list|)
expr_stmt|;
name|StartContainerRequest
name|scRequest
init|=
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|cId
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|scRequest
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
comment|// Make sure the container reaches RUNNING state
name|BaseContainerManagerTest
operator|.
name|waitForNMContainerState
argument_list|(
name|containerManager
argument_list|,
name|cId
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// Construct container resource increase request,
name|List
argument_list|<
name|Token
argument_list|>
name|increaseTokens
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Add increase request. The increase request should fail
comment|// as the current resource does not fit in the target resource
name|Token
name|containerToken
init|=
name|createContainerToken
argument_list|(
name|cId
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|increaseTokens
operator|.
name|add
argument_list|(
name|containerToken
argument_list|)
expr_stmt|;
name|IncreaseContainersResourceRequest
name|increaseRequest
init|=
name|IncreaseContainersResourceRequest
operator|.
name|newInstance
argument_list|(
name|increaseTokens
argument_list|)
decl_stmt|;
name|IncreaseContainersResourceResponse
name|increaseResponse
init|=
name|containerManager
operator|.
name|increaseContainersResource
argument_list|(
name|increaseRequest
argument_list|)
decl_stmt|;
comment|// Check response
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|increaseResponse
operator|.
name|getSuccessfullyIncreasedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|increaseResponse
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ContainerId
argument_list|,
name|SerializedException
argument_list|>
name|entry
range|:
name|increaseResponse
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|cId
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Failed message"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"The target resource "
operator|+
name|Resource
operator|.
name|newInstance
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
literal|" is smaller than the current resource "
operator|+
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Received failed request from wrong"
operator|+
literal|" container: "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testChangeContainerResource ()
specifier|public
name|void
name|testChangeContainerResource
parameter_list|()
throws|throws
name|Exception
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|File
name|scriptFile
init|=
name|Shell
operator|.
name|appendScriptExtension
argument_list|(
name|tmpDir
argument_list|,
literal|"scriptFile"
argument_list|)
decl_stmt|;
name|PrintWriter
name|fileWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|scriptFile
argument_list|)
decl_stmt|;
comment|// Construct the Container-id
name|ContainerId
name|cId
init|=
name|createContainerId
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@ping -n 100 127.0.0.1>nul"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\numask 0"
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\nexec sleep 100"
argument_list|)
expr_stmt|;
block|}
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|URL
name|resource_alpha
init|=
name|URL
operator|.
name|fromPath
argument_list|(
name|localFS
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|scriptFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|LocalResource
name|rsrc_alpha
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|rsrc_alpha
operator|.
name|setResource
argument_list|(
name|resource_alpha
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setVisibility
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setType
argument_list|(
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setTimestamp
argument_list|(
name|scriptFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|destinationFile
init|=
literal|"dest_file"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|destinationFile
argument_list|,
name|rsrc_alpha
argument_list|)
expr_stmt|;
name|containerLaunchContext
operator|.
name|setLocalResources
argument_list|(
name|localResources
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Shell
operator|.
name|getRunScriptCommand
argument_list|(
name|scriptFile
argument_list|)
argument_list|)
decl_stmt|;
name|containerLaunchContext
operator|.
name|setCommands
argument_list|(
name|commands
argument_list|)
expr_stmt|;
name|StartContainerRequest
name|scRequest
init|=
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|cId
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|scRequest
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
comment|// Make sure the container reaches RUNNING state
name|BaseContainerManagerTest
operator|.
name|waitForNMContainerState
argument_list|(
name|containerManager
argument_list|,
name|cId
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// Construct container resource increase request,
name|List
argument_list|<
name|Token
argument_list|>
name|increaseTokens
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Add increase request.
name|Resource
name|targetResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4096
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Token
name|containerToken
init|=
name|createContainerToken
argument_list|(
name|cId
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|targetResource
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|increaseTokens
operator|.
name|add
argument_list|(
name|containerToken
argument_list|)
expr_stmt|;
name|IncreaseContainersResourceRequest
name|increaseRequest
init|=
name|IncreaseContainersResourceRequest
operator|.
name|newInstance
argument_list|(
name|increaseTokens
argument_list|)
decl_stmt|;
name|IncreaseContainersResourceResponse
name|increaseResponse
init|=
name|containerManager
operator|.
name|increaseContainersResource
argument_list|(
name|increaseRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|increaseResponse
operator|.
name|getSuccessfullyIncreasedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|increaseResponse
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check status
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containerIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|containerIds
operator|.
name|add
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|GetContainerStatusesRequest
name|gcsRequest
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|containerIds
argument_list|)
decl_stmt|;
name|ContainerStatus
name|containerStatus
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|gcsRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Check status immediately as resource increase is blocking
name|assertEquals
argument_list|(
name|targetResource
argument_list|,
name|containerStatus
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
comment|// Simulate a decrease request
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
argument_list|>
name|containersToDecrease
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|targetResource
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
name|decreasedContainer
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
operator|.
name|newInstance
argument_list|(
name|cId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|targetResource
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|containersToDecrease
operator|.
name|add
argument_list|(
name|decreasedContainer
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|handle
argument_list|(
operator|new
name|CMgrDecreaseContainersResourceEvent
argument_list|(
name|containersToDecrease
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check status with retry
name|containerStatus
operator|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|gcsRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|retry
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|targetResource
operator|.
name|equals
argument_list|(
name|containerStatus
operator|.
name|getCapability
argument_list|()
argument_list|)
operator|&&
operator|(
name|retry
operator|++
operator|<
literal|5
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|containerStatus
operator|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|gcsRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|targetResource
argument_list|,
name|containerStatus
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOutputThreadDumpSignal ()
specifier|public
name|void
name|testOutputThreadDumpSignal
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnException
block|{
name|testContainerLaunchAndSignal
argument_list|(
name|SignalContainerCommand
operator|.
name|OUTPUT_THREAD_DUMP
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGracefulShutdownSignal ()
specifier|public
name|void
name|testGracefulShutdownSignal
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnException
block|{
name|testContainerLaunchAndSignal
argument_list|(
name|SignalContainerCommand
operator|.
name|GRACEFUL_SHUTDOWN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testForcefulShutdownSignal ()
specifier|public
name|void
name|testForcefulShutdownSignal
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnException
block|{
name|testContainerLaunchAndSignal
argument_list|(
name|SignalContainerCommand
operator|.
name|FORCEFUL_SHUTDOWN
argument_list|)
expr_stmt|;
block|}
comment|// Verify signal container request can be delivered from
comment|// NodeStatusUpdaterImpl to ContainerExecutor.
DECL|method|testContainerLaunchAndSignal (SignalContainerCommand command)
specifier|private
name|void
name|testContainerLaunchAndSignal
parameter_list|(
name|SignalContainerCommand
name|command
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnException
block|{
name|Signal
name|signal
init|=
name|ContainerLaunch
operator|.
name|translateCommandToSignal
argument_list|(
name|command
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|File
name|scriptFile
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"scriptFile.sh"
argument_list|)
decl_stmt|;
name|PrintWriter
name|fileWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|scriptFile
argument_list|)
decl_stmt|;
name|File
name|processStartFile
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"start_file.txt"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\numask 0"
argument_list|)
expr_stmt|;
comment|// So that start file is readable by the test
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\necho Hello World!> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\necho $$>> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\nexec sleep 1000s"
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// ////// Construct the Container-id
name|ContainerId
name|cId
init|=
name|createContainerId
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|URL
name|resource_alpha
init|=
name|URL
operator|.
name|fromPath
argument_list|(
name|localFS
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|scriptFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|LocalResource
name|rsrc_alpha
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|rsrc_alpha
operator|.
name|setResource
argument_list|(
name|resource_alpha
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setVisibility
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setType
argument_list|(
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setTimestamp
argument_list|(
name|scriptFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|destinationFile
init|=
literal|"dest_file"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|destinationFile
argument_list|,
name|rsrc_alpha
argument_list|)
expr_stmt|;
name|containerLaunchContext
operator|.
name|setLocalResources
argument_list|(
name|localResources
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|commands
operator|.
name|add
argument_list|(
literal|"/bin/bash"
argument_list|)
expr_stmt|;
name|commands
operator|.
name|add
argument_list|(
name|scriptFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|containerLaunchContext
operator|.
name|setCommands
argument_list|(
name|commands
argument_list|)
expr_stmt|;
name|StartContainerRequest
name|scRequest
init|=
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|cId
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|scRequest
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|int
name|timeoutSecs
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|processStartFile
operator|.
name|exists
argument_list|()
operator|&&
name|timeoutSecs
operator|++
operator|<
literal|20
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for process start-file to be created"
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"ProcessStartFile doesn't exist!"
argument_list|,
name|processStartFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Simulate NodeStatusUpdaterImpl sending CMgrSignalContainersEvent
name|SignalContainerRequest
name|signalReq
init|=
name|SignalContainerRequest
operator|.
name|newInstance
argument_list|(
name|cId
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SignalContainerRequest
argument_list|>
name|reqs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|signalReq
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|handle
argument_list|(
operator|new
name|CMgrSignalContainersEvent
argument_list|(
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ArgumentCaptor
argument_list|<
name|ContainerSignalContext
argument_list|>
name|signalContextCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|ContainerSignalContext
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|signal
operator|.
name|equals
argument_list|(
name|Signal
operator|.
name|NULL
argument_list|)
condition|)
block|{
name|verify
argument_list|(
name|exec
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|signalContainer
argument_list|(
name|signalContextCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verify
argument_list|(
name|exec
argument_list|,
name|timeout
argument_list|(
literal|10000
argument_list|)
operator|.
name|atLeastOnce
argument_list|()
argument_list|)
operator|.
name|signalContainer
argument_list|(
name|signalContextCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerSignalContext
name|signalContext
init|=
name|signalContextCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|cId
argument_list|,
name|signalContext
operator|.
name|getContainer
argument_list|()
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|signal
argument_list|,
name|signalContext
operator|.
name|getSignal
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testStartContainerFailureWithInvalidLocalResource ()
specifier|public
name|void
name|testStartContainerFailureWithInvalidLocalResource
parameter_list|()
throws|throws
name|Exception
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|LocalResource
name|rsrc_alpha
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|rsrc_alpha
operator|.
name|setResource
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setVisibility
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setType
argument_list|(
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setTimestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
literal|"invalid_resource"
argument_list|,
name|rsrc_alpha
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|spyContainerLaunchContext
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|containerLaunchContext
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|spyContainerLaunchContext
operator|.
name|getLocalResources
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|localResources
argument_list|)
expr_stmt|;
name|ContainerId
name|cId
init|=
name|createContainerId
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|user
init|=
literal|"start_container_fail"
decl_stmt|;
name|Token
name|containerToken
init|=
name|createContainerToken
argument_list|(
name|cId
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|)
decl_stmt|;
name|StartContainerRequest
name|request
init|=
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|spyContainerLaunchContext
argument_list|,
name|containerToken
argument_list|)
decl_stmt|;
comment|// start containers
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|startRequest
init|=
operator|new
name|ArrayList
argument_list|<
name|StartContainerRequest
argument_list|>
argument_list|()
decl_stmt|;
name|startRequest
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|requestList
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|startRequest
argument_list|)
decl_stmt|;
name|StartContainersResponse
name|response
init|=
name|containerManager
operator|.
name|startContainers
argument_list|(
name|requestList
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|response
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|response
operator|.
name|getSuccessfullyStartedContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|response
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|containsKey
argument_list|(
name|cId
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|response
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|get
argument_list|(
name|cId
argument_list|)
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Null resource URL for local resource"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

