begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnsupportedFileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerStatusRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StopContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ResourceManagerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|CMgrCompletedAppsEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
operator|.
name|ExitCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DefaultContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DeletionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ContainerLocalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ResourceLocalizationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestContainerManager
specifier|public
class|class
name|TestContainerManager
extends|extends
name|BaseContainerManagerTest
block|{
DECL|method|TestContainerManager ()
specifier|public
name|TestContainerManager
parameter_list|()
throws|throws
name|UnsupportedFileSystemException
block|{
name|super
argument_list|()
expr_stmt|;
block|}
static|static
block|{
name|LOG
operator|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestContainerManager
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|createContainerId ()
specifier|private
name|ContainerId
name|createContainerId
parameter_list|()
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newInstance
argument_list|(
name|appAttemptId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|containerId
return|;
block|}
annotation|@
name|Test
DECL|method|testContainerManagerInitialization ()
specifier|public
name|void
name|testContainerManagerInitialization
parameter_list|()
throws|throws
name|IOException
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Just do a query for a non-existing container.
name|boolean
name|throwsException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|GetContainerStatusRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetContainerStatusRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerId
name|cId
init|=
name|createContainerId
argument_list|()
decl_stmt|;
name|request
operator|.
name|setContainerId
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|getContainerStatus
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|e
parameter_list|)
block|{
name|throwsException
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|throwsException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerSetup ()
specifier|public
name|void
name|testContainerSetup
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnRemoteException
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// ////// Create the resources for the container
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"dir"
argument_list|)
decl_stmt|;
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|PrintWriter
name|fileWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"Hello World!"
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// ////// Construct the Container-id
name|ContainerId
name|cId
init|=
name|createContainerId
argument_list|()
decl_stmt|;
comment|// ////// Construct the container-spec.
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|URL
name|resource_alpha
init|=
name|ConverterUtils
operator|.
name|getYarnUrlFromPath
argument_list|(
name|localFS
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|LocalResource
name|rsrc_alpha
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|rsrc_alpha
operator|.
name|setResource
argument_list|(
name|resource_alpha
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setVisibility
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setType
argument_list|(
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setTimestamp
argument_list|(
name|file
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|destinationFile
init|=
literal|"dest_file"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|destinationFile
argument_list|,
name|rsrc_alpha
argument_list|)
expr_stmt|;
name|containerLaunchContext
operator|.
name|setLocalResources
argument_list|(
name|localResources
argument_list|)
expr_stmt|;
name|Resource
name|r
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|int
name|port
init|=
literal|12345
decl_stmt|;
name|Token
name|containerToken
init|=
name|BuilderUtils
operator|.
name|newContainerToken
argument_list|(
name|cId
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|,
name|port
argument_list|,
name|user
argument_list|,
name|r
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|10000L
argument_list|,
literal|123
argument_list|,
literal|"password"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|super
operator|.
name|DUMMY_RM_IDENTIFIER
argument_list|)
decl_stmt|;
name|StartContainerRequest
name|startRequest
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|StartContainerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|startRequest
operator|.
name|setContainerLaunchContext
argument_list|(
name|containerLaunchContext
argument_list|)
expr_stmt|;
name|startRequest
operator|.
name|setContainerToken
argument_list|(
name|containerToken
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|startContainer
argument_list|(
name|startRequest
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForContainerState
argument_list|(
name|containerManager
argument_list|,
name|cId
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
comment|// Now ascertain that the resources are localised correctly.
name|ApplicationId
name|appId
init|=
name|cId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|String
name|appIDStr
init|=
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|String
name|containerIDStr
init|=
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|cId
argument_list|)
decl_stmt|;
name|File
name|userCacheDir
init|=
operator|new
name|File
argument_list|(
name|localDir
argument_list|,
name|ContainerLocalizer
operator|.
name|USERCACHE
argument_list|)
decl_stmt|;
name|File
name|userDir
init|=
operator|new
name|File
argument_list|(
name|userCacheDir
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|File
name|appCache
init|=
operator|new
name|File
argument_list|(
name|userDir
argument_list|,
name|ContainerLocalizer
operator|.
name|APPCACHE
argument_list|)
decl_stmt|;
name|File
name|appDir
init|=
operator|new
name|File
argument_list|(
name|appCache
argument_list|,
name|appIDStr
argument_list|)
decl_stmt|;
name|File
name|containerDir
init|=
operator|new
name|File
argument_list|(
name|appDir
argument_list|,
name|containerIDStr
argument_list|)
decl_stmt|;
name|File
name|targetFile
init|=
operator|new
name|File
argument_list|(
name|containerDir
argument_list|,
name|destinationFile
argument_list|)
decl_stmt|;
name|File
name|sysDir
init|=
operator|new
name|File
argument_list|(
name|localDir
argument_list|,
name|ResourceLocalizationService
operator|.
name|NM_PRIVATE_DIR
argument_list|)
decl_stmt|;
name|File
name|appSysDir
init|=
operator|new
name|File
argument_list|(
name|sysDir
argument_list|,
name|appIDStr
argument_list|)
decl_stmt|;
name|File
name|containerSysDir
init|=
operator|new
name|File
argument_list|(
name|appSysDir
argument_list|,
name|containerIDStr
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|f
range|:
operator|new
name|File
index|[]
block|{
name|localDir
block|,
name|sysDir
block|,
name|userCacheDir
block|,
name|appDir
block|,
name|appSysDir
block|,
name|containerDir
block|,
name|containerSysDir
block|}
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|f
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" doesn't exist!!"
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|f
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" is not a directory!!"
argument_list|,
name|f
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|targetFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" doesn't exist!!"
argument_list|,
name|targetFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now verify the contents of the file
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|targetFile
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Hello World!"
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerLaunchAndStop ()
specifier|public
name|void
name|testContainerLaunchAndStop
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnRemoteException
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|File
name|scriptFile
init|=
name|Shell
operator|.
name|appendScriptExtension
argument_list|(
name|tmpDir
argument_list|,
literal|"scriptFile"
argument_list|)
decl_stmt|;
name|PrintWriter
name|fileWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|scriptFile
argument_list|)
decl_stmt|;
name|File
name|processStartFile
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"start_file.txt"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
comment|// ////// Construct the Container-id
name|ContainerId
name|cId
init|=
name|createContainerId
argument_list|()
decl_stmt|;
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@echo Hello World!> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@echo "
operator|+
name|cId
operator|+
literal|">> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@ping -n 100 127.0.0.1>nul"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\numask 0"
argument_list|)
expr_stmt|;
comment|// So that start file is readable by the test
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\necho Hello World!> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\necho $$>> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\nexec sleep 100"
argument_list|)
expr_stmt|;
block|}
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|URL
name|resource_alpha
init|=
name|ConverterUtils
operator|.
name|getYarnUrlFromPath
argument_list|(
name|localFS
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|scriptFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|LocalResource
name|rsrc_alpha
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|rsrc_alpha
operator|.
name|setResource
argument_list|(
name|resource_alpha
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setVisibility
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setType
argument_list|(
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setTimestamp
argument_list|(
name|scriptFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|destinationFile
init|=
literal|"dest_file"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|destinationFile
argument_list|,
name|rsrc_alpha
argument_list|)
expr_stmt|;
name|containerLaunchContext
operator|.
name|setLocalResources
argument_list|(
name|localResources
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Shell
operator|.
name|getRunScriptCommand
argument_list|(
name|scriptFile
argument_list|)
argument_list|)
decl_stmt|;
name|containerLaunchContext
operator|.
name|setCommands
argument_list|(
name|commands
argument_list|)
expr_stmt|;
name|Resource
name|r
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|100
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|int
name|port
init|=
literal|12345
decl_stmt|;
name|Token
name|containerToken
init|=
name|BuilderUtils
operator|.
name|newContainerToken
argument_list|(
name|cId
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|,
name|port
argument_list|,
name|user
argument_list|,
name|r
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|10000L
argument_list|,
literal|123
argument_list|,
literal|"password"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|super
operator|.
name|DUMMY_RM_IDENTIFIER
argument_list|)
decl_stmt|;
name|StartContainerRequest
name|startRequest
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|StartContainerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|startRequest
operator|.
name|setContainerLaunchContext
argument_list|(
name|containerLaunchContext
argument_list|)
expr_stmt|;
name|startRequest
operator|.
name|setContainerToken
argument_list|(
name|containerToken
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|startContainer
argument_list|(
name|startRequest
argument_list|)
expr_stmt|;
name|int
name|timeoutSecs
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|processStartFile
operator|.
name|exists
argument_list|()
operator|&&
name|timeoutSecs
operator|++
operator|<
literal|20
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for process start-file to be created"
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"ProcessStartFile doesn't exist!"
argument_list|,
name|processStartFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now verify the contents of the file
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|processStartFile
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Hello World!"
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get the pid of the process
name|String
name|pid
init|=
name|reader
operator|.
name|readLine
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// No more lines
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now test the stop functionality.
comment|// Assert that the process is alive
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Process is not alive!"
argument_list|,
name|DefaultContainerExecutor
operator|.
name|containerIsAlive
argument_list|(
name|pid
argument_list|)
argument_list|)
expr_stmt|;
comment|// Once more
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Process is not alive!"
argument_list|,
name|DefaultContainerExecutor
operator|.
name|containerIsAlive
argument_list|(
name|pid
argument_list|)
argument_list|)
expr_stmt|;
name|StopContainerRequest
name|stopRequest
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|StopContainerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|stopRequest
operator|.
name|setContainerId
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|stopContainer
argument_list|(
name|stopRequest
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForContainerState
argument_list|(
name|containerManager
argument_list|,
name|cId
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|GetContainerStatusRequest
name|gcsRequest
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetContainerStatusRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|gcsRequest
operator|.
name|setContainerId
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|ContainerStatus
name|containerStatus
init|=
name|containerManager
operator|.
name|getContainerStatus
argument_list|(
name|gcsRequest
argument_list|)
operator|.
name|getStatus
argument_list|()
decl_stmt|;
name|int
name|expectedExitCode
init|=
name|Shell
operator|.
name|WINDOWS
condition|?
name|ExitCode
operator|.
name|FORCE_KILLED
operator|.
name|getExitCode
argument_list|()
else|:
name|ExitCode
operator|.
name|TERMINATED
operator|.
name|getExitCode
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedExitCode
argument_list|,
name|containerStatus
operator|.
name|getExitStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert that the process is not alive anymore
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Process is still alive!"
argument_list|,
name|DefaultContainerExecutor
operator|.
name|containerIsAlive
argument_list|(
name|pid
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testContainerLaunchAndExit (int exitCode)
specifier|private
name|void
name|testContainerLaunchAndExit
parameter_list|(
name|int
name|exitCode
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnRemoteException
block|{
name|File
name|scriptFile
init|=
name|Shell
operator|.
name|appendScriptExtension
argument_list|(
name|tmpDir
argument_list|,
literal|"scriptFile"
argument_list|)
decl_stmt|;
name|PrintWriter
name|fileWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|scriptFile
argument_list|)
decl_stmt|;
name|File
name|processStartFile
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"start_file.txt"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
comment|// ////// Construct the Container-id
name|ContainerId
name|cId
init|=
name|createContainerId
argument_list|()
decl_stmt|;
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@echo Hello World!> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@echo "
operator|+
name|cId
operator|+
literal|">> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|exitCode
operator|!=
literal|0
condition|)
block|{
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@exit "
operator|+
name|exitCode
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\numask 0"
argument_list|)
expr_stmt|;
comment|// So that start file is readable by the test
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\necho Hello World!> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\necho $$>> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
comment|// Have script throw an exit code at the end
if|if
condition|(
name|exitCode
operator|!=
literal|0
condition|)
block|{
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\nexit "
operator|+
name|exitCode
argument_list|)
expr_stmt|;
block|}
block|}
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|URL
name|resource_alpha
init|=
name|ConverterUtils
operator|.
name|getYarnUrlFromPath
argument_list|(
name|localFS
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|scriptFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|LocalResource
name|rsrc_alpha
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|rsrc_alpha
operator|.
name|setResource
argument_list|(
name|resource_alpha
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setVisibility
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setType
argument_list|(
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setTimestamp
argument_list|(
name|scriptFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|destinationFile
init|=
literal|"dest_file"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|destinationFile
argument_list|,
name|rsrc_alpha
argument_list|)
expr_stmt|;
name|containerLaunchContext
operator|.
name|setLocalResources
argument_list|(
name|localResources
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Shell
operator|.
name|getRunScriptCommand
argument_list|(
name|scriptFile
argument_list|)
argument_list|)
decl_stmt|;
name|containerLaunchContext
operator|.
name|setCommands
argument_list|(
name|commands
argument_list|)
expr_stmt|;
name|Resource
name|r
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|100
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|int
name|port
init|=
literal|12345
decl_stmt|;
name|Token
name|containerToken
init|=
name|BuilderUtils
operator|.
name|newContainerToken
argument_list|(
name|cId
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|,
name|port
argument_list|,
name|user
argument_list|,
name|r
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|10000L
argument_list|,
literal|123
argument_list|,
literal|"password"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|super
operator|.
name|DUMMY_RM_IDENTIFIER
argument_list|)
decl_stmt|;
name|StartContainerRequest
name|startRequest
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|StartContainerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|startRequest
operator|.
name|setContainerLaunchContext
argument_list|(
name|containerLaunchContext
argument_list|)
expr_stmt|;
name|startRequest
operator|.
name|setContainerToken
argument_list|(
name|containerToken
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|startContainer
argument_list|(
name|startRequest
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForContainerState
argument_list|(
name|containerManager
argument_list|,
name|cId
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|GetContainerStatusRequest
name|gcsRequest
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetContainerStatusRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|gcsRequest
operator|.
name|setContainerId
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|ContainerStatus
name|containerStatus
init|=
name|containerManager
operator|.
name|getContainerStatus
argument_list|(
name|gcsRequest
argument_list|)
operator|.
name|getStatus
argument_list|()
decl_stmt|;
comment|// Verify exit status matches exit state of script
name|Assert
operator|.
name|assertEquals
argument_list|(
name|exitCode
argument_list|,
name|containerStatus
operator|.
name|getExitStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerLaunchAndExitSuccess ()
specifier|public
name|void
name|testContainerLaunchAndExitSuccess
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnRemoteException
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|exitCode
init|=
literal|0
decl_stmt|;
comment|// launch context for a command that will return exit code 0
comment|// and verify exit code returned
name|testContainerLaunchAndExit
argument_list|(
name|exitCode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerLaunchAndExitFailure ()
specifier|public
name|void
name|testContainerLaunchAndExitFailure
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnRemoteException
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|exitCode
init|=
literal|50
decl_stmt|;
comment|// launch context for a command that will return exit code 0
comment|// and verify exit code returned
name|testContainerLaunchAndExit
argument_list|(
name|exitCode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocalFilesCleanup ()
specifier|public
name|void
name|testLocalFilesCleanup
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
throws|,
name|YarnRemoteException
block|{
comment|// Real del service
name|delSrvc
operator|=
operator|new
name|DeletionService
argument_list|(
name|exec
argument_list|)
expr_stmt|;
name|delSrvc
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|containerManager
operator|=
name|createContainerManager
argument_list|(
name|delSrvc
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// ////// Create the resources for the container
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"dir"
argument_list|)
decl_stmt|;
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|PrintWriter
name|fileWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"Hello World!"
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// ////// Construct the Container-id
name|ContainerId
name|cId
init|=
name|createContainerId
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|cId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
comment|// ////// Construct the container-spec.
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//    containerLaunchContext.resources =
comment|//        new HashMap<CharSequence, LocalResource>();
name|URL
name|resource_alpha
init|=
name|ConverterUtils
operator|.
name|getYarnUrlFromPath
argument_list|(
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|LocalResource
name|rsrc_alpha
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|rsrc_alpha
operator|.
name|setResource
argument_list|(
name|resource_alpha
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setVisibility
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setType
argument_list|(
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setTimestamp
argument_list|(
name|file
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|destinationFile
init|=
literal|"dest_file"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|destinationFile
argument_list|,
name|rsrc_alpha
argument_list|)
expr_stmt|;
name|containerLaunchContext
operator|.
name|setLocalResources
argument_list|(
name|localResources
argument_list|)
expr_stmt|;
name|Resource
name|r
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|100
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|int
name|port
init|=
literal|12345
decl_stmt|;
name|Token
name|containerToken
init|=
name|BuilderUtils
operator|.
name|newContainerToken
argument_list|(
name|cId
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|,
name|port
argument_list|,
name|user
argument_list|,
name|r
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|10000L
argument_list|,
literal|123
argument_list|,
literal|"password"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|super
operator|.
name|DUMMY_RM_IDENTIFIER
argument_list|)
decl_stmt|;
name|StartContainerRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|StartContainerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setContainerLaunchContext
argument_list|(
name|containerLaunchContext
argument_list|)
expr_stmt|;
name|request
operator|.
name|setContainerToken
argument_list|(
name|containerToken
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|startContainer
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForContainerState
argument_list|(
name|containerManager
argument_list|,
name|cId
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForApplicationState
argument_list|(
name|containerManager
argument_list|,
name|cId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|ApplicationState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// Now ascertain that the resources are localised correctly.
name|String
name|appIDStr
init|=
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|String
name|containerIDStr
init|=
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|cId
argument_list|)
decl_stmt|;
name|File
name|userCacheDir
init|=
operator|new
name|File
argument_list|(
name|localDir
argument_list|,
name|ContainerLocalizer
operator|.
name|USERCACHE
argument_list|)
decl_stmt|;
name|File
name|userDir
init|=
operator|new
name|File
argument_list|(
name|userCacheDir
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|File
name|appCache
init|=
operator|new
name|File
argument_list|(
name|userDir
argument_list|,
name|ContainerLocalizer
operator|.
name|APPCACHE
argument_list|)
decl_stmt|;
name|File
name|appDir
init|=
operator|new
name|File
argument_list|(
name|appCache
argument_list|,
name|appIDStr
argument_list|)
decl_stmt|;
name|File
name|containerDir
init|=
operator|new
name|File
argument_list|(
name|appDir
argument_list|,
name|containerIDStr
argument_list|)
decl_stmt|;
name|File
name|targetFile
init|=
operator|new
name|File
argument_list|(
name|containerDir
argument_list|,
name|destinationFile
argument_list|)
decl_stmt|;
name|File
name|sysDir
init|=
operator|new
name|File
argument_list|(
name|localDir
argument_list|,
name|ResourceLocalizationService
operator|.
name|NM_PRIVATE_DIR
argument_list|)
decl_stmt|;
name|File
name|appSysDir
init|=
operator|new
name|File
argument_list|(
name|sysDir
argument_list|,
name|appIDStr
argument_list|)
decl_stmt|;
name|File
name|containerSysDir
init|=
operator|new
name|File
argument_list|(
name|appSysDir
argument_list|,
name|containerIDStr
argument_list|)
decl_stmt|;
comment|// AppDir should still exist
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"AppDir "
operator|+
name|appDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" doesn't exist!!"
argument_list|,
name|appDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"AppSysDir "
operator|+
name|appSysDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" doesn't exist!!"
argument_list|,
name|appSysDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|File
name|f
range|:
operator|new
name|File
index|[]
block|{
name|containerDir
block|,
name|containerSysDir
block|}
control|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|f
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" exists!!"
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|targetFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" exists!!"
argument_list|,
name|targetFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Simulate RM sending an AppFinish event.
name|containerManager
operator|.
name|handle
argument_list|(
operator|new
name|CMgrCompletedAppsEvent
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|ApplicationId
index|[]
block|{
name|appId
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForApplicationState
argument_list|(
name|containerManager
argument_list|,
name|cId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|ApplicationState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
comment|// Now ascertain that the resources are localised correctly.
for|for
control|(
name|File
name|f
range|:
operator|new
name|File
index|[]
block|{
name|appDir
block|,
name|containerDir
block|,
name|appSysDir
block|,
name|containerSysDir
block|}
control|)
block|{
comment|// Wait for deletion. Deletion can happen long after AppFinish because of
comment|// the async DeletionService
name|int
name|timeout
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|f
operator|.
name|exists
argument_list|()
operator|&&
name|timeout
operator|++
operator|<
literal|15
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|f
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" exists!!"
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Wait for deletion
name|int
name|timeout
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|targetFile
operator|.
name|exists
argument_list|()
operator|&&
name|timeout
operator|++
operator|<
literal|15
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|targetFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" exists!!"
argument_list|,
name|targetFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerLaunchFromPreviousRM ()
specifier|public
name|void
name|testContainerLaunchFromPreviousRM
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|host
init|=
literal|"127.0.0.1"
decl_stmt|;
name|int
name|port
init|=
literal|1234
decl_stmt|;
name|ContainerId
name|cId1
init|=
name|createContainerId
argument_list|()
decl_stmt|;
name|ContainerId
name|cId2
init|=
name|createContainerId
argument_list|()
decl_stmt|;
name|containerLaunchContext
operator|.
name|setLocalResources
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Resource
name|mockResource
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// Construct the Container with Invalid RMIdentifier
name|StartContainerRequest
name|startRequest1
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|StartContainerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|startRequest1
operator|.
name|setContainerLaunchContext
argument_list|(
name|containerLaunchContext
argument_list|)
expr_stmt|;
name|Token
name|containerToken1
init|=
name|BuilderUtils
operator|.
name|newContainerToken
argument_list|(
name|cId1
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
name|user
argument_list|,
name|mockResource
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|10000
argument_list|,
literal|123
argument_list|,
literal|"password"
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|(
name|long
operator|)
name|ResourceManagerConstants
operator|.
name|RM_INVALID_IDENTIFIER
argument_list|)
decl_stmt|;
name|startRequest1
operator|.
name|setContainerToken
argument_list|(
name|containerToken1
argument_list|)
expr_stmt|;
name|boolean
name|catchException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|containerManager
operator|.
name|startContainer
argument_list|(
name|startRequest1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|e
parameter_list|)
block|{
name|catchException
operator|=
literal|true
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Container "
operator|+
name|cId1
operator|+
literal|" rejected as it is allocated by a previous RM"
argument_list|)
argument_list|)
expr_stmt|;
comment|// TO DO: This should be replaced to explicitly check exception
comment|// class name after YARN-142
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|InvalidContainerException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Verify that startContainer fail because of invalid container request
name|Assert
operator|.
name|assertTrue
argument_list|(
name|catchException
argument_list|)
expr_stmt|;
comment|// Construct the Container with a RMIdentifier within current RM
name|StartContainerRequest
name|startRequest2
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|StartContainerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|startRequest2
operator|.
name|setContainerLaunchContext
argument_list|(
name|containerLaunchContext
argument_list|)
expr_stmt|;
name|Token
name|containerToken2
init|=
name|BuilderUtils
operator|.
name|newContainerToken
argument_list|(
name|cId1
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
name|user
argument_list|,
name|mockResource
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|10000
argument_list|,
literal|123
argument_list|,
literal|"password"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|super
operator|.
name|DUMMY_RM_IDENTIFIER
argument_list|)
decl_stmt|;
name|startRequest2
operator|.
name|setContainerToken
argument_list|(
name|containerToken2
argument_list|)
expr_stmt|;
name|boolean
name|noException
init|=
literal|true
decl_stmt|;
try|try
block|{
name|containerManager
operator|.
name|startContainer
argument_list|(
name|startRequest2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|e
parameter_list|)
block|{
name|noException
operator|=
literal|false
expr_stmt|;
block|}
comment|// Verify that startContainer get no YarnRemoteException
name|Assert
operator|.
name|assertTrue
argument_list|(
name|noException
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

