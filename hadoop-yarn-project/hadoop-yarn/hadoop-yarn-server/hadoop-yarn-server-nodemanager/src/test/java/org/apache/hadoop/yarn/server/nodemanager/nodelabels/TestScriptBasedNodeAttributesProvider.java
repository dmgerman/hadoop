begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.nodelabels
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|nodelabels
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAttributeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_comment
comment|/**  * Test cases for script based node attributes provider.  */
end_comment

begin_class
DECL|class|TestScriptBasedNodeAttributesProvider
specifier|public
class|class
name|TestScriptBasedNodeAttributesProvider
block|{
DECL|field|testRootDir
specifier|private
specifier|static
name|File
name|testRootDir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|TestScriptBasedNodeAttributesProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-localDir"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
DECL|field|nodeAttributeScript
specifier|private
specifier|final
name|File
name|nodeAttributeScript
init|=
operator|new
name|File
argument_list|(
name|testRootDir
argument_list|,
name|Shell
operator|.
name|appendScriptExtension
argument_list|(
literal|"attributeScript"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|nodeAttributesProvider
specifier|private
name|ScriptBasedNodeAttributesProvider
name|nodeAttributesProvider
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|testRootDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|nodeAttributesProvider
operator|=
operator|new
name|ScriptBasedNodeAttributesProvider
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|testRootDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|testRootDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodeAttributesProvider
operator|!=
literal|null
condition|)
block|{
name|nodeAttributesProvider
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getConfForNodeAttributeScript ()
specifier|private
name|Configuration
name|getConfForNodeAttributeScript
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_SCRIPT_BASED_NODE_ATTRIBUTES_PROVIDER_PATH
argument_list|,
name|nodeAttributeScript
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// set bigger interval so that test cases can be run
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NODE_ATTRIBUTES_PROVIDER_FETCH_INTERVAL_MS
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NODE_ATTRIBUTES_PROVIDER_FETCH_TIMEOUT_MS
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|writeNodeAttributeScriptFile (String scriptStr, boolean setExecutable)
specifier|private
name|void
name|writeNodeAttributeScriptFile
parameter_list|(
name|String
name|scriptStr
parameter_list|,
name|boolean
name|setExecutable
parameter_list|)
throws|throws
name|IOException
block|{
name|PrintWriter
name|pw
init|=
literal|null
decl_stmt|;
try|try
block|{
name|FileUtil
operator|.
name|setWritable
argument_list|(
name|nodeAttributeScript
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|setReadable
argument_list|(
name|nodeAttributeScript
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|pw
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|nodeAttributeScript
argument_list|)
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
name|scriptStr
argument_list|)
expr_stmt|;
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|pw
condition|)
block|{
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|nodeAttributeScript
argument_list|,
name|setExecutable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeAttributeScriptProvider ()
specifier|public
name|void
name|testNodeAttributeScriptProvider
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|simpleScript
init|=
literal|"echo NODE_ATTRIBUTE:host,STRING,host1234\n "
operator|+
literal|"echo NODE_ATTRIBUTE:os,STRING,redhat_6_3\n "
operator|+
literal|"echo NODE_ATTRIBUTE:ip,STRING,10.0.0.1"
decl_stmt|;
name|writeNodeAttributeScriptFile
argument_list|(
name|simpleScript
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|nodeAttributesProvider
operator|.
name|init
argument_list|(
name|getConfForNodeAttributeScript
argument_list|()
argument_list|)
expr_stmt|;
name|nodeAttributesProvider
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|nodeAttributesProvider
operator|.
name|getDescriptors
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|,
literal|500
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expecting node attributes size is 3, but got "
operator|+
name|nodeAttributesProvider
operator|.
name|getDescriptors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|NodeAttribute
argument_list|>
name|it
init|=
name|nodeAttributesProvider
operator|.
name|getDescriptors
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NodeAttribute
name|att
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|att
operator|.
name|getAttributeName
argument_list|()
condition|)
block|{
case|case
literal|"host"
case|:
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAttributeType
operator|.
name|STRING
argument_list|,
name|att
operator|.
name|getAttributeType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"host1234"
argument_list|,
name|att
operator|.
name|getAttributeValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"os"
case|:
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAttributeType
operator|.
name|STRING
argument_list|,
name|att
operator|.
name|getAttributeType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"redhat_6_3"
argument_list|,
name|att
operator|.
name|getAttributeValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"ip"
case|:
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAttributeType
operator|.
name|STRING
argument_list|,
name|att
operator|.
name|getAttributeType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"10.0.0.1"
argument_list|,
name|att
operator|.
name|getAttributeValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected attribute name "
operator|+
name|att
operator|.
name|getAttributeName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testInvalidScriptOutput ()
specifier|public
name|void
name|testInvalidScriptOutput
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Script output doesn't have correct prefix.
name|String
name|scriptContent
init|=
literal|"echo host,STRING,host1234"
decl_stmt|;
name|writeNodeAttributeScriptFile
argument_list|(
name|scriptContent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|nodeAttributesProvider
operator|.
name|init
argument_list|(
name|getConfForNodeAttributeScript
argument_list|()
argument_list|)
expr_stmt|;
name|nodeAttributesProvider
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|nodeAttributesProvider
operator|.
name|getDescriptors
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|,
literal|500
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"This test should timeout because the provide is unable"
operator|+
literal|" to parse any attributes from the script output."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nodeAttributesProvider
operator|.
name|getDescriptors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMalformedScriptOutput ()
specifier|public
name|void
name|testMalformedScriptOutput
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Script output has correct prefix but each line is malformed.
name|String
name|scriptContent
init|=
literal|"echo NODE_ATTRIBUTE:host,STRING,host1234,a_extra_column"
decl_stmt|;
name|writeNodeAttributeScriptFile
argument_list|(
name|scriptContent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|nodeAttributesProvider
operator|.
name|init
argument_list|(
name|getConfForNodeAttributeScript
argument_list|()
argument_list|)
expr_stmt|;
name|nodeAttributesProvider
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// There should be no attributes found, and we should
comment|// see Malformed output warnings in the log
try|try
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|nodeAttributesProvider
operator|.
name|getDescriptors
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|,
literal|500
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"This test should timeout because the provide is unable"
operator|+
literal|" to parse any attributes from the script output."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nodeAttributesProvider
operator|.
name|getDescriptors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFetchInterval ()
specifier|public
name|void
name|testFetchInterval
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The script returns the pid (as an attribute) each time runs this script
name|String
name|simpleScript
init|=
literal|"echo NODE_ATTRIBUTE:pid,STRING,$$"
decl_stmt|;
name|writeNodeAttributeScriptFile
argument_list|(
name|simpleScript
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|nodeAttributesProvider
operator|.
name|init
argument_list|(
name|getConfForNodeAttributeScript
argument_list|()
argument_list|)
expr_stmt|;
name|nodeAttributesProvider
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Wait for at most 3 seconds until we get at least 1
comment|// different attribute value.
name|Set
argument_list|<
name|String
argument_list|>
name|resultSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
name|Set
argument_list|<
name|NodeAttribute
argument_list|>
name|attributes
init|=
name|nodeAttributesProvider
operator|.
name|getDescriptors
argument_list|()
decl_stmt|;
if|if
condition|(
name|attributes
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|add
argument_list|(
name|attributes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getAttributeValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|resultSet
operator|.
name|size
argument_list|()
operator|>
literal|1
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|500
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeAttributesValidation ()
specifier|public
name|void
name|testNodeAttributesValidation
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Script output contains ambiguous node attributes
name|String
name|scriptContent
init|=
literal|"echo NODE_ATTRIBUTE:host,STRING,host1234\n "
operator|+
literal|"echo NODE_ATTRIBUTE:host,STRING,host2345\n "
operator|+
literal|"echo NODE_ATTRIBUTE:ip,STRING,10.0.0.1"
decl_stmt|;
name|writeNodeAttributeScriptFile
argument_list|(
name|scriptContent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|nodeAttributesProvider
operator|.
name|init
argument_list|(
name|getConfForNodeAttributeScript
argument_list|()
argument_list|)
expr_stmt|;
name|nodeAttributesProvider
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// There should be no attributes found, and we should
comment|// see Malformed output warnings in the log
try|try
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|nodeAttributesProvider
operator|.
name|getDescriptors
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|,
literal|500
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"This test should timeout because the provide is unable"
operator|+
literal|" to parse any attributes from the script output."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nodeAttributesProvider
operator|.
name|getDescriptors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

