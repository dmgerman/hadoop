begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.application
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|DrainDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerNodemanagerRecoveryProtos
operator|.
name|ContainerManagerApplicationProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|MasterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|MasterKeyPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|AuxServicesEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|AuxServicesEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerInitEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerKillEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
operator|.
name|ContainersLauncherEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
operator|.
name|ContainersLauncherEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ApplicationLocalizationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizationEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|loghandler
operator|.
name|event
operator|.
name|LogHandlerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|loghandler
operator|.
name|event
operator|.
name|LogHandlerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|ContainersMonitorEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|ContainersMonitorEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|security
operator|.
name|NMContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|security
operator|.
name|NMTokenSecretManagerInNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatcher
import|;
end_import

begin_class
DECL|class|TestApplication
specifier|public
class|class
name|TestApplication
block|{
comment|/**    * All container start events before application running.    */
annotation|@
name|Test
DECL|method|testApplicationInit1 ()
specifier|public
name|void
name|testApplicationInit1
parameter_list|()
block|{
name|WrappedApplication
name|wa
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wa
operator|=
operator|new
name|WrappedApplication
argument_list|(
literal|1
argument_list|,
literal|314159265358979L
argument_list|,
literal|"yak"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|wa
operator|.
name|initApplication
argument_list|()
expr_stmt|;
name|wa
operator|.
name|initContainer
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|INITING
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|wa
operator|.
name|initContainer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|wa
operator|.
name|initContainer
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|INITING
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|wa
operator|.
name|applicationInited
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|RUNNING
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|wa
operator|.
name|containers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|verify
argument_list|(
name|wa
operator|.
name|containerBus
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|ContainerInitMatcher
argument_list|(
name|wa
operator|.
name|containers
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|wa
operator|!=
literal|null
condition|)
name|wa
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Container start events after Application Running    */
annotation|@
name|Test
DECL|method|testApplicationInit2 ()
specifier|public
name|void
name|testApplicationInit2
parameter_list|()
block|{
name|WrappedApplication
name|wa
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wa
operator|=
operator|new
name|WrappedApplication
argument_list|(
literal|2
argument_list|,
literal|314159265358979L
argument_list|,
literal|"yak"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|wa
operator|.
name|initApplication
argument_list|()
expr_stmt|;
name|wa
operator|.
name|initContainer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|INITING
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|wa
operator|.
name|applicationInited
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|RUNNING
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|wa
operator|.
name|containerBus
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|ContainerInitMatcher
argument_list|(
name|wa
operator|.
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|wa
operator|.
name|initContainer
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|wa
operator|.
name|initContainer
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|RUNNING
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|wa
operator|.
name|containers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|verify
argument_list|(
name|wa
operator|.
name|containerBus
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|ContainerInitMatcher
argument_list|(
name|wa
operator|.
name|containers
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|wa
operator|!=
literal|null
condition|)
name|wa
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * App state RUNNING after all containers complete, before RM sends    * APP_FINISHED    */
annotation|@
name|Test
DECL|method|testAppRunningAfterContainersComplete ()
specifier|public
name|void
name|testAppRunningAfterContainersComplete
parameter_list|()
block|{
name|WrappedApplication
name|wa
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wa
operator|=
operator|new
name|WrappedApplication
argument_list|(
literal|3
argument_list|,
literal|314159265358979L
argument_list|,
literal|"yak"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|wa
operator|.
name|initApplication
argument_list|()
expr_stmt|;
name|wa
operator|.
name|initContainer
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|INITING
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|wa
operator|.
name|applicationInited
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|RUNNING
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|wa
operator|.
name|containerFinished
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|RUNNING
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|wa
operator|.
name|containerFinished
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|wa
operator|.
name|containerFinished
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|RUNNING
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wa
operator|!=
literal|null
condition|)
name|wa
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Finished containers properly tracked when only container finishes in APP_INITING    */
annotation|@
name|Test
DECL|method|testContainersCompleteDuringAppInit1 ()
specifier|public
name|void
name|testContainersCompleteDuringAppInit1
parameter_list|()
block|{
name|WrappedApplication
name|wa
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wa
operator|=
operator|new
name|WrappedApplication
argument_list|(
literal|3
argument_list|,
literal|314159265358979L
argument_list|,
literal|"yak"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|wa
operator|.
name|initApplication
argument_list|()
expr_stmt|;
name|wa
operator|.
name|initContainer
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|INITING
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|wa
operator|.
name|containerFinished
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|INITING
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|wa
operator|.
name|applicationInited
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|RUNNING
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wa
operator|!=
literal|null
condition|)
name|wa
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Finished containers properly tracked when 1 of several containers finishes in APP_INITING    */
annotation|@
name|Test
DECL|method|testContainersCompleteDuringAppInit2 ()
specifier|public
name|void
name|testContainersCompleteDuringAppInit2
parameter_list|()
block|{
name|WrappedApplication
name|wa
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wa
operator|=
operator|new
name|WrappedApplication
argument_list|(
literal|3
argument_list|,
literal|314159265358979L
argument_list|,
literal|"yak"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|wa
operator|.
name|initApplication
argument_list|()
expr_stmt|;
name|wa
operator|.
name|initContainer
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|INITING
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|wa
operator|.
name|containerFinished
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|INITING
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|wa
operator|.
name|applicationInited
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|RUNNING
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|wa
operator|.
name|containerFinished
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|wa
operator|.
name|containerFinished
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|RUNNING
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wa
operator|!=
literal|null
condition|)
name|wa
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testAppFinishedOnRunningContainers ()
specifier|public
name|void
name|testAppFinishedOnRunningContainers
parameter_list|()
block|{
name|WrappedApplication
name|wa
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wa
operator|=
operator|new
name|WrappedApplication
argument_list|(
literal|4
argument_list|,
literal|314159265358979L
argument_list|,
literal|"yak"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|wa
operator|.
name|initApplication
argument_list|()
expr_stmt|;
name|wa
operator|.
name|initContainer
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|INITING
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|wa
operator|.
name|applicationInited
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|RUNNING
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|wa
operator|.
name|containerFinished
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|RUNNING
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|wa
operator|.
name|appFinished
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|FINISHING_CONTAINERS_WAIT
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|wa
operator|.
name|containers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|verify
argument_list|(
name|wa
operator|.
name|containerBus
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|ContainerKillMatcher
argument_list|(
name|wa
operator|.
name|containers
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|wa
operator|.
name|containerFinished
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|FINISHING_CONTAINERS_WAIT
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|wa
operator|.
name|localizerBus
argument_list|)
expr_stmt|;
name|wa
operator|.
name|containerFinished
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// All containers finished. Cleanup should be called.
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|APPLICATION_RESOURCES_CLEANINGUP
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|wa
operator|.
name|localizerBus
argument_list|)
operator|.
name|handle
argument_list|(
name|refEq
argument_list|(
operator|new
name|ApplicationLocalizationEvent
argument_list|(
name|LocalizationEventType
operator|.
name|DESTROY_APPLICATION_RESOURCES
argument_list|,
name|wa
operator|.
name|app
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|wa
operator|.
name|auxBus
argument_list|)
operator|.
name|handle
argument_list|(
name|refEq
argument_list|(
operator|new
name|AuxServicesEvent
argument_list|(
name|AuxServicesEventType
operator|.
name|APPLICATION_STOP
argument_list|,
name|wa
operator|.
name|appId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|wa
operator|.
name|appResourcesCleanedup
argument_list|()
expr_stmt|;
for|for
control|(
name|Container
name|container
range|:
name|wa
operator|.
name|containers
control|)
block|{
name|ContainerTokenIdentifier
name|identifier
init|=
name|wa
operator|.
name|getContainerTokenIdentifier
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
name|waitForContainerTokenToExpire
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|wa
operator|.
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
operator|.
name|isValidStartContainerRequest
argument_list|(
name|identifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|FINISHED
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wa
operator|!=
literal|null
condition|)
name|wa
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|waitForContainerTokenToExpire ( ContainerTokenIdentifier identifier)
specifier|protected
name|ContainerTokenIdentifier
name|waitForContainerTokenToExpire
parameter_list|(
name|ContainerTokenIdentifier
name|identifier
parameter_list|)
block|{
name|int
name|attempts
init|=
literal|5
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|identifier
operator|.
name|getExpiryTimeStamp
argument_list|()
operator|&&
name|attempts
operator|--
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
block|}
return|return
name|identifier
return|;
block|}
annotation|@
name|Test
DECL|method|testApplicationOnAppLogHandlingInitedEvtShouldStoreLogInitedTime ()
specifier|public
name|void
name|testApplicationOnAppLogHandlingInitedEvtShouldStoreLogInitedTime
parameter_list|()
throws|throws
name|IOException
block|{
name|WrappedApplication
name|wa
init|=
operator|new
name|WrappedApplication
argument_list|(
literal|5
argument_list|,
literal|314159265358979L
argument_list|,
literal|"yak"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|wa
operator|.
name|initApplication
argument_list|()
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|ContainerManagerApplicationProto
argument_list|>
name|applicationProto
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|ContainerManagerApplicationProto
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|long
name|timestamp
init|=
name|wa
operator|.
name|applicationLogInited
argument_list|()
decl_stmt|;
name|verify
argument_list|(
name|wa
operator|.
name|stateStoreService
argument_list|)
operator|.
name|storeApplication
argument_list|(
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|,
name|applicationProto
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|applicationProto
operator|.
name|getValue
argument_list|()
operator|.
name|getAppLogAggregationInitedTime
argument_list|()
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testAppFinishedOnCompletedContainers ()
specifier|public
name|void
name|testAppFinishedOnCompletedContainers
parameter_list|()
block|{
name|WrappedApplication
name|wa
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wa
operator|=
operator|new
name|WrappedApplication
argument_list|(
literal|5
argument_list|,
literal|314159265358979L
argument_list|,
literal|"yak"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|wa
operator|.
name|initApplication
argument_list|()
expr_stmt|;
name|wa
operator|.
name|initContainer
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|INITING
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|wa
operator|.
name|applicationInited
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|RUNNING
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|wa
operator|.
name|localizerBus
argument_list|)
expr_stmt|;
name|wa
operator|.
name|containerFinished
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|wa
operator|.
name|containerFinished
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|wa
operator|.
name|containerFinished
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|RUNNING
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|wa
operator|.
name|appFinished
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|APPLICATION_RESOURCES_CLEANINGUP
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|wa
operator|.
name|localizerBus
argument_list|)
operator|.
name|handle
argument_list|(
name|refEq
argument_list|(
operator|new
name|ApplicationLocalizationEvent
argument_list|(
name|LocalizationEventType
operator|.
name|DESTROY_APPLICATION_RESOURCES
argument_list|,
name|wa
operator|.
name|app
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|wa
operator|.
name|appResourcesCleanedup
argument_list|()
expr_stmt|;
for|for
control|(
name|Container
name|container
range|:
name|wa
operator|.
name|containers
control|)
block|{
name|ContainerTokenIdentifier
name|identifier
init|=
name|wa
operator|.
name|getContainerTokenIdentifier
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
name|waitForContainerTokenToExpire
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|wa
operator|.
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
operator|.
name|isValidStartContainerRequest
argument_list|(
name|identifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|FINISHED
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wa
operator|!=
literal|null
condition|)
name|wa
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
comment|//TODO Re-work after Application transitions are changed.
comment|//  @Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testStartContainerAfterAppFinished ()
specifier|public
name|void
name|testStartContainerAfterAppFinished
parameter_list|()
block|{
name|WrappedApplication
name|wa
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wa
operator|=
operator|new
name|WrappedApplication
argument_list|(
literal|5
argument_list|,
literal|314159265358979L
argument_list|,
literal|"yak"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|wa
operator|.
name|initApplication
argument_list|()
expr_stmt|;
name|wa
operator|.
name|initContainer
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|INITING
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|wa
operator|.
name|applicationInited
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|RUNNING
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|wa
operator|.
name|localizerBus
argument_list|)
expr_stmt|;
name|wa
operator|.
name|containerFinished
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|wa
operator|.
name|containerFinished
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|wa
operator|.
name|containerFinished
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|RUNNING
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|wa
operator|.
name|appFinished
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|APPLICATION_RESOURCES_CLEANINGUP
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|wa
operator|.
name|localizerBus
argument_list|)
operator|.
name|handle
argument_list|(
name|refEq
argument_list|(
operator|new
name|ApplicationLocalizationEvent
argument_list|(
name|LocalizationEventType
operator|.
name|DESTROY_APPLICATION_RESOURCES
argument_list|,
name|wa
operator|.
name|app
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|wa
operator|.
name|appResourcesCleanedup
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|FINISHED
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wa
operator|!=
literal|null
condition|)
name|wa
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
comment|//TODO Re-work after Application transitions are changed.
comment|//  @Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testAppFinishedOnIniting ()
specifier|public
name|void
name|testAppFinishedOnIniting
parameter_list|()
block|{
comment|// AM may send a startContainer() - AM APP_FINIHSED processed after
comment|// APP_FINISHED on another NM
name|WrappedApplication
name|wa
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wa
operator|=
operator|new
name|WrappedApplication
argument_list|(
literal|1
argument_list|,
literal|314159265358979L
argument_list|,
literal|"yak"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|wa
operator|.
name|initApplication
argument_list|()
expr_stmt|;
name|wa
operator|.
name|initContainer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|INITING
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|wa
operator|.
name|localizerBus
argument_list|)
expr_stmt|;
name|wa
operator|.
name|appFinished
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|wa
operator|.
name|containerBus
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|ContainerKillMatcher
argument_list|(
name|wa
operator|.
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|FINISHING_CONTAINERS_WAIT
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|wa
operator|.
name|containerFinished
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|APPLICATION_RESOURCES_CLEANINGUP
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|wa
operator|.
name|localizerBus
argument_list|)
operator|.
name|handle
argument_list|(
name|refEq
argument_list|(
operator|new
name|ApplicationLocalizationEvent
argument_list|(
name|LocalizationEventType
operator|.
name|DESTROY_APPLICATION_RESOURCES
argument_list|,
name|wa
operator|.
name|app
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|wa
operator|.
name|initContainer
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|APPLICATION_RESOURCES_CLEANINGUP
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|wa
operator|.
name|appResourcesCleanedup
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|FINISHED
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wa
operator|!=
literal|null
condition|)
name|wa
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNMTokenSecretManagerCleanup ()
specifier|public
name|void
name|testNMTokenSecretManagerCleanup
parameter_list|()
block|{
name|WrappedApplication
name|wa
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wa
operator|=
operator|new
name|WrappedApplication
argument_list|(
literal|1
argument_list|,
literal|314159265358979L
argument_list|,
literal|"yak"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|wa
operator|.
name|initApplication
argument_list|()
expr_stmt|;
name|wa
operator|.
name|initContainer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|INITING
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|wa
operator|.
name|appFinished
argument_list|()
expr_stmt|;
name|wa
operator|.
name|containerFinished
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|wa
operator|.
name|appResourcesCleanedup
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ApplicationState
operator|.
name|FINISHED
argument_list|,
name|wa
operator|.
name|app
operator|.
name|getApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|wa
operator|.
name|nmTokenSecretMgr
argument_list|)
operator|.
name|appFinished
argument_list|(
name|eq
argument_list|(
name|wa
operator|.
name|appId
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wa
operator|!=
literal|null
condition|)
block|{
name|wa
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|ContainerKillMatcher
specifier|private
class|class
name|ContainerKillMatcher
extends|extends
name|ArgumentMatcher
argument_list|<
name|ContainerEvent
argument_list|>
block|{
DECL|field|cId
specifier|private
name|ContainerId
name|cId
decl_stmt|;
DECL|method|ContainerKillMatcher (ContainerId cId)
specifier|public
name|ContainerKillMatcher
parameter_list|(
name|ContainerId
name|cId
parameter_list|)
block|{
name|this
operator|.
name|cId
operator|=
name|cId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|matches (Object argument)
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|argument
parameter_list|)
block|{
if|if
condition|(
name|argument
operator|instanceof
name|ContainerKillEvent
condition|)
block|{
name|ContainerKillEvent
name|event
init|=
operator|(
name|ContainerKillEvent
operator|)
name|argument
decl_stmt|;
return|return
name|event
operator|.
name|getContainerID
argument_list|()
operator|.
name|equals
argument_list|(
name|cId
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|class|ContainerInitMatcher
specifier|private
class|class
name|ContainerInitMatcher
extends|extends
name|ArgumentMatcher
argument_list|<
name|ContainerEvent
argument_list|>
block|{
DECL|field|cId
specifier|private
name|ContainerId
name|cId
decl_stmt|;
DECL|method|ContainerInitMatcher (ContainerId cId)
specifier|public
name|ContainerInitMatcher
parameter_list|(
name|ContainerId
name|cId
parameter_list|)
block|{
name|this
operator|.
name|cId
operator|=
name|cId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|matches (Object argument)
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|argument
parameter_list|)
block|{
if|if
condition|(
name|argument
operator|instanceof
name|ContainerInitEvent
condition|)
block|{
name|ContainerInitEvent
name|event
init|=
operator|(
name|ContainerInitEvent
operator|)
name|argument
decl_stmt|;
return|return
name|event
operator|.
name|getContainerID
argument_list|()
operator|.
name|equals
argument_list|(
name|cId
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|WrappedApplication
specifier|private
class|class
name|WrappedApplication
block|{
DECL|field|dispatcher
specifier|final
name|DrainDispatcher
name|dispatcher
decl_stmt|;
DECL|field|localizerBus
specifier|final
name|EventHandler
argument_list|<
name|LocalizationEvent
argument_list|>
name|localizerBus
decl_stmt|;
DECL|field|launcherBus
specifier|final
name|EventHandler
argument_list|<
name|ContainersLauncherEvent
argument_list|>
name|launcherBus
decl_stmt|;
DECL|field|monitorBus
specifier|final
name|EventHandler
argument_list|<
name|ContainersMonitorEvent
argument_list|>
name|monitorBus
decl_stmt|;
DECL|field|auxBus
specifier|final
name|EventHandler
argument_list|<
name|AuxServicesEvent
argument_list|>
name|auxBus
decl_stmt|;
DECL|field|containerBus
specifier|final
name|EventHandler
argument_list|<
name|ContainerEvent
argument_list|>
name|containerBus
decl_stmt|;
DECL|field|logAggregationBus
specifier|final
name|EventHandler
argument_list|<
name|LogHandlerEvent
argument_list|>
name|logAggregationBus
decl_stmt|;
DECL|field|user
specifier|final
name|String
name|user
decl_stmt|;
DECL|field|containers
specifier|final
name|List
argument_list|<
name|Container
argument_list|>
name|containers
decl_stmt|;
DECL|field|context
specifier|final
name|Context
name|context
decl_stmt|;
DECL|field|containerTokenIdentifierMap
specifier|final
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|ContainerTokenIdentifier
argument_list|>
name|containerTokenIdentifierMap
decl_stmt|;
DECL|field|nmTokenSecretMgr
specifier|final
name|NMTokenSecretManagerInNM
name|nmTokenSecretMgr
decl_stmt|;
DECL|field|stateStoreService
specifier|final
name|NMStateStoreService
name|stateStoreService
decl_stmt|;
DECL|field|appId
specifier|final
name|ApplicationId
name|appId
decl_stmt|;
DECL|field|app
specifier|final
name|Application
name|app
decl_stmt|;
DECL|method|WrappedApplication (int id, long timestamp, String user, int numContainers)
name|WrappedApplication
parameter_list|(
name|int
name|id
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|String
name|user
parameter_list|,
name|int
name|numContainers
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|dispatcher
operator|=
operator|new
name|DrainDispatcher
argument_list|()
expr_stmt|;
name|containerTokenIdentifierMap
operator|=
operator|new
name|HashMap
argument_list|<
name|ContainerId
argument_list|,
name|ContainerTokenIdentifier
argument_list|>
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|localizerBus
operator|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|launcherBus
operator|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|monitorBus
operator|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|auxBus
operator|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|containerBus
operator|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|logAggregationBus
operator|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|LocalizationEventType
operator|.
name|class
argument_list|,
name|localizerBus
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainersLauncherEventType
operator|.
name|class
argument_list|,
name|launcherBus
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainersMonitorEventType
operator|.
name|class
argument_list|,
name|monitorBus
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|AuxServicesEventType
operator|.
name|class
argument_list|,
name|auxBus
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainerEventType
operator|.
name|class
argument_list|,
name|containerBus
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|LogHandlerEventType
operator|.
name|class
argument_list|,
name|logAggregationBus
argument_list|)
expr_stmt|;
name|nmTokenSecretMgr
operator|=
name|mock
argument_list|(
name|NMTokenSecretManagerInNM
operator|.
name|class
argument_list|)
expr_stmt|;
name|stateStoreService
operator|=
name|mock
argument_list|(
name|NMStateStoreService
operator|.
name|class
argument_list|)
expr_stmt|;
name|context
operator|=
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|NMContainerTokenSecretManager
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getApplicationACLsManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ApplicationACLsManager
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getNMTokenSecretManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nmTokenSecretMgr
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getNMStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|stateStoreService
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Setting master key
name|MasterKey
name|masterKey
init|=
operator|new
name|MasterKeyPBImpl
argument_list|()
decl_stmt|;
name|masterKey
operator|.
name|setKeyId
argument_list|(
literal|123
argument_list|)
expr_stmt|;
name|masterKey
operator|.
name|setBytes
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
operator|new
name|Integer
argument_list|(
literal|123
argument_list|)
operator|.
name|byteValue
argument_list|()
operator|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
operator|.
name|setMasterKey
argument_list|(
name|masterKey
argument_list|)
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|appId
operator|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
name|timestamp
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|app
operator|=
operator|new
name|ApplicationImpl
argument_list|(
name|dispatcher
argument_list|,
name|this
operator|.
name|user
argument_list|,
name|appId
argument_list|,
literal|null
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|containers
operator|=
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numContainers
condition|;
name|i
operator|++
control|)
block|{
name|Container
name|container
init|=
name|createMockedContainer
argument_list|(
name|this
operator|.
name|appId
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|containers
operator|.
name|add
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ContainerTokenIdentifier
name|identifier
init|=
operator|new
name|ContainerTokenIdentifier
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|,
name|currentTime
operator|+
literal|2000
argument_list|,
name|masterKey
operator|.
name|getKeyId
argument_list|()
argument_list|,
name|currentTime
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|containerTokenIdentifierMap
operator|.
name|put
argument_list|(
name|identifier
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|identifier
argument_list|)
expr_stmt|;
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
operator|.
name|startContainerSuccessful
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
operator|.
name|isValidStartContainerRequest
argument_list|(
name|identifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|drainDispatcherEvents ()
specifier|private
name|void
name|drainDispatcherEvents
parameter_list|()
block|{
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
DECL|method|finished ()
specifier|public
name|void
name|finished
parameter_list|()
block|{
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|initApplication ()
specifier|public
name|void
name|initApplication
parameter_list|()
block|{
name|app
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationInitEvent
argument_list|(
name|appId
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|initContainer (int containerNum)
specifier|public
name|void
name|initContainer
parameter_list|(
name|int
name|containerNum
parameter_list|)
block|{
if|if
condition|(
name|containerNum
operator|==
operator|-
literal|1
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|containers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|app
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationContainerInitEvent
argument_list|(
name|containers
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|app
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationContainerInitEvent
argument_list|(
name|containers
operator|.
name|get
argument_list|(
name|containerNum
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|drainDispatcherEvents
argument_list|()
expr_stmt|;
block|}
DECL|method|containerFinished (int containerNum)
specifier|public
name|void
name|containerFinished
parameter_list|(
name|int
name|containerNum
parameter_list|)
block|{
name|app
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationContainerFinishedEvent
argument_list|(
name|containers
operator|.
name|get
argument_list|(
name|containerNum
argument_list|)
operator|.
name|cloneAndGetContainerStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|drainDispatcherEvents
argument_list|()
expr_stmt|;
block|}
DECL|method|applicationInited ()
specifier|public
name|void
name|applicationInited
parameter_list|()
block|{
name|app
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationInitedEvent
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|drainDispatcherEvents
argument_list|()
expr_stmt|;
block|}
DECL|method|applicationLogInited ()
specifier|public
name|long
name|applicationLogInited
parameter_list|()
block|{
name|ApplicationEvent
name|appEvt
init|=
operator|new
name|ApplicationEvent
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_LOG_HANDLING_INITED
argument_list|)
decl_stmt|;
name|app
operator|.
name|handle
argument_list|(
name|appEvt
argument_list|)
expr_stmt|;
return|return
name|appEvt
operator|.
name|getTimestamp
argument_list|()
return|;
block|}
DECL|method|appFinished ()
specifier|public
name|void
name|appFinished
parameter_list|()
block|{
name|app
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationFinishEvent
argument_list|(
name|appId
argument_list|,
literal|"Finish Application"
argument_list|)
argument_list|)
expr_stmt|;
name|drainDispatcherEvents
argument_list|()
expr_stmt|;
block|}
DECL|method|appResourcesCleanedup ()
specifier|public
name|void
name|appResourcesCleanedup
parameter_list|()
block|{
name|app
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationEvent
argument_list|(
name|appId
argument_list|,
name|ApplicationEventType
operator|.
name|APPLICATION_RESOURCES_CLEANEDUP
argument_list|)
argument_list|)
expr_stmt|;
name|drainDispatcherEvents
argument_list|()
expr_stmt|;
block|}
DECL|method|getContainerTokenIdentifier ( ContainerId containerId)
specifier|public
name|ContainerTokenIdentifier
name|getContainerTokenIdentifier
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
return|return
name|this
operator|.
name|containerTokenIdentifierMap
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
return|;
block|}
block|}
DECL|method|createMockedContainer (ApplicationId appId, int containerId)
specifier|private
name|Container
name|createMockedContainer
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|int
name|containerId
parameter_list|)
block|{
name|ApplicationAttemptId
name|appAttemptId
init|=
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|cId
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
name|containerId
argument_list|)
decl_stmt|;
name|Container
name|c
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|launchContext
init|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getLaunchContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|launchContext
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|launchContext
operator|.
name|getApplicationACLs
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c
operator|.
name|cloneAndGetContainerStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|BuilderUtils
operator|.
name|newContainerStatus
argument_list|(
name|cId
argument_list|,
name|ContainerState
operator|.
name|NEW
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
block|}
end_class

end_unit

