begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.com.nec
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|com
operator|.
name|nec
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verifyZeroInteractions
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verifyNoMoreInteractions
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|utils
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|CommandExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|Device
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|ResourceHandlerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|junit
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_comment
comment|/**  * Unit tests for NECVEPlugin class.  *  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
DECL|class|TestNECVEPlugin
specifier|public
class|class
name|TestNECVEPlugin
block|{
DECL|field|DEFAULT_SCRIPT_NAME
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_SCRIPT_NAME
init|=
literal|"nec-ve-get.py"
decl_stmt|;
DECL|field|EMPTY_SEARCH_DIRS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|EMPTY_SEARCH_DIRS
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
DECL|field|DEVICE_COMPARATOR
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Device
argument_list|>
name|DEVICE_COMPARATOR
init|=
name|Comparator
operator|.
name|comparingInt
argument_list|(
name|Device
operator|::
name|getId
argument_list|)
decl_stmt|;
DECL|field|envProvider
specifier|private
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envProvider
decl_stmt|;
DECL|field|env
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
decl_stmt|;
DECL|field|defaultSearchDirs
specifier|private
name|String
index|[]
name|defaultSearchDirs
decl_stmt|;
specifier|private
name|Function
argument_list|<
name|String
index|[]
argument_list|,
name|CommandExecutor
argument_list|>
DECL|field|commandExecutorProvider
name|commandExecutorProvider
decl_stmt|;
DECL|field|testFolder
specifier|private
name|String
name|testFolder
decl_stmt|;
annotation|@
name|Mock
DECL|field|mockCommandExecutor
specifier|private
name|CommandExecutor
name|mockCommandExecutor
decl_stmt|;
annotation|@
name|Mock
DECL|field|udevUtil
specifier|private
name|UdevUtil
name|udevUtil
decl_stmt|;
DECL|field|defaultScriptOutput
specifier|private
name|String
name|defaultScriptOutput
decl_stmt|;
DECL|field|plugin
specifier|private
name|NECVEPlugin
name|plugin
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|env
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|envProvider
operator|=
parameter_list|(
name|String
name|var
parameter_list|)
lambda|->
name|env
operator|.
name|get
argument_list|(
name|var
argument_list|)
expr_stmt|;
name|commandExecutorProvider
operator|=
parameter_list|(
name|String
index|[]
name|cmd
parameter_list|)
lambda|->
name|mockCommandExecutor
expr_stmt|;
comment|// default output of MockCommandExecutor - single device
name|defaultScriptOutput
operator|=
name|getOutputForDevice
argument_list|(
literal|0
argument_list|,
literal|"/dev/ve0"
argument_list|,
literal|"ONLINE"
argument_list|,
literal|"0000:65:00.0"
argument_list|,
literal|243
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|testFolder
operator|!=
literal|null
condition|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|testFolder
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testParseScriptOutput ()
specifier|public
name|void
name|testParseScriptOutput
parameter_list|()
throws|throws
name|ResourceHandlerException
throws|,
name|IOException
block|{
name|setupTestDirectoryWithScript
argument_list|()
expr_stmt|;
name|plugin
operator|=
operator|new
name|NECVEPlugin
argument_list|(
name|envProvider
argument_list|,
name|defaultSearchDirs
argument_list|,
name|udevUtil
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|setCommandExecutorProvider
argument_list|(
name|commandExecutorProvider
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCommandExecutor
operator|.
name|getOutput
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|defaultScriptOutput
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Device
argument_list|>
name|devices
init|=
name|plugin
operator|.
name|getDevices
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number of devices"
argument_list|,
literal|1
argument_list|,
name|devices
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Device
name|device
init|=
name|devices
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Device id"
argument_list|,
literal|0
argument_list|,
name|device
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Device path"
argument_list|,
literal|"/dev/ve0"
argument_list|,
name|device
operator|.
name|getDevPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bus Id"
argument_list|,
literal|"0000:65:00.0"
argument_list|,
name|device
operator|.
name|getBusID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Status"
argument_list|,
literal|"ONLINE"
argument_list|,
name|device
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Major number"
argument_list|,
literal|243
argument_list|,
name|device
operator|.
name|getMajorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Minor number"
argument_list|,
literal|0
argument_list|,
name|device
operator|.
name|getMinorNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParseMultipleDevices ()
specifier|public
name|void
name|testParseMultipleDevices
parameter_list|()
throws|throws
name|ResourceHandlerException
throws|,
name|IOException
block|{
name|setupTestDirectoryWithScript
argument_list|()
expr_stmt|;
name|plugin
operator|=
operator|new
name|NECVEPlugin
argument_list|(
name|envProvider
argument_list|,
name|defaultSearchDirs
argument_list|,
name|udevUtil
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|setCommandExecutorProvider
argument_list|(
name|commandExecutorProvider
argument_list|)
expr_stmt|;
name|defaultScriptOutput
operator|+=
literal|"\n"
expr_stmt|;
name|defaultScriptOutput
operator|+=
name|getOutputForDevice
argument_list|(
literal|1
argument_list|,
literal|"/dev/ve1"
argument_list|,
literal|"ONLINE"
argument_list|,
literal|"0000:66:00.0"
argument_list|,
literal|244
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|defaultScriptOutput
operator|+=
literal|"\n"
expr_stmt|;
name|defaultScriptOutput
operator|+=
name|getOutputForDevice
argument_list|(
literal|2
argument_list|,
literal|"/dev/ve2"
argument_list|,
literal|"ONLINE"
argument_list|,
literal|"0000:67:00.0"
argument_list|,
literal|245
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCommandExecutor
operator|.
name|getOutput
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|defaultScriptOutput
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Device
argument_list|>
name|devices
init|=
name|plugin
operator|.
name|getDevices
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number of devices"
argument_list|,
literal|3
argument_list|,
name|devices
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Device
argument_list|>
name|devicesList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|devices
argument_list|)
decl_stmt|;
comment|// Sort devices by id
name|Collections
operator|.
name|sort
argument_list|(
name|devicesList
argument_list|,
name|DEVICE_COMPARATOR
argument_list|)
expr_stmt|;
name|Device
name|device0
init|=
name|devicesList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Device id"
argument_list|,
literal|0
argument_list|,
name|device0
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Device path"
argument_list|,
literal|"/dev/ve0"
argument_list|,
name|device0
operator|.
name|getDevPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bus Id"
argument_list|,
literal|"0000:65:00.0"
argument_list|,
name|device0
operator|.
name|getBusID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Status"
argument_list|,
literal|"ONLINE"
argument_list|,
name|device0
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Major number"
argument_list|,
literal|243
argument_list|,
name|device0
operator|.
name|getMajorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Minor number"
argument_list|,
literal|0
argument_list|,
name|device0
operator|.
name|getMinorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|Device
name|device1
init|=
name|devicesList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Device id"
argument_list|,
literal|1
argument_list|,
name|device1
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Device path"
argument_list|,
literal|"/dev/ve1"
argument_list|,
name|device1
operator|.
name|getDevPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bus Id"
argument_list|,
literal|"0000:66:00.0"
argument_list|,
name|device1
operator|.
name|getBusID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Status"
argument_list|,
literal|"ONLINE"
argument_list|,
name|device1
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Major number"
argument_list|,
literal|244
argument_list|,
name|device1
operator|.
name|getMajorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Minor number"
argument_list|,
literal|1
argument_list|,
name|device1
operator|.
name|getMinorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|Device
name|device2
init|=
name|devicesList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Device id"
argument_list|,
literal|2
argument_list|,
name|device2
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Device path"
argument_list|,
literal|"/dev/ve2"
argument_list|,
name|device2
operator|.
name|getDevPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bus Id"
argument_list|,
literal|"0000:67:00.0"
argument_list|,
name|device2
operator|.
name|getBusID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Status"
argument_list|,
literal|"ONLINE"
argument_list|,
name|device2
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Major number"
argument_list|,
literal|245
argument_list|,
name|device2
operator|.
name|getMajorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Minor number"
argument_list|,
literal|2
argument_list|,
name|device2
operator|.
name|getMinorNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOfflineDeviceIsSkipped ()
specifier|public
name|void
name|testOfflineDeviceIsSkipped
parameter_list|()
throws|throws
name|ResourceHandlerException
throws|,
name|IOException
block|{
name|setupTestDirectoryWithScript
argument_list|()
expr_stmt|;
name|plugin
operator|=
operator|new
name|NECVEPlugin
argument_list|(
name|envProvider
argument_list|,
name|defaultSearchDirs
argument_list|,
name|udevUtil
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|setCommandExecutorProvider
argument_list|(
name|commandExecutorProvider
argument_list|)
expr_stmt|;
name|defaultScriptOutput
operator|=
name|getOutputForDevice
argument_list|(
literal|0
argument_list|,
literal|"/dev/ve0"
argument_list|,
literal|"OFFLINE"
argument_list|,
literal|"0000:65:00.0"
argument_list|,
literal|243
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCommandExecutor
operator|.
name|getOutput
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|defaultScriptOutput
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Device
argument_list|>
name|devices
init|=
name|plugin
operator|.
name|getDevices
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number of devices"
argument_list|,
literal|0
argument_list|,
name|devices
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnparseableLineSkipped ()
specifier|public
name|void
name|testUnparseableLineSkipped
parameter_list|()
throws|throws
name|ResourceHandlerException
throws|,
name|IOException
block|{
name|setupTestDirectoryWithScript
argument_list|()
expr_stmt|;
name|plugin
operator|=
operator|new
name|NECVEPlugin
argument_list|(
name|envProvider
argument_list|,
name|defaultSearchDirs
argument_list|,
name|udevUtil
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|setCommandExecutorProvider
argument_list|(
name|commandExecutorProvider
argument_list|)
expr_stmt|;
name|defaultScriptOutput
operator|+=
literal|"\n"
expr_stmt|;
name|defaultScriptOutput
operator|+=
literal|"cannot,be,parsed\n"
expr_stmt|;
name|defaultScriptOutput
operator|+=
name|getOutputForDevice
argument_list|(
literal|1
argument_list|,
literal|"/dev/ve1"
argument_list|,
literal|"ONLINE"
argument_list|,
literal|"0000:66:00.0"
argument_list|,
literal|244
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCommandExecutor
operator|.
name|getOutput
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|defaultScriptOutput
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Device
argument_list|>
name|devices
init|=
name|plugin
operator|.
name|getDevices
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number of devices"
argument_list|,
literal|2
argument_list|,
name|devices
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Device
argument_list|>
name|devicesList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|devices
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|devicesList
argument_list|,
name|DEVICE_COMPARATOR
argument_list|)
expr_stmt|;
name|Device
name|device0
init|=
name|devicesList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Device id"
argument_list|,
literal|0
argument_list|,
name|device0
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Device path"
argument_list|,
literal|"/dev/ve0"
argument_list|,
name|device0
operator|.
name|getDevPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bus Id"
argument_list|,
literal|"0000:65:00.0"
argument_list|,
name|device0
operator|.
name|getBusID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Status"
argument_list|,
literal|"ONLINE"
argument_list|,
name|device0
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Major number"
argument_list|,
literal|243
argument_list|,
name|device0
operator|.
name|getMajorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Minor number"
argument_list|,
literal|0
argument_list|,
name|device0
operator|.
name|getMinorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|Device
name|device1
init|=
name|devicesList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Device id"
argument_list|,
literal|1
argument_list|,
name|device1
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Device path"
argument_list|,
literal|"/dev/ve1"
argument_list|,
name|device1
operator|.
name|getDevPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bus Id"
argument_list|,
literal|"0000:66:00.0"
argument_list|,
name|device1
operator|.
name|getBusID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Status"
argument_list|,
literal|"ONLINE"
argument_list|,
name|device1
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Major number"
argument_list|,
literal|244
argument_list|,
name|device1
operator|.
name|getMajorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Minor number"
argument_list|,
literal|1
argument_list|,
name|device1
operator|.
name|getMinorNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testScriptFoundWithDifferentName ()
specifier|public
name|void
name|testScriptFoundWithDifferentName
parameter_list|()
throws|throws
name|ResourceHandlerException
throws|,
name|IOException
block|{
name|setupTestDirectoryWithScript
argument_list|()
expr_stmt|;
specifier|final
name|String
name|dummyScriptName
init|=
literal|"dummy-script.py"
decl_stmt|;
name|Path
name|scriptPath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|testFolder
argument_list|,
name|dummyScriptName
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|scriptPath
argument_list|)
expr_stmt|;
name|Files
operator|.
name|delete
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|testFolder
argument_list|,
name|DEFAULT_SCRIPT_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
literal|"NEC_VE_GET_SCRIPT_NAME"
argument_list|,
name|dummyScriptName
argument_list|)
expr_stmt|;
name|plugin
operator|=
operator|new
name|NECVEPlugin
argument_list|(
name|envProvider
argument_list|,
name|defaultSearchDirs
argument_list|,
name|udevUtil
argument_list|)
expr_stmt|;
name|verifyBinaryPathSet
argument_list|(
name|scriptPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testScriptFoundWithExplicitPath ()
specifier|public
name|void
name|testScriptFoundWithExplicitPath
parameter_list|()
throws|throws
name|ResourceHandlerException
throws|,
name|IOException
block|{
name|setupTestDirectory
argument_list|(
literal|"_temp_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|scriptPath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|testFolder
argument_list|,
name|DEFAULT_SCRIPT_NAME
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|scriptPath
argument_list|)
expr_stmt|;
name|scriptPath
operator|.
name|toFile
argument_list|()
operator|.
name|setExecutable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Cannot set executable flag"
argument_list|,
name|scriptPath
operator|.
name|toFile
argument_list|()
operator|.
name|canExecute
argument_list|()
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
literal|"NEC_VE_GET_SCRIPT_PATH"
argument_list|,
name|testFolder
operator|+
literal|"/"
operator|+
name|DEFAULT_SCRIPT_NAME
argument_list|)
expr_stmt|;
name|plugin
operator|=
operator|new
name|NECVEPlugin
argument_list|(
name|envProvider
argument_list|,
name|EMPTY_SEARCH_DIRS
argument_list|,
name|udevUtil
argument_list|)
expr_stmt|;
name|verifyBinaryPathSet
argument_list|(
name|scriptPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ResourceHandlerException
operator|.
name|class
argument_list|)
DECL|method|testExplicitPathPointsToDirectory ()
specifier|public
name|void
name|testExplicitPathPointsToDirectory
parameter_list|()
throws|throws
name|ResourceHandlerException
throws|,
name|IOException
block|{
name|setupTestDirectory
argument_list|(
literal|"_temp_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
literal|"NEC_VE_GET_SCRIPT_PATH"
argument_list|,
name|testFolder
argument_list|)
expr_stmt|;
name|plugin
operator|=
operator|new
name|NECVEPlugin
argument_list|(
name|envProvider
argument_list|,
name|EMPTY_SEARCH_DIRS
argument_list|,
name|udevUtil
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ResourceHandlerException
operator|.
name|class
argument_list|)
DECL|method|testExplicitPathIsNotExecutable ()
specifier|public
name|void
name|testExplicitPathIsNotExecutable
parameter_list|()
throws|throws
name|ResourceHandlerException
throws|,
name|IOException
block|{
name|setupTestDirectory
argument_list|(
literal|"_temp_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|scriptPath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|testFolder
argument_list|,
name|DEFAULT_SCRIPT_NAME
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|scriptPath
argument_list|)
expr_stmt|;
name|scriptPath
operator|.
name|toFile
argument_list|()
operator|.
name|setExecutable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"File is executable"
argument_list|,
name|scriptPath
operator|.
name|toFile
argument_list|()
operator|.
name|canExecute
argument_list|()
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
literal|"NEC_VE_GET_SCRIPT_PATH"
argument_list|,
name|testFolder
operator|+
literal|"/"
operator|+
name|DEFAULT_SCRIPT_NAME
argument_list|)
expr_stmt|;
name|plugin
operator|=
operator|new
name|NECVEPlugin
argument_list|(
name|envProvider
argument_list|,
name|EMPTY_SEARCH_DIRS
argument_list|,
name|udevUtil
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testScriptFoundUnderHadoopCommonPath ()
specifier|public
name|void
name|testScriptFoundUnderHadoopCommonPath
parameter_list|()
throws|throws
name|ResourceHandlerException
throws|,
name|IOException
block|{
name|setupTestDirectory
argument_list|(
literal|"_temp_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|p
init|=
name|Paths
operator|.
name|get
argument_list|(
name|testFolder
argument_list|,
literal|"/sbin/DevicePluginScript"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Path
name|scriptPath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|testFolder
argument_list|,
literal|"/sbin/DevicePluginScript"
argument_list|,
name|DEFAULT_SCRIPT_NAME
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|scriptPath
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
literal|"HADOOP_COMMON_HOME"
argument_list|,
name|testFolder
argument_list|)
expr_stmt|;
name|plugin
operator|=
operator|new
name|NECVEPlugin
argument_list|(
name|envProvider
argument_list|,
name|EMPTY_SEARCH_DIRS
argument_list|,
name|udevUtil
argument_list|)
expr_stmt|;
name|verifyBinaryPathSet
argument_list|(
name|scriptPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testScriptFoundUnderBasicSearchDirs ()
specifier|public
name|void
name|testScriptFoundUnderBasicSearchDirs
parameter_list|()
throws|throws
name|ResourceHandlerException
throws|,
name|IOException
block|{
name|setupTestDirectoryWithScript
argument_list|()
expr_stmt|;
name|plugin
operator|=
operator|new
name|NECVEPlugin
argument_list|(
name|envProvider
argument_list|,
name|defaultSearchDirs
argument_list|,
name|udevUtil
argument_list|)
expr_stmt|;
name|Path
name|scriptPath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|testFolder
argument_list|,
name|DEFAULT_SCRIPT_NAME
argument_list|)
decl_stmt|;
name|verifyBinaryPathSet
argument_list|(
name|scriptPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocateSingleDevice ()
specifier|public
name|void
name|testAllocateSingleDevice
parameter_list|()
throws|throws
name|ResourceHandlerException
throws|,
name|IOException
block|{
name|setupTestDirectoryWithScript
argument_list|()
expr_stmt|;
name|plugin
operator|=
operator|new
name|NECVEPlugin
argument_list|(
name|envProvider
argument_list|,
name|defaultSearchDirs
argument_list|,
name|udevUtil
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Device
argument_list|>
name|available
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Device
name|device
init|=
name|getTestDevice
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|available
operator|.
name|add
argument_list|(
name|device
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Device
argument_list|>
name|allocated
init|=
name|plugin
operator|.
name|allocateDevices
argument_list|(
name|available
argument_list|,
literal|1
argument_list|,
name|env
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"No. of devices"
argument_list|,
literal|1
argument_list|,
name|allocated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Device
name|allocatedDevice
init|=
name|allocated
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
literal|"Device"
argument_list|,
name|device
argument_list|,
name|allocatedDevice
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocateMultipleDevices ()
specifier|public
name|void
name|testAllocateMultipleDevices
parameter_list|()
throws|throws
name|ResourceHandlerException
throws|,
name|IOException
block|{
name|setupTestDirectoryWithScript
argument_list|()
expr_stmt|;
name|plugin
operator|=
operator|new
name|NECVEPlugin
argument_list|(
name|envProvider
argument_list|,
name|defaultSearchDirs
argument_list|,
name|udevUtil
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Device
argument_list|>
name|available
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Device
name|device0
init|=
name|getTestDevice
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Device
name|device1
init|=
name|getTestDevice
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|available
operator|.
name|add
argument_list|(
name|device0
argument_list|)
expr_stmt|;
name|available
operator|.
name|add
argument_list|(
name|device1
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Device
argument_list|>
name|allocated
init|=
name|plugin
operator|.
name|allocateDevices
argument_list|(
name|available
argument_list|,
literal|2
argument_list|,
name|env
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"No. of devices"
argument_list|,
literal|2
argument_list|,
name|allocated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Device missing"
argument_list|,
name|allocated
operator|.
name|contains
argument_list|(
name|device0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Device missing"
argument_list|,
name|allocated
operator|.
name|contains
argument_list|(
name|device1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindDevicesWithUdev ()
specifier|public
name|void
name|testFindDevicesWithUdev
parameter_list|()
throws|throws
name|ResourceHandlerException
throws|,
name|IOException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Function
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mockEnvProvider
init|=
name|mock
argument_list|(
name|Function
operator|.
name|class
argument_list|)
decl_stmt|;
name|VEDeviceDiscoverer
name|veDeviceDiscoverer
init|=
name|mock
argument_list|(
name|VEDeviceDiscoverer
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockEnvProvider
operator|.
name|apply
argument_list|(
name|eq
argument_list|(
literal|"NEC_USE_UDEV"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|Device
name|testDevice
init|=
name|getTestDevice
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|veDeviceDiscoverer
operator|.
name|getDevicesFromPath
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|testDevice
argument_list|)
argument_list|)
expr_stmt|;
name|plugin
operator|=
operator|new
name|NECVEPlugin
argument_list|(
name|mockEnvProvider
argument_list|,
name|defaultSearchDirs
argument_list|,
name|udevUtil
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|setVeDeviceDiscoverer
argument_list|(
name|veDeviceDiscoverer
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Device
argument_list|>
name|devices
init|=
name|plugin
operator|.
name|getDevices
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"No. of devices"
argument_list|,
literal|1
argument_list|,
name|devices
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Device
name|device
init|=
name|devices
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
literal|"Device"
argument_list|,
name|device
argument_list|,
name|testDevice
argument_list|)
expr_stmt|;
name|verifyZeroInteractions
argument_list|(
name|mockCommandExecutor
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockEnvProvider
argument_list|)
operator|.
name|apply
argument_list|(
name|eq
argument_list|(
literal|"NEC_USE_UDEV"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|mockEnvProvider
argument_list|)
expr_stmt|;
block|}
DECL|method|setupTestDirectoryWithScript ()
specifier|private
name|void
name|setupTestDirectoryWithScript
parameter_list|()
throws|throws
name|IOException
block|{
name|setupTestDirectory
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|testFolder
argument_list|,
name|DEFAULT_SCRIPT_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getOutputForDevice (int id, String devPath, String state, String busId, int major, int minor)
specifier|private
name|String
name|getOutputForDevice
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|devPath
parameter_list|,
name|String
name|state
parameter_list|,
name|String
name|busId
parameter_list|,
name|int
name|major
parameter_list|,
name|int
name|minor
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"id=%d, dev=%s, state=%s, busId=%s, major=%d, minor=%d"
argument_list|,
name|id
argument_list|,
name|devPath
argument_list|,
name|state
argument_list|,
name|busId
argument_list|,
name|major
argument_list|,
name|minor
argument_list|)
return|;
block|}
DECL|method|setupTestDirectory (String postFix)
specifier|private
name|void
name|setupTestDirectory
parameter_list|(
name|String
name|postFix
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|path
init|=
literal|"target/temp/"
operator|+
name|TestNECVEPlugin
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|postFix
operator|==
literal|null
condition|?
literal|""
else|:
name|postFix
operator|)
decl_stmt|;
name|testFolder
operator|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|testFolder
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not create directory: "
operator|+
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
name|defaultSearchDirs
operator|=
operator|new
name|String
index|[]
block|{
name|testFolder
block|}
expr_stmt|;
block|}
DECL|method|getTestDevice (int id)
specifier|private
name|Device
name|getTestDevice
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|Device
operator|.
name|Builder
name|builder
init|=
name|Device
operator|.
name|Builder
operator|.
name|newInstance
argument_list|()
decl_stmt|;
return|return
name|builder
operator|.
name|setId
argument_list|(
name|id
argument_list|)
operator|.
name|setDevPath
argument_list|(
literal|"/mock/path"
argument_list|)
operator|.
name|setMajorNumber
argument_list|(
literal|200
argument_list|)
operator|.
name|setMinorNumber
argument_list|(
name|id
argument_list|)
operator|.
name|setBusID
argument_list|(
literal|"0000:66:00.0"
argument_list|)
operator|.
name|setHealthy
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|verifyBinaryPathSet (Path expectedPath)
specifier|private
name|void
name|verifyBinaryPathSet
parameter_list|(
name|Path
name|expectedPath
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Binary path"
argument_list|,
name|expectedPath
operator|.
name|toString
argument_list|()
argument_list|,
name|plugin
operator|.
name|getBinaryPath
argument_list|()
argument_list|)
expr_stmt|;
name|verifyZeroInteractions
argument_list|(
name|udevUtil
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

