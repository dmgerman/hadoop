begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.deviceframework
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|deviceframework
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|ServiceOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|Device
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|DevicePlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|DevicePluginScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|DeviceRegisterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|DeviceRuntimeSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|YarnRuntimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ResourceMappings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|CGroupsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|ResourceHandlerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|ResourcePluginManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|runtime
operator|.
name|ContainerRuntimeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMMemoryStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|NMDeviceResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|TestResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|isA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doNothing
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_comment
comment|/**  * Unit tests for DevicePluginAdapter.  * About interaction with vendor plugin  * */
end_comment

begin_class
DECL|class|TestDevicePluginAdapter
specifier|public
class|class
name|TestDevicePluginAdapter
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestDevicePluginAdapter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|YarnConfiguration
name|conf
decl_stmt|;
DECL|field|tempResourceTypesFile
specifier|private
name|String
name|tempResourceTypesFile
decl_stmt|;
DECL|field|mockCGroupsHandler
specifier|private
name|CGroupsHandler
name|mockCGroupsHandler
decl_stmt|;
DECL|field|mockPrivilegedExecutor
specifier|private
name|PrivilegedOperationExecutor
name|mockPrivilegedExecutor
decl_stmt|;
DECL|field|nm
specifier|private
name|NodeManager
name|nm
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
comment|// setup resource-types.xml
name|ResourceUtils
operator|.
name|resetResourceTypes
argument_list|()
expr_stmt|;
name|String
name|resourceTypesFile
init|=
literal|"resource-types-pluggable-devices.xml"
decl_stmt|;
name|this
operator|.
name|tempResourceTypesFile
operator|=
name|TestResourceUtils
operator|.
name|setupResourceTypes
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|resourceTypesFile
argument_list|)
expr_stmt|;
name|mockCGroupsHandler
operator|=
name|mock
argument_list|(
name|CGroupsHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|mockPrivilegedExecutor
operator|=
name|mock
argument_list|(
name|PrivilegedOperationExecutor
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
comment|// cleanup resource-types.xml
name|File
name|dest
init|=
operator|new
name|File
argument_list|(
name|this
operator|.
name|tempResourceTypesFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|dest
operator|.
name|exists
argument_list|()
condition|)
block|{
name|dest
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|nm
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ServiceOperations
operator|.
name|stop
argument_list|(
name|nm
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
comment|/**    * Use the MyPlugin which implement {@code DevicePlugin}.    * Plugin's initialization is tested in TestResourcePluginManager    * */
annotation|@
name|Test
DECL|method|testBasicWorkflow ()
specifier|public
name|void
name|testBasicWorkflow
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|NodeManager
operator|.
name|NMContext
name|context
init|=
name|mock
argument_list|(
name|NodeManager
operator|.
name|NMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|NMStateStoreService
name|storeService
init|=
name|mock
argument_list|(
name|NMStateStoreService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getNMStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|storeService
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|storeService
argument_list|)
operator|.
name|storeAssignedResources
argument_list|(
name|isA
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Init scheduler manager
name|DeviceMappingManager
name|dmm
init|=
operator|new
name|DeviceMappingManager
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|ResourcePluginManager
name|rpm
init|=
name|mock
argument_list|(
name|ResourcePluginManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rpm
operator|.
name|getDeviceMappingManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dmm
argument_list|)
expr_stmt|;
comment|// Init an plugin
name|MyPlugin
name|plugin
init|=
operator|new
name|MyPlugin
argument_list|()
decl_stmt|;
name|MyPlugin
name|spyPlugin
init|=
name|spy
argument_list|(
name|plugin
argument_list|)
decl_stmt|;
name|String
name|resourceName
init|=
name|MyPlugin
operator|.
name|RESOURCE_NAME
decl_stmt|;
comment|// Init an adapter for the plugin
name|DevicePluginAdapter
name|adapter
init|=
operator|new
name|DevicePluginAdapter
argument_list|(
name|resourceName
argument_list|,
name|spyPlugin
argument_list|,
name|dmm
argument_list|)
decl_stmt|;
comment|// Bootstrap, adding device
name|adapter
operator|.
name|initialize
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|createResourceHandler
argument_list|(
name|context
argument_list|,
name|mockCGroupsHandler
argument_list|,
name|mockPrivilegedExecutor
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|getDeviceResourceHandler
argument_list|()
operator|.
name|bootstrap
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|dmm
operator|.
name|getAvailableDevices
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|size
argument_list|)
expr_stmt|;
comment|// A container c1 requests 1 device
name|Container
name|c1
init|=
name|mockContainerWithDeviceRequest
argument_list|(
literal|0
argument_list|,
name|resourceName
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// preStart
name|adapter
operator|.
name|getDeviceResourceHandler
argument_list|()
operator|.
name|preStart
argument_list|(
name|c1
argument_list|)
expr_stmt|;
comment|// check book keeping
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dmm
operator|.
name|getAvailableDevices
argument_list|(
name|resourceName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dmm
operator|.
name|getAllUsedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|dmm
operator|.
name|getAllAllowedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// postComplete
name|adapter
operator|.
name|getDeviceResourceHandler
argument_list|()
operator|.
name|postComplete
argument_list|(
name|getContainerId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|dmm
operator|.
name|getAvailableDevices
argument_list|(
name|resourceName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dmm
operator|.
name|getAllUsedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|dmm
operator|.
name|getAllAllowedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// A container c2 requests 3 device
name|Container
name|c2
init|=
name|mockContainerWithDeviceRequest
argument_list|(
literal|1
argument_list|,
name|resourceName
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// preStart
name|adapter
operator|.
name|getDeviceResourceHandler
argument_list|()
operator|.
name|preStart
argument_list|(
name|c2
argument_list|)
expr_stmt|;
comment|// check book keeping
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dmm
operator|.
name|getAvailableDevices
argument_list|(
name|resourceName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|dmm
operator|.
name|getAllUsedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|dmm
operator|.
name|getAllAllowedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// postComplete
name|adapter
operator|.
name|getDeviceResourceHandler
argument_list|()
operator|.
name|postComplete
argument_list|(
name|getContainerId
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|dmm
operator|.
name|getAvailableDevices
argument_list|(
name|resourceName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dmm
operator|.
name|getAllUsedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|dmm
operator|.
name|getAllAllowedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// A container c3 request 0 device
name|Container
name|c3
init|=
name|mockContainerWithDeviceRequest
argument_list|(
literal|1
argument_list|,
name|resourceName
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// preStart
name|adapter
operator|.
name|getDeviceResourceHandler
argument_list|()
operator|.
name|preStart
argument_list|(
name|c3
argument_list|)
expr_stmt|;
comment|// check book keeping
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|dmm
operator|.
name|getAvailableDevices
argument_list|(
name|resourceName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dmm
operator|.
name|getAllUsedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|dmm
operator|.
name|getAllAllowedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// postComplete
name|adapter
operator|.
name|getDeviceResourceHandler
argument_list|()
operator|.
name|postComplete
argument_list|(
name|getContainerId
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|dmm
operator|.
name|getAvailableDevices
argument_list|(
name|resourceName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dmm
operator|.
name|getAllUsedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|dmm
operator|.
name|getAllAllowedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeviceResourceUpdaterImpl ()
specifier|public
name|void
name|testDeviceResourceUpdaterImpl
parameter_list|()
throws|throws
name|YarnException
block|{
name|Resource
name|nodeResource
init|=
name|mock
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
decl_stmt|;
name|NodeManager
operator|.
name|NMContext
name|context
init|=
name|mock
argument_list|(
name|NodeManager
operator|.
name|NMContext
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Init an plugin
name|MyPlugin
name|plugin
init|=
operator|new
name|MyPlugin
argument_list|()
decl_stmt|;
name|MyPlugin
name|spyPlugin
init|=
name|spy
argument_list|(
name|plugin
argument_list|)
decl_stmt|;
name|String
name|resourceName
init|=
name|MyPlugin
operator|.
name|RESOURCE_NAME
decl_stmt|;
comment|// Init scheduler manager
name|DeviceMappingManager
name|dmm
init|=
operator|new
name|DeviceMappingManager
argument_list|(
name|context
argument_list|)
decl_stmt|;
comment|// Init an adapter for the plugin
name|DevicePluginAdapter
name|adapter
init|=
operator|new
name|DevicePluginAdapter
argument_list|(
name|resourceName
argument_list|,
name|spyPlugin
argument_list|,
name|dmm
argument_list|)
decl_stmt|;
name|adapter
operator|.
name|initialize
argument_list|(
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|getNodeResourceHandlerInstance
argument_list|()
operator|.
name|updateConfiguredResource
argument_list|(
name|nodeResource
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spyPlugin
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getDevices
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|nodeResource
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|setResourceValue
argument_list|(
name|resourceName
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStoreDeviceSchedulerManagerState ()
specifier|public
name|void
name|testStoreDeviceSchedulerManagerState
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|NodeManager
operator|.
name|NMContext
name|context
init|=
name|mock
argument_list|(
name|NodeManager
operator|.
name|NMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|NMStateStoreService
name|realStoreService
init|=
operator|new
name|NMMemoryStateStoreService
argument_list|()
decl_stmt|;
name|NMStateStoreService
name|storeService
init|=
name|spy
argument_list|(
name|realStoreService
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getNMStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|storeService
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|storeService
argument_list|)
operator|.
name|storeAssignedResources
argument_list|(
name|isA
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Init scheduler manager
name|DeviceMappingManager
name|dmm
init|=
operator|new
name|DeviceMappingManager
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|ResourcePluginManager
name|rpm
init|=
name|mock
argument_list|(
name|ResourcePluginManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rpm
operator|.
name|getDeviceMappingManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dmm
argument_list|)
expr_stmt|;
comment|// Init an plugin
name|MyPlugin
name|plugin
init|=
operator|new
name|MyPlugin
argument_list|()
decl_stmt|;
name|MyPlugin
name|spyPlugin
init|=
name|spy
argument_list|(
name|plugin
argument_list|)
decl_stmt|;
name|String
name|resourceName
init|=
name|MyPlugin
operator|.
name|RESOURCE_NAME
decl_stmt|;
comment|// Init an adapter for the plugin
name|DevicePluginAdapter
name|adapter
init|=
operator|new
name|DevicePluginAdapter
argument_list|(
name|resourceName
argument_list|,
name|spyPlugin
argument_list|,
name|dmm
argument_list|)
decl_stmt|;
comment|// Bootstrap, adding device
name|adapter
operator|.
name|initialize
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|createResourceHandler
argument_list|(
name|context
argument_list|,
name|mockCGroupsHandler
argument_list|,
name|mockPrivilegedExecutor
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|getDeviceResourceHandler
argument_list|()
operator|.
name|bootstrap
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// A container c0 requests 1 device
name|Container
name|c0
init|=
name|mockContainerWithDeviceRequest
argument_list|(
literal|0
argument_list|,
name|resourceName
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// preStart
name|adapter
operator|.
name|getDeviceResourceHandler
argument_list|()
operator|.
name|preStart
argument_list|(
name|c0
argument_list|)
expr_stmt|;
comment|// ensure container1's resource is persistent
name|verify
argument_list|(
name|storeService
argument_list|)
operator|.
name|storeAssignedResources
argument_list|(
name|c0
argument_list|,
name|resourceName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|Device
operator|.
name|Builder
operator|.
name|newInstance
argument_list|()
operator|.
name|setId
argument_list|(
literal|0
argument_list|)
operator|.
name|setDevPath
argument_list|(
literal|"/dev/hdwA0"
argument_list|)
operator|.
name|setMajorNumber
argument_list|(
literal|256
argument_list|)
operator|.
name|setMinorNumber
argument_list|(
literal|0
argument_list|)
operator|.
name|setBusID
argument_list|(
literal|"0000:80:00.0"
argument_list|)
operator|.
name|setHealthy
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRecoverDeviceSchedulerManagerState ()
specifier|public
name|void
name|testRecoverDeviceSchedulerManagerState
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|NodeManager
operator|.
name|NMContext
name|context
init|=
name|mock
argument_list|(
name|NodeManager
operator|.
name|NMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|NMStateStoreService
name|realStoreService
init|=
operator|new
name|NMMemoryStateStoreService
argument_list|()
decl_stmt|;
name|NMStateStoreService
name|storeService
init|=
name|spy
argument_list|(
name|realStoreService
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getNMStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|storeService
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|storeService
argument_list|)
operator|.
name|storeAssignedResources
argument_list|(
name|isA
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Init scheduler manager
name|DeviceMappingManager
name|dmm
init|=
operator|new
name|DeviceMappingManager
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|ResourcePluginManager
name|rpm
init|=
name|mock
argument_list|(
name|ResourcePluginManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rpm
operator|.
name|getDeviceMappingManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dmm
argument_list|)
expr_stmt|;
comment|// Init an plugin
name|MyPlugin
name|plugin
init|=
operator|new
name|MyPlugin
argument_list|()
decl_stmt|;
name|MyPlugin
name|spyPlugin
init|=
name|spy
argument_list|(
name|plugin
argument_list|)
decl_stmt|;
name|String
name|resourceName
init|=
name|MyPlugin
operator|.
name|RESOURCE_NAME
decl_stmt|;
comment|// Init an adapter for the plugin
name|DevicePluginAdapter
name|adapter
init|=
operator|new
name|DevicePluginAdapter
argument_list|(
name|resourceName
argument_list|,
name|spyPlugin
argument_list|,
name|dmm
argument_list|)
decl_stmt|;
comment|// Bootstrap, adding device
name|adapter
operator|.
name|initialize
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|createResourceHandler
argument_list|(
name|context
argument_list|,
name|mockCGroupsHandler
argument_list|,
name|mockPrivilegedExecutor
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|getDeviceResourceHandler
argument_list|()
operator|.
name|bootstrap
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|dmm
operator|.
name|getAllAllowedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// mock NMStateStore
name|Device
name|storedDevice
init|=
name|Device
operator|.
name|Builder
operator|.
name|newInstance
argument_list|()
operator|.
name|setId
argument_list|(
literal|0
argument_list|)
operator|.
name|setDevPath
argument_list|(
literal|"/dev/hdwA0"
argument_list|)
operator|.
name|setMajorNumber
argument_list|(
literal|256
argument_list|)
operator|.
name|setMinorNumber
argument_list|(
literal|0
argument_list|)
operator|.
name|setBusID
argument_list|(
literal|"0000:80:00.0"
argument_list|)
operator|.
name|setHealthy
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ConcurrentHashMap
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
name|runningContainersMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Container
name|nmContainer
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|ResourceMappings
name|rmap
init|=
operator|new
name|ResourceMappings
argument_list|()
decl_stmt|;
name|ResourceMappings
operator|.
name|AssignedResources
name|ar
init|=
operator|new
name|ResourceMappings
operator|.
name|AssignedResources
argument_list|()
decl_stmt|;
name|ar
operator|.
name|updateAssignedResources
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|storedDevice
argument_list|)
argument_list|)
expr_stmt|;
name|rmap
operator|.
name|addAssignedResources
argument_list|(
name|resourceName
argument_list|,
name|ar
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nmContainer
operator|.
name|getResourceMappings
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rmap
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|runningContainersMap
argument_list|)
expr_stmt|;
comment|// Test case 1. c0 get recovered. scheduler state restored
name|runningContainersMap
operator|.
name|put
argument_list|(
name|getContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|nmContainer
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|getDeviceResourceHandler
argument_list|()
operator|.
name|reacquireContainer
argument_list|(
name|getContainerId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|dmm
operator|.
name|getAllAllowedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dmm
operator|.
name|getAllUsedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dmm
operator|.
name|getAvailableDevices
argument_list|(
name|resourceName
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Device
argument_list|,
name|ContainerId
argument_list|>
name|used
init|=
name|dmm
operator|.
name|getAllUsedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|used
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
name|storedDevice
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test case 2. c1 wants get recovered.
comment|// But stored device is already allocated to c2
name|nmContainer
operator|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
expr_stmt|;
name|rmap
operator|=
operator|new
name|ResourceMappings
argument_list|()
expr_stmt|;
name|ar
operator|=
operator|new
name|ResourceMappings
operator|.
name|AssignedResources
argument_list|()
expr_stmt|;
name|ar
operator|.
name|updateAssignedResources
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|storedDevice
argument_list|)
argument_list|)
expr_stmt|;
name|rmap
operator|.
name|addAssignedResources
argument_list|(
name|resourceName
argument_list|,
name|ar
argument_list|)
expr_stmt|;
comment|// already assigned to c1
name|runningContainersMap
operator|.
name|put
argument_list|(
name|getContainerId
argument_list|(
literal|2
argument_list|)
argument_list|,
name|nmContainer
argument_list|)
expr_stmt|;
name|boolean
name|caughtException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|adapter
operator|.
name|getDeviceResourceHandler
argument_list|()
operator|.
name|reacquireContainer
argument_list|(
name|getContainerId
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceHandlerException
name|e
parameter_list|)
block|{
name|caughtException
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should fail since requested device is assigned already"
argument_list|,
name|caughtException
argument_list|)
expr_stmt|;
comment|// don't affect c0 allocation state
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|dmm
operator|.
name|getAllAllowedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dmm
operator|.
name|getAllUsedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dmm
operator|.
name|getAvailableDevices
argument_list|(
name|resourceName
argument_list|)
argument_list|)
expr_stmt|;
name|used
operator|=
name|dmm
operator|.
name|getAllUsedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|used
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
name|storedDevice
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAssignedDeviceCleanupWhenStoreOpFails ()
specifier|public
name|void
name|testAssignedDeviceCleanupWhenStoreOpFails
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|NodeManager
operator|.
name|NMContext
name|context
init|=
name|mock
argument_list|(
name|NodeManager
operator|.
name|NMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|NMStateStoreService
name|realStoreService
init|=
operator|new
name|NMMemoryStateStoreService
argument_list|()
decl_stmt|;
name|NMStateStoreService
name|storeService
init|=
name|spy
argument_list|(
name|realStoreService
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getNMStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|storeService
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Exception ..."
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|storeService
argument_list|)
operator|.
name|storeAssignedResources
argument_list|(
name|isA
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Init scheduler manager
name|DeviceMappingManager
name|dmm
init|=
operator|new
name|DeviceMappingManager
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|ResourcePluginManager
name|rpm
init|=
name|mock
argument_list|(
name|ResourcePluginManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rpm
operator|.
name|getDeviceMappingManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dmm
argument_list|)
expr_stmt|;
comment|// Init an plugin
name|MyPlugin
name|plugin
init|=
operator|new
name|MyPlugin
argument_list|()
decl_stmt|;
name|MyPlugin
name|spyPlugin
init|=
name|spy
argument_list|(
name|plugin
argument_list|)
decl_stmt|;
name|String
name|resourceName
init|=
name|MyPlugin
operator|.
name|RESOURCE_NAME
decl_stmt|;
comment|// Init an adapter for the plugin
name|DevicePluginAdapter
name|adapter
init|=
operator|new
name|DevicePluginAdapter
argument_list|(
name|resourceName
argument_list|,
name|spyPlugin
argument_list|,
name|dmm
argument_list|)
decl_stmt|;
comment|// Bootstrap, adding device
name|adapter
operator|.
name|initialize
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|createResourceHandler
argument_list|(
name|context
argument_list|,
name|mockCGroupsHandler
argument_list|,
name|mockPrivilegedExecutor
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|getDeviceResourceHandler
argument_list|()
operator|.
name|bootstrap
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// A container c0 requests 1 device
name|Container
name|c0
init|=
name|mockContainerWithDeviceRequest
argument_list|(
literal|0
argument_list|,
name|resourceName
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// preStart
name|boolean
name|exception
init|=
literal|false
decl_stmt|;
try|try
block|{
name|adapter
operator|.
name|getDeviceResourceHandler
argument_list|()
operator|.
name|preStart
argument_list|(
name|c0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceHandlerException
name|e
parameter_list|)
block|{
name|exception
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should throw exception in preStart"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
comment|// no device assigned
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|dmm
operator|.
name|getAllAllowedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dmm
operator|.
name|getAllUsedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|dmm
operator|.
name|getAvailableDevices
argument_list|(
name|resourceName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreferPluginScheduler ()
specifier|public
name|void
name|testPreferPluginScheduler
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|NodeManager
operator|.
name|NMContext
name|context
init|=
name|mock
argument_list|(
name|NodeManager
operator|.
name|NMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|NMStateStoreService
name|storeService
init|=
name|mock
argument_list|(
name|NMStateStoreService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getNMStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|storeService
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|storeService
argument_list|)
operator|.
name|storeAssignedResources
argument_list|(
name|isA
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Init scheduler manager
name|DeviceMappingManager
name|dmm
init|=
operator|new
name|DeviceMappingManager
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|ResourcePluginManager
name|rpm
init|=
name|mock
argument_list|(
name|ResourcePluginManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rpm
operator|.
name|getDeviceMappingManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dmm
argument_list|)
expr_stmt|;
comment|// Init an plugin
name|MyPlugin
name|plugin
init|=
operator|new
name|MyPlugin
argument_list|()
decl_stmt|;
name|MyPlugin
name|spyPlugin
init|=
name|spy
argument_list|(
name|plugin
argument_list|)
decl_stmt|;
name|String
name|resourceName
init|=
name|MyPlugin
operator|.
name|RESOURCE_NAME
decl_stmt|;
comment|// Add plugin to DeviceMappingManager
name|dmm
operator|.
name|getDevicePluginSchedulers
argument_list|()
operator|.
name|put
argument_list|(
name|MyPlugin
operator|.
name|RESOURCE_NAME
argument_list|,
name|spyPlugin
argument_list|)
expr_stmt|;
comment|// Init an adapter for the plugin
name|DevicePluginAdapter
name|adapter
init|=
operator|new
name|DevicePluginAdapter
argument_list|(
name|resourceName
argument_list|,
name|spyPlugin
argument_list|,
name|dmm
argument_list|)
decl_stmt|;
comment|// Bootstrap, adding device
name|adapter
operator|.
name|initialize
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|createResourceHandler
argument_list|(
name|context
argument_list|,
name|mockCGroupsHandler
argument_list|,
name|mockPrivilegedExecutor
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|getDeviceResourceHandler
argument_list|()
operator|.
name|bootstrap
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|dmm
operator|.
name|getAvailableDevices
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|size
argument_list|)
expr_stmt|;
comment|// A container c1 requests 1 device
name|Container
name|c1
init|=
name|mockContainerWithDeviceRequest
argument_list|(
literal|0
argument_list|,
name|resourceName
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// preStart
name|adapter
operator|.
name|getDeviceResourceHandler
argument_list|()
operator|.
name|preStart
argument_list|(
name|c1
argument_list|)
expr_stmt|;
comment|// Use customized scheduler
name|verify
argument_list|(
name|spyPlugin
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|allocateDevices
argument_list|(
name|any
argument_list|(
name|Set
operator|.
name|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dmm
operator|.
name|getAvailableDevices
argument_list|(
name|resourceName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dmm
operator|.
name|getAllUsedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|dmm
operator|.
name|getAllAllowedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|mockContainerWithDeviceRequest (int id, String resourceName, int numDeviceRequest, boolean dockerContainerEnabled)
specifier|private
specifier|static
name|Container
name|mockContainerWithDeviceRequest
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|resourceName
parameter_list|,
name|int
name|numDeviceRequest
parameter_list|,
name|boolean
name|dockerContainerEnabled
parameter_list|)
block|{
name|Container
name|c
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getContainerId
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|Resource
name|res
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ResourceMappings
name|resMapping
init|=
operator|new
name|ResourceMappings
argument_list|()
decl_stmt|;
name|res
operator|.
name|setResourceValue
argument_list|(
name|resourceName
argument_list|,
name|numDeviceRequest
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getResourceMappings
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resMapping
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|clc
init|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|dockerContainerEnabled
condition|)
block|{
name|env
operator|.
name|put
argument_list|(
name|ContainerRuntimeConstants
operator|.
name|ENV_CONTAINER_TYPE
argument_list|,
name|ContainerRuntimeConstants
operator|.
name|CONTAINER_RUNTIME_DOCKER
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|clc
operator|.
name|getEnvironment
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getLaunchContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clc
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
comment|/**    * Ensure correct return value generated.    * */
annotation|@
name|Test
DECL|method|testNMResourceInfoRESTAPI ()
specifier|public
name|void
name|testNMResourceInfoRESTAPI
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|NodeManager
operator|.
name|NMContext
name|context
init|=
name|mock
argument_list|(
name|NodeManager
operator|.
name|NMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|NMStateStoreService
name|storeService
init|=
name|mock
argument_list|(
name|NMStateStoreService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getNMStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|storeService
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|storeService
argument_list|)
operator|.
name|storeAssignedResources
argument_list|(
name|isA
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Init scheduler manager
name|DeviceMappingManager
name|dmm
init|=
operator|new
name|DeviceMappingManager
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|ResourcePluginManager
name|rpm
init|=
name|mock
argument_list|(
name|ResourcePluginManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rpm
operator|.
name|getDeviceMappingManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dmm
argument_list|)
expr_stmt|;
comment|// Init an plugin
name|MyPlugin
name|plugin
init|=
operator|new
name|MyPlugin
argument_list|()
decl_stmt|;
name|MyPlugin
name|spyPlugin
init|=
name|spy
argument_list|(
name|plugin
argument_list|)
decl_stmt|;
name|String
name|resourceName
init|=
name|MyPlugin
operator|.
name|RESOURCE_NAME
decl_stmt|;
comment|// Init an adapter for the plugin
name|DevicePluginAdapter
name|adapter
init|=
operator|new
name|DevicePluginAdapter
argument_list|(
name|resourceName
argument_list|,
name|spyPlugin
argument_list|,
name|dmm
argument_list|)
decl_stmt|;
comment|// Bootstrap, adding device
name|adapter
operator|.
name|initialize
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|createResourceHandler
argument_list|(
name|context
argument_list|,
name|mockCGroupsHandler
argument_list|,
name|mockPrivilegedExecutor
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|getDeviceResourceHandler
argument_list|()
operator|.
name|bootstrap
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|dmm
operator|.
name|getAvailableDevices
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|size
argument_list|)
expr_stmt|;
comment|// A container c1 requests 1 device
name|Container
name|c1
init|=
name|mockContainerWithDeviceRequest
argument_list|(
literal|0
argument_list|,
name|resourceName
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// preStart
name|adapter
operator|.
name|getDeviceResourceHandler
argument_list|()
operator|.
name|preStart
argument_list|(
name|c1
argument_list|)
expr_stmt|;
comment|// check book keeping
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dmm
operator|.
name|getAvailableDevices
argument_list|(
name|resourceName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dmm
operator|.
name|getAllUsedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|dmm
operator|.
name|getAllAllowedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// get REST return value
name|NMDeviceResourceInfo
name|response
init|=
operator|(
name|NMDeviceResourceInfo
operator|)
name|adapter
operator|.
name|getNMResourceInfo
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getAssignedDevices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|response
operator|.
name|getTotalDevices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Device
name|device
init|=
name|response
operator|.
name|getAssignedDevices
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDevice
argument_list|()
decl_stmt|;
name|String
name|cId
init|=
name|response
operator|.
name|getAssignedDevices
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dmm
operator|.
name|getAllAllowedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|contains
argument_list|(
name|device
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dmm
operator|.
name|getAllUsedDevices
argument_list|()
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|containsValue
argument_list|(
name|ContainerId
operator|.
name|fromString
argument_list|(
name|cId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//finish container
name|adapter
operator|.
name|getDeviceResourceHandler
argument_list|()
operator|.
name|postComplete
argument_list|(
name|getContainerId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
operator|(
name|NMDeviceResourceInfo
operator|)
name|adapter
operator|.
name|getNMResourceInfo
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getAssignedDevices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|response
operator|.
name|getTotalDevices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getContainerId (int id)
specifier|private
specifier|static
name|ContainerId
name|getContainerId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
name|id
argument_list|)
return|;
block|}
DECL|class|MyPlugin
specifier|private
class|class
name|MyPlugin
implements|implements
name|DevicePlugin
implements|,
name|DevicePluginScheduler
block|{
DECL|field|RESOURCE_NAME
specifier|private
specifier|final
specifier|static
name|String
name|RESOURCE_NAME
init|=
literal|"cmpA.com/hdwA"
decl_stmt|;
annotation|@
name|Override
DECL|method|getRegisterRequestInfo ()
specifier|public
name|DeviceRegisterRequest
name|getRegisterRequestInfo
parameter_list|()
block|{
return|return
name|DeviceRegisterRequest
operator|.
name|Builder
operator|.
name|newInstance
argument_list|()
operator|.
name|setResourceName
argument_list|(
name|RESOURCE_NAME
argument_list|)
operator|.
name|setPluginVersion
argument_list|(
literal|"v1.0"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getDevices ()
specifier|public
name|Set
argument_list|<
name|Device
argument_list|>
name|getDevices
parameter_list|()
block|{
name|TreeSet
argument_list|<
name|Device
argument_list|>
name|r
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|r
operator|.
name|add
argument_list|(
name|Device
operator|.
name|Builder
operator|.
name|newInstance
argument_list|()
operator|.
name|setId
argument_list|(
literal|0
argument_list|)
operator|.
name|setDevPath
argument_list|(
literal|"/dev/hdwA0"
argument_list|)
operator|.
name|setMajorNumber
argument_list|(
literal|256
argument_list|)
operator|.
name|setMinorNumber
argument_list|(
literal|0
argument_list|)
operator|.
name|setBusID
argument_list|(
literal|"0000:80:00.0"
argument_list|)
operator|.
name|setHealthy
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|add
argument_list|(
name|Device
operator|.
name|Builder
operator|.
name|newInstance
argument_list|()
operator|.
name|setId
argument_list|(
literal|1
argument_list|)
operator|.
name|setDevPath
argument_list|(
literal|"/dev/hdwA1"
argument_list|)
operator|.
name|setMajorNumber
argument_list|(
literal|256
argument_list|)
operator|.
name|setMinorNumber
argument_list|(
literal|0
argument_list|)
operator|.
name|setBusID
argument_list|(
literal|"0000:80:01.0"
argument_list|)
operator|.
name|setHealthy
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|add
argument_list|(
name|Device
operator|.
name|Builder
operator|.
name|newInstance
argument_list|()
operator|.
name|setId
argument_list|(
literal|2
argument_list|)
operator|.
name|setDevPath
argument_list|(
literal|"/dev/hdwA2"
argument_list|)
operator|.
name|setMajorNumber
argument_list|(
literal|256
argument_list|)
operator|.
name|setMinorNumber
argument_list|(
literal|0
argument_list|)
operator|.
name|setBusID
argument_list|(
literal|"0000:80:02.0"
argument_list|)
operator|.
name|setHealthy
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
annotation|@
name|Override
DECL|method|onDevicesAllocated (Set<Device> allocatedDevices, YarnRuntimeType yarnRuntime)
specifier|public
name|DeviceRuntimeSpec
name|onDevicesAllocated
parameter_list|(
name|Set
argument_list|<
name|Device
argument_list|>
name|allocatedDevices
parameter_list|,
name|YarnRuntimeType
name|yarnRuntime
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|onDevicesReleased (Set<Device> releasedDevices)
specifier|public
name|void
name|onDevicesReleased
parameter_list|(
name|Set
argument_list|<
name|Device
argument_list|>
name|releasedDevices
parameter_list|)
block|{      }
annotation|@
name|Override
DECL|method|allocateDevices (Set<Device> availableDevices, int count)
specifier|public
name|Set
argument_list|<
name|Device
argument_list|>
name|allocateDevices
parameter_list|(
name|Set
argument_list|<
name|Device
argument_list|>
name|availableDevices
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|Set
argument_list|<
name|Device
argument_list|>
name|allocated
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|number
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Device
name|d
range|:
name|availableDevices
control|)
block|{
name|allocated
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|number
operator|++
expr_stmt|;
if|if
condition|(
name|number
operator|==
name|count
condition|)
block|{
break|break;
block|}
block|}
return|return
name|allocated
return|;
block|}
block|}
comment|// MyPlugin
block|}
end_class

end_unit

