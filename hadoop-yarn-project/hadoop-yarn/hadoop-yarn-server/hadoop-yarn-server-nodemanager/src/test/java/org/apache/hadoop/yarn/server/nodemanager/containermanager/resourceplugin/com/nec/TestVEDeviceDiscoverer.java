begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.com.nec
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|com
operator|.
name|nec
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyChar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|CommandExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|deviceplugin
operator|.
name|Device
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|junit
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Unit tests for VEDeviceDiscoverer class.  *  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
DECL|class|TestVEDeviceDiscoverer
specifier|public
class|class
name|TestVEDeviceDiscoverer
block|{
DECL|field|DEVICE_COMPARATOR
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Device
argument_list|>
name|DEVICE_COMPARATOR
init|=
name|Comparator
operator|.
name|comparingInt
argument_list|(
name|Device
operator|::
name|getId
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|expected
specifier|public
name|ExpectedException
name|expected
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Mock
DECL|field|udevUtil
specifier|private
name|UdevUtil
name|udevUtil
decl_stmt|;
annotation|@
name|Mock
DECL|field|mockCommandExecutor
specifier|private
name|CommandExecutor
name|mockCommandExecutor
decl_stmt|;
DECL|field|testFolder
specifier|private
name|String
name|testFolder
decl_stmt|;
DECL|field|discoverer
specifier|private
name|VEDeviceDiscoverer
name|discoverer
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|Function
argument_list|<
name|String
index|[]
argument_list|,
name|CommandExecutor
argument_list|>
name|commandExecutorProvider
init|=
parameter_list|(
name|String
index|[]
name|cmd
parameter_list|)
lambda|->
name|mockCommandExecutor
decl_stmt|;
name|discoverer
operator|=
operator|new
name|VEDeviceDiscoverer
argument_list|(
name|udevUtil
argument_list|)
expr_stmt|;
name|discoverer
operator|.
name|setCommandExecutorProvider
argument_list|(
name|commandExecutorProvider
argument_list|)
expr_stmt|;
name|setupTestDirectory
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|testFolder
operator|!=
literal|null
condition|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|testFolder
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDetectSingleOnlineDevice ()
specifier|public
name|void
name|testDetectSingleOnlineDevice
parameter_list|()
throws|throws
name|IOException
block|{
name|createVeSlotFile
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|createOsStateFile
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCommandExecutor
operator|.
name|getOutput
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"8:1:character special file"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|udevUtil
operator|.
name|getSysPath
argument_list|(
name|anyInt
argument_list|()
argument_list|,
name|anyChar
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|testFolder
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Device
argument_list|>
name|devices
init|=
name|discoverer
operator|.
name|getDevicesFromPath
argument_list|(
name|testFolder
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number of devices"
argument_list|,
literal|1
argument_list|,
name|devices
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Device
name|device
init|=
name|devices
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Device ID"
argument_list|,
literal|0
argument_list|,
name|device
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Major number"
argument_list|,
literal|8
argument_list|,
name|device
operator|.
name|getMajorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Minor number"
argument_list|,
literal|1
argument_list|,
name|device
operator|.
name|getMinorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Status"
argument_list|,
literal|"ONLINE"
argument_list|,
name|device
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Device is not healthy"
argument_list|,
name|device
operator|.
name|isHealthy
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDetectMultipleOnlineDevices ()
specifier|public
name|void
name|testDetectMultipleOnlineDevices
parameter_list|()
throws|throws
name|IOException
block|{
name|createVeSlotFile
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|createVeSlotFile
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|createVeSlotFile
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|createOsStateFile
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCommandExecutor
operator|.
name|getOutput
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"8:1:character special file"
argument_list|,
literal|"9:1:character special file"
argument_list|,
literal|"a:1:character special file"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|udevUtil
operator|.
name|getSysPath
argument_list|(
name|anyInt
argument_list|()
argument_list|,
name|anyChar
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|testFolder
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Device
argument_list|>
name|devices
init|=
name|discoverer
operator|.
name|getDevicesFromPath
argument_list|(
name|testFolder
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number of devices"
argument_list|,
literal|3
argument_list|,
name|devices
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Device
argument_list|>
name|devicesList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|devices
argument_list|)
decl_stmt|;
name|devicesList
operator|.
name|sort
argument_list|(
name|DEVICE_COMPARATOR
argument_list|)
expr_stmt|;
name|Device
name|device0
init|=
name|devicesList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Device ID"
argument_list|,
literal|0
argument_list|,
name|device0
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Major number"
argument_list|,
literal|8
argument_list|,
name|device0
operator|.
name|getMajorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Minor number"
argument_list|,
literal|1
argument_list|,
name|device0
operator|.
name|getMinorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Status"
argument_list|,
literal|"ONLINE"
argument_list|,
name|device0
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Device is not healthy"
argument_list|,
name|device0
operator|.
name|isHealthy
argument_list|()
argument_list|)
expr_stmt|;
name|Device
name|device1
init|=
name|devicesList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Device ID"
argument_list|,
literal|1
argument_list|,
name|device1
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Major number"
argument_list|,
literal|9
argument_list|,
name|device1
operator|.
name|getMajorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Minor number"
argument_list|,
literal|1
argument_list|,
name|device1
operator|.
name|getMinorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Status"
argument_list|,
literal|"ONLINE"
argument_list|,
name|device1
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Device is not healthy"
argument_list|,
name|device1
operator|.
name|isHealthy
argument_list|()
argument_list|)
expr_stmt|;
name|Device
name|device2
init|=
name|devicesList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Device ID"
argument_list|,
literal|2
argument_list|,
name|device2
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Major number"
argument_list|,
literal|10
argument_list|,
name|device2
operator|.
name|getMajorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Minor number"
argument_list|,
literal|1
argument_list|,
name|device2
operator|.
name|getMinorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Status"
argument_list|,
literal|"ONLINE"
argument_list|,
name|device2
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Device is not healthy"
argument_list|,
name|device2
operator|.
name|isHealthy
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNegativeDeviceStateNumber ()
specifier|public
name|void
name|testNegativeDeviceStateNumber
parameter_list|()
throws|throws
name|IOException
block|{
name|createVeSlotFile
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|createOsStateFile
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCommandExecutor
operator|.
name|getOutput
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"8:1:character special file"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|udevUtil
operator|.
name|getSysPath
argument_list|(
name|anyInt
argument_list|()
argument_list|,
name|anyChar
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|testFolder
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Device
argument_list|>
name|devices
init|=
name|discoverer
operator|.
name|getDevicesFromPath
argument_list|(
name|testFolder
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number of devices"
argument_list|,
literal|1
argument_list|,
name|devices
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Device
name|device
init|=
name|devices
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Device ID"
argument_list|,
literal|0
argument_list|,
name|device
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Major number"
argument_list|,
literal|8
argument_list|,
name|device
operator|.
name|getMajorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Minor number"
argument_list|,
literal|1
argument_list|,
name|device
operator|.
name|getMinorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Status"
argument_list|,
literal|"Unknown (-1)"
argument_list|,
name|device
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Device should not be healthy"
argument_list|,
name|device
operator|.
name|isHealthy
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeviceStateNumberTooHigh ()
specifier|public
name|void
name|testDeviceStateNumberTooHigh
parameter_list|()
throws|throws
name|IOException
block|{
name|createVeSlotFile
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|createOsStateFile
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCommandExecutor
operator|.
name|getOutput
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"8:1:character special file"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|udevUtil
operator|.
name|getSysPath
argument_list|(
name|anyInt
argument_list|()
argument_list|,
name|anyChar
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|testFolder
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Device
argument_list|>
name|devices
init|=
name|discoverer
operator|.
name|getDevicesFromPath
argument_list|(
name|testFolder
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number of devices"
argument_list|,
literal|1
argument_list|,
name|devices
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Device
name|device
init|=
name|devices
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Device ID"
argument_list|,
literal|0
argument_list|,
name|device
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Major number"
argument_list|,
literal|8
argument_list|,
name|device
operator|.
name|getMajorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Minor number"
argument_list|,
literal|1
argument_list|,
name|device
operator|.
name|getMinorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Status"
argument_list|,
literal|"Unknown (5)"
argument_list|,
name|device
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Device should not be healthy"
argument_list|,
name|device
operator|.
name|isHealthy
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeviceNumberFromMajorAndMinor ()
specifier|public
name|void
name|testDeviceNumberFromMajorAndMinor
parameter_list|()
throws|throws
name|IOException
block|{
name|createVeSlotFile
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|createVeSlotFile
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|createVeSlotFile
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|createOsStateFile
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCommandExecutor
operator|.
name|getOutput
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"10:1:character special file"
argument_list|,
literal|"1d:2:character special file"
argument_list|,
literal|"4:3c:character special file"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|udevUtil
operator|.
name|getSysPath
argument_list|(
name|anyInt
argument_list|()
argument_list|,
name|anyChar
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|testFolder
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Device
argument_list|>
name|devices
init|=
name|discoverer
operator|.
name|getDevicesFromPath
argument_list|(
name|testFolder
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Device
argument_list|>
name|devicesList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|devices
argument_list|)
decl_stmt|;
name|devicesList
operator|.
name|sort
argument_list|(
name|DEVICE_COMPARATOR
argument_list|)
expr_stmt|;
name|Device
name|device0
init|=
name|devicesList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Major number"
argument_list|,
literal|16
argument_list|,
name|device0
operator|.
name|getMajorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Minor number"
argument_list|,
literal|1
argument_list|,
name|device0
operator|.
name|getMinorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|Device
name|device1
init|=
name|devicesList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Major number"
argument_list|,
literal|29
argument_list|,
name|device1
operator|.
name|getMajorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Minor number"
argument_list|,
literal|2
argument_list|,
name|device1
operator|.
name|getMinorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|Device
name|device2
init|=
name|devicesList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Major number"
argument_list|,
literal|4
argument_list|,
name|device2
operator|.
name|getMajorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Minor number"
argument_list|,
literal|60
argument_list|,
name|device2
operator|.
name|getMinorNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNonVESlotFilesAreSkipped ()
specifier|public
name|void
name|testNonVESlotFilesAreSkipped
parameter_list|()
throws|throws
name|IOException
block|{
name|createVeSlotFile
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|createOsStateFile
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
literal|"abcde"
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
literal|"vexlot"
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
literal|"xyzveslot"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCommandExecutor
operator|.
name|getOutput
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"8:1:character special file"
argument_list|,
literal|"9:1:character special file"
argument_list|,
literal|"10:1:character special file"
argument_list|,
literal|"11:1:character special file"
argument_list|,
literal|"12:1:character special file"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|udevUtil
operator|.
name|getSysPath
argument_list|(
name|anyInt
argument_list|()
argument_list|,
name|anyChar
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|testFolder
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Device
argument_list|>
name|devices
init|=
name|discoverer
operator|.
name|getDevicesFromPath
argument_list|(
name|testFolder
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number of devices"
argument_list|,
literal|1
argument_list|,
name|devices
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Device
name|device
init|=
name|devices
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Device ID"
argument_list|,
literal|0
argument_list|,
name|device
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Major number"
argument_list|,
literal|8
argument_list|,
name|device
operator|.
name|getMajorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Minor number"
argument_list|,
literal|1
argument_list|,
name|device
operator|.
name|getMinorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Status"
argument_list|,
literal|"ONLINE"
argument_list|,
name|device
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Device is not healthy"
argument_list|,
name|device
operator|.
name|isHealthy
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNonBlockOrCharFilesAreRejected ()
specifier|public
name|void
name|testNonBlockOrCharFilesAreRejected
parameter_list|()
throws|throws
name|IOException
block|{
name|expected
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expected
operator|.
name|expectMessage
argument_list|(
literal|"File is neither a char nor block device"
argument_list|)
expr_stmt|;
name|createVeSlotFile
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockCommandExecutor
operator|.
name|getOutput
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"0:0:regular file"
argument_list|)
expr_stmt|;
name|discoverer
operator|.
name|getDevicesFromPath
argument_list|(
name|testFolder
argument_list|)
expr_stmt|;
block|}
DECL|method|setupTestDirectory ()
specifier|private
name|void
name|setupTestDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|path
init|=
literal|"target/temp/"
operator|+
name|TestVEDeviceDiscoverer
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
name|testFolder
operator|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|testFolder
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not create directory: "
operator|+
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|createVeSlotFile (int slot)
specifier|private
name|void
name|createVeSlotFile
parameter_list|(
name|int
name|slot
parameter_list|)
throws|throws
name|IOException
block|{
name|Files
operator|.
name|createFile
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|testFolder
argument_list|,
literal|"veslot"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|slot
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createFile (String name)
specifier|private
name|void
name|createFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|Files
operator|.
name|createFile
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|testFolder
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createOsStateFile (int state)
specifier|private
name|void
name|createOsStateFile
parameter_list|(
name|int
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|Paths
operator|.
name|get
argument_list|(
name|testFolder
argument_list|,
literal|"os_state"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|path
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|state
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

