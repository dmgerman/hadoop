begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.fpga
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|fpga
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|ResourceHandlerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_class
DECL|class|TestFpgaDiscoverer
specifier|public
class|class
name|TestFpgaDiscoverer
block|{
annotation|@
name|Rule
DECL|field|expected
specifier|public
name|ExpectedException
name|expected
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|field|fakeBinary
specifier|private
name|File
name|fakeBinary
decl_stmt|;
DECL|field|openclPlugin
specifier|private
name|IntelFpgaOpenclPlugin
name|openclPlugin
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|fpgaDiscoverer
specifier|private
name|FpgaDiscoverer
name|fpgaDiscoverer
decl_stmt|;
DECL|method|getTestParentFolder ()
specifier|private
name|String
name|getTestParentFolder
parameter_list|()
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"target/temp/"
operator|+
name|TestFpgaDiscoverer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|f
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
DECL|method|touchFile (File f)
specifier|private
name|void
name|touchFile
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|IOException
block|{
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|folder
init|=
name|getTestParentFolder
argument_list|()
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|folder
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|f
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|openclPlugin
operator|=
operator|new
name|IntelFpgaOpenclPlugin
argument_list|()
expr_stmt|;
name|openclPlugin
operator|.
name|initPlugin
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|openclPlugin
operator|.
name|setInnerShellExecutor
argument_list|(
name|mockPuginShell
argument_list|()
argument_list|)
expr_stmt|;
name|fpgaDiscoverer
operator|=
operator|new
name|FpgaDiscoverer
argument_list|()
expr_stmt|;
name|fpgaDiscoverer
operator|.
name|setResourceHanderPlugin
argument_list|(
name|openclPlugin
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|afterTest ()
specifier|public
name|void
name|afterTest
parameter_list|()
block|{
if|if
condition|(
name|fakeBinary
operator|!=
literal|null
condition|)
block|{
name|fakeBinary
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testExecutablePathWithoutExplicitConfig ()
specifier|public
name|void
name|testExecutablePathWithoutExplicitConfig
parameter_list|()
throws|throws
name|YarnException
block|{
name|fpgaDiscoverer
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No configuration(no environment ALTERAOCLSDKROOT set)"
operator|+
literal|" should return just a single binary name"
argument_list|,
literal|"aocl"
argument_list|,
name|openclPlugin
operator|.
name|getPathToExecutable
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExecutablePathWithCorrectConfig ()
specifier|public
name|void
name|testExecutablePathWithCorrectConfig
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|fakeBinary
operator|=
operator|new
name|File
argument_list|(
name|getTestParentFolder
argument_list|()
operator|+
literal|"/aocl"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_PATH_TO_EXEC
argument_list|,
name|getTestParentFolder
argument_list|()
operator|+
literal|"/aocl"
argument_list|)
expr_stmt|;
name|touchFile
argument_list|(
name|fakeBinary
argument_list|)
expr_stmt|;
name|fpgaDiscoverer
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Correct configuration should return user setting"
argument_list|,
name|getTestParentFolder
argument_list|()
operator|+
literal|"/aocl"
argument_list|,
name|openclPlugin
operator|.
name|getPathToExecutable
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExecutablePathWhenFileDoesNotExist ()
specifier|public
name|void
name|testExecutablePathWhenFileDoesNotExist
parameter_list|()
throws|throws
name|YarnException
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_PATH_TO_EXEC
argument_list|,
name|getTestParentFolder
argument_list|()
operator|+
literal|"/aocl"
argument_list|)
expr_stmt|;
name|fpgaDiscoverer
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File doesn't exists - expected a single binary name"
argument_list|,
literal|"aocl"
argument_list|,
name|openclPlugin
operator|.
name|getPathToExecutable
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExecutablePathWhenFileIsEmpty ()
specifier|public
name|void
name|testExecutablePathWhenFileIsEmpty
parameter_list|()
throws|throws
name|YarnException
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_PATH_TO_EXEC
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fpgaDiscoverer
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"configuration with empty string value, should use aocl"
argument_list|,
literal|"aocl"
argument_list|,
name|openclPlugin
operator|.
name|getPathToExecutable
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExecutablePathWithSdkRootSet ()
specifier|public
name|void
name|testExecutablePathWithSdkRootSet
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|fakeBinary
operator|=
operator|new
name|File
argument_list|(
name|getTestParentFolder
argument_list|()
operator|+
literal|"/bin/aocl"
argument_list|)
expr_stmt|;
name|fakeBinary
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|touchFile
argument_list|(
name|fakeBinary
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newEnv
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|newEnv
operator|.
name|put
argument_list|(
literal|"ALTERAOCLSDKROOT"
argument_list|,
name|getTestParentFolder
argument_list|()
argument_list|)
expr_stmt|;
name|openclPlugin
operator|.
name|setEnvProvider
argument_list|(
name|s
lambda|->
block|{
return|return
name|newEnv
operator|.
name|get
argument_list|(
name|s
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|fpgaDiscoverer
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No configuration but with environment ALTERAOCLSDKROOT set"
argument_list|,
name|getTestParentFolder
argument_list|()
operator|+
literal|"/bin/aocl"
argument_list|,
name|openclPlugin
operator|.
name|getPathToExecutable
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDiscoveryWhenAvailableDevicesDefined ()
specifier|public
name|void
name|testDiscoveryWhenAvailableDevicesDefined
parameter_list|()
throws|throws
name|YarnException
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_AVAILABLE_DEVICES
argument_list|,
literal|"acl0/243:0,acl1/244:1"
argument_list|)
expr_stmt|;
name|fpgaDiscoverer
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FpgaDevice
argument_list|>
name|devices
init|=
name|fpgaDiscoverer
operator|.
name|discover
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number of devices"
argument_list|,
literal|2
argument_list|,
name|devices
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FpgaDevice
name|device0
init|=
name|devices
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FpgaDevice
name|device1
init|=
name|devices
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Device id"
argument_list|,
literal|"acl0"
argument_list|,
name|device0
operator|.
name|getAliasDevName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Minor number"
argument_list|,
literal|0
argument_list|,
name|device0
operator|.
name|getMinor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Major"
argument_list|,
literal|243
argument_list|,
name|device0
operator|.
name|getMajor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Device id"
argument_list|,
literal|"acl1"
argument_list|,
name|device1
operator|.
name|getAliasDevName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Minor number"
argument_list|,
literal|1
argument_list|,
name|device1
operator|.
name|getMinor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Major"
argument_list|,
literal|244
argument_list|,
name|device1
operator|.
name|getMajor
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDiscoveryWhenAvailableDevicesEmpty ()
specifier|public
name|void
name|testDiscoveryWhenAvailableDevicesEmpty
parameter_list|()
throws|throws
name|YarnException
block|{
name|expected
operator|.
name|expect
argument_list|(
name|ResourceHandlerException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expected
operator|.
name|expectMessage
argument_list|(
literal|"No FPGA devices were specified"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_AVAILABLE_DEVICES
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fpgaDiscoverer
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fpgaDiscoverer
operator|.
name|discover
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDiscoveryWhenAvailableDevicesAreIllegalString ()
specifier|public
name|void
name|testDiscoveryWhenAvailableDevicesAreIllegalString
parameter_list|()
throws|throws
name|YarnException
block|{
name|expected
operator|.
name|expect
argument_list|(
name|ResourceHandlerException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expected
operator|.
name|expectMessage
argument_list|(
literal|"Illegal device specification string"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_AVAILABLE_DEVICES
argument_list|,
literal|"illegal/243:0,acl1/244=1"
argument_list|)
expr_stmt|;
name|fpgaDiscoverer
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fpgaDiscoverer
operator|.
name|discover
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDiscoveryWhenExternalScriptDefined ()
specifier|public
name|void
name|testDiscoveryWhenExternalScriptDefined
parameter_list|()
throws|throws
name|YarnException
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_DEVICE_DISCOVERY_SCRIPT
argument_list|,
literal|"/dummy/script"
argument_list|)
expr_stmt|;
name|fpgaDiscoverer
operator|.
name|setScriptRunner
argument_list|(
name|s
lambda|->
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
literal|"acl0/243:0,acl1/244:1"
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|fpgaDiscoverer
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FpgaDevice
argument_list|>
name|devices
init|=
name|fpgaDiscoverer
operator|.
name|discover
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number of devices"
argument_list|,
literal|2
argument_list|,
name|devices
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FpgaDevice
name|device0
init|=
name|devices
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FpgaDevice
name|device1
init|=
name|devices
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Device id"
argument_list|,
literal|"acl0"
argument_list|,
name|device0
operator|.
name|getAliasDevName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Minor number"
argument_list|,
literal|0
argument_list|,
name|device0
operator|.
name|getMinor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Major"
argument_list|,
literal|243
argument_list|,
name|device0
operator|.
name|getMajor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Device id"
argument_list|,
literal|"acl1"
argument_list|,
name|device1
operator|.
name|getAliasDevName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Minor number"
argument_list|,
literal|1
argument_list|,
name|device1
operator|.
name|getMinor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Major"
argument_list|,
literal|244
argument_list|,
name|device1
operator|.
name|getMajor
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDiscoveryWhenExternalScriptReturnsEmptyString ()
specifier|public
name|void
name|testDiscoveryWhenExternalScriptReturnsEmptyString
parameter_list|()
throws|throws
name|YarnException
block|{
name|expected
operator|.
name|expect
argument_list|(
name|ResourceHandlerException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expected
operator|.
name|expectMessage
argument_list|(
literal|"No FPGA devices were specified"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_DEVICE_DISCOVERY_SCRIPT
argument_list|,
literal|"/dummy/script"
argument_list|)
expr_stmt|;
name|fpgaDiscoverer
operator|.
name|setScriptRunner
argument_list|(
name|s
lambda|->
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
literal|""
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|fpgaDiscoverer
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fpgaDiscoverer
operator|.
name|discover
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDiscoveryWhenExternalScriptFails ()
specifier|public
name|void
name|testDiscoveryWhenExternalScriptFails
parameter_list|()
throws|throws
name|YarnException
block|{
name|expected
operator|.
name|expect
argument_list|(
name|ResourceHandlerException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expected
operator|.
name|expectMessage
argument_list|(
literal|"Unable to run external script"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_DEVICE_DISCOVERY_SCRIPT
argument_list|,
literal|"/dummy/script"
argument_list|)
expr_stmt|;
name|fpgaDiscoverer
operator|.
name|setScriptRunner
argument_list|(
name|s
lambda|->
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
argument_list|)
expr_stmt|;
name|fpgaDiscoverer
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fpgaDiscoverer
operator|.
name|discover
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDiscoveryWhenExternalScriptUndefined ()
specifier|public
name|void
name|testDiscoveryWhenExternalScriptUndefined
parameter_list|()
throws|throws
name|YarnException
block|{
name|expected
operator|.
name|expect
argument_list|(
name|ResourceHandlerException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expected
operator|.
name|expectMessage
argument_list|(
literal|"Unable to run external script"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_DEVICE_DISCOVERY_SCRIPT
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fpgaDiscoverer
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fpgaDiscoverer
operator|.
name|discover
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDiscoveryWhenExternalScriptCannotBeExecuted ()
specifier|public
name|void
name|testDiscoveryWhenExternalScriptCannotBeExecuted
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|File
name|fakeScript
init|=
operator|new
name|File
argument_list|(
name|getTestParentFolder
argument_list|()
operator|+
literal|"/fakeScript"
argument_list|)
decl_stmt|;
try|try
block|{
name|expected
operator|.
name|expect
argument_list|(
name|ResourceHandlerException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expected
operator|.
name|expectMessage
argument_list|(
literal|"Unable to run external script"
argument_list|)
expr_stmt|;
name|fakeScript
operator|=
operator|new
name|File
argument_list|(
name|getTestParentFolder
argument_list|()
operator|+
literal|"/fakeScript"
argument_list|)
expr_stmt|;
name|touchFile
argument_list|(
name|fakeScript
argument_list|)
expr_stmt|;
name|fakeScript
operator|.
name|setExecutable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_DEVICE_DISCOVERY_SCRIPT
argument_list|,
name|fakeScript
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|fpgaDiscoverer
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fpgaDiscoverer
operator|.
name|discover
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|fakeScript
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCurrentFpgaInfoWhenAllDevicesAreAllowed ()
specifier|public
name|void
name|testCurrentFpgaInfoWhenAllDevicesAreAllowed
parameter_list|()
throws|throws
name|YarnException
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_AVAILABLE_DEVICES
argument_list|,
literal|"acl0/243:0,acl1/244:1"
argument_list|)
expr_stmt|;
name|fpgaDiscoverer
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FpgaDevice
argument_list|>
name|devices
init|=
name|fpgaDiscoverer
operator|.
name|discover
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FpgaDevice
argument_list|>
name|currentFpgaInfo
init|=
name|fpgaDiscoverer
operator|.
name|getCurrentFpgaInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Devices"
argument_list|,
name|devices
argument_list|,
name|currentFpgaInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCurrentFpgaInfoWhenAllowedDevicesDefined ()
specifier|public
name|void
name|testCurrentFpgaInfoWhenAllowedDevicesDefined
parameter_list|()
throws|throws
name|YarnException
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_AVAILABLE_DEVICES
argument_list|,
literal|"acl0/243:0,acl1/244:1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_ALLOWED_DEVICES
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|fpgaDiscoverer
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FpgaDevice
argument_list|>
name|devices
init|=
name|fpgaDiscoverer
operator|.
name|discover
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FpgaDevice
argument_list|>
name|currentFpgaInfo
init|=
name|fpgaDiscoverer
operator|.
name|getCurrentFpgaInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Devices"
argument_list|,
name|devices
argument_list|,
name|currentFpgaInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"List of devices"
argument_list|,
literal|1
argument_list|,
name|currentFpgaInfo
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FpgaDevice
name|device
init|=
name|currentFpgaInfo
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Device id"
argument_list|,
literal|"acl0"
argument_list|,
name|device
operator|.
name|getAliasDevName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Minor number"
argument_list|,
literal|0
argument_list|,
name|device
operator|.
name|getMinor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Major"
argument_list|,
literal|243
argument_list|,
name|device
operator|.
name|getMajor
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|mockPuginShell ()
specifier|private
name|IntelFpgaOpenclPlugin
operator|.
name|InnerShellExecutor
name|mockPuginShell
parameter_list|()
block|{
name|IntelFpgaOpenclPlugin
operator|.
name|InnerShellExecutor
name|shell
init|=
name|mock
argument_list|(
name|IntelFpgaOpenclPlugin
operator|.
name|InnerShellExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|shell
operator|.
name|runDiagnose
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|shell
operator|.
name|getMajorAndMinorNumber
argument_list|(
literal|"aclnalla_pcie0"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"247:0"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|shell
operator|.
name|getMajorAndMinorNumber
argument_list|(
literal|"aclnalla_pcie1"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"247:1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|shell
operator|.
name|getMajorAndMinorNumber
argument_list|(
literal|"acla10_ref0"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"246:0"
argument_list|)
expr_stmt|;
return|return
name|shell
return|;
block|}
block|}
end_class

end_unit

