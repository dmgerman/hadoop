begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.fpga
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|fpga
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|fpga
operator|.
name|FpgaResourceAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|TestFpgaDiscoverer
specifier|public
class|class
name|TestFpgaDiscoverer
block|{
DECL|method|getTestParentFolder ()
specifier|private
name|String
name|getTestParentFolder
parameter_list|()
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"target/temp/"
operator|+
name|TestFpgaDiscoverer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|f
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
DECL|method|touchFile (File f)
specifier|private
name|void
name|touchFile
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|IOException
block|{
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|folder
init|=
name|getTestParentFolder
argument_list|()
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|folder
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|f
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
comment|// A dirty hack to modify the env of the current JVM itself - Dirty, but
comment|// should be okay for testing.
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|setNewEnvironmentHack (Map<String, String> newenv)
specifier|private
specifier|static
name|void
name|setNewEnvironmentHack
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newenv
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cl
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"java.lang.ProcessEnvironment"
argument_list|)
decl_stmt|;
name|Field
name|field
init|=
name|cl
operator|.
name|getDeclaredField
argument_list|(
literal|"theEnvironment"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|field
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|env
operator|.
name|clear
argument_list|()
expr_stmt|;
name|env
operator|.
name|putAll
argument_list|(
name|newenv
argument_list|)
expr_stmt|;
name|Field
name|ciField
init|=
name|cl
operator|.
name|getDeclaredField
argument_list|(
literal|"theCaseInsensitiveEnvironment"
argument_list|)
decl_stmt|;
name|ciField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cienv
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|ciField
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|cienv
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cienv
operator|.
name|putAll
argument_list|(
name|newenv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
name|Class
index|[]
name|classes
init|=
name|Collections
operator|.
name|class
operator|.
name|getDeclaredClasses
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
name|System
operator|.
name|getenv
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
name|cl
range|:
name|classes
control|)
block|{
if|if
condition|(
literal|"java.util.Collections$UnmodifiableMap"
operator|.
name|equals
argument_list|(
name|cl
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Field
name|field
init|=
name|cl
operator|.
name|getDeclaredField
argument_list|(
literal|"m"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|obj
init|=
name|field
operator|.
name|get
argument_list|(
name|env
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|obj
decl_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|map
operator|.
name|putAll
argument_list|(
name|newenv
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testLinuxFpgaResourceDiscoverPluginConfig ()
specifier|public
name|void
name|testLinuxFpgaResourceDiscoverPluginConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|FpgaDiscoverer
name|discoverer
init|=
name|FpgaDiscoverer
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|IntelFpgaOpenclPlugin
name|openclPlugin
init|=
operator|new
name|IntelFpgaOpenclPlugin
argument_list|()
decl_stmt|;
comment|// because FPGA discoverer is a singleton, we use setPlugin to make
comment|// FpgaDiscoverer.getInstance().diagnose() work in openclPlugin.initPlugin()
name|discoverer
operator|.
name|setResourceHanderPlugin
argument_list|(
name|openclPlugin
argument_list|)
expr_stmt|;
name|openclPlugin
operator|.
name|initPlugin
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|openclPlugin
operator|.
name|setShell
argument_list|(
name|mockPuginShell
argument_list|()
argument_list|)
expr_stmt|;
name|discoverer
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Case 1. No configuration set for binary(no environment "ALTERAOCLSDKROOT" set)
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No configuration(no environment ALTERAOCLSDKROOT set)"
operator|+
literal|"should return just a single binary name"
argument_list|,
literal|"aocl"
argument_list|,
name|openclPlugin
operator|.
name|getPathToExecutable
argument_list|()
argument_list|)
expr_stmt|;
comment|// Case 2. With correct configuration and file exists
name|File
name|fakeBinary
init|=
operator|new
name|File
argument_list|(
name|getTestParentFolder
argument_list|()
operator|+
literal|"/aocl"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_PATH_TO_EXEC
argument_list|,
name|getTestParentFolder
argument_list|()
operator|+
literal|"/aocl"
argument_list|)
expr_stmt|;
name|touchFile
argument_list|(
name|fakeBinary
argument_list|)
expr_stmt|;
name|discoverer
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Correct configuration should return user setting"
argument_list|,
name|getTestParentFolder
argument_list|()
operator|+
literal|"/aocl"
argument_list|,
name|openclPlugin
operator|.
name|getPathToExecutable
argument_list|()
argument_list|)
expr_stmt|;
comment|// Case 3. With correct configuration but file doesn't exists. Use default
name|fakeBinary
operator|.
name|delete
argument_list|()
expr_stmt|;
name|discoverer
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Correct configuration but file doesn't exists should return just a single binary name"
argument_list|,
literal|"aocl"
argument_list|,
name|openclPlugin
operator|.
name|getPathToExecutable
argument_list|()
argument_list|)
expr_stmt|;
comment|// Case 4. Set a empty value
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_FPGA_PATH_TO_EXEC
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|discoverer
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"configuration with empty string value, should use aocl"
argument_list|,
literal|"aocl"
argument_list|,
name|openclPlugin
operator|.
name|getPathToExecutable
argument_list|()
argument_list|)
expr_stmt|;
comment|// Case 5. No configuration set for binary, but set environment "ALTERAOCLSDKROOT"
comment|// we load the default configuration to start with
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fakeBinary
operator|=
operator|new
name|File
argument_list|(
name|getTestParentFolder
argument_list|()
operator|+
literal|"/bin/aocl"
argument_list|)
expr_stmt|;
name|fakeBinary
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|touchFile
argument_list|(
name|fakeBinary
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newEnv
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|newEnv
operator|.
name|put
argument_list|(
literal|"ALTERAOCLSDKROOT"
argument_list|,
name|getTestParentFolder
argument_list|()
argument_list|)
expr_stmt|;
name|setNewEnvironmentHack
argument_list|(
name|newEnv
argument_list|)
expr_stmt|;
name|discoverer
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No configuration but with environment ALTERAOCLSDKROOT set"
argument_list|,
name|getTestParentFolder
argument_list|()
operator|+
literal|"/bin/aocl"
argument_list|,
name|openclPlugin
operator|.
name|getPathToExecutable
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDiscoverPluginParser ()
specifier|public
name|void
name|testDiscoverPluginParser
parameter_list|()
throws|throws
name|YarnException
block|{
name|String
name|output
init|=
literal|"------------------------- acl0 -------------------------\n"
operator|+
literal|"Vendor: Nallatech ltd\n"
operator|+
literal|"Phys Dev Name  Status   Information\n"
operator|+
literal|"aclnalla_pcie0Passed   nalla_pcie (aclnalla_pcie0)\n"
operator|+
literal|"                       PCIe dev_id = 2494, bus:slot.func = 02:00.00, Gen3 x8\n"
operator|+
literal|"                       FPGA temperature = 53.1 degrees C.\n"
operator|+
literal|"                       Total Card Power Usage = 31.7 Watts.\n"
operator|+
literal|"                       Device Power Usage = 0.0 Watts.\n"
operator|+
literal|"DIAGNOSTIC_PASSED"
operator|+
literal|"---------------------------------------------------------\n"
decl_stmt|;
name|output
operator|=
name|output
operator|+
literal|"------------------------- acl1 -------------------------\n"
operator|+
literal|"Vendor: Nallatech ltd\n"
operator|+
literal|"Phys Dev Name  Status   Information\n"
operator|+
literal|"aclnalla_pcie1Passed   nalla_pcie (aclnalla_pcie1)\n"
operator|+
literal|"                       PCIe dev_id = 2495, bus:slot.func = 03:00.00, Gen3 x8\n"
operator|+
literal|"                       FPGA temperature = 43.1 degrees C.\n"
operator|+
literal|"                       Total Card Power Usage = 11.7 Watts.\n"
operator|+
literal|"                       Device Power Usage = 0.0 Watts.\n"
operator|+
literal|"DIAGNOSTIC_PASSED"
operator|+
literal|"---------------------------------------------------------\n"
expr_stmt|;
name|output
operator|=
name|output
operator|+
literal|"------------------------- acl2 -------------------------\n"
operator|+
literal|"Vendor: Intel(R) Corporation\n"
operator|+
literal|"\n"
operator|+
literal|"Phys Dev Name  Status   Information\n"
operator|+
literal|"\n"
operator|+
literal|"acla10_ref0   Passed   Arria 10 Reference Platform (acla10_ref0)\n"
operator|+
literal|"                       PCIe dev_id = 2494, bus:slot.func = 09:00.00, Gen2 x8\n"
operator|+
literal|"                       FPGA temperature = 50.5781 degrees C.\n"
operator|+
literal|"\n"
operator|+
literal|"DIAGNOSTIC_PASSED\n"
operator|+
literal|"---------------------------------------------------------\n"
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|IntelFpgaOpenclPlugin
name|openclPlugin
init|=
operator|new
name|IntelFpgaOpenclPlugin
argument_list|()
decl_stmt|;
name|FpgaDiscoverer
operator|.
name|getInstance
argument_list|()
operator|.
name|setResourceHanderPlugin
argument_list|(
name|openclPlugin
argument_list|)
expr_stmt|;
name|openclPlugin
operator|.
name|initPlugin
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|openclPlugin
operator|.
name|setShell
argument_list|(
name|mockPuginShell
argument_list|()
argument_list|)
expr_stmt|;
name|FpgaDiscoverer
operator|.
name|getInstance
argument_list|()
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FpgaResourceAllocator
operator|.
name|FpgaDevice
argument_list|>
name|list
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Case 1. core parsing
name|openclPlugin
operator|.
name|parseDiagnoseInfo
argument_list|(
name|output
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"IntelOpenCL"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"247"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMajor
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMinor
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"acl0"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAliasDevName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aclnalla_pcie0"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDevName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"02:00.00"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBusNum
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"53.1 degrees C"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTemperature
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"31.7 Watts"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCardPowerUsage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"IntelOpenCL"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"247"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getMajor
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getMinor
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"acl1"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getAliasDevName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aclnalla_pcie1"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getDevName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"03:00.00"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getBusNum
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"43.1 degrees C"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getTemperature
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"11.7 Watts"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCardPowerUsage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"IntelOpenCL"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"246"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getMajor
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getMinor
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"acl2"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getAliasDevName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"acla10_ref0"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getDevName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"09:00.00"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getBusNum
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"50.5781 degrees C"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getTemperature
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getCardPowerUsage
argument_list|()
argument_list|)
expr_stmt|;
comment|// Case 2. check alias map
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aliasMap
init|=
name|openclPlugin
operator|.
name|getAliasMap
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"acl0"
argument_list|,
name|aliasMap
operator|.
name|get
argument_list|(
literal|"247:0"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"acl1"
argument_list|,
name|aliasMap
operator|.
name|get
argument_list|(
literal|"247:1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"acl2"
argument_list|,
name|aliasMap
operator|.
name|get
argument_list|(
literal|"246:0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|mockPuginShell ()
specifier|private
name|IntelFpgaOpenclPlugin
operator|.
name|InnerShellExecutor
name|mockPuginShell
parameter_list|()
block|{
name|IntelFpgaOpenclPlugin
operator|.
name|InnerShellExecutor
name|shell
init|=
name|mock
argument_list|(
name|IntelFpgaOpenclPlugin
operator|.
name|InnerShellExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|shell
operator|.
name|runDiagnose
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|shell
operator|.
name|getMajorAndMinorNumber
argument_list|(
literal|"aclnalla_pcie0"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"247:0"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|shell
operator|.
name|getMajorAndMinorNumber
argument_list|(
literal|"aclnalla_pcie1"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"247:1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|shell
operator|.
name|getMajorAndMinorNumber
argument_list|(
literal|"acla10_ref0"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"246:0"
argument_list|)
expr_stmt|;
return|return
name|shell
return|;
block|}
block|}
end_class

end_unit

