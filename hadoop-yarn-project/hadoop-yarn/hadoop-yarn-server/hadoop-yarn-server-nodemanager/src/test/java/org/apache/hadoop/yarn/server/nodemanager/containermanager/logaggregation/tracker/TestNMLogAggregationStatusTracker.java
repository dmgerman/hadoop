begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.logaggregation.tracker
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|logaggregation
operator|.
name|tracker
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LogAggregationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LogAggregationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestNMLogAggregationStatusTracker
specifier|public
class|class
name|TestNMLogAggregationStatusTracker
block|{
annotation|@
name|Test
DECL|method|testNMLogAggregationStatusUpdate ()
specifier|public
name|void
name|testNMLogAggregationStatusUpdate
parameter_list|()
block|{
name|Context
name|mockContext
init|=
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|Application
argument_list|>
name|apps
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getApplications
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|apps
argument_list|)
expr_stmt|;
comment|// the log aggregation is disabled.
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|NMLogAggregationStatusTracker
name|tracker
init|=
operator|new
name|NMLogAggregationStatusTracker
argument_list|(
name|mockContext
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId0
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|updateLogAggregationStatus
argument_list|(
name|appId0
argument_list|,
name|LogAggregationStatus
operator|.
name|RUNNING
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LogAggregationReport
argument_list|>
name|reports
init|=
name|tracker
operator|.
name|pullCachedLogAggregationReports
argument_list|()
decl_stmt|;
comment|// we can not get any cached log aggregation status because
comment|// the log aggregation is disabled.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|reports
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// enable the log aggregation.
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|tracker
operator|=
operator|new
name|NMLogAggregationStatusTracker
argument_list|(
name|mockContext
argument_list|)
expr_stmt|;
comment|// update the log aggregation status for an un-existed application
comment|// the update time is not in the period of timeout.
comment|// So, we should not cache the log application status for this
comment|// application.
name|appId0
operator|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|updateLogAggregationStatus
argument_list|(
name|appId0
argument_list|,
name|LogAggregationStatus
operator|.
name|RUNNING
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|15
operator|*
literal|60
operator|*
literal|1000
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|reports
operator|=
name|tracker
operator|.
name|pullCachedLogAggregationReports
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|reports
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|updateLogAggregationStatus
argument_list|(
name|appId0
argument_list|,
name|LogAggregationStatus
operator|.
name|RUNNING
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|60
operator|*
literal|1000
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|reports
operator|=
name|tracker
operator|.
name|pullCachedLogAggregationReports
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|reports
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|reports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLogAggregationStatus
argument_list|()
operator|==
name|LogAggregationStatus
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|updateLogAggregationStatus
argument_list|(
name|appId0
argument_list|,
name|LogAggregationStatus
operator|.
name|SUCCEEDED
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|1
operator|*
literal|60
operator|*
literal|1000
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|reports
operator|=
name|tracker
operator|.
name|pullCachedLogAggregationReports
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|reports
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|reports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLogAggregationStatus
argument_list|()
operator|==
name|LogAggregationStatus
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
comment|// the log aggregation status is finalized. So, we would
comment|// ingore the following update
name|tracker
operator|.
name|updateLogAggregationStatus
argument_list|(
name|appId0
argument_list|,
name|LogAggregationStatus
operator|.
name|FAILED
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|1
operator|*
literal|60
operator|*
literal|1000
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|reports
operator|=
name|tracker
operator|.
name|pullCachedLogAggregationReports
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|reports
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|reports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLogAggregationStatus
argument_list|()
operator|==
name|LogAggregationStatus
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
block|}
DECL|method|testLogAggregationStatusRoller ()
specifier|public
name|void
name|testLogAggregationStatusRoller
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Context
name|mockContext
init|=
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_STATUS_TIME_OUT_MS
argument_list|,
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|NMLogAggregationStatusTracker
name|tracker
init|=
operator|new
name|NMLogAggregationStatusTracker
argument_list|(
name|mockContext
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId0
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|updateLogAggregationStatus
argument_list|(
name|appId0
argument_list|,
name|LogAggregationStatus
operator|.
name|RUNNING
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// sleep 10s
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// the cache log aggregation status should be deleted.
name|List
argument_list|<
name|LogAggregationReport
argument_list|>
name|reports
init|=
name|tracker
operator|.
name|pullCachedLogAggregationReports
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|reports
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

