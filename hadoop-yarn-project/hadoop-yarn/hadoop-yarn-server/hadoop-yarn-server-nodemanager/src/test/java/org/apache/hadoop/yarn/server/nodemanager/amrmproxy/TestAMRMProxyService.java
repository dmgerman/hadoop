begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.amrmproxy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|amrmproxy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestAMRMProxyService
specifier|public
class|class
name|TestAMRMProxyService
extends|extends
name|BaseAMRMProxyTest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestAMRMProxyService
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Test if the pipeline is created properly.    */
annotation|@
name|Test
DECL|method|testRequestInterceptorChainCreation ()
specifier|public
name|void
name|testRequestInterceptorChainCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|RequestInterceptor
name|root
init|=
name|super
operator|.
name|getAMRMProxyService
argument_list|()
operator|.
name|createRequestInterceptorChain
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|index
condition|)
block|{
case|case
literal|0
case|:
case|case
literal|1
case|:
case|case
literal|2
case|:
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PassThroughRequestInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|root
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|Assert
operator|.
name|assertEquals
argument_list|(
name|MockRequestInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|root
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|root
operator|=
name|root
operator|.
name|getNextInterceptor
argument_list|()
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The number of interceptors in chain does not match"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|4
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests registration of a single application master.    *     * @throws Exception    */
annotation|@
name|Test
DECL|method|testRegisterOneApplicationMaster ()
specifier|public
name|void
name|testRegisterOneApplicationMaster
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The testAppId identifier is used as host name and the mock resource
comment|// manager return it as the queue name. Assert that we received the queue
comment|// name
name|int
name|testAppId
init|=
literal|1
decl_stmt|;
name|RegisterApplicationMasterResponse
name|response1
init|=
name|registerApplicationMaster
argument_list|(
name|testAppId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|testAppId
argument_list|)
argument_list|,
name|response1
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the registration of multiple application master serially one at a    * time.    *     * @throws Exception    */
annotation|@
name|Test
DECL|method|testRegisterMulitpleApplicationMasters ()
specifier|public
name|void
name|testRegisterMulitpleApplicationMasters
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|testAppId
init|=
literal|0
init|;
name|testAppId
operator|<
literal|3
condition|;
name|testAppId
operator|++
control|)
block|{
name|RegisterApplicationMasterResponse
name|response
init|=
name|registerApplicationMaster
argument_list|(
name|testAppId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|testAppId
argument_list|)
argument_list|,
name|response
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests the registration of multiple application masters using multiple    * threads in parallel.    *     * @throws Exception    */
annotation|@
name|Test
DECL|method|testRegisterMulitpleApplicationMastersInParallel ()
specifier|public
name|void
name|testRegisterMulitpleApplicationMastersInParallel
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numberOfRequests
init|=
literal|5
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|testContexts
init|=
name|CreateTestRequestIdentifiers
argument_list|(
name|numberOfRequests
argument_list|)
decl_stmt|;
name|super
operator|.
name|registerApplicationMastersInParallel
argument_list|(
name|testContexts
argument_list|)
expr_stmt|;
block|}
DECL|method|CreateTestRequestIdentifiers ( int numberOfRequests)
specifier|private
name|ArrayList
argument_list|<
name|String
argument_list|>
name|CreateTestRequestIdentifiers
parameter_list|(
name|int
name|numberOfRequests
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|testContexts
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating "
operator|+
name|numberOfRequests
operator|+
literal|" contexts for testing"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|ep
init|=
literal|0
init|;
name|ep
operator|<
name|numberOfRequests
condition|;
name|ep
operator|++
control|)
block|{
name|testContexts
operator|.
name|add
argument_list|(
literal|"test-endpoint-"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|ep
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created test context: "
operator|+
name|testContexts
operator|.
name|get
argument_list|(
name|ep
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|testContexts
return|;
block|}
annotation|@
name|Test
DECL|method|testFinishOneApplicationMasterWithSuccess ()
specifier|public
name|void
name|testFinishOneApplicationMasterWithSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|testAppId
init|=
literal|1
decl_stmt|;
name|RegisterApplicationMasterResponse
name|registerResponse
init|=
name|registerApplicationMaster
argument_list|(
name|testAppId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|registerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|testAppId
argument_list|)
argument_list|,
name|registerResponse
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|FinishApplicationMasterResponse
name|finshResponse
init|=
name|finishApplicationMaster
argument_list|(
name|testAppId
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|finshResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|finshResponse
operator|.
name|getIsUnregistered
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFinishOneApplicationMasterWithFailure ()
specifier|public
name|void
name|testFinishOneApplicationMasterWithFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|testAppId
init|=
literal|1
decl_stmt|;
name|RegisterApplicationMasterResponse
name|registerResponse
init|=
name|registerApplicationMaster
argument_list|(
name|testAppId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|registerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|testAppId
argument_list|)
argument_list|,
name|registerResponse
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|FinishApplicationMasterResponse
name|finshResponse
init|=
name|finishApplicationMaster
argument_list|(
name|testAppId
argument_list|,
name|FinalApplicationStatus
operator|.
name|FAILED
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|finshResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|finshResponse
operator|.
name|getIsUnregistered
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Try to finish an application master that is already finished.
name|finishApplicationMaster
argument_list|(
name|testAppId
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"The request to finish application master should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// This is expected. So nothing required here.
name|LOG
operator|.
name|info
argument_list|(
literal|"Finish registration failed as expected because it was not registered"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFinishInvalidApplicationMaster ()
specifier|public
name|void
name|testFinishInvalidApplicationMaster
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
comment|// Try to finish an application master that was not registered.
name|finishApplicationMaster
argument_list|(
literal|4
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"The request to finish application master should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// This is expected. So nothing required here.
name|LOG
operator|.
name|info
argument_list|(
literal|"Finish registration failed as expected because it was not registered"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFinishMulitpleApplicationMasters ()
specifier|public
name|void
name|testFinishMulitpleApplicationMasters
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numberOfRequests
init|=
literal|3
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|numberOfRequests
condition|;
name|index
operator|++
control|)
block|{
name|RegisterApplicationMasterResponse
name|registerResponse
init|=
name|registerApplicationMaster
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|registerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|index
argument_list|)
argument_list|,
name|registerResponse
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Finish in reverse sequence
for|for
control|(
name|int
name|index
init|=
name|numberOfRequests
operator|-
literal|1
init|;
name|index
operator|>=
literal|0
condition|;
name|index
operator|--
control|)
block|{
name|FinishApplicationMasterResponse
name|finshResponse
init|=
name|finishApplicationMaster
argument_list|(
name|index
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|finshResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|finshResponse
operator|.
name|getIsUnregistered
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert that the application has been removed from the collection
name|Assert
operator|.
name|assertTrue
argument_list|(
name|this
operator|.
name|getAMRMProxyService
argument_list|()
operator|.
name|getPipelines
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|index
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// Try to finish an application master that is already finished.
name|finishApplicationMaster
argument_list|(
literal|1
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"The request to finish application master should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// This is expected. So nothing required here.
name|LOG
operator|.
name|info
argument_list|(
literal|"Finish registration failed as expected because it was not registered"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// Try to finish an application master that was not registered.
name|finishApplicationMaster
argument_list|(
literal|4
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"The request to finish application master should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// This is expected. So nothing required here.
name|LOG
operator|.
name|info
argument_list|(
literal|"Finish registration failed as expected because it was not registered"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFinishMulitpleApplicationMastersInParallel ()
specifier|public
name|void
name|testFinishMulitpleApplicationMastersInParallel
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numberOfRequests
init|=
literal|5
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|testContexts
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating "
operator|+
name|numberOfRequests
operator|+
literal|" contexts for testing"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfRequests
condition|;
name|i
operator|++
control|)
block|{
name|testContexts
operator|.
name|add
argument_list|(
literal|"test-endpoint-"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created test context: "
operator|+
name|testContexts
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|RegisterApplicationMasterResponse
name|registerResponse
init|=
name|registerApplicationMaster
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|registerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|registerResponse
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|finishApplicationMastersInParallel
argument_list|(
name|testContexts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocateRequestWithNullValues ()
specifier|public
name|void
name|testAllocateRequestWithNullValues
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|testAppId
init|=
literal|1
decl_stmt|;
name|RegisterApplicationMasterResponse
name|registerResponse
init|=
name|registerApplicationMaster
argument_list|(
name|testAppId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|registerResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|testAppId
argument_list|)
argument_list|,
name|registerResponse
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|AllocateResponse
name|allocateResponse
init|=
name|allocate
argument_list|(
name|testAppId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|allocateResponse
argument_list|)
expr_stmt|;
name|FinishApplicationMasterResponse
name|finshResponse
init|=
name|finishApplicationMaster
argument_list|(
name|testAppId
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|finshResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|finshResponse
operator|.
name|getIsUnregistered
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocateRequestWithoutRegistering ()
specifier|public
name|void
name|testAllocateRequestWithoutRegistering
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
comment|// Try to allocate an application master without registering.
name|allocate
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"The request to allocate application master should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// This is expected. So nothing required here.
name|LOG
operator|.
name|info
argument_list|(
literal|"AllocateRequest failed as expected because AM was not registered"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAllocateWithOneResourceRequest ()
specifier|public
name|void
name|testAllocateWithOneResourceRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|testAppId
init|=
literal|1
decl_stmt|;
name|RegisterApplicationMasterResponse
name|registerResponse
init|=
name|registerApplicationMaster
argument_list|(
name|testAppId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|registerResponse
argument_list|)
expr_stmt|;
name|getContainersAndAssert
argument_list|(
name|testAppId
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|finishApplicationMaster
argument_list|(
name|testAppId
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocateWithMultipleResourceRequest ()
specifier|public
name|void
name|testAllocateWithMultipleResourceRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|testAppId
init|=
literal|1
decl_stmt|;
name|RegisterApplicationMasterResponse
name|registerResponse
init|=
name|registerApplicationMaster
argument_list|(
name|testAppId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|registerResponse
argument_list|)
expr_stmt|;
name|getContainersAndAssert
argument_list|(
name|testAppId
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|finishApplicationMaster
argument_list|(
name|testAppId
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocateAndReleaseContainers ()
specifier|public
name|void
name|testAllocateAndReleaseContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|testAppId
init|=
literal|1
decl_stmt|;
name|RegisterApplicationMasterResponse
name|registerResponse
init|=
name|registerApplicationMaster
argument_list|(
name|testAppId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|registerResponse
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|getContainersAndAssert
argument_list|(
name|testAppId
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|releaseContainersAndAssert
argument_list|(
name|testAppId
argument_list|,
name|containers
argument_list|)
expr_stmt|;
name|finishApplicationMaster
argument_list|(
name|testAppId
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocateAndReleaseContainersForMultipleAM ()
specifier|public
name|void
name|testAllocateAndReleaseContainersForMultipleAM
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numberOfApps
init|=
literal|5
decl_stmt|;
for|for
control|(
name|int
name|testAppId
init|=
literal|0
init|;
name|testAppId
operator|<
name|numberOfApps
condition|;
name|testAppId
operator|++
control|)
block|{
name|RegisterApplicationMasterResponse
name|registerResponse
init|=
name|registerApplicationMaster
argument_list|(
name|testAppId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|registerResponse
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|getContainersAndAssert
argument_list|(
name|testAppId
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|releaseContainersAndAssert
argument_list|(
name|testAppId
argument_list|,
name|containers
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|testAppId
init|=
literal|0
init|;
name|testAppId
operator|<
name|numberOfApps
condition|;
name|testAppId
operator|++
control|)
block|{
name|finishApplicationMaster
argument_list|(
name|testAppId
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAllocateAndReleaseContainersForMultipleAMInParallel ()
specifier|public
name|void
name|testAllocateAndReleaseContainersForMultipleAMInParallel
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numberOfApps
init|=
literal|6
decl_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|tempAppIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfApps
condition|;
name|i
operator|++
control|)
block|{
name|tempAppIds
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|appIds
init|=
name|tempAppIds
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|responses
init|=
name|runInParallel
argument_list|(
name|appIds
argument_list|,
operator|new
name|Function
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|invoke
parameter_list|(
name|Integer
name|testAppId
parameter_list|)
block|{
try|try
block|{
name|RegisterApplicationMasterResponse
name|registerResponse
init|=
name|registerApplicationMaster
argument_list|(
name|testAppId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"response is null"
argument_list|,
name|registerResponse
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|getContainersAndAssert
argument_list|(
name|testAppId
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|releaseContainersAndAssert
argument_list|(
name|testAppId
argument_list|,
name|containers
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sucessfully registered application master with appId: "
operator|+
name|testAppId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to register application master with appId: "
operator|+
name|testAppId
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|testAppId
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|testAppId
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of responses received does not match with request"
argument_list|,
name|appIds
operator|.
name|size
argument_list|()
argument_list|,
name|responses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|testAppId
range|:
name|responses
control|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|testAppId
argument_list|)
expr_stmt|;
name|finishApplicationMaster
argument_list|(
name|testAppId
operator|.
name|intValue
argument_list|()
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getContainersAndAssert (int appId, int numberOfResourceRequests)
specifier|private
name|List
argument_list|<
name|Container
argument_list|>
name|getContainersAndAssert
parameter_list|(
name|int
name|appId
parameter_list|,
name|int
name|numberOfResourceRequests
parameter_list|)
throws|throws
name|Exception
block|{
name|AllocateRequest
name|allocateRequest
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|AllocateRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|allocateRequest
operator|.
name|setResponseId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|(
name|numberOfResourceRequests
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|askList
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|(
name|numberOfResourceRequests
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|testAppId
init|=
literal|0
init|;
name|testAppId
operator|<
name|numberOfResourceRequests
condition|;
name|testAppId
operator|++
control|)
block|{
name|askList
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|"test-node-"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|testAppId
argument_list|)
argument_list|,
literal|6000
argument_list|,
literal|2
argument_list|,
name|testAppId
operator|%
literal|5
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|allocateRequest
operator|.
name|setAskList
argument_list|(
name|askList
argument_list|)
expr_stmt|;
name|AllocateResponse
name|allocateResponse
init|=
name|allocate
argument_list|(
name|appId
argument_list|,
name|allocateRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"allocate() returned null response"
argument_list|,
name|allocateResponse
argument_list|)
expr_stmt|;
name|containers
operator|.
name|addAll
argument_list|(
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
comment|// Send max 10 heart beats to receive all the containers. If not, we will
comment|// fail the test
name|int
name|numHeartbeat
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|containers
operator|.
name|size
argument_list|()
operator|<
name|askList
operator|.
name|size
argument_list|()
operator|&&
name|numHeartbeat
operator|++
operator|<
literal|10
condition|)
block|{
name|allocateResponse
operator|=
name|allocate
argument_list|(
name|appId
argument_list|,
name|Records
operator|.
name|newRecord
argument_list|(
name|AllocateRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"allocate() returned null response"
argument_list|,
name|allocateResponse
argument_list|)
expr_stmt|;
name|containers
operator|.
name|addAll
argument_list|(
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of allocated containers in this request: "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Total number of allocated containers: "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|containers
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
comment|// We broadcast the request, the number of containers we received will be
comment|// higher than we ask
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The asklist count is not same as response"
argument_list|,
name|askList
operator|.
name|size
argument_list|()
operator|<=
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|containers
return|;
block|}
DECL|method|releaseContainersAndAssert (int appId, List<Container> containers)
specifier|private
name|void
name|releaseContainersAndAssert
parameter_list|(
name|int
name|appId
parameter_list|,
name|List
argument_list|<
name|Container
argument_list|>
name|containers
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containers
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|AllocateRequest
name|allocateRequest
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|AllocateRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|allocateRequest
operator|.
name|setResponseId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|relList
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|(
name|containers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Container
name|container
range|:
name|containers
control|)
block|{
name|relList
operator|.
name|add
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|allocateRequest
operator|.
name|setReleaseList
argument_list|(
name|relList
argument_list|)
expr_stmt|;
name|AllocateResponse
name|allocateResponse
init|=
name|allocate
argument_list|(
name|appId
argument_list|,
name|allocateRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|allocateResponse
argument_list|)
expr_stmt|;
comment|// The way the mock resource manager is setup, it will return the containers
comment|// that were released in the response. This is done because the UAMs run
comment|// asynchronously and we need to if all the resource managers received the
comment|// release it. The containers sent by the mock resource managers will be
comment|// aggregated and returned back to us and we can assert if all the release
comment|// lists reached the sub-clusters
name|List
argument_list|<
name|Container
argument_list|>
name|containersForReleasedContainerIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|()
decl_stmt|;
name|containersForReleasedContainerIds
operator|.
name|addAll
argument_list|(
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
comment|// Send max 10 heart beats to receive all the containers. If not, we will
comment|// fail the test
name|int
name|numHeartbeat
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|containersForReleasedContainerIds
operator|.
name|size
argument_list|()
operator|<
name|relList
operator|.
name|size
argument_list|()
operator|&&
name|numHeartbeat
operator|++
operator|<
literal|10
condition|)
block|{
name|allocateResponse
operator|=
name|allocate
argument_list|(
name|appId
argument_list|,
name|Records
operator|.
name|newRecord
argument_list|(
name|AllocateRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|allocateResponse
argument_list|)
expr_stmt|;
name|containersForReleasedContainerIds
operator|.
name|addAll
argument_list|(
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of containers received in this request: "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Total number of containers received: "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|containersForReleasedContainerIds
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|relList
operator|.
name|size
argument_list|()
argument_list|,
name|containersForReleasedContainerIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

