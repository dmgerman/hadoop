begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
DECL|package|containermanager.linux.runtime
name|containermanager
operator|.
name|linux
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|runtime
operator|.
name|ContainerExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|runtime
operator|.
name|ContainerRuntimeContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilePermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketPermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Formatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|JAVA_HOME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|JavaSandboxLinuxContainerRuntime
operator|.
name|NMContainerPolicyUtils
operator|.
name|MULTI_COMMAND_REGEX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|JavaSandboxLinuxContainerRuntime
operator|.
name|NMContainerPolicyUtils
operator|.
name|CLEAN_CMD_REGEX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|JavaSandboxLinuxContainerRuntime
operator|.
name|NMContainerPolicyUtils
operator|.
name|CONTAINS_JAVA_CMD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|JavaSandboxLinuxContainerRuntime
operator|.
name|NMContainerPolicyUtils
operator|.
name|POLICY_APPEND_FLAG
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|JavaSandboxLinuxContainerRuntime
operator|.
name|NMContainerPolicyUtils
operator|.
name|POLICY_FILE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|JavaSandboxLinuxContainerRuntime
operator|.
name|NMContainerPolicyUtils
operator|.
name|POLICY_FLAG
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|JavaSandboxLinuxContainerRuntime
operator|.
name|NMContainerPolicyUtils
operator|.
name|SECURITY_FLAG
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|JavaSandboxLinuxContainerRuntime
operator|.
name|POLICY_FILE_DIR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|APPID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|CONTAINER_ID_STR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|CONTAINER_LOCAL_DIRS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|CONTAINER_RUN_CMDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|CONTAINER_WORK_DIR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|FILECACHE_DIRS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|LOCALIZED_RESOURCES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|LOCAL_DIRS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|LOG_DIRS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|RUN_AS_USER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|USER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|USER_LOCAL_DIRS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Test policy file generation and policy enforcement for the  * {@link JavaSandboxLinuxContainerRuntime}.  */
end_comment

begin_class
DECL|class|TestJavaSandboxLinuxContainerRuntime
specifier|public
class|class
name|TestJavaSandboxLinuxContainerRuntime
block|{
DECL|field|HADOOP_HOME
specifier|private
specifier|final
specifier|static
name|String
name|HADOOP_HOME
init|=
literal|"hadoop.home.dir"
decl_stmt|;
DECL|field|HADOOP_HOME_DIR
specifier|private
specifier|final
specifier|static
name|String
name|HADOOP_HOME_DIR
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|HADOOP_HOME
argument_list|)
decl_stmt|;
DECL|field|baseProps
specifier|private
specifier|final
name|Properties
name|baseProps
init|=
operator|new
name|Properties
argument_list|(
name|System
operator|.
name|getProperties
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|field|grantFile
DECL|field|denyFile
DECL|field|policyFile
specifier|private
specifier|static
name|File
name|grantFile
decl_stmt|,
name|denyFile
decl_stmt|,
name|policyFile
decl_stmt|,
DECL|field|grantDir
DECL|field|denyDir
DECL|field|containerDir
name|grantDir
decl_stmt|,
name|denyDir
decl_stmt|,
name|containerDir
decl_stmt|;
DECL|field|policyFilePath
specifier|private
specifier|static
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|policyFilePath
decl_stmt|;
DECL|field|securityManager
specifier|private
specifier|static
name|SecurityManager
name|securityManager
decl_stmt|;
DECL|field|resources
specifier|private
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|resources
decl_stmt|;
DECL|field|env
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
decl_stmt|;
DECL|field|whitelistGroup
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|whitelistGroup
decl_stmt|;
DECL|field|mockExecutor
specifier|private
name|PrivilegedOperationExecutor
name|mockExecutor
decl_stmt|;
DECL|field|runtime
specifier|private
name|JavaSandboxLinuxContainerRuntime
name|runtime
decl_stmt|;
DECL|field|runtimeContextBuilder
specifier|private
name|ContainerRuntimeContext
operator|.
name|Builder
name|runtimeContextBuilder
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|NORMAL_USER
specifier|private
specifier|final
specifier|static
name|String
name|NORMAL_USER
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
DECL|field|NORMAL_GROUP
specifier|private
specifier|final
specifier|static
name|String
name|NORMAL_GROUP
init|=
literal|"normalGroup"
decl_stmt|;
DECL|field|WHITELIST_USER
specifier|private
specifier|final
specifier|static
name|String
name|WHITELIST_USER
init|=
literal|"picard"
decl_stmt|;
DECL|field|WHITELIST_GROUP
specifier|private
specifier|final
specifier|static
name|String
name|WHITELIST_GROUP
init|=
literal|"captains"
decl_stmt|;
DECL|field|CONTAINER_ID
specifier|private
specifier|final
specifier|static
name|String
name|CONTAINER_ID
init|=
literal|"container_1234567890"
decl_stmt|;
DECL|field|APPLICATION_ID
specifier|private
specifier|final
specifier|static
name|String
name|APPLICATION_ID
init|=
literal|"application_1234567890"
decl_stmt|;
DECL|field|baseTestDirectory
specifier|private
name|File
name|baseTestDirectory
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|baseTestDirectory
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|,
literal|"target"
argument_list|)
argument_list|)
argument_list|,
name|TestJavaSandboxLinuxContainerRuntime
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|whitelistGroup
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|whitelistGroup
operator|.
name|add
argument_list|(
name|WHITELIST_GROUP
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_USER_GROUP_STATIC_OVERRIDES
argument_list|,
name|WHITELIST_USER
operator|+
literal|"="
operator|+
name|WHITELIST_GROUP
operator|+
literal|","
operator|+
name|NORMAL_GROUP
operator|+
literal|";"
operator|+
name|NORMAL_USER
operator|+
literal|"="
operator|+
name|NORMAL_GROUP
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.tmp.dir"
argument_list|,
name|baseTestDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|baseTestDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|POLICY_FILE_DIR
argument_list|,
name|CONTAINER_ID
operator|+
literal|"-"
operator|+
name|POLICY_FILE
argument_list|)
argument_list|)
expr_stmt|;
name|mockExecutor
operator|=
name|mock
argument_list|(
name|PrivilegedOperationExecutor
operator|.
name|class
argument_list|)
expr_stmt|;
name|runtime
operator|=
operator|new
name|JavaSandboxLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|resources
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|grantDir
operator|=
operator|new
name|File
argument_list|(
name|baseTestDirectory
argument_list|,
literal|"grantDir"
argument_list|)
expr_stmt|;
name|denyDir
operator|=
operator|new
name|File
argument_list|(
name|baseTestDirectory
argument_list|,
literal|"denyDir"
argument_list|)
expr_stmt|;
name|containerDir
operator|=
operator|new
name|File
argument_list|(
name|baseTestDirectory
argument_list|,
name|APPLICATION_ID
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|CONTAINER_ID
argument_list|)
expr_stmt|;
name|grantDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|denyDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|containerDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|grantFile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"grantFile"
argument_list|,
literal|"tmp"
argument_list|,
name|grantDir
argument_list|)
expr_stmt|;
name|denyFile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"denyFile"
argument_list|,
literal|"tmp"
argument_list|,
name|denyDir
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|symLinks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|symLinks
operator|.
name|add
argument_list|(
name|grantFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|resources
operator|.
name|put
argument_list|(
operator|new
name|Path
argument_list|(
name|grantFile
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
argument_list|,
name|symLinks
argument_list|)
expr_stmt|;
name|env
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|JAVA_HOME
operator|.
name|name
argument_list|()
argument_list|,
name|System
operator|.
name|getenv
argument_list|(
name|JAVA_HOME
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|policyFile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"java"
argument_list|,
literal|"policy"
argument_list|,
name|containerDir
argument_list|)
expr_stmt|;
name|policyFilePath
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|policyFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|runtimeContextBuilder
operator|=
name|createRuntimeContext
argument_list|()
expr_stmt|;
if|if
condition|(
name|HADOOP_HOME_DIR
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|HADOOP_HOME
argument_list|,
name|policyFile
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|OutputStream
name|outStream
init|=
operator|new
name|FileOutputStream
argument_list|(
name|policyFile
argument_list|)
decl_stmt|;
name|JavaSandboxLinuxContainerRuntime
operator|.
name|NMContainerPolicyUtils
operator|.
name|generatePolicyFile
argument_list|(
name|outStream
argument_list|,
name|symLinks
argument_list|,
literal|null
argument_list|,
name|resources
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.security.policy"
argument_list|,
name|policyFile
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|securityManager
operator|=
operator|new
name|SecurityManager
argument_list|()
expr_stmt|;
block|}
DECL|method|createRuntimeContext ()
specifier|public
name|ContainerRuntimeContext
operator|.
name|Builder
name|createRuntimeContext
parameter_list|()
block|{
name|Container
name|container
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|ctx
init|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getLaunchContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ctx
operator|.
name|getEnvironment
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|ContainerRuntimeContext
operator|.
name|Builder
name|builder
init|=
operator|new
name|ContainerRuntimeContext
operator|.
name|Builder
argument_list|(
name|container
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|localDirs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setExecutionAttribute
argument_list|(
name|LOCALIZED_RESOURCES
argument_list|,
name|resources
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|RUN_AS_USER
argument_list|,
name|NORMAL_USER
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|CONTAINER_ID_STR
argument_list|,
name|CONTAINER_ID
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|APPID
argument_list|,
name|APPLICATION_ID
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|CONTAINER_WORK_DIR
argument_list|,
operator|new
name|Path
argument_list|(
name|containerDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|LOCAL_DIRS
argument_list|,
name|localDirs
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|LOG_DIRS
argument_list|,
name|localDirs
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|FILECACHE_DIRS
argument_list|,
name|localDirs
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|USER_LOCAL_DIRS
argument_list|,
name|localDirs
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|CONTAINER_LOCAL_DIRS
argument_list|,
name|localDirs
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|CONTAINER_RUN_CMDS
argument_list|,
name|localDirs
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|field|SOCKET_PERMISSION_FORMAT
specifier|public
specifier|static
specifier|final
name|String
name|SOCKET_PERMISSION_FORMAT
init|=
literal|"grant { \n"
operator|+
literal|"   permission %1s \"%2s\", \"%3s\";\n"
operator|+
literal|"};\n"
decl_stmt|;
DECL|field|RUNTIME_PERMISSION_FORMAT
specifier|public
specifier|static
specifier|final
name|String
name|RUNTIME_PERMISSION_FORMAT
init|=
literal|"grant { \n"
operator|+
literal|"   permission %1s \"%2s\";\n"
operator|+
literal|"};\n"
decl_stmt|;
annotation|@
name|Test
DECL|method|testGroupPolicies ()
specifier|public
name|void
name|testGroupPolicies
parameter_list|()
throws|throws
name|IOException
throws|,
name|ContainerExecutionException
block|{
comment|// Generate new policy files each containing one grant
name|File
name|openSocketPolicyFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"openSocket"
argument_list|,
literal|"policy"
argument_list|,
name|baseTestDirectory
argument_list|)
decl_stmt|;
name|File
name|classLoaderPolicyFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"createClassLoader"
argument_list|,
literal|"policy"
argument_list|,
name|baseTestDirectory
argument_list|)
decl_stmt|;
name|Permission
name|socketPerm
init|=
operator|new
name|SocketPermission
argument_list|(
literal|"localhost:0"
argument_list|,
literal|"listen"
argument_list|)
decl_stmt|;
name|Permission
name|runtimePerm
init|=
operator|new
name|RuntimePermission
argument_list|(
literal|"createClassLoader"
argument_list|)
decl_stmt|;
name|StringBuilder
name|socketPermString
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Formatter
name|openSocketPolicyFormatter
init|=
operator|new
name|Formatter
argument_list|(
name|socketPermString
argument_list|)
decl_stmt|;
name|openSocketPolicyFormatter
operator|.
name|format
argument_list|(
name|SOCKET_PERMISSION_FORMAT
argument_list|,
name|socketPerm
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|socketPerm
operator|.
name|getName
argument_list|()
argument_list|,
name|socketPerm
operator|.
name|getActions
argument_list|()
argument_list|)
expr_stmt|;
name|FileWriter
name|socketPermWriter
init|=
operator|new
name|FileWriter
argument_list|(
name|openSocketPolicyFile
argument_list|)
decl_stmt|;
name|socketPermWriter
operator|.
name|write
argument_list|(
name|socketPermString
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|socketPermWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|StringBuilder
name|classLoaderPermString
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Formatter
name|classLoaderPolicyFormatter
init|=
operator|new
name|Formatter
argument_list|(
name|classLoaderPermString
argument_list|)
decl_stmt|;
name|classLoaderPolicyFormatter
operator|.
name|format
argument_list|(
name|RUNTIME_PERMISSION_FORMAT
argument_list|,
name|runtimePerm
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|runtimePerm
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|FileWriter
name|classLoaderPermWriter
init|=
operator|new
name|FileWriter
argument_list|(
name|classLoaderPolicyFile
argument_list|)
decl_stmt|;
name|classLoaderPermWriter
operator|.
name|write
argument_list|(
name|classLoaderPermString
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|classLoaderPermWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_CONTAINER_SANDBOX_POLICY_GROUP_PREFIX
operator|+
name|WHITELIST_GROUP
argument_list|,
name|openSocketPolicyFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_CONTAINER_SANDBOX_POLICY_GROUP_PREFIX
operator|+
name|NORMAL_GROUP
argument_list|,
name|classLoaderPolicyFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|inputCommand
init|=
block|{
literal|"$JAVA_HOME/bin/java jar MyJob.jar"
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|inputCommand
argument_list|)
decl_stmt|;
name|runtimeContextBuilder
operator|.
name|setExecutionAttribute
argument_list|(
name|USER
argument_list|,
name|WHITELIST_USER
argument_list|)
expr_stmt|;
name|runtimeContextBuilder
operator|.
name|setExecutionAttribute
argument_list|(
name|CONTAINER_RUN_CMDS
argument_list|,
name|commands
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|prepareContainer
argument_list|(
name|runtimeContextBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|//pull generated policy from cmd
name|Matcher
name|policyMatches
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|POLICY_APPEND_FLAG
operator|+
literal|"=?([^ ]+)"
argument_list|)
operator|.
name|matcher
argument_list|(
name|commands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|policyMatches
operator|.
name|find
argument_list|()
expr_stmt|;
name|String
name|generatedPolicy
init|=
name|policyMatches
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|//Test that generated policy file has included both policies
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Files
operator|.
name|readAllLines
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|generatedPolicy
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|classLoaderPermString
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Files
operator|.
name|readAllLines
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|generatedPolicy
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|socketPermString
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGrant ()
specifier|public
name|void
name|testGrant
parameter_list|()
throws|throws
name|Exception
block|{
name|FilePermission
name|grantPermission
init|=
operator|new
name|FilePermission
argument_list|(
name|grantFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"read"
argument_list|)
decl_stmt|;
name|securityManager
operator|.
name|checkPermission
argument_list|(
name|grantPermission
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeny ()
specifier|public
name|void
name|testDeny
parameter_list|()
throws|throws
name|Exception
block|{
name|FilePermission
name|denyPermission
init|=
operator|new
name|FilePermission
argument_list|(
name|denyFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"read"
argument_list|)
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|java
operator|.
name|security
operator|.
name|AccessControlException
operator|.
name|class
argument_list|)
expr_stmt|;
name|securityManager
operator|.
name|checkPermission
argument_list|(
name|denyPermission
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEnforcingMode ()
specifier|public
name|void
name|testEnforcingMode
parameter_list|()
throws|throws
name|ContainerExecutionException
block|{
name|String
index|[]
name|nonJavaCommands
init|=
block|{
literal|"bash malicious_script.sh"
block|,
literal|"python malicious_script.py"
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|nonJavaCommands
argument_list|)
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ContainerExecutionException
operator|.
name|class
argument_list|)
expr_stmt|;
name|JavaSandboxLinuxContainerRuntime
operator|.
name|NMContainerPolicyUtils
operator|.
name|appendSecurityFlags
argument_list|(
name|commands
argument_list|,
name|env
argument_list|,
name|policyFilePath
argument_list|,
name|JavaSandboxLinuxContainerRuntime
operator|.
name|SandboxMode
operator|.
name|enforcing
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPermissiveMode ()
specifier|public
name|void
name|testPermissiveMode
parameter_list|()
throws|throws
name|ContainerExecutionException
block|{
name|String
index|[]
name|nonJavaCommands
init|=
block|{
literal|"bash non-java-script.sh"
block|,
literal|"python non-java-script.py"
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|nonJavaCommands
argument_list|)
decl_stmt|;
name|JavaSandboxLinuxContainerRuntime
operator|.
name|NMContainerPolicyUtils
operator|.
name|appendSecurityFlags
argument_list|(
name|commands
argument_list|,
name|env
argument_list|,
name|policyFilePath
argument_list|,
name|JavaSandboxLinuxContainerRuntime
operator|.
name|SandboxMode
operator|.
name|permissive
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDisabledSandboxWithWhitelist ()
specifier|public
name|void
name|testDisabledSandboxWithWhitelist
parameter_list|()
throws|throws
name|ContainerExecutionException
block|{
name|String
index|[]
name|inputCommand
init|=
block|{
literal|"java jar MyJob.jar"
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|inputCommand
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_CONTAINER_SANDBOX_WHITELIST_GROUP
argument_list|,
name|WHITELIST_GROUP
argument_list|)
expr_stmt|;
name|runtimeContextBuilder
operator|.
name|setExecutionAttribute
argument_list|(
name|USER
argument_list|,
name|WHITELIST_USER
argument_list|)
expr_stmt|;
name|runtimeContextBuilder
operator|.
name|setExecutionAttribute
argument_list|(
name|CONTAINER_RUN_CMDS
argument_list|,
name|commands
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|prepareContainer
argument_list|(
name|runtimeContextBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Command should not be modified when user is "
operator|+
literal|"member of whitelisted group"
argument_list|,
name|inputCommand
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|commands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEnabledSandboxWithWhitelist ()
specifier|public
name|void
name|testEnabledSandboxWithWhitelist
parameter_list|()
throws|throws
name|ContainerExecutionException
block|{
name|String
index|[]
name|inputCommand
init|=
block|{
literal|"$JAVA_HOME/bin/java jar -Djava.security.manager MyJob.jar"
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|inputCommand
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_CONTAINER_SANDBOX_WHITELIST_GROUP
argument_list|,
name|WHITELIST_GROUP
argument_list|)
expr_stmt|;
name|runtimeContextBuilder
operator|.
name|setExecutionAttribute
argument_list|(
name|USER
argument_list|,
name|WHITELIST_USER
argument_list|)
expr_stmt|;
name|runtimeContextBuilder
operator|.
name|setExecutionAttribute
argument_list|(
name|CONTAINER_RUN_CMDS
argument_list|,
name|commands
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|prepareContainer
argument_list|(
name|runtimeContextBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Command should be modified to include "
operator|+
literal|"policy file in whitelisted Sandbox mode"
argument_list|,
name|commands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
name|SECURITY_FLAG
argument_list|)
operator|&&
name|commands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
name|POLICY_FLAG
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeniedWhitelistGroup ()
specifier|public
name|void
name|testDeniedWhitelistGroup
parameter_list|()
throws|throws
name|ContainerExecutionException
block|{
name|String
index|[]
name|inputCommand
init|=
block|{
literal|"$JAVA_HOME/bin/java jar MyJob.jar"
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|inputCommand
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_CONTAINER_SANDBOX_WHITELIST_GROUP
argument_list|,
name|WHITELIST_GROUP
argument_list|)
expr_stmt|;
name|runtimeContextBuilder
operator|.
name|setExecutionAttribute
argument_list|(
name|USER
argument_list|,
name|NORMAL_USER
argument_list|)
expr_stmt|;
name|runtimeContextBuilder
operator|.
name|setExecutionAttribute
argument_list|(
name|CONTAINER_RUN_CMDS
argument_list|,
name|commands
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|prepareContainer
argument_list|(
name|runtimeContextBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Java security manager must be enabled for "
operator|+
literal|"unauthorized users"
argument_list|,
name|commands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
name|SECURITY_FLAG
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChainedCmdRegex ()
specifier|public
name|void
name|testChainedCmdRegex
parameter_list|()
block|{
name|String
index|[]
name|multiCmds
init|=
block|{
literal|"cmd1&& cmd2"
block|,
literal|"cmd1 || cmd2"
block|,
literal|"cmd1 `cmd2`"
block|,
literal|"cmd1 $(cmd2)"
block|,
literal|"cmd1; \\\n cmd2"
block|,
literal|"cmd1; cmd2"
block|,
literal|"cmd1|&cmd2"
block|,
literal|"cmd1|cmd2"
block|,
literal|"cmd1&cmd2"
block|}
decl_stmt|;
name|Arrays
operator|.
name|stream
argument_list|(
name|multiCmds
argument_list|)
operator|.
name|forEach
argument_list|(
name|cmd
lambda|->
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cmd
operator|.
name|matches
argument_list|(
name|MULTI_COMMAND_REGEX
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"cmd1&> logfile"
operator|.
name|matches
argument_list|(
name|MULTI_COMMAND_REGEX
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainsJavaRegex ()
specifier|public
name|void
name|testContainsJavaRegex
parameter_list|()
block|{
name|String
index|[]
name|javaCmds
init|=
block|{
literal|"$JAVA_HOME/bin/java -cp App.jar AppClass"
block|,
literal|"$JAVA_HOME/bin/java -jar App.jar AppClass&> logfile"
block|}
decl_stmt|;
name|String
index|[]
name|nonJavaCmds
init|=
block|{
literal|"$JAVA_HOME/bin/jajavava -cp App.jar AppClass"
block|,
literal|"/nm/app/container/usercache/badjava -cp Bad.jar ChaosClass"
block|}
decl_stmt|;
for|for
control|(
name|String
name|javaCmd
range|:
name|javaCmds
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|javaCmd
operator|.
name|matches
argument_list|(
name|CONTAINS_JAVA_CMD
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|nonJavaCmd
range|:
name|nonJavaCmds
control|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|nonJavaCmd
operator|.
name|matches
argument_list|(
name|CONTAINS_JAVA_CMD
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCleanCmdRegex ()
specifier|public
name|void
name|testCleanCmdRegex
parameter_list|()
block|{
name|String
index|[]
name|securityManagerCmds
init|=
block|{
literal|"/usr/bin/java -Djava.security.manager -cp $CLASSPATH $MainClass"
block|,
literal|"-Djava.security.manager -Djava.security.policy==testpolicy keepThis"
block|}
decl_stmt|;
name|String
index|[]
name|cleanedCmdsResult
init|=
block|{
literal|"/usr/bin/java  -cp $CLASSPATH $MainClass"
block|,
literal|"keepThis"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|securityManagerCmds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|securityManagerCmds
index|[
name|i
index|]
operator|.
name|replaceAll
argument_list|(
name|CLEAN_CMD_REGEX
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|,
name|cleanedCmdsResult
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAppendSecurityFlags ()
specifier|public
name|void
name|testAppendSecurityFlags
parameter_list|()
throws|throws
name|ContainerExecutionException
block|{
name|String
name|securityString
init|=
literal|"-Djava.security.manager -Djava.security.policy=="
operator|+
name|policyFile
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|String
index|[]
name|badCommands
init|=
block|{
literal|"$JAVA_HOME/bin/java -Djava.security.manager "
operator|+
literal|"-Djava.security.policy=/home/user/java.policy"
block|,
literal|"$JAVA_HOME/bin/java -cp MyApp.jar MrAppMaster"
block|}
decl_stmt|;
name|String
index|[]
name|cleanCommands
init|=
block|{
literal|"$JAVA_HOME/bin/java "
operator|+
name|securityString
block|,
literal|"$JAVA_HOME/bin/java "
operator|+
name|securityString
operator|+
literal|" -cp MyApp.jar MrAppMaster"
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|badCommands
argument_list|)
decl_stmt|;
name|JavaSandboxLinuxContainerRuntime
operator|.
name|NMContainerPolicyUtils
operator|.
name|appendSecurityFlags
argument_list|(
name|commands
argument_list|,
name|env
argument_list|,
name|policyFilePath
argument_list|,
name|JavaSandboxLinuxContainerRuntime
operator|.
name|SandboxMode
operator|.
name|enforcing
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|commands
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|commands
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
name|cleanCommands
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|System
operator|.
name|setProperties
argument_list|(
name|baseProps
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

