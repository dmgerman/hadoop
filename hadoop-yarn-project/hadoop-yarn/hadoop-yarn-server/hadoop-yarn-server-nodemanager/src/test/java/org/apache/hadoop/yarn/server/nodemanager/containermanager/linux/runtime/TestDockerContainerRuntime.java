begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * *  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  * /  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.linux.runtime
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryPathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|privileged
operator|.
name|PrivilegedOperationExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|CGroupsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|ResourceHandlerModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|docker
operator|.
name|DockerCommandExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|docker
operator|.
name|DockerKillCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|docker
operator|.
name|DockerRmCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|docker
operator|.
name|DockerRunCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|docker
operator|.
name|DockerStopCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|docker
operator|.
name|DockerVolumeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|DockerCommandPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|ResourcePlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|resourceplugin
operator|.
name|ResourcePluginManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|runtime
operator|.
name|ContainerExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|runtime
operator|.
name|ContainerRuntimeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|runtime
operator|.
name|ContainerRuntimeContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|APPID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|CONTAINER_ID_STR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|CONTAINER_LOCAL_DIRS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|CONTAINER_LOG_DIRS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|CONTAINER_WORK_DIR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|FILECACHE_DIRS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|LOCALIZED_RESOURCES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|LOCAL_DIRS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|LOG_DIRS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|NM_PRIVATE_CONTAINER_SCRIPT_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|NM_PRIVATE_TOKENS_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|PID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|PID_FILE_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|RESOURCES_OPTIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|RUN_AS_USER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|SIGNAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|USER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|runtime
operator|.
name|LinuxContainerRuntimeConstants
operator|.
name|USER_LOCAL_DIRS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|anyList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|anyMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|TestDockerContainerRuntime
specifier|public
class|class
name|TestDockerContainerRuntime
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestDockerContainerRuntime
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|mockExecutor
specifier|private
name|PrivilegedOperationExecutor
name|mockExecutor
decl_stmt|;
DECL|field|mockCGroupsHandler
specifier|private
name|CGroupsHandler
name|mockCGroupsHandler
decl_stmt|;
DECL|field|containerId
specifier|private
name|String
name|containerId
decl_stmt|;
DECL|field|defaultHostname
specifier|private
name|String
name|defaultHostname
decl_stmt|;
DECL|field|container
specifier|private
name|Container
name|container
decl_stmt|;
DECL|field|cId
specifier|private
name|ContainerId
name|cId
decl_stmt|;
DECL|field|context
specifier|private
name|ContainerLaunchContext
name|context
decl_stmt|;
DECL|field|env
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
decl_stmt|;
DECL|field|image
specifier|private
name|String
name|image
decl_stmt|;
DECL|field|uidGidPair
specifier|private
name|String
name|uidGidPair
decl_stmt|;
DECL|field|runAsUser
specifier|private
name|String
name|runAsUser
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
DECL|field|groups
specifier|private
name|String
index|[]
name|groups
init|=
block|{}
decl_stmt|;
DECL|field|user
specifier|private
name|String
name|user
decl_stmt|;
DECL|field|appId
specifier|private
name|String
name|appId
decl_stmt|;
DECL|field|containerIdStr
specifier|private
name|String
name|containerIdStr
init|=
name|containerId
decl_stmt|;
DECL|field|containerWorkDir
specifier|private
name|Path
name|containerWorkDir
decl_stmt|;
DECL|field|nmPrivateContainerScriptPath
specifier|private
name|Path
name|nmPrivateContainerScriptPath
decl_stmt|;
DECL|field|nmPrivateTokensPath
specifier|private
name|Path
name|nmPrivateTokensPath
decl_stmt|;
DECL|field|pidFilePath
specifier|private
name|Path
name|pidFilePath
decl_stmt|;
DECL|field|localDirs
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|localDirs
decl_stmt|;
DECL|field|logDirs
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|logDirs
decl_stmt|;
DECL|field|filecacheDirs
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|filecacheDirs
decl_stmt|;
DECL|field|userLocalDirs
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|userLocalDirs
decl_stmt|;
DECL|field|containerLocalDirs
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|containerLocalDirs
decl_stmt|;
DECL|field|containerLogDirs
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|containerLogDirs
decl_stmt|;
DECL|field|localizedResources
specifier|private
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|localizedResources
decl_stmt|;
DECL|field|resourcesOptions
specifier|private
name|String
name|resourcesOptions
decl_stmt|;
DECL|field|builder
specifier|private
name|ContainerRuntimeContext
operator|.
name|Builder
name|builder
decl_stmt|;
DECL|field|submittingUser
specifier|private
specifier|final
name|String
name|submittingUser
init|=
literal|"anakin"
decl_stmt|;
DECL|field|whitelistedUser
specifier|private
specifier|final
name|String
name|whitelistedUser
init|=
literal|"yoda"
decl_stmt|;
DECL|field|testCapabilities
specifier|private
name|String
index|[]
name|testCapabilities
decl_stmt|;
DECL|field|signalPid
specifier|private
specifier|final
name|String
name|signalPid
init|=
literal|"1234"
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|String
name|tmpPath
init|=
operator|new
name|StringBuffer
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
literal|"hadoop.tmp.dir"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.tmp.dir"
argument_list|,
name|tmpPath
argument_list|)
expr_stmt|;
name|mockExecutor
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|PrivilegedOperationExecutor
operator|.
name|class
argument_list|)
expr_stmt|;
name|mockCGroupsHandler
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CGroupsHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|containerId
operator|=
literal|"container_id"
expr_stmt|;
name|defaultHostname
operator|=
name|RegistryPathUtils
operator|.
name|encodeYarnID
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|container
operator|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
expr_stmt|;
name|cId
operator|=
name|mock
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
expr_stmt|;
name|context
operator|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|env
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
literal|"FROM_CLIENT"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|image
operator|=
literal|"busybox:latest"
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|DockerLinuxContainerRuntime
operator|.
name|ENV_DOCKER_CONTAINER_IMAGE
argument_list|,
name|image
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getLaunchContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getEnvironment
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|submittingUser
argument_list|)
expr_stmt|;
comment|// Get the running user's uid and gid for remap
name|String
name|uid
init|=
literal|""
decl_stmt|;
name|String
name|gid
init|=
literal|""
decl_stmt|;
name|Shell
operator|.
name|ShellCommandExecutor
name|shexec1
init|=
operator|new
name|Shell
operator|.
name|ShellCommandExecutor
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"id"
block|,
literal|"-u"
block|,
name|runAsUser
block|}
argument_list|)
decl_stmt|;
name|Shell
operator|.
name|ShellCommandExecutor
name|shexec2
init|=
operator|new
name|Shell
operator|.
name|ShellCommandExecutor
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"id"
block|,
literal|"-g"
block|,
name|runAsUser
block|}
argument_list|)
decl_stmt|;
name|Shell
operator|.
name|ShellCommandExecutor
name|shexec3
init|=
operator|new
name|Shell
operator|.
name|ShellCommandExecutor
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"id"
block|,
literal|"-G"
block|,
name|runAsUser
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|shexec1
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|// get rid of newline at the end
name|uid
operator|=
name|shexec1
operator|.
name|getOutput
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\n$"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Could not run id -u command: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|shexec2
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|// get rid of newline at the end
name|gid
operator|=
name|shexec2
operator|.
name|getOutput
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\n$"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Could not run id -g command: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|shexec3
operator|.
name|execute
argument_list|()
expr_stmt|;
name|groups
operator|=
name|shexec3
operator|.
name|getOutput
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|" "
argument_list|)
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Could not run id -G command: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|uidGidPair
operator|=
name|uid
operator|+
literal|":"
operator|+
name|gid
expr_stmt|;
name|user
operator|=
literal|"user"
expr_stmt|;
name|appId
operator|=
literal|"app_id"
expr_stmt|;
name|containerIdStr
operator|=
name|containerId
expr_stmt|;
name|containerWorkDir
operator|=
operator|new
name|Path
argument_list|(
literal|"/test_container_work_dir"
argument_list|)
expr_stmt|;
name|nmPrivateContainerScriptPath
operator|=
operator|new
name|Path
argument_list|(
literal|"/test_script_path"
argument_list|)
expr_stmt|;
name|nmPrivateTokensPath
operator|=
operator|new
name|Path
argument_list|(
literal|"/test_private_tokens_path"
argument_list|)
expr_stmt|;
name|pidFilePath
operator|=
operator|new
name|Path
argument_list|(
literal|"/test_pid_file_path"
argument_list|)
expr_stmt|;
name|localDirs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|logDirs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|filecacheDirs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|resourcesOptions
operator|=
literal|"cgroups=none"
expr_stmt|;
name|userLocalDirs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|containerLocalDirs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|containerLogDirs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|localizedResources
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|localDirs
operator|.
name|add
argument_list|(
literal|"/test_local_dir"
argument_list|)
expr_stmt|;
name|logDirs
operator|.
name|add
argument_list|(
literal|"/test_log_dir"
argument_list|)
expr_stmt|;
name|filecacheDirs
operator|.
name|add
argument_list|(
literal|"/test_filecache_dir"
argument_list|)
expr_stmt|;
name|userLocalDirs
operator|.
name|add
argument_list|(
literal|"/test_user_local_dir"
argument_list|)
expr_stmt|;
name|containerLocalDirs
operator|.
name|add
argument_list|(
literal|"/test_container_local_dir"
argument_list|)
expr_stmt|;
name|containerLogDirs
operator|.
name|add
argument_list|(
literal|"/test_container_log_dir"
argument_list|)
expr_stmt|;
name|localizedResources
operator|.
name|put
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test_local_dir/test_resource_file"
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"test_dir/test_resource_file"
argument_list|)
argument_list|)
expr_stmt|;
name|testCapabilities
operator|=
operator|new
name|String
index|[]
block|{
literal|"NET_BIND_SERVICE"
block|,
literal|"SYS_CHROOT"
block|}
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_CONTAINER_CAPABILITIES
argument_list|,
name|testCapabilities
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|ContainerRuntimeContext
operator|.
name|Builder
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setExecutionAttribute
argument_list|(
name|RUN_AS_USER
argument_list|,
name|runAsUser
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|USER
argument_list|,
name|user
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|APPID
argument_list|,
name|appId
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|CONTAINER_ID_STR
argument_list|,
name|containerIdStr
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|CONTAINER_WORK_DIR
argument_list|,
name|containerWorkDir
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|NM_PRIVATE_CONTAINER_SCRIPT_PATH
argument_list|,
name|nmPrivateContainerScriptPath
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|NM_PRIVATE_TOKENS_PATH
argument_list|,
name|nmPrivateTokensPath
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|PID_FILE_PATH
argument_list|,
name|pidFilePath
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|LOCAL_DIRS
argument_list|,
name|localDirs
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|LOG_DIRS
argument_list|,
name|logDirs
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|FILECACHE_DIRS
argument_list|,
name|filecacheDirs
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|USER_LOCAL_DIRS
argument_list|,
name|userLocalDirs
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|CONTAINER_LOCAL_DIRS
argument_list|,
name|containerLocalDirs
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|CONTAINER_LOG_DIRS
argument_list|,
name|containerLogDirs
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|LOCALIZED_RESOURCES
argument_list|,
name|localizedResources
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|RESOURCES_OPTIONS
argument_list|,
name|resourcesOptions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSelectDockerContainerType ()
specifier|public
name|void
name|testSelectDockerContainerType
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envDockerType
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envOtherType
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|envDockerType
operator|.
name|put
argument_list|(
name|ContainerRuntimeConstants
operator|.
name|ENV_CONTAINER_TYPE
argument_list|,
literal|"docker"
argument_list|)
expr_stmt|;
name|envOtherType
operator|.
name|put
argument_list|(
name|ContainerRuntimeConstants
operator|.
name|ENV_CONTAINER_TYPE
argument_list|,
literal|"other"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|DockerLinuxContainerRuntime
operator|.
name|isDockerContainerRequested
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|DockerLinuxContainerRuntime
operator|.
name|isDockerContainerRequested
argument_list|(
name|envDockerType
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|DockerLinuxContainerRuntime
operator|.
name|isDockerContainerRequested
argument_list|(
name|envOtherType
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|capturePrivilegedOperation ()
specifier|private
name|PrivilegedOperation
name|capturePrivilegedOperation
parameter_list|()
throws|throws
name|PrivilegedOperationException
block|{
name|ArgumentCaptor
argument_list|<
name|PrivilegedOperation
argument_list|>
name|opCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|PrivilegedOperation
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//single invocation expected
comment|//due to type erasure + mocking, this verification requires a suppress
comment|// warning annotation on the entire method
name|verify
argument_list|(
name|mockExecutor
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|executePrivilegedOperation
argument_list|(
name|anyList
argument_list|()
argument_list|,
name|opCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|File
operator|.
name|class
argument_list|)
argument_list|,
name|anyMap
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
comment|//verification completed. we need to isolate specific invications.
comment|// hence, reset mock here
name|Mockito
operator|.
name|reset
argument_list|(
name|mockExecutor
argument_list|)
expr_stmt|;
return|return
name|opCaptor
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|capturePrivilegedOperationAndVerifyArgs ()
specifier|private
name|PrivilegedOperation
name|capturePrivilegedOperationAndVerifyArgs
parameter_list|()
throws|throws
name|PrivilegedOperationException
block|{
name|PrivilegedOperation
name|op
init|=
name|capturePrivilegedOperation
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|LAUNCH_DOCKER_CONTAINER
argument_list|,
name|op
operator|.
name|getOperationType
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|op
operator|.
name|getArguments
argument_list|()
decl_stmt|;
comment|//This invocation of container-executor should use 13 arguments in a
comment|// specific order (sigh.)
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|13
argument_list|,
name|args
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//verify arguments
name|Assert
operator|.
name|assertEquals
argument_list|(
name|user
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|PrivilegedOperation
operator|.
name|RunAsUserCommand
operator|.
name|LAUNCH_DOCKER_CONTAINER
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appId
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|containerId
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|containerWorkDir
operator|.
name|toString
argument_list|()
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nmPrivateContainerScriptPath
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nmPrivateTokensPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pidFilePath
operator|.
name|toString
argument_list|()
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|localDirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|logDirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resourcesOptions
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|op
return|;
block|}
DECL|method|getExpectedTestCapabilitiesArgumentString ()
specifier|private
name|String
name|getExpectedTestCapabilitiesArgumentString
parameter_list|()
block|{
comment|/* Ordering of capabilities depends on HashSet ordering. */
name|Set
argument_list|<
name|String
argument_list|>
name|capabilitySet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|testCapabilities
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuilder
name|expectedCapabilitiesString
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"--cap-drop=ALL "
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|capability
range|:
name|capabilitySet
control|)
block|{
name|expectedCapabilitiesString
operator|.
name|append
argument_list|(
literal|"--cap-add="
argument_list|)
operator|.
name|append
argument_list|(
name|capability
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
return|return
name|expectedCapabilitiesString
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getExpectedCGroupsMountString ()
specifier|private
name|String
name|getExpectedCGroupsMountString
parameter_list|()
block|{
name|CGroupsHandler
name|cgroupsHandler
init|=
name|ResourceHandlerModule
operator|.
name|getCGroupsHandler
argument_list|()
decl_stmt|;
if|if
condition|(
name|cgroupsHandler
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
name|String
name|cgroupMountPath
init|=
name|cgroupsHandler
operator|.
name|getCGroupMountPath
argument_list|()
decl_stmt|;
name|boolean
name|cGroupsMountExists
init|=
operator|new
name|File
argument_list|(
name|cgroupMountPath
argument_list|)
operator|.
name|exists
argument_list|()
decl_stmt|;
if|if
condition|(
name|cGroupsMountExists
condition|)
block|{
return|return
literal|"-v "
operator|+
name|cgroupMountPath
operator|+
literal|":"
operator|+
name|cgroupMountPath
operator|+
literal|":ro "
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDockerContainerLaunch ()
specifier|public
name|void
name|testDockerContainerLaunch
parameter_list|()
throws|throws
name|ContainerExecutionException
throws|,
name|PrivilegedOperationException
throws|,
name|IOException
block|{
name|DockerLinuxContainerRuntime
name|runtime
init|=
operator|new
name|DockerLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|PrivilegedOperation
name|op
init|=
name|capturePrivilegedOperationAndVerifyArgs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|op
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|String
name|dockerCommandFile
init|=
name|args
operator|.
name|get
argument_list|(
literal|11
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dockerCommands
init|=
name|Files
operator|.
name|readAllLines
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|dockerCommandFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|expected
init|=
literal|14
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|dockerCommands
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"[docker-command-execution]"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  cap-add=SYS_CHROOT,NET_BIND_SERVICE"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  cap-drop=ALL"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  detach=true"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  docker-command=run"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  group-add="
operator|+
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|groups
argument_list|)
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  hostname=ctr-id"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  image=busybox:latest"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  launch-command=bash,/test_container_work_dir/launch_container.sh"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  name=container_id"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  net=host"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  rw-mounts=/test_container_local_dir:/test_container_local_dir,"
operator|+
literal|"/test_filecache_dir:/test_filecache_dir,"
operator|+
literal|"/test_container_work_dir:/test_container_work_dir,"
operator|+
literal|"/test_container_log_dir:/test_container_log_dir,"
operator|+
literal|"/test_user_local_dir:/test_user_local_dir"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  user="
operator|+
name|uidGidPair
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  workdir=/test_container_work_dir"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerLaunchWithUserRemapping ()
specifier|public
name|void
name|testContainerLaunchWithUserRemapping
parameter_list|()
throws|throws
name|ContainerExecutionException
throws|,
name|PrivilegedOperationException
throws|,
name|IOException
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_ENABLE_USER_REMAPPING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DockerLinuxContainerRuntime
name|runtime
init|=
operator|new
name|DockerLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|PrivilegedOperation
name|op
init|=
name|capturePrivilegedOperationAndVerifyArgs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|op
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|String
name|dockerCommandFile
init|=
name|args
operator|.
name|get
argument_list|(
literal|11
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dockerCommands
init|=
name|Files
operator|.
name|readAllLines
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|dockerCommandFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|dockerCommands
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"[docker-command-execution]"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  cap-add=SYS_CHROOT,NET_BIND_SERVICE"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  cap-drop=ALL"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  detach=true"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  docker-command=run"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  group-add="
operator|+
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|groups
argument_list|)
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  hostname=ctr-id"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  image=busybox:latest"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  launch-command=bash,/test_container_work_dir/launch_container.sh"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  name=container_id"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  net=host"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  rw-mounts=/test_container_local_dir:/test_container_local_dir,"
operator|+
literal|"/test_filecache_dir:/test_filecache_dir,"
operator|+
literal|"/test_container_work_dir:/test_container_work_dir,"
operator|+
literal|"/test_container_log_dir:/test_container_log_dir,"
operator|+
literal|"/test_user_local_dir:/test_user_local_dir"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  user="
operator|+
name|uidGidPair
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  workdir=/test_container_work_dir"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllowedNetworksConfiguration ()
specifier|public
name|void
name|testAllowedNetworksConfiguration
parameter_list|()
throws|throws
name|ContainerExecutionException
block|{
comment|//the default network configuration should cause
comment|// no exception should be thrown.
name|DockerLinuxContainerRuntime
name|runtime
init|=
operator|new
name|DockerLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//invalid default network configuration - sdn2 is included in allowed
comment|// networks
name|String
index|[]
name|networks
init|=
block|{
literal|"host"
block|,
literal|"none"
block|,
literal|"bridge"
block|,
literal|"sdn1"
block|}
decl_stmt|;
name|String
name|invalidDefaultNetwork
init|=
literal|"sdn2"
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_ALLOWED_CONTAINER_NETWORKS
argument_list|,
name|networks
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_DEFAULT_CONTAINER_NETWORK
argument_list|,
name|invalidDefaultNetwork
argument_list|)
expr_stmt|;
try|try
block|{
name|runtime
operator|=
operator|new
name|DockerLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Invalid default network configuration should did not "
operator|+
literal|"trigger initialization failure."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught expected exception : "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
comment|//valid default network configuration - sdn1 is included in allowed
comment|// networks - no exception should be thrown.
name|String
name|validDefaultNetwork
init|=
literal|"sdn1"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_DEFAULT_CONTAINER_NETWORK
argument_list|,
name|validDefaultNetwork
argument_list|)
expr_stmt|;
name|runtime
operator|=
operator|new
name|DockerLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testContainerLaunchWithNetworkingDefaults ()
specifier|public
name|void
name|testContainerLaunchWithNetworkingDefaults
parameter_list|()
throws|throws
name|ContainerExecutionException
throws|,
name|IOException
throws|,
name|PrivilegedOperationException
block|{
name|DockerLinuxContainerRuntime
name|runtime
init|=
operator|new
name|DockerLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Random
name|randEngine
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|String
name|disallowedNetwork
init|=
literal|"sdn"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|randEngine
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|env
operator|.
name|put
argument_list|(
name|DockerLinuxContainerRuntime
operator|.
name|ENV_DOCKER_CONTAINER_NETWORK
argument_list|,
name|disallowedNetwork
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Network was expected to be disallowed: "
operator|+
name|disallowedNetwork
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught expected exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|int
name|size
init|=
name|YarnConfiguration
operator|.
name|DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS
operator|.
name|length
decl_stmt|;
name|String
name|allowedNetwork
init|=
name|YarnConfiguration
operator|.
name|DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS
index|[
name|randEngine
operator|.
name|nextInt
argument_list|(
name|size
argument_list|)
index|]
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
name|DockerLinuxContainerRuntime
operator|.
name|ENV_DOCKER_CONTAINER_NETWORK
argument_list|,
name|allowedNetwork
argument_list|)
expr_stmt|;
name|String
name|expectedHostname
init|=
literal|"test.hostname"
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
name|DockerLinuxContainerRuntime
operator|.
name|ENV_DOCKER_CONTAINER_HOSTNAME
argument_list|,
name|expectedHostname
argument_list|)
expr_stmt|;
comment|//this should cause no failures.
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|PrivilegedOperation
name|op
init|=
name|capturePrivilegedOperationAndVerifyArgs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|op
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|String
name|dockerCommandFile
init|=
name|args
operator|.
name|get
argument_list|(
literal|11
argument_list|)
decl_stmt|;
comment|//This is the expected docker invocation for this case
name|List
argument_list|<
name|String
argument_list|>
name|dockerCommands
init|=
name|Files
operator|.
name|readAllLines
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|dockerCommandFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|expected
init|=
literal|14
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|dockerCommands
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"[docker-command-execution]"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  cap-add=SYS_CHROOT,NET_BIND_SERVICE"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  cap-drop=ALL"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  detach=true"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  docker-command=run"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  group-add="
operator|+
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|groups
argument_list|)
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  hostname=test.hostname"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  image=busybox:latest"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  launch-command=bash,/test_container_work_dir/launch_container.sh"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  name=container_id"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  net="
operator|+
name|allowedNetwork
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  rw-mounts=/test_container_local_dir:/test_container_local_dir,"
operator|+
literal|"/test_filecache_dir:/test_filecache_dir,"
operator|+
literal|"/test_container_work_dir:/test_container_work_dir,"
operator|+
literal|"/test_container_log_dir:/test_container_log_dir,"
operator|+
literal|"/test_user_local_dir:/test_user_local_dir"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  user="
operator|+
name|uidGidPair
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  workdir=/test_container_work_dir"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testContainerLaunchWithCustomNetworks ()
specifier|public
name|void
name|testContainerLaunchWithCustomNetworks
parameter_list|()
throws|throws
name|ContainerExecutionException
throws|,
name|IOException
throws|,
name|PrivilegedOperationException
block|{
name|DockerLinuxContainerRuntime
name|runtime
init|=
operator|new
name|DockerLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|String
name|customNetwork1
init|=
literal|"sdn1"
decl_stmt|;
name|String
name|customNetwork2
init|=
literal|"sdn2"
decl_stmt|;
name|String
name|customNetwork3
init|=
literal|"sdn3"
decl_stmt|;
name|String
index|[]
name|networks
init|=
block|{
literal|"host"
block|,
literal|"none"
block|,
literal|"bridge"
block|,
name|customNetwork1
block|,
name|customNetwork2
block|}
decl_stmt|;
comment|//customized set of allowed networks
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_ALLOWED_CONTAINER_NETWORKS
argument_list|,
name|networks
argument_list|)
expr_stmt|;
comment|//default network is "sdn1"
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_DEFAULT_CONTAINER_NETWORK
argument_list|,
name|customNetwork1
argument_list|)
expr_stmt|;
comment|//this should cause no failures.
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|PrivilegedOperation
name|op
init|=
name|capturePrivilegedOperationAndVerifyArgs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|op
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|String
name|dockerCommandFile
init|=
name|args
operator|.
name|get
argument_list|(
literal|11
argument_list|)
decl_stmt|;
comment|//This is the expected docker invocation for this case. customNetwork1
comment|// ("sdn1") is the expected network to be used in this case
name|List
argument_list|<
name|String
argument_list|>
name|dockerCommands
init|=
name|Files
operator|.
name|readAllLines
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|dockerCommandFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|expected
init|=
literal|14
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|dockerCommands
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"[docker-command-execution]"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  cap-add=SYS_CHROOT,NET_BIND_SERVICE"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  cap-drop=ALL"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  detach=true"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  docker-command=run"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  group-add="
operator|+
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|groups
argument_list|)
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  hostname=ctr-id"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  image=busybox:latest"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  launch-command=bash,/test_container_work_dir/launch_container.sh"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  name=container_id"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  net=sdn1"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  rw-mounts=/test_container_local_dir:/test_container_local_dir,"
operator|+
literal|"/test_filecache_dir:/test_filecache_dir,"
operator|+
literal|"/test_container_work_dir:/test_container_work_dir,"
operator|+
literal|"/test_container_log_dir:/test_container_log_dir,"
operator|+
literal|"/test_user_local_dir:/test_user_local_dir"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  user="
operator|+
name|uidGidPair
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  workdir=/test_container_work_dir"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
comment|//now set an explicit (non-default) allowedNetwork and ensure that it is
comment|// used.
name|env
operator|.
name|put
argument_list|(
name|DockerLinuxContainerRuntime
operator|.
name|ENV_DOCKER_CONTAINER_NETWORK
argument_list|,
name|customNetwork2
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|op
operator|=
name|capturePrivilegedOperationAndVerifyArgs
argument_list|()
expr_stmt|;
name|args
operator|=
name|op
operator|.
name|getArguments
argument_list|()
expr_stmt|;
name|dockerCommandFile
operator|=
name|args
operator|.
name|get
argument_list|(
literal|11
argument_list|)
expr_stmt|;
comment|//This is the expected docker invocation for this case. customNetwork2
comment|// ("sdn2") is the expected network to be used in this case
name|dockerCommands
operator|=
name|Files
operator|.
name|readAllLines
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|dockerCommandFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|counter
operator|=
literal|0
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|dockerCommands
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"[docker-command-execution]"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  cap-add=SYS_CHROOT,NET_BIND_SERVICE"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  cap-drop=ALL"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  detach=true"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  docker-command=run"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  group-add="
operator|+
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|groups
argument_list|)
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  hostname=ctr-id"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  image=busybox:latest"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  launch-command=bash,/test_container_work_dir/launch_container.sh"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  name=container_id"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  net=sdn2"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  rw-mounts=/test_container_local_dir:/test_container_local_dir,"
operator|+
literal|"/test_filecache_dir:/test_filecache_dir,"
operator|+
literal|"/test_container_work_dir:/test_container_work_dir,"
operator|+
literal|"/test_container_log_dir:/test_container_log_dir,"
operator|+
literal|"/test_user_local_dir:/test_user_local_dir"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  user="
operator|+
name|uidGidPair
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  workdir=/test_container_work_dir"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
comment|//disallowed network should trigger a launch failure
name|env
operator|.
name|put
argument_list|(
name|DockerLinuxContainerRuntime
operator|.
name|ENV_DOCKER_CONTAINER_NETWORK
argument_list|,
name|customNetwork3
argument_list|)
expr_stmt|;
try|try
block|{
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Disallowed network : "
operator|+
name|customNetwork3
operator|+
literal|"did not trigger launch failure."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught expected exception : "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testLaunchPidNamespaceContainersInvalidEnvVar ()
specifier|public
name|void
name|testLaunchPidNamespaceContainersInvalidEnvVar
parameter_list|()
throws|throws
name|ContainerExecutionException
throws|,
name|PrivilegedOperationException
throws|,
name|IOException
block|{
name|DockerLinuxContainerRuntime
name|runtime
init|=
operator|new
name|DockerLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|DockerLinuxContainerRuntime
operator|.
name|ENV_DOCKER_CONTAINER_PID_NAMESPACE
argument_list|,
literal|"invalid-value"
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|PrivilegedOperation
name|op
init|=
name|capturePrivilegedOperationAndVerifyArgs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|op
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|String
name|dockerCommandFile
init|=
name|args
operator|.
name|get
argument_list|(
literal|11
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dockerCommands
init|=
name|Files
operator|.
name|readAllLines
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|dockerCommandFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|expected
init|=
literal|14
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|dockerCommands
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|command
init|=
name|dockerCommands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|//ensure --pid isn't in the invocation
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Unexpected --pid in docker run args : "
operator|+
name|command
argument_list|,
operator|!
name|command
operator|.
name|contains
argument_list|(
literal|"--pid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLaunchPidNamespaceContainersWithDisabledSetting ()
specifier|public
name|void
name|testLaunchPidNamespaceContainersWithDisabledSetting
parameter_list|()
throws|throws
name|ContainerExecutionException
block|{
name|DockerLinuxContainerRuntime
name|runtime
init|=
operator|new
name|DockerLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|DockerLinuxContainerRuntime
operator|.
name|ENV_DOCKER_CONTAINER_PID_NAMESPACE
argument_list|,
literal|"host"
argument_list|)
expr_stmt|;
try|try
block|{
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a pid host disabled container failure."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught expected exception : "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testLaunchPidNamespaceContainersEnabled ()
specifier|public
name|void
name|testLaunchPidNamespaceContainersEnabled
parameter_list|()
throws|throws
name|ContainerExecutionException
throws|,
name|PrivilegedOperationException
throws|,
name|IOException
block|{
comment|//Enable host pid namespace containers.
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_ALLOW_HOST_PID_NAMESPACE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DockerLinuxContainerRuntime
name|runtime
init|=
operator|new
name|DockerLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|DockerLinuxContainerRuntime
operator|.
name|ENV_DOCKER_CONTAINER_PID_NAMESPACE
argument_list|,
literal|"host"
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|PrivilegedOperation
name|op
init|=
name|capturePrivilegedOperationAndVerifyArgs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|op
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|String
name|dockerCommandFile
init|=
name|args
operator|.
name|get
argument_list|(
literal|11
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dockerCommands
init|=
name|Files
operator|.
name|readAllLines
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|dockerCommandFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|expected
init|=
literal|15
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|dockerCommands
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"[docker-command-execution]"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  cap-add=SYS_CHROOT,NET_BIND_SERVICE"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  cap-drop=ALL"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  detach=true"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  docker-command=run"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  group-add="
operator|+
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|groups
argument_list|)
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  hostname=ctr-id"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  image=busybox:latest"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  launch-command=bash,/test_container_work_dir/launch_container.sh"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  name=container_id"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  net=host"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  pid=host"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  rw-mounts=/test_container_local_dir:/test_container_local_dir,"
operator|+
literal|"/test_filecache_dir:/test_filecache_dir,"
operator|+
literal|"/test_container_work_dir:/test_container_work_dir,"
operator|+
literal|"/test_container_log_dir:/test_container_log_dir,"
operator|+
literal|"/test_user_local_dir:/test_user_local_dir"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  user="
operator|+
name|uidGidPair
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  workdir=/test_container_work_dir"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLaunchPrivilegedContainersInvalidEnvVar ()
specifier|public
name|void
name|testLaunchPrivilegedContainersInvalidEnvVar
parameter_list|()
throws|throws
name|ContainerExecutionException
throws|,
name|PrivilegedOperationException
throws|,
name|IOException
block|{
name|DockerLinuxContainerRuntime
name|runtime
init|=
operator|new
name|DockerLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|DockerLinuxContainerRuntime
operator|.
name|ENV_DOCKER_CONTAINER_RUN_PRIVILEGED_CONTAINER
argument_list|,
literal|"invalid-value"
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|PrivilegedOperation
name|op
init|=
name|capturePrivilegedOperationAndVerifyArgs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|op
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|String
name|dockerCommandFile
init|=
name|args
operator|.
name|get
argument_list|(
literal|11
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dockerCommands
init|=
name|Files
operator|.
name|readAllLines
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|dockerCommandFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|expected
init|=
literal|14
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|dockerCommands
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|command
init|=
name|dockerCommands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|//ensure --privileged isn't in the invocation
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Unexpected --privileged in docker run args : "
operator|+
name|command
argument_list|,
operator|!
name|command
operator|.
name|contains
argument_list|(
literal|"--privileged"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLaunchPrivilegedContainersWithDisabledSetting ()
specifier|public
name|void
name|testLaunchPrivilegedContainersWithDisabledSetting
parameter_list|()
throws|throws
name|ContainerExecutionException
throws|,
name|PrivilegedOperationException
throws|,
name|IOException
block|{
name|DockerLinuxContainerRuntime
name|runtime
init|=
operator|new
name|DockerLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|DockerLinuxContainerRuntime
operator|.
name|ENV_DOCKER_CONTAINER_RUN_PRIVILEGED_CONTAINER
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
try|try
block|{
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a privileged launch container failure."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught expected exception : "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testLaunchPrivilegedContainersWithEnabledSettingAndDefaultACL ()
specifier|public
name|void
name|testLaunchPrivilegedContainersWithEnabledSettingAndDefaultACL
parameter_list|()
throws|throws
name|ContainerExecutionException
throws|,
name|PrivilegedOperationException
throws|,
name|IOException
block|{
comment|//Enable privileged containers.
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_ALLOW_PRIVILEGED_CONTAINERS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DockerLinuxContainerRuntime
name|runtime
init|=
operator|new
name|DockerLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|DockerLinuxContainerRuntime
operator|.
name|ENV_DOCKER_CONTAINER_RUN_PRIVILEGED_CONTAINER
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|//By default
comment|// yarn.nodemanager.runtime.linux.docker.privileged-containers.acl
comment|// is empty. So we expect this launch to fail.
try|try
block|{
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a privileged launch container failure."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught expected exception : "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
DECL|method|testLaunchPrivilegedContainersEnabledAndUserNotInWhitelist ()
name|testLaunchPrivilegedContainersEnabledAndUserNotInWhitelist
parameter_list|()
throws|throws
name|ContainerExecutionException
throws|,
name|PrivilegedOperationException
throws|,
name|IOException
block|{
comment|//Enable privileged containers.
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_ALLOW_PRIVILEGED_CONTAINERS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//set whitelist of users.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_PRIVILEGED_CONTAINERS_ACL
argument_list|,
name|whitelistedUser
argument_list|)
expr_stmt|;
name|DockerLinuxContainerRuntime
name|runtime
init|=
operator|new
name|DockerLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|DockerLinuxContainerRuntime
operator|.
name|ENV_DOCKER_CONTAINER_RUN_PRIVILEGED_CONTAINER
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
try|try
block|{
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a privileged launch container failure."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught expected exception : "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
DECL|method|testLaunchPrivilegedContainersEnabledAndUserInWhitelist ()
name|testLaunchPrivilegedContainersEnabledAndUserInWhitelist
parameter_list|()
throws|throws
name|ContainerExecutionException
throws|,
name|PrivilegedOperationException
throws|,
name|IOException
block|{
comment|//Enable privileged containers.
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_ALLOW_PRIVILEGED_CONTAINERS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//Add submittingUser to whitelist.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_PRIVILEGED_CONTAINERS_ACL
argument_list|,
name|submittingUser
argument_list|)
expr_stmt|;
name|DockerLinuxContainerRuntime
name|runtime
init|=
operator|new
name|DockerLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|DockerLinuxContainerRuntime
operator|.
name|ENV_DOCKER_CONTAINER_RUN_PRIVILEGED_CONTAINER
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|PrivilegedOperation
name|op
init|=
name|capturePrivilegedOperationAndVerifyArgs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|op
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|String
name|dockerCommandFile
init|=
name|args
operator|.
name|get
argument_list|(
literal|11
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dockerCommands
init|=
name|Files
operator|.
name|readAllLines
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|dockerCommandFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|expected
init|=
literal|15
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|dockerCommands
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"[docker-command-execution]"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  cap-add=SYS_CHROOT,NET_BIND_SERVICE"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  cap-drop=ALL"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  detach=true"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  docker-command=run"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  group-add="
operator|+
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|groups
argument_list|)
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  hostname=ctr-id"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  image=busybox:latest"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  launch-command=bash,/test_container_work_dir/launch_container.sh"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  name=container_id"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  net=host"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  privileged=true"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  rw-mounts=/test_container_local_dir:/test_container_local_dir,"
operator|+
literal|"/test_filecache_dir:/test_filecache_dir,"
operator|+
literal|"/test_container_work_dir:/test_container_work_dir,"
operator|+
literal|"/test_container_log_dir:/test_container_log_dir,"
operator|+
literal|"/test_user_local_dir:/test_user_local_dir"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  user="
operator|+
name|uidGidPair
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  workdir=/test_container_work_dir"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCGroupParent ()
specifier|public
name|void
name|testCGroupParent
parameter_list|()
throws|throws
name|ContainerExecutionException
block|{
name|String
name|hierarchy
init|=
literal|"hadoop-yarn-test"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LINUX_CONTAINER_CGROUPS_HIERARCHY
argument_list|,
name|hierarchy
argument_list|)
expr_stmt|;
name|DockerLinuxContainerRuntime
name|runtime
init|=
operator|new
name|DockerLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|resourceOptionsNone
init|=
literal|"cgroups=none"
decl_stmt|;
name|DockerRunCommand
name|command
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|DockerRunCommand
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockCGroupsHandler
operator|.
name|getRelativePathForCGroup
argument_list|(
name|containerId
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|hierarchy
operator|+
literal|"/"
operator|+
name|containerIdStr
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|addCGroupParentIfRequired
argument_list|(
name|resourceOptionsNone
argument_list|,
name|containerIdStr
argument_list|,
name|command
argument_list|)
expr_stmt|;
comment|//no --cgroup-parent should be added here
name|Mockito
operator|.
name|verifyZeroInteractions
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|String
name|resourceOptionsCpu
init|=
literal|"/sys/fs/cgroup/cpu/"
operator|+
name|hierarchy
operator|+
name|containerIdStr
decl_stmt|;
name|runtime
operator|.
name|addCGroupParentIfRequired
argument_list|(
name|resourceOptionsCpu
argument_list|,
name|containerIdStr
argument_list|,
name|command
argument_list|)
expr_stmt|;
comment|//--cgroup-parent should be added for the containerId in question
name|String
name|expectedPath
init|=
literal|"/"
operator|+
name|hierarchy
operator|+
literal|"/"
operator|+
name|containerIdStr
decl_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|command
argument_list|)
operator|.
name|setCGroupParent
argument_list|(
name|expectedPath
argument_list|)
expr_stmt|;
comment|//create a runtime with a 'null' cgroups handler - i.e no
comment|// cgroup-based resource handlers are in use.
name|runtime
operator|=
operator|new
name|DockerLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|addCGroupParentIfRequired
argument_list|(
name|resourceOptionsNone
argument_list|,
name|containerIdStr
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|addCGroupParentIfRequired
argument_list|(
name|resourceOptionsCpu
argument_list|,
name|containerIdStr
argument_list|,
name|command
argument_list|)
expr_stmt|;
comment|//no --cgroup-parent should be added in either case
name|Mockito
operator|.
name|verifyZeroInteractions
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMountSourceOnly ()
specifier|public
name|void
name|testMountSourceOnly
parameter_list|()
throws|throws
name|ContainerExecutionException
throws|,
name|PrivilegedOperationException
throws|,
name|IOException
block|{
name|DockerLinuxContainerRuntime
name|runtime
init|=
operator|new
name|DockerLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|DockerLinuxContainerRuntime
operator|.
name|ENV_DOCKER_CONTAINER_LOCAL_RESOURCE_MOUNTS
argument_list|,
literal|"source"
argument_list|)
expr_stmt|;
try|try
block|{
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a launch container failure due to invalid mount."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught expected exception : "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMountSourceTarget ()
specifier|public
name|void
name|testMountSourceTarget
parameter_list|()
throws|throws
name|ContainerExecutionException
throws|,
name|PrivilegedOperationException
throws|,
name|IOException
block|{
name|DockerLinuxContainerRuntime
name|runtime
init|=
operator|new
name|DockerLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|DockerLinuxContainerRuntime
operator|.
name|ENV_DOCKER_CONTAINER_LOCAL_RESOURCE_MOUNTS
argument_list|,
literal|"test_dir/test_resource_file:test_mount"
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|PrivilegedOperation
name|op
init|=
name|capturePrivilegedOperationAndVerifyArgs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|op
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|String
name|dockerCommandFile
init|=
name|args
operator|.
name|get
argument_list|(
literal|11
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dockerCommands
init|=
name|Files
operator|.
name|readAllLines
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|dockerCommandFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|expected
init|=
literal|15
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|dockerCommands
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"[docker-command-execution]"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  cap-add=SYS_CHROOT,NET_BIND_SERVICE"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  cap-drop=ALL"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  detach=true"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  docker-command=run"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  group-add="
operator|+
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|groups
argument_list|)
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  hostname=ctr-id"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  image=busybox:latest"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  launch-command=bash,/test_container_work_dir/launch_container.sh"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  name=container_id"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  net=host"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  ro-mounts=/test_local_dir/test_resource_file:test_mount"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  rw-mounts=/test_container_local_dir:/test_container_local_dir,"
operator|+
literal|"/test_filecache_dir:/test_filecache_dir,"
operator|+
literal|"/test_container_work_dir:/test_container_work_dir,"
operator|+
literal|"/test_container_log_dir:/test_container_log_dir,"
operator|+
literal|"/test_user_local_dir:/test_user_local_dir"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  user="
operator|+
name|uidGidPair
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  workdir=/test_container_work_dir"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMountInvalid ()
specifier|public
name|void
name|testMountInvalid
parameter_list|()
throws|throws
name|ContainerExecutionException
throws|,
name|PrivilegedOperationException
throws|,
name|IOException
block|{
name|DockerLinuxContainerRuntime
name|runtime
init|=
operator|new
name|DockerLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|DockerLinuxContainerRuntime
operator|.
name|ENV_DOCKER_CONTAINER_LOCAL_RESOURCE_MOUNTS
argument_list|,
literal|"source:target:other"
argument_list|)
expr_stmt|;
try|try
block|{
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a launch container failure due to invalid mount."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught expected exception : "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMountMultiple ()
specifier|public
name|void
name|testMountMultiple
parameter_list|()
throws|throws
name|ContainerExecutionException
throws|,
name|PrivilegedOperationException
throws|,
name|IOException
block|{
name|DockerLinuxContainerRuntime
name|runtime
init|=
operator|new
name|DockerLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|DockerLinuxContainerRuntime
operator|.
name|ENV_DOCKER_CONTAINER_LOCAL_RESOURCE_MOUNTS
argument_list|,
literal|"test_dir/test_resource_file:test_mount1,"
operator|+
literal|"test_dir/test_resource_file:test_mount2"
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|PrivilegedOperation
name|op
init|=
name|capturePrivilegedOperationAndVerifyArgs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|op
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|String
name|dockerCommandFile
init|=
name|args
operator|.
name|get
argument_list|(
literal|11
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dockerCommands
init|=
name|Files
operator|.
name|readAllLines
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|dockerCommandFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|expected
init|=
literal|15
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|dockerCommands
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"[docker-command-execution]"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  cap-add=SYS_CHROOT,NET_BIND_SERVICE"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  cap-drop=ALL"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  detach=true"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  docker-command=run"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  group-add="
operator|+
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|groups
argument_list|)
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  hostname=ctr-id"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  image=busybox:latest"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  launch-command=bash,/test_container_work_dir/launch_container.sh"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  name=container_id"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  net=host"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  ro-mounts=/test_local_dir/test_resource_file:test_mount1,"
operator|+
literal|"/test_local_dir/test_resource_file:test_mount2"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  rw-mounts=/test_container_local_dir:/test_container_local_dir,"
operator|+
literal|"/test_filecache_dir:/test_filecache_dir,"
operator|+
literal|"/test_container_work_dir:/test_container_work_dir,"
operator|+
literal|"/test_container_log_dir:/test_container_log_dir,"
operator|+
literal|"/test_user_local_dir:/test_user_local_dir"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  user="
operator|+
name|uidGidPair
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  workdir=/test_container_work_dir"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUserMounts ()
specifier|public
name|void
name|testUserMounts
parameter_list|()
throws|throws
name|ContainerExecutionException
throws|,
name|PrivilegedOperationException
throws|,
name|IOException
block|{
name|DockerLinuxContainerRuntime
name|runtime
init|=
operator|new
name|DockerLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|DockerLinuxContainerRuntime
operator|.
name|ENV_DOCKER_CONTAINER_MOUNTS
argument_list|,
literal|"/tmp/foo:/tmp/foo:ro,/tmp/bar:/tmp/bar:rw"
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|PrivilegedOperation
name|op
init|=
name|capturePrivilegedOperationAndVerifyArgs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|op
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|String
name|dockerCommandFile
init|=
name|args
operator|.
name|get
argument_list|(
literal|11
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dockerCommands
init|=
name|Files
operator|.
name|readAllLines
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|dockerCommandFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|expected
init|=
literal|15
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|dockerCommands
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"[docker-command-execution]"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  cap-add=SYS_CHROOT,NET_BIND_SERVICE"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  cap-drop=ALL"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  detach=true"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  docker-command=run"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  group-add="
operator|+
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|groups
argument_list|)
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  hostname=ctr-id"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  image=busybox:latest"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  launch-command=bash,/test_container_work_dir/launch_container.sh"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  name=container_id"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  net=host"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  ro-mounts=/tmp/foo:/tmp/foo"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  rw-mounts=/test_container_local_dir:/test_container_local_dir,"
operator|+
literal|"/test_filecache_dir:/test_filecache_dir,"
operator|+
literal|"/test_container_work_dir:/test_container_work_dir,"
operator|+
literal|"/test_container_log_dir:/test_container_log_dir,"
operator|+
literal|"/test_user_local_dir:/test_user_local_dir,"
operator|+
literal|"/tmp/bar:/tmp/bar"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  user="
operator|+
name|uidGidPair
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  workdir=/test_container_work_dir"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUserMountInvalid ()
specifier|public
name|void
name|testUserMountInvalid
parameter_list|()
throws|throws
name|ContainerExecutionException
throws|,
name|PrivilegedOperationException
throws|,
name|IOException
block|{
name|DockerLinuxContainerRuntime
name|runtime
init|=
operator|new
name|DockerLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|DockerLinuxContainerRuntime
operator|.
name|ENV_DOCKER_CONTAINER_MOUNTS
argument_list|,
literal|"source:target"
argument_list|)
expr_stmt|;
try|try
block|{
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a launch container failure due to invalid mount."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught expected exception : "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUserMountModeInvalid ()
specifier|public
name|void
name|testUserMountModeInvalid
parameter_list|()
throws|throws
name|ContainerExecutionException
throws|,
name|PrivilegedOperationException
throws|,
name|IOException
block|{
name|DockerLinuxContainerRuntime
name|runtime
init|=
operator|new
name|DockerLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|DockerLinuxContainerRuntime
operator|.
name|ENV_DOCKER_CONTAINER_MOUNTS
argument_list|,
literal|"source:target:other"
argument_list|)
expr_stmt|;
try|try
block|{
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a launch container failure due to invalid mode."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught expected exception : "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUserMountModeNulInvalid ()
specifier|public
name|void
name|testUserMountModeNulInvalid
parameter_list|()
throws|throws
name|ContainerExecutionException
throws|,
name|PrivilegedOperationException
throws|,
name|IOException
block|{
name|DockerLinuxContainerRuntime
name|runtime
init|=
operator|new
name|DockerLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|DockerLinuxContainerRuntime
operator|.
name|ENV_DOCKER_CONTAINER_MOUNTS
argument_list|,
literal|"s\0ource:target:ro"
argument_list|)
expr_stmt|;
try|try
block|{
name|runtime
operator|.
name|launchContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected a launch container failure due to NUL in mount."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught expected exception : "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testContainerLivelinessCheck ()
specifier|public
name|void
name|testContainerLivelinessCheck
parameter_list|()
throws|throws
name|ContainerExecutionException
throws|,
name|PrivilegedOperationException
block|{
name|DockerLinuxContainerRuntime
name|runtime
init|=
operator|new
name|DockerLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setExecutionAttribute
argument_list|(
name|RUN_AS_USER
argument_list|,
name|runAsUser
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|USER
argument_list|,
name|user
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|PID
argument_list|,
name|signalPid
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|SIGNAL
argument_list|,
name|ContainerExecutor
operator|.
name|Signal
operator|.
name|NULL
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|enableMockContainerExecutor
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|signalContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|PrivilegedOperation
name|op
init|=
name|capturePrivilegedOperation
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|op
operator|.
name|getOperationType
argument_list|()
argument_list|,
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|SIGNAL_CONTAINER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|runAsUser
argument_list|,
name|op
operator|.
name|getArguments
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"user"
argument_list|,
name|op
operator|.
name|getArguments
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|op
operator|.
name|getArguments
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1234"
argument_list|,
name|op
operator|.
name|getArguments
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|op
operator|.
name|getArguments
argument_list|()
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDockerStopOnTermSignalWhenRunning ()
specifier|public
name|void
name|testDockerStopOnTermSignalWhenRunning
parameter_list|()
throws|throws
name|ContainerExecutionException
throws|,
name|PrivilegedOperationException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|dockerCommands
init|=
name|getDockerCommandsForSignal
argument_list|(
name|ContainerExecutor
operator|.
name|Signal
operator|.
name|TERM
argument_list|,
name|DockerCommandExecutor
operator|.
name|DockerContainerStatus
operator|.
name|RUNNING
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|dockerCommands
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"[docker-command-execution]"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  docker-command=stop"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  name=container_id"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDockerStopOnKillSignalWhenRunning ()
specifier|public
name|void
name|testDockerStopOnKillSignalWhenRunning
parameter_list|()
throws|throws
name|ContainerExecutionException
throws|,
name|PrivilegedOperationException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|dockerCommands
init|=
name|getDockerCommandsForSignal
argument_list|(
name|ContainerExecutor
operator|.
name|Signal
operator|.
name|KILL
argument_list|,
name|DockerCommandExecutor
operator|.
name|DockerContainerStatus
operator|.
name|RUNNING
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|dockerCommands
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"[docker-command-execution]"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  docker-command=stop"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  name=container_id"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDockerKillOnQuitSignalWhenRunning ()
specifier|public
name|void
name|testDockerKillOnQuitSignalWhenRunning
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|dockerCommands
init|=
name|getDockerCommandsForSignal
argument_list|(
name|ContainerExecutor
operator|.
name|Signal
operator|.
name|QUIT
argument_list|,
name|DockerCommandExecutor
operator|.
name|DockerContainerStatus
operator|.
name|RUNNING
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|dockerCommands
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"[docker-command-execution]"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  docker-command=kill"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  name=container_id"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  signal=QUIT"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDockerRmOnWhenExited ()
specifier|public
name|void
name|testDockerRmOnWhenExited
parameter_list|()
throws|throws
name|Exception
block|{
name|env
operator|.
name|put
argument_list|(
name|DockerLinuxContainerRuntime
operator|.
name|ENV_DOCKER_CONTAINER_DELAYED_REMOVAL
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_ALLOW_DELAYED_REMOVAL
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|MockRuntime
name|runtime
init|=
operator|new
name|MockRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|DockerCommandExecutor
operator|.
name|DockerContainerStatus
operator|.
name|EXITED
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setExecutionAttribute
argument_list|(
name|RUN_AS_USER
argument_list|,
name|runAsUser
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|USER
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|enableMockContainerExecutor
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|reapContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockExecutor
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|executePrivilegedOperation
argument_list|(
name|anyList
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|(
name|File
operator|.
name|class
argument_list|)
argument_list|,
name|anyMap
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoDockerRmWhenDelayedDeletionEnabled ()
specifier|public
name|void
name|testNoDockerRmWhenDelayedDeletionEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|env
operator|.
name|put
argument_list|(
name|DockerLinuxContainerRuntime
operator|.
name|ENV_DOCKER_CONTAINER_DELAYED_REMOVAL
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_ALLOW_DELAYED_REMOVAL
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|MockRuntime
name|runtime
init|=
operator|new
name|MockRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|DockerCommandExecutor
operator|.
name|DockerContainerStatus
operator|.
name|EXITED
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setExecutionAttribute
argument_list|(
name|RUN_AS_USER
argument_list|,
name|runAsUser
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|USER
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|enableMockContainerExecutor
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|reapContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockExecutor
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|executePrivilegedOperation
argument_list|(
name|anyList
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|(
name|File
operator|.
name|class
argument_list|)
argument_list|,
name|anyMap
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getDockerCommandsForSignal ( ContainerExecutor.Signal signal, DockerCommandExecutor.DockerContainerStatus status)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getDockerCommandsForSignal
parameter_list|(
name|ContainerExecutor
operator|.
name|Signal
name|signal
parameter_list|,
name|DockerCommandExecutor
operator|.
name|DockerContainerStatus
name|status
parameter_list|)
throws|throws
name|ContainerExecutionException
throws|,
name|PrivilegedOperationException
throws|,
name|IOException
block|{
name|MockRuntime
name|runtime
init|=
operator|new
name|MockRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|status
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setExecutionAttribute
argument_list|(
name|RUN_AS_USER
argument_list|,
name|runAsUser
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|USER
argument_list|,
name|user
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|PID
argument_list|,
name|signalPid
argument_list|)
operator|.
name|setExecutionAttribute
argument_list|(
name|SIGNAL
argument_list|,
name|signal
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|enableMockContainerExecutor
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|signalContainer
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|PrivilegedOperation
name|op
init|=
name|capturePrivilegedOperation
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|op
operator|.
name|getOperationType
argument_list|()
argument_list|,
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|RUN_DOCKER_CMD
argument_list|)
expr_stmt|;
name|String
name|dockerCommandFile
init|=
name|op
operator|.
name|getArguments
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|Files
operator|.
name|readAllLines
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|dockerCommandFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Return a configuration object with the mock container executor binary    * preconfigured.    *    * @param conf The hadoop configuration.    * @return The hadoop configuration.    */
DECL|method|enableMockContainerExecutor (Configuration conf)
specifier|public
specifier|static
name|Configuration
name|enableMockContainerExecutor
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"./src/test/resources/mock-container-executor"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|FileUtil
operator|.
name|canExecute
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|f
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|String
name|executorPath
init|=
name|f
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LINUX_CONTAINER_EXECUTOR_PATH
argument_list|,
name|executorPath
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Test
DECL|method|testDockerImageNamePattern ()
specifier|public
name|void
name|testDockerImageNamePattern
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|validNames
init|=
block|{
literal|"ubuntu"
block|,
literal|"fedora/httpd:version1.0"
block|,
literal|"fedora/httpd:version1.0.test"
block|,
literal|"fedora/httpd:version1.0.TEST"
block|,
literal|"myregistryhost:5000/ubuntu"
block|,
literal|"myregistryhost:5000/fedora/httpd:version1.0"
block|,
literal|"myregistryhost:5000/fedora/httpd:version1.0.test"
block|,
literal|"myregistryhost:5000/fedora/httpd:version1.0.TEST"
block|}
decl_stmt|;
name|String
index|[]
name|invalidNames
init|=
block|{
literal|"Ubuntu"
block|,
literal|"ubuntu || fedora"
block|,
literal|"ubuntu#"
block|,
literal|"myregistryhost:50AB0/ubuntu"
block|,
literal|"myregistry#host:50AB0/ubuntu"
block|,
literal|":8080/ubuntu"
block|}
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|validNames
control|)
block|{
name|DockerLinuxContainerRuntime
operator|.
name|validateImageName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|name
range|:
name|invalidNames
control|)
block|{
try|try
block|{
name|DockerLinuxContainerRuntime
operator|.
name|validateImageName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|name
operator|+
literal|" is an invalid name and should fail the regex"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerExecutionException
name|ce
parameter_list|)
block|{
continue|continue;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testDockerHostnamePattern ()
specifier|public
name|void
name|testDockerHostnamePattern
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|validNames
init|=
block|{
literal|"ab"
block|,
literal|"a.b.c.d"
block|,
literal|"a1-b.cd.ef"
block|,
literal|"0AB."
block|,
literal|"C_D-"
block|}
decl_stmt|;
name|String
index|[]
name|invalidNames
init|=
block|{
literal|"a"
block|,
literal|"a#.b.c"
block|,
literal|"-a.b.c"
block|,
literal|"a@b.c"
block|,
literal|"a/b/c"
block|}
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|validNames
control|)
block|{
name|DockerLinuxContainerRuntime
operator|.
name|validateHostname
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|name
range|:
name|invalidNames
control|)
block|{
try|try
block|{
name|DockerLinuxContainerRuntime
operator|.
name|validateHostname
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|name
operator|+
literal|" is an invalid hostname and should fail the regex"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerExecutionException
name|ce
parameter_list|)
block|{
continue|continue;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|checkVolumeCreateCommand ()
specifier|private
name|void
name|checkVolumeCreateCommand
parameter_list|()
throws|throws
name|PrivilegedOperationException
throws|,
name|IOException
block|{
name|ArgumentCaptor
argument_list|<
name|PrivilegedOperation
argument_list|>
name|opCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|PrivilegedOperation
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//single invocation expected
comment|//due to type erasure + mocking, this verification requires a suppress
comment|// warning annotation on the entire method
name|verify
argument_list|(
name|mockExecutor
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|executePrivilegedOperation
argument_list|(
name|anyList
argument_list|()
argument_list|,
name|opCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|File
operator|.
name|class
argument_list|)
argument_list|,
name|anyMap
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
comment|//verification completed. we need to isolate specific invications.
comment|// hence, reset mock here
name|Mockito
operator|.
name|reset
argument_list|(
name|mockExecutor
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PrivilegedOperation
argument_list|>
name|allCaptures
init|=
name|opCaptor
operator|.
name|getAllValues
argument_list|()
decl_stmt|;
name|PrivilegedOperation
name|op
init|=
name|allCaptures
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|RUN_DOCKER_CMD
argument_list|,
name|op
operator|.
name|getOperationType
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|commandFile
init|=
operator|new
name|File
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|op
operator|.
name|getArguments
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|FileInputStream
name|fileInputStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|commandFile
argument_list|)
decl_stmt|;
name|String
name|fileContent
init|=
operator|new
name|String
argument_list|(
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|fileInputStream
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"[docker-command-execution]\n"
operator|+
literal|"  docker-command=volume\n"
operator|+
literal|"  driver=local\n"
operator|+
literal|"  sub-command=create\n"
operator|+
literal|"  volume=volume1\n"
argument_list|,
name|fileContent
argument_list|)
expr_stmt|;
name|fileInputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|op
operator|=
name|allCaptures
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrivilegedOperation
operator|.
name|OperationType
operator|.
name|RUN_DOCKER_CMD
argument_list|,
name|op
operator|.
name|getOperationType
argument_list|()
argument_list|)
expr_stmt|;
name|commandFile
operator|=
operator|new
name|File
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|op
operator|.
name|getArguments
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fileInputStream
operator|=
operator|new
name|FileInputStream
argument_list|(
name|commandFile
argument_list|)
expr_stmt|;
name|fileContent
operator|=
operator|new
name|String
argument_list|(
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|fileInputStream
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"[docker-command-execution]\n"
operator|+
literal|"  docker-command=volume\n"
operator|+
literal|"  format={{.Name}},{{.Driver}}\n"
operator|+
literal|"  sub-command=ls\n"
argument_list|,
name|fileContent
argument_list|)
expr_stmt|;
name|fileInputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|MockDockerCommandPlugin
specifier|private
specifier|static
class|class
name|MockDockerCommandPlugin
implements|implements
name|DockerCommandPlugin
block|{
DECL|field|volume
specifier|private
specifier|final
name|String
name|volume
decl_stmt|;
DECL|field|driver
specifier|private
specifier|final
name|String
name|driver
decl_stmt|;
DECL|method|MockDockerCommandPlugin (String volume, String driver)
specifier|public
name|MockDockerCommandPlugin
parameter_list|(
name|String
name|volume
parameter_list|,
name|String
name|driver
parameter_list|)
block|{
name|this
operator|.
name|volume
operator|=
name|volume
expr_stmt|;
name|this
operator|.
name|driver
operator|=
name|driver
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateDockerRunCommand (DockerRunCommand dockerRunCommand, Container container)
specifier|public
name|void
name|updateDockerRunCommand
parameter_list|(
name|DockerRunCommand
name|dockerRunCommand
parameter_list|,
name|Container
name|container
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
name|dockerRunCommand
operator|.
name|setVolumeDriver
argument_list|(
literal|"driver-1"
argument_list|)
expr_stmt|;
name|dockerRunCommand
operator|.
name|addReadOnlyMountLocation
argument_list|(
literal|"/source/path"
argument_list|,
literal|"/destination/path"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCreateDockerVolumeCommand (Container container)
specifier|public
name|DockerVolumeCommand
name|getCreateDockerVolumeCommand
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
return|return
operator|new
name|DockerVolumeCommand
argument_list|(
literal|"create"
argument_list|)
operator|.
name|setVolumeName
argument_list|(
name|volume
argument_list|)
operator|.
name|setDriverName
argument_list|(
name|driver
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCleanupDockerVolumesCommand ( Container container)
specifier|public
name|DockerVolumeCommand
name|getCleanupDockerVolumesCommand
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|testDockerCommandPluginWithVolumesOutput ( String dockerVolumeListOutput, boolean expectFail)
specifier|private
name|void
name|testDockerCommandPluginWithVolumesOutput
parameter_list|(
name|String
name|dockerVolumeListOutput
parameter_list|,
name|boolean
name|expectFail
parameter_list|)
throws|throws
name|PrivilegedOperationException
throws|,
name|ContainerExecutionException
throws|,
name|IOException
block|{
name|mockExecutor
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|PrivilegedOperationExecutor
operator|.
name|class
argument_list|)
expr_stmt|;
name|DockerLinuxContainerRuntime
name|runtime
init|=
operator|new
name|DockerLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockExecutor
operator|.
name|executePrivilegedOperation
argument_list|(
name|anyList
argument_list|()
argument_list|,
name|any
argument_list|(
name|PrivilegedOperation
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|File
operator|.
name|class
argument_list|)
argument_list|,
name|anyMap
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockExecutor
operator|.
name|executePrivilegedOperation
argument_list|(
name|anyList
argument_list|()
argument_list|,
name|any
argument_list|(
name|PrivilegedOperation
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|File
operator|.
name|class
argument_list|)
argument_list|,
name|anyMap
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dockerVolumeListOutput
argument_list|)
expr_stmt|;
name|Context
name|nmContext
init|=
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
decl_stmt|;
name|ResourcePluginManager
name|rpm
init|=
name|mock
argument_list|(
name|ResourcePluginManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ResourcePlugin
argument_list|>
name|pluginsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|ResourcePlugin
name|plugin1
init|=
name|mock
argument_list|(
name|ResourcePlugin
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Create the docker command plugin logic, which will set volume driver
name|DockerCommandPlugin
name|dockerCommandPlugin
init|=
operator|new
name|MockDockerCommandPlugin
argument_list|(
literal|"volume1"
argument_list|,
literal|"local"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|plugin1
operator|.
name|getDockerCommandPluginInstance
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dockerCommandPlugin
argument_list|)
expr_stmt|;
name|ResourcePlugin
name|plugin2
init|=
name|mock
argument_list|(
name|ResourcePlugin
operator|.
name|class
argument_list|)
decl_stmt|;
name|pluginsMap
operator|.
name|put
argument_list|(
literal|"plugin1"
argument_list|,
name|plugin1
argument_list|)
expr_stmt|;
name|pluginsMap
operator|.
name|put
argument_list|(
literal|"plugin2"
argument_list|,
name|plugin2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rpm
operator|.
name|getNameToPlugins
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|pluginsMap
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nmContext
operator|.
name|getResourcePluginManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rpm
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|nmContext
argument_list|)
expr_stmt|;
name|ContainerRuntimeContext
name|containerRuntimeContext
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|runtime
operator|.
name|prepareContainer
argument_list|(
name|containerRuntimeContext
argument_list|)
expr_stmt|;
name|checkVolumeCreateCommand
argument_list|()
expr_stmt|;
name|runtime
operator|.
name|launchContainer
argument_list|(
name|containerRuntimeContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerExecutionException
name|e
parameter_list|)
block|{
if|if
condition|(
name|expectFail
condition|)
block|{
comment|// Expected
return|return;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should successfully prepareContainers"
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|expectFail
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should fail because output is illegal"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDockerCommandPluginCheckVolumeAfterCreation ()
specifier|public
name|void
name|testDockerCommandPluginCheckVolumeAfterCreation
parameter_list|()
throws|throws
name|Exception
block|{
comment|// For following tests, we expect to have volume1,local in output
comment|// Failure cases
name|testDockerCommandPluginWithVolumesOutput
argument_list|(
literal|""
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testDockerCommandPluginWithVolumesOutput
argument_list|(
literal|"volume1"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testDockerCommandPluginWithVolumesOutput
argument_list|(
literal|"local"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testDockerCommandPluginWithVolumesOutput
argument_list|(
literal|"volume2,local"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testDockerCommandPluginWithVolumesOutput
argument_list|(
literal|"volum1,something"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testDockerCommandPluginWithVolumesOutput
argument_list|(
literal|"volum1,something\nvolum2,local"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Success case
name|testDockerCommandPluginWithVolumesOutput
argument_list|(
literal|"volume1,local\n"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testDockerCommandPluginWithVolumesOutput
argument_list|(
literal|"volume_xyz,nvidia\nvolume1,local\n\n"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testDockerCommandPluginWithVolumesOutput
argument_list|(
literal|" volume1,  local \n"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testDockerCommandPluginWithVolumesOutput
argument_list|(
literal|"volume_xyz,\tnvidia\n   volume1,\tlocal\n\n"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDockerCommandPlugin ()
specifier|public
name|void
name|testDockerCommandPlugin
parameter_list|()
throws|throws
name|Exception
block|{
name|DockerLinuxContainerRuntime
name|runtime
init|=
operator|new
name|DockerLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockExecutor
operator|.
name|executePrivilegedOperation
argument_list|(
name|anyList
argument_list|()
argument_list|,
name|any
argument_list|(
name|PrivilegedOperation
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|File
operator|.
name|class
argument_list|)
argument_list|,
name|anyMap
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockExecutor
operator|.
name|executePrivilegedOperation
argument_list|(
name|anyList
argument_list|()
argument_list|,
name|any
argument_list|(
name|PrivilegedOperation
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|File
operator|.
name|class
argument_list|)
argument_list|,
name|anyMap
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"volume1,local"
argument_list|)
expr_stmt|;
name|Context
name|nmContext
init|=
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
decl_stmt|;
name|ResourcePluginManager
name|rpm
init|=
name|mock
argument_list|(
name|ResourcePluginManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ResourcePlugin
argument_list|>
name|pluginsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|ResourcePlugin
name|plugin1
init|=
name|mock
argument_list|(
name|ResourcePlugin
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Create the docker command plugin logic, which will set volume driver
name|DockerCommandPlugin
name|dockerCommandPlugin
init|=
operator|new
name|MockDockerCommandPlugin
argument_list|(
literal|"volume1"
argument_list|,
literal|"local"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|plugin1
operator|.
name|getDockerCommandPluginInstance
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dockerCommandPlugin
argument_list|)
expr_stmt|;
name|ResourcePlugin
name|plugin2
init|=
name|mock
argument_list|(
name|ResourcePlugin
operator|.
name|class
argument_list|)
decl_stmt|;
name|pluginsMap
operator|.
name|put
argument_list|(
literal|"plugin1"
argument_list|,
name|plugin1
argument_list|)
expr_stmt|;
name|pluginsMap
operator|.
name|put
argument_list|(
literal|"plugin2"
argument_list|,
name|plugin2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rpm
operator|.
name|getNameToPlugins
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|pluginsMap
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nmContext
operator|.
name|getResourcePluginManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rpm
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|nmContext
argument_list|)
expr_stmt|;
name|ContainerRuntimeContext
name|containerRuntimeContext
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|runtime
operator|.
name|prepareContainer
argument_list|(
name|containerRuntimeContext
argument_list|)
expr_stmt|;
name|checkVolumeCreateCommand
argument_list|()
expr_stmt|;
name|runtime
operator|.
name|launchContainer
argument_list|(
name|containerRuntimeContext
argument_list|)
expr_stmt|;
name|PrivilegedOperation
name|op
init|=
name|capturePrivilegedOperationAndVerifyArgs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|op
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|String
name|dockerCommandFile
init|=
name|args
operator|.
name|get
argument_list|(
literal|11
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dockerCommands
init|=
name|Files
operator|.
name|readAllLines
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|dockerCommandFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|expected
init|=
literal|16
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|dockerCommands
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"[docker-command-execution]"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  cap-add=SYS_CHROOT,NET_BIND_SERVICE"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  cap-drop=ALL"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  detach=true"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  docker-command=run"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  group-add="
operator|+
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|groups
argument_list|)
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  hostname=ctr-id"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  image=busybox:latest"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  launch-command=bash,/test_container_work_dir/launch_container.sh"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  name=container_id"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  net=host"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  ro-mounts=/source/path:/destination/path"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  rw-mounts=/test_container_local_dir:/test_container_local_dir,"
operator|+
literal|"/test_filecache_dir:/test_filecache_dir,"
operator|+
literal|"/test_container_work_dir:/test_container_work_dir,"
operator|+
literal|"/test_container_log_dir:/test_container_log_dir,"
operator|+
literal|"/test_user_local_dir:/test_user_local_dir"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  user="
operator|+
name|uidGidPair
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify volume-driver is set to expected value.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  volume-driver=driver-1"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"  workdir=/test_container_work_dir"
argument_list|,
name|dockerCommands
operator|.
name|get
argument_list|(
name|counter
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDockerCapabilities ()
specifier|public
name|void
name|testDockerCapabilities
parameter_list|()
throws|throws
name|ContainerExecutionException
throws|,
name|PrivilegedOperationException
throws|,
name|IOException
block|{
name|DockerLinuxContainerRuntime
name|runtime
init|=
operator|new
name|DockerLinuxContainerRuntime
argument_list|(
name|mockExecutor
argument_list|,
name|mockCGroupsHandler
argument_list|)
decl_stmt|;
try|try
block|{
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_CONTAINER_CAPABILITIES
argument_list|,
literal|"none"
argument_list|,
literal|"CHOWN"
argument_list|,
literal|"DAC_OVERRIDE"
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Initialize didn't fail with invalid capabilities "
operator|+
literal|"'none', 'CHOWN', 'DAC_OVERRIDE'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerExecutionException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_CONTAINER_CAPABILITIES
argument_list|,
literal|"CHOWN"
argument_list|,
literal|"DAC_OVERRIDE"
argument_list|,
literal|"NONE"
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Initialize didn't fail with invalid capabilities "
operator|+
literal|"'CHOWN', 'DAC_OVERRIDE', 'NONE'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerExecutionException
name|e
parameter_list|)
block|{     }
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_CONTAINER_CAPABILITIES
argument_list|,
literal|"NONE"
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|runtime
operator|.
name|getCapabilities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_CONTAINER_CAPABILITIES
argument_list|,
literal|"none"
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|runtime
operator|.
name|getCapabilities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DOCKER_CONTAINER_CAPABILITIES
argument_list|,
literal|"CHOWN"
argument_list|,
literal|"DAC_OVERRIDE"
argument_list|)
expr_stmt|;
name|runtime
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|runtime
operator|.
name|getCapabilities
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"CHOWN"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"DAC_OVERRIDE"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|MockRuntime
class|class
name|MockRuntime
extends|extends
name|DockerLinuxContainerRuntime
block|{
DECL|field|privilegedOperationExecutor
specifier|private
name|PrivilegedOperationExecutor
name|privilegedOperationExecutor
decl_stmt|;
DECL|field|containerStatus
specifier|private
name|DockerCommandExecutor
operator|.
name|DockerContainerStatus
name|containerStatus
decl_stmt|;
DECL|field|delayedRemovalAllowed
specifier|private
name|boolean
name|delayedRemovalAllowed
decl_stmt|;
DECL|method|MockRuntime (PrivilegedOperationExecutor privilegedOperationExecutor, DockerCommandExecutor.DockerContainerStatus containerStatus, boolean delayedRemovalAllowed)
name|MockRuntime
parameter_list|(
name|PrivilegedOperationExecutor
name|privilegedOperationExecutor
parameter_list|,
name|DockerCommandExecutor
operator|.
name|DockerContainerStatus
name|containerStatus
parameter_list|,
name|boolean
name|delayedRemovalAllowed
parameter_list|)
block|{
name|super
argument_list|(
name|privilegedOperationExecutor
argument_list|)
expr_stmt|;
name|this
operator|.
name|privilegedOperationExecutor
operator|=
name|privilegedOperationExecutor
expr_stmt|;
name|this
operator|.
name|containerStatus
operator|=
name|containerStatus
expr_stmt|;
name|this
operator|.
name|delayedRemovalAllowed
operator|=
name|delayedRemovalAllowed
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|signalContainer (ContainerRuntimeContext ctx)
specifier|public
name|void
name|signalContainer
parameter_list|(
name|ContainerRuntimeContext
name|ctx
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
name|ContainerExecutor
operator|.
name|Signal
name|signal
init|=
name|ctx
operator|.
name|getExecutionAttribute
argument_list|(
name|SIGNAL
argument_list|)
decl_stmt|;
name|String
name|containerName
init|=
name|ctx
operator|.
name|getContainer
argument_list|()
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
init|=
name|ctx
operator|.
name|getContainer
argument_list|()
operator|.
name|getLaunchContext
argument_list|()
operator|.
name|getEnvironment
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|ContainerExecutor
operator|.
name|Signal
operator|.
name|KILL
operator|.
name|equals
argument_list|(
name|signal
argument_list|)
operator|||
name|ContainerExecutor
operator|.
name|Signal
operator|.
name|TERM
operator|.
name|equals
argument_list|(
name|signal
argument_list|)
condition|)
block|{
if|if
condition|(
name|DockerCommandExecutor
operator|.
name|isStoppable
argument_list|(
name|containerStatus
argument_list|)
condition|)
block|{
name|DockerStopCommand
name|dockerStopCommand
init|=
operator|new
name|DockerStopCommand
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|DockerCommandExecutor
operator|.
name|executeDockerCommand
argument_list|(
name|dockerStopCommand
argument_list|,
name|containerName
argument_list|,
name|environment
argument_list|,
name|conf
argument_list|,
name|mockExecutor
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|DockerCommandExecutor
operator|.
name|isKillable
argument_list|(
name|containerStatus
argument_list|)
condition|)
block|{
name|DockerKillCommand
name|dockerKillCommand
init|=
operator|new
name|DockerKillCommand
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|dockerKillCommand
operator|.
name|setSignal
argument_list|(
name|signal
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|DockerCommandExecutor
operator|.
name|executeDockerCommand
argument_list|(
name|dockerKillCommand
argument_list|,
name|containerName
argument_list|,
name|environment
argument_list|,
name|conf
argument_list|,
name|mockExecutor
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ContainerExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Signal docker container failed. Exception: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ContainerExecutionException
argument_list|(
literal|"Signal docker container failed"
argument_list|,
name|e
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|e
operator|.
name|getOutput
argument_list|()
argument_list|,
name|e
operator|.
name|getErrorOutput
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|reapContainer (ContainerRuntimeContext ctx)
specifier|public
name|void
name|reapContainer
parameter_list|(
name|ContainerRuntimeContext
name|ctx
parameter_list|)
throws|throws
name|ContainerExecutionException
block|{
name|String
name|delayedRemoval
init|=
name|env
operator|.
name|get
argument_list|(
name|ENV_DOCKER_CONTAINER_DELAYED_REMOVAL
argument_list|)
decl_stmt|;
if|if
condition|(
name|delayedRemovalAllowed
operator|&&
name|delayedRemoval
operator|!=
literal|null
operator|&&
name|delayedRemoval
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Delayed removal requested and allowed, skipping removal - "
operator|+
name|containerId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|DockerCommandExecutor
operator|.
name|isRemovable
argument_list|(
name|containerStatus
argument_list|)
condition|)
block|{
name|DockerRmCommand
name|dockerRmCommand
init|=
operator|new
name|DockerRmCommand
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|DockerCommandExecutor
operator|.
name|executeDockerCommand
argument_list|(
name|dockerRmCommand
argument_list|,
name|containerId
argument_list|,
name|env
argument_list|,
name|conf
argument_list|,
name|privilegedOperationExecutor
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

