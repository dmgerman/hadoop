begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyShort
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|argThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|isA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|isNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|timeout
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BrokenBarrierException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|AbstractFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|ChecksumOpt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnsupportedFileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|SerializedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|DrainDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DeletionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|LocalDirsHandlerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeManager
operator|.
name|NMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|ResourceLocalizationSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LocalResourceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LocalizerAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LocalizerHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LocalizerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ResourceStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|LocalResourceStatusPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|LocalizerStatusPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerResourceFailedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ResourceLocalizationService
operator|.
name|LocalizerRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ResourceLocalizationService
operator|.
name|LocalizerTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ResourceLocalizationService
operator|.
name|PublicLocalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ApplicationLocalizationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ContainerLocalizationCleanupEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ContainerLocalizationRequestEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizationEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizerResourceRequestEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ResourceFailedLocalizationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ResourceLocalizedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMMemoryStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMNullStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|security
operator|.
name|NMContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|security
operator|.
name|NMTokenSecretManagerInNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_class
DECL|class|TestResourceLocalizationService
specifier|public
class|class
name|TestResourceLocalizationService
block|{
DECL|field|basedir
specifier|static
specifier|final
name|Path
name|basedir
init|=
operator|new
name|Path
argument_list|(
literal|"target"
argument_list|,
name|TestResourceLocalizationService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|mockServer
specifier|static
name|Server
name|mockServer
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|spylfs
specifier|private
name|AbstractFileSystem
name|spylfs
decl_stmt|;
DECL|field|lfs
specifier|private
name|FileContext
name|lfs
decl_stmt|;
DECL|field|nmContext
specifier|private
name|NMContext
name|nmContext
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupClass ()
specifier|public
specifier|static
name|void
name|setupClass
parameter_list|()
block|{
name|mockServer
operator|=
name|mock
argument_list|(
name|Server
operator|.
name|class
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|123
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockServer
argument_list|)
operator|.
name|getListenerAddress
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|spylfs
operator|=
name|spy
argument_list|(
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|getDefaultFileSystem
argument_list|()
argument_list|)
expr_stmt|;
name|lfs
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|spylfs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|String
name|logDir
init|=
name|lfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
literal|"logdir "
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|logDir
argument_list|)
expr_stmt|;
name|nmContext
operator|=
operator|new
name|NMContext
argument_list|(
operator|new
name|NMContainerTokenSecretManager
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|NMTokenSecretManagerInNM
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|new
name|ApplicationACLsManager
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|NMNullStateStoreService
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
literal|null
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|basedir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocalizationInit ()
specifier|public
name|void
name|testLocalizationInit
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_PERMISSIONS_UMASK_KEY
argument_list|,
literal|"077"
argument_list|)
expr_stmt|;
name|AsyncDispatcher
name|dispatcher
init|=
operator|new
name|AsyncDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerExecutor
name|exec
init|=
name|mock
argument_list|(
name|ContainerExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|DeletionService
name|delService
init|=
name|spy
argument_list|(
operator|new
name|DeletionService
argument_list|(
name|exec
argument_list|)
argument_list|)
decl_stmt|;
name|delService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|delService
operator|.
name|start
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|localDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|sDirs
init|=
operator|new
name|String
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|localDirs
operator|.
name|add
argument_list|(
name|lfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
name|i
operator|+
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sDirs
index|[
name|i
index|]
operator|=
name|localDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|sDirs
argument_list|)
expr_stmt|;
name|LocalDirsHandlerService
name|diskhandler
init|=
operator|new
name|LocalDirsHandlerService
argument_list|()
decl_stmt|;
name|diskhandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ResourceLocalizationService
name|locService
init|=
name|spy
argument_list|(
operator|new
name|ResourceLocalizationService
argument_list|(
name|dispatcher
argument_list|,
name|exec
argument_list|,
name|delService
argument_list|,
name|diskhandler
argument_list|,
name|nmContext
argument_list|)
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|lfs
argument_list|)
operator|.
name|when
argument_list|(
name|locService
argument_list|)
operator|.
name|getLocalFileContext
argument_list|(
name|isA
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// initialize ResourceLocalizationService
name|locService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|FsPermission
name|defaultPerm
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
decl_stmt|;
comment|// verify directory creation
for|for
control|(
name|Path
name|p
range|:
name|localDirs
control|)
block|{
name|p
operator|=
operator|new
name|Path
argument_list|(
operator|(
operator|new
name|URI
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|usercache
init|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
name|ContainerLocalizer
operator|.
name|USERCACHE
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|spylfs
argument_list|)
operator|.
name|mkdir
argument_list|(
name|eq
argument_list|(
name|usercache
argument_list|)
argument_list|,
name|eq
argument_list|(
name|defaultPerm
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|publicCache
init|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
name|ContainerLocalizer
operator|.
name|FILECACHE
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|spylfs
argument_list|)
operator|.
name|mkdir
argument_list|(
name|eq
argument_list|(
name|publicCache
argument_list|)
argument_list|,
name|eq
argument_list|(
name|defaultPerm
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|nmPriv
init|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
name|ResourceLocalizationService
operator|.
name|NM_PRIVATE_DIR
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|spylfs
argument_list|)
operator|.
name|mkdir
argument_list|(
name|eq
argument_list|(
name|nmPriv
argument_list|)
argument_list|,
name|eq
argument_list|(
name|ResourceLocalizationService
operator|.
name|NM_PRIVATE_PERM
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
name|delService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDirectoryCleanupOnNewlyCreatedStateStore ()
specifier|public
name|void
name|testDirectoryCleanupOnNewlyCreatedStateStore
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_PERMISSIONS_UMASK_KEY
argument_list|,
literal|"077"
argument_list|)
expr_stmt|;
name|AsyncDispatcher
name|dispatcher
init|=
operator|new
name|AsyncDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerExecutor
name|exec
init|=
name|mock
argument_list|(
name|ContainerExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|DeletionService
name|delService
init|=
name|spy
argument_list|(
operator|new
name|DeletionService
argument_list|(
name|exec
argument_list|)
argument_list|)
decl_stmt|;
name|delService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|delService
operator|.
name|start
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|localDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|sDirs
init|=
operator|new
name|String
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|localDirs
operator|.
name|add
argument_list|(
name|lfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
name|i
operator|+
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sDirs
index|[
name|i
index|]
operator|=
name|localDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|sDirs
argument_list|)
expr_stmt|;
name|LocalDirsHandlerService
name|diskhandler
init|=
operator|new
name|LocalDirsHandlerService
argument_list|()
decl_stmt|;
name|diskhandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|NMStateStoreService
name|nmStateStoreService
init|=
name|mock
argument_list|(
name|NMStateStoreService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|nmStateStoreService
operator|.
name|canRecover
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nmStateStoreService
operator|.
name|isNewlyCreated
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ResourceLocalizationService
name|locService
init|=
name|spy
argument_list|(
operator|new
name|ResourceLocalizationService
argument_list|(
name|dispatcher
argument_list|,
name|exec
argument_list|,
name|delService
argument_list|,
name|diskhandler
argument_list|,
name|nmContext
argument_list|)
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|lfs
argument_list|)
operator|.
name|when
argument_list|(
name|locService
argument_list|)
operator|.
name|getLocalFileContext
argument_list|(
name|isA
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// initialize ResourceLocalizationService
name|locService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|FsPermission
name|defaultPerm
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
decl_stmt|;
comment|// verify directory creation
for|for
control|(
name|Path
name|p
range|:
name|localDirs
control|)
block|{
name|p
operator|=
operator|new
name|Path
argument_list|(
operator|(
operator|new
name|URI
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|usercache
init|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
name|ContainerLocalizer
operator|.
name|USERCACHE
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|spylfs
argument_list|)
operator|.
name|rename
argument_list|(
name|eq
argument_list|(
name|usercache
argument_list|)
argument_list|,
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Options
operator|.
name|Rename
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spylfs
argument_list|)
operator|.
name|mkdir
argument_list|(
name|eq
argument_list|(
name|usercache
argument_list|)
argument_list|,
name|eq
argument_list|(
name|defaultPerm
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|publicCache
init|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
name|ContainerLocalizer
operator|.
name|FILECACHE
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|spylfs
argument_list|)
operator|.
name|rename
argument_list|(
name|eq
argument_list|(
name|usercache
argument_list|)
argument_list|,
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Options
operator|.
name|Rename
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spylfs
argument_list|)
operator|.
name|mkdir
argument_list|(
name|eq
argument_list|(
name|publicCache
argument_list|)
argument_list|,
name|eq
argument_list|(
name|defaultPerm
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|nmPriv
init|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
name|ResourceLocalizationService
operator|.
name|NM_PRIVATE_DIR
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|spylfs
argument_list|)
operator|.
name|rename
argument_list|(
name|eq
argument_list|(
name|usercache
argument_list|)
argument_list|,
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Options
operator|.
name|Rename
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spylfs
argument_list|)
operator|.
name|mkdir
argument_list|(
name|eq
argument_list|(
name|nmPriv
argument_list|)
argument_list|,
name|eq
argument_list|(
name|ResourceLocalizationService
operator|.
name|NM_PRIVATE_PERM
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
name|delService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// mocked generics
DECL|method|testResourceRelease ()
specifier|public
name|void
name|testResourceRelease
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|localDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|sDirs
init|=
operator|new
name|String
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|localDirs
operator|.
name|add
argument_list|(
name|lfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
name|i
operator|+
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sDirs
index|[
name|i
index|]
operator|=
name|localDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|sDirs
argument_list|)
expr_stmt|;
name|LocalizerTracker
name|mockLocallilzerTracker
init|=
name|mock
argument_list|(
name|LocalizerTracker
operator|.
name|class
argument_list|)
decl_stmt|;
name|DrainDispatcher
name|dispatcher
init|=
operator|new
name|DrainDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|EventHandler
argument_list|<
name|ApplicationEvent
argument_list|>
name|applicationBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ApplicationEventType
operator|.
name|class
argument_list|,
name|applicationBus
argument_list|)
expr_stmt|;
name|EventHandler
argument_list|<
name|ContainerEvent
argument_list|>
name|containerBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainerEventType
operator|.
name|class
argument_list|,
name|containerBus
argument_list|)
expr_stmt|;
comment|//Ignore actual localization
name|EventHandler
argument_list|<
name|LocalizerEvent
argument_list|>
name|localizerBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|LocalizerEventType
operator|.
name|class
argument_list|,
name|localizerBus
argument_list|)
expr_stmt|;
name|ContainerExecutor
name|exec
init|=
name|mock
argument_list|(
name|ContainerExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|LocalDirsHandlerService
name|dirsHandler
init|=
operator|new
name|LocalDirsHandlerService
argument_list|()
decl_stmt|;
name|dirsHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|DeletionService
name|delService
init|=
operator|new
name|DeletionService
argument_list|(
name|exec
argument_list|)
decl_stmt|;
name|delService
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|delService
operator|.
name|start
argument_list|()
expr_stmt|;
name|ResourceLocalizationService
name|rawService
init|=
operator|new
name|ResourceLocalizationService
argument_list|(
name|dispatcher
argument_list|,
name|exec
argument_list|,
name|delService
argument_list|,
name|dirsHandler
argument_list|,
name|nmContext
argument_list|)
decl_stmt|;
name|ResourceLocalizationService
name|spyService
init|=
name|spy
argument_list|(
name|rawService
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|mockServer
argument_list|)
operator|.
name|when
argument_list|(
name|spyService
argument_list|)
operator|.
name|createServer
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|mockLocallilzerTracker
argument_list|)
operator|.
name|when
argument_list|(
name|spyService
argument_list|)
operator|.
name|createLocalizerTracker
argument_list|(
name|isA
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|lfs
argument_list|)
operator|.
name|when
argument_list|(
name|spyService
argument_list|)
operator|.
name|getLocalFileContext
argument_list|(
name|isA
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|spyService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|String
name|user
init|=
literal|"user0"
decl_stmt|;
comment|// init application
specifier|final
name|Application
name|app
init|=
name|mock
argument_list|(
name|Application
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ApplicationId
name|appId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|314159265358979L
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationLocalizationEvent
argument_list|(
name|LocalizationEventType
operator|.
name|INIT_APPLICATION_RESOURCES
argument_list|,
name|app
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|//Get a handle on the trackers after they're setup with INIT_APP_RESOURCES
name|LocalResourcesTracker
name|appTracker
init|=
name|spyService
operator|.
name|getLocalResourcesTracker
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|,
name|user
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|LocalResourcesTracker
name|privTracker
init|=
name|spyService
operator|.
name|getLocalResourcesTracker
argument_list|(
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|user
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|LocalResourcesTracker
name|pubTracker
init|=
name|spyService
operator|.
name|getLocalResourcesTracker
argument_list|(
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|user
argument_list|,
name|appId
argument_list|)
decl_stmt|;
comment|// init container.
specifier|final
name|Container
name|c
init|=
name|getMockContainer
argument_list|(
name|appId
argument_list|,
literal|42
argument_list|,
name|user
argument_list|)
decl_stmt|;
comment|// init resources
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SEED: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
comment|// Send localization requests for one resource of each type.
specifier|final
name|LocalResource
name|privResource
init|=
name|getPrivateMockedResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceRequest
name|privReq
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|privResource
argument_list|)
decl_stmt|;
specifier|final
name|LocalResource
name|pubResource
init|=
name|getPublicMockedResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceRequest
name|pubReq
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|pubResource
argument_list|)
decl_stmt|;
specifier|final
name|LocalResource
name|pubResource2
init|=
name|getPublicMockedResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceRequest
name|pubReq2
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|pubResource2
argument_list|)
decl_stmt|;
specifier|final
name|LocalResource
name|appResource
init|=
name|getAppMockedResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceRequest
name|appReq
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|appResource
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|req
init|=
operator|new
name|HashMap
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|req
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|privReq
argument_list|)
argument_list|)
expr_stmt|;
name|req
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|pubReq
argument_list|)
argument_list|)
expr_stmt|;
name|req
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|appReq
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|req2
init|=
operator|new
name|HashMap
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|req2
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|privReq
argument_list|)
argument_list|)
expr_stmt|;
name|req2
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|pubReq2
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|LocalResourceRequest
argument_list|>
name|pubRsrcs
init|=
operator|new
name|HashSet
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|pubRsrcs
operator|.
name|add
argument_list|(
name|pubReq
argument_list|)
expr_stmt|;
name|pubRsrcs
operator|.
name|add
argument_list|(
name|pubReq2
argument_list|)
expr_stmt|;
comment|// Send Request event
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationRequestEvent
argument_list|(
name|c
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationRequestEvent
argument_list|(
name|c
argument_list|,
name|req2
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|int
name|privRsrcCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|LocalizedResource
name|lr
range|:
name|privTracker
control|)
block|{
name|privRsrcCount
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect reference count"
argument_list|,
literal|2
argument_list|,
name|lr
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|privReq
argument_list|,
name|lr
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|privRsrcCount
argument_list|)
expr_stmt|;
name|int
name|pubRsrcCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|LocalizedResource
name|lr
range|:
name|pubTracker
control|)
block|{
name|pubRsrcCount
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect reference count"
argument_list|,
literal|1
argument_list|,
name|lr
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|pubRsrcs
operator|.
name|remove
argument_list|(
name|lr
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pubRsrcs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pubRsrcCount
argument_list|)
expr_stmt|;
name|int
name|appRsrcCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|LocalizedResource
name|lr
range|:
name|appTracker
control|)
block|{
name|appRsrcCount
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect reference count"
argument_list|,
literal|1
argument_list|,
name|lr
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appReq
argument_list|,
name|lr
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appRsrcCount
argument_list|)
expr_stmt|;
comment|//Send Cleanup Event
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationCleanupEvent
argument_list|(
name|c
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockLocallilzerTracker
argument_list|)
operator|.
name|cleanupPrivLocalizers
argument_list|(
literal|"container_314159265358979_0003_01_000042"
argument_list|)
expr_stmt|;
name|req2
operator|.
name|remove
argument_list|(
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationCleanupEvent
argument_list|(
name|c
argument_list|,
name|req2
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|pubRsrcs
operator|.
name|add
argument_list|(
name|pubReq
argument_list|)
expr_stmt|;
name|pubRsrcs
operator|.
name|add
argument_list|(
name|pubReq2
argument_list|)
expr_stmt|;
name|privRsrcCount
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|LocalizedResource
name|lr
range|:
name|privTracker
control|)
block|{
name|privRsrcCount
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect reference count"
argument_list|,
literal|1
argument_list|,
name|lr
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|privReq
argument_list|,
name|lr
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|privRsrcCount
argument_list|)
expr_stmt|;
name|pubRsrcCount
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|LocalizedResource
name|lr
range|:
name|pubTracker
control|)
block|{
name|pubRsrcCount
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect reference count"
argument_list|,
literal|0
argument_list|,
name|lr
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|pubRsrcs
operator|.
name|remove
argument_list|(
name|lr
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pubRsrcs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pubRsrcCount
argument_list|)
expr_stmt|;
name|appRsrcCount
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|LocalizedResource
name|lr
range|:
name|appTracker
control|)
block|{
name|appRsrcCount
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect reference count"
argument_list|,
literal|0
argument_list|,
name|lr
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appReq
argument_list|,
name|lr
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appRsrcCount
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
name|delService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// mocked generics
DECL|method|testRecovery ()
specifier|public
name|void
name|testRecovery
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|user1
init|=
literal|"user1"
decl_stmt|;
specifier|final
name|String
name|user2
init|=
literal|"user2"
decl_stmt|;
specifier|final
name|ApplicationId
name|appId1
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|ApplicationId
name|appId2
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|localDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|sDirs
init|=
operator|new
name|String
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|localDirs
operator|.
name|add
argument_list|(
name|lfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
name|i
operator|+
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sDirs
index|[
name|i
index|]
operator|=
name|localDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|sDirs
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NMMemoryStateStoreService
name|stateStore
init|=
operator|new
name|NMMemoryStateStoreService
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|start
argument_list|()
expr_stmt|;
name|DrainDispatcher
name|dispatcher
init|=
operator|new
name|DrainDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|EventHandler
argument_list|<
name|ApplicationEvent
argument_list|>
name|applicationBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ApplicationEventType
operator|.
name|class
argument_list|,
name|applicationBus
argument_list|)
expr_stmt|;
name|EventHandler
argument_list|<
name|ContainerEvent
argument_list|>
name|containerBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainerEventType
operator|.
name|class
argument_list|,
name|containerBus
argument_list|)
expr_stmt|;
comment|//Ignore actual localization
name|EventHandler
argument_list|<
name|LocalizerEvent
argument_list|>
name|localizerBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|LocalizerEventType
operator|.
name|class
argument_list|,
name|localizerBus
argument_list|)
expr_stmt|;
name|LocalDirsHandlerService
name|dirsHandler
init|=
operator|new
name|LocalDirsHandlerService
argument_list|()
decl_stmt|;
name|dirsHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ResourceLocalizationService
name|spyService
init|=
name|createSpyService
argument_list|(
name|dispatcher
argument_list|,
name|dirsHandler
argument_list|,
name|stateStore
argument_list|)
decl_stmt|;
try|try
block|{
name|spyService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|Application
name|app1
init|=
name|mock
argument_list|(
name|Application
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app1
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|user1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app1
operator|.
name|getAppId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId1
argument_list|)
expr_stmt|;
specifier|final
name|Application
name|app2
init|=
name|mock
argument_list|(
name|Application
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app2
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|user2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app2
operator|.
name|getAppId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId2
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationLocalizationEvent
argument_list|(
name|LocalizationEventType
operator|.
name|INIT_APPLICATION_RESOURCES
argument_list|,
name|app1
argument_list|)
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationLocalizationEvent
argument_list|(
name|LocalizationEventType
operator|.
name|INIT_APPLICATION_RESOURCES
argument_list|,
name|app2
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|//Get a handle on the trackers after they're setup with INIT_APP_RESOURCES
name|LocalResourcesTracker
name|appTracker1
init|=
name|spyService
operator|.
name|getLocalResourcesTracker
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|,
name|user1
argument_list|,
name|appId1
argument_list|)
decl_stmt|;
name|LocalResourcesTracker
name|privTracker1
init|=
name|spyService
operator|.
name|getLocalResourcesTracker
argument_list|(
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|user1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LocalResourcesTracker
name|appTracker2
init|=
name|spyService
operator|.
name|getLocalResourcesTracker
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|,
name|user2
argument_list|,
name|appId2
argument_list|)
decl_stmt|;
name|LocalResourcesTracker
name|pubTracker
init|=
name|spyService
operator|.
name|getLocalResourcesTracker
argument_list|(
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// init containers
specifier|final
name|Container
name|c1
init|=
name|getMockContainer
argument_list|(
name|appId1
argument_list|,
literal|1
argument_list|,
name|user1
argument_list|)
decl_stmt|;
specifier|final
name|Container
name|c2
init|=
name|getMockContainer
argument_list|(
name|appId2
argument_list|,
literal|2
argument_list|,
name|user2
argument_list|)
decl_stmt|;
comment|// init resources
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SEED: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
comment|// Send localization requests of each type.
specifier|final
name|LocalResource
name|privResource1
init|=
name|getPrivateMockedResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceRequest
name|privReq1
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|privResource1
argument_list|)
decl_stmt|;
specifier|final
name|LocalResource
name|privResource2
init|=
name|getPrivateMockedResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceRequest
name|privReq2
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|privResource2
argument_list|)
decl_stmt|;
specifier|final
name|LocalResource
name|pubResource1
init|=
name|getPublicMockedResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceRequest
name|pubReq1
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|pubResource1
argument_list|)
decl_stmt|;
specifier|final
name|LocalResource
name|pubResource2
init|=
name|getPublicMockedResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceRequest
name|pubReq2
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|pubResource2
argument_list|)
decl_stmt|;
specifier|final
name|LocalResource
name|appResource1
init|=
name|getAppMockedResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceRequest
name|appReq1
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|appResource1
argument_list|)
decl_stmt|;
specifier|final
name|LocalResource
name|appResource2
init|=
name|getAppMockedResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceRequest
name|appReq2
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|appResource2
argument_list|)
decl_stmt|;
specifier|final
name|LocalResource
name|appResource3
init|=
name|getAppMockedResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceRequest
name|appReq3
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|appResource3
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|req1
init|=
operator|new
name|HashMap
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|req1
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|LocalResourceRequest
index|[]
block|{
name|privReq1
block|,
name|privReq2
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|req1
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|pubReq1
argument_list|)
argument_list|)
expr_stmt|;
name|req1
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|appReq1
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|req2
init|=
operator|new
name|HashMap
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|req2
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|LocalResourceRequest
index|[]
block|{
name|appReq2
block|,
name|appReq3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|req2
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|pubReq2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Send Request event
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationRequestEvent
argument_list|(
name|c1
argument_list|,
name|req1
argument_list|)
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationRequestEvent
argument_list|(
name|c2
argument_list|,
name|req2
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Simulate start of localization for all resources
name|privTracker1
operator|.
name|getPathForLocalization
argument_list|(
name|privReq1
argument_list|,
name|dirsHandler
operator|.
name|getLocalPathForWrite
argument_list|(
name|ContainerLocalizer
operator|.
name|USERCACHE
operator|+
name|user1
argument_list|)
argument_list|)
expr_stmt|;
name|privTracker1
operator|.
name|getPathForLocalization
argument_list|(
name|privReq2
argument_list|,
name|dirsHandler
operator|.
name|getLocalPathForWrite
argument_list|(
name|ContainerLocalizer
operator|.
name|USERCACHE
operator|+
name|user1
argument_list|)
argument_list|)
expr_stmt|;
name|LocalizedResource
name|privLr1
init|=
name|privTracker1
operator|.
name|getLocalizedResource
argument_list|(
name|privReq1
argument_list|)
decl_stmt|;
name|LocalizedResource
name|privLr2
init|=
name|privTracker1
operator|.
name|getLocalizedResource
argument_list|(
name|privReq2
argument_list|)
decl_stmt|;
name|appTracker1
operator|.
name|getPathForLocalization
argument_list|(
name|appReq1
argument_list|,
name|dirsHandler
operator|.
name|getLocalPathForWrite
argument_list|(
name|ContainerLocalizer
operator|.
name|APPCACHE
operator|+
name|appId1
argument_list|)
argument_list|)
expr_stmt|;
name|LocalizedResource
name|appLr1
init|=
name|appTracker1
operator|.
name|getLocalizedResource
argument_list|(
name|appReq1
argument_list|)
decl_stmt|;
name|appTracker2
operator|.
name|getPathForLocalization
argument_list|(
name|appReq2
argument_list|,
name|dirsHandler
operator|.
name|getLocalPathForWrite
argument_list|(
name|ContainerLocalizer
operator|.
name|APPCACHE
operator|+
name|appId2
argument_list|)
argument_list|)
expr_stmt|;
name|LocalizedResource
name|appLr2
init|=
name|appTracker2
operator|.
name|getLocalizedResource
argument_list|(
name|appReq2
argument_list|)
decl_stmt|;
name|appTracker2
operator|.
name|getPathForLocalization
argument_list|(
name|appReq3
argument_list|,
name|dirsHandler
operator|.
name|getLocalPathForWrite
argument_list|(
name|ContainerLocalizer
operator|.
name|APPCACHE
operator|+
name|appId2
argument_list|)
argument_list|)
expr_stmt|;
name|LocalizedResource
name|appLr3
init|=
name|appTracker2
operator|.
name|getLocalizedResource
argument_list|(
name|appReq3
argument_list|)
decl_stmt|;
name|pubTracker
operator|.
name|getPathForLocalization
argument_list|(
name|pubReq1
argument_list|,
name|dirsHandler
operator|.
name|getLocalPathForWrite
argument_list|(
name|ContainerLocalizer
operator|.
name|FILECACHE
argument_list|)
argument_list|)
expr_stmt|;
name|LocalizedResource
name|pubLr1
init|=
name|pubTracker
operator|.
name|getLocalizedResource
argument_list|(
name|pubReq1
argument_list|)
decl_stmt|;
name|pubTracker
operator|.
name|getPathForLocalization
argument_list|(
name|pubReq2
argument_list|,
name|dirsHandler
operator|.
name|getLocalPathForWrite
argument_list|(
name|ContainerLocalizer
operator|.
name|FILECACHE
argument_list|)
argument_list|)
expr_stmt|;
name|LocalizedResource
name|pubLr2
init|=
name|pubTracker
operator|.
name|getLocalizedResource
argument_list|(
name|pubReq2
argument_list|)
decl_stmt|;
comment|// Simulate completion of localization for most resources with
comment|// possibly different sizes than in the request
name|assertNotNull
argument_list|(
literal|"Localization not started"
argument_list|,
name|privLr1
operator|.
name|getLocalPath
argument_list|()
argument_list|)
expr_stmt|;
name|privTracker1
operator|.
name|handle
argument_list|(
operator|new
name|ResourceLocalizedEvent
argument_list|(
name|privReq1
argument_list|,
name|privLr1
operator|.
name|getLocalPath
argument_list|()
argument_list|,
name|privLr1
operator|.
name|getSize
argument_list|()
operator|+
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Localization not started"
argument_list|,
name|privLr2
operator|.
name|getLocalPath
argument_list|()
argument_list|)
expr_stmt|;
name|privTracker1
operator|.
name|handle
argument_list|(
operator|new
name|ResourceLocalizedEvent
argument_list|(
name|privReq2
argument_list|,
name|privLr2
operator|.
name|getLocalPath
argument_list|()
argument_list|,
name|privLr2
operator|.
name|getSize
argument_list|()
operator|+
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Localization not started"
argument_list|,
name|appLr1
operator|.
name|getLocalPath
argument_list|()
argument_list|)
expr_stmt|;
name|appTracker1
operator|.
name|handle
argument_list|(
operator|new
name|ResourceLocalizedEvent
argument_list|(
name|appReq1
argument_list|,
name|appLr1
operator|.
name|getLocalPath
argument_list|()
argument_list|,
name|appLr1
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Localization not started"
argument_list|,
name|appLr3
operator|.
name|getLocalPath
argument_list|()
argument_list|)
expr_stmt|;
name|appTracker2
operator|.
name|handle
argument_list|(
operator|new
name|ResourceLocalizedEvent
argument_list|(
name|appReq3
argument_list|,
name|appLr3
operator|.
name|getLocalPath
argument_list|()
argument_list|,
name|appLr3
operator|.
name|getSize
argument_list|()
operator|+
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Localization not started"
argument_list|,
name|pubLr1
operator|.
name|getLocalPath
argument_list|()
argument_list|)
expr_stmt|;
name|pubTracker
operator|.
name|handle
argument_list|(
operator|new
name|ResourceLocalizedEvent
argument_list|(
name|pubReq1
argument_list|,
name|pubLr1
operator|.
name|getLocalPath
argument_list|()
argument_list|,
name|pubLr1
operator|.
name|getSize
argument_list|()
operator|+
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Localization not started"
argument_list|,
name|pubLr2
operator|.
name|getLocalPath
argument_list|()
argument_list|)
expr_stmt|;
name|pubTracker
operator|.
name|handle
argument_list|(
operator|new
name|ResourceLocalizedEvent
argument_list|(
name|pubReq2
argument_list|,
name|pubLr2
operator|.
name|getLocalPath
argument_list|()
argument_list|,
name|pubLr2
operator|.
name|getSize
argument_list|()
operator|+
literal|99999
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ResourceState
operator|.
name|LOCALIZED
argument_list|,
name|privLr1
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResourceState
operator|.
name|LOCALIZED
argument_list|,
name|privLr2
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResourceState
operator|.
name|LOCALIZED
argument_list|,
name|appLr1
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResourceState
operator|.
name|DOWNLOADING
argument_list|,
name|appLr2
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResourceState
operator|.
name|LOCALIZED
argument_list|,
name|appLr3
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResourceState
operator|.
name|LOCALIZED
argument_list|,
name|pubLr1
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResourceState
operator|.
name|LOCALIZED
argument_list|,
name|pubLr2
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// restart and recover
name|spyService
operator|=
name|createSpyService
argument_list|(
name|dispatcher
argument_list|,
name|dirsHandler
argument_list|,
name|stateStore
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|recoverLocalizedResources
argument_list|(
name|stateStore
operator|.
name|loadLocalizationState
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|appTracker1
operator|=
name|spyService
operator|.
name|getLocalResourcesTracker
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|,
name|user1
argument_list|,
name|appId1
argument_list|)
expr_stmt|;
name|privTracker1
operator|=
name|spyService
operator|.
name|getLocalResourcesTracker
argument_list|(
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|user1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|appTracker2
operator|=
name|spyService
operator|.
name|getLocalResourcesTracker
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|,
name|user2
argument_list|,
name|appId2
argument_list|)
expr_stmt|;
name|pubTracker
operator|=
name|spyService
operator|.
name|getLocalResourcesTracker
argument_list|(
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|LocalizedResource
name|recoveredRsrc
init|=
name|privTracker1
operator|.
name|getLocalizedResource
argument_list|(
name|privReq1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|privReq1
argument_list|,
name|recoveredRsrc
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|privLr1
operator|.
name|getLocalPath
argument_list|()
argument_list|,
name|recoveredRsrc
operator|.
name|getLocalPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|privLr1
operator|.
name|getSize
argument_list|()
argument_list|,
name|recoveredRsrc
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResourceState
operator|.
name|LOCALIZED
argument_list|,
name|recoveredRsrc
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|recoveredRsrc
operator|=
name|privTracker1
operator|.
name|getLocalizedResource
argument_list|(
name|privReq2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|privReq2
argument_list|,
name|recoveredRsrc
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|privLr2
operator|.
name|getLocalPath
argument_list|()
argument_list|,
name|recoveredRsrc
operator|.
name|getLocalPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|privLr2
operator|.
name|getSize
argument_list|()
argument_list|,
name|recoveredRsrc
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResourceState
operator|.
name|LOCALIZED
argument_list|,
name|recoveredRsrc
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|recoveredRsrc
operator|=
name|appTracker1
operator|.
name|getLocalizedResource
argument_list|(
name|appReq1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appReq1
argument_list|,
name|recoveredRsrc
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appLr1
operator|.
name|getLocalPath
argument_list|()
argument_list|,
name|recoveredRsrc
operator|.
name|getLocalPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appLr1
operator|.
name|getSize
argument_list|()
argument_list|,
name|recoveredRsrc
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResourceState
operator|.
name|LOCALIZED
argument_list|,
name|recoveredRsrc
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|recoveredRsrc
operator|=
name|appTracker2
operator|.
name|getLocalizedResource
argument_list|(
name|appReq2
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"in-progress resource should not be present"
argument_list|,
name|recoveredRsrc
argument_list|)
expr_stmt|;
name|recoveredRsrc
operator|=
name|appTracker2
operator|.
name|getLocalizedResource
argument_list|(
name|appReq3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appReq3
argument_list|,
name|recoveredRsrc
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appLr3
operator|.
name|getLocalPath
argument_list|()
argument_list|,
name|recoveredRsrc
operator|.
name|getLocalPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appLr3
operator|.
name|getSize
argument_list|()
argument_list|,
name|recoveredRsrc
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResourceState
operator|.
name|LOCALIZED
argument_list|,
name|recoveredRsrc
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
name|stateStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// mocked generics
DECL|method|testLocalizerRunnerException ()
specifier|public
name|void
name|testLocalizerRunnerException
parameter_list|()
throws|throws
name|Exception
block|{
name|DrainDispatcher
name|dispatcher
init|=
operator|new
name|DrainDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|EventHandler
argument_list|<
name|ApplicationEvent
argument_list|>
name|applicationBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ApplicationEventType
operator|.
name|class
argument_list|,
name|applicationBus
argument_list|)
expr_stmt|;
name|EventHandler
argument_list|<
name|ContainerEvent
argument_list|>
name|containerBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainerEventType
operator|.
name|class
argument_list|,
name|containerBus
argument_list|)
expr_stmt|;
name|ContainerExecutor
name|exec
init|=
name|mock
argument_list|(
name|ContainerExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|LocalDirsHandlerService
name|dirsHandler
init|=
operator|new
name|LocalDirsHandlerService
argument_list|()
decl_stmt|;
name|LocalDirsHandlerService
name|dirsHandlerSpy
init|=
name|spy
argument_list|(
name|dirsHandler
argument_list|)
decl_stmt|;
name|dirsHandlerSpy
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|DeletionService
name|delServiceReal
init|=
operator|new
name|DeletionService
argument_list|(
name|exec
argument_list|)
decl_stmt|;
name|DeletionService
name|delService
init|=
name|spy
argument_list|(
name|delServiceReal
argument_list|)
decl_stmt|;
name|delService
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|delService
operator|.
name|start
argument_list|()
expr_stmt|;
name|ResourceLocalizationService
name|rawService
init|=
operator|new
name|ResourceLocalizationService
argument_list|(
name|dispatcher
argument_list|,
name|exec
argument_list|,
name|delService
argument_list|,
name|dirsHandlerSpy
argument_list|,
name|nmContext
argument_list|)
decl_stmt|;
name|ResourceLocalizationService
name|spyService
init|=
name|spy
argument_list|(
name|rawService
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|mockServer
argument_list|)
operator|.
name|when
argument_list|(
name|spyService
argument_list|)
operator|.
name|createServer
argument_list|()
expr_stmt|;
try|try
block|{
name|spyService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// init application
specifier|final
name|Application
name|app
init|=
name|mock
argument_list|(
name|Application
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ApplicationId
name|appId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|314159265358979L
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"user0"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationLocalizationEvent
argument_list|(
name|LocalizationEventType
operator|.
name|INIT_APPLICATION_RESOURCES
argument_list|,
name|app
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SEED: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
specifier|final
name|Container
name|c
init|=
name|getMockContainer
argument_list|(
name|appId
argument_list|,
literal|42
argument_list|,
literal|"user0"
argument_list|)
decl_stmt|;
specifier|final
name|LocalResource
name|resource1
init|=
name|getPrivateMockedResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Here 4"
argument_list|)
expr_stmt|;
specifier|final
name|LocalResourceRequest
name|req1
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|resource1
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|rsrcs
init|=
operator|new
name|HashMap
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LocalResourceRequest
argument_list|>
name|privateResourceList
init|=
operator|new
name|ArrayList
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|privateResourceList
operator|.
name|add
argument_list|(
name|req1
argument_list|)
expr_stmt|;
name|rsrcs
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|privateResourceList
argument_list|)
expr_stmt|;
specifier|final
name|Constructor
argument_list|<
name|?
argument_list|>
index|[]
name|constructors
init|=
name|FSError
operator|.
name|class
operator|.
name|getDeclaredConstructors
argument_list|()
decl_stmt|;
name|constructors
index|[
literal|0
index|]
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FSError
name|fsError
init|=
operator|(
name|FSError
operator|)
name|constructors
index|[
literal|0
index|]
operator|.
name|newInstance
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Disk Error"
argument_list|)
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
name|fsError
argument_list|)
operator|.
name|when
argument_list|(
name|dirsHandlerSpy
argument_list|)
operator|.
name|getLocalPathForWrite
argument_list|(
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationRequestEvent
argument_list|(
name|c
argument_list|,
name|rsrcs
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Verify if ContainerResourceFailedEvent is invoked on FSError
name|verify
argument_list|(
name|containerBus
argument_list|)
operator|.
name|handle
argument_list|(
name|isA
argument_list|(
name|ContainerResourceFailedEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|spyService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
name|delService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// mocked generics
DECL|method|testLocalizationHeartbeat ()
specifier|public
name|void
name|testLocalizationHeartbeat
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|localDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|sDirs
init|=
operator|new
name|String
index|[
literal|1
index|]
decl_stmt|;
comment|// Making sure that we have only one local disk so that it will only be
comment|// selected for consecutive resource localization calls.  This is required
comment|// to test LocalCacheDirectoryManager.
name|localDirs
operator|.
name|add
argument_list|(
name|lfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
literal|0
operator|+
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sDirs
index|[
literal|0
index|]
operator|=
name|localDirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|sDirs
argument_list|)
expr_stmt|;
comment|// Adding configuration to make sure there is only one file per
comment|// directory
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY
argument_list|,
literal|"37"
argument_list|)
expr_stmt|;
name|DrainDispatcher
name|dispatcher
init|=
operator|new
name|DrainDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|EventHandler
argument_list|<
name|ApplicationEvent
argument_list|>
name|applicationBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ApplicationEventType
operator|.
name|class
argument_list|,
name|applicationBus
argument_list|)
expr_stmt|;
name|EventHandler
argument_list|<
name|ContainerEvent
argument_list|>
name|containerBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainerEventType
operator|.
name|class
argument_list|,
name|containerBus
argument_list|)
expr_stmt|;
name|ContainerExecutor
name|exec
init|=
name|mock
argument_list|(
name|ContainerExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|LocalDirsHandlerService
name|dirsHandler
init|=
operator|new
name|LocalDirsHandlerService
argument_list|()
decl_stmt|;
name|dirsHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|DeletionService
name|delServiceReal
init|=
operator|new
name|DeletionService
argument_list|(
name|exec
argument_list|)
decl_stmt|;
name|DeletionService
name|delService
init|=
name|spy
argument_list|(
name|delServiceReal
argument_list|)
decl_stmt|;
name|delService
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|delService
operator|.
name|start
argument_list|()
expr_stmt|;
name|ResourceLocalizationService
name|rawService
init|=
operator|new
name|ResourceLocalizationService
argument_list|(
name|dispatcher
argument_list|,
name|exec
argument_list|,
name|delService
argument_list|,
name|dirsHandler
argument_list|,
name|nmContext
argument_list|)
decl_stmt|;
name|ResourceLocalizationService
name|spyService
init|=
name|spy
argument_list|(
name|rawService
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|mockServer
argument_list|)
operator|.
name|when
argument_list|(
name|spyService
argument_list|)
operator|.
name|createServer
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|lfs
argument_list|)
operator|.
name|when
argument_list|(
name|spyService
argument_list|)
operator|.
name|getLocalFileContext
argument_list|(
name|isA
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FsPermission
name|defaultPermission
init|=
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
operator|.
name|applyUMask
argument_list|(
name|lfs
operator|.
name|getUMask
argument_list|()
argument_list|)
decl_stmt|;
name|FsPermission
name|nmPermission
init|=
name|ResourceLocalizationService
operator|.
name|NM_PRIVATE_PERM
operator|.
name|applyUMask
argument_list|(
name|lfs
operator|.
name|getUMask
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|userDir
init|=
operator|new
name|Path
argument_list|(
name|sDirs
index|[
literal|0
index|]
operator|.
name|substring
argument_list|(
literal|"file:"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|ContainerLocalizer
operator|.
name|USERCACHE
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|fileDir
init|=
operator|new
name|Path
argument_list|(
name|sDirs
index|[
literal|0
index|]
operator|.
name|substring
argument_list|(
literal|"file:"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|ContainerLocalizer
operator|.
name|FILECACHE
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sysDir
init|=
operator|new
name|Path
argument_list|(
name|sDirs
index|[
literal|0
index|]
operator|.
name|substring
argument_list|(
literal|"file:"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|ResourceLocalizationService
operator|.
name|NM_PRIVATE_DIR
argument_list|)
decl_stmt|;
specifier|final
name|FileStatus
name|fs
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|0
argument_list|,
name|defaultPermission
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
operator|new
name|Path
argument_list|(
name|sDirs
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|FileStatus
name|nmFs
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|0
argument_list|,
name|nmPermission
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|sysDir
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileStatus
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|Object
index|[]
name|args
init|=
name|invocation
operator|.
name|getArguments
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|userDir
argument_list|)
operator|||
name|args
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|fileDir
argument_list|)
condition|)
block|{
return|return
name|fs
return|;
block|}
block|}
return|return
name|nmFs
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|spylfs
argument_list|)
operator|.
name|getFileStatus
argument_list|(
name|isA
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|spyService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// init application
specifier|final
name|Application
name|app
init|=
name|mock
argument_list|(
name|Application
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ApplicationId
name|appId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|314159265358979L
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"user0"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationLocalizationEvent
argument_list|(
name|LocalizationEventType
operator|.
name|INIT_APPLICATION_RESOURCES
argument_list|,
name|app
argument_list|)
argument_list|)
expr_stmt|;
name|ArgumentMatcher
argument_list|<
name|ApplicationEvent
argument_list|>
name|matchesAppInit
init|=
operator|new
name|ArgumentMatcher
argument_list|<
name|ApplicationEvent
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|ApplicationEvent
name|evt
init|=
operator|(
name|ApplicationEvent
operator|)
name|o
decl_stmt|;
return|return
name|evt
operator|.
name|getType
argument_list|()
operator|==
name|ApplicationEventType
operator|.
name|APPLICATION_INITED
operator|&&
name|appId
operator|==
name|evt
operator|.
name|getApplicationID
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|applicationBus
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
name|matchesAppInit
argument_list|)
argument_list|)
expr_stmt|;
comment|// init container rsrc, localizer
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SEED: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
specifier|final
name|Container
name|c
init|=
name|getMockContainer
argument_list|(
name|appId
argument_list|,
literal|42
argument_list|,
literal|"user0"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
operator|new
name|FSDataOutputStream
argument_list|(
operator|new
name|DataOutputBuffer
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|out
argument_list|)
operator|.
name|when
argument_list|(
name|spylfs
argument_list|)
operator|.
name|createInternal
argument_list|(
name|isA
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|EnumSet
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|FsPermission
operator|.
name|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyShort
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|isA
argument_list|(
name|Progressable
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|ChecksumOpt
operator|.
name|class
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|LocalResource
name|resource1
init|=
name|getPrivateMockedResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|LocalResource
name|resource2
init|=
literal|null
decl_stmt|;
do|do
block|{
name|resource2
operator|=
name|getPrivateMockedResource
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|resource2
operator|==
literal|null
operator|||
name|resource2
operator|.
name|equals
argument_list|(
name|resource1
argument_list|)
condition|)
do|;
name|LocalResource
name|resource3
init|=
literal|null
decl_stmt|;
do|do
block|{
name|resource3
operator|=
name|getPrivateMockedResource
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|resource3
operator|==
literal|null
operator|||
name|resource3
operator|.
name|equals
argument_list|(
name|resource1
argument_list|)
operator|||
name|resource3
operator|.
name|equals
argument_list|(
name|resource2
argument_list|)
condition|)
do|;
comment|// above call to make sure we don't get identical resources.
specifier|final
name|LocalResourceRequest
name|req1
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|resource1
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceRequest
name|req2
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|resource2
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceRequest
name|req3
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|resource3
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|rsrcs
init|=
operator|new
name|HashMap
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LocalResourceRequest
argument_list|>
name|privateResourceList
init|=
operator|new
name|ArrayList
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|privateResourceList
operator|.
name|add
argument_list|(
name|req1
argument_list|)
expr_stmt|;
name|privateResourceList
operator|.
name|add
argument_list|(
name|req2
argument_list|)
expr_stmt|;
name|privateResourceList
operator|.
name|add
argument_list|(
name|req3
argument_list|)
expr_stmt|;
name|rsrcs
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|privateResourceList
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationRequestEvent
argument_list|(
name|c
argument_list|,
name|rsrcs
argument_list|)
argument_list|)
expr_stmt|;
comment|// Sigh. Thread init of private localizer not accessible
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|String
name|appStr
init|=
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|String
name|ctnrStr
init|=
name|c
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|Path
argument_list|>
name|tokenPathCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Path
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|exec
argument_list|)
operator|.
name|startLocalizer
argument_list|(
name|tokenPathCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|isA
argument_list|(
name|InetSocketAddress
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|"user0"
argument_list|)
argument_list|,
name|eq
argument_list|(
name|appStr
argument_list|)
argument_list|,
name|eq
argument_list|(
name|ctnrStr
argument_list|)
argument_list|,
name|isA
argument_list|(
name|LocalDirsHandlerService
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|localizationTokenPath
init|=
name|tokenPathCaptor
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// heartbeat from localizer
name|LocalResourceStatus
name|rsrc1success
init|=
name|mock
argument_list|(
name|LocalResourceStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|LocalResourceStatus
name|rsrc2pending
init|=
name|mock
argument_list|(
name|LocalResourceStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|LocalResourceStatus
name|rsrc2success
init|=
name|mock
argument_list|(
name|LocalResourceStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|LocalResourceStatus
name|rsrc3success
init|=
name|mock
argument_list|(
name|LocalResourceStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|LocalizerStatus
name|stat
init|=
name|mock
argument_list|(
name|LocalizerStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|stat
operator|.
name|getLocalizerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ctnrStr
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsrc1success
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resource1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsrc2pending
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resource2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsrc2success
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resource2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsrc3success
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resource3
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsrc1success
operator|.
name|getLocalSize
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|4344L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsrc2success
operator|.
name|getLocalSize
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|2342L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsrc3success
operator|.
name|getLocalSize
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|5345L
argument_list|)
expr_stmt|;
name|URL
name|locPath
init|=
name|getPath
argument_list|(
literal|"/cache/private/blah"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rsrc1success
operator|.
name|getLocalPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|locPath
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsrc2success
operator|.
name|getLocalPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|locPath
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsrc3success
operator|.
name|getLocalPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|locPath
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsrc1success
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ResourceStatusType
operator|.
name|FETCH_SUCCESS
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsrc2pending
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ResourceStatusType
operator|.
name|FETCH_PENDING
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsrc2success
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ResourceStatusType
operator|.
name|FETCH_SUCCESS
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsrc3success
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ResourceStatusType
operator|.
name|FETCH_SUCCESS
argument_list|)
expr_stmt|;
comment|// Four heartbeats with sending:
comment|// 1 - empty
comment|// 2 - resource1 FETCH_SUCCESS
comment|// 3 - resource2 FETCH_PENDING
comment|// 4 - resource2 FETCH_SUCCESS, resource3 FETCH_SUCCESS
name|List
argument_list|<
name|LocalResourceStatus
argument_list|>
name|rsrcs4
init|=
operator|new
name|ArrayList
argument_list|<
name|LocalResourceStatus
argument_list|>
argument_list|()
decl_stmt|;
name|rsrcs4
operator|.
name|add
argument_list|(
name|rsrc2success
argument_list|)
expr_stmt|;
name|rsrcs4
operator|.
name|add
argument_list|(
name|rsrc3success
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|stat
operator|.
name|getResources
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
expr|<
name|LocalResourceStatus
operator|>
name|emptyList
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|rsrc1success
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|rsrc2pending
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rsrcs4
argument_list|)
expr_stmt|;
name|String
name|localPath
init|=
name|Path
operator|.
name|SEPARATOR
operator|+
name|ContainerLocalizer
operator|.
name|USERCACHE
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"user0"
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|ContainerLocalizer
operator|.
name|FILECACHE
decl_stmt|;
comment|// First heartbeat
name|LocalizerHeartbeatResponse
name|response
init|=
name|spyService
operator|.
name|heartbeat
argument_list|(
name|stat
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|LocalizerAction
operator|.
name|LIVE
argument_list|,
name|response
operator|.
name|getLocalizerAction
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getResourceSpecs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|req1
argument_list|,
operator|new
name|LocalResourceRequest
argument_list|(
name|response
operator|.
name|getResourceSpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResource
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|URL
name|localizedPath
init|=
name|response
operator|.
name|getResourceSpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDestinationDirectory
argument_list|()
decl_stmt|;
comment|// Appending to local path unique number(10) generated as a part of
comment|// LocalResourcesTracker
name|assertTrue
argument_list|(
name|localizedPath
operator|.
name|getFile
argument_list|()
operator|.
name|endsWith
argument_list|(
name|localPath
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Second heartbeat
name|response
operator|=
name|spyService
operator|.
name|heartbeat
argument_list|(
name|stat
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LocalizerAction
operator|.
name|LIVE
argument_list|,
name|response
operator|.
name|getLocalizerAction
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getResourceSpecs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|req2
argument_list|,
operator|new
name|LocalResourceRequest
argument_list|(
name|response
operator|.
name|getResourceSpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResource
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|localizedPath
operator|=
name|response
operator|.
name|getResourceSpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDestinationDirectory
argument_list|()
expr_stmt|;
comment|// Resource's destination path should be now inside sub directory 0 as
comment|// LocalCacheDirectoryManager will be used and we have restricted number
comment|// of files per directory to 1.
name|assertTrue
argument_list|(
name|localizedPath
operator|.
name|getFile
argument_list|()
operator|.
name|endsWith
argument_list|(
name|localPath
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"0"
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"11"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Third heartbeat
name|response
operator|=
name|spyService
operator|.
name|heartbeat
argument_list|(
name|stat
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LocalizerAction
operator|.
name|LIVE
argument_list|,
name|response
operator|.
name|getLocalizerAction
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getResourceSpecs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|req3
argument_list|,
operator|new
name|LocalResourceRequest
argument_list|(
name|response
operator|.
name|getResourceSpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResource
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|localizedPath
operator|=
name|response
operator|.
name|getResourceSpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDestinationDirectory
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|localizedPath
operator|.
name|getFile
argument_list|()
operator|.
name|endsWith
argument_list|(
name|localPath
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"1"
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"12"
argument_list|)
argument_list|)
expr_stmt|;
comment|// get shutdown
name|response
operator|=
name|spyService
operator|.
name|heartbeat
argument_list|(
name|stat
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LocalizerAction
operator|.
name|DIE
argument_list|,
name|response
operator|.
name|getLocalizerAction
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// verify container notification
name|ArgumentMatcher
argument_list|<
name|ContainerEvent
argument_list|>
name|matchesContainerLoc
init|=
operator|new
name|ArgumentMatcher
argument_list|<
name|ContainerEvent
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|ContainerEvent
name|evt
init|=
operator|(
name|ContainerEvent
operator|)
name|o
decl_stmt|;
return|return
name|evt
operator|.
name|getType
argument_list|()
operator|==
name|ContainerEventType
operator|.
name|RESOURCE_LOCALIZED
operator|&&
name|c
operator|.
name|getContainerId
argument_list|()
operator|==
name|evt
operator|.
name|getContainerID
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|// total 3 resource localzation calls. one for each resource.
name|verify
argument_list|(
name|containerBus
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
name|matchesContainerLoc
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify deletion of localization token.
name|verify
argument_list|(
name|delService
argument_list|)
operator|.
name|delete
argument_list|(
operator|(
name|String
operator|)
name|isNull
argument_list|()
argument_list|,
name|eq
argument_list|(
name|localizationTokenPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|spyService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
name|delService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testPublicResourceInitializesLocalDir ()
specifier|public
name|void
name|testPublicResourceInitializesLocalDir
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup state to simulate restart NM with existing state meaning no
comment|// directory creation during initialization
name|NMStateStoreService
name|spyStateStore
init|=
name|spy
argument_list|(
name|nmContext
operator|.
name|getNMStateStore
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|spyStateStore
operator|.
name|canRecover
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|NMContext
name|spyContext
init|=
name|spy
argument_list|(
name|nmContext
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|spyContext
operator|.
name|getNMStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|spyStateStore
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|localDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|sDirs
init|=
operator|new
name|String
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|localDirs
operator|.
name|add
argument_list|(
name|lfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
name|i
operator|+
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sDirs
index|[
name|i
index|]
operator|=
name|localDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|sDirs
argument_list|)
expr_stmt|;
name|DrainDispatcher
name|dispatcher
init|=
operator|new
name|DrainDispatcher
argument_list|()
decl_stmt|;
name|EventHandler
argument_list|<
name|ApplicationEvent
argument_list|>
name|applicationBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ApplicationEventType
operator|.
name|class
argument_list|,
name|applicationBus
argument_list|)
expr_stmt|;
name|EventHandler
argument_list|<
name|ContainerEvent
argument_list|>
name|containerBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainerEventType
operator|.
name|class
argument_list|,
name|containerBus
argument_list|)
expr_stmt|;
name|ContainerExecutor
name|exec
init|=
name|mock
argument_list|(
name|ContainerExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|DeletionService
name|delService
init|=
name|mock
argument_list|(
name|DeletionService
operator|.
name|class
argument_list|)
decl_stmt|;
name|LocalDirsHandlerService
name|dirsHandler
init|=
operator|new
name|LocalDirsHandlerService
argument_list|()
decl_stmt|;
name|dirsHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|ResourceLocalizationService
name|rawService
init|=
operator|new
name|ResourceLocalizationService
argument_list|(
name|dispatcher
argument_list|,
name|exec
argument_list|,
name|delService
argument_list|,
name|dirsHandler
argument_list|,
name|spyContext
argument_list|)
decl_stmt|;
name|ResourceLocalizationService
name|spyService
init|=
name|spy
argument_list|(
name|rawService
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|mockServer
argument_list|)
operator|.
name|when
argument_list|(
name|spyService
argument_list|)
operator|.
name|createServer
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|lfs
argument_list|)
operator|.
name|when
argument_list|(
name|spyService
argument_list|)
operator|.
name|getLocalFileContext
argument_list|(
name|isA
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|FsPermission
name|defaultPerm
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
decl_stmt|;
comment|// verify directory is not created at initialization
for|for
control|(
name|Path
name|p
range|:
name|localDirs
control|)
block|{
name|p
operator|=
operator|new
name|Path
argument_list|(
operator|(
operator|new
name|URI
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|publicCache
init|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
name|ContainerLocalizer
operator|.
name|FILECACHE
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|spylfs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|mkdir
argument_list|(
name|eq
argument_list|(
name|publicCache
argument_list|)
argument_list|,
name|eq
argument_list|(
name|defaultPerm
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|user
init|=
literal|"user0"
decl_stmt|;
comment|// init application
specifier|final
name|Application
name|app
init|=
name|mock
argument_list|(
name|Application
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ApplicationId
name|appId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|314159265358979L
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationLocalizationEvent
argument_list|(
name|LocalizationEventType
operator|.
name|INIT_APPLICATION_RESOURCES
argument_list|,
name|app
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// init container.
specifier|final
name|Container
name|c
init|=
name|getMockContainer
argument_list|(
name|appId
argument_list|,
literal|42
argument_list|,
name|user
argument_list|)
decl_stmt|;
comment|// init resources
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SEED: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
comment|// Queue up public resource localization
specifier|final
name|LocalResource
name|pubResource
init|=
name|getPublicMockedResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceRequest
name|pubReq
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|pubResource
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|req
init|=
operator|new
name|HashMap
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|req
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|pubReq
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|LocalResourceRequest
argument_list|>
name|pubRsrcs
init|=
operator|new
name|HashSet
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|pubRsrcs
operator|.
name|add
argument_list|(
name|pubReq
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationRequestEvent
argument_list|(
name|c
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// verify directory creation
for|for
control|(
name|Path
name|p
range|:
name|localDirs
control|)
block|{
name|p
operator|=
operator|new
name|Path
argument_list|(
operator|(
operator|new
name|URI
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|publicCache
init|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
name|ContainerLocalizer
operator|.
name|FILECACHE
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|spylfs
argument_list|)
operator|.
name|mkdir
argument_list|(
name|eq
argument_list|(
name|publicCache
argument_list|)
argument_list|,
name|eq
argument_list|(
name|defaultPerm
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// mocked generics
DECL|method|testFailedPublicResource ()
specifier|public
name|void
name|testFailedPublicResource
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|localDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|sDirs
init|=
operator|new
name|String
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|localDirs
operator|.
name|add
argument_list|(
name|lfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
name|i
operator|+
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sDirs
index|[
name|i
index|]
operator|=
name|localDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|sDirs
argument_list|)
expr_stmt|;
name|DrainDispatcher
name|dispatcher
init|=
operator|new
name|DrainDispatcher
argument_list|()
decl_stmt|;
name|EventHandler
argument_list|<
name|ApplicationEvent
argument_list|>
name|applicationBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ApplicationEventType
operator|.
name|class
argument_list|,
name|applicationBus
argument_list|)
expr_stmt|;
name|EventHandler
argument_list|<
name|ContainerEvent
argument_list|>
name|containerBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainerEventType
operator|.
name|class
argument_list|,
name|containerBus
argument_list|)
expr_stmt|;
name|ContainerExecutor
name|exec
init|=
name|mock
argument_list|(
name|ContainerExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|DeletionService
name|delService
init|=
name|mock
argument_list|(
name|DeletionService
operator|.
name|class
argument_list|)
decl_stmt|;
name|LocalDirsHandlerService
name|dirsHandler
init|=
operator|new
name|LocalDirsHandlerService
argument_list|()
decl_stmt|;
name|dirsHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|ResourceLocalizationService
name|rawService
init|=
operator|new
name|ResourceLocalizationService
argument_list|(
name|dispatcher
argument_list|,
name|exec
argument_list|,
name|delService
argument_list|,
name|dirsHandler
argument_list|,
name|nmContext
argument_list|)
decl_stmt|;
name|ResourceLocalizationService
name|spyService
init|=
name|spy
argument_list|(
name|rawService
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|mockServer
argument_list|)
operator|.
name|when
argument_list|(
name|spyService
argument_list|)
operator|.
name|createServer
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|lfs
argument_list|)
operator|.
name|when
argument_list|(
name|spyService
argument_list|)
operator|.
name|getLocalFileContext
argument_list|(
name|isA
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|String
name|user
init|=
literal|"user0"
decl_stmt|;
comment|// init application
specifier|final
name|Application
name|app
init|=
name|mock
argument_list|(
name|Application
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ApplicationId
name|appId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|314159265358979L
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationLocalizationEvent
argument_list|(
name|LocalizationEventType
operator|.
name|INIT_APPLICATION_RESOURCES
argument_list|,
name|app
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// init container.
specifier|final
name|Container
name|c
init|=
name|getMockContainer
argument_list|(
name|appId
argument_list|,
literal|42
argument_list|,
name|user
argument_list|)
decl_stmt|;
comment|// init resources
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SEED: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
comment|// cause chmod to fail after a delay
specifier|final
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{             }
catch|catch
parameter_list|(
name|BrokenBarrierException
name|e
parameter_list|)
block|{             }
throw|throw
operator|new
name|IOException
argument_list|(
literal|"forced failure"
argument_list|)
throw|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|spylfs
argument_list|)
operator|.
name|setPermission
argument_list|(
name|isA
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|FsPermission
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Queue up two localization requests for the same public resource
specifier|final
name|LocalResource
name|pubResource
init|=
name|getPublicMockedResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceRequest
name|pubReq
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|pubResource
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|req
init|=
operator|new
name|HashMap
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|req
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|pubReq
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|LocalResourceRequest
argument_list|>
name|pubRsrcs
init|=
operator|new
name|HashSet
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|pubRsrcs
operator|.
name|add
argument_list|(
name|pubReq
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationRequestEvent
argument_list|(
name|c
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationRequestEvent
argument_list|(
name|c
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// allow the chmod to fail now that both requests have been queued
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|containerBus
argument_list|,
name|timeout
argument_list|(
literal|5000
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|isA
argument_list|(
name|ContainerResourceFailedEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*    * Test case for handling RejectedExecutionException and IOException which can    * be thrown when adding public resources to the pending queue.    * RejectedExecutionException can be thrown either due to the incoming queue    * being full or if the ExecutorCompletionService threadpool is shutdown.    * Since it's hard to simulate the queue being full, this test just shuts down    * the threadpool and makes sure the exception is handled. If anything is    * messed up the async dispatcher thread will cause a system exit causing the    * test to fail.    */
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testPublicResourceAddResourceExceptions ()
specifier|public
name|void
name|testPublicResourceAddResourceExceptions
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|localDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|sDirs
init|=
operator|new
name|String
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|localDirs
operator|.
name|add
argument_list|(
name|lfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
name|i
operator|+
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sDirs
index|[
name|i
index|]
operator|=
name|localDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|sDirs
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|Dispatcher
operator|.
name|DISPATCHER_EXIT_ON_ERROR_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DrainDispatcher
name|dispatcher
init|=
operator|new
name|DrainDispatcher
argument_list|()
decl_stmt|;
name|EventHandler
argument_list|<
name|ApplicationEvent
argument_list|>
name|applicationBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ApplicationEventType
operator|.
name|class
argument_list|,
name|applicationBus
argument_list|)
expr_stmt|;
name|EventHandler
argument_list|<
name|ContainerEvent
argument_list|>
name|containerBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainerEventType
operator|.
name|class
argument_list|,
name|containerBus
argument_list|)
expr_stmt|;
name|ContainerExecutor
name|exec
init|=
name|mock
argument_list|(
name|ContainerExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|DeletionService
name|delService
init|=
name|mock
argument_list|(
name|DeletionService
operator|.
name|class
argument_list|)
decl_stmt|;
name|LocalDirsHandlerService
name|dirsHandler
init|=
operator|new
name|LocalDirsHandlerService
argument_list|()
decl_stmt|;
name|LocalDirsHandlerService
name|dirsHandlerSpy
init|=
name|spy
argument_list|(
name|dirsHandler
argument_list|)
decl_stmt|;
name|dirsHandlerSpy
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|ResourceLocalizationService
name|rawService
init|=
operator|new
name|ResourceLocalizationService
argument_list|(
name|dispatcher
argument_list|,
name|exec
argument_list|,
name|delService
argument_list|,
name|dirsHandlerSpy
argument_list|,
name|nmContext
argument_list|)
decl_stmt|;
name|ResourceLocalizationService
name|spyService
init|=
name|spy
argument_list|(
name|rawService
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|mockServer
argument_list|)
operator|.
name|when
argument_list|(
name|spyService
argument_list|)
operator|.
name|createServer
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|lfs
argument_list|)
operator|.
name|when
argument_list|(
name|spyService
argument_list|)
operator|.
name|getLocalFileContext
argument_list|(
name|isA
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|String
name|user
init|=
literal|"user0"
decl_stmt|;
comment|// init application
specifier|final
name|Application
name|app
init|=
name|mock
argument_list|(
name|Application
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ApplicationId
name|appId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|314159265358979L
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationLocalizationEvent
argument_list|(
name|LocalizationEventType
operator|.
name|INIT_APPLICATION_RESOURCES
argument_list|,
name|app
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// init resources
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|r
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
comment|// Queue localization request for the public resource
specifier|final
name|LocalResource
name|pubResource
init|=
name|getPublicMockedResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceRequest
name|pubReq
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|pubResource
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|req
init|=
operator|new
name|HashMap
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|req
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|pubReq
argument_list|)
argument_list|)
expr_stmt|;
comment|// init container.
specifier|final
name|Container
name|c
init|=
name|getMockContainer
argument_list|(
name|appId
argument_list|,
literal|42
argument_list|,
name|user
argument_list|)
decl_stmt|;
comment|// first test ioexception
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|dirsHandlerSpy
argument_list|)
operator|.
name|getLocalPathForWrite
argument_list|(
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
comment|// send request
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationRequestEvent
argument_list|(
name|c
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|LocalResourcesTracker
name|tracker
init|=
name|spyService
operator|.
name|getLocalResourcesTracker
argument_list|(
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|user
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|tracker
operator|.
name|getLocalizedResource
argument_list|(
name|pubReq
argument_list|)
argument_list|)
expr_stmt|;
comment|// test IllegalArgumentException
name|String
name|name
init|=
name|Long
operator|.
name|toHexString
argument_list|(
name|r
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
name|getPath
argument_list|(
literal|"/local/PRIVATE/"
operator|+
name|name
operator|+
literal|"/"
argument_list|)
decl_stmt|;
specifier|final
name|LocalResource
name|rsrc
init|=
name|BuilderUtils
operator|.
name|newLocalResource
argument_list|(
name|url
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
literal|1024
argument_list|)
operator|+
literal|1024L
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
literal|1024
argument_list|)
operator|+
literal|2048L
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceRequest
name|pubReq1
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|rsrc
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|req1
init|=
operator|new
name|HashMap
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|req1
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|pubReq1
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doCallRealMethod
argument_list|()
operator|.
name|when
argument_list|(
name|dirsHandlerSpy
argument_list|)
operator|.
name|getLocalPathForWrite
argument_list|(
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
comment|// send request
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationRequestEvent
argument_list|(
name|c
argument_list|,
name|req1
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|tracker
operator|=
name|spyService
operator|.
name|getLocalResourcesTracker
argument_list|(
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|user
argument_list|,
name|appId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|tracker
operator|.
name|getLocalizedResource
argument_list|(
name|pubReq
argument_list|)
argument_list|)
expr_stmt|;
comment|// test RejectedExecutionException by shutting down the thread pool
name|PublicLocalizer
name|publicLocalizer
init|=
name|spyService
operator|.
name|getPublicLocalizer
argument_list|()
decl_stmt|;
name|publicLocalizer
operator|.
name|threadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationRequestEvent
argument_list|(
name|c
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|tracker
operator|=
name|spyService
operator|.
name|getLocalResourcesTracker
argument_list|(
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|user
argument_list|,
name|appId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|tracker
operator|.
name|getLocalizedResource
argument_list|(
name|pubReq
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// if we call stop with events in the queue, an InterruptedException gets
comment|// thrown resulting in the dispatcher thread causing a system exit
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testParallelDownloadAttemptsForPrivateResource ()
specifier|public
name|void
name|testParallelDownloadAttemptsForPrivateResource
parameter_list|()
throws|throws
name|Exception
block|{
name|DrainDispatcher
name|dispatcher1
init|=
literal|null
decl_stmt|;
try|try
block|{
name|dispatcher1
operator|=
operator|new
name|DrainDispatcher
argument_list|()
expr_stmt|;
name|String
name|user
init|=
literal|"testuser"
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// creating one local directory
name|List
argument_list|<
name|Path
argument_list|>
name|localDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|sDirs
init|=
operator|new
name|String
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|localDirs
operator|.
name|add
argument_list|(
name|lfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
name|i
operator|+
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sDirs
index|[
name|i
index|]
operator|=
name|localDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|sDirs
argument_list|)
expr_stmt|;
name|LocalDirsHandlerService
name|localDirHandler
init|=
operator|new
name|LocalDirsHandlerService
argument_list|()
decl_stmt|;
name|localDirHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Registering event handlers
name|EventHandler
argument_list|<
name|ApplicationEvent
argument_list|>
name|applicationBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher1
operator|.
name|register
argument_list|(
name|ApplicationEventType
operator|.
name|class
argument_list|,
name|applicationBus
argument_list|)
expr_stmt|;
name|EventHandler
argument_list|<
name|ContainerEvent
argument_list|>
name|containerBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher1
operator|.
name|register
argument_list|(
name|ContainerEventType
operator|.
name|class
argument_list|,
name|containerBus
argument_list|)
expr_stmt|;
name|ContainerExecutor
name|exec
init|=
name|mock
argument_list|(
name|ContainerExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|DeletionService
name|delService
init|=
name|mock
argument_list|(
name|DeletionService
operator|.
name|class
argument_list|)
decl_stmt|;
name|LocalDirsHandlerService
name|dirsHandler
init|=
operator|new
name|LocalDirsHandlerService
argument_list|()
decl_stmt|;
comment|// initializing directory handler.
name|dirsHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher1
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher1
operator|.
name|start
argument_list|()
expr_stmt|;
name|ResourceLocalizationService
name|rls
init|=
operator|new
name|ResourceLocalizationService
argument_list|(
name|dispatcher1
argument_list|,
name|exec
argument_list|,
name|delService
argument_list|,
name|localDirHandler
argument_list|,
name|nmContext
argument_list|)
decl_stmt|;
name|dispatcher1
operator|.
name|register
argument_list|(
name|LocalizationEventType
operator|.
name|class
argument_list|,
name|rls
argument_list|)
expr_stmt|;
name|rls
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rls
operator|.
name|handle
argument_list|(
name|createApplicationLocalizationEvent
argument_list|(
name|user
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|LocalResourceRequest
name|req
init|=
operator|new
name|LocalResourceRequest
argument_list|(
operator|new
name|Path
argument_list|(
literal|"file:///tmp"
argument_list|)
argument_list|,
literal|123L
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
literal|""
argument_list|)
decl_stmt|;
comment|// We need to pre-populate the LocalizerRunner as the
comment|// Resource Localization Service code internally starts them which
comment|// definitely we don't want.
comment|// creating new containers and populating corresponding localizer runners
comment|// Container - 1
name|ContainerImpl
name|container1
init|=
name|createMockContainer
argument_list|(
name|user
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|localizerId1
init|=
name|container1
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|rls
operator|.
name|getPrivateLocalizers
argument_list|()
operator|.
name|put
argument_list|(
name|localizerId1
argument_list|,
name|rls
operator|.
expr|new
name|LocalizerRunner
argument_list|(
operator|new
name|LocalizerContext
argument_list|(
name|user
argument_list|,
name|container1
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
name|localizerId1
argument_list|)
argument_list|)
expr_stmt|;
name|LocalizerRunner
name|localizerRunner1
init|=
name|rls
operator|.
name|getLocalizerRunner
argument_list|(
name|localizerId1
argument_list|)
decl_stmt|;
name|dispatcher1
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|createContainerLocalizationEvent
argument_list|(
name|container1
argument_list|,
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waitForPrivateDownloadToStart
argument_list|(
name|rls
argument_list|,
name|localizerId1
argument_list|,
literal|1
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
comment|// Container - 2 now makes the request.
name|ContainerImpl
name|container2
init|=
name|createMockContainer
argument_list|(
name|user
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|String
name|localizerId2
init|=
name|container2
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|rls
operator|.
name|getPrivateLocalizers
argument_list|()
operator|.
name|put
argument_list|(
name|localizerId2
argument_list|,
name|rls
operator|.
expr|new
name|LocalizerRunner
argument_list|(
operator|new
name|LocalizerContext
argument_list|(
name|user
argument_list|,
name|container2
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
name|localizerId2
argument_list|)
argument_list|)
expr_stmt|;
name|LocalizerRunner
name|localizerRunner2
init|=
name|rls
operator|.
name|getLocalizerRunner
argument_list|(
name|localizerId2
argument_list|)
decl_stmt|;
name|dispatcher1
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|createContainerLocalizationEvent
argument_list|(
name|container2
argument_list|,
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waitForPrivateDownloadToStart
argument_list|(
name|rls
argument_list|,
name|localizerId2
argument_list|,
literal|1
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
comment|// Retrieving localized resource.
name|LocalResourcesTracker
name|tracker
init|=
name|rls
operator|.
name|getLocalResourcesTracker
argument_list|(
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|user
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|LocalizedResource
name|lr
init|=
name|tracker
operator|.
name|getLocalizedResource
argument_list|(
name|req
argument_list|)
decl_stmt|;
comment|// Resource would now have moved into DOWNLOADING state
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ResourceState
operator|.
name|DOWNLOADING
argument_list|,
name|lr
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Resource should have one permit
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|lr
operator|.
name|sem
operator|.
name|availablePermits
argument_list|()
argument_list|)
expr_stmt|;
comment|// Resource Localization Service receives first heart beat from
comment|// ContainerLocalizer for container1
name|LocalizerHeartbeatResponse
name|response1
init|=
name|rls
operator|.
name|heartbeat
argument_list|(
name|createLocalizerStatus
argument_list|(
name|localizerId1
argument_list|)
argument_list|)
decl_stmt|;
comment|// Resource must have been added to scheduled map
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|localizerRunner1
operator|.
name|scheduled
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Checking resource in the response and also available permits for it.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|req
operator|.
name|getResource
argument_list|()
argument_list|,
name|response1
operator|.
name|getResourceSpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResource
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|lr
operator|.
name|sem
operator|.
name|availablePermits
argument_list|()
argument_list|)
expr_stmt|;
comment|// Resource Localization Service now receives first heart beat from
comment|// ContainerLocalizer for container2
name|LocalizerHeartbeatResponse
name|response2
init|=
name|rls
operator|.
name|heartbeat
argument_list|(
name|createLocalizerStatus
argument_list|(
name|localizerId2
argument_list|)
argument_list|)
decl_stmt|;
comment|// Resource must not have been added to scheduled map
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|localizerRunner2
operator|.
name|scheduled
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// No resource is returned in response
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response2
operator|.
name|getResourceSpecs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// ContainerLocalizer - 1 now sends failed resource heartbeat.
name|rls
operator|.
name|heartbeat
argument_list|(
name|createLocalizerStatusForFailedResource
argument_list|(
name|localizerId1
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
comment|// Resource Localization should fail and state is modified accordingly.
comment|// Also Local should be release on the LocalizedResource.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waitForResourceState
argument_list|(
name|lr
argument_list|,
name|rls
argument_list|,
name|req
argument_list|,
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|user
argument_list|,
name|appId
argument_list|,
name|ResourceState
operator|.
name|FAILED
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lr
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|ResourceState
operator|.
name|FAILED
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|localizerRunner1
operator|.
name|scheduled
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now Container-2 once again sends heart beat to resource localization
comment|// service
comment|// Now container-2 again try to download the resource it should still
comment|// not get the resource as the resource is now not in DOWNLOADING state.
name|response2
operator|=
name|rls
operator|.
name|heartbeat
argument_list|(
name|createLocalizerStatus
argument_list|(
name|localizerId2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Resource must not have been added to scheduled map.
comment|// Also as the resource has failed download it will be removed from
comment|// pending list.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|localizerRunner2
operator|.
name|scheduled
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|localizerRunner2
operator|.
name|pending
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response2
operator|.
name|getResourceSpecs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|dispatcher1
operator|!=
literal|null
condition|)
block|{
name|dispatcher1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testLocalResourcePath ()
specifier|public
name|void
name|testLocalResourcePath
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test the local path where application and user cache files will be
comment|// localized.
name|DrainDispatcher
name|dispatcher1
init|=
literal|null
decl_stmt|;
try|try
block|{
name|dispatcher1
operator|=
operator|new
name|DrainDispatcher
argument_list|()
expr_stmt|;
name|String
name|user
init|=
literal|"testuser"
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// creating one local directory
name|List
argument_list|<
name|Path
argument_list|>
name|localDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|sDirs
init|=
operator|new
name|String
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|localDirs
operator|.
name|add
argument_list|(
name|lfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
name|i
operator|+
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sDirs
index|[
name|i
index|]
operator|=
name|localDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|sDirs
argument_list|)
expr_stmt|;
name|LocalDirsHandlerService
name|localDirHandler
init|=
operator|new
name|LocalDirsHandlerService
argument_list|()
decl_stmt|;
name|localDirHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Registering event handlers
name|EventHandler
argument_list|<
name|ApplicationEvent
argument_list|>
name|applicationBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher1
operator|.
name|register
argument_list|(
name|ApplicationEventType
operator|.
name|class
argument_list|,
name|applicationBus
argument_list|)
expr_stmt|;
name|EventHandler
argument_list|<
name|ContainerEvent
argument_list|>
name|containerBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher1
operator|.
name|register
argument_list|(
name|ContainerEventType
operator|.
name|class
argument_list|,
name|containerBus
argument_list|)
expr_stmt|;
name|ContainerExecutor
name|exec
init|=
name|mock
argument_list|(
name|ContainerExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|DeletionService
name|delService
init|=
name|mock
argument_list|(
name|DeletionService
operator|.
name|class
argument_list|)
decl_stmt|;
name|LocalDirsHandlerService
name|dirsHandler
init|=
operator|new
name|LocalDirsHandlerService
argument_list|()
decl_stmt|;
comment|// initializing directory handler.
name|dirsHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher1
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher1
operator|.
name|start
argument_list|()
expr_stmt|;
name|ResourceLocalizationService
name|rls
init|=
operator|new
name|ResourceLocalizationService
argument_list|(
name|dispatcher1
argument_list|,
name|exec
argument_list|,
name|delService
argument_list|,
name|localDirHandler
argument_list|,
name|nmContext
argument_list|)
decl_stmt|;
name|dispatcher1
operator|.
name|register
argument_list|(
name|LocalizationEventType
operator|.
name|class
argument_list|,
name|rls
argument_list|)
expr_stmt|;
name|rls
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rls
operator|.
name|handle
argument_list|(
name|createApplicationLocalizationEvent
argument_list|(
name|user
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
comment|// We need to pre-populate the LocalizerRunner as the
comment|// Resource Localization Service code internally starts them which
comment|// definitely we don't want.
comment|// creating new container and populating corresponding localizer runner
comment|// Container - 1
name|Container
name|container1
init|=
name|createMockContainer
argument_list|(
name|user
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|localizerId1
init|=
name|container1
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|rls
operator|.
name|getPrivateLocalizers
argument_list|()
operator|.
name|put
argument_list|(
name|localizerId1
argument_list|,
name|rls
operator|.
expr|new
name|LocalizerRunner
argument_list|(
operator|new
name|LocalizerContext
argument_list|(
name|user
argument_list|,
name|container1
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
name|localizerId1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Creating two requests for container
comment|// 1) Private resource
comment|// 2) Application resource
name|LocalResourceRequest
name|reqPriv
init|=
operator|new
name|LocalResourceRequest
argument_list|(
operator|new
name|Path
argument_list|(
literal|"file:///tmp1"
argument_list|)
argument_list|,
literal|123L
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LocalResourceRequest
argument_list|>
name|privList
init|=
operator|new
name|ArrayList
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|privList
operator|.
name|add
argument_list|(
name|reqPriv
argument_list|)
expr_stmt|;
name|LocalResourceRequest
name|reqApp
init|=
operator|new
name|LocalResourceRequest
argument_list|(
operator|new
name|Path
argument_list|(
literal|"file:///tmp2"
argument_list|)
argument_list|,
literal|123L
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LocalResourceRequest
argument_list|>
name|appList
init|=
operator|new
name|ArrayList
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|appList
operator|.
name|add
argument_list|(
name|reqApp
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|rsrcs
init|=
operator|new
name|HashMap
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|rsrcs
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|,
name|appList
argument_list|)
expr_stmt|;
name|rsrcs
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|privList
argument_list|)
expr_stmt|;
name|dispatcher1
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationRequestEvent
argument_list|(
name|container1
argument_list|,
name|rsrcs
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now waiting for resource download to start. Here actual will not start
comment|// Only the resources will be populated into pending list.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waitForPrivateDownloadToStart
argument_list|(
name|rls
argument_list|,
name|localizerId1
argument_list|,
literal|2
argument_list|,
literal|500
argument_list|)
argument_list|)
expr_stmt|;
comment|// Validating user and application cache paths
name|String
name|userCachePath
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|localDirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getRawPath
argument_list|()
argument_list|,
name|ContainerLocalizer
operator|.
name|USERCACHE
argument_list|,
name|user
argument_list|,
name|ContainerLocalizer
operator|.
name|FILECACHE
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|userAppCachePath
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|localDirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getRawPath
argument_list|()
argument_list|,
name|ContainerLocalizer
operator|.
name|USERCACHE
argument_list|,
name|user
argument_list|,
name|ContainerLocalizer
operator|.
name|APPCACHE
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|,
name|ContainerLocalizer
operator|.
name|FILECACHE
argument_list|)
argument_list|)
decl_stmt|;
comment|// Now the Application and private resources may come in any order
comment|// for download.
comment|// For User cahce :
comment|// returned destinationPath = user cache path + random number
comment|// For App cache :
comment|// returned destinationPath = user app cache path + random number
name|int
name|returnedResources
init|=
literal|0
decl_stmt|;
name|boolean
name|appRsrc
init|=
literal|false
decl_stmt|,
name|privRsrc
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|returnedResources
operator|<
literal|2
condition|)
block|{
name|LocalizerHeartbeatResponse
name|response
init|=
name|rls
operator|.
name|heartbeat
argument_list|(
name|createLocalizerStatus
argument_list|(
name|localizerId1
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|ResourceLocalizationSpec
name|resourceSpec
range|:
name|response
operator|.
name|getResourceSpecs
argument_list|()
control|)
block|{
name|returnedResources
operator|++
expr_stmt|;
name|Path
name|destinationDirectory
init|=
operator|new
name|Path
argument_list|(
name|resourceSpec
operator|.
name|getDestinationDirectory
argument_list|()
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceSpec
operator|.
name|getResource
argument_list|()
operator|.
name|getVisibility
argument_list|()
operator|==
name|LocalResourceVisibility
operator|.
name|APPLICATION
condition|)
block|{
name|appRsrc
operator|=
literal|true
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|userAppCachePath
argument_list|,
name|destinationDirectory
operator|.
name|getParent
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resourceSpec
operator|.
name|getResource
argument_list|()
operator|.
name|getVisibility
argument_list|()
operator|==
name|LocalResourceVisibility
operator|.
name|PRIVATE
condition|)
block|{
name|privRsrc
operator|=
literal|true
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|userCachePath
argument_list|,
name|destinationDirectory
operator|.
name|getParent
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unexpected resource recevied."
argument_list|)
throw|;
block|}
block|}
block|}
comment|// We should receive both the resources (Application and Private)
name|Assert
operator|.
name|assertTrue
argument_list|(
name|appRsrc
operator|&&
name|privRsrc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|dispatcher1
operator|!=
literal|null
condition|)
block|{
name|dispatcher1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|createLocalizerStatusForFailedResource ( String localizerId, LocalResourceRequest req)
specifier|private
name|LocalizerStatus
name|createLocalizerStatusForFailedResource
parameter_list|(
name|String
name|localizerId
parameter_list|,
name|LocalResourceRequest
name|req
parameter_list|)
block|{
name|LocalizerStatus
name|status
init|=
name|createLocalizerStatus
argument_list|(
name|localizerId
argument_list|)
decl_stmt|;
name|LocalResourceStatus
name|resourceStatus
init|=
operator|new
name|LocalResourceStatusPBImpl
argument_list|()
decl_stmt|;
name|resourceStatus
operator|.
name|setException
argument_list|(
name|SerializedException
operator|.
name|newInstance
argument_list|(
operator|new
name|YarnException
argument_list|(
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|resourceStatus
operator|.
name|setStatus
argument_list|(
name|ResourceStatusType
operator|.
name|FETCH_FAILURE
argument_list|)
expr_stmt|;
name|resourceStatus
operator|.
name|setResource
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|status
operator|.
name|addResourceStatus
argument_list|(
name|resourceStatus
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
DECL|method|createLocalizerStatus (String localizerId1)
specifier|private
name|LocalizerStatus
name|createLocalizerStatus
parameter_list|(
name|String
name|localizerId1
parameter_list|)
block|{
name|LocalizerStatus
name|status
init|=
operator|new
name|LocalizerStatusPBImpl
argument_list|()
decl_stmt|;
name|status
operator|.
name|setLocalizerId
argument_list|(
name|localizerId1
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
DECL|method|createApplicationLocalizationEvent (String user, ApplicationId appId)
specifier|private
name|LocalizationEvent
name|createApplicationLocalizationEvent
parameter_list|(
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|)
block|{
name|Application
name|app
init|=
name|mock
argument_list|(
name|Application
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
return|return
operator|new
name|ApplicationLocalizationEvent
argument_list|(
name|LocalizationEventType
operator|.
name|INIT_APPLICATION_RESOURCES
argument_list|,
name|app
argument_list|)
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testParallelDownloadAttemptsForPublicResource ()
specifier|public
name|void
name|testParallelDownloadAttemptsForPublicResource
parameter_list|()
throws|throws
name|Exception
block|{
name|DrainDispatcher
name|dispatcher1
init|=
literal|null
decl_stmt|;
name|String
name|user
init|=
literal|"testuser"
decl_stmt|;
try|try
block|{
comment|// creating one local directory
name|List
argument_list|<
name|Path
argument_list|>
name|localDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|sDirs
init|=
operator|new
name|String
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|localDirs
operator|.
name|add
argument_list|(
name|lfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
name|i
operator|+
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sDirs
index|[
name|i
index|]
operator|=
name|localDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|sDirs
argument_list|)
expr_stmt|;
comment|// Registering event handlers
name|EventHandler
argument_list|<
name|ApplicationEvent
argument_list|>
name|applicationBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher1
operator|=
operator|new
name|DrainDispatcher
argument_list|()
expr_stmt|;
name|dispatcher1
operator|.
name|register
argument_list|(
name|ApplicationEventType
operator|.
name|class
argument_list|,
name|applicationBus
argument_list|)
expr_stmt|;
name|EventHandler
argument_list|<
name|ContainerEvent
argument_list|>
name|containerBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher1
operator|.
name|register
argument_list|(
name|ContainerEventType
operator|.
name|class
argument_list|,
name|containerBus
argument_list|)
expr_stmt|;
name|ContainerExecutor
name|exec
init|=
name|mock
argument_list|(
name|ContainerExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|DeletionService
name|delService
init|=
name|mock
argument_list|(
name|DeletionService
operator|.
name|class
argument_list|)
decl_stmt|;
name|LocalDirsHandlerService
name|dirsHandler
init|=
operator|new
name|LocalDirsHandlerService
argument_list|()
decl_stmt|;
comment|// initializing directory handler.
name|dirsHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher1
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher1
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Creating and initializing ResourceLocalizationService but not starting
comment|// it as otherwise it will remove requests from pending queue.
name|ResourceLocalizationService
name|rawService
init|=
operator|new
name|ResourceLocalizationService
argument_list|(
name|dispatcher1
argument_list|,
name|exec
argument_list|,
name|delService
argument_list|,
name|dirsHandler
argument_list|,
name|nmContext
argument_list|)
decl_stmt|;
name|ResourceLocalizationService
name|spyService
init|=
name|spy
argument_list|(
name|rawService
argument_list|)
decl_stmt|;
name|dispatcher1
operator|.
name|register
argument_list|(
name|LocalizationEventType
operator|.
name|class
argument_list|,
name|spyService
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Initially pending map should be empty for public localizer
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|spyService
operator|.
name|getPublicLocalizer
argument_list|()
operator|.
name|pending
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LocalResourceRequest
name|req
init|=
operator|new
name|LocalResourceRequest
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
argument_list|,
literal|123L
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
literal|""
argument_list|)
decl_stmt|;
comment|// Initializing application
name|ApplicationImpl
name|app
init|=
name|mock
argument_list|(
name|ApplicationImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|dispatcher1
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationLocalizationEvent
argument_list|(
name|LocalizationEventType
operator|.
name|INIT_APPLICATION_RESOURCES
argument_list|,
name|app
argument_list|)
argument_list|)
expr_stmt|;
comment|// Container - 1
comment|// container requesting the resource
name|ContainerImpl
name|container1
init|=
name|createMockContainer
argument_list|(
name|user
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|dispatcher1
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|createContainerLocalizationEvent
argument_list|(
name|container1
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
comment|// Waiting for resource to change into DOWNLOADING state.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waitForResourceState
argument_list|(
literal|null
argument_list|,
name|spyService
argument_list|,
name|req
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|user
argument_list|,
literal|null
argument_list|,
name|ResourceState
operator|.
name|DOWNLOADING
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
comment|// Waiting for download to start.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waitForPublicDownloadToStart
argument_list|(
name|spyService
argument_list|,
literal|1
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|LocalizedResource
name|lr
init|=
name|getLocalizedResource
argument_list|(
name|spyService
argument_list|,
name|req
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|user
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Resource would now have moved into DOWNLOADING state
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ResourceState
operator|.
name|DOWNLOADING
argument_list|,
name|lr
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// pending should have this resource now.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|spyService
operator|.
name|getPublicLocalizer
argument_list|()
operator|.
name|pending
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now resource should have 0 permit.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|lr
operator|.
name|sem
operator|.
name|availablePermits
argument_list|()
argument_list|)
expr_stmt|;
comment|// Container - 2
comment|// Container requesting the same resource.
name|ContainerImpl
name|container2
init|=
name|createMockContainer
argument_list|(
name|user
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|dispatcher1
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|createContainerLocalizationEvent
argument_list|(
name|container2
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
comment|// Waiting for download to start. This should return false as new download
comment|// will not start
name|Assert
operator|.
name|assertFalse
argument_list|(
name|waitForPublicDownloadToStart
argument_list|(
name|spyService
argument_list|,
literal|2
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now Failing the resource download. As a part of it
comment|// resource state is changed and then lock is released.
name|ResourceFailedLocalizationEvent
name|locFailedEvent
init|=
operator|new
name|ResourceFailedLocalizationEvent
argument_list|(
name|req
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"test"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|spyService
operator|.
name|getLocalResourcesTracker
argument_list|(
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|user
argument_list|,
literal|null
argument_list|)
operator|.
name|handle
argument_list|(
name|locFailedEvent
argument_list|)
expr_stmt|;
comment|// Waiting for resource to change into FAILED state.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waitForResourceState
argument_list|(
name|lr
argument_list|,
name|spyService
argument_list|,
name|req
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|user
argument_list|,
literal|null
argument_list|,
name|ResourceState
operator|.
name|FAILED
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
comment|// releasing lock as a part of download failed process.
name|lr
operator|.
name|unlock
argument_list|()
expr_stmt|;
comment|// removing pending download request.
name|spyService
operator|.
name|getPublicLocalizer
argument_list|()
operator|.
name|pending
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Now I need to simulate a race condition wherein Event is added to
comment|// dispatcher before resource state changes to either FAILED or LOCALIZED
comment|// Hence sending event directly to dispatcher.
name|LocalizerResourceRequestEvent
name|localizerEvent
init|=
operator|new
name|LocalizerResourceRequestEvent
argument_list|(
name|lr
argument_list|,
literal|null
argument_list|,
name|mock
argument_list|(
name|LocalizerContext
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|dispatcher1
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|localizerEvent
argument_list|)
expr_stmt|;
comment|// Waiting for download to start. This should return false as new download
comment|// will not start
name|Assert
operator|.
name|assertFalse
argument_list|(
name|waitForPublicDownloadToStart
argument_list|(
name|spyService
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// Checking available permits now.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|lr
operator|.
name|sem
operator|.
name|availablePermits
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|dispatcher1
operator|!=
literal|null
condition|)
block|{
name|dispatcher1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|waitForPrivateDownloadToStart ( ResourceLocalizationService service, String localizerId, int size, int maxWaitTime)
specifier|private
name|boolean
name|waitForPrivateDownloadToStart
parameter_list|(
name|ResourceLocalizationService
name|service
parameter_list|,
name|String
name|localizerId
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|maxWaitTime
parameter_list|)
block|{
name|List
argument_list|<
name|LocalizerResourceRequestEvent
argument_list|>
name|pending
init|=
literal|null
decl_stmt|;
comment|// Waiting for localizer to be created.
do|do
block|{
if|if
condition|(
name|service
operator|.
name|getPrivateLocalizers
argument_list|()
operator|.
name|get
argument_list|(
name|localizerId
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|pending
operator|=
name|service
operator|.
name|getPrivateLocalizers
argument_list|()
operator|.
name|get
argument_list|(
name|localizerId
argument_list|)
operator|.
name|pending
expr_stmt|;
block|}
if|if
condition|(
name|pending
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|maxWaitTime
operator|-=
literal|20
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|20
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{         }
block|}
else|else
block|{
break|break;
block|}
block|}
do|while
condition|(
name|maxWaitTime
operator|>
literal|0
condition|)
do|;
if|if
condition|(
name|pending
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
do|do
block|{
if|if
condition|(
name|pending
operator|.
name|size
argument_list|()
operator|==
name|size
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
try|try
block|{
name|maxWaitTime
operator|-=
literal|20
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|20
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{         }
block|}
block|}
do|while
condition|(
name|maxWaitTime
operator|>
literal|0
condition|)
do|;
return|return
name|pending
operator|.
name|size
argument_list|()
operator|==
name|size
return|;
block|}
DECL|method|waitForPublicDownloadToStart ( ResourceLocalizationService service, int size, int maxWaitTime)
specifier|private
name|boolean
name|waitForPublicDownloadToStart
parameter_list|(
name|ResourceLocalizationService
name|service
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|maxWaitTime
parameter_list|)
block|{
name|Map
argument_list|<
name|Future
argument_list|<
name|Path
argument_list|>
argument_list|,
name|LocalizerResourceRequestEvent
argument_list|>
name|pending
init|=
literal|null
decl_stmt|;
comment|// Waiting for localizer to be created.
do|do
block|{
if|if
condition|(
name|service
operator|.
name|getPublicLocalizer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pending
operator|=
name|service
operator|.
name|getPublicLocalizer
argument_list|()
operator|.
name|pending
expr_stmt|;
block|}
if|if
condition|(
name|pending
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|maxWaitTime
operator|-=
literal|20
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|20
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{         }
block|}
else|else
block|{
break|break;
block|}
block|}
do|while
condition|(
name|maxWaitTime
operator|>
literal|0
condition|)
do|;
if|if
condition|(
name|pending
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
do|do
block|{
if|if
condition|(
name|pending
operator|.
name|size
argument_list|()
operator|==
name|size
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
try|try
block|{
name|maxWaitTime
operator|-=
literal|20
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|20
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{         }
block|}
block|}
do|while
condition|(
name|maxWaitTime
operator|>
literal|0
condition|)
do|;
return|return
name|pending
operator|.
name|size
argument_list|()
operator|==
name|size
return|;
block|}
DECL|method|getLocalizedResource ( ResourceLocalizationService service, LocalResourceRequest req, LocalResourceVisibility vis, String user, ApplicationId appId)
specifier|private
name|LocalizedResource
name|getLocalizedResource
parameter_list|(
name|ResourceLocalizationService
name|service
parameter_list|,
name|LocalResourceRequest
name|req
parameter_list|,
name|LocalResourceVisibility
name|vis
parameter_list|,
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|)
block|{
return|return
name|service
operator|.
name|getLocalResourcesTracker
argument_list|(
name|vis
argument_list|,
name|user
argument_list|,
name|appId
argument_list|)
operator|.
name|getLocalizedResource
argument_list|(
name|req
argument_list|)
return|;
block|}
DECL|method|waitForResourceState (LocalizedResource lr, ResourceLocalizationService service, LocalResourceRequest req, LocalResourceVisibility vis, String user, ApplicationId appId, ResourceState resourceState, long maxWaitTime)
specifier|private
name|boolean
name|waitForResourceState
parameter_list|(
name|LocalizedResource
name|lr
parameter_list|,
name|ResourceLocalizationService
name|service
parameter_list|,
name|LocalResourceRequest
name|req
parameter_list|,
name|LocalResourceVisibility
name|vis
parameter_list|,
name|String
name|user
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|ResourceState
name|resourceState
parameter_list|,
name|long
name|maxWaitTime
parameter_list|)
block|{
name|LocalResourcesTracker
name|tracker
init|=
literal|null
decl_stmt|;
comment|// checking tracker is created
do|do
block|{
if|if
condition|(
name|tracker
operator|==
literal|null
condition|)
block|{
name|tracker
operator|=
name|service
operator|.
name|getLocalResourcesTracker
argument_list|(
name|vis
argument_list|,
name|user
argument_list|,
name|appId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tracker
operator|!=
literal|null
operator|&&
name|lr
operator|==
literal|null
condition|)
block|{
name|lr
operator|=
name|tracker
operator|.
name|getLocalizedResource
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lr
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
else|else
block|{
try|try
block|{
name|maxWaitTime
operator|-=
literal|20
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|20
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{         }
block|}
block|}
do|while
condition|(
name|maxWaitTime
operator|>
literal|0
condition|)
do|;
comment|// this will wait till resource state is changed to (resourceState).
if|if
condition|(
name|lr
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
do|do
block|{
if|if
condition|(
operator|!
name|lr
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|resourceState
argument_list|)
condition|)
block|{
try|try
block|{
name|maxWaitTime
operator|-=
literal|50
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{         }
block|}
else|else
block|{
break|break;
block|}
block|}
do|while
condition|(
name|maxWaitTime
operator|>
literal|0
condition|)
do|;
return|return
name|lr
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|resourceState
argument_list|)
return|;
block|}
DECL|method|createContainerLocalizationEvent ( ContainerImpl container, LocalResourceVisibility vis, LocalResourceRequest req)
specifier|private
name|ContainerLocalizationRequestEvent
name|createContainerLocalizationEvent
parameter_list|(
name|ContainerImpl
name|container
parameter_list|,
name|LocalResourceVisibility
name|vis
parameter_list|,
name|LocalResourceRequest
name|req
parameter_list|)
block|{
name|Map
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|reqs
init|=
operator|new
name|HashMap
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LocalResourceRequest
argument_list|>
name|resourceList
init|=
operator|new
name|ArrayList
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|resourceList
operator|.
name|add
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|reqs
operator|.
name|put
argument_list|(
name|vis
argument_list|,
name|resourceList
argument_list|)
expr_stmt|;
return|return
operator|new
name|ContainerLocalizationRequestEvent
argument_list|(
name|container
argument_list|,
name|reqs
argument_list|)
return|;
block|}
DECL|method|createMockContainer (String user, int containerId)
specifier|private
name|ContainerImpl
name|createMockContainer
parameter_list|(
name|String
name|user
parameter_list|,
name|int
name|containerId
parameter_list|)
block|{
name|ContainerImpl
name|container
init|=
name|mock
argument_list|(
name|ContainerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|Credentials
name|mockCredentials
init|=
name|mock
argument_list|(
name|Credentials
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getCredentials
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockCredentials
argument_list|)
expr_stmt|;
return|return
name|container
return|;
block|}
DECL|method|getPath (String path)
specifier|private
specifier|static
name|URL
name|getPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|URL
name|url
init|=
name|BuilderUtils
operator|.
name|newURL
argument_list|(
literal|"file"
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|path
argument_list|)
decl_stmt|;
return|return
name|url
return|;
block|}
DECL|method|getMockedResource (Random r, LocalResourceVisibility vis)
specifier|private
specifier|static
name|LocalResource
name|getMockedResource
parameter_list|(
name|Random
name|r
parameter_list|,
name|LocalResourceVisibility
name|vis
parameter_list|)
block|{
name|String
name|name
init|=
name|Long
operator|.
name|toHexString
argument_list|(
name|r
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
name|getPath
argument_list|(
literal|"/local/PRIVATE/"
operator|+
name|name
argument_list|)
decl_stmt|;
name|LocalResource
name|rsrc
init|=
name|BuilderUtils
operator|.
name|newLocalResource
argument_list|(
name|url
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|vis
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
literal|1024
argument_list|)
operator|+
literal|1024L
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
literal|1024
argument_list|)
operator|+
literal|2048L
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|rsrc
return|;
block|}
DECL|method|getAppMockedResource (Random r)
specifier|private
specifier|static
name|LocalResource
name|getAppMockedResource
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
return|return
name|getMockedResource
argument_list|(
name|r
argument_list|,
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
return|;
block|}
DECL|method|getPublicMockedResource (Random r)
specifier|private
specifier|static
name|LocalResource
name|getPublicMockedResource
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
return|return
name|getMockedResource
argument_list|(
name|r
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|)
return|;
block|}
DECL|method|getPrivateMockedResource (Random r)
specifier|private
specifier|static
name|LocalResource
name|getPrivateMockedResource
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
return|return
name|getMockedResource
argument_list|(
name|r
argument_list|,
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|)
return|;
block|}
DECL|method|getMockContainer (ApplicationId appId, int id, String user)
specifier|private
specifier|static
name|Container
name|getMockContainer
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|user
parameter_list|)
block|{
name|Container
name|c
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|cId
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|Credentials
name|creds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|creds
operator|.
name|addToken
argument_list|(
operator|new
name|Text
argument_list|(
literal|"tok"
operator|+
name|id
argument_list|)
argument_list|,
name|getToken
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getCredentials
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|creds
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
DECL|method|createSpyService ( DrainDispatcher dispatcher, LocalDirsHandlerService dirsHandler, NMStateStoreService stateStore)
specifier|private
name|ResourceLocalizationService
name|createSpyService
parameter_list|(
name|DrainDispatcher
name|dispatcher
parameter_list|,
name|LocalDirsHandlerService
name|dirsHandler
parameter_list|,
name|NMStateStoreService
name|stateStore
parameter_list|)
block|{
name|ContainerExecutor
name|exec
init|=
name|mock
argument_list|(
name|ContainerExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|LocalizerTracker
name|mockLocalizerTracker
init|=
name|mock
argument_list|(
name|LocalizerTracker
operator|.
name|class
argument_list|)
decl_stmt|;
name|DeletionService
name|delService
init|=
name|mock
argument_list|(
name|DeletionService
operator|.
name|class
argument_list|)
decl_stmt|;
name|NMContext
name|nmContext
init|=
operator|new
name|NMContext
argument_list|(
operator|new
name|NMContainerTokenSecretManager
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|NMTokenSecretManagerInNM
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|new
name|ApplicationACLsManager
argument_list|(
name|conf
argument_list|)
argument_list|,
name|stateStore
argument_list|)
decl_stmt|;
name|ResourceLocalizationService
name|rawService
init|=
operator|new
name|ResourceLocalizationService
argument_list|(
name|dispatcher
argument_list|,
name|exec
argument_list|,
name|delService
argument_list|,
name|dirsHandler
argument_list|,
name|nmContext
argument_list|)
decl_stmt|;
name|ResourceLocalizationService
name|spyService
init|=
name|spy
argument_list|(
name|rawService
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|mockServer
argument_list|)
operator|.
name|when
argument_list|(
name|spyService
argument_list|)
operator|.
name|createServer
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|mockLocalizerTracker
argument_list|)
operator|.
name|when
argument_list|(
name|spyService
argument_list|)
operator|.
name|createLocalizerTracker
argument_list|(
name|isA
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|lfs
argument_list|)
operator|.
name|when
argument_list|(
name|spyService
argument_list|)
operator|.
name|getLocalFileContext
argument_list|(
name|isA
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|spyService
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|getToken (int id)
specifier|static
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|getToken
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
operator|new
name|Token
argument_list|(
operator|(
literal|"ident"
operator|+
name|id
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|(
literal|"passwd"
operator|+
name|id
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
literal|"kind"
operator|+
name|id
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"service"
operator|+
name|id
argument_list|)
argument_list|)
return|;
block|}
comment|/*    * Test to ensure ResourceLocalizationService can handle local dirs going bad.    * Test first sets up all the components required, then sends events to fetch    * a private, app and public resource. It then sends events to clean up the    * container and the app and ensures the right delete calls were made.    */
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// mocked generics
DECL|method|testFailedDirsResourceRelease ()
specifier|public
name|void
name|testFailedDirsResourceRelease
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup components
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|basedir
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|sDirs
init|=
operator|new
name|String
index|[
literal|4
index|]
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|localDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|(
name|sDirs
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|sDirs
index|[
name|i
index|]
operator|=
name|f
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|i
expr_stmt|;
name|localDirs
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|sDirs
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Path
argument_list|>
name|containerLocalDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|(
name|localDirs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|appLocalDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|(
name|localDirs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|nmLocalContainerDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|(
name|localDirs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|nmLocalAppDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|(
name|localDirs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|sDirs
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_DISK_HEALTH_CHECK_INTERVAL_MS
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|LocalizerTracker
name|mockLocallilzerTracker
init|=
name|mock
argument_list|(
name|LocalizerTracker
operator|.
name|class
argument_list|)
decl_stmt|;
name|DrainDispatcher
name|dispatcher
init|=
operator|new
name|DrainDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|EventHandler
argument_list|<
name|ApplicationEvent
argument_list|>
name|applicationBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ApplicationEventType
operator|.
name|class
argument_list|,
name|applicationBus
argument_list|)
expr_stmt|;
name|EventHandler
argument_list|<
name|ContainerEvent
argument_list|>
name|containerBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainerEventType
operator|.
name|class
argument_list|,
name|containerBus
argument_list|)
expr_stmt|;
comment|// Ignore actual localization
name|EventHandler
argument_list|<
name|LocalizerEvent
argument_list|>
name|localizerBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|LocalizerEventType
operator|.
name|class
argument_list|,
name|localizerBus
argument_list|)
expr_stmt|;
name|ContainerExecutor
name|exec
init|=
name|mock
argument_list|(
name|ContainerExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|LocalDirsHandlerService
name|mockDirsHandler
init|=
name|mock
argument_list|(
name|LocalDirsHandlerService
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|sDirs
argument_list|)
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockDirsHandler
argument_list|)
operator|.
name|getLocalDirsForCleanup
argument_list|()
expr_stmt|;
name|DeletionService
name|delService
init|=
name|mock
argument_list|(
name|DeletionService
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// setup mocks
name|ResourceLocalizationService
name|rawService
init|=
operator|new
name|ResourceLocalizationService
argument_list|(
name|dispatcher
argument_list|,
name|exec
argument_list|,
name|delService
argument_list|,
name|mockDirsHandler
argument_list|,
name|nmContext
argument_list|)
decl_stmt|;
name|ResourceLocalizationService
name|spyService
init|=
name|spy
argument_list|(
name|rawService
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|mockServer
argument_list|)
operator|.
name|when
argument_list|(
name|spyService
argument_list|)
operator|.
name|createServer
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|mockLocallilzerTracker
argument_list|)
operator|.
name|when
argument_list|(
name|spyService
argument_list|)
operator|.
name|createLocalizerTracker
argument_list|(
name|isA
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|lfs
argument_list|)
operator|.
name|when
argument_list|(
name|spyService
argument_list|)
operator|.
name|getLocalFileContext
argument_list|(
name|isA
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FsPermission
name|defaultPermission
init|=
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
operator|.
name|applyUMask
argument_list|(
name|lfs
operator|.
name|getUMask
argument_list|()
argument_list|)
decl_stmt|;
name|FsPermission
name|nmPermission
init|=
name|ResourceLocalizationService
operator|.
name|NM_PRIVATE_PERM
operator|.
name|applyUMask
argument_list|(
name|lfs
operator|.
name|getUMask
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|FileStatus
name|fs
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|0
argument_list|,
name|defaultPermission
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|localDirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|FileStatus
name|nmFs
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|0
argument_list|,
name|nmPermission
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|localDirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|user
init|=
literal|"user0"
decl_stmt|;
comment|// init application
specifier|final
name|Application
name|app
init|=
name|mock
argument_list|(
name|Application
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ApplicationId
name|appId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|314159265358979L
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
comment|// init container.
specifier|final
name|Container
name|c
init|=
name|getMockContainer
argument_list|(
name|appId
argument_list|,
literal|42
argument_list|,
name|user
argument_list|)
decl_stmt|;
comment|// setup local app dirs
name|List
argument_list|<
name|String
argument_list|>
name|tmpDirs
init|=
name|mockDirsHandler
operator|.
name|getLocalDirs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tmpDirs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Path
name|usersdir
init|=
operator|new
name|Path
argument_list|(
name|tmpDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|ContainerLocalizer
operator|.
name|USERCACHE
argument_list|)
decl_stmt|;
name|Path
name|userdir
init|=
operator|new
name|Path
argument_list|(
name|usersdir
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|Path
name|allAppsdir
init|=
operator|new
name|Path
argument_list|(
name|userdir
argument_list|,
name|ContainerLocalizer
operator|.
name|APPCACHE
argument_list|)
decl_stmt|;
name|Path
name|appDir
init|=
operator|new
name|Path
argument_list|(
name|allAppsdir
argument_list|,
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|appId
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|containerDir
init|=
operator|new
name|Path
argument_list|(
name|appDir
argument_list|,
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|c
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|containerLocalDirs
operator|.
name|add
argument_list|(
name|containerDir
argument_list|)
expr_stmt|;
name|appLocalDirs
operator|.
name|add
argument_list|(
name|appDir
argument_list|)
expr_stmt|;
name|Path
name|sysDir
init|=
operator|new
name|Path
argument_list|(
name|tmpDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|ResourceLocalizationService
operator|.
name|NM_PRIVATE_DIR
argument_list|)
decl_stmt|;
name|Path
name|appSysDir
init|=
operator|new
name|Path
argument_list|(
name|sysDir
argument_list|,
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|appId
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|containerSysDir
init|=
operator|new
name|Path
argument_list|(
name|appSysDir
argument_list|,
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|c
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|nmLocalContainerDirs
operator|.
name|add
argument_list|(
name|containerSysDir
argument_list|)
expr_stmt|;
name|nmLocalAppDirs
operator|.
name|add
argument_list|(
name|appSysDir
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|spyService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|start
argument_list|()
expr_stmt|;
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationLocalizationEvent
argument_list|(
name|LocalizationEventType
operator|.
name|INIT_APPLICATION_RESOURCES
argument_list|,
name|app
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Get a handle on the trackers after they're setup with
comment|// INIT_APP_RESOURCES
name|LocalResourcesTracker
name|appTracker
init|=
name|spyService
operator|.
name|getLocalResourcesTracker
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|,
name|user
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|LocalResourcesTracker
name|privTracker
init|=
name|spyService
operator|.
name|getLocalResourcesTracker
argument_list|(
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|user
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|LocalResourcesTracker
name|pubTracker
init|=
name|spyService
operator|.
name|getLocalResourcesTracker
argument_list|(
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|user
argument_list|,
name|appId
argument_list|)
decl_stmt|;
comment|// init resources
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
comment|// Send localization requests, one for each type of resource
specifier|final
name|LocalResource
name|privResource
init|=
name|getPrivateMockedResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceRequest
name|privReq
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|privResource
argument_list|)
decl_stmt|;
specifier|final
name|LocalResource
name|appResource
init|=
name|getAppMockedResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceRequest
name|appReq
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|appResource
argument_list|)
decl_stmt|;
specifier|final
name|LocalResource
name|pubResource
init|=
name|getPublicMockedResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceRequest
name|pubReq
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|pubResource
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|req
init|=
operator|new
name|HashMap
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|req
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|privReq
argument_list|)
argument_list|)
expr_stmt|;
name|req
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|appReq
argument_list|)
argument_list|)
expr_stmt|;
name|req
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|pubReq
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|req2
init|=
operator|new
name|HashMap
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|req2
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|privReq
argument_list|)
argument_list|)
expr_stmt|;
comment|// Send Request event
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationRequestEvent
argument_list|(
name|c
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationRequestEvent
argument_list|(
name|c
argument_list|,
name|req2
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|int
name|privRsrcCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|LocalizedResource
name|lr
range|:
name|privTracker
control|)
block|{
name|privRsrcCount
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect reference count"
argument_list|,
literal|2
argument_list|,
name|lr
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|privReq
argument_list|,
name|lr
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|privRsrcCount
argument_list|)
expr_stmt|;
name|int
name|appRsrcCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|LocalizedResource
name|lr
range|:
name|appTracker
control|)
block|{
name|appRsrcCount
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect reference count"
argument_list|,
literal|1
argument_list|,
name|lr
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appReq
argument_list|,
name|lr
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appRsrcCount
argument_list|)
expr_stmt|;
name|int
name|pubRsrcCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|LocalizedResource
name|lr
range|:
name|pubTracker
control|)
block|{
name|pubRsrcCount
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect reference count"
argument_list|,
literal|1
argument_list|,
name|lr
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pubReq
argument_list|,
name|lr
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pubRsrcCount
argument_list|)
expr_stmt|;
comment|// setup mocks for test, a set of dirs with IOExceptions and let the rest
comment|// go through
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|containerLocalDirs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|2
condition|)
block|{
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|spylfs
argument_list|)
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|containerLocalDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|spylfs
argument_list|)
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|nmLocalContainerDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doReturn
argument_list|(
name|fs
argument_list|)
operator|.
name|when
argument_list|(
name|spylfs
argument_list|)
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|containerLocalDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|nmFs
argument_list|)
operator|.
name|when
argument_list|(
name|spylfs
argument_list|)
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|nmLocalContainerDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Send Cleanup Event
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationCleanupEvent
argument_list|(
name|c
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockLocallilzerTracker
argument_list|)
operator|.
name|cleanupPrivLocalizers
argument_list|(
literal|"container_314159265358979_0003_01_000042"
argument_list|)
expr_stmt|;
comment|// match cleanup events with the mocks we setup earlier
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|containerLocalDirs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|2
condition|)
block|{
try|try
block|{
name|verify
argument_list|(
name|delService
argument_list|)
operator|.
name|delete
argument_list|(
name|user
argument_list|,
name|containerLocalDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|delService
argument_list|)
operator|.
name|delete
argument_list|(
literal|null
argument_list|,
name|nmLocalContainerDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"deletion attempts for invalid dirs"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
continue|continue;
block|}
block|}
else|else
block|{
name|verify
argument_list|(
name|delService
argument_list|)
operator|.
name|delete
argument_list|(
name|user
argument_list|,
name|containerLocalDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|delService
argument_list|)
operator|.
name|delete
argument_list|(
literal|null
argument_list|,
name|nmLocalContainerDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ArgumentMatcher
argument_list|<
name|ApplicationEvent
argument_list|>
name|matchesAppDestroy
init|=
operator|new
name|ArgumentMatcher
argument_list|<
name|ApplicationEvent
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|ApplicationEvent
name|evt
init|=
operator|(
name|ApplicationEvent
operator|)
name|o
decl_stmt|;
return|return
operator|(
name|evt
operator|.
name|getType
argument_list|()
operator|==
name|ApplicationEventType
operator|.
name|APPLICATION_RESOURCES_CLEANEDUP
operator|)
operator|&&
name|appId
operator|==
name|evt
operator|.
name|getApplicationID
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// setup mocks again, this time throw UnsupportedFileSystemException and
comment|// IOExceptions
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|containerLocalDirs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|3
condition|)
block|{
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|spylfs
argument_list|)
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|appLocalDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|UnsupportedFileSystemException
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spylfs
argument_list|)
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|nmLocalAppDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doReturn
argument_list|(
name|fs
argument_list|)
operator|.
name|when
argument_list|(
name|spylfs
argument_list|)
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|appLocalDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|nmFs
argument_list|)
operator|.
name|when
argument_list|(
name|spylfs
argument_list|)
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|nmLocalAppDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|LocalizationEvent
name|destroyApp
init|=
operator|new
name|ApplicationLocalizationEvent
argument_list|(
name|LocalizationEventType
operator|.
name|DESTROY_APPLICATION_RESOURCES
argument_list|,
name|app
argument_list|)
decl_stmt|;
name|spyService
operator|.
name|handle
argument_list|(
name|destroyApp
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|applicationBus
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
name|matchesAppDestroy
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify we got the right delete calls
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|containerLocalDirs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|3
condition|)
block|{
try|try
block|{
name|verify
argument_list|(
name|delService
argument_list|)
operator|.
name|delete
argument_list|(
name|user
argument_list|,
name|containerLocalDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|delService
argument_list|)
operator|.
name|delete
argument_list|(
literal|null
argument_list|,
name|nmLocalContainerDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"deletion attempts for invalid dirs"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
continue|continue;
block|}
block|}
else|else
block|{
name|verify
argument_list|(
name|delService
argument_list|)
operator|.
name|delete
argument_list|(
name|user
argument_list|,
name|appLocalDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|delService
argument_list|)
operator|.
name|delete
argument_list|(
literal|null
argument_list|,
name|nmLocalAppDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
name|delService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

