begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyShort
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|argThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|isA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|isNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doNothing
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|timeout
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BrokenBarrierException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|AbstractFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|ChecksumOpt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|DrainDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DeletionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|LocalDirsHandlerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LocalResourceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LocalizerAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LocalizerHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LocalizerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ResourceStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|ApplicationEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerResourceFailedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ResourceLocalizationService
operator|.
name|LocalizerTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ApplicationLocalizationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ContainerLocalizationCleanupEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ContainerLocalizationRequestEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizationEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_class
DECL|class|TestResourceLocalizationService
specifier|public
class|class
name|TestResourceLocalizationService
block|{
DECL|field|basedir
specifier|static
specifier|final
name|Path
name|basedir
init|=
operator|new
name|Path
argument_list|(
literal|"target"
argument_list|,
name|TestResourceLocalizationService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|mockServer
specifier|static
name|Server
name|mockServer
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
block|{
name|mockServer
operator|=
name|mock
argument_list|(
name|Server
operator|.
name|class
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|123
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockServer
argument_list|)
operator|.
name|getListenerAddress
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocalizationInit ()
specifier|public
name|void
name|testLocalizationInit
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_PERMISSIONS_UMASK_KEY
argument_list|,
literal|"077"
argument_list|)
expr_stmt|;
name|AsyncDispatcher
name|dispatcher
init|=
operator|new
name|AsyncDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerExecutor
name|exec
init|=
name|mock
argument_list|(
name|ContainerExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|DeletionService
name|delService
init|=
name|spy
argument_list|(
operator|new
name|DeletionService
argument_list|(
name|exec
argument_list|)
argument_list|)
decl_stmt|;
name|delService
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|delService
operator|.
name|start
argument_list|()
expr_stmt|;
name|AbstractFileSystem
name|spylfs
init|=
name|spy
argument_list|(
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|getDefaultFileSystem
argument_list|()
argument_list|)
decl_stmt|;
name|FileContext
name|lfs
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|spylfs
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|spylfs
argument_list|)
operator|.
name|mkdir
argument_list|(
name|isA
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|FsPermission
operator|.
name|class
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|localDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|sDirs
init|=
operator|new
name|String
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|localDirs
operator|.
name|add
argument_list|(
name|lfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
name|i
operator|+
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sDirs
index|[
name|i
index|]
operator|=
name|localDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|sDirs
argument_list|)
expr_stmt|;
name|LocalDirsHandlerService
name|diskhandler
init|=
operator|new
name|LocalDirsHandlerService
argument_list|()
decl_stmt|;
name|diskhandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ResourceLocalizationService
name|locService
init|=
name|spy
argument_list|(
operator|new
name|ResourceLocalizationService
argument_list|(
name|dispatcher
argument_list|,
name|exec
argument_list|,
name|delService
argument_list|,
name|diskhandler
argument_list|)
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|lfs
argument_list|)
operator|.
name|when
argument_list|(
name|locService
argument_list|)
operator|.
name|getLocalFileContext
argument_list|(
name|isA
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// initialize ResourceLocalizationService
name|locService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|FsPermission
name|defaultPerm
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
decl_stmt|;
comment|// verify directory creation
for|for
control|(
name|Path
name|p
range|:
name|localDirs
control|)
block|{
name|p
operator|=
operator|new
name|Path
argument_list|(
operator|(
operator|new
name|URI
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|usercache
init|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
name|ContainerLocalizer
operator|.
name|USERCACHE
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|spylfs
argument_list|)
operator|.
name|mkdir
argument_list|(
name|eq
argument_list|(
name|usercache
argument_list|)
argument_list|,
name|eq
argument_list|(
name|defaultPerm
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|publicCache
init|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
name|ContainerLocalizer
operator|.
name|FILECACHE
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|spylfs
argument_list|)
operator|.
name|mkdir
argument_list|(
name|eq
argument_list|(
name|publicCache
argument_list|)
argument_list|,
name|eq
argument_list|(
name|defaultPerm
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|nmPriv
init|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
name|ResourceLocalizationService
operator|.
name|NM_PRIVATE_DIR
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|spylfs
argument_list|)
operator|.
name|mkdir
argument_list|(
name|eq
argument_list|(
name|nmPriv
argument_list|)
argument_list|,
name|eq
argument_list|(
name|ResourceLocalizationService
operator|.
name|NM_PRIVATE_PERM
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
name|delService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// mocked generics
DECL|method|testResourceRelease ()
specifier|public
name|void
name|testResourceRelease
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|AbstractFileSystem
name|spylfs
init|=
name|spy
argument_list|(
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|getDefaultFileSystem
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|FileContext
name|lfs
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|spylfs
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|spylfs
argument_list|)
operator|.
name|mkdir
argument_list|(
name|isA
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|FsPermission
operator|.
name|class
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|localDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|sDirs
init|=
operator|new
name|String
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|localDirs
operator|.
name|add
argument_list|(
name|lfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
name|i
operator|+
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sDirs
index|[
name|i
index|]
operator|=
name|localDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|sDirs
argument_list|)
expr_stmt|;
name|String
name|logDir
init|=
name|lfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
literal|"logdir "
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|logDir
argument_list|)
expr_stmt|;
name|LocalizerTracker
name|mockLocallilzerTracker
init|=
name|mock
argument_list|(
name|LocalizerTracker
operator|.
name|class
argument_list|)
decl_stmt|;
name|DrainDispatcher
name|dispatcher
init|=
operator|new
name|DrainDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|EventHandler
argument_list|<
name|ApplicationEvent
argument_list|>
name|applicationBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ApplicationEventType
operator|.
name|class
argument_list|,
name|applicationBus
argument_list|)
expr_stmt|;
name|EventHandler
argument_list|<
name|ContainerEvent
argument_list|>
name|containerBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainerEventType
operator|.
name|class
argument_list|,
name|containerBus
argument_list|)
expr_stmt|;
comment|//Ignore actual localization
name|EventHandler
argument_list|<
name|LocalizerEvent
argument_list|>
name|localizerBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|LocalizerEventType
operator|.
name|class
argument_list|,
name|localizerBus
argument_list|)
expr_stmt|;
name|ContainerExecutor
name|exec
init|=
name|mock
argument_list|(
name|ContainerExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|LocalDirsHandlerService
name|dirsHandler
init|=
operator|new
name|LocalDirsHandlerService
argument_list|()
decl_stmt|;
name|dirsHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|DeletionService
name|delService
init|=
operator|new
name|DeletionService
argument_list|(
name|exec
argument_list|)
decl_stmt|;
name|delService
operator|.
name|init
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|delService
operator|.
name|start
argument_list|()
expr_stmt|;
name|ResourceLocalizationService
name|rawService
init|=
operator|new
name|ResourceLocalizationService
argument_list|(
name|dispatcher
argument_list|,
name|exec
argument_list|,
name|delService
argument_list|,
name|dirsHandler
argument_list|)
decl_stmt|;
name|ResourceLocalizationService
name|spyService
init|=
name|spy
argument_list|(
name|rawService
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|mockServer
argument_list|)
operator|.
name|when
argument_list|(
name|spyService
argument_list|)
operator|.
name|createServer
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|mockLocallilzerTracker
argument_list|)
operator|.
name|when
argument_list|(
name|spyService
argument_list|)
operator|.
name|createLocalizerTracker
argument_list|(
name|isA
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|lfs
argument_list|)
operator|.
name|when
argument_list|(
name|spyService
argument_list|)
operator|.
name|getLocalFileContext
argument_list|(
name|isA
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|spyService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|String
name|user
init|=
literal|"user0"
decl_stmt|;
comment|// init application
specifier|final
name|Application
name|app
init|=
name|mock
argument_list|(
name|Application
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ApplicationId
name|appId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|314159265358979L
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationLocalizationEvent
argument_list|(
name|LocalizationEventType
operator|.
name|INIT_APPLICATION_RESOURCES
argument_list|,
name|app
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|//Get a handle on the trackers after they're setup with INIT_APP_RESOURCES
name|LocalResourcesTracker
name|appTracker
init|=
name|spyService
operator|.
name|getLocalResourcesTracker
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|,
name|user
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|LocalResourcesTracker
name|privTracker
init|=
name|spyService
operator|.
name|getLocalResourcesTracker
argument_list|(
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|user
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|LocalResourcesTracker
name|pubTracker
init|=
name|spyService
operator|.
name|getLocalResourcesTracker
argument_list|(
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|user
argument_list|,
name|appId
argument_list|)
decl_stmt|;
comment|// init container.
specifier|final
name|Container
name|c
init|=
name|getMockContainer
argument_list|(
name|appId
argument_list|,
literal|42
argument_list|)
decl_stmt|;
comment|// init resources
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SEED: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
comment|// Send localization requests for one resource of each type.
specifier|final
name|LocalResource
name|privResource
init|=
name|getPrivateMockedResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceRequest
name|privReq
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|privResource
argument_list|)
decl_stmt|;
specifier|final
name|LocalResource
name|pubResource
init|=
name|getPublicMockedResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceRequest
name|pubReq
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|pubResource
argument_list|)
decl_stmt|;
specifier|final
name|LocalResource
name|pubResource2
init|=
name|getPublicMockedResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceRequest
name|pubReq2
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|pubResource2
argument_list|)
decl_stmt|;
specifier|final
name|LocalResource
name|appResource
init|=
name|getAppMockedResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceRequest
name|appReq
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|appResource
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|req
init|=
operator|new
name|HashMap
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|req
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|privReq
argument_list|)
argument_list|)
expr_stmt|;
name|req
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|pubReq
argument_list|)
argument_list|)
expr_stmt|;
name|req
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|appReq
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|req2
init|=
operator|new
name|HashMap
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|req2
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|privReq
argument_list|)
argument_list|)
expr_stmt|;
name|req2
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|pubReq2
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|LocalResourceRequest
argument_list|>
name|pubRsrcs
init|=
operator|new
name|HashSet
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|pubRsrcs
operator|.
name|add
argument_list|(
name|pubReq
argument_list|)
expr_stmt|;
name|pubRsrcs
operator|.
name|add
argument_list|(
name|pubReq2
argument_list|)
expr_stmt|;
comment|// Send Request event
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationRequestEvent
argument_list|(
name|c
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationRequestEvent
argument_list|(
name|c
argument_list|,
name|req2
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|int
name|privRsrcCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|LocalizedResource
name|lr
range|:
name|privTracker
control|)
block|{
name|privRsrcCount
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect reference count"
argument_list|,
literal|2
argument_list|,
name|lr
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|privReq
argument_list|,
name|lr
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|privRsrcCount
argument_list|)
expr_stmt|;
name|int
name|pubRsrcCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|LocalizedResource
name|lr
range|:
name|pubTracker
control|)
block|{
name|pubRsrcCount
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect reference count"
argument_list|,
literal|1
argument_list|,
name|lr
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|pubRsrcs
operator|.
name|remove
argument_list|(
name|lr
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pubRsrcs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pubRsrcCount
argument_list|)
expr_stmt|;
name|int
name|appRsrcCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|LocalizedResource
name|lr
range|:
name|appTracker
control|)
block|{
name|appRsrcCount
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect reference count"
argument_list|,
literal|1
argument_list|,
name|lr
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appReq
argument_list|,
name|lr
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appRsrcCount
argument_list|)
expr_stmt|;
comment|//Send Cleanup Event
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationCleanupEvent
argument_list|(
name|c
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockLocallilzerTracker
argument_list|)
operator|.
name|cleanupPrivLocalizers
argument_list|(
literal|"container_314159265358979_0003_01_000042"
argument_list|)
expr_stmt|;
name|req2
operator|.
name|remove
argument_list|(
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationCleanupEvent
argument_list|(
name|c
argument_list|,
name|req2
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|pubRsrcs
operator|.
name|add
argument_list|(
name|pubReq
argument_list|)
expr_stmt|;
name|pubRsrcs
operator|.
name|add
argument_list|(
name|pubReq2
argument_list|)
expr_stmt|;
name|privRsrcCount
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|LocalizedResource
name|lr
range|:
name|privTracker
control|)
block|{
name|privRsrcCount
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect reference count"
argument_list|,
literal|1
argument_list|,
name|lr
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|privReq
argument_list|,
name|lr
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|privRsrcCount
argument_list|)
expr_stmt|;
name|pubRsrcCount
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|LocalizedResource
name|lr
range|:
name|pubTracker
control|)
block|{
name|pubRsrcCount
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect reference count"
argument_list|,
literal|0
argument_list|,
name|lr
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|pubRsrcs
operator|.
name|remove
argument_list|(
name|lr
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pubRsrcs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pubRsrcCount
argument_list|)
expr_stmt|;
name|appRsrcCount
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|LocalizedResource
name|lr
range|:
name|appTracker
control|)
block|{
name|appRsrcCount
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect reference count"
argument_list|,
literal|0
argument_list|,
name|lr
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appReq
argument_list|,
name|lr
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appRsrcCount
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
name|delService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// mocked generics
DECL|method|testLocalizationHeartbeat ()
specifier|public
name|void
name|testLocalizationHeartbeat
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|AbstractFileSystem
name|spylfs
init|=
name|spy
argument_list|(
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|getDefaultFileSystem
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|FileContext
name|lfs
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|spylfs
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|spylfs
argument_list|)
operator|.
name|mkdir
argument_list|(
name|isA
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|FsPermission
operator|.
name|class
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|localDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|sDirs
init|=
operator|new
name|String
index|[
literal|1
index|]
decl_stmt|;
comment|// Making sure that we have only one local disk so that it will only be
comment|// selected for consecutive resource localization calls.  This is required
comment|// to test LocalCacheDirectoryManager.
name|localDirs
operator|.
name|add
argument_list|(
name|lfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
literal|0
operator|+
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sDirs
index|[
literal|0
index|]
operator|=
name|localDirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|sDirs
argument_list|)
expr_stmt|;
comment|// Adding configuration to make sure there is only one file per
comment|// directory
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY
argument_list|,
literal|"37"
argument_list|)
expr_stmt|;
name|String
name|logDir
init|=
name|lfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
literal|"logdir "
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|logDir
argument_list|)
expr_stmt|;
name|DrainDispatcher
name|dispatcher
init|=
operator|new
name|DrainDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|EventHandler
argument_list|<
name|ApplicationEvent
argument_list|>
name|applicationBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ApplicationEventType
operator|.
name|class
argument_list|,
name|applicationBus
argument_list|)
expr_stmt|;
name|EventHandler
argument_list|<
name|ContainerEvent
argument_list|>
name|containerBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainerEventType
operator|.
name|class
argument_list|,
name|containerBus
argument_list|)
expr_stmt|;
name|ContainerExecutor
name|exec
init|=
name|mock
argument_list|(
name|ContainerExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|LocalDirsHandlerService
name|dirsHandler
init|=
operator|new
name|LocalDirsHandlerService
argument_list|()
decl_stmt|;
name|dirsHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|DeletionService
name|delServiceReal
init|=
operator|new
name|DeletionService
argument_list|(
name|exec
argument_list|)
decl_stmt|;
name|DeletionService
name|delService
init|=
name|spy
argument_list|(
name|delServiceReal
argument_list|)
decl_stmt|;
name|delService
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|delService
operator|.
name|start
argument_list|()
expr_stmt|;
name|ResourceLocalizationService
name|rawService
init|=
operator|new
name|ResourceLocalizationService
argument_list|(
name|dispatcher
argument_list|,
name|exec
argument_list|,
name|delService
argument_list|,
name|dirsHandler
argument_list|)
decl_stmt|;
name|ResourceLocalizationService
name|spyService
init|=
name|spy
argument_list|(
name|rawService
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|mockServer
argument_list|)
operator|.
name|when
argument_list|(
name|spyService
argument_list|)
operator|.
name|createServer
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|lfs
argument_list|)
operator|.
name|when
argument_list|(
name|spyService
argument_list|)
operator|.
name|getLocalFileContext
argument_list|(
name|isA
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|spyService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// init application
specifier|final
name|Application
name|app
init|=
name|mock
argument_list|(
name|Application
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ApplicationId
name|appId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|314159265358979L
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"user0"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationLocalizationEvent
argument_list|(
name|LocalizationEventType
operator|.
name|INIT_APPLICATION_RESOURCES
argument_list|,
name|app
argument_list|)
argument_list|)
expr_stmt|;
name|ArgumentMatcher
argument_list|<
name|ApplicationEvent
argument_list|>
name|matchesAppInit
init|=
operator|new
name|ArgumentMatcher
argument_list|<
name|ApplicationEvent
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|ApplicationEvent
name|evt
init|=
operator|(
name|ApplicationEvent
operator|)
name|o
decl_stmt|;
return|return
name|evt
operator|.
name|getType
argument_list|()
operator|==
name|ApplicationEventType
operator|.
name|APPLICATION_INITED
operator|&&
name|appId
operator|==
name|evt
operator|.
name|getApplicationID
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|applicationBus
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
name|matchesAppInit
argument_list|)
argument_list|)
expr_stmt|;
comment|// init container rsrc, localizer
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SEED: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
specifier|final
name|Container
name|c
init|=
name|getMockContainer
argument_list|(
name|appId
argument_list|,
literal|42
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
operator|new
name|FSDataOutputStream
argument_list|(
operator|new
name|DataOutputBuffer
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|out
argument_list|)
operator|.
name|when
argument_list|(
name|spylfs
argument_list|)
operator|.
name|createInternal
argument_list|(
name|isA
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|EnumSet
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|FsPermission
operator|.
name|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyShort
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|isA
argument_list|(
name|Progressable
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|ChecksumOpt
operator|.
name|class
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|LocalResource
name|resource1
init|=
name|getPrivateMockedResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|LocalResource
name|resource2
init|=
literal|null
decl_stmt|;
do|do
block|{
name|resource2
operator|=
name|getPrivateMockedResource
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|resource2
operator|==
literal|null
operator|||
name|resource2
operator|.
name|equals
argument_list|(
name|resource1
argument_list|)
condition|)
do|;
comment|// above call to make sure we don't get identical resources.
specifier|final
name|LocalResourceRequest
name|req1
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|resource1
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceRequest
name|req2
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|resource2
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|rsrcs
init|=
operator|new
name|HashMap
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LocalResourceRequest
argument_list|>
name|privateResourceList
init|=
operator|new
name|ArrayList
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|privateResourceList
operator|.
name|add
argument_list|(
name|req1
argument_list|)
expr_stmt|;
name|privateResourceList
operator|.
name|add
argument_list|(
name|req2
argument_list|)
expr_stmt|;
name|rsrcs
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|privateResourceList
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationRequestEvent
argument_list|(
name|c
argument_list|,
name|rsrcs
argument_list|)
argument_list|)
expr_stmt|;
comment|// Sigh. Thread init of private localizer not accessible
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|String
name|appStr
init|=
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|String
name|ctnrStr
init|=
name|c
operator|.
name|getContainerID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|Path
argument_list|>
name|tokenPathCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Path
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|exec
argument_list|)
operator|.
name|startLocalizer
argument_list|(
name|tokenPathCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|isA
argument_list|(
name|InetSocketAddress
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|"user0"
argument_list|)
argument_list|,
name|eq
argument_list|(
name|appStr
argument_list|)
argument_list|,
name|eq
argument_list|(
name|ctnrStr
argument_list|)
argument_list|,
name|isA
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|localizationTokenPath
init|=
name|tokenPathCaptor
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// heartbeat from localizer
name|LocalResourceStatus
name|rsrcStat1
init|=
name|mock
argument_list|(
name|LocalResourceStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|LocalResourceStatus
name|rsrcStat2
init|=
name|mock
argument_list|(
name|LocalResourceStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|LocalizerStatus
name|stat
init|=
name|mock
argument_list|(
name|LocalizerStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|stat
operator|.
name|getLocalizerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ctnrStr
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsrcStat1
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resource1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsrcStat2
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resource2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsrcStat1
operator|.
name|getLocalSize
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|4344L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsrcStat2
operator|.
name|getLocalSize
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|2342L
argument_list|)
expr_stmt|;
name|URL
name|locPath
init|=
name|getPath
argument_list|(
literal|"/cache/private/blah"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rsrcStat1
operator|.
name|getLocalPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|locPath
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsrcStat2
operator|.
name|getLocalPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|locPath
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsrcStat1
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ResourceStatusType
operator|.
name|FETCH_SUCCESS
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsrcStat2
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ResourceStatusType
operator|.
name|FETCH_SUCCESS
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|stat
operator|.
name|getResources
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
expr|<
name|LocalResourceStatus
operator|>
name|emptyList
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|rsrcStat1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|rsrcStat2
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
expr|<
name|LocalResourceStatus
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|localPath
init|=
name|Path
operator|.
name|SEPARATOR
operator|+
name|ContainerLocalizer
operator|.
name|USERCACHE
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"user0"
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|ContainerLocalizer
operator|.
name|FILECACHE
decl_stmt|;
comment|// get first resource
name|LocalizerHeartbeatResponse
name|response
init|=
name|spyService
operator|.
name|heartbeat
argument_list|(
name|stat
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|LocalizerAction
operator|.
name|LIVE
argument_list|,
name|response
operator|.
name|getLocalizerAction
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getResourceSpecs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|req1
argument_list|,
operator|new
name|LocalResourceRequest
argument_list|(
name|response
operator|.
name|getResourceSpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResource
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|URL
name|localizedPath
init|=
name|response
operator|.
name|getResourceSpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDestinationDirectory
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|localizedPath
operator|.
name|getFile
argument_list|()
operator|.
name|endsWith
argument_list|(
name|localPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// get second resource
name|response
operator|=
name|spyService
operator|.
name|heartbeat
argument_list|(
name|stat
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LocalizerAction
operator|.
name|LIVE
argument_list|,
name|response
operator|.
name|getLocalizerAction
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getResourceSpecs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|req2
argument_list|,
operator|new
name|LocalResourceRequest
argument_list|(
name|response
operator|.
name|getResourceSpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResource
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|localizedPath
operator|=
name|response
operator|.
name|getResourceSpecs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDestinationDirectory
argument_list|()
expr_stmt|;
comment|// Resource's destination path should be now inside sub directory 0 as
comment|// LocalCacheDirectoryManager will be used and we have restricted number
comment|// of files per directory to 1.
name|assertTrue
argument_list|(
name|localizedPath
operator|.
name|getFile
argument_list|()
operator|.
name|endsWith
argument_list|(
name|localPath
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// empty rsrc
name|response
operator|=
name|spyService
operator|.
name|heartbeat
argument_list|(
name|stat
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LocalizerAction
operator|.
name|LIVE
argument_list|,
name|response
operator|.
name|getLocalizerAction
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getResourceSpecs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// get shutdown
name|response
operator|=
name|spyService
operator|.
name|heartbeat
argument_list|(
name|stat
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LocalizerAction
operator|.
name|DIE
argument_list|,
name|response
operator|.
name|getLocalizerAction
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// verify container notification
name|ArgumentMatcher
argument_list|<
name|ContainerEvent
argument_list|>
name|matchesContainerLoc
init|=
operator|new
name|ArgumentMatcher
argument_list|<
name|ContainerEvent
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|ContainerEvent
name|evt
init|=
operator|(
name|ContainerEvent
operator|)
name|o
decl_stmt|;
return|return
name|evt
operator|.
name|getType
argument_list|()
operator|==
name|ContainerEventType
operator|.
name|RESOURCE_LOCALIZED
operator|&&
name|c
operator|.
name|getContainerID
argument_list|()
operator|==
name|evt
operator|.
name|getContainerID
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|// total 2 resource localzation calls. one for each resource.
name|verify
argument_list|(
name|containerBus
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
name|matchesContainerLoc
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify deletion of localization token.
name|verify
argument_list|(
name|delService
argument_list|)
operator|.
name|delete
argument_list|(
operator|(
name|String
operator|)
name|isNull
argument_list|()
argument_list|,
name|eq
argument_list|(
name|localizationTokenPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|spyService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
name|delService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// mocked generics
DECL|method|testFailedPublicResource ()
specifier|public
name|void
name|testFailedPublicResource
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|AbstractFileSystem
name|spylfs
init|=
name|spy
argument_list|(
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|getDefaultFileSystem
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|FileContext
name|lfs
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|spylfs
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|spylfs
argument_list|)
operator|.
name|mkdir
argument_list|(
name|isA
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|FsPermission
operator|.
name|class
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|localDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|sDirs
init|=
operator|new
name|String
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|localDirs
operator|.
name|add
argument_list|(
name|lfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
name|i
operator|+
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sDirs
index|[
name|i
index|]
operator|=
name|localDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|sDirs
argument_list|)
expr_stmt|;
name|String
name|logDir
init|=
name|lfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
literal|"logdir "
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|logDir
argument_list|)
expr_stmt|;
name|DrainDispatcher
name|dispatcher
init|=
operator|new
name|DrainDispatcher
argument_list|()
decl_stmt|;
name|EventHandler
argument_list|<
name|ApplicationEvent
argument_list|>
name|applicationBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ApplicationEventType
operator|.
name|class
argument_list|,
name|applicationBus
argument_list|)
expr_stmt|;
name|EventHandler
argument_list|<
name|ContainerEvent
argument_list|>
name|containerBus
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainerEventType
operator|.
name|class
argument_list|,
name|containerBus
argument_list|)
expr_stmt|;
name|ContainerExecutor
name|exec
init|=
name|mock
argument_list|(
name|ContainerExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|DeletionService
name|delService
init|=
name|mock
argument_list|(
name|DeletionService
operator|.
name|class
argument_list|)
decl_stmt|;
name|LocalDirsHandlerService
name|dirsHandler
init|=
operator|new
name|LocalDirsHandlerService
argument_list|()
decl_stmt|;
name|dirsHandler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|ResourceLocalizationService
name|rawService
init|=
operator|new
name|ResourceLocalizationService
argument_list|(
name|dispatcher
argument_list|,
name|exec
argument_list|,
name|delService
argument_list|,
name|dirsHandler
argument_list|)
decl_stmt|;
name|ResourceLocalizationService
name|spyService
init|=
name|spy
argument_list|(
name|rawService
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|mockServer
argument_list|)
operator|.
name|when
argument_list|(
name|spyService
argument_list|)
operator|.
name|createServer
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|lfs
argument_list|)
operator|.
name|when
argument_list|(
name|spyService
argument_list|)
operator|.
name|getLocalFileContext
argument_list|(
name|isA
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|String
name|user
init|=
literal|"user0"
decl_stmt|;
comment|// init application
specifier|final
name|Application
name|app
init|=
name|mock
argument_list|(
name|Application
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ApplicationId
name|appId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|314159265358979L
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ApplicationLocalizationEvent
argument_list|(
name|LocalizationEventType
operator|.
name|INIT_APPLICATION_RESOURCES
argument_list|,
name|app
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// init container.
specifier|final
name|Container
name|c
init|=
name|getMockContainer
argument_list|(
name|appId
argument_list|,
literal|42
argument_list|)
decl_stmt|;
comment|// init resources
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SEED: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
comment|// cause chmod to fail after a delay
specifier|final
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{             }
catch|catch
parameter_list|(
name|BrokenBarrierException
name|e
parameter_list|)
block|{             }
throw|throw
operator|new
name|IOException
argument_list|(
literal|"forced failure"
argument_list|)
throw|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|spylfs
argument_list|)
operator|.
name|setPermission
argument_list|(
name|isA
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|FsPermission
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Queue up two localization requests for the same public resource
specifier|final
name|LocalResource
name|pubResource
init|=
name|getPublicMockedResource
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|LocalResourceRequest
name|pubReq
init|=
operator|new
name|LocalResourceRequest
argument_list|(
name|pubResource
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
name|req
init|=
operator|new
name|HashMap
argument_list|<
name|LocalResourceVisibility
argument_list|,
name|Collection
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|req
operator|.
name|put
argument_list|(
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|pubReq
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|LocalResourceRequest
argument_list|>
name|pubRsrcs
init|=
operator|new
name|HashSet
argument_list|<
name|LocalResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|pubRsrcs
operator|.
name|add
argument_list|(
name|pubReq
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationRequestEvent
argument_list|(
name|c
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|spyService
operator|.
name|handle
argument_list|(
operator|new
name|ContainerLocalizationRequestEvent
argument_list|(
name|c
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// allow the chmod to fail now that both requests have been queued
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|containerBus
argument_list|,
name|timeout
argument_list|(
literal|5000
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|isA
argument_list|(
name|ContainerResourceFailedEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getPath (String path)
specifier|private
specifier|static
name|URL
name|getPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|URL
name|url
init|=
name|BuilderUtils
operator|.
name|newURL
argument_list|(
literal|"file"
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|path
argument_list|)
decl_stmt|;
return|return
name|url
return|;
block|}
DECL|method|getMockedResource (Random r, LocalResourceVisibility vis)
specifier|private
specifier|static
name|LocalResource
name|getMockedResource
parameter_list|(
name|Random
name|r
parameter_list|,
name|LocalResourceVisibility
name|vis
parameter_list|)
block|{
name|String
name|name
init|=
name|Long
operator|.
name|toHexString
argument_list|(
name|r
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
name|getPath
argument_list|(
literal|"/local/PRIVATE/"
operator|+
name|name
argument_list|)
decl_stmt|;
name|LocalResource
name|rsrc
init|=
name|BuilderUtils
operator|.
name|newLocalResource
argument_list|(
name|url
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|vis
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
literal|1024
argument_list|)
operator|+
literal|1024L
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
literal|1024
argument_list|)
operator|+
literal|2048L
argument_list|)
decl_stmt|;
return|return
name|rsrc
return|;
block|}
DECL|method|getAppMockedResource (Random r)
specifier|private
specifier|static
name|LocalResource
name|getAppMockedResource
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
return|return
name|getMockedResource
argument_list|(
name|r
argument_list|,
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
return|;
block|}
DECL|method|getPublicMockedResource (Random r)
specifier|private
specifier|static
name|LocalResource
name|getPublicMockedResource
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
return|return
name|getMockedResource
argument_list|(
name|r
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|)
return|;
block|}
DECL|method|getPrivateMockedResource (Random r)
specifier|private
specifier|static
name|LocalResource
name|getPrivateMockedResource
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
return|return
name|getMockedResource
argument_list|(
name|r
argument_list|,
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|)
return|;
block|}
DECL|method|getMockContainer (ApplicationId appId, int id)
specifier|private
specifier|static
name|Container
name|getMockContainer
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|Container
name|c
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|cId
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"user0"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getContainerID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|Credentials
name|creds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|creds
operator|.
name|addToken
argument_list|(
operator|new
name|Text
argument_list|(
literal|"tok"
operator|+
name|id
argument_list|)
argument_list|,
name|getToken
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getCredentials
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|creds
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|getToken (int id)
specifier|static
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|getToken
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
operator|new
name|Token
argument_list|(
operator|(
literal|"ident"
operator|+
name|id
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|(
literal|"passwd"
operator|+
name|id
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
literal|"kind"
operator|+
name|id
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"service"
operator|+
name|id
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

