begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * *  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements. See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership. The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License. You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  * /  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|NetworkTagMappingJsonManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|NetworkTagMappingJsonManager
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|NetworkTagMappingJsonManager
operator|.
name|NetworkTagMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|linux
operator|.
name|resources
operator|.
name|NetworkTagMappingJsonManager
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test NetworkTagMapping Json Manager.  *  */
end_comment

begin_class
DECL|class|TestNetworkTagMappingJsonManager
specifier|public
class|class
name|TestNetworkTagMappingJsonManager
block|{
DECL|field|jsonDirDirPath
specifier|private
name|Path
name|jsonDirDirPath
init|=
operator|new
name|Path
argument_list|(
literal|"target/json"
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|jsonDirDirPath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|jsonDirDirPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|jsonDirDirPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|jsonDirDirPath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|jsonDirDirPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testNetworkMappingJsonManager ()
specifier|public
name|void
name|testNetworkMappingJsonManager
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|jsonFilePath
init|=
operator|new
name|Path
argument_list|(
name|jsonDirDirPath
argument_list|,
literal|"test.json"
argument_list|)
decl_stmt|;
name|File
name|jsonFile
init|=
operator|new
name|File
argument_list|(
name|jsonFilePath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|NetworkTagMappingJsonManager
name|manager
init|=
operator|new
name|NetworkTagMappingJsonManager
argument_list|()
decl_stmt|;
name|JSONObject
name|json
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|JSONArray
name|userArray
init|=
operator|new
name|JSONArray
argument_list|()
decl_stmt|;
comment|// add users
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|createdUsers
init|=
name|createUserNetworkTagIDMapping
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|user
range|:
name|createdUsers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|JSONObject
name|userJson
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|userJson
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|user
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|userJson
operator|.
name|put
argument_list|(
literal|"network-tag-id"
argument_list|,
name|user
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|userArray
operator|.
name|put
argument_list|(
name|userJson
argument_list|)
expr_stmt|;
block|}
comment|// add duplicate user1
name|JSONObject
name|duplicateUser1
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|duplicateUser1
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|duplicateUser1
operator|.
name|put
argument_list|(
literal|"network-tag-id"
argument_list|,
literal|"0x88888888"
argument_list|)
expr_stmt|;
name|userArray
operator|.
name|put
argument_list|(
name|duplicateUser1
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"users"
argument_list|,
name|userArray
argument_list|)
expr_stmt|;
name|JSONArray
name|groupArray
init|=
operator|new
name|JSONArray
argument_list|()
decl_stmt|;
comment|// add groups
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|createdGroups
init|=
name|createGroupNetworkTagIDMapping
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|group
range|:
name|createdGroups
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|JSONObject
name|groupJson
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|groupJson
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|group
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|groupJson
operator|.
name|put
argument_list|(
literal|"network-tag-id"
argument_list|,
name|group
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|groupArray
operator|.
name|put
argument_list|(
name|groupJson
argument_list|)
expr_stmt|;
block|}
comment|// add duplicate group1
name|JSONObject
name|duplicateGroup1
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|duplicateGroup1
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"team1"
argument_list|)
expr_stmt|;
name|duplicateGroup1
operator|.
name|put
argument_list|(
literal|"network-tag-id"
argument_list|,
literal|"0x20002003"
argument_list|)
expr_stmt|;
name|groupArray
operator|.
name|put
argument_list|(
name|duplicateGroup1
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"groups"
argument_list|,
name|groupArray
argument_list|)
expr_stmt|;
name|writeJson
argument_list|(
name|jsonFile
argument_list|,
name|json
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NETWORK_TAG_MAPPING_FILE_PATH
argument_list|,
name|jsonFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|manager
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should get an exception. Becase we did not "
operator|+
literal|"set default-network-tag-id"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// Do Nothing
block|}
comment|// add default-network-tag-id
name|json
operator|.
name|put
argument_list|(
literal|"default-network-tag-id"
argument_list|,
literal|"0x99999999"
argument_list|)
expr_stmt|;
comment|// remove previous json file
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|jsonFilePath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|jsonFilePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|jsonFilePath
argument_list|)
argument_list|)
expr_stmt|;
name|writeJson
argument_list|(
name|jsonFile
argument_list|,
name|json
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|NetworkTagMapping
name|networkTagMapping
init|=
name|manager
operator|.
name|getNetworkTagMapping
argument_list|()
decl_stmt|;
comment|// Verify the default-network-tag-id
name|assertTrue
argument_list|(
name|networkTagMapping
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"0x99999999"
operator|.
name|equals
argument_list|(
name|networkTagMapping
operator|.
name|getDefaultNetworkTagID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify the users
name|List
argument_list|<
name|User
argument_list|>
name|users
init|=
name|networkTagMapping
operator|.
name|getUsers
argument_list|()
decl_stmt|;
comment|// The number of users should be 4 which is user1, user2, user3 and user4.
name|assertTrue
argument_list|(
name|users
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|users
operator|.
name|size
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|String
name|userName
init|=
name|users
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|String
name|classId
init|=
name|users
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getNetworkTagID
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|createdUsers
operator|.
name|containsValue
argument_list|(
name|classId
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|createdUserName
init|=
name|getUserName
argument_list|(
name|createdUsers
argument_list|,
name|classId
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|createdUserName
operator|.
name|contains
argument_list|(
name|userName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Verify the groups
name|List
argument_list|<
name|Group
argument_list|>
name|groups
init|=
name|networkTagMapping
operator|.
name|getGroups
argument_list|()
decl_stmt|;
comment|// The number of groups should be 2 which is team1 and team2.
name|assertTrue
argument_list|(
name|groups
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|groups
operator|.
name|size
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|String
name|groupName
init|=
name|groups
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getGroupName
argument_list|()
decl_stmt|;
name|String
name|classId
init|=
name|groups
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getNetworkTagID
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|createdGroups
operator|.
name|containsKey
argument_list|(
name|groupName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|classId
operator|.
name|equals
argument_list|(
name|createdGroups
operator|.
name|get
argument_list|(
name|groupName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testNetworkTagIDMatchPattern ()
specifier|public
name|void
name|testNetworkTagIDMatchPattern
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|jsonFilePath
init|=
operator|new
name|Path
argument_list|(
name|jsonDirDirPath
argument_list|,
literal|"test.json"
argument_list|)
decl_stmt|;
name|File
name|jsonFile
init|=
operator|new
name|File
argument_list|(
name|jsonFilePath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|NetworkTagMappingJsonManager
name|manager
init|=
operator|new
name|NetworkTagMappingJsonManager
argument_list|()
decl_stmt|;
name|JSONObject
name|json
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|JSONArray
name|userArray
init|=
operator|new
name|JSONArray
argument_list|()
decl_stmt|;
name|JSONObject
name|user1
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|user1
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|user1
operator|.
name|put
argument_list|(
literal|"network-tag-id"
argument_list|,
literal|"1x88888888"
argument_list|)
expr_stmt|;
name|userArray
operator|.
name|put
argument_list|(
name|user1
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"users"
argument_list|,
name|userArray
argument_list|)
expr_stmt|;
name|writeJson
argument_list|(
name|jsonFile
argument_list|,
name|json
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NETWORK_TAG_MAPPING_FILE_PATH
argument_list|,
name|jsonFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|manager
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should get an exception. "
operator|+
literal|"Becase we did not set network-tag-id for user1 correctly"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// should catch exception here
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"User-network-tag-id mapping configuraton error."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|json
operator|.
name|remove
argument_list|(
literal|"users"
argument_list|)
expr_stmt|;
name|userArray
operator|=
operator|new
name|JSONArray
argument_list|()
expr_stmt|;
name|user1
operator|=
operator|new
name|JSONObject
argument_list|()
expr_stmt|;
name|user1
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|user1
operator|.
name|put
argument_list|(
literal|"network-tag-id"
argument_list|,
literal|"0x88888888"
argument_list|)
expr_stmt|;
name|userArray
operator|.
name|put
argument_list|(
name|user1
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"users"
argument_list|,
name|userArray
argument_list|)
expr_stmt|;
name|JSONArray
name|groupArray
init|=
operator|new
name|JSONArray
argument_list|()
decl_stmt|;
name|JSONObject
name|group1
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|group1
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"team1"
argument_list|)
expr_stmt|;
name|group1
operator|.
name|put
argument_list|(
literal|"network-tag-id"
argument_list|,
literal|"0x2000003"
argument_list|)
expr_stmt|;
name|groupArray
operator|.
name|put
argument_list|(
name|group1
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"groups"
argument_list|,
name|groupArray
argument_list|)
expr_stmt|;
comment|// remove previous json file
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|jsonFilePath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|jsonFilePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|jsonFilePath
argument_list|)
argument_list|)
expr_stmt|;
name|writeJson
argument_list|(
name|jsonFile
argument_list|,
name|json
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|manager
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should get an exception. "
operator|+
literal|"Becase we did not set network-tag-id for group1 correctly"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// should catch exception here
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Group-network-tag-id mapping configuraton error."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|json
operator|.
name|remove
argument_list|(
literal|"groups"
argument_list|)
expr_stmt|;
name|groupArray
operator|=
operator|new
name|JSONArray
argument_list|()
expr_stmt|;
name|group1
operator|=
operator|new
name|JSONObject
argument_list|()
expr_stmt|;
name|group1
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"team1"
argument_list|)
expr_stmt|;
name|group1
operator|.
name|put
argument_list|(
literal|"network-tag-id"
argument_list|,
literal|"0x20002003"
argument_list|)
expr_stmt|;
name|groupArray
operator|.
name|put
argument_list|(
name|group1
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"groups"
argument_list|,
name|groupArray
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"default-network-tag-id"
argument_list|,
literal|"0x99"
argument_list|)
expr_stmt|;
comment|// remove previous json file
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|jsonFilePath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|jsonFilePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|jsonFilePath
argument_list|)
argument_list|)
expr_stmt|;
name|writeJson
argument_list|(
name|jsonFile
argument_list|,
name|json
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|manager
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should get an exception. "
operator|+
literal|"Becase we did not set default-network-tag-id correctly"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// should catch exception here
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Configuration error on default-network-tag-id."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|json
operator|.
name|remove
argument_list|(
literal|"default-network-tag-id"
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"default-network-tag-id"
argument_list|,
literal|"0x99999999"
argument_list|)
expr_stmt|;
comment|// remove previous json file
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|jsonFilePath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|jsonFilePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|jsonFilePath
argument_list|)
argument_list|)
expr_stmt|;
name|writeJson
argument_list|(
name|jsonFile
argument_list|,
name|json
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|writeJson (File jsonFile, String jsonStr)
specifier|private
name|void
name|writeJson
parameter_list|(
name|File
name|jsonFile
parameter_list|,
name|String
name|jsonStr
parameter_list|)
throws|throws
name|IOException
block|{
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
operator|new
name|FileWriter
argument_list|(
name|jsonFile
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|jsonStr
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|createUserNetworkTagIDMapping ()
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|createUserNetworkTagIDMapping
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|classIdMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|classIdMap
operator|.
name|put
argument_list|(
literal|"user1"
argument_list|,
literal|"0x10001001"
argument_list|)
expr_stmt|;
name|classIdMap
operator|.
name|put
argument_list|(
literal|"user2"
argument_list|,
literal|"0x10001002"
argument_list|)
expr_stmt|;
name|classIdMap
operator|.
name|put
argument_list|(
literal|"user3,user4"
argument_list|,
literal|"0x10001003"
argument_list|)
expr_stmt|;
return|return
name|classIdMap
return|;
block|}
DECL|method|createGroupNetworkTagIDMapping ()
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|createGroupNetworkTagIDMapping
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|classIdMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|classIdMap
operator|.
name|put
argument_list|(
literal|"team1"
argument_list|,
literal|"0x20002001"
argument_list|)
expr_stmt|;
name|classIdMap
operator|.
name|put
argument_list|(
literal|"team2"
argument_list|,
literal|"0x20002002"
argument_list|)
expr_stmt|;
return|return
name|classIdMap
return|;
block|}
DECL|method|getUserName (Map<String, String> userMapping, String classId)
specifier|private
name|String
name|getUserName
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|userMapping
parameter_list|,
name|String
name|classId
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|o
range|:
name|userMapping
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|o
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|classId
argument_list|)
condition|)
block|{
return|return
name|o
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

