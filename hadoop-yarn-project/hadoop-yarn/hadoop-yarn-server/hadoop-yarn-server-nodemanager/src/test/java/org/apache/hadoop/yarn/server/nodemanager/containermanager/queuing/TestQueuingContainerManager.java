begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.queuing
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|queuing
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnsupportedFileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerStatusesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|NMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DeletionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|BaseContainerManagerTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|ContainerManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|TestContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|ContainersMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|ContainersMonitorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|MockResourceCalculatorPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|MockResourceCalculatorProcessTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|TestQueuingContainerManager
specifier|public
class|class
name|TestQueuingContainerManager
extends|extends
name|TestContainerManager
block|{
DECL|interface|HasResources
interface|interface
name|HasResources
block|{
DECL|method|decide (Context context, ContainerId cId)
name|boolean
name|decide
parameter_list|(
name|Context
name|context
parameter_list|,
name|ContainerId
name|cId
parameter_list|)
function_decl|;
block|}
DECL|method|TestQueuingContainerManager ()
specifier|public
name|TestQueuingContainerManager
parameter_list|()
throws|throws
name|UnsupportedFileSystemException
block|{
name|super
argument_list|()
expr_stmt|;
block|}
static|static
block|{
name|LOG
operator|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestQueuingContainerManager
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|field|hasResources
name|HasResources
name|hasResources
init|=
literal|null
decl_stmt|;
DECL|field|shouldDeleteWait
name|boolean
name|shouldDeleteWait
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|ContainerManagerImpl
DECL|method|createContainerManager (DeletionService delSrvc)
name|createContainerManager
parameter_list|(
name|DeletionService
name|delSrvc
parameter_list|)
block|{
return|return
operator|new
name|QueuingContainerManagerImpl
argument_list|(
name|context
argument_list|,
name|exec
argument_list|,
name|delSrvc
argument_list|,
name|nodeStatusUpdater
argument_list|,
name|metrics
argument_list|,
name|dirsHandler
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CONTAINER_MON_RESOURCE_CALCULATOR
argument_list|,
name|MockResourceCalculatorPlugin
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CONTAINER_MON_PROCESS_TREE
argument_list|,
name|MockResourceCalculatorProcessTree
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setBlockNewContainerRequests
parameter_list|(
name|boolean
name|blockNewContainerRequests
parameter_list|)
block|{
comment|// do nothing
block|}
annotation|@
name|Override
specifier|protected
name|UserGroupInformation
name|getRemoteUgi
parameter_list|()
throws|throws
name|YarnException
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ugi
operator|.
name|addTokenIdentifier
argument_list|(
operator|new
name|NMTokenIdentifier
argument_list|(
name|appAttemptId
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|context
operator|.
name|getNMTokenSecretManager
argument_list|()
operator|.
name|getCurrentKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ugi
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|authorizeGetAndStopContainerRequest
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Container
name|container
parameter_list|,
name|boolean
name|stopRequest
parameter_list|,
name|NMTokenIdentifier
name|identifier
parameter_list|)
throws|throws
name|YarnException
block|{
if|if
condition|(
name|container
operator|==
literal|null
operator|||
name|container
operator|.
name|getUser
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Fail"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Reject this container"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|ContainersMonitor
name|createContainersMonitor
parameter_list|(
name|ContainerExecutor
name|exec
parameter_list|)
block|{
return|return
operator|new
name|ContainersMonitorImpl
argument_list|(
name|exec
argument_list|,
name|dispatcher
argument_list|,
name|this
operator|.
name|context
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasResourcesAvailable
parameter_list|(
name|ContainersMonitorImpl
operator|.
name|ProcessTreeInfo
name|pti
parameter_list|)
block|{
return|return
name|hasResources
operator|.
name|decide
argument_list|(
name|this
operator|.
name|context
argument_list|,
name|pti
operator|.
name|getContainerId
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|createDeletionService ()
specifier|protected
name|DeletionService
name|createDeletionService
parameter_list|()
block|{
return|return
operator|new
name|DeletionService
argument_list|(
name|exec
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|(
name|String
name|user
parameter_list|,
name|Path
name|subDir
parameter_list|,
name|Path
modifier|...
name|baseDirs
parameter_list|)
block|{
comment|// Don't do any deletions.
if|if
condition|(
name|shouldDeleteWait
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"\n\nSleeping Pseudo delete : user - "
operator|+
name|user
operator|+
literal|", "
operator|+
literal|"subDir - "
operator|+
name|subDir
operator|+
literal|", "
operator|+
literal|"baseDirs - "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|baseDirs
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"\n\nPseudo delete : user - "
operator|+
name|user
operator|+
literal|", "
operator|+
literal|"subDir - "
operator|+
name|subDir
operator|+
literal|", "
operator|+
literal|"baseDirs - "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|baseDirs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|shouldDeleteWait
operator|=
literal|false
expr_stmt|;
name|hasResources
operator|=
operator|new
name|HasResources
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|decide
parameter_list|(
name|Context
name|context
parameter_list|,
name|ContainerId
name|cId
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
expr_stmt|;
block|}
comment|/**    * Test to verify that an OPPORTUNISTIC container is killed when    * a GUARANTEED container arrives and all the Node Resources are used up    *    * For this specific test case, 4 containers are requested (last one being    * guaranteed). Assumptions :    * 1) The first OPPORTUNISTIC Container will start running    * 2) The second and third OPP containers will be queued    * 3) When the GUARANTEED container comes in, the running OPP container    *    will be killed to make room    * 4) After the GUARANTEED container finishes, the remaining 2 OPP    *    containers will be dequeued and run.    * 5) Only the first OPP container will be killed.    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testSimpleOpportunisticContainer ()
specifier|public
name|void
name|testSimpleOpportunisticContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|shouldDeleteWait
operator|=
literal|true
expr_stmt|;
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// ////// Create the resources for the container
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"dir"
argument_list|)
decl_stmt|;
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|PrintWriter
name|fileWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"Hello World!"
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// ////// Construct the container-spec.
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|URL
name|resource_alpha
init|=
name|ConverterUtils
operator|.
name|getYarnUrlFromPath
argument_list|(
name|localFS
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|LocalResource
name|rsrc_alpha
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|rsrc_alpha
operator|.
name|setResource
argument_list|(
name|resource_alpha
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setVisibility
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setType
argument_list|(
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setTimestamp
argument_list|(
name|file
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|destinationFile
init|=
literal|"dest_file"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|destinationFile
argument_list|,
name|rsrc_alpha
argument_list|)
expr_stmt|;
name|containerLaunchContext
operator|.
name|setLocalResources
argument_list|(
name|localResources
argument_list|)
expr_stmt|;
comment|// Start 3 OPPORTUNISTIC containers and 1 GUARANTEED container
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|2
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// GUARANTEED
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|3
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
comment|// Plugin to simulate that the Node is full
comment|// It only allows 1 container to run at a time.
name|hasResources
operator|=
operator|new
name|HasResources
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|decide
parameter_list|(
name|Context
name|context
parameter_list|,
name|ContainerId
name|cId
parameter_list|)
block|{
name|int
name|nOpp
init|=
operator|(
operator|(
name|QueuingContainerManagerImpl
operator|)
name|containerManager
operator|)
operator|.
name|getNumAllocatedOpportunisticContainers
argument_list|()
decl_stmt|;
name|int
name|nGuar
init|=
operator|(
operator|(
name|QueuingContainerManagerImpl
operator|)
name|containerManager
operator|)
operator|.
name|getNumAllocatedGuaranteedContainers
argument_list|()
decl_stmt|;
name|boolean
name|val
init|=
operator|(
name|nOpp
operator|+
name|nGuar
operator|<
literal|1
operator|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nHasResources : ["
operator|+
name|cId
operator|+
literal|"],"
operator|+
literal|"Opp["
operator|+
name|nOpp
operator|+
literal|"], Guar["
operator|+
name|nGuar
operator|+
literal|"], ["
operator|+
name|val
operator|+
literal|"]\n"
argument_list|)
expr_stmt|;
return|return
name|val
return|;
block|}
block|}
expr_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForContainerState
argument_list|(
name|containerManager
argument_list|,
name|createContainerId
argument_list|(
literal|3
argument_list|)
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|statList
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|statList
operator|.
name|add
argument_list|(
name|createContainerId
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|GetContainerStatusesRequest
name|statRequest
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|statList
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|statRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerStatus
name|status
range|:
name|containerStatuses
control|)
block|{
comment|// Ensure that the first opportunistic container is killed
if|if
condition|(
name|status
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|status
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Container killed by the ApplicationMaster"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nStatus : ["
operator|+
name|status
operator|+
literal|"]\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

