begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.queuing
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|queuing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnsupportedFileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerStatusesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StopContainersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|NMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DeletionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|BaseContainerManagerTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|ContainerManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|ContainersMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|monitor
operator|.
name|ContainersMonitorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Class for testing the {@link QueuingContainerManagerImpl}.  */
end_comment

begin_class
DECL|class|TestQueuingContainerManager
specifier|public
class|class
name|TestQueuingContainerManager
extends|extends
name|BaseContainerManagerTest
block|{
DECL|method|TestQueuingContainerManager ()
specifier|public
name|TestQueuingContainerManager
parameter_list|()
throws|throws
name|UnsupportedFileSystemException
block|{
name|super
argument_list|()
expr_stmt|;
block|}
static|static
block|{
name|LOG
operator|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestQueuingContainerManager
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|field|shouldDeleteWait
name|boolean
name|shouldDeleteWait
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
DECL|method|createContainerManager ( DeletionService delSrvc)
specifier|protected
name|ContainerManagerImpl
name|createContainerManager
parameter_list|(
name|DeletionService
name|delSrvc
parameter_list|)
block|{
return|return
operator|new
name|QueuingContainerManagerImpl
argument_list|(
name|context
argument_list|,
name|exec
argument_list|,
name|delSrvc
argument_list|,
name|nodeStatusUpdater
argument_list|,
name|metrics
argument_list|,
name|dirsHandler
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|setBlockNewContainerRequests
parameter_list|(
name|boolean
name|blockNewContainerRequests
parameter_list|)
block|{
comment|// do nothing
block|}
annotation|@
name|Override
specifier|protected
name|UserGroupInformation
name|getRemoteUgi
parameter_list|()
throws|throws
name|YarnException
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ugi
operator|.
name|addTokenIdentifier
argument_list|(
operator|new
name|NMTokenIdentifier
argument_list|(
name|appAttemptId
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|context
operator|.
name|getNMTokenSecretManager
argument_list|()
operator|.
name|getCurrentKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ugi
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ContainersMonitor
name|createContainersMonitor
parameter_list|(
name|ContainerExecutor
name|exec
parameter_list|)
block|{
return|return
operator|new
name|ContainersMonitorImpl
argument_list|(
name|exec
argument_list|,
name|dispatcher
argument_list|,
name|this
operator|.
name|context
argument_list|)
block|{
comment|// Define resources available for containers to be executed.
annotation|@
name|Override
specifier|public
name|long
name|getPmemAllocatedForContainers
parameter_list|()
block|{
return|return
literal|2048
operator|*
literal|1024
operator|*
literal|1024L
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getVmemAllocatedForContainers
parameter_list|()
block|{
name|float
name|pmemRatio
init|=
name|getConfig
argument_list|()
operator|.
name|getFloat
argument_list|(
name|YarnConfiguration
operator|.
name|NM_VMEM_PMEM_RATIO
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_VMEM_PMEM_RATIO
argument_list|)
decl_stmt|;
return|return
call|(
name|long
call|)
argument_list|(
name|pmemRatio
operator|*
name|getPmemAllocatedForContainers
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getVCoresAllocatedForContainers
parameter_list|()
block|{
return|return
literal|4
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|createDeletionService ()
specifier|protected
name|DeletionService
name|createDeletionService
parameter_list|()
block|{
return|return
operator|new
name|DeletionService
argument_list|(
name|exec
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|(
name|String
name|user
parameter_list|,
name|Path
name|subDir
parameter_list|,
name|Path
modifier|...
name|baseDirs
parameter_list|)
block|{
comment|// Don't do any deletions.
if|if
condition|(
name|shouldDeleteWait
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"\n\nSleeping Pseudo delete : user - "
operator|+
name|user
operator|+
literal|", "
operator|+
literal|"subDir - "
operator|+
name|subDir
operator|+
literal|", "
operator|+
literal|"baseDirs - "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|baseDirs
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"\n\nPseudo delete : user - "
operator|+
name|user
operator|+
literal|", "
operator|+
literal|"subDir - "
operator|+
name|subDir
operator|+
literal|", "
operator|+
literal|"baseDirs - "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|baseDirs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|shouldDeleteWait
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * Starting one GUARANTEED and one OPPORTUNISTIC container.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testStartMultipleContainers ()
specifier|public
name|void
name|testStartMultipleContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|shouldDeleteWait
operator|=
literal|true
expr_stmt|;
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForContainerState
argument_list|(
name|containerManager
argument_list|,
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForContainerState
argument_list|(
name|containerManager
argument_list|,
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// Ensure all containers are running.
name|List
argument_list|<
name|ContainerId
argument_list|>
name|statList
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|statList
operator|.
name|add
argument_list|(
name|createContainerId
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|GetContainerStatusesRequest
name|statRequest
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|statList
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|statRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerStatus
name|status
range|:
name|containerStatuses
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|status
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Submit both a GUARANTEED and an OPPORTUNISTIC container, each of which    * requires more resources than available at the node, and make sure they    * are both queued.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testQueueMultipleContainers ()
specifier|public
name|void
name|testQueueMultipleContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|shouldDeleteWait
operator|=
literal|true
expr_stmt|;
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|3072
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|3072
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|// Ensure both containers are queued.
name|List
argument_list|<
name|ContainerId
argument_list|>
name|statList
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|statList
operator|.
name|add
argument_list|(
name|createContainerId
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|GetContainerStatusesRequest
name|statRequest
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|statList
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|statRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerStatus
name|status
range|:
name|containerStatuses
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|QUEUED
argument_list|,
name|status
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Ensure both containers are properly queued.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|containerManager
operator|.
name|getContext
argument_list|()
operator|.
name|getQueuingContext
argument_list|()
operator|.
name|getQueuedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|QueuingContainerManagerImpl
operator|)
name|containerManager
operator|)
operator|.
name|getNumQueuedGuaranteedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|QueuingContainerManagerImpl
operator|)
name|containerManager
operator|)
operator|.
name|getNumQueuedOpportunisticContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Starts one OPPORTUNISTIC container that takes up the whole node's    * resources, and submit two more that will be queued.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testStartAndQueueMultipleContainers ()
specifier|public
name|void
name|testStartAndQueueMultipleContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|shouldDeleteWait
operator|=
literal|true
expr_stmt|;
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|2
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|// Ensure first container is running and others are queued.
name|List
argument_list|<
name|ContainerId
argument_list|>
name|statList
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|statList
operator|.
name|add
argument_list|(
name|createContainerId
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|GetContainerStatusesRequest
name|statRequest
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|statRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerStatus
name|status
range|:
name|containerStatuses
control|)
block|{
if|if
condition|(
name|status
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|status
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|QUEUED
argument_list|,
name|status
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Ensure two containers are properly queued.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|containerManager
operator|.
name|getContext
argument_list|()
operator|.
name|getQueuingContext
argument_list|()
operator|.
name|getQueuedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|QueuingContainerManagerImpl
operator|)
name|containerManager
operator|)
operator|.
name|getNumQueuedGuaranteedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|QueuingContainerManagerImpl
operator|)
name|containerManager
operator|)
operator|.
name|getNumQueuedOpportunisticContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Submit two OPPORTUNISTIC and one GUARANTEED containers. The resources    * requests by each container as such that only one can run in parallel.    * Thus, the OPPORTUNISTIC container that started running, will be    * killed for the GUARANTEED container to start.    * Once the GUARANTEED container finishes its execution, the remaining    * OPPORTUNISTIC container will be executed.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testKillOpportunisticForGuaranteedContainer ()
specifier|public
name|void
name|testKillOpportunisticForGuaranteedContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|shouldDeleteWait
operator|=
literal|true
expr_stmt|;
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|2
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForNMContainerState
argument_list|(
name|containerManager
argument_list|,
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|// Get container statuses. Container 0 should be killed, container 1
comment|// should be queued and container 2 should be running.
name|List
argument_list|<
name|ContainerId
argument_list|>
name|statList
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|statList
operator|.
name|add
argument_list|(
name|createContainerId
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|GetContainerStatusesRequest
name|statRequest
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|statList
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|statRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerStatus
name|status
range|:
name|containerStatuses
control|)
block|{
if|if
condition|(
name|status
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|status
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Container killed by the ApplicationMaster"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|QUEUED
argument_list|,
name|status
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|createContainerId
argument_list|(
literal|2
argument_list|)
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|status
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nStatus : ["
operator|+
name|status
operator|+
literal|"]\n"
argument_list|)
expr_stmt|;
block|}
comment|// Make sure the remaining OPPORTUNISTIC container starts its execution.
name|BaseContainerManagerTest
operator|.
name|waitForNMContainerState
argument_list|(
name|containerManager
argument_list|,
name|createContainerId
argument_list|(
literal|2
argument_list|)
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|statRequest
operator|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerStatus
name|contStatus1
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|statRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|contStatus1
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Submit three OPPORTUNISTIC containers that can run concurrently, and one    * GUARANTEED that needs to kill two of the OPPORTUNISTIC for it to run.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testKillMultipleOpportunisticContainers ()
specifier|public
name|void
name|testKillMultipleOpportunisticContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|shouldDeleteWait
operator|=
literal|true
expr_stmt|;
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|2
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|3
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1500
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForNMContainerState
argument_list|(
name|containerManager
argument_list|,
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|// Get container statuses. Container 0 should be killed, container 1
comment|// should be queued and container 2 should be running.
name|int
name|killedContainers
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|statList
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|statList
operator|.
name|add
argument_list|(
name|createContainerId
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|GetContainerStatusesRequest
name|statRequest
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|statList
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|statRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerStatus
name|status
range|:
name|containerStatuses
control|)
block|{
if|if
condition|(
name|status
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Container killed by the ApplicationMaster"
argument_list|)
condition|)
block|{
name|killedContainers
operator|++
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nStatus : ["
operator|+
name|status
operator|+
literal|"]\n"
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|killedContainers
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start running one GUARANTEED container and queue two OPPORTUNISTIC ones.    * Try killing one of the two queued containers.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testStopQueuedContainer ()
specifier|public
name|void
name|testStopQueuedContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|shouldDeleteWait
operator|=
literal|true
expr_stmt|;
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|createContainerId
argument_list|(
literal|2
argument_list|)
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|user
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// Assert there is initially one container running and two queued.
name|int
name|runningContainersNo
init|=
literal|0
decl_stmt|;
name|int
name|queuedContainersNo
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|statList
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|statList
operator|.
name|add
argument_list|(
name|createContainerId
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|GetContainerStatusesRequest
name|statRequest
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|statList
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|statRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerStatus
name|status
range|:
name|containerStatuses
control|)
block|{
if|if
condition|(
name|status
operator|.
name|getState
argument_list|()
operator|==
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|RUNNING
condition|)
block|{
name|runningContainersNo
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|.
name|getState
argument_list|()
operator|==
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|QUEUED
condition|)
block|{
name|queuedContainersNo
operator|++
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nStatus : ["
operator|+
name|status
operator|+
literal|"]\n"
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|runningContainersNo
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queuedContainersNo
argument_list|)
expr_stmt|;
comment|// Stop one of the two queued containers.
name|StopContainersRequest
name|stopRequest
init|=
name|StopContainersRequest
operator|.
name|newInstance
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|stopContainers
argument_list|(
name|stopRequest
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// Assert queued container got properly stopped.
name|statList
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|statList
operator|.
name|add
argument_list|(
name|createContainerId
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|statRequest
operator|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|statList
argument_list|)
expr_stmt|;
name|containerStatuses
operator|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|statRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
expr_stmt|;
for|for
control|(
name|ContainerStatus
name|status
range|:
name|containerStatuses
control|)
block|{
if|if
condition|(
name|status
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|createContainerId
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|status
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|createContainerId
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|status
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Queued container request removed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|createContainerId
argument_list|(
literal|2
argument_list|)
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
operator|.
name|QUEUED
argument_list|,
name|status
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nStatus : ["
operator|+
name|status
operator|+
literal|"]\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

