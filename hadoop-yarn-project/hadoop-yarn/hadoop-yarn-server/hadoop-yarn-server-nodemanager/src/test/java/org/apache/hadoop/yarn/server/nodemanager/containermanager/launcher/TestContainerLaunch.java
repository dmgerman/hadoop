begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.launcher
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnsupportedFileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|ExitCodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerStatusesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StopContainersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NMContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|ContainerExecutor
operator|.
name|ExitCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DefaultContainerExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeManager
operator|.
name|NMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|BaseContainerManagerTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerExitEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|launcher
operator|.
name|ContainerLaunch
operator|.
name|ShellScriptBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|ContainerLocalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMNullStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|security
operator|.
name|NMContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|security
operator|.
name|NMTokenSecretManagerInNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Apps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|AuxiliaryServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|LinuxResourceCalculatorPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ResourceCalculatorPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestContainerLaunch
specifier|public
class|class
name|TestContainerLaunch
extends|extends
name|BaseContainerManagerTest
block|{
DECL|field|INVALID_JAVA_HOME
specifier|private
specifier|static
specifier|final
name|String
name|INVALID_JAVA_HOME
init|=
literal|"/no/jvm/here"
decl_stmt|;
DECL|field|distContext
specifier|protected
name|Context
name|distContext
init|=
operator|new
name|NMContext
argument_list|(
operator|new
name|NMContainerTokenSecretManager
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|NMTokenSecretManagerInNM
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|new
name|ApplicationACLsManager
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|NMNullStateStoreService
argument_list|()
argument_list|)
block|{
specifier|public
name|int
name|getHttpPort
parameter_list|()
block|{
return|return
name|HTTP_PORT
return|;
block|}
empty_stmt|;
specifier|public
name|NodeId
name|getNodeId
parameter_list|()
block|{
return|return
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"ahost"
argument_list|,
literal|1234
argument_list|)
return|;
block|}
empty_stmt|;
block|}
decl_stmt|;
DECL|method|TestContainerLaunch ()
specifier|public
name|TestContainerLaunch
parameter_list|()
throws|throws
name|UnsupportedFileSystemException
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|NM_MON_RESOURCE_CALCULATOR
argument_list|,
name|LinuxResourceCalculatorPlugin
operator|.
name|class
argument_list|,
name|ResourceCalculatorPlugin
operator|.
name|class
argument_list|)
expr_stmt|;
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpecialCharSymlinks ()
specifier|public
name|void
name|testSpecialCharSymlinks
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|shellFile
init|=
literal|null
decl_stmt|;
name|File
name|tempFile
init|=
literal|null
decl_stmt|;
name|String
name|badSymlink
init|=
name|Shell
operator|.
name|WINDOWS
condition|?
literal|"foo@zz_#!-+bar.cmd"
else|:
literal|"foo@zz%_#*&!-+= bar()"
decl_stmt|;
name|File
name|symLinkFile
init|=
literal|null
decl_stmt|;
try|try
block|{
name|shellFile
operator|=
name|Shell
operator|.
name|appendScriptExtension
argument_list|(
name|tmpDir
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|tempFile
operator|=
name|Shell
operator|.
name|appendScriptExtension
argument_list|(
name|tmpDir
argument_list|,
literal|"temp"
argument_list|)
expr_stmt|;
name|String
name|timeoutCommand
init|=
name|Shell
operator|.
name|WINDOWS
condition|?
literal|"@echo \"hello\""
else|:
literal|"echo \"hello\""
decl_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|shellFile
argument_list|)
argument_list|)
decl_stmt|;
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|shellFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|timeoutCommand
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|resources
init|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|shellFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|resources
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|badSymlink
argument_list|)
argument_list|)
expr_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|tempFile
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|commands
operator|.
name|add
argument_list|(
literal|"cmd"
argument_list|)
expr_stmt|;
name|commands
operator|.
name|add
argument_list|(
literal|"/c"
argument_list|)
expr_stmt|;
name|commands
operator|.
name|add
argument_list|(
literal|"\""
operator|+
name|badSymlink
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|commands
operator|.
name|add
argument_list|(
literal|"/bin/sh ./\\\""
operator|+
name|badSymlink
operator|+
literal|"\\\""
argument_list|)
expr_stmt|;
block|}
operator|new
name|DefaultContainerExecutor
argument_list|()
operator|.
name|writeLaunchEnv
argument_list|(
name|fos
argument_list|,
name|env
argument_list|,
name|resources
argument_list|,
name|commands
argument_list|,
operator|new
name|Path
argument_list|(
name|localLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
name|tempFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|tempFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Shell
operator|.
name|ShellCommandExecutor
name|shexc
init|=
operator|new
name|Shell
operator|.
name|ShellCommandExecutor
argument_list|(
operator|new
name|String
index|[]
block|{
name|tempFile
operator|.
name|getAbsolutePath
argument_list|()
block|}
argument_list|,
name|tmpDir
argument_list|)
decl_stmt|;
name|shexc
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|shexc
operator|.
name|getExitCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|shexc
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"hello"
argument_list|)
operator|)
assert|;
name|symLinkFile
operator|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
name|badSymlink
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// cleanup
if|if
condition|(
name|shellFile
operator|!=
literal|null
operator|&&
name|shellFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|shellFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|tempFile
operator|!=
literal|null
operator|&&
name|tempFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|tempFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|symLinkFile
operator|!=
literal|null
operator|&&
name|symLinkFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|symLinkFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// test the diagnostics are generated
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testInvalidSymlinkDiagnostics ()
specifier|public
name|void
name|testInvalidSymlinkDiagnostics
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|shellFile
init|=
literal|null
decl_stmt|;
name|File
name|tempFile
init|=
literal|null
decl_stmt|;
name|String
name|symLink
init|=
name|Shell
operator|.
name|WINDOWS
condition|?
literal|"test.cmd"
else|:
literal|"test"
decl_stmt|;
name|File
name|symLinkFile
init|=
literal|null
decl_stmt|;
try|try
block|{
name|shellFile
operator|=
name|Shell
operator|.
name|appendScriptExtension
argument_list|(
name|tmpDir
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|tempFile
operator|=
name|Shell
operator|.
name|appendScriptExtension
argument_list|(
name|tmpDir
argument_list|,
literal|"temp"
argument_list|)
expr_stmt|;
name|String
name|timeoutCommand
init|=
name|Shell
operator|.
name|WINDOWS
condition|?
literal|"@echo \"hello\""
else|:
literal|"echo \"hello\""
decl_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|shellFile
argument_list|)
argument_list|)
decl_stmt|;
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|shellFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|timeoutCommand
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|resources
init|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|//This is an invalid path and should throw exception because of No such file.
name|Path
name|invalidPath
init|=
operator|new
name|Path
argument_list|(
name|shellFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"randomPath"
argument_list|)
decl_stmt|;
name|resources
operator|.
name|put
argument_list|(
name|invalidPath
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|symLink
argument_list|)
argument_list|)
expr_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|tempFile
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|commands
operator|.
name|add
argument_list|(
literal|"cmd"
argument_list|)
expr_stmt|;
name|commands
operator|.
name|add
argument_list|(
literal|"/c"
argument_list|)
expr_stmt|;
name|commands
operator|.
name|add
argument_list|(
literal|"\""
operator|+
name|symLink
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|commands
operator|.
name|add
argument_list|(
literal|"/bin/sh ./\\\""
operator|+
name|symLink
operator|+
literal|"\\\""
argument_list|)
expr_stmt|;
block|}
operator|new
name|DefaultContainerExecutor
argument_list|()
operator|.
name|writeLaunchEnv
argument_list|(
name|fos
argument_list|,
name|env
argument_list|,
name|resources
argument_list|,
name|commands
argument_list|,
operator|new
name|Path
argument_list|(
name|localLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|tempFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Shell
operator|.
name|ShellCommandExecutor
name|shexc
init|=
operator|new
name|Shell
operator|.
name|ShellCommandExecutor
argument_list|(
operator|new
name|String
index|[]
block|{
name|tempFile
operator|.
name|getAbsolutePath
argument_list|()
block|}
argument_list|,
name|tmpDir
argument_list|)
decl_stmt|;
name|String
name|diagnostics
init|=
literal|null
decl_stmt|;
try|try
block|{
name|shexc
operator|.
name|execute
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should catch exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitCodeException
name|e
parameter_list|)
block|{
name|diagnostics
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|diagnostics
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|shexc
operator|.
name|getExitCode
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|symLinkFile
operator|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
name|symLink
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// cleanup
if|if
condition|(
name|shellFile
operator|!=
literal|null
operator|&&
name|shellFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|shellFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|tempFile
operator|!=
literal|null
operator|&&
name|tempFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|tempFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|symLinkFile
operator|!=
literal|null
operator|&&
name|symLinkFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|symLinkFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testInvalidEnvSyntaxDiagnostics ()
specifier|public
name|void
name|testInvalidEnvSyntaxDiagnostics
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|shellFile
init|=
literal|null
decl_stmt|;
try|try
block|{
name|shellFile
operator|=
name|Shell
operator|.
name|appendScriptExtension
argument_list|(
name|tmpDir
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|resources
init|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|shellFile
argument_list|)
decl_stmt|;
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|shellFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// invalid env
name|env
operator|.
name|put
argument_list|(
literal|"APPLICATION_WORKFLOW_CONTEXT"
argument_list|,
literal|"{\"workflowId\":\"609f91c5cd83\","
operator|+
literal|"\"workflowName\":\"\n\ninsert table "
operator|+
literal|"\npartition (cd_education_status)\nselect cd_demo_sk, cd_gender, "
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
operator|new
name|DefaultContainerExecutor
argument_list|()
operator|.
name|writeLaunchEnv
argument_list|(
name|fos
argument_list|,
name|env
argument_list|,
name|resources
argument_list|,
name|commands
argument_list|,
operator|new
name|Path
argument_list|(
name|localLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// It is supposed that LANG is set as C.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cmdEnv
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|cmdEnv
operator|.
name|put
argument_list|(
literal|"LANG"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|Shell
operator|.
name|ShellCommandExecutor
name|shexc
init|=
operator|new
name|Shell
operator|.
name|ShellCommandExecutor
argument_list|(
operator|new
name|String
index|[]
block|{
name|shellFile
operator|.
name|getAbsolutePath
argument_list|()
block|}
argument_list|,
name|tmpDir
argument_list|,
name|cmdEnv
argument_list|)
decl_stmt|;
name|String
name|diagnostics
init|=
literal|null
decl_stmt|;
try|try
block|{
name|shexc
operator|.
name|execute
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should catch exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitCodeException
name|e
parameter_list|)
block|{
name|diagnostics
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|diagnostics
operator|.
name|contains
argument_list|(
name|Shell
operator|.
name|WINDOWS
condition|?
literal|"is not recognized as an internal or external command"
else|:
literal|"command not found"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|shexc
operator|.
name|getExitCode
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// cleanup
if|if
condition|(
name|shellFile
operator|!=
literal|null
operator|&&
name|shellFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|shellFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testEnvExpansion ()
specifier|public
name|void
name|testEnvExpansion
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|logPath
init|=
operator|new
name|Path
argument_list|(
literal|"/nm/container/logs"
argument_list|)
decl_stmt|;
name|String
name|input
init|=
name|Apps
operator|.
name|crossPlatformify
argument_list|(
literal|"HADOOP_HOME"
argument_list|)
operator|+
literal|"/share/hadoop/common/*"
operator|+
name|ApplicationConstants
operator|.
name|CLASS_PATH_SEPARATOR
operator|+
name|Apps
operator|.
name|crossPlatformify
argument_list|(
literal|"HADOOP_HOME"
argument_list|)
operator|+
literal|"/share/hadoop/common/lib/*"
operator|+
name|ApplicationConstants
operator|.
name|CLASS_PATH_SEPARATOR
operator|+
name|Apps
operator|.
name|crossPlatformify
argument_list|(
literal|"HADOOP_LOG_HOME"
argument_list|)
operator|+
name|ApplicationConstants
operator|.
name|LOG_DIR_EXPANSION_VAR
decl_stmt|;
name|String
name|res
init|=
name|ContainerLaunch
operator|.
name|expandEnvironment
argument_list|(
name|input
argument_list|,
name|logPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"%HADOOP_HOME%/share/hadoop/common/*;"
operator|+
literal|"%HADOOP_HOME%/share/hadoop/common/lib/*;"
operator|+
literal|"%HADOOP_LOG_HOME%/nm/container/logs"
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"$HADOOP_HOME/share/hadoop/common/*:"
operator|+
literal|"$HADOOP_HOME/share/hadoop/common/lib/*:"
operator|+
literal|"$HADOOP_LOG_HOME/nm/container/logs"
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testContainerLaunchStdoutAndStderrDiagnostics ()
specifier|public
name|void
name|testContainerLaunchStdoutAndStderrDiagnostics
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|shellFile
init|=
literal|null
decl_stmt|;
try|try
block|{
name|shellFile
operator|=
name|Shell
operator|.
name|appendScriptExtension
argument_list|(
name|tmpDir
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
comment|// echo "hello" to stdout and "error" to stderr and exit code with 2;
name|String
name|command
init|=
name|Shell
operator|.
name|WINDOWS
condition|?
literal|"@echo \"hello\"& @echo \"error\" 1>&2& exit /b 2"
else|:
literal|"echo \"hello\"; echo \"error\" 1>&2; exit 2;"
decl_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|shellFile
argument_list|)
argument_list|)
decl_stmt|;
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|shellFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|resources
init|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|shellFile
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|commands
operator|.
name|add
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|ContainerExecutor
name|exec
init|=
operator|new
name|DefaultContainerExecutor
argument_list|()
decl_stmt|;
name|exec
operator|.
name|writeLaunchEnv
argument_list|(
name|fos
argument_list|,
name|env
argument_list|,
name|resources
argument_list|,
name|commands
argument_list|,
operator|new
name|Path
argument_list|(
name|localLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|Shell
operator|.
name|ShellCommandExecutor
name|shexc
init|=
operator|new
name|Shell
operator|.
name|ShellCommandExecutor
argument_list|(
operator|new
name|String
index|[]
block|{
name|shellFile
operator|.
name|getAbsolutePath
argument_list|()
block|}
argument_list|,
name|tmpDir
argument_list|)
decl_stmt|;
name|String
name|diagnostics
init|=
literal|null
decl_stmt|;
try|try
block|{
name|shexc
operator|.
name|execute
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should catch exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitCodeException
name|e
parameter_list|)
block|{
name|diagnostics
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
comment|// test stderr
name|Assert
operator|.
name|assertTrue
argument_list|(
name|diagnostics
operator|.
name|contains
argument_list|(
literal|"error"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test stdout
name|Assert
operator|.
name|assertTrue
argument_list|(
name|shexc
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|shexc
operator|.
name|getExitCode
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// cleanup
if|if
condition|(
name|shellFile
operator|!=
literal|null
operator|&&
name|shellFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|shellFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testPrependDistcache ()
specifier|public
name|void
name|testPrependDistcache
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test is only relevant on Windows
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|Shell
operator|.
name|WINDOWS
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|cId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|userSetEnv
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|userSetEnv
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|CONTAINER_ID
operator|.
name|name
argument_list|()
argument_list|,
literal|"user_set_container_id"
argument_list|)
expr_stmt|;
name|userSetEnv
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|NM_HOST
operator|.
name|name
argument_list|()
argument_list|,
literal|"user_set_NM_HOST"
argument_list|)
expr_stmt|;
name|userSetEnv
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|NM_PORT
operator|.
name|name
argument_list|()
argument_list|,
literal|"user_set_NM_PORT"
argument_list|)
expr_stmt|;
name|userSetEnv
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|NM_HTTP_PORT
operator|.
name|name
argument_list|()
argument_list|,
literal|"user_set_NM_HTTP_PORT"
argument_list|)
expr_stmt|;
name|userSetEnv
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|LOCAL_DIRS
operator|.
name|name
argument_list|()
argument_list|,
literal|"user_set_LOCAL_DIR"
argument_list|)
expr_stmt|;
name|userSetEnv
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|USER
operator|.
name|key
argument_list|()
argument_list|,
literal|"user_set_"
operator|+
name|Environment
operator|.
name|USER
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
name|userSetEnv
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|LOGNAME
operator|.
name|name
argument_list|()
argument_list|,
literal|"user_set_LOGNAME"
argument_list|)
expr_stmt|;
name|userSetEnv
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PWD
operator|.
name|name
argument_list|()
argument_list|,
literal|"user_set_PWD"
argument_list|)
expr_stmt|;
name|userSetEnv
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|HOME
operator|.
name|name
argument_list|()
argument_list|,
literal|"user_set_HOME"
argument_list|)
expr_stmt|;
name|userSetEnv
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|CLASSPATH
operator|.
name|name
argument_list|()
argument_list|,
literal|"APATH"
argument_list|)
expr_stmt|;
name|containerLaunchContext
operator|.
name|setEnvironment
argument_list|(
name|userSetEnv
argument_list|)
expr_stmt|;
name|Container
name|container
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getLaunchContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerLaunchContext
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Dispatcher
name|dispatcher
init|=
name|mock
argument_list|(
name|Dispatcher
operator|.
name|class
argument_list|)
decl_stmt|;
name|EventHandler
name|eventHandler
init|=
operator|new
name|EventHandler
argument_list|()
block|{
specifier|public
name|void
name|handle
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|event
operator|instanceof
name|ContainerExitEvent
argument_list|)
expr_stmt|;
name|ContainerExitEvent
name|exitEvent
init|=
operator|(
name|ContainerExitEvent
operator|)
name|event
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_FAILURE
argument_list|,
name|exitEvent
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|when
argument_list|(
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|eventHandler
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|ContainerLaunch
name|launch
init|=
operator|new
name|ContainerLaunch
argument_list|(
name|distContext
argument_list|,
name|conf
argument_list|,
name|dispatcher
argument_list|,
name|exec
argument_list|,
literal|null
argument_list|,
name|container
argument_list|,
name|dirsHandler
argument_list|,
name|containerManager
argument_list|)
decl_stmt|;
name|String
name|testDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"target/test-dir"
argument_list|)
decl_stmt|;
name|Path
name|pwd
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|appDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|containerLogs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|resources
init|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Path
name|userjar
init|=
operator|new
name|Path
argument_list|(
literal|"user.jar"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lpaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|lpaths
operator|.
name|add
argument_list|(
literal|"userjarlink.jar"
argument_list|)
expr_stmt|;
name|resources
operator|.
name|put
argument_list|(
name|userjar
argument_list|,
name|lpaths
argument_list|)
expr_stmt|;
name|Path
name|nmp
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|)
decl_stmt|;
name|launch
operator|.
name|sanitizeEnv
argument_list|(
name|userSetEnv
argument_list|,
name|pwd
argument_list|,
name|appDirs
argument_list|,
name|containerLogs
argument_list|,
name|resources
argument_list|,
name|nmp
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|getJarManifestClasspath
argument_list|(
name|userSetEnv
operator|.
name|get
argument_list|(
name|Environment
operator|.
name|CLASSPATH
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"userjarlink.jar"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Then, with user classpath first
name|userSetEnv
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|CLASSPATH_PREPEND_DISTCACHE
operator|.
name|name
argument_list|()
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|cId
operator|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|launch
operator|=
operator|new
name|ContainerLaunch
argument_list|(
name|distContext
argument_list|,
name|conf
argument_list|,
name|dispatcher
argument_list|,
name|exec
argument_list|,
literal|null
argument_list|,
name|container
argument_list|,
name|dirsHandler
argument_list|,
name|containerManager
argument_list|)
expr_stmt|;
name|launch
operator|.
name|sanitizeEnv
argument_list|(
name|userSetEnv
argument_list|,
name|pwd
argument_list|,
name|appDirs
argument_list|,
name|containerLogs
argument_list|,
name|resources
argument_list|,
name|nmp
argument_list|)
expr_stmt|;
name|result
operator|=
name|getJarManifestClasspath
argument_list|(
name|userSetEnv
operator|.
name|get
argument_list|(
name|Environment
operator|.
name|CLASSPATH
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"userjarlink.jar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testErrorLogOnContainerExit ()
specifier|public
name|void
name|testErrorLogOnContainerExit
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyTailErrorLogOnContainerExit
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
literal|"/stderr"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testErrorLogOnContainerExitForCase ()
specifier|public
name|void
name|testErrorLogOnContainerExitForCase
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyTailErrorLogOnContainerExit
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
literal|"/STDERR.log"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testErrorLogOnContainerExitForExt ()
specifier|public
name|void
name|testErrorLogOnContainerExitForExt
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyTailErrorLogOnContainerExit
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
literal|"/AppMaster.stderr"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testErrorLogOnContainerExitWithCustomPattern ()
specifier|public
name|void
name|testErrorLogOnContainerExitWithCustomPattern
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CONTAINER_STDERR_PATTERN
argument_list|,
literal|"{*stderr*,*log*}"
argument_list|)
expr_stmt|;
name|verifyTailErrorLogOnContainerExit
argument_list|(
name|conf
argument_list|,
literal|"/error.log"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testErrorLogOnContainerExitWithMultipleFiles ()
specifier|public
name|void
name|testErrorLogOnContainerExitWithMultipleFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CONTAINER_STDERR_PATTERN
argument_list|,
literal|"{*stderr*,*stdout*}"
argument_list|)
expr_stmt|;
name|verifyTailErrorLogOnContainerExit
argument_list|(
name|conf
argument_list|,
literal|"/stderr.log"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyTailErrorLogOnContainerExit (Configuration conf, String errorFileName, boolean testForMultipleErrFiles)
specifier|private
name|void
name|verifyTailErrorLogOnContainerExit
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|errorFileName
parameter_list|,
name|boolean
name|testForMultipleErrFiles
parameter_list|)
throws|throws
name|Exception
block|{
name|Container
name|container
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|String
name|relativeContainerLogDir
init|=
name|ContainerLaunch
operator|.
name|getRelativeContainerLogDir
argument_list|(
name|appId
operator|.
name|toString
argument_list|()
argument_list|,
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|containerId
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|containerLogDir
init|=
name|dirsHandler
operator|.
name|getLogPathForWrite
argument_list|(
name|relativeContainerLogDir
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|clc
init|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|invalidCommand
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|invalidCommand
operator|.
name|add
argument_list|(
literal|"$JAVA_HOME/bin/java"
argument_list|)
expr_stmt|;
name|invalidCommand
operator|.
name|add
argument_list|(
literal|"-Djava.io.tmpdir=$PWD/tmp"
argument_list|)
expr_stmt|;
name|invalidCommand
operator|.
name|add
argument_list|(
literal|"-Dlog4j.configuration=container-log4j.properties"
argument_list|)
expr_stmt|;
name|invalidCommand
operator|.
name|add
argument_list|(
literal|"-Dyarn.app.container.log.dir="
operator|+
name|containerLogDir
argument_list|)
expr_stmt|;
name|invalidCommand
operator|.
name|add
argument_list|(
literal|"-Dyarn.app.container.log.filesize=0"
argument_list|)
expr_stmt|;
name|invalidCommand
operator|.
name|add
argument_list|(
literal|"-Dhadoop.root.logger=INFO,CLA"
argument_list|)
expr_stmt|;
name|invalidCommand
operator|.
name|add
argument_list|(
literal|"-Dhadoop.root.logfile=syslog"
argument_list|)
expr_stmt|;
name|invalidCommand
operator|.
name|add
argument_list|(
literal|"-Xmx1024m"
argument_list|)
expr_stmt|;
name|invalidCommand
operator|.
name|add
argument_list|(
literal|"org.apache.hadoop.mapreduce.v2.app.MRAppMaster"
argument_list|)
expr_stmt|;
name|invalidCommand
operator|.
name|add
argument_list|(
literal|"1>"
operator|+
name|containerLogDir
operator|+
literal|"/stdout"
argument_list|)
expr_stmt|;
name|invalidCommand
operator|.
name|add
argument_list|(
literal|"2>"
operator|+
name|containerLogDir
operator|+
name|errorFileName
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|clc
operator|.
name|getCommands
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|invalidCommand
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|userSetEnv
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|userSetEnv
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|CONTAINER_ID
operator|.
name|name
argument_list|()
argument_list|,
literal|"user_set_container_id"
argument_list|)
expr_stmt|;
name|userSetEnv
operator|.
name|put
argument_list|(
literal|"JAVA_HOME"
argument_list|,
name|INVALID_JAVA_HOME
argument_list|)
expr_stmt|;
name|userSetEnv
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|NM_HOST
operator|.
name|name
argument_list|()
argument_list|,
literal|"user_set_NM_HOST"
argument_list|)
expr_stmt|;
name|userSetEnv
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|NM_PORT
operator|.
name|name
argument_list|()
argument_list|,
literal|"user_set_NM_PORT"
argument_list|)
expr_stmt|;
name|userSetEnv
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|NM_HTTP_PORT
operator|.
name|name
argument_list|()
argument_list|,
literal|"user_set_NM_HTTP_PORT"
argument_list|)
expr_stmt|;
name|userSetEnv
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|LOCAL_DIRS
operator|.
name|name
argument_list|()
argument_list|,
literal|"user_set_LOCAL_DIR"
argument_list|)
expr_stmt|;
name|userSetEnv
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|USER
operator|.
name|key
argument_list|()
argument_list|,
literal|"user_set_"
operator|+
name|Environment
operator|.
name|USER
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
name|userSetEnv
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|LOGNAME
operator|.
name|name
argument_list|()
argument_list|,
literal|"user_set_LOGNAME"
argument_list|)
expr_stmt|;
name|userSetEnv
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PWD
operator|.
name|name
argument_list|()
argument_list|,
literal|"user_set_PWD"
argument_list|)
expr_stmt|;
name|userSetEnv
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|HOME
operator|.
name|name
argument_list|()
argument_list|,
literal|"user_set_HOME"
argument_list|)
expr_stmt|;
name|userSetEnv
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|CLASSPATH
operator|.
name|name
argument_list|()
argument_list|,
literal|"APATH"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|clc
operator|.
name|getEnvironment
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|userSetEnv
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getLaunchContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clc
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
expr|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|Dispatcher
name|dispatcher
init|=
name|mock
argument_list|(
name|Dispatcher
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|ContainerExitHandler
name|eventHandler
init|=
operator|new
name|ContainerExitHandler
argument_list|(
name|testForMultipleErrFiles
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|eventHandler
argument_list|)
expr_stmt|;
name|Application
name|app
init|=
name|mock
argument_list|(
name|Application
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|Credentials
name|creds
init|=
name|mock
argument_list|(
name|Credentials
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getCredentials
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|creds
argument_list|)
expr_stmt|;
operator|(
operator|(
name|NMContext
operator|)
name|context
operator|)
operator|.
name|setNodeId
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|HTTP_PORT
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerLaunch
name|launch
init|=
operator|new
name|ContainerLaunch
argument_list|(
name|context
argument_list|,
name|conf
argument_list|,
name|dispatcher
argument_list|,
name|exec
argument_list|,
name|app
argument_list|,
name|container
argument_list|,
name|dirsHandler
argument_list|,
name|containerManager
argument_list|)
decl_stmt|;
name|launch
operator|.
name|call
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"ContainerExitEvent should have occured"
argument_list|,
name|eventHandler
operator|.
name|isContainerExitEventOccured
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|ContainerExitHandler
specifier|private
specifier|static
class|class
name|ContainerExitHandler
implements|implements
name|EventHandler
argument_list|<
name|ContainerEvent
argument_list|>
block|{
DECL|field|testForMultiFile
specifier|private
name|boolean
name|testForMultiFile
decl_stmt|;
DECL|method|ContainerExitHandler (boolean testForMultiFile)
name|ContainerExitHandler
parameter_list|(
name|boolean
name|testForMultiFile
parameter_list|)
block|{
name|this
operator|.
name|testForMultiFile
operator|=
name|testForMultiFile
expr_stmt|;
block|}
DECL|field|containerExitEventOccured
name|boolean
name|containerExitEventOccured
init|=
literal|false
decl_stmt|;
DECL|method|isContainerExitEventOccured ()
specifier|public
name|boolean
name|isContainerExitEventOccured
parameter_list|()
block|{
return|return
name|containerExitEventOccured
return|;
block|}
DECL|method|handle (ContainerEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|ContainerEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|instanceof
name|ContainerExitEvent
condition|)
block|{
name|containerExitEventOccured
operator|=
literal|true
expr_stmt|;
name|ContainerExitEvent
name|exitEvent
init|=
operator|(
name|ContainerExitEvent
operator|)
name|event
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_FAILURE
argument_list|,
name|exitEvent
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Diagnostic Info : "
operator|+
name|exitEvent
operator|.
name|getDiagnosticInfo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|testForMultiFile
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should contain the Multi file information"
argument_list|,
name|exitEvent
operator|.
name|getDiagnosticInfo
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Error files: "
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should contain the error Log message with tail size info"
argument_list|,
name|exitEvent
operator|.
name|getDiagnosticInfo
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Last "
operator|+
name|YarnConfiguration
operator|.
name|DEFAULT_NM_CONTAINER_STDERR_BYTES
operator|+
literal|" bytes of"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should contain contents of error Log"
argument_list|,
name|exitEvent
operator|.
name|getDiagnosticInfo
argument_list|()
operator|.
name|contains
argument_list|(
name|INVALID_JAVA_HOME
operator|+
literal|"/bin/java"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getJarManifestClasspath (String path)
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getJarManifestClasspath
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|classpath
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|JarFile
name|jarFile
init|=
operator|new
name|JarFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Manifest
name|manifest
init|=
name|jarFile
operator|.
name|getManifest
argument_list|()
decl_stmt|;
name|String
name|cps
init|=
name|manifest
operator|.
name|getMainAttributes
argument_list|()
operator|.
name|getValue
argument_list|(
literal|"Class-Path"
argument_list|)
decl_stmt|;
name|StringTokenizer
name|cptok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|cps
argument_list|)
decl_stmt|;
while|while
condition|(
name|cptok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|cpentry
init|=
name|cptok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|classpath
operator|.
name|add
argument_list|(
name|cpentry
argument_list|)
expr_stmt|;
block|}
return|return
name|classpath
return|;
block|}
comment|/**    * See if environment variable is forwarded using sanitizeEnv.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testContainerEnvVariables ()
specifier|public
name|void
name|testContainerEnvVariables
parameter_list|()
throws|throws
name|Exception
block|{
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// ////// Construct the Container-id
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|cId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|userSetEnv
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|userSetEnv
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|CONTAINER_ID
operator|.
name|name
argument_list|()
argument_list|,
literal|"user_set_container_id"
argument_list|)
expr_stmt|;
name|userSetEnv
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|NM_HOST
operator|.
name|name
argument_list|()
argument_list|,
literal|"user_set_NM_HOST"
argument_list|)
expr_stmt|;
name|userSetEnv
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|NM_PORT
operator|.
name|name
argument_list|()
argument_list|,
literal|"user_set_NM_PORT"
argument_list|)
expr_stmt|;
name|userSetEnv
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|NM_HTTP_PORT
operator|.
name|name
argument_list|()
argument_list|,
literal|"user_set_NM_HTTP_PORT"
argument_list|)
expr_stmt|;
name|userSetEnv
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|LOCAL_DIRS
operator|.
name|name
argument_list|()
argument_list|,
literal|"user_set_LOCAL_DIR"
argument_list|)
expr_stmt|;
name|userSetEnv
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|USER
operator|.
name|key
argument_list|()
argument_list|,
literal|"user_set_"
operator|+
name|Environment
operator|.
name|USER
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
name|userSetEnv
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|LOGNAME
operator|.
name|name
argument_list|()
argument_list|,
literal|"user_set_LOGNAME"
argument_list|)
expr_stmt|;
name|userSetEnv
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PWD
operator|.
name|name
argument_list|()
argument_list|,
literal|"user_set_PWD"
argument_list|)
expr_stmt|;
name|userSetEnv
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|HOME
operator|.
name|name
argument_list|()
argument_list|,
literal|"user_set_HOME"
argument_list|)
expr_stmt|;
name|containerLaunchContext
operator|.
name|setEnvironment
argument_list|(
name|userSetEnv
argument_list|)
expr_stmt|;
name|File
name|scriptFile
init|=
name|Shell
operator|.
name|appendScriptExtension
argument_list|(
name|tmpDir
argument_list|,
literal|"scriptFile"
argument_list|)
decl_stmt|;
name|PrintWriter
name|fileWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|scriptFile
argument_list|)
decl_stmt|;
name|File
name|processStartFile
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"env_vars.txt"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@echo "
operator|+
name|Environment
operator|.
name|CONTAINER_ID
operator|.
name|$
argument_list|()
operator|+
literal|"> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@echo "
operator|+
name|Environment
operator|.
name|NM_HOST
operator|.
name|$
argument_list|()
operator|+
literal|">> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@echo "
operator|+
name|Environment
operator|.
name|NM_PORT
operator|.
name|$
argument_list|()
operator|+
literal|">> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@echo "
operator|+
name|Environment
operator|.
name|NM_HTTP_PORT
operator|.
name|$
argument_list|()
operator|+
literal|">> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@echo "
operator|+
name|Environment
operator|.
name|LOCAL_DIRS
operator|.
name|$
argument_list|()
operator|+
literal|">> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@echo "
operator|+
name|Environment
operator|.
name|USER
operator|.
name|$
argument_list|()
operator|+
literal|">> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@echo "
operator|+
name|Environment
operator|.
name|LOGNAME
operator|.
name|$
argument_list|()
operator|+
literal|">> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@echo "
operator|+
name|Environment
operator|.
name|PWD
operator|.
name|$
argument_list|()
operator|+
literal|">> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@echo "
operator|+
name|Environment
operator|.
name|HOME
operator|.
name|$
argument_list|()
operator|+
literal|">> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|serviceName
range|:
name|containerManager
operator|.
name|getAuxServiceMetaData
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@echo %"
operator|+
name|AuxiliaryServiceHelper
operator|.
name|NM_AUX_SERVICE
operator|+
name|serviceName
operator|+
literal|"%>> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
block|}
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@echo "
operator|+
name|cId
operator|+
literal|">> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|println
argument_list|(
literal|"@ping -n 100 127.0.0.1>nul"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\numask 0"
argument_list|)
expr_stmt|;
comment|// So that start file is readable by the test
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\necho $"
operator|+
name|Environment
operator|.
name|CONTAINER_ID
operator|.
name|name
argument_list|()
operator|+
literal|"> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\necho $"
operator|+
name|Environment
operator|.
name|NM_HOST
operator|.
name|name
argument_list|()
operator|+
literal|">> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\necho $"
operator|+
name|Environment
operator|.
name|NM_PORT
operator|.
name|name
argument_list|()
operator|+
literal|">> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\necho $"
operator|+
name|Environment
operator|.
name|NM_HTTP_PORT
operator|.
name|name
argument_list|()
operator|+
literal|">> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\necho $"
operator|+
name|Environment
operator|.
name|LOCAL_DIRS
operator|.
name|name
argument_list|()
operator|+
literal|">> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\necho $"
operator|+
name|Environment
operator|.
name|USER
operator|.
name|name
argument_list|()
operator|+
literal|">> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\necho $"
operator|+
name|Environment
operator|.
name|LOGNAME
operator|.
name|name
argument_list|()
operator|+
literal|">> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\necho $"
operator|+
name|Environment
operator|.
name|PWD
operator|.
name|name
argument_list|()
operator|+
literal|">> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\necho $"
operator|+
name|Environment
operator|.
name|HOME
operator|.
name|name
argument_list|()
operator|+
literal|">> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|serviceName
range|:
name|containerManager
operator|.
name|getAuxServiceMetaData
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\necho $"
operator|+
name|AuxiliaryServiceHelper
operator|.
name|NM_AUX_SERVICE
operator|+
name|serviceName
operator|+
literal|">> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
block|}
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\necho $$>> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"\nexec sleep 100"
argument_list|)
expr_stmt|;
block|}
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// upload the script file so that the container can run it
name|URL
name|resource_alpha
init|=
name|ConverterUtils
operator|.
name|getYarnUrlFromPath
argument_list|(
name|localFS
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|scriptFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|LocalResource
name|rsrc_alpha
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|rsrc_alpha
operator|.
name|setResource
argument_list|(
name|resource_alpha
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setVisibility
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setType
argument_list|(
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setTimestamp
argument_list|(
name|scriptFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|destinationFile
init|=
literal|"dest_file"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|destinationFile
argument_list|,
name|rsrc_alpha
argument_list|)
expr_stmt|;
name|containerLaunchContext
operator|.
name|setLocalResources
argument_list|(
name|localResources
argument_list|)
expr_stmt|;
comment|// set up the rest of the container
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Shell
operator|.
name|getRunScriptCommand
argument_list|(
name|scriptFile
argument_list|)
argument_list|)
decl_stmt|;
name|containerLaunchContext
operator|.
name|setCommands
argument_list|(
name|commands
argument_list|)
expr_stmt|;
name|StartContainerRequest
name|scRequest
init|=
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|createContainerToken
argument_list|(
name|cId
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|StartContainerRequest
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|scRequest
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|int
name|timeoutSecs
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|processStartFile
operator|.
name|exists
argument_list|()
operator|&&
name|timeoutSecs
operator|++
operator|<
literal|20
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for process start-file to be created"
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"ProcessStartFile doesn't exist!"
argument_list|,
name|processStartFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now verify the contents of the file
name|List
argument_list|<
name|String
argument_list|>
name|localDirs
init|=
name|dirsHandler
operator|.
name|getLocalDirs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|logDirs
init|=
name|dirsHandler
operator|.
name|getLogDirs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|appDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|(
name|localDirs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|localDir
range|:
name|localDirs
control|)
block|{
name|Path
name|usersdir
init|=
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|ContainerLocalizer
operator|.
name|USERCACHE
argument_list|)
decl_stmt|;
name|Path
name|userdir
init|=
operator|new
name|Path
argument_list|(
name|usersdir
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|Path
name|appsdir
init|=
operator|new
name|Path
argument_list|(
name|userdir
argument_list|,
name|ContainerLocalizer
operator|.
name|APPCACHE
argument_list|)
decl_stmt|;
name|appDirs
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|appsdir
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|containerLogDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|relativeContainerLogDir
init|=
name|ContainerLaunch
operator|.
name|getRelativeContainerLogDir
argument_list|(
name|appId
operator|.
name|toString
argument_list|()
argument_list|,
name|cId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|logDir
range|:
name|logDirs
control|)
block|{
name|containerLogDirs
operator|.
name|add
argument_list|(
name|logDir
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|relativeContainerLogDir
argument_list|)
expr_stmt|;
block|}
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|processStartFile
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|cId
operator|.
name|toString
argument_list|()
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|context
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|context
operator|.
name|getNodeId
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|HTTP_PORT
argument_list|)
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|appDirs
argument_list|)
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|user
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|user
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|obtainedPWD
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Path
name|localDir
range|:
name|appDirs
control|)
block|{
if|if
condition|(
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|cId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|obtainedPWD
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Wrong local-dir found : "
operator|+
name|obtainedPWD
argument_list|,
name|found
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_USER_HOME_DIR
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_USER_HOME_DIR
argument_list|)
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|serviceName
range|:
name|containerManager
operator|.
name|getAuxServiceMetaData
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|containerManager
operator|.
name|getAuxServiceMetaData
argument_list|()
operator|.
name|get
argument_list|(
name|serviceName
argument_list|)
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|reader
operator|.
name|readLine
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|cId
operator|.
name|toString
argument_list|()
argument_list|,
name|containerLaunchContext
operator|.
name|getEnvironment
argument_list|()
operator|.
name|get
argument_list|(
name|Environment
operator|.
name|CONTAINER_ID
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|context
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|,
name|containerLaunchContext
operator|.
name|getEnvironment
argument_list|()
operator|.
name|get
argument_list|(
name|Environment
operator|.
name|NM_HOST
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|context
operator|.
name|getNodeId
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|,
name|containerLaunchContext
operator|.
name|getEnvironment
argument_list|()
operator|.
name|get
argument_list|(
name|Environment
operator|.
name|NM_PORT
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|HTTP_PORT
argument_list|)
argument_list|,
name|containerLaunchContext
operator|.
name|getEnvironment
argument_list|()
operator|.
name|get
argument_list|(
name|Environment
operator|.
name|NM_HTTP_PORT
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|appDirs
argument_list|)
argument_list|,
name|containerLaunchContext
operator|.
name|getEnvironment
argument_list|()
operator|.
name|get
argument_list|(
name|Environment
operator|.
name|LOCAL_DIRS
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|containerLogDirs
argument_list|)
argument_list|,
name|containerLaunchContext
operator|.
name|getEnvironment
argument_list|()
operator|.
name|get
argument_list|(
name|Environment
operator|.
name|LOG_DIRS
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|user
argument_list|,
name|containerLaunchContext
operator|.
name|getEnvironment
argument_list|()
operator|.
name|get
argument_list|(
name|Environment
operator|.
name|USER
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|user
argument_list|,
name|containerLaunchContext
operator|.
name|getEnvironment
argument_list|()
operator|.
name|get
argument_list|(
name|Environment
operator|.
name|LOGNAME
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|found
operator|=
literal|false
expr_stmt|;
name|obtainedPWD
operator|=
name|containerLaunchContext
operator|.
name|getEnvironment
argument_list|()
operator|.
name|get
argument_list|(
name|Environment
operator|.
name|PWD
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|localDir
range|:
name|appDirs
control|)
block|{
if|if
condition|(
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|cId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|obtainedPWD
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Wrong local-dir found : "
operator|+
name|obtainedPWD
argument_list|,
name|found
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_USER_HOME_DIR
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_USER_HOME_DIR
argument_list|)
argument_list|,
name|containerLaunchContext
operator|.
name|getEnvironment
argument_list|()
operator|.
name|get
argument_list|(
name|Environment
operator|.
name|HOME
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get the pid of the process
name|String
name|pid
init|=
name|reader
operator|.
name|readLine
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// No more lines
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now test the stop functionality.
comment|// Assert that the process is alive
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Process is not alive!"
argument_list|,
name|DefaultContainerExecutor
operator|.
name|containerIsAlive
argument_list|(
name|pid
argument_list|)
argument_list|)
expr_stmt|;
comment|// Once more
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Process is not alive!"
argument_list|,
name|DefaultContainerExecutor
operator|.
name|containerIsAlive
argument_list|(
name|pid
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now test the stop functionality.
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containerIds
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
name|containerIds
operator|.
name|add
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|StopContainersRequest
name|stopRequest
init|=
name|StopContainersRequest
operator|.
name|newInstance
argument_list|(
name|containerIds
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|stopContainers
argument_list|(
name|stopRequest
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForContainerState
argument_list|(
name|containerManager
argument_list|,
name|cId
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|GetContainerStatusesRequest
name|gcsRequest
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|containerIds
argument_list|)
decl_stmt|;
name|ContainerStatus
name|containerStatus
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|gcsRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|expectedExitCode
init|=
name|ContainerExitStatus
operator|.
name|KILLED_BY_APPMASTER
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedExitCode
argument_list|,
name|containerStatus
operator|.
name|getExitStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert that the process is not alive anymore
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Process is still alive!"
argument_list|,
name|DefaultContainerExecutor
operator|.
name|containerIsAlive
argument_list|(
name|pid
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testAuxiliaryServiceHelper ()
specifier|public
name|void
name|testAuxiliaryServiceHelper
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|serviceName
init|=
literal|"testAuxiliaryService"
decl_stmt|;
name|ByteBuffer
name|bb
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
literal|"testAuxiliaryService"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|AuxiliaryServiceHelper
operator|.
name|setServiceDataIntoEnv
argument_list|(
name|serviceName
argument_list|,
name|bb
argument_list|,
name|env
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bb
argument_list|,
name|AuxiliaryServiceHelper
operator|.
name|getServiceDataFromEnv
argument_list|(
name|serviceName
argument_list|,
name|env
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|internalKillTest (boolean delayed)
specifier|private
name|void
name|internalKillTest
parameter_list|(
name|boolean
name|delayed
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_SLEEP_DELAY_BEFORE_SIGKILL_MS
argument_list|,
name|delayed
condition|?
literal|1000
else|:
literal|0
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// ////// Construct the Container-id
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|cId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|File
name|processStartFile
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"pid.txt"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
comment|// setup a script that can handle sigterm gracefully
name|File
name|scriptFile
init|=
name|Shell
operator|.
name|appendScriptExtension
argument_list|(
name|tmpDir
argument_list|,
literal|"testscript"
argument_list|)
decl_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|scriptFile
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"@echo \"Running testscript for delayed kill\""
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"@echo \"Writing pid to start file\""
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"@echo "
operator|+
name|cId
operator|+
literal|"> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"@ping -n 100 127.0.0.1>nul"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"#!/bin/bash\n\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"echo \"Running testscript for delayed kill\""
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"hello=\"Got SIGTERM\""
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"umask 0"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"trap \"echo $hello>> "
operator|+
name|processStartFile
operator|+
literal|"\" SIGTERM"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"echo \"Writing pid to start file\""
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"echo $$>> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"while true; do\nsleep 1s;\ndone"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|scriptFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// upload the script file so that the container can run it
name|URL
name|resource_alpha
init|=
name|ConverterUtils
operator|.
name|getYarnUrlFromPath
argument_list|(
name|localFS
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|scriptFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|LocalResource
name|rsrc_alpha
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|rsrc_alpha
operator|.
name|setResource
argument_list|(
name|resource_alpha
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setVisibility
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setType
argument_list|(
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setTimestamp
argument_list|(
name|scriptFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|destinationFile
init|=
literal|"dest_file.sh"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|destinationFile
argument_list|,
name|rsrc_alpha
argument_list|)
expr_stmt|;
name|containerLaunchContext
operator|.
name|setLocalResources
argument_list|(
name|localResources
argument_list|)
expr_stmt|;
comment|// set up the rest of the container
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Shell
operator|.
name|getRunScriptCommand
argument_list|(
name|scriptFile
argument_list|)
argument_list|)
decl_stmt|;
name|containerLaunchContext
operator|.
name|setCommands
argument_list|(
name|commands
argument_list|)
expr_stmt|;
name|Priority
name|priority
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|long
name|createTime
init|=
literal|1234
decl_stmt|;
name|Token
name|containerToken
init|=
name|createContainerToken
argument_list|(
name|cId
argument_list|,
name|priority
argument_list|,
name|createTime
argument_list|)
decl_stmt|;
name|StartContainerRequest
name|scRequest
init|=
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|containerToken
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|StartContainerRequest
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|scRequest
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|int
name|timeoutSecs
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|processStartFile
operator|.
name|exists
argument_list|()
operator|&&
name|timeoutSecs
operator|++
operator|<
literal|20
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for process start-file to be created"
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"ProcessStartFile doesn't exist!"
argument_list|,
name|processStartFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|NMContainerStatus
name|nmContainerStatus
init|=
name|containerManager
operator|.
name|getContext
argument_list|()
operator|.
name|getContainers
argument_list|()
operator|.
name|get
argument_list|(
name|cId
argument_list|)
operator|.
name|getNMContainerStatus
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|priority
argument_list|,
name|nmContainerStatus
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now test the stop functionality.
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containerIds
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
name|containerIds
operator|.
name|add
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|StopContainersRequest
name|stopRequest
init|=
name|StopContainersRequest
operator|.
name|newInstance
argument_list|(
name|containerIds
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|stopContainers
argument_list|(
name|stopRequest
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForContainerState
argument_list|(
name|containerManager
argument_list|,
name|cId
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
comment|// if delayed container stop sends a sigterm followed by a sigkill
comment|// otherwise sigkill is sent immediately
name|GetContainerStatusesRequest
name|gcsRequest
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|containerIds
argument_list|)
decl_stmt|;
name|ContainerStatus
name|containerStatus
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|gcsRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerExitStatus
operator|.
name|KILLED_BY_APPMASTER
argument_list|,
name|containerStatus
operator|.
name|getExitStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now verify the contents of the file.  Script generates a message when it
comment|// receives a sigterm so we look for that.  We cannot perform this check on
comment|// Windows, because the process is not notified when killed by winutils.
comment|// There is no way for the process to trap and respond.  Instead, we can
comment|// verify that the job object with ID matching container ID no longer exists.
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
operator|||
operator|!
name|delayed
condition|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Process is still alive!"
argument_list|,
name|DefaultContainerExecutor
operator|.
name|containerIsAlive
argument_list|(
name|cId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|processStartFile
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|foundSigTermMessage
init|=
literal|false
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
literal|"SIGTERM"
argument_list|)
condition|)
block|{
name|foundSigTermMessage
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Did not find sigterm message"
argument_list|,
name|foundSigTermMessage
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testDelayedKill ()
specifier|public
name|void
name|testDelayedKill
parameter_list|()
throws|throws
name|Exception
block|{
name|internalKillTest
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testImmediateKill ()
specifier|public
name|void
name|testImmediateKill
parameter_list|()
throws|throws
name|Exception
block|{
name|internalKillTest
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testCallFailureWithNullLocalizedResources ()
specifier|public
name|void
name|testCallFailureWithNullLocalizedResources
parameter_list|()
block|{
name|Container
name|container
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|clc
init|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|clc
operator|.
name|getCommands
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getLaunchContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clc
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getLocalizedResources
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Dispatcher
name|dispatcher
init|=
name|mock
argument_list|(
name|Dispatcher
operator|.
name|class
argument_list|)
decl_stmt|;
name|EventHandler
name|eventHandler
init|=
operator|new
name|EventHandler
argument_list|()
block|{
specifier|public
name|void
name|handle
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|event
operator|instanceof
name|ContainerExitEvent
argument_list|)
expr_stmt|;
name|ContainerExitEvent
name|exitEvent
init|=
operator|(
name|ContainerExitEvent
operator|)
name|event
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerEventType
operator|.
name|CONTAINER_EXITED_WITH_FAILURE
argument_list|,
name|exitEvent
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|when
argument_list|(
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|eventHandler
argument_list|)
expr_stmt|;
name|ContainerLaunch
name|launch
init|=
operator|new
name|ContainerLaunch
argument_list|(
name|context
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|,
name|dispatcher
argument_list|,
name|exec
argument_list|,
literal|null
argument_list|,
name|container
argument_list|,
name|dirsHandler
argument_list|,
name|containerManager
argument_list|)
decl_stmt|;
name|launch
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
DECL|method|createContainerToken (ContainerId cId, Priority priority, long createTime)
specifier|protected
name|Token
name|createContainerToken
parameter_list|(
name|ContainerId
name|cId
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|long
name|createTime
parameter_list|)
throws|throws
name|InvalidToken
block|{
name|Resource
name|r
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerTokenIdentifier
name|containerTokenIdentifier
init|=
operator|new
name|ContainerTokenIdentifier
argument_list|(
name|cId
argument_list|,
name|context
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|user
argument_list|,
name|r
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|10000L
argument_list|,
literal|123
argument_list|,
name|DUMMY_RM_IDENTIFIER
argument_list|,
name|priority
argument_list|,
name|createTime
argument_list|)
decl_stmt|;
name|Token
name|containerToken
init|=
name|BuilderUtils
operator|.
name|newContainerToken
argument_list|(
name|context
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|context
operator|.
name|getContainerTokenSecretManager
argument_list|()
operator|.
name|retrievePassword
argument_list|(
name|containerTokenIdentifier
argument_list|)
argument_list|,
name|containerTokenIdentifier
argument_list|)
decl_stmt|;
return|return
name|containerToken
return|;
block|}
comment|/**    * Test that script exists with non-zero exit code when command fails.    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testShellScriptBuilderNonZeroExitCode ()
specifier|public
name|void
name|testShellScriptBuilderNonZeroExitCode
parameter_list|()
throws|throws
name|IOException
block|{
name|ShellScriptBuilder
name|builder
init|=
name|ShellScriptBuilder
operator|.
name|create
argument_list|()
decl_stmt|;
name|builder
operator|.
name|command
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"unknownCommand"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|shellFile
init|=
name|Shell
operator|.
name|appendScriptExtension
argument_list|(
name|tmpDir
argument_list|,
literal|"testShellScriptBuilderError"
argument_list|)
decl_stmt|;
name|PrintStream
name|writer
init|=
operator|new
name|PrintStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|shellFile
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|write
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|shellFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Shell
operator|.
name|ShellCommandExecutor
name|shexc
init|=
operator|new
name|Shell
operator|.
name|ShellCommandExecutor
argument_list|(
operator|new
name|String
index|[]
block|{
name|shellFile
operator|.
name|getAbsolutePath
argument_list|()
block|}
argument_list|,
name|tmpDir
argument_list|)
decl_stmt|;
try|try
block|{
name|shexc
operator|.
name|execute
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"builder shell command was expected to throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Received an expected exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|shellFile
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|expectedMessage
specifier|private
specifier|static
specifier|final
name|String
name|expectedMessage
init|=
literal|"The command line has a length of"
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testWindowsShellScriptBuilderCommand ()
specifier|public
name|void
name|testWindowsShellScriptBuilderCommand
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|callCmd
init|=
literal|"@call "
decl_stmt|;
comment|// Test is only relevant on Windows
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|Shell
operator|.
name|WINDOWS
argument_list|)
expr_stmt|;
comment|// The tests are built on assuming 8191 max command line length
name|assertEquals
argument_list|(
literal|8191
argument_list|,
name|Shell
operator|.
name|WINDOWS_MAX_SHELL_LENGTH
argument_list|)
expr_stmt|;
name|ShellScriptBuilder
name|builder
init|=
name|ShellScriptBuilder
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// Basic tests: less length, exact length, max+1 length
name|builder
operator|.
name|command
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"A"
argument_list|,
literal|1024
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|command
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"E"
argument_list|,
name|Shell
operator|.
name|WINDOWS_MAX_SHELL_LENGTH
operator|-
name|callCmd
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|builder
operator|.
name|command
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"X"
argument_list|,
name|Shell
operator|.
name|WINDOWS_MAX_SHELL_LENGTH
operator|-
name|callCmd
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"longCommand was expected to throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
name|containsString
argument_list|(
name|expectedMessage
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Composite tests, from parts: less, exact and +
name|builder
operator|.
name|command
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"A"
argument_list|,
literal|1024
argument_list|)
argument_list|,
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"A"
argument_list|,
literal|1024
argument_list|)
argument_list|,
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"A"
argument_list|,
literal|1024
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// buildr.command joins the command parts with an extra space
name|builder
operator|.
name|command
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"E"
argument_list|,
literal|4095
argument_list|)
argument_list|,
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"E"
argument_list|,
literal|2047
argument_list|)
argument_list|,
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"E"
argument_list|,
literal|2047
operator|-
name|callCmd
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|builder
operator|.
name|command
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"X"
argument_list|,
literal|4095
argument_list|)
argument_list|,
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"X"
argument_list|,
literal|2047
argument_list|)
argument_list|,
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"X"
argument_list|,
literal|2048
operator|-
name|callCmd
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"long commands was expected to throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
name|containsString
argument_list|(
name|expectedMessage
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testWindowsShellScriptBuilderEnv ()
specifier|public
name|void
name|testWindowsShellScriptBuilderEnv
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Test is only relevant on Windows
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|Shell
operator|.
name|WINDOWS
argument_list|)
expr_stmt|;
comment|// The tests are built on assuming 8191 max command line length
name|assertEquals
argument_list|(
literal|8191
argument_list|,
name|Shell
operator|.
name|WINDOWS_MAX_SHELL_LENGTH
argument_list|)
expr_stmt|;
name|ShellScriptBuilder
name|builder
init|=
name|ShellScriptBuilder
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// test env
name|builder
operator|.
name|env
argument_list|(
literal|"somekey"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"A"
argument_list|,
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|env
argument_list|(
literal|"somekey"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"A"
argument_list|,
name|Shell
operator|.
name|WINDOWS_MAX_SHELL_LENGTH
operator|-
operator|(
literal|"@set somekey="
operator|)
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|builder
operator|.
name|env
argument_list|(
literal|"somekey"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"A"
argument_list|,
name|Shell
operator|.
name|WINDOWS_MAX_SHELL_LENGTH
operator|-
operator|(
literal|"@set somekey="
operator|)
operator|.
name|length
argument_list|()
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"long env was expected to throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
name|containsString
argument_list|(
name|expectedMessage
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testWindowsShellScriptBuilderMkdir ()
specifier|public
name|void
name|testWindowsShellScriptBuilderMkdir
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|mkDirCmd
init|=
literal|"@if not exist \"\" mkdir \"\""
decl_stmt|;
comment|// Test is only relevant on Windows
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|Shell
operator|.
name|WINDOWS
argument_list|)
expr_stmt|;
comment|// The tests are built on assuming 8191 max command line length
name|assertEquals
argument_list|(
literal|8191
argument_list|,
name|Shell
operator|.
name|WINDOWS_MAX_SHELL_LENGTH
argument_list|)
expr_stmt|;
name|ShellScriptBuilder
name|builder
init|=
name|ShellScriptBuilder
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// test mkdir
name|builder
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"A"
argument_list|,
literal|1024
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"E"
argument_list|,
operator|(
name|Shell
operator|.
name|WINDOWS_MAX_SHELL_LENGTH
operator|-
name|mkDirCmd
operator|.
name|length
argument_list|()
operator|)
operator|/
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|builder
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"X"
argument_list|,
operator|(
name|Shell
operator|.
name|WINDOWS_MAX_SHELL_LENGTH
operator|-
name|mkDirCmd
operator|.
name|length
argument_list|()
operator|)
operator|/
literal|2
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"long mkdir was expected to throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
name|containsString
argument_list|(
name|expectedMessage
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testWindowsShellScriptBuilderLink ()
specifier|public
name|void
name|testWindowsShellScriptBuilderLink
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Test is only relevant on Windows
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|Shell
operator|.
name|WINDOWS
argument_list|)
expr_stmt|;
name|String
name|linkCmd
init|=
literal|"@"
operator|+
name|Shell
operator|.
name|getWinUtilsPath
argument_list|()
operator|+
literal|" symlink \"\" \"\""
decl_stmt|;
comment|// The tests are built on assuming 8191 max command line length
name|assertEquals
argument_list|(
literal|8191
argument_list|,
name|Shell
operator|.
name|WINDOWS_MAX_SHELL_LENGTH
argument_list|)
expr_stmt|;
name|ShellScriptBuilder
name|builder
init|=
name|ShellScriptBuilder
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// test link
name|builder
operator|.
name|link
argument_list|(
operator|new
name|Path
argument_list|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"A"
argument_list|,
literal|1024
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"B"
argument_list|,
literal|1024
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|link
argument_list|(
operator|new
name|Path
argument_list|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"E"
argument_list|,
operator|(
name|Shell
operator|.
name|WINDOWS_MAX_SHELL_LENGTH
operator|-
name|linkCmd
operator|.
name|length
argument_list|()
operator|)
operator|/
literal|2
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"F"
argument_list|,
operator|(
name|Shell
operator|.
name|WINDOWS_MAX_SHELL_LENGTH
operator|-
name|linkCmd
operator|.
name|length
argument_list|()
operator|)
operator|/
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|builder
operator|.
name|link
argument_list|(
operator|new
name|Path
argument_list|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"X"
argument_list|,
operator|(
name|Shell
operator|.
name|WINDOWS_MAX_SHELL_LENGTH
operator|-
name|linkCmd
operator|.
name|length
argument_list|()
operator|)
operator|/
literal|2
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"Y"
argument_list|,
operator|(
name|Shell
operator|.
name|WINDOWS_MAX_SHELL_LENGTH
operator|-
name|linkCmd
operator|.
name|length
argument_list|()
operator|)
operator|/
literal|2
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"long link was expected to throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
name|containsString
argument_list|(
name|expectedMessage
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testKillProcessGroup ()
specifier|public
name|void
name|testKillProcessGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|Shell
operator|.
name|isSetsidAvailable
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Construct the Container-id
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|cId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|File
name|processStartFile
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"pid.txt"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|File
name|childProcessStartFile
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"child_pid.txt"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
comment|// setup a script that can handle sigterm gracefully
name|File
name|scriptFile
init|=
name|Shell
operator|.
name|appendScriptExtension
argument_list|(
name|tmpDir
argument_list|,
literal|"testscript"
argument_list|)
decl_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|scriptFile
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"#!/bin/bash\n\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"echo \"Running testscript for forked process\""
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"umask 0"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"echo $$>> "
operator|+
name|processStartFile
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"while true;\ndo sleep 1s;\ndone> /dev/null 2>&1&"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"echo $!>> "
operator|+
name|childProcessStartFile
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"while true;\ndo sleep 1s;\ndone"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|scriptFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// upload the script file so that the container can run it
name|URL
name|resource_alpha
init|=
name|ConverterUtils
operator|.
name|getYarnUrlFromPath
argument_list|(
name|localFS
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|scriptFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|LocalResource
name|rsrc_alpha
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|rsrc_alpha
operator|.
name|setResource
argument_list|(
name|resource_alpha
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setVisibility
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setType
argument_list|(
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|rsrc_alpha
operator|.
name|setTimestamp
argument_list|(
name|scriptFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|destinationFile
init|=
literal|"dest_file.sh"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
name|localResources
operator|.
name|put
argument_list|(
name|destinationFile
argument_list|,
name|rsrc_alpha
argument_list|)
expr_stmt|;
name|containerLaunchContext
operator|.
name|setLocalResources
argument_list|(
name|localResources
argument_list|)
expr_stmt|;
comment|// set up the rest of the container
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Shell
operator|.
name|getRunScriptCommand
argument_list|(
name|scriptFile
argument_list|)
argument_list|)
decl_stmt|;
name|containerLaunchContext
operator|.
name|setCommands
argument_list|(
name|commands
argument_list|)
expr_stmt|;
name|Priority
name|priority
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|long
name|createTime
init|=
literal|1234
decl_stmt|;
name|Token
name|containerToken
init|=
name|createContainerToken
argument_list|(
name|cId
argument_list|,
name|priority
argument_list|,
name|createTime
argument_list|)
decl_stmt|;
name|StartContainerRequest
name|scRequest
init|=
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerLaunchContext
argument_list|,
name|containerToken
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|StartContainerRequest
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|scRequest
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
expr_stmt|;
name|int
name|timeoutSecs
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|processStartFile
operator|.
name|exists
argument_list|()
operator|&&
name|timeoutSecs
operator|++
operator|<
literal|20
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for process start-file to be created"
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"ProcessStartFile doesn't exist!"
argument_list|,
name|processStartFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|processStartFile
argument_list|)
argument_list|)
decl_stmt|;
comment|// Get the pid of the process
name|String
name|pid
init|=
name|reader
operator|.
name|readLine
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// No more lines
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|childProcessStartFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get the pid of the child process
name|String
name|child
init|=
name|reader
operator|.
name|readLine
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// No more lines
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Manually killing pid "
operator|+
name|pid
operator|+
literal|", but not child pid "
operator|+
name|child
argument_list|)
expr_stmt|;
name|Shell
operator|.
name|execCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"kill"
block|,
literal|"-9"
block|,
name|pid
block|}
argument_list|)
expr_stmt|;
name|BaseContainerManagerTest
operator|.
name|waitForContainerState
argument_list|(
name|containerManager
argument_list|,
name|cId
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Process is still alive!"
argument_list|,
name|DefaultContainerExecutor
operator|.
name|containerIsAlive
argument_list|(
name|pid
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containerIds
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
name|containerIds
operator|.
name|add
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|GetContainerStatusesRequest
name|gcsRequest
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|containerIds
argument_list|)
decl_stmt|;
name|ContainerStatus
name|containerStatus
init|=
name|containerManager
operator|.
name|getContainerStatuses
argument_list|(
name|gcsRequest
argument_list|)
operator|.
name|getContainerStatuses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ExitCode
operator|.
name|FORCE_KILLED
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|containerStatus
operator|.
name|getExitStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDebuggingInformation ()
specifier|public
name|void
name|testDebuggingInformation
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|shellFile
init|=
literal|null
decl_stmt|;
name|File
name|tempFile
init|=
literal|null
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
try|try
block|{
name|shellFile
operator|=
name|Shell
operator|.
name|appendScriptExtension
argument_list|(
name|tmpDir
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|tempFile
operator|=
name|Shell
operator|.
name|appendScriptExtension
argument_list|(
name|tmpDir
argument_list|,
literal|"temp"
argument_list|)
expr_stmt|;
name|String
name|testCommand
init|=
name|Shell
operator|.
name|WINDOWS
condition|?
literal|"@echo \"hello\""
else|:
literal|"echo \"hello\""
decl_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|shellFile
argument_list|)
argument_list|)
decl_stmt|;
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|shellFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|testCommand
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|resources
init|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|commands
operator|.
name|add
argument_list|(
literal|"cmd"
argument_list|)
expr_stmt|;
name|commands
operator|.
name|add
argument_list|(
literal|"/c"
argument_list|)
expr_stmt|;
name|commands
operator|.
name|add
argument_list|(
literal|"\""
operator|+
name|shellFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|commands
operator|.
name|add
argument_list|(
literal|"/bin/sh \\\""
operator|+
name|shellFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"\\\""
argument_list|)
expr_stmt|;
block|}
name|boolean
index|[]
name|debugLogsExistArray
init|=
block|{
literal|false
block|,
literal|true
block|}
decl_stmt|;
for|for
control|(
name|boolean
name|debugLogsExist
range|:
name|debugLogsExistArray
control|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_CONTAINER_DEBUG_INFO
argument_list|,
name|debugLogsExist
argument_list|)
expr_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|tempFile
argument_list|)
decl_stmt|;
name|ContainerExecutor
name|exec
init|=
operator|new
name|DefaultContainerExecutor
argument_list|()
decl_stmt|;
name|exec
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|exec
operator|.
name|writeLaunchEnv
argument_list|(
name|fos
argument_list|,
name|env
argument_list|,
name|resources
argument_list|,
name|commands
argument_list|,
operator|new
name|Path
argument_list|(
name|localLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
name|tempFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|tempFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Shell
operator|.
name|ShellCommandExecutor
name|shexc
init|=
operator|new
name|Shell
operator|.
name|ShellCommandExecutor
argument_list|(
operator|new
name|String
index|[]
block|{
name|tempFile
operator|.
name|getAbsolutePath
argument_list|()
block|}
argument_list|,
name|tmpDir
argument_list|)
decl_stmt|;
name|shexc
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|shexc
operator|.
name|getExitCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|File
name|directorInfo
init|=
operator|new
name|File
argument_list|(
name|localLogDir
argument_list|,
name|ContainerExecutor
operator|.
name|DIRECTORY_CONTENTS
argument_list|)
decl_stmt|;
name|File
name|scriptCopy
init|=
operator|new
name|File
argument_list|(
name|localLogDir
argument_list|,
name|tempFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Directory info file missing"
argument_list|,
name|debugLogsExist
argument_list|,
name|directorInfo
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Copy of launch script missing"
argument_list|,
name|debugLogsExist
argument_list|,
name|scriptCopy
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|debugLogsExist
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Directory info file size is 0"
argument_list|,
name|directorInfo
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Size of copy of launch script is 0"
argument_list|,
name|scriptCopy
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
comment|// cleanup
if|if
condition|(
name|shellFile
operator|!=
literal|null
operator|&&
name|shellFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|shellFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|tempFile
operator|!=
literal|null
operator|&&
name|tempFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|tempFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

