begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.webapp.dao.gpu
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|gpu
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_class
DECL|class|TestGpuDeviceInformationParser
specifier|public
class|class
name|TestGpuDeviceInformationParser
block|{
DECL|field|UTF_8
specifier|private
specifier|static
specifier|final
name|String
name|UTF_8
init|=
literal|"UTF-8"
decl_stmt|;
DECL|field|DELTA
specifier|private
specifier|static
specifier|final
name|double
name|DELTA
init|=
literal|1e-6
decl_stmt|;
annotation|@
name|Rule
DECL|field|expected
specifier|public
name|ExpectedException
name|expected
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testParse ()
specifier|public
name|void
name|testParse
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"src/test/resources/nvidia-smi-sample-output.xml"
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|f
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|GpuDeviceInformationParser
name|parser
init|=
operator|new
name|GpuDeviceInformationParser
argument_list|()
decl_stmt|;
name|GpuDeviceInformation
name|info
init|=
name|parser
operator|.
name|parseXml
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"375.66"
argument_list|,
name|info
operator|.
name|getDriverVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info
operator|.
name|getGpus
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFirstGpu
argument_list|(
name|info
operator|.
name|getGpus
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondGpu
argument_list|(
name|info
operator|.
name|getGpus
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParseExcerpt ()
specifier|public
name|void
name|testParseExcerpt
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"src/test/resources/nvidia-smi-output-excerpt.xml"
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|f
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|GpuDeviceInformationParser
name|parser
init|=
operator|new
name|GpuDeviceInformationParser
argument_list|()
decl_stmt|;
name|GpuDeviceInformation
name|info
init|=
name|parser
operator|.
name|parseXml
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"375.66"
argument_list|,
name|info
operator|.
name|getDriverVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info
operator|.
name|getGpus
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFirstGpu
argument_list|(
name|info
operator|.
name|getGpus
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondGpu
argument_list|(
name|info
operator|.
name|getGpus
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParseConsecutivelyWithSameParser ()
specifier|public
name|void
name|testParseConsecutivelyWithSameParser
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"src/test/resources/nvidia-smi-sample-output.xml"
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|f
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|GpuDeviceInformationParser
name|parser
init|=
operator|new
name|GpuDeviceInformationParser
argument_list|()
decl_stmt|;
name|GpuDeviceInformation
name|info
init|=
name|parser
operator|.
name|parseXml
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"375.66"
argument_list|,
name|info
operator|.
name|getDriverVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info
operator|.
name|getGpus
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFirstGpu
argument_list|(
name|info
operator|.
name|getGpus
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondGpu
argument_list|(
name|info
operator|.
name|getGpus
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testParseEmptyString ()
specifier|public
name|void
name|testParseEmptyString
parameter_list|()
throws|throws
name|YarnException
block|{
name|expected
operator|.
name|expect
argument_list|(
name|YarnException
operator|.
name|class
argument_list|)
expr_stmt|;
name|GpuDeviceInformationParser
name|parser
init|=
operator|new
name|GpuDeviceInformationParser
argument_list|()
decl_stmt|;
name|parser
operator|.
name|parseXml
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParseInvalidRootElement ()
specifier|public
name|void
name|testParseInvalidRootElement
parameter_list|()
throws|throws
name|YarnException
block|{
name|expected
operator|.
name|expect
argument_list|(
name|YarnException
operator|.
name|class
argument_list|)
expr_stmt|;
name|GpuDeviceInformationParser
name|parser
init|=
operator|new
name|GpuDeviceInformationParser
argument_list|()
decl_stmt|;
name|parser
operator|.
name|parseXml
argument_list|(
literal|"<nvidia_smiiiii></nvidia_smiiiii"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParseMissingTags ()
specifier|public
name|void
name|testParseMissingTags
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"src/test/resources/nvidia-smi-output-missing-tags.xml"
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|f
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|GpuDeviceInformationParser
name|parser
init|=
operator|new
name|GpuDeviceInformationParser
argument_list|()
decl_stmt|;
name|GpuDeviceInformation
name|info
init|=
name|parser
operator|.
name|parseXml
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"375.66"
argument_list|,
name|info
operator|.
name|getDriverVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|info
operator|.
name|getGpus
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PerGpuDeviceInformation
name|gpu
init|=
name|info
operator|.
name|getGpus
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"N/A"
argument_list|,
name|gpu
operator|.
name|getProductName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"N/A"
argument_list|,
name|gpu
operator|.
name|getUuid
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|gpu
operator|.
name|getMinorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|gpu
operator|.
name|getGpuMemoryUsage
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|gpu
operator|.
name|getTemperature
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|gpu
operator|.
name|getGpuUtilizations
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParseMissingInnerTags ()
specifier|public
name|void
name|testParseMissingInnerTags
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"src/test/resources/nvidia-smi-output-missing-tags2.xml"
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|f
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|GpuDeviceInformationParser
name|parser
init|=
operator|new
name|GpuDeviceInformationParser
argument_list|()
decl_stmt|;
name|GpuDeviceInformation
name|info
init|=
name|parser
operator|.
name|parseXml
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"375.66"
argument_list|,
name|info
operator|.
name|getDriverVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info
operator|.
name|getGpus
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PerGpuDeviceInformation
name|gpu
init|=
name|info
operator|.
name|getGpus
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Tesla P100-PCIE-12GB"
argument_list|,
name|gpu
operator|.
name|getProductName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"GPU-28604e81-21ec-cc48-6759-bf2648b22e16"
argument_list|,
name|gpu
operator|.
name|getUuid
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|gpu
operator|.
name|getMinorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|gpu
operator|.
name|getGpuMemoryUsage
argument_list|()
operator|.
name|getTotalMemoryMiB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
operator|(
name|long
operator|)
name|gpu
operator|.
name|getGpuMemoryUsage
argument_list|()
operator|.
name|getUsedMemoryMiB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
operator|(
name|long
operator|)
name|gpu
operator|.
name|getGpuMemoryUsage
argument_list|()
operator|.
name|getAvailMemoryMiB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0f
argument_list|,
name|gpu
operator|.
name|getGpuUtilizations
argument_list|()
operator|.
name|getOverallGpuUtilization
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|MIN_VALUE
argument_list|,
name|gpu
operator|.
name|getTemperature
argument_list|()
operator|.
name|getCurrentGpuTemp
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|MIN_VALUE
argument_list|,
name|gpu
operator|.
name|getTemperature
argument_list|()
operator|.
name|getMaxGpuTemp
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|MIN_VALUE
argument_list|,
name|gpu
operator|.
name|getTemperature
argument_list|()
operator|.
name|getSlowThresholdGpuTemp
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|assertSecondGpu
argument_list|(
name|info
operator|.
name|getGpus
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertFirstGpu (PerGpuDeviceInformation gpu)
specifier|private
name|void
name|assertFirstGpu
parameter_list|(
name|PerGpuDeviceInformation
name|gpu
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Tesla P100-PCIE-12GB"
argument_list|,
name|gpu
operator|.
name|getProductName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"GPU-28604e81-21ec-cc48-6759-bf2648b22e16"
argument_list|,
name|gpu
operator|.
name|getUuid
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|gpu
operator|.
name|getMinorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11567
argument_list|,
name|gpu
operator|.
name|getGpuMemoryUsage
argument_list|()
operator|.
name|getTotalMemoryMiB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11400
argument_list|,
operator|(
name|long
operator|)
name|gpu
operator|.
name|getGpuMemoryUsage
argument_list|()
operator|.
name|getUsedMemoryMiB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|167
argument_list|,
operator|(
name|long
operator|)
name|gpu
operator|.
name|getGpuMemoryUsage
argument_list|()
operator|.
name|getAvailMemoryMiB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|33.4f
argument_list|,
name|gpu
operator|.
name|getGpuUtilizations
argument_list|()
operator|.
name|getOverallGpuUtilization
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|31f
argument_list|,
name|gpu
operator|.
name|getTemperature
argument_list|()
operator|.
name|getCurrentGpuTemp
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|80f
argument_list|,
name|gpu
operator|.
name|getTemperature
argument_list|()
operator|.
name|getMaxGpuTemp
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|88f
argument_list|,
name|gpu
operator|.
name|getTemperature
argument_list|()
operator|.
name|getSlowThresholdGpuTemp
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSecondGpu (PerGpuDeviceInformation gpu)
specifier|private
name|void
name|assertSecondGpu
parameter_list|(
name|PerGpuDeviceInformation
name|gpu
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Tesla P100-PCIE-12GB_2"
argument_list|,
name|gpu
operator|.
name|getProductName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"GPU-46915a82-3fd2-8e11-ae26-a80b607c04f3"
argument_list|,
name|gpu
operator|.
name|getUuid
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|gpu
operator|.
name|getMinorNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12290
argument_list|,
name|gpu
operator|.
name|getGpuMemoryUsage
argument_list|()
operator|.
name|getTotalMemoryMiB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11800
argument_list|,
operator|(
name|long
operator|)
name|gpu
operator|.
name|getGpuMemoryUsage
argument_list|()
operator|.
name|getUsedMemoryMiB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|490
argument_list|,
operator|(
name|long
operator|)
name|gpu
operator|.
name|getGpuMemoryUsage
argument_list|()
operator|.
name|getAvailMemoryMiB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10.3f
argument_list|,
name|gpu
operator|.
name|getGpuUtilizations
argument_list|()
operator|.
name|getOverallGpuUtilization
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|34f
argument_list|,
name|gpu
operator|.
name|getTemperature
argument_list|()
operator|.
name|getCurrentGpuTemp
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|85f
argument_list|,
name|gpu
operator|.
name|getTemperature
argument_list|()
operator|.
name|getMaxGpuTemp
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|82f
argument_list|,
name|gpu
operator|.
name|getTemperature
argument_list|()
operator|.
name|getSlowThresholdGpuTemp
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

