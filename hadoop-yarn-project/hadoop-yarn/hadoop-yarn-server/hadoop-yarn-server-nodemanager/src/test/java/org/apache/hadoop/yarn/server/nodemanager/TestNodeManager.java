begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|nodelabels
operator|.
name|NodeLabelsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_class
DECL|class|TestNodeManager
specifier|public
class|class
name|TestNodeManager
block|{
DECL|class|InvalidContainerExecutor
specifier|public
specifier|static
specifier|final
class|class
name|InvalidContainerExecutor
extends|extends
name|DefaultContainerExecutor
block|{
annotation|@
name|Override
DECL|method|init (Context nmContext)
specifier|public
name|void
name|init
parameter_list|(
name|Context
name|nmContext
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"dummy executor init called"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Rule
DECL|field|thrown
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testContainerExecutorInitCall ()
specifier|public
name|void
name|testContainerExecutorInitCall
parameter_list|()
block|{
name|NodeManager
name|nm
init|=
operator|new
name|NodeManager
argument_list|()
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CONTAINER_EXECUTOR
argument_list|,
name|InvalidContainerExecutor
operator|.
name|class
argument_list|,
name|ContainerExecutor
operator|.
name|class
argument_list|)
expr_stmt|;
try|try
block|{
name|nm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Init should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRuntimeException
name|e
parameter_list|)
block|{
comment|//PASS
assert|assert
operator|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"dummy executor init called"
argument_list|)
operator|)
assert|;
block|}
finally|finally
block|{
name|nm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|field|initCalls
specifier|private
specifier|static
name|int
name|initCalls
init|=
literal|0
decl_stmt|;
DECL|field|preCalls
specifier|private
specifier|static
name|int
name|preCalls
init|=
literal|0
decl_stmt|;
DECL|field|postCalls
specifier|private
specifier|static
name|int
name|postCalls
init|=
literal|0
decl_stmt|;
DECL|class|DummyCSTListener1
specifier|private
specifier|static
class|class
name|DummyCSTListener1
implements|implements
name|ContainerStateTransitionListener
block|{
annotation|@
name|Override
DECL|method|init (Context context)
specifier|public
name|void
name|init
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|initCalls
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|preTransition (ContainerImpl op, ContainerState beforeState, ContainerEvent eventToBeProcessed)
specifier|public
name|void
name|preTransition
parameter_list|(
name|ContainerImpl
name|op
parameter_list|,
name|ContainerState
name|beforeState
parameter_list|,
name|ContainerEvent
name|eventToBeProcessed
parameter_list|)
block|{
name|preCalls
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|postTransition (ContainerImpl op, ContainerState beforeState, ContainerState afterState, ContainerEvent processedEvent)
specifier|public
name|void
name|postTransition
parameter_list|(
name|ContainerImpl
name|op
parameter_list|,
name|ContainerState
name|beforeState
parameter_list|,
name|ContainerState
name|afterState
parameter_list|,
name|ContainerEvent
name|processedEvent
parameter_list|)
block|{
name|postCalls
operator|++
expr_stmt|;
block|}
block|}
DECL|class|DummyCSTListener2
specifier|private
specifier|static
class|class
name|DummyCSTListener2
implements|implements
name|ContainerStateTransitionListener
block|{
annotation|@
name|Override
DECL|method|init (Context context)
specifier|public
name|void
name|init
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|initCalls
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|preTransition (ContainerImpl op, ContainerState beforeState, ContainerEvent eventToBeProcessed)
specifier|public
name|void
name|preTransition
parameter_list|(
name|ContainerImpl
name|op
parameter_list|,
name|ContainerState
name|beforeState
parameter_list|,
name|ContainerEvent
name|eventToBeProcessed
parameter_list|)
block|{
name|preCalls
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|postTransition (ContainerImpl op, ContainerState beforeState, ContainerState afterState, ContainerEvent processedEvent)
specifier|public
name|void
name|postTransition
parameter_list|(
name|ContainerImpl
name|op
parameter_list|,
name|ContainerState
name|beforeState
parameter_list|,
name|ContainerState
name|afterState
parameter_list|,
name|ContainerEvent
name|processedEvent
parameter_list|)
block|{
name|postCalls
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testListenerInitialization ()
specifier|public
name|void
name|testListenerInitialization
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeManager
name|nodeManager
init|=
operator|new
name|NodeManager
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CONTAINER_STATE_TRANSITION_LISTENERS
argument_list|,
name|DummyCSTListener1
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|","
operator|+
name|DummyCSTListener2
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|initCalls
operator|=
literal|0
expr_stmt|;
name|preCalls
operator|=
literal|0
expr_stmt|;
name|postCalls
operator|=
literal|0
expr_stmt|;
name|NodeManager
operator|.
name|NMContext
name|nmContext
init|=
name|nodeManager
operator|.
name|createNMContext
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|initCalls
argument_list|)
expr_stmt|;
name|nmContext
operator|.
name|getContainerStateTransitionListener
argument_list|()
operator|.
name|preTransition
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|nmContext
operator|.
name|getContainerStateTransitionListener
argument_list|()
operator|.
name|postTransition
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|preCalls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|postCalls
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreationOfNodeLabelsProviderService ()
specifier|public
name|void
name|testCreationOfNodeLabelsProviderService
parameter_list|()
throws|throws
name|InterruptedException
block|{
try|try
block|{
name|NodeManager
name|nodeManager
init|=
operator|new
name|NodeManager
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|NodeLabelsProvider
name|labelsProviderService
init|=
name|nodeManager
operator|.
name|createNodeLabelsProvider
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"LabelsProviderService should not be initialized in default configuration"
argument_list|,
name|labelsProviderService
argument_list|)
expr_stmt|;
comment|// With valid className
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NODE_LABELS_PROVIDER_CONFIG
argument_list|,
literal|"org.apache.hadoop.yarn.server.nodemanager.nodelabels.ConfigurationNodeLabelsProvider"
argument_list|)
expr_stmt|;
name|labelsProviderService
operator|=
name|nodeManager
operator|.
name|createNodeLabelsProvider
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"LabelsProviderService should be initialized When "
operator|+
literal|"node labels provider class is configured"
argument_list|,
name|labelsProviderService
argument_list|)
expr_stmt|;
comment|// With invalid className
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NODE_LABELS_PROVIDER_CONFIG
argument_list|,
literal|"org.apache.hadoop.yarn.server.nodemanager.NodeManager"
argument_list|)
expr_stmt|;
try|try
block|{
name|labelsProviderService
operator|=
name|nodeManager
operator|.
name|createNodeLabelsProvider
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected to throw IOException on Invalid configuration"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// exception expected on invalid configuration
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"LabelsProviderService should be initialized When "
operator|+
literal|"node labels provider class is configured"
argument_list|,
name|labelsProviderService
argument_list|)
expr_stmt|;
comment|// With valid whitelisted configurations
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_NODE_LABELS_PROVIDER_CONFIG
argument_list|,
name|YarnConfiguration
operator|.
name|CONFIG_NODE_DESCRIPTOR_PROVIDER
argument_list|)
expr_stmt|;
name|labelsProviderService
operator|=
name|nodeManager
operator|.
name|createNodeLabelsProvider
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"LabelsProviderService should be initialized When "
operator|+
literal|"node labels provider class is configured"
argument_list|,
name|labelsProviderService
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception caught"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test whether NodeManager passes user-provided conf to    * UserGroupInformation class. If it reads this (incorrect)    * AuthenticationMethod enum an exception is thrown.    */
annotation|@
name|Test
DECL|method|testUserProvidedUGIConf ()
specifier|public
name|void
name|testUserProvidedUGIConf
parameter_list|()
throws|throws
name|Exception
block|{
name|thrown
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"Invalid attribute value for "
operator|+
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
operator|+
literal|" of DUMMYAUTH"
argument_list|)
expr_stmt|;
name|Configuration
name|dummyConf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|dummyConf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"DUMMYAUTH"
argument_list|)
expr_stmt|;
name|NodeManager
name|dummyNodeManager
init|=
operator|new
name|NodeManager
argument_list|()
decl_stmt|;
try|try
block|{
name|dummyNodeManager
operator|.
name|init
argument_list|(
name|dummyConf
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dummyNodeManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

