begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ContainerIdPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationAttemptIdPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationIdPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|LocalDirsHandlerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeHealthCheckerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeManager
operator|.
name|NMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMNullStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|webapp
operator|.
name|ContainerLogsPage
operator|.
name|ContainersLogsBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|YarnWebParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|test
operator|.
name|WebAppTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_class
DECL|class|TestContainerLogsPage
specifier|public
class|class
name|TestContainerLogsPage
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testContainerLogDirs ()
specifier|public
name|void
name|testContainerLogDirs
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|File
name|absLogDir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|TestNMWebServer
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"LogDir"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|String
name|logdirwithFile
init|=
name|absLogDir
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|logdirwithFile
argument_list|)
expr_stmt|;
name|NodeHealthCheckerService
name|healthChecker
init|=
operator|new
name|NodeHealthCheckerService
argument_list|()
decl_stmt|;
name|healthChecker
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|LocalDirsHandlerService
name|dirsHandler
init|=
name|healthChecker
operator|.
name|getDiskHandler
argument_list|()
decl_stmt|;
name|NMContext
name|nmContext
init|=
operator|new
name|NodeManager
operator|.
name|NMContext
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|dirsHandler
argument_list|,
operator|new
name|ApplicationACLsManager
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|NMNullStateStoreService
argument_list|()
argument_list|)
decl_stmt|;
comment|// Add an application and the corresponding containers
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|user
init|=
literal|"nobody"
decl_stmt|;
name|long
name|clusterTimeStamp
init|=
literal|1234
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
name|recordFactory
argument_list|,
name|clusterTimeStamp
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Application
name|app
init|=
name|mock
argument_list|(
name|Application
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|container1
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|recordFactory
argument_list|,
name|appId
argument_list|,
name|appAttemptId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|nmContext
operator|.
name|getApplications
argument_list|()
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|MockContainer
name|container
init|=
operator|new
name|MockContainer
argument_list|(
name|appAttemptId
argument_list|,
operator|new
name|AsyncDispatcher
argument_list|()
argument_list|,
name|conf
argument_list|,
name|user
argument_list|,
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|container
operator|.
name|setState
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|nmContext
operator|.
name|getContainers
argument_list|()
operator|.
name|put
argument_list|(
name|container1
argument_list|,
name|container
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|files
init|=
literal|null
decl_stmt|;
name|files
operator|=
name|ContainerLogsUtils
operator|.
name|getContainerLogDirs
argument_list|(
name|container1
argument_list|,
name|user
argument_list|,
name|nmContext
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
operator|(
name|files
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"file:"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
comment|// After container is completed, it is removed from nmContext
name|nmContext
operator|.
name|getContainers
argument_list|()
operator|.
name|remove
argument_list|(
name|container1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|nmContext
operator|.
name|getContainers
argument_list|()
operator|.
name|get
argument_list|(
name|container1
argument_list|)
argument_list|)
expr_stmt|;
name|files
operator|=
name|ContainerLogsUtils
operator|.
name|getContainerLogDirs
argument_list|(
name|container1
argument_list|,
name|user
argument_list|,
name|nmContext
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
operator|(
name|files
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"file:"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testContainerLogPageAccess ()
specifier|public
name|void
name|testContainerLogPageAccess
parameter_list|()
throws|throws
name|IOException
block|{
comment|// SecureIOUtils require Native IO to be enabled. This test will run
comment|// only if it is enabled.
name|assumeTrue
argument_list|(
name|NativeIO
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|user
init|=
literal|"randomUser"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|File
name|absLogDir
init|=
literal|null
decl_stmt|,
name|appDir
init|=
literal|null
decl_stmt|,
name|containerDir
init|=
literal|null
decl_stmt|,
name|syslog
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// target log directory
name|absLogDir
operator|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|TestContainerLogsPage
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"LogDir"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
name|absLogDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|absLogDir
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|NodeHealthCheckerService
name|healthChecker
init|=
operator|new
name|NodeHealthCheckerService
argument_list|()
decl_stmt|;
name|healthChecker
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|LocalDirsHandlerService
name|dirsHandler
init|=
name|healthChecker
operator|.
name|getDiskHandler
argument_list|()
decl_stmt|;
comment|// Add an application and the corresponding containers
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|long
name|clusterTimeStamp
init|=
literal|1234
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
name|recordFactory
argument_list|,
name|clusterTimeStamp
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Application
name|app
init|=
name|mock
argument_list|(
name|Application
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
comment|// Making sure that application returns a random user. This is required
comment|// for SecureIOUtils' file owner check.
name|when
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|container1
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|recordFactory
argument_list|,
name|appId
argument_list|,
name|appAttemptId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// Testing secure read access for log files
comment|// Creating application and container directory and syslog file.
name|appDir
operator|=
operator|new
name|File
argument_list|(
name|absLogDir
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|appDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|containerDir
operator|=
operator|new
name|File
argument_list|(
name|appDir
argument_list|,
name|container1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|containerDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|syslog
operator|=
operator|new
name|File
argument_list|(
name|containerDir
argument_list|,
literal|"syslog"
argument_list|)
expr_stmt|;
name|syslog
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|BufferedOutputStream
name|out
init|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|syslog
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"Log file Content"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|Context
name|context
init|=
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|Application
argument_list|>
name|appMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|Application
argument_list|>
argument_list|()
decl_stmt|;
name|appMap
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getApplications
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appMap
argument_list|)
expr_stmt|;
name|ConcurrentHashMap
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
name|containers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containers
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getLocalDirsHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dirsHandler
argument_list|)
expr_stmt|;
name|MockContainer
name|container
init|=
operator|new
name|MockContainer
argument_list|(
name|appAttemptId
argument_list|,
operator|new
name|AsyncDispatcher
argument_list|()
argument_list|,
name|conf
argument_list|,
name|user
argument_list|,
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|container
operator|.
name|setState
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|context
operator|.
name|getContainers
argument_list|()
operator|.
name|put
argument_list|(
name|container1
argument_list|,
name|container
argument_list|)
expr_stmt|;
name|ContainersLogsBlock
name|cLogsBlock
init|=
operator|new
name|ContainersLogsBlock
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|YarnWebParams
operator|.
name|CONTAINER_ID
argument_list|,
name|container1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|YarnWebParams
operator|.
name|CONTAINER_LOG_TYPE
argument_list|,
literal|"syslog"
argument_list|)
expr_stmt|;
name|Injector
name|injector
init|=
name|WebAppTests
operator|.
name|testPage
argument_list|(
name|ContainerLogsPage
operator|.
name|class
argument_list|,
name|ContainersLogsBlock
operator|.
name|class
argument_list|,
name|cLogsBlock
argument_list|,
name|params
argument_list|,
operator|(
name|Module
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|PrintWriter
name|spyPw
init|=
name|WebAppTests
operator|.
name|getPrintWriter
argument_list|(
name|injector
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|spyPw
argument_list|)
operator|.
name|write
argument_list|(
literal|"Exception reading log file. Application submitted by '"
operator|+
name|user
operator|+
literal|"' doesn't own requested log file : syslog"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|syslog
operator|!=
literal|null
condition|)
block|{
name|syslog
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|containerDir
operator|!=
literal|null
condition|)
block|{
name|containerDir
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|appDir
operator|!=
literal|null
condition|)
block|{
name|appDir
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|absLogDir
operator|!=
literal|null
condition|)
block|{
name|absLogDir
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testLogDirWithDriveLetter ()
specifier|public
name|void
name|testLogDirWithDriveLetter
parameter_list|()
throws|throws
name|Exception
block|{
comment|//To verify that logs paths which include drive letters (Windows)
comment|//do not lose their drive letter specification
name|LocalDirsHandlerService
name|localDirs
init|=
name|mock
argument_list|(
name|LocalDirsHandlerService
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|logDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|logDirs
operator|.
name|add
argument_list|(
literal|"F:/nmlogs"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|localDirs
operator|.
name|getLogDirs
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|logDirs
argument_list|)
expr_stmt|;
name|ApplicationIdPBImpl
name|appId
init|=
name|mock
argument_list|(
name|ApplicationIdPBImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"app_id_1"
argument_list|)
expr_stmt|;
name|ApplicationAttemptIdPBImpl
name|appAttemptId
init|=
name|mock
argument_list|(
name|ApplicationAttemptIdPBImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId
init|=
name|mock
argument_list|(
name|ContainerIdPBImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|logDirFiles
init|=
name|ContainerLogsUtils
operator|.
name|getContainerLogDirs
argument_list|(
name|containerId
argument_list|,
name|localDirs
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"logDir lost drive letter "
operator|+
name|logDirFiles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|logDirFiles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"F:"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"nmlogs"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLogFileWithDriveLetter ()
specifier|public
name|void
name|testLogFileWithDriveLetter
parameter_list|()
throws|throws
name|Exception
block|{
name|ContainerImpl
name|container
init|=
name|mock
argument_list|(
name|ContainerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationIdPBImpl
name|appId
init|=
name|mock
argument_list|(
name|ApplicationIdPBImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"appId"
argument_list|)
expr_stmt|;
name|Application
name|app
init|=
name|mock
argument_list|(
name|Application
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getAppId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|ApplicationAttemptIdPBImpl
name|appAttemptId
init|=
name|mock
argument_list|(
name|ApplicationAttemptIdPBImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|Application
argument_list|>
name|applications
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|Application
argument_list|>
argument_list|()
decl_stmt|;
name|applications
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId
init|=
name|mock
argument_list|(
name|ContainerIdPBImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"containerId"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|ConcurrentMap
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
name|containers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
argument_list|()
decl_stmt|;
name|containers
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|container
argument_list|)
expr_stmt|;
name|LocalDirsHandlerService
name|localDirs
init|=
name|mock
argument_list|(
name|LocalDirsHandlerService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|localDirs
operator|.
name|getLogPathToRead
argument_list|(
literal|"appId"
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"containerId"
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"fileName"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Path
argument_list|(
literal|"F:/nmlogs/appId/containerId/fileName"
argument_list|)
argument_list|)
expr_stmt|;
name|NMContext
name|context
init|=
name|mock
argument_list|(
name|NMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getLocalDirsHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|localDirs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getApplications
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|applications
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containers
argument_list|)
expr_stmt|;
name|File
name|logFile
init|=
name|ContainerLogsUtils
operator|.
name|getContainerLogFile
argument_list|(
name|containerId
argument_list|,
literal|"fileName"
argument_list|,
literal|null
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"logFile lost drive letter "
operator|+
name|logFile
argument_list|,
name|logFile
operator|.
name|toString
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"F:"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"nmlogs"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

