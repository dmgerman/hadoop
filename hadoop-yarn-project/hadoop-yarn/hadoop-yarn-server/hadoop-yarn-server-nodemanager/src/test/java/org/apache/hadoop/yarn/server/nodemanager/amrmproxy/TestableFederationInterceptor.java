begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.amrmproxy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|amrmproxy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationMasterProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|MockResourceManagerFacade
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|uam
operator|.
name|UnmanagedAMPoolManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|uam
operator|.
name|UnmanagedApplicationManager
import|;
end_import

begin_comment
comment|/**  * Extends the FederationInterceptor and overrides methods to provide a testable  * implementation of FederationInterceptor.  */
end_comment

begin_class
DECL|class|TestableFederationInterceptor
specifier|public
class|class
name|TestableFederationInterceptor
extends|extends
name|FederationInterceptor
block|{
specifier|private
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|MockResourceManagerFacade
argument_list|>
DECL|field|secondaryResourceManagers
name|secondaryResourceManagers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|runningIndex
specifier|private
name|AtomicInteger
name|runningIndex
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|mockRm
specifier|private
name|MockResourceManagerFacade
name|mockRm
decl_stmt|;
annotation|@
name|Override
DECL|method|createHomeRMProxy ( AMRMProxyApplicationContext appContext)
specifier|protected
name|ApplicationMasterProtocol
name|createHomeRMProxy
parameter_list|(
name|AMRMProxyApplicationContext
name|appContext
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|mockRm
operator|==
literal|null
condition|)
block|{
name|mockRm
operator|=
operator|new
name|MockResourceManagerFacade
argument_list|(
operator|new
name|YarnConfiguration
argument_list|(
name|super
operator|.
name|getConf
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mockRm
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createSecondaryRMProxy (Class<T> proxyClass, Configuration conf, String subClusterId)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|createSecondaryRMProxy
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|proxyClass
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
name|subClusterId
parameter_list|)
throws|throws
name|IOException
block|{
comment|// We create one instance of the mock resource manager per sub cluster. Keep
comment|// track of the instances of the RMs in the map keyed by the sub cluster id
synchronized|synchronized
init|(
name|this
operator|.
name|secondaryResourceManagers
init|)
block|{
if|if
condition|(
name|this
operator|.
name|secondaryResourceManagers
operator|.
name|contains
argument_list|(
name|subClusterId
argument_list|)
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|this
operator|.
name|secondaryResourceManagers
operator|.
name|get
argument_list|(
name|subClusterId
argument_list|)
return|;
block|}
else|else
block|{
comment|// The running index here is used to simulate different RM_EPOCH to
comment|// generate unique container identifiers in a federation environment
name|MockResourceManagerFacade
name|rm
init|=
operator|new
name|MockResourceManagerFacade
argument_list|(
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
argument_list|,
name|runningIndex
operator|.
name|addAndGet
argument_list|(
literal|10000
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|secondaryResourceManagers
operator|.
name|put
argument_list|(
name|subClusterId
argument_list|,
name|rm
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|rm
return|;
block|}
block|}
block|}
DECL|method|setShouldReRegisterNext ()
specifier|protected
name|void
name|setShouldReRegisterNext
parameter_list|()
block|{
if|if
condition|(
name|mockRm
operator|!=
literal|null
condition|)
block|{
name|mockRm
operator|.
name|setShouldReRegisterNext
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|MockResourceManagerFacade
name|subCluster
range|:
name|secondaryResourceManagers
operator|.
name|values
argument_list|()
control|)
block|{
name|subCluster
operator|.
name|setShouldReRegisterNext
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Extends the UnmanagedAMPoolManager and overrides methods to provide a    * testable implementation of UnmanagedAMPoolManager.    */
DECL|class|TestableUnmanagedAMPoolManager
specifier|protected
class|class
name|TestableUnmanagedAMPoolManager
extends|extends
name|UnmanagedAMPoolManager
block|{
DECL|method|TestableUnmanagedAMPoolManager (ExecutorService threadpool)
specifier|public
name|TestableUnmanagedAMPoolManager
parameter_list|(
name|ExecutorService
name|threadpool
parameter_list|)
block|{
name|super
argument_list|(
name|threadpool
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createUAM (Configuration conf, ApplicationId appId, String queueName, String submitter, String appNameSuffix)
specifier|public
name|UnmanagedApplicationManager
name|createUAM
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|String
name|queueName
parameter_list|,
name|String
name|submitter
parameter_list|,
name|String
name|appNameSuffix
parameter_list|)
block|{
return|return
operator|new
name|TestableUnmanagedApplicationManager
argument_list|(
name|conf
argument_list|,
name|appId
argument_list|,
name|queueName
argument_list|,
name|submitter
argument_list|,
name|appNameSuffix
argument_list|)
return|;
block|}
block|}
comment|/**    * Extends the UnmanagedApplicationManager and overrides methods to provide a    * testable implementation.    */
DECL|class|TestableUnmanagedApplicationManager
specifier|protected
class|class
name|TestableUnmanagedApplicationManager
extends|extends
name|UnmanagedApplicationManager
block|{
DECL|method|TestableUnmanagedApplicationManager (Configuration conf, ApplicationId appId, String queueName, String submitter, String appNameSuffix)
specifier|public
name|TestableUnmanagedApplicationManager
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|String
name|queueName
parameter_list|,
name|String
name|submitter
parameter_list|,
name|String
name|appNameSuffix
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|appId
argument_list|,
name|queueName
argument_list|,
name|submitter
argument_list|,
name|appNameSuffix
argument_list|)
expr_stmt|;
block|}
comment|/**      * We override this method here to return a mock RM instances. The base      * class returns the proxy to the real RM which will not work in case of      * stand alone test cases.      */
annotation|@
name|Override
DECL|method|createRMProxy (Class<T> protocol, Configuration config, UserGroupInformation user, Token<AMRMTokenIdentifier> token)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|createRMProxy
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|protocol
parameter_list|,
name|Configuration
name|config
parameter_list|,
name|UserGroupInformation
name|user
parameter_list|,
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createSecondaryRMProxy
argument_list|(
name|protocol
argument_list|,
name|config
argument_list|,
name|YarnConfiguration
operator|.
name|getClusterId
argument_list|(
name|config
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

