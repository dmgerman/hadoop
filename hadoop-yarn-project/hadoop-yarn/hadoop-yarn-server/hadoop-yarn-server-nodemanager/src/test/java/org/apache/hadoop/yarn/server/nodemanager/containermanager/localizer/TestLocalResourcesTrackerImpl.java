begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|isA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|DrainDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|DeletionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerResourceFailedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|ContainerResourceLocalizedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|LocalizerResourceRequestEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ResourceEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ResourceFailedLocalizationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ResourceLocalizedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ResourceReleaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|localizer
operator|.
name|event
operator|.
name|ResourceRequestEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestLocalResourcesTrackerImpl
specifier|public
class|class
name|TestLocalResourcesTrackerImpl
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|test ()
specifier|public
name|void
name|test
parameter_list|()
block|{
name|String
name|user
init|=
literal|"testuser"
decl_stmt|;
name|DrainDispatcher
name|dispatcher
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|dispatcher
operator|=
name|createDispatcher
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|EventHandler
argument_list|<
name|LocalizerEvent
argument_list|>
name|localizerEventHandler
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|EventHandler
argument_list|<
name|LocalizerEvent
argument_list|>
name|containerEventHandler
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|LocalizerEventType
operator|.
name|class
argument_list|,
name|localizerEventHandler
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainerEventType
operator|.
name|class
argument_list|,
name|containerEventHandler
argument_list|)
expr_stmt|;
name|DeletionService
name|mockDelService
init|=
name|mock
argument_list|(
name|DeletionService
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerId
name|cId1
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|LocalizerContext
name|lc1
init|=
operator|new
name|LocalizerContext
argument_list|(
name|user
argument_list|,
name|cId1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ContainerId
name|cId2
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|LocalizerContext
name|lc2
init|=
operator|new
name|LocalizerContext
argument_list|(
name|user
argument_list|,
name|cId2
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LocalResourceRequest
name|req1
init|=
name|createLocalResourceRequest
argument_list|(
name|user
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|)
decl_stmt|;
name|LocalResourceRequest
name|req2
init|=
name|createLocalResourceRequest
argument_list|(
name|user
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|)
decl_stmt|;
name|LocalizedResource
name|lr1
init|=
name|createLocalizedResource
argument_list|(
name|req1
argument_list|,
name|dispatcher
argument_list|)
decl_stmt|;
name|LocalizedResource
name|lr2
init|=
name|createLocalizedResource
argument_list|(
name|req2
argument_list|,
name|dispatcher
argument_list|)
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|LocalResourceRequest
argument_list|,
name|LocalizedResource
argument_list|>
name|localrsrc
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|LocalResourceRequest
argument_list|,
name|LocalizedResource
argument_list|>
argument_list|()
decl_stmt|;
name|localrsrc
operator|.
name|put
argument_list|(
name|req1
argument_list|,
name|lr1
argument_list|)
expr_stmt|;
name|localrsrc
operator|.
name|put
argument_list|(
name|req2
argument_list|,
name|lr2
argument_list|)
expr_stmt|;
name|LocalResourcesTracker
name|tracker
init|=
operator|new
name|LocalResourcesTrackerImpl
argument_list|(
name|user
argument_list|,
name|dispatcher
argument_list|,
name|localrsrc
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|ResourceEvent
name|req11Event
init|=
operator|new
name|ResourceRequestEvent
argument_list|(
name|req1
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|lc1
argument_list|)
decl_stmt|;
name|ResourceEvent
name|req12Event
init|=
operator|new
name|ResourceRequestEvent
argument_list|(
name|req1
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|lc2
argument_list|)
decl_stmt|;
name|ResourceEvent
name|req21Event
init|=
operator|new
name|ResourceRequestEvent
argument_list|(
name|req2
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|lc1
argument_list|)
decl_stmt|;
name|ResourceEvent
name|rel11Event
init|=
operator|new
name|ResourceReleaseEvent
argument_list|(
name|req1
argument_list|,
name|cId1
argument_list|)
decl_stmt|;
name|ResourceEvent
name|rel12Event
init|=
operator|new
name|ResourceReleaseEvent
argument_list|(
name|req1
argument_list|,
name|cId2
argument_list|)
decl_stmt|;
name|ResourceEvent
name|rel21Event
init|=
operator|new
name|ResourceReleaseEvent
argument_list|(
name|req2
argument_list|,
name|cId1
argument_list|)
decl_stmt|;
comment|// Localize R1 for C1
name|tracker
operator|.
name|handle
argument_list|(
name|req11Event
argument_list|)
expr_stmt|;
comment|// Localize R1 for C2
name|tracker
operator|.
name|handle
argument_list|(
name|req12Event
argument_list|)
expr_stmt|;
comment|// Localize R2 for C1
name|tracker
operator|.
name|handle
argument_list|(
name|req21Event
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|localizerEventHandler
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|any
argument_list|(
name|LocalizerResourceRequestEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify refCount for R1 is 2
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|lr1
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify refCount for R2 is 1
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|lr2
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Release R2 for C1
name|tracker
operator|.
name|handle
argument_list|(
name|rel21Event
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|verifyTrackedResourceCount
argument_list|(
name|tracker
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Verify resource with non zero ref count is not removed.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|lr1
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|tracker
operator|.
name|remove
argument_list|(
name|lr1
argument_list|,
name|mockDelService
argument_list|)
argument_list|)
expr_stmt|;
name|verifyTrackedResourceCount
argument_list|(
name|tracker
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Localize resource1
name|ResourceLocalizedEvent
name|rle
init|=
operator|new
name|ResourceLocalizedEvent
argument_list|(
name|req1
argument_list|,
operator|new
name|Path
argument_list|(
literal|"file:///tmp/r1"
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|lr1
operator|.
name|handle
argument_list|(
name|rle
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lr1
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|ResourceState
operator|.
name|LOCALIZED
argument_list|)
argument_list|)
expr_stmt|;
comment|// Release resource1
name|tracker
operator|.
name|handle
argument_list|(
name|rel11Event
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|handle
argument_list|(
name|rel12Event
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|lr1
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify resources in state LOCALIZED with ref-count=0 is removed.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tracker
operator|.
name|remove
argument_list|(
name|lr1
argument_list|,
name|mockDelService
argument_list|)
argument_list|)
expr_stmt|;
name|verifyTrackedResourceCount
argument_list|(
name|tracker
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|dispatcher
operator|!=
literal|null
condition|)
block|{
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testConsistency ()
specifier|public
name|void
name|testConsistency
parameter_list|()
block|{
name|String
name|user
init|=
literal|"testuser"
decl_stmt|;
name|DrainDispatcher
name|dispatcher
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|dispatcher
operator|=
name|createDispatcher
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|EventHandler
argument_list|<
name|LocalizerEvent
argument_list|>
name|localizerEventHandler
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|EventHandler
argument_list|<
name|LocalizerEvent
argument_list|>
name|containerEventHandler
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|LocalizerEventType
operator|.
name|class
argument_list|,
name|localizerEventHandler
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainerEventType
operator|.
name|class
argument_list|,
name|containerEventHandler
argument_list|)
expr_stmt|;
name|ContainerId
name|cId1
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|LocalizerContext
name|lc1
init|=
operator|new
name|LocalizerContext
argument_list|(
name|user
argument_list|,
name|cId1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LocalResourceRequest
name|req1
init|=
name|createLocalResourceRequest
argument_list|(
name|user
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|)
decl_stmt|;
name|LocalizedResource
name|lr1
init|=
name|createLocalizedResource
argument_list|(
name|req1
argument_list|,
name|dispatcher
argument_list|)
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|LocalResourceRequest
argument_list|,
name|LocalizedResource
argument_list|>
name|localrsrc
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|LocalResourceRequest
argument_list|,
name|LocalizedResource
argument_list|>
argument_list|()
decl_stmt|;
name|localrsrc
operator|.
name|put
argument_list|(
name|req1
argument_list|,
name|lr1
argument_list|)
expr_stmt|;
name|LocalResourcesTracker
name|tracker
init|=
operator|new
name|LocalResourcesTrackerImpl
argument_list|(
name|user
argument_list|,
name|dispatcher
argument_list|,
name|localrsrc
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|ResourceEvent
name|req11Event
init|=
operator|new
name|ResourceRequestEvent
argument_list|(
name|req1
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|lc1
argument_list|)
decl_stmt|;
name|ResourceEvent
name|rel11Event
init|=
operator|new
name|ResourceReleaseEvent
argument_list|(
name|req1
argument_list|,
name|cId1
argument_list|)
decl_stmt|;
comment|// Localize R1 for C1
name|tracker
operator|.
name|handle
argument_list|(
name|req11Event
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Verify refCount for R1 is 1
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|lr1
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|verifyTrackedResourceCount
argument_list|(
name|tracker
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Localize resource1
name|ResourceLocalizedEvent
name|rle
init|=
operator|new
name|ResourceLocalizedEvent
argument_list|(
name|req1
argument_list|,
operator|new
name|Path
argument_list|(
literal|"file:///tmp/r1"
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|lr1
operator|.
name|handle
argument_list|(
name|rle
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lr1
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|ResourceState
operator|.
name|LOCALIZED
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|createdummylocalizefile
argument_list|(
operator|new
name|Path
argument_list|(
literal|"file:///tmp/r1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LocalizedResource
name|rsrcbefore
init|=
name|tracker
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|File
name|resFile
init|=
operator|new
name|File
argument_list|(
name|lr1
operator|.
name|getLocalPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getRawPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resFile
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
comment|// Localize R1 for C1
name|tracker
operator|.
name|handle
argument_list|(
name|req11Event
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|lr1
operator|.
name|handle
argument_list|(
name|rle
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lr1
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|ResourceState
operator|.
name|LOCALIZED
argument_list|)
argument_list|)
expr_stmt|;
name|LocalizedResource
name|rsrcafter
init|=
name|tracker
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rsrcbefore
operator|==
name|rsrcafter
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Localized resource should not be equal"
argument_list|)
expr_stmt|;
block|}
comment|// Release resource1
name|tracker
operator|.
name|handle
argument_list|(
name|rel11Event
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|dispatcher
operator|!=
literal|null
condition|)
block|{
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testLocalResourceCache ()
specifier|public
name|void
name|testLocalResourceCache
parameter_list|()
block|{
name|String
name|user
init|=
literal|"testuser"
decl_stmt|;
name|DrainDispatcher
name|dispatcher
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|dispatcher
operator|=
name|createDispatcher
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|EventHandler
argument_list|<
name|LocalizerEvent
argument_list|>
name|localizerEventHandler
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|EventHandler
argument_list|<
name|ContainerEvent
argument_list|>
name|containerEventHandler
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Registering event handlers.
name|dispatcher
operator|.
name|register
argument_list|(
name|LocalizerEventType
operator|.
name|class
argument_list|,
name|localizerEventHandler
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainerEventType
operator|.
name|class
argument_list|,
name|containerEventHandler
argument_list|)
expr_stmt|;
name|ConcurrentMap
argument_list|<
name|LocalResourceRequest
argument_list|,
name|LocalizedResource
argument_list|>
name|localrsrc
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|LocalResourceRequest
argument_list|,
name|LocalizedResource
argument_list|>
argument_list|()
decl_stmt|;
name|LocalResourcesTracker
name|tracker
init|=
operator|new
name|LocalResourcesTrackerImpl
argument_list|(
name|user
argument_list|,
name|dispatcher
argument_list|,
name|localrsrc
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|LocalResourceRequest
name|lr
init|=
name|createLocalResourceRequest
argument_list|(
name|user
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|)
decl_stmt|;
comment|// Creating 2 containers for same application which will be requesting
comment|// same local resource.
comment|// Container 1 requesting local resource.
name|ContainerId
name|cId1
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|LocalizerContext
name|lc1
init|=
operator|new
name|LocalizerContext
argument_list|(
name|user
argument_list|,
name|cId1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ResourceEvent
name|reqEvent1
init|=
operator|new
name|ResourceRequestEvent
argument_list|(
name|lr
argument_list|,
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|lc1
argument_list|)
decl_stmt|;
comment|// No resource request is initially present in local cache
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|localrsrc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Container-1 requesting local resource.
name|tracker
operator|.
name|handle
argument_list|(
name|reqEvent1
argument_list|)
expr_stmt|;
comment|// New localized Resource should have been added to local resource map
comment|// and the requesting container will be added to its waiting queue.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|localrsrc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|localrsrc
operator|.
name|containsKey
argument_list|(
name|lr
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|localrsrc
operator|.
name|get
argument_list|(
name|lr
argument_list|)
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|localrsrc
operator|.
name|get
argument_list|(
name|lr
argument_list|)
operator|.
name|ref
operator|.
name|contains
argument_list|(
name|cId1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ResourceState
operator|.
name|DOWNLOADING
argument_list|,
name|localrsrc
operator|.
name|get
argument_list|(
name|lr
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Container 2 requesting the resource
name|ContainerId
name|cId2
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|LocalizerContext
name|lc2
init|=
operator|new
name|LocalizerContext
argument_list|(
name|user
argument_list|,
name|cId2
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ResourceEvent
name|reqEvent2
init|=
operator|new
name|ResourceRequestEvent
argument_list|(
name|lr
argument_list|,
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|lc2
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|handle
argument_list|(
name|reqEvent2
argument_list|)
expr_stmt|;
comment|// Container 2 should have been added to the waiting queue of the local
comment|// resource
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|localrsrc
operator|.
name|get
argument_list|(
name|lr
argument_list|)
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|localrsrc
operator|.
name|get
argument_list|(
name|lr
argument_list|)
operator|.
name|ref
operator|.
name|contains
argument_list|(
name|cId2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Failing resource localization
name|ResourceEvent
name|resourceFailedEvent
init|=
operator|new
name|ResourceFailedLocalizationEvent
argument_list|(
name|lr
argument_list|,
operator|(
operator|new
name|Exception
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getMessage
argument_list|()
operator|)
argument_list|)
decl_stmt|;
comment|// Backing up the resource to track its state change as it will be
comment|// removed after the failed event.
name|LocalizedResource
name|localizedResource
init|=
name|localrsrc
operator|.
name|get
argument_list|(
name|lr
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|handle
argument_list|(
name|resourceFailedEvent
argument_list|)
expr_stmt|;
comment|// After receiving failed resource event; all waiting containers will be
comment|// notified with Container Resource Failed Event.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|localrsrc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|containerEventHandler
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|isA
argument_list|(
name|ContainerResourceFailedEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ResourceState
operator|.
name|FAILED
argument_list|,
name|localizedResource
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Container 1 trying to release the resource (This resource is already
comment|// deleted from the cache. This call should return silently without
comment|// exception.
name|ResourceReleaseEvent
name|relEvent1
init|=
operator|new
name|ResourceReleaseEvent
argument_list|(
name|lr
argument_list|,
name|cId1
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|handle
argument_list|(
name|relEvent1
argument_list|)
expr_stmt|;
comment|// Container-3 now requests for the same resource. This request call
comment|// is coming prior to Container-2's release call.
name|ContainerId
name|cId3
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|LocalizerContext
name|lc3
init|=
operator|new
name|LocalizerContext
argument_list|(
name|user
argument_list|,
name|cId3
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ResourceEvent
name|reqEvent3
init|=
operator|new
name|ResourceRequestEvent
argument_list|(
name|lr
argument_list|,
name|LocalResourceVisibility
operator|.
name|PRIVATE
argument_list|,
name|lc3
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|handle
argument_list|(
name|reqEvent3
argument_list|)
expr_stmt|;
comment|// Local resource cache now should have the requested resource and the
comment|// number of waiting containers should be 1.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|localrsrc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|localrsrc
operator|.
name|containsKey
argument_list|(
name|lr
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|localrsrc
operator|.
name|get
argument_list|(
name|lr
argument_list|)
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|localrsrc
operator|.
name|get
argument_list|(
name|lr
argument_list|)
operator|.
name|ref
operator|.
name|contains
argument_list|(
name|cId3
argument_list|)
argument_list|)
expr_stmt|;
comment|// Container-2 Releases the resource
name|ResourceReleaseEvent
name|relEvent2
init|=
operator|new
name|ResourceReleaseEvent
argument_list|(
name|lr
argument_list|,
name|cId2
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|handle
argument_list|(
name|relEvent2
argument_list|)
expr_stmt|;
comment|// Making sure that there is no change in the cache after the release.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|localrsrc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|localrsrc
operator|.
name|containsKey
argument_list|(
name|lr
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|localrsrc
operator|.
name|get
argument_list|(
name|lr
argument_list|)
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|localrsrc
operator|.
name|get
argument_list|(
name|lr
argument_list|)
operator|.
name|ref
operator|.
name|contains
argument_list|(
name|cId3
argument_list|)
argument_list|)
expr_stmt|;
comment|// Sending ResourceLocalizedEvent to tracker. In turn resource should
comment|// send Container Resource Localized Event to waiting containers.
name|Path
name|localizedPath
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/file1"
argument_list|)
decl_stmt|;
name|ResourceLocalizedEvent
name|localizedEvent
init|=
operator|new
name|ResourceLocalizedEvent
argument_list|(
name|lr
argument_list|,
name|localizedPath
argument_list|,
literal|123L
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|handle
argument_list|(
name|localizedEvent
argument_list|)
expr_stmt|;
comment|// Verifying ContainerResourceLocalizedEvent .
name|verify
argument_list|(
name|containerEventHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|isA
argument_list|(
name|ContainerResourceLocalizedEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ResourceState
operator|.
name|LOCALIZED
argument_list|,
name|localrsrc
operator|.
name|get
argument_list|(
name|lr
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|localrsrc
operator|.
name|get
argument_list|(
name|lr
argument_list|)
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Container-3 releasing the resource.
name|ResourceReleaseEvent
name|relEvent3
init|=
operator|new
name|ResourceReleaseEvent
argument_list|(
name|lr
argument_list|,
name|cId3
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|handle
argument_list|(
name|relEvent3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|localrsrc
operator|.
name|get
argument_list|(
name|lr
argument_list|)
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|dispatcher
operator|!=
literal|null
condition|)
block|{
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testHierarchicalLocalCacheDirectories ()
specifier|public
name|void
name|testHierarchicalLocalCacheDirectories
parameter_list|()
block|{
name|String
name|user
init|=
literal|"testuser"
decl_stmt|;
name|DrainDispatcher
name|dispatcher
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// setting per directory file limit to 1.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY
argument_list|,
literal|"37"
argument_list|)
expr_stmt|;
name|dispatcher
operator|=
name|createDispatcher
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|EventHandler
argument_list|<
name|LocalizerEvent
argument_list|>
name|localizerEventHandler
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|EventHandler
argument_list|<
name|LocalizerEvent
argument_list|>
name|containerEventHandler
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|LocalizerEventType
operator|.
name|class
argument_list|,
name|localizerEventHandler
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|ContainerEventType
operator|.
name|class
argument_list|,
name|containerEventHandler
argument_list|)
expr_stmt|;
name|DeletionService
name|mockDelService
init|=
name|mock
argument_list|(
name|DeletionService
operator|.
name|class
argument_list|)
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|LocalResourceRequest
argument_list|,
name|LocalizedResource
argument_list|>
name|localrsrc
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|LocalResourceRequest
argument_list|,
name|LocalizedResource
argument_list|>
argument_list|()
decl_stmt|;
name|LocalResourcesTracker
name|tracker
init|=
operator|new
name|LocalResourcesTrackerImpl
argument_list|(
name|user
argument_list|,
name|dispatcher
argument_list|,
name|localrsrc
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// This is a random path. NO File creation will take place at this place.
name|Path
name|localDir
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
decl_stmt|;
comment|// Container 1 needs lr1 resource
name|ContainerId
name|cId1
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|LocalResourceRequest
name|lr1
init|=
name|createLocalResourceRequest
argument_list|(
name|user
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|)
decl_stmt|;
name|LocalizerContext
name|lc1
init|=
operator|new
name|LocalizerContext
argument_list|(
name|user
argument_list|,
name|cId1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Container 1 requests lr1 to be localized
name|ResourceEvent
name|reqEvent1
init|=
operator|new
name|ResourceRequestEvent
argument_list|(
name|lr1
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|lc1
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|handle
argument_list|(
name|reqEvent1
argument_list|)
expr_stmt|;
comment|// Simulate the process of localization of lr1
name|Path
name|hierarchicalPath1
init|=
name|tracker
operator|.
name|getPathForLocalization
argument_list|(
name|lr1
argument_list|,
name|localDir
argument_list|)
decl_stmt|;
comment|// Simulate lr1 getting localized
name|ResourceLocalizedEvent
name|rle1
init|=
operator|new
name|ResourceLocalizedEvent
argument_list|(
name|lr1
argument_list|,
operator|new
name|Path
argument_list|(
name|hierarchicalPath1
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"file1"
argument_list|)
argument_list|,
literal|120
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|handle
argument_list|(
name|rle1
argument_list|)
expr_stmt|;
comment|// Localization successful.
name|LocalResourceRequest
name|lr2
init|=
name|createLocalResourceRequest
argument_list|(
name|user
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|)
decl_stmt|;
comment|// Container 1 requests lr2 to be localized.
name|ResourceEvent
name|reqEvent2
init|=
operator|new
name|ResourceRequestEvent
argument_list|(
name|lr2
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|lc1
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|handle
argument_list|(
name|reqEvent2
argument_list|)
expr_stmt|;
name|Path
name|hierarchicalPath2
init|=
name|tracker
operator|.
name|getPathForLocalization
argument_list|(
name|lr2
argument_list|,
name|localDir
argument_list|)
decl_stmt|;
comment|// localization failed.
name|ResourceFailedLocalizationEvent
name|rfe2
init|=
operator|new
name|ResourceFailedLocalizationEvent
argument_list|(
name|lr2
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"Test"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|handle
argument_list|(
name|rfe2
argument_list|)
expr_stmt|;
comment|/*        * The path returned for two localization should be different because we        * are limiting one file per sub-directory.        */
name|Assert
operator|.
name|assertNotSame
argument_list|(
name|hierarchicalPath1
argument_list|,
name|hierarchicalPath2
argument_list|)
expr_stmt|;
name|LocalResourceRequest
name|lr3
init|=
name|createLocalResourceRequest
argument_list|(
name|user
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|)
decl_stmt|;
name|ResourceEvent
name|reqEvent3
init|=
operator|new
name|ResourceRequestEvent
argument_list|(
name|lr3
argument_list|,
name|LocalResourceVisibility
operator|.
name|PUBLIC
argument_list|,
name|lc1
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|handle
argument_list|(
name|reqEvent3
argument_list|)
expr_stmt|;
name|Path
name|hierarchicalPath3
init|=
name|tracker
operator|.
name|getPathForLocalization
argument_list|(
name|lr3
argument_list|,
name|localDir
argument_list|)
decl_stmt|;
comment|// localization successful
name|ResourceLocalizedEvent
name|rle3
init|=
operator|new
name|ResourceLocalizedEvent
argument_list|(
name|lr3
argument_list|,
operator|new
name|Path
argument_list|(
name|hierarchicalPath3
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"file3"
argument_list|)
argument_list|,
literal|120
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|handle
argument_list|(
name|rle3
argument_list|)
expr_stmt|;
comment|// Verifying that path created is inside the subdirectory
name|Assert
operator|.
name|assertEquals
argument_list|(
name|hierarchicalPath3
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|hierarchicalPath1
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"0"
argument_list|)
expr_stmt|;
comment|// Container 1 releases resource lr1
name|ResourceEvent
name|relEvent1
init|=
operator|new
name|ResourceReleaseEvent
argument_list|(
name|lr1
argument_list|,
name|cId1
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|handle
argument_list|(
name|relEvent1
argument_list|)
expr_stmt|;
comment|// Validate the file counts now
name|int
name|resources
init|=
literal|0
decl_stmt|;
name|Iterator
argument_list|<
name|LocalizedResource
argument_list|>
name|iter
init|=
name|tracker
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|resources
operator|++
expr_stmt|;
block|}
comment|// There should be only two resources lr1 and lr3 now.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|resources
argument_list|)
expr_stmt|;
comment|// Now simulate cache cleanup - removes unused resources.
name|iter
operator|=
name|tracker
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|LocalizedResource
name|rsrc
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rsrc
operator|.
name|getRefCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tracker
operator|.
name|remove
argument_list|(
name|rsrc
argument_list|,
name|mockDelService
argument_list|)
argument_list|)
expr_stmt|;
name|resources
operator|--
expr_stmt|;
block|}
block|}
comment|// lr1 is not used by anyone and will be removed, only lr3 will hang
comment|// around
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|resources
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|dispatcher
operator|!=
literal|null
condition|)
block|{
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|createdummylocalizefile (Path path)
specifier|private
name|boolean
name|createdummylocalizefile
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getRawPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|file
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|verifyTrackedResourceCount (LocalResourcesTracker tracker, int expected)
specifier|private
name|void
name|verifyTrackedResourceCount
parameter_list|(
name|LocalResourcesTracker
name|tracker
parameter_list|,
name|int
name|expected
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|Iterator
argument_list|<
name|LocalizedResource
argument_list|>
name|iter
init|=
name|tracker
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Tracker resource count does not match"
argument_list|,
name|expected
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
DECL|method|createLocalResourceRequest (String user, int i, long ts, LocalResourceVisibility vis)
specifier|private
name|LocalResourceRequest
name|createLocalResourceRequest
parameter_list|(
name|String
name|user
parameter_list|,
name|int
name|i
parameter_list|,
name|long
name|ts
parameter_list|,
name|LocalResourceVisibility
name|vis
parameter_list|)
block|{
specifier|final
name|LocalResourceRequest
name|req
init|=
operator|new
name|LocalResourceRequest
argument_list|(
operator|new
name|Path
argument_list|(
literal|"file:///tmp/"
operator|+
name|user
operator|+
literal|"/rsrc"
operator|+
name|i
argument_list|)
argument_list|,
name|ts
operator|+
name|i
operator|*
literal|2000
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|vis
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|req
return|;
block|}
DECL|method|createLocalizedResource (LocalResourceRequest req, Dispatcher dispatcher)
specifier|private
name|LocalizedResource
name|createLocalizedResource
parameter_list|(
name|LocalResourceRequest
name|req
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|)
block|{
name|LocalizedResource
name|lr
init|=
operator|new
name|LocalizedResource
argument_list|(
name|req
argument_list|,
name|dispatcher
argument_list|)
decl_stmt|;
return|return
name|lr
return|;
block|}
DECL|method|createDispatcher (Configuration conf)
specifier|private
name|DrainDispatcher
name|createDispatcher
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|DrainDispatcher
name|dispatcher
init|=
operator|new
name|DrainDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|dispatcher
return|;
block|}
block|}
end_class

end_unit

