begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.nodemanager.amrmproxy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|amrmproxy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ContainerManagementProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|LogAggregationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|NodeHealthStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|LocalDirsHandlerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeResourceMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeStatusUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|application
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|recovery
operator|.
name|NMStateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|scheduler
operator|.
name|OpportunisticContainerAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|security
operator|.
name|NMContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|security
operator|.
name|NMTokenSecretManagerInNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_comment
comment|/**  * Base class for all the AMRMProxyService test cases. It provides utility  * methods that can be used by the concrete test case classes  *  */
end_comment

begin_class
DECL|class|BaseAMRMProxyTest
specifier|public
specifier|abstract
class|class
name|BaseAMRMProxyTest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BaseAMRMProxyTest
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * The AMRMProxyService instance that will be used by all the test cases    */
DECL|field|amrmProxyService
specifier|private
name|MockAMRMProxyService
name|amrmProxyService
decl_stmt|;
comment|/**    * Thread pool used for asynchronous operations    */
DECL|field|threadpool
specifier|private
specifier|static
name|ExecutorService
name|threadpool
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|dispatcher
specifier|private
name|AsyncDispatcher
name|dispatcher
decl_stmt|;
DECL|method|getAMRMProxyService ()
specifier|protected
name|MockAMRMProxyService
name|getAMRMProxyService
parameter_list|()
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|this
operator|.
name|amrmProxyService
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|amrmProxyService
return|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|this
operator|.
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|AMRM_PROXY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|mockPassThroughInterceptorClass
init|=
name|PassThroughRequestInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// Create a request intercepter pipeline for testing. The last one in the
comment|// chain will call the mock resource manager. The others in the chain will
comment|// simply forward it to the next one in the chain
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|AMRM_PROXY_INTERCEPTOR_CLASS_PIPELINE
argument_list|,
name|mockPassThroughInterceptorClass
operator|+
literal|","
operator|+
name|mockPassThroughInterceptorClass
operator|+
literal|","
operator|+
name|mockPassThroughInterceptorClass
operator|+
literal|","
operator|+
name|MockRequestInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|dispatcher
operator|=
operator|new
name|AsyncDispatcher
argument_list|()
expr_stmt|;
name|this
operator|.
name|dispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|amrmProxyService
operator|=
name|createAndStartAMRMProxyService
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|amrmProxyService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|amrmProxyService
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|getThreadPool ()
specifier|protected
name|ExecutorService
name|getThreadPool
parameter_list|()
block|{
return|return
name|threadpool
return|;
block|}
DECL|method|createAndStartAMRMProxyService ()
specifier|protected
name|MockAMRMProxyService
name|createAndStartAMRMProxyService
parameter_list|()
block|{
name|MockAMRMProxyService
name|svc
init|=
operator|new
name|MockAMRMProxyService
argument_list|(
operator|new
name|NullContext
argument_list|()
argument_list|,
name|dispatcher
argument_list|)
decl_stmt|;
name|svc
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|svc
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|svc
return|;
block|}
comment|/**    * This helper method will invoke the specified function in parallel for each    * end point in the specified list using a thread pool and return the    * responses received from the function. It implements the logic required for    * dispatching requests in parallel and waiting for the responses. If any of    * the function call fails or times out, it will ignore and proceed with the    * rest. So the responses returned can be less than the number of end points    * specified    *     * @param testContext    * @param func    * @return    */
DECL|method|runInParallel (List<T> testContexts, final Function<T, R> func)
specifier|protected
parameter_list|<
name|T
parameter_list|,
name|R
parameter_list|>
name|List
argument_list|<
name|R
argument_list|>
name|runInParallel
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|testContexts
parameter_list|,
specifier|final
name|Function
argument_list|<
name|T
argument_list|,
name|R
argument_list|>
name|func
parameter_list|)
block|{
name|ExecutorCompletionService
argument_list|<
name|R
argument_list|>
name|completionService
init|=
operator|new
name|ExecutorCompletionService
argument_list|<
name|R
argument_list|>
argument_list|(
name|this
operator|.
name|getThreadPool
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending requests to endpoints asynchronously. Number of test contexts="
operator|+
name|testContexts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|testContexts
operator|.
name|size
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
specifier|final
name|T
name|testContext
init|=
name|testContexts
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding request to threadpool for test context: "
operator|+
name|testContext
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|completionService
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|R
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|R
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending request. Test context:"
operator|+
name|testContext
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|R
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|response
operator|=
name|func
operator|.
name|invoke
argument_list|(
name|testContext
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully sent request for context: "
operator|+
name|testContext
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to process request for context: "
operator|+
name|testContext
argument_list|)
expr_stmt|;
name|response
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|R
argument_list|>
name|responseList
init|=
operator|new
name|ArrayList
argument_list|<
name|R
argument_list|>
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for responses from endpoints. Number of contexts="
operator|+
name|testContexts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testContexts
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
try|try
block|{
specifier|final
name|Future
argument_list|<
name|R
argument_list|>
name|future
init|=
name|completionService
operator|.
name|take
argument_list|()
decl_stmt|;
specifier|final
name|R
name|response
init|=
name|future
operator|.
name|get
argument_list|(
literal|3000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|responseList
operator|.
name|add
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to process request "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|responseList
return|;
block|}
comment|/**    * Helper method to register an application master using specified testAppId    * as the application identifier and return the response    *     * @param testAppId    * @return    * @throws Exception    * @throws YarnException    * @throws IOException    */
DECL|method|registerApplicationMaster ( final int testAppId)
specifier|protected
name|RegisterApplicationMasterResponse
name|registerApplicationMaster
parameter_list|(
specifier|final
name|int
name|testAppId
parameter_list|)
throws|throws
name|Exception
throws|,
name|YarnException
throws|,
name|IOException
block|{
specifier|final
name|ApplicationUserInfo
name|ugi
init|=
name|getApplicationUserInfo
argument_list|(
name|testAppId
argument_list|)
decl_stmt|;
return|return
name|ugi
operator|.
name|getUser
argument_list|()
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|RegisterApplicationMasterResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RegisterApplicationMasterResponse
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|getAMRMProxyService
argument_list|()
operator|.
name|initApp
argument_list|(
name|ugi
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|ugi
operator|.
name|getUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|RegisterApplicationMasterRequest
name|req
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|RegisterApplicationMasterRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|req
operator|.
name|setHost
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|testAppId
argument_list|)
argument_list|)
expr_stmt|;
name|req
operator|.
name|setRpcPort
argument_list|(
name|testAppId
argument_list|)
expr_stmt|;
name|req
operator|.
name|setTrackingUrl
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|RegisterApplicationMasterResponse
name|response
init|=
name|getAMRMProxyService
argument_list|()
operator|.
name|registerApplicationMaster
argument_list|(
name|req
argument_list|)
decl_stmt|;
return|return
name|response
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Helper method that can be used to register multiple application masters in    * parallel to the specified RM end points    *     * @param testContexts - used to identify the requests    * @return    */
DECL|method|registerApplicationMastersInParallel ( final ArrayList<T> testContexts)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|RegisterApplicationMasterResponseInfo
argument_list|<
name|T
argument_list|>
argument_list|>
name|registerApplicationMastersInParallel
parameter_list|(
specifier|final
name|ArrayList
argument_list|<
name|T
argument_list|>
name|testContexts
parameter_list|)
block|{
name|List
argument_list|<
name|RegisterApplicationMasterResponseInfo
argument_list|<
name|T
argument_list|>
argument_list|>
name|responses
init|=
name|runInParallel
argument_list|(
name|testContexts
argument_list|,
operator|new
name|Function
argument_list|<
name|T
argument_list|,
name|RegisterApplicationMasterResponseInfo
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RegisterApplicationMasterResponseInfo
argument_list|<
name|T
argument_list|>
name|invoke
parameter_list|(
name|T
name|testContext
parameter_list|)
block|{
name|RegisterApplicationMasterResponseInfo
argument_list|<
name|T
argument_list|>
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|int
name|index
init|=
name|testContexts
operator|.
name|indexOf
argument_list|(
name|testContext
argument_list|)
decl_stmt|;
name|response
operator|=
operator|new
name|RegisterApplicationMasterResponseInfo
argument_list|<
name|T
argument_list|>
argument_list|(
name|registerApplicationMaster
argument_list|(
name|index
argument_list|)
argument_list|,
name|testContext
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|index
argument_list|)
argument_list|,
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sucessfully registered application master with test context: "
operator|+
name|testContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|response
operator|=
literal|null
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to register application master with test context: "
operator|+
name|testContext
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of responses received does not match with request"
argument_list|,
name|testContexts
operator|.
name|size
argument_list|()
argument_list|,
name|responses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|T
argument_list|>
name|contextResponses
init|=
operator|new
name|TreeSet
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RegisterApplicationMasterResponseInfo
argument_list|<
name|T
argument_list|>
name|item
range|:
name|responses
control|)
block|{
name|contextResponses
operator|.
name|add
argument_list|(
name|item
operator|.
name|getTestContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|T
name|ep
range|:
name|testContexts
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|contextResponses
operator|.
name|contains
argument_list|(
name|ep
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|responses
return|;
block|}
comment|/**    * Unregisters the application master for specified application id    *     * @param appId    * @param status    * @return    * @throws Exception    * @throws YarnException    * @throws IOException    */
DECL|method|finishApplicationMaster ( final int appId, final FinalApplicationStatus status)
specifier|protected
name|FinishApplicationMasterResponse
name|finishApplicationMaster
parameter_list|(
specifier|final
name|int
name|appId
parameter_list|,
specifier|final
name|FinalApplicationStatus
name|status
parameter_list|)
throws|throws
name|Exception
throws|,
name|YarnException
throws|,
name|IOException
block|{
specifier|final
name|ApplicationUserInfo
name|ugi
init|=
name|getApplicationUserInfo
argument_list|(
name|appId
argument_list|)
decl_stmt|;
return|return
name|ugi
operator|.
name|getUser
argument_list|()
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|FinishApplicationMasterResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FinishApplicationMasterResponse
name|run
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|FinishApplicationMasterRequest
name|req
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|FinishApplicationMasterRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|req
operator|.
name|setDiagnostics
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|req
operator|.
name|setTrackingUrl
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|req
operator|.
name|setFinalApplicationStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|FinishApplicationMasterResponse
name|response
init|=
name|getAMRMProxyService
argument_list|()
operator|.
name|finishApplicationMaster
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|getAMRMProxyService
argument_list|()
operator|.
name|stopApp
argument_list|(
name|ugi
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|finishApplicationMastersInParallel ( final ArrayList<T> testContexts)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|FinishApplicationMasterResponseInfo
argument_list|<
name|T
argument_list|>
argument_list|>
name|finishApplicationMastersInParallel
parameter_list|(
specifier|final
name|ArrayList
argument_list|<
name|T
argument_list|>
name|testContexts
parameter_list|)
block|{
name|List
argument_list|<
name|FinishApplicationMasterResponseInfo
argument_list|<
name|T
argument_list|>
argument_list|>
name|responses
init|=
name|runInParallel
argument_list|(
name|testContexts
argument_list|,
operator|new
name|Function
argument_list|<
name|T
argument_list|,
name|FinishApplicationMasterResponseInfo
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FinishApplicationMasterResponseInfo
argument_list|<
name|T
argument_list|>
name|invoke
parameter_list|(
name|T
name|testContext
parameter_list|)
block|{
name|FinishApplicationMasterResponseInfo
argument_list|<
name|T
argument_list|>
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|response
operator|=
operator|new
name|FinishApplicationMasterResponseInfo
argument_list|<
name|T
argument_list|>
argument_list|(
name|finishApplicationMaster
argument_list|(
name|testContexts
operator|.
name|indexOf
argument_list|(
name|testContext
argument_list|)
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|)
argument_list|,
name|testContext
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sucessfully finished application master with test contexts: "
operator|+
name|testContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|response
operator|=
literal|null
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to finish application master with test context: "
operator|+
name|testContext
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of responses received does not match with request"
argument_list|,
name|testContexts
operator|.
name|size
argument_list|()
argument_list|,
name|responses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|T
argument_list|>
name|contextResponses
init|=
operator|new
name|TreeSet
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FinishApplicationMasterResponseInfo
argument_list|<
name|T
argument_list|>
name|item
range|:
name|responses
control|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|item
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
name|contextResponses
operator|.
name|add
argument_list|(
name|item
operator|.
name|getTestContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|T
name|ep
range|:
name|testContexts
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|contextResponses
operator|.
name|contains
argument_list|(
name|ep
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|responses
return|;
block|}
DECL|method|allocate (final int testAppId)
specifier|protected
name|AllocateResponse
name|allocate
parameter_list|(
specifier|final
name|int
name|testAppId
parameter_list|)
throws|throws
name|Exception
throws|,
name|YarnException
throws|,
name|IOException
block|{
specifier|final
name|AllocateRequest
name|req
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|AllocateRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|req
operator|.
name|setResponseId
argument_list|(
name|testAppId
argument_list|)
expr_stmt|;
return|return
name|allocate
argument_list|(
name|testAppId
argument_list|,
name|req
argument_list|)
return|;
block|}
DECL|method|allocate (final int testAppId, final AllocateRequest request)
specifier|protected
name|AllocateResponse
name|allocate
parameter_list|(
specifier|final
name|int
name|testAppId
parameter_list|,
specifier|final
name|AllocateRequest
name|request
parameter_list|)
throws|throws
name|Exception
throws|,
name|YarnException
throws|,
name|IOException
block|{
specifier|final
name|ApplicationUserInfo
name|ugi
init|=
name|getApplicationUserInfo
argument_list|(
name|testAppId
argument_list|)
decl_stmt|;
return|return
name|ugi
operator|.
name|getUser
argument_list|()
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|AllocateResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AllocateResponse
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|AllocateResponse
name|response
init|=
name|getAMRMProxyService
argument_list|()
operator|.
name|allocate
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|response
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|getApplicationUserInfo (final int testAppId)
specifier|protected
name|ApplicationUserInfo
name|getApplicationUserInfo
parameter_list|(
specifier|final
name|int
name|testAppId
parameter_list|)
block|{
specifier|final
name|ApplicationAttemptId
name|attemptId
init|=
name|getApplicationAttemptId
argument_list|(
name|testAppId
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|attemptId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|AMRMTokenIdentifier
name|token
init|=
operator|new
name|AMRMTokenIdentifier
argument_list|(
name|attemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ugi
operator|.
name|addTokenIdentifier
argument_list|(
name|token
argument_list|)
expr_stmt|;
return|return
operator|new
name|ApplicationUserInfo
argument_list|(
name|ugi
argument_list|,
name|attemptId
argument_list|)
return|;
block|}
DECL|method|createResourceRequests (String[] hosts, int memory, int vCores, int priority, int containers)
specifier|protected
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|createResourceRequests
parameter_list|(
name|String
index|[]
name|hosts
parameter_list|,
name|int
name|memory
parameter_list|,
name|int
name|vCores
parameter_list|,
name|int
name|priority
parameter_list|,
name|int
name|containers
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createResourceRequests
argument_list|(
name|hosts
argument_list|,
name|memory
argument_list|,
name|vCores
argument_list|,
name|priority
argument_list|,
name|containers
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createResourceRequests (String[] hosts, int memory, int vCores, int priority, int containers, String labelExpression)
specifier|protected
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|createResourceRequests
parameter_list|(
name|String
index|[]
name|hosts
parameter_list|,
name|int
name|memory
parameter_list|,
name|int
name|vCores
parameter_list|,
name|int
name|priority
parameter_list|,
name|int
name|containers
parameter_list|,
name|String
name|labelExpression
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|host
range|:
name|hosts
control|)
block|{
name|ResourceRequest
name|hostReq
init|=
name|createResourceRequest
argument_list|(
name|host
argument_list|,
name|memory
argument_list|,
name|vCores
argument_list|,
name|priority
argument_list|,
name|containers
argument_list|,
name|labelExpression
argument_list|)
decl_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|hostReq
argument_list|)
expr_stmt|;
name|ResourceRequest
name|rackReq
init|=
name|createResourceRequest
argument_list|(
literal|"/default-rack"
argument_list|,
name|memory
argument_list|,
name|vCores
argument_list|,
name|priority
argument_list|,
name|containers
argument_list|,
name|labelExpression
argument_list|)
decl_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|rackReq
argument_list|)
expr_stmt|;
block|}
name|ResourceRequest
name|offRackReq
init|=
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|memory
argument_list|,
name|vCores
argument_list|,
name|priority
argument_list|,
name|containers
argument_list|,
name|labelExpression
argument_list|)
decl_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|offRackReq
argument_list|)
expr_stmt|;
return|return
name|reqs
return|;
block|}
DECL|method|createResourceRequest (String resource, int memory, int vCores, int priority, int containers)
specifier|protected
name|ResourceRequest
name|createResourceRequest
parameter_list|(
name|String
name|resource
parameter_list|,
name|int
name|memory
parameter_list|,
name|int
name|vCores
parameter_list|,
name|int
name|priority
parameter_list|,
name|int
name|containers
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createResourceRequest
argument_list|(
name|resource
argument_list|,
name|memory
argument_list|,
name|vCores
argument_list|,
name|priority
argument_list|,
name|containers
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createResourceRequest (String resource, int memory, int vCores, int priority, int containers, String labelExpression)
specifier|protected
name|ResourceRequest
name|createResourceRequest
parameter_list|(
name|String
name|resource
parameter_list|,
name|int
name|memory
parameter_list|,
name|int
name|vCores
parameter_list|,
name|int
name|priority
parameter_list|,
name|int
name|containers
parameter_list|,
name|String
name|labelExpression
parameter_list|)
throws|throws
name|Exception
block|{
name|ResourceRequest
name|req
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|req
operator|.
name|setResourceName
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|req
operator|.
name|setNumContainers
argument_list|(
name|containers
argument_list|)
expr_stmt|;
name|Priority
name|pri
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
decl_stmt|;
name|pri
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|req
operator|.
name|setPriority
argument_list|(
name|pri
argument_list|)
expr_stmt|;
name|Resource
name|capability
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
decl_stmt|;
name|capability
operator|.
name|setMemory
argument_list|(
name|memory
argument_list|)
expr_stmt|;
name|capability
operator|.
name|setVirtualCores
argument_list|(
name|vCores
argument_list|)
expr_stmt|;
name|req
operator|.
name|setCapability
argument_list|(
name|capability
argument_list|)
expr_stmt|;
if|if
condition|(
name|labelExpression
operator|!=
literal|null
condition|)
block|{
name|req
operator|.
name|setNodeLabelExpression
argument_list|(
name|labelExpression
argument_list|)
expr_stmt|;
block|}
return|return
name|req
return|;
block|}
comment|/**    * Returns an ApplicationId with the specified identifier    *     * @param testAppId    * @return    */
DECL|method|getApplicationId (int testAppId)
specifier|protected
name|ApplicationId
name|getApplicationId
parameter_list|(
name|int
name|testAppId
parameter_list|)
block|{
return|return
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|123456
argument_list|,
name|testAppId
argument_list|)
return|;
block|}
comment|/**    * Return an instance of ApplicationAttemptId using specified identifier. This    * identifier will be used for the ApplicationId too.    *     * @param testAppId    * @return    */
DECL|method|getApplicationAttemptId (int testAppId)
specifier|protected
name|ApplicationAttemptId
name|getApplicationAttemptId
parameter_list|(
name|int
name|testAppId
parameter_list|)
block|{
return|return
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|getApplicationId
argument_list|(
name|testAppId
argument_list|)
argument_list|,
name|testAppId
argument_list|)
return|;
block|}
comment|/**    * Return an instance of ApplicationAttemptId using specified identifier and    * application id    *     * @param testAppId    * @return    */
DECL|method|getApplicationAttemptId (int testAppId, ApplicationId appId)
specifier|protected
name|ApplicationAttemptId
name|getApplicationAttemptId
parameter_list|(
name|int
name|testAppId
parameter_list|,
name|ApplicationId
name|appId
parameter_list|)
block|{
return|return
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|testAppId
argument_list|)
return|;
block|}
DECL|class|RegisterApplicationMasterResponseInfo
specifier|protected
specifier|static
class|class
name|RegisterApplicationMasterResponseInfo
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|response
specifier|private
name|RegisterApplicationMasterResponse
name|response
decl_stmt|;
DECL|field|testContext
specifier|private
name|T
name|testContext
decl_stmt|;
DECL|method|RegisterApplicationMasterResponseInfo ( RegisterApplicationMasterResponse response, T testContext)
name|RegisterApplicationMasterResponseInfo
parameter_list|(
name|RegisterApplicationMasterResponse
name|response
parameter_list|,
name|T
name|testContext
parameter_list|)
block|{
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
name|this
operator|.
name|testContext
operator|=
name|testContext
expr_stmt|;
block|}
DECL|method|getResponse ()
specifier|public
name|RegisterApplicationMasterResponse
name|getResponse
parameter_list|()
block|{
return|return
name|response
return|;
block|}
DECL|method|getTestContext ()
specifier|public
name|T
name|getTestContext
parameter_list|()
block|{
return|return
name|testContext
return|;
block|}
block|}
DECL|class|FinishApplicationMasterResponseInfo
specifier|protected
specifier|static
class|class
name|FinishApplicationMasterResponseInfo
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|response
specifier|private
name|FinishApplicationMasterResponse
name|response
decl_stmt|;
DECL|field|testContext
specifier|private
name|T
name|testContext
decl_stmt|;
DECL|method|FinishApplicationMasterResponseInfo ( FinishApplicationMasterResponse response, T testContext)
name|FinishApplicationMasterResponseInfo
parameter_list|(
name|FinishApplicationMasterResponse
name|response
parameter_list|,
name|T
name|testContext
parameter_list|)
block|{
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
name|this
operator|.
name|testContext
operator|=
name|testContext
expr_stmt|;
block|}
DECL|method|getResponse ()
specifier|public
name|FinishApplicationMasterResponse
name|getResponse
parameter_list|()
block|{
return|return
name|response
return|;
block|}
DECL|method|getTestContext ()
specifier|public
name|T
name|getTestContext
parameter_list|()
block|{
return|return
name|testContext
return|;
block|}
block|}
DECL|class|ApplicationUserInfo
specifier|protected
specifier|static
class|class
name|ApplicationUserInfo
block|{
DECL|field|user
specifier|private
name|UserGroupInformation
name|user
decl_stmt|;
DECL|field|attemptId
specifier|private
name|ApplicationAttemptId
name|attemptId
decl_stmt|;
DECL|method|ApplicationUserInfo (UserGroupInformation user, ApplicationAttemptId attemptId)
name|ApplicationUserInfo
parameter_list|(
name|UserGroupInformation
name|user
parameter_list|,
name|ApplicationAttemptId
name|attemptId
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|attemptId
operator|=
name|attemptId
expr_stmt|;
block|}
DECL|method|getUser ()
specifier|public
name|UserGroupInformation
name|getUser
parameter_list|()
block|{
return|return
name|this
operator|.
name|user
return|;
block|}
DECL|method|getAppAttemptId ()
specifier|public
name|ApplicationAttemptId
name|getAppAttemptId
parameter_list|()
block|{
return|return
name|this
operator|.
name|attemptId
return|;
block|}
block|}
DECL|class|MockAMRMProxyService
specifier|protected
specifier|static
class|class
name|MockAMRMProxyService
extends|extends
name|AMRMProxyService
block|{
DECL|method|MockAMRMProxyService (Context nmContext, AsyncDispatcher dispatcher)
specifier|public
name|MockAMRMProxyService
parameter_list|(
name|Context
name|nmContext
parameter_list|,
name|AsyncDispatcher
name|dispatcher
parameter_list|)
block|{
name|super
argument_list|(
name|nmContext
argument_list|,
name|dispatcher
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method is used by the test code to initialize the pipeline. In the      * actual service, the initialization is called by the      * ContainerManagerImpl::StartContainers method      *       * @param applicationId      * @param user      */
DECL|method|initApp (ApplicationAttemptId applicationId, String user)
specifier|public
name|void
name|initApp
parameter_list|(
name|ApplicationAttemptId
name|applicationId
parameter_list|,
name|String
name|user
parameter_list|)
block|{
name|super
operator|.
name|initializePipeline
argument_list|(
name|applicationId
argument_list|,
name|user
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|stopApp (ApplicationId applicationId)
specifier|public
name|void
name|stopApp
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|)
block|{
name|super
operator|.
name|stopApplication
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * The Function interface is used for passing method pointers that can be    * invoked asynchronously at a later point.    */
DECL|interface|Function
specifier|protected
interface|interface
name|Function
parameter_list|<
name|T
parameter_list|,
name|R
parameter_list|>
block|{
DECL|method|invoke (T input)
specifier|public
name|R
name|invoke
parameter_list|(
name|T
name|input
parameter_list|)
function_decl|;
block|}
DECL|class|NullContext
specifier|protected
class|class
name|NullContext
implements|implements
name|Context
block|{
annotation|@
name|Override
DECL|method|getNodeId ()
specifier|public
name|NodeId
name|getNodeId
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getHttpPort ()
specifier|public
name|int
name|getHttpPort
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getApplications ()
specifier|public
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|Application
argument_list|>
name|getApplications
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getSystemCredentialsForApps ()
specifier|public
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|Credentials
argument_list|>
name|getSystemCredentialsForApps
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getContainers ()
specifier|public
name|ConcurrentMap
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
name|getContainers
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getIncreasedContainers ()
specifier|public
name|ConcurrentMap
argument_list|<
name|ContainerId
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
argument_list|>
name|getIncreasedContainers
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getContainerTokenSecretManager ()
specifier|public
name|NMContainerTokenSecretManager
name|getContainerTokenSecretManager
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getNMTokenSecretManager ()
specifier|public
name|NMTokenSecretManagerInNM
name|getNMTokenSecretManager
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getNodeHealthStatus ()
specifier|public
name|NodeHealthStatus
name|getNodeHealthStatus
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getContainerManager ()
specifier|public
name|ContainerManagementProtocol
name|getContainerManager
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getLocalDirsHandler ()
specifier|public
name|LocalDirsHandlerService
name|getLocalDirsHandler
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationACLsManager ()
specifier|public
name|ApplicationACLsManager
name|getApplicationACLsManager
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getNMStateStore ()
specifier|public
name|NMStateStoreService
name|getNMStateStore
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getDecommissioned ()
specifier|public
name|boolean
name|getDecommissioned
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|setDecommissioned (boolean isDecommissioned)
specifier|public
name|void
name|setDecommissioned
parameter_list|(
name|boolean
name|isDecommissioned
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|getLogAggregationStatusForApps ()
specifier|public
name|ConcurrentLinkedQueue
argument_list|<
name|LogAggregationReport
argument_list|>
name|getLogAggregationStatusForApps
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getNodeResourceMonitor ()
specifier|public
name|NodeResourceMonitor
name|getNodeResourceMonitor
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getNodeStatusUpdater ()
specifier|public
name|NodeStatusUpdater
name|getNodeStatusUpdater
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getQueuingContext ()
specifier|public
name|QueuingContext
name|getQueuingContext
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|isDistributedSchedulingEnabled ()
specifier|public
name|boolean
name|isDistributedSchedulingEnabled
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getContainerAllocator ()
specifier|public
name|OpportunisticContainerAllocator
name|getContainerAllocator
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

