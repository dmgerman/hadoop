begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.reader
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|ForbiddenException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|TestTimelineReaderWebServicesBasicAcl
specifier|public
class|class
name|TestTimelineReaderWebServicesBasicAcl
block|{
DECL|field|manager
specifier|private
name|TimelineReaderManager
name|manager
decl_stmt|;
DECL|field|adminUser
specifier|private
specifier|static
name|String
name|adminUser
init|=
literal|"admin"
decl_stmt|;
DECL|field|adminUgi
specifier|private
specifier|static
name|UserGroupInformation
name|adminUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|adminUser
argument_list|)
decl_stmt|;
DECL|field|config
specifier|private
name|Configuration
name|config
decl_stmt|;
DECL|method|setUp ()
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|config
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
block|}
DECL|method|tearDown ()
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|manager
operator|!=
literal|null
condition|)
block|{
name|manager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|manager
operator|=
literal|null
expr_stmt|;
block|}
name|config
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|testTimelineReaderManagerAclsWhenDisabled ()
annotation|@
name|Test
specifier|public
name|void
name|testTimelineReaderManagerAclsWhenDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|config
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
name|adminUser
argument_list|)
expr_stmt|;
name|manager
operator|=
operator|new
name|TimelineReaderManager
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|manager
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|manager
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// when acls are disabled, always return true
name|Assert
operator|.
name|assertTrue
argument_list|(
name|manager
operator|.
name|checkAccess
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// filter is disabled, so should return false
name|Assert
operator|.
name|assertFalse
argument_list|(
name|TimelineReaderWebServices
operator|.
name|isDisplayEntityPerUserFilterEnabled
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTimelineReaderManagerAclsWhenEnabled ()
annotation|@
name|Test
specifier|public
name|void
name|testTimelineReaderManagerAclsWhenEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|FILTER_ENTITY_LIST_BY_USER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
name|adminUser
argument_list|)
expr_stmt|;
name|manager
operator|=
operator|new
name|TimelineReaderManager
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|manager
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|manager
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|user1
init|=
literal|"user1"
decl_stmt|;
name|String
name|user2
init|=
literal|"user2"
decl_stmt|;
name|UserGroupInformation
name|user1Ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user1
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|user2Ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user2
argument_list|)
decl_stmt|;
comment|// false because ugi is null
name|Assert
operator|.
name|assertFalse
argument_list|(
name|TimelineReaderWebServices
operator|.
name|validateAuthUserWithEntityUser
argument_list|(
name|manager
argument_list|,
literal|null
argument_list|,
name|user1
argument_list|)
argument_list|)
expr_stmt|;
comment|// false because ugi is null in non-secure cluster. User must pass
comment|// ?user.name as query params in REST end points.
try|try
block|{
name|TimelineReaderWebServices
operator|.
name|checkAccess
argument_list|(
name|manager
argument_list|,
literal|null
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"user1Ugi is not allowed to view user1"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ForbiddenException
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// incoming ugi is admin asking for entity owner user1
name|Assert
operator|.
name|assertTrue
argument_list|(
name|TimelineReaderWebServices
operator|.
name|checkAccess
argument_list|(
name|manager
argument_list|,
name|adminUgi
argument_list|,
name|user1
argument_list|)
argument_list|)
expr_stmt|;
comment|// incoming ugi is admin asking for entity owner user1
name|Assert
operator|.
name|assertTrue
argument_list|(
name|TimelineReaderWebServices
operator|.
name|checkAccess
argument_list|(
name|manager
argument_list|,
name|adminUgi
argument_list|,
name|user2
argument_list|)
argument_list|)
expr_stmt|;
comment|// incoming ugi is non-admin i.e user1Ugi asking for entity owner user2
try|try
block|{
name|TimelineReaderWebServices
operator|.
name|checkAccess
argument_list|(
name|manager
argument_list|,
name|user1Ugi
argument_list|,
name|user2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"user1Ugi is not allowed to view user2"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ForbiddenException
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// incoming ugi is non-admin i.e user2Ugi asking for entity owner user1
try|try
block|{
name|TimelineReaderWebServices
operator|.
name|checkAccess
argument_list|(
name|manager
argument_list|,
name|user1Ugi
argument_list|,
name|user2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"user2Ugi is not allowed to view user1"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ForbiddenException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|String
name|userKey
init|=
literal|"user"
decl_stmt|;
comment|// incoming ugi is admin asking for entities
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|entities
init|=
name|createEntities
argument_list|(
literal|10
argument_list|,
name|userKey
argument_list|)
decl_stmt|;
name|TimelineReaderWebServices
operator|.
name|checkAccess
argument_list|(
name|manager
argument_list|,
name|adminUgi
argument_list|,
name|entities
argument_list|,
name|userKey
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// admin is allowed to view other entities
name|Assert
operator|.
name|assertTrue
argument_list|(
name|entities
operator|.
name|size
argument_list|()
operator|==
literal|10
argument_list|)
expr_stmt|;
comment|// incoming ugi is user1Ugi asking for entities
comment|// only user1 entities are allowed to view
name|entities
operator|=
name|createEntities
argument_list|(
literal|5
argument_list|,
name|userKey
argument_list|)
expr_stmt|;
name|TimelineReaderWebServices
operator|.
name|checkAccess
argument_list|(
name|manager
argument_list|,
name|user1Ugi
argument_list|,
name|entities
argument_list|,
name|userKey
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|entities
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|user1
argument_list|,
name|entities
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getInfo
argument_list|()
operator|.
name|get
argument_list|(
name|userKey
argument_list|)
argument_list|)
expr_stmt|;
comment|// incoming ugi is user2Ugi asking for entities
comment|// only user2 entities are allowed to view
name|entities
operator|=
name|createEntities
argument_list|(
literal|8
argument_list|,
name|userKey
argument_list|)
expr_stmt|;
name|TimelineReaderWebServices
operator|.
name|checkAccess
argument_list|(
name|manager
argument_list|,
name|user2Ugi
argument_list|,
name|entities
argument_list|,
name|userKey
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|entities
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|user2
argument_list|,
name|entities
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getInfo
argument_list|()
operator|.
name|get
argument_list|(
name|userKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createEntities (int noOfUsers, String userKey)
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|createEntities
parameter_list|(
name|int
name|noOfUsers
parameter_list|,
name|String
name|userKey
parameter_list|)
block|{
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|entities
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|noOfUsers
condition|;
name|i
operator|++
control|)
block|{
name|TimelineEntity
name|e
init|=
operator|new
name|TimelineEntity
argument_list|()
decl_stmt|;
name|e
operator|.
name|setType
argument_list|(
literal|"user"
operator|+
name|i
argument_list|)
expr_stmt|;
name|e
operator|.
name|setId
argument_list|(
literal|"user"
operator|+
name|i
argument_list|)
expr_stmt|;
name|e
operator|.
name|getInfo
argument_list|()
operator|.
name|put
argument_list|(
name|userKey
argument_list|,
literal|"user"
operator|+
name|i
argument_list|)
expr_stmt|;
name|entities
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|entities
return|;
block|}
block|}
end_class

end_unit

