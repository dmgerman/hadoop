begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.reader
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestTimelineUIDConverter
specifier|public
class|class
name|TestTimelineUIDConverter
block|{
annotation|@
name|Test
DECL|method|testUIDEncodingDecoding ()
specifier|public
name|void
name|testUIDEncodingDecoding
parameter_list|()
throws|throws
name|Exception
block|{
name|TimelineReaderContext
name|context
init|=
operator|new
name|TimelineReaderContext
argument_list|(
literal|"!cluster"
argument_list|,
literal|"!b*o*!xer"
argument_list|,
literal|"oozie*"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|uid
init|=
name|TimelineUIDConverter
operator|.
name|FLOW_UID
operator|.
name|encodeUID
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"*!cluster!*!b**o***!xer!oozie**"
argument_list|,
name|uid
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
argument_list|,
name|TimelineUIDConverter
operator|.
name|FLOW_UID
operator|.
name|decodeUID
argument_list|(
name|uid
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|TimelineReaderContext
argument_list|(
literal|"!cluster*"
argument_list|,
literal|"!b*o!!x!*er"
argument_list|,
literal|"*oozie!"
argument_list|,
literal|123L
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|uid
operator|=
name|TimelineUIDConverter
operator|.
name|FLOWRUN_UID
operator|.
name|encodeUID
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"*!cluster**!*!b**o*!*!x*!**er!**oozie*!!123"
argument_list|,
name|uid
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
argument_list|,
name|TimelineUIDConverter
operator|.
name|FLOWRUN_UID
operator|.
name|decodeUID
argument_list|(
name|uid
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|TimelineReaderContext
argument_list|(
literal|"yarn_cluster"
argument_list|,
literal|"root"
argument_list|,
literal|"hive_join"
argument_list|,
literal|1234L
argument_list|,
literal|"application_1111111111_1111"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|uid
operator|=
name|TimelineUIDConverter
operator|.
name|APPLICATION_UID
operator|.
name|encodeUID
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"yarn_cluster!root!hive_join!1234!application_1111111111_1111"
argument_list|,
name|uid
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
argument_list|,
name|TimelineUIDConverter
operator|.
name|APPLICATION_UID
operator|.
name|decodeUID
argument_list|(
name|uid
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|TimelineReaderContext
argument_list|(
literal|"yarn_cluster"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"application_1111111111_1111"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|uid
operator|=
name|TimelineUIDConverter
operator|.
name|APPLICATION_UID
operator|.
name|encodeUID
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"yarn_cluster!application_1111111111_1111"
argument_list|,
name|uid
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
argument_list|,
name|TimelineUIDConverter
operator|.
name|APPLICATION_UID
operator|.
name|decodeUID
argument_list|(
name|uid
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|TimelineReaderContext
argument_list|(
literal|"yarn_cluster"
argument_list|,
literal|"root"
argument_list|,
literal|"hive_join"
argument_list|,
literal|1234L
argument_list|,
literal|"application_1111111111_1111"
argument_list|,
literal|"YARN_CONTAINER"
argument_list|,
literal|12345L
argument_list|,
literal|"container_1111111111_1111_01_000001"
argument_list|)
expr_stmt|;
name|uid
operator|=
name|TimelineUIDConverter
operator|.
name|GENERIC_ENTITY_UID
operator|.
name|encodeUID
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"yarn_cluster!root!hive_join!1234!application_1111111111_1111!"
operator|+
literal|"YARN_CONTAINER!12345!container_1111111111_1111_01_000001"
argument_list|,
name|uid
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
argument_list|,
name|TimelineUIDConverter
operator|.
name|GENERIC_ENTITY_UID
operator|.
name|decodeUID
argument_list|(
name|uid
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|TimelineReaderContext
argument_list|(
literal|"yarn_cluster"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"application_1111111111_1111"
argument_list|,
literal|"YARN_CONTAINER"
argument_list|,
literal|54321L
argument_list|,
literal|"container_1111111111_1111_01_000001"
argument_list|)
expr_stmt|;
name|uid
operator|=
name|TimelineUIDConverter
operator|.
name|GENERIC_ENTITY_UID
operator|.
name|encodeUID
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"yarn_cluster!application_1111111111_1111!YARN_CONTAINER!"
operator|+
literal|"54321!container_1111111111_1111_01_000001"
argument_list|,
name|uid
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
argument_list|,
name|TimelineUIDConverter
operator|.
name|GENERIC_ENTITY_UID
operator|.
name|decodeUID
argument_list|(
name|uid
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUIDNotProperlyEscaped ()
specifier|public
name|void
name|testUIDNotProperlyEscaped
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|TimelineUIDConverter
operator|.
name|FLOW_UID
operator|.
name|decodeUID
argument_list|(
literal|"*!cluster!*!b*o***!xer!oozie**"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"UID not properly escaped. Exception should have been thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|TimelineUIDConverter
operator|.
name|FLOW_UID
operator|.
name|decodeUID
argument_list|(
literal|"*!cluster!*!b**o***!xer!oozie*"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"UID not properly escaped. Exception should have been thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|TimelineUIDConverter
operator|.
name|FLOW_UID
operator|.
name|decodeUID
argument_list|(
literal|"*!cluster!*!b**o***xer!oozie*"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"UID not properly escaped. Exception should have been thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
name|assertNull
argument_list|(
name|TimelineUIDConverter
operator|.
name|FLOW_UID
operator|.
name|decodeUID
argument_list|(
literal|"!cluster!*!b**o***!xer!oozie**"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|TimelineUIDConverter
operator|.
name|FLOW_UID
operator|.
name|decodeUID
argument_list|(
literal|"*!cluster!*!b**o**!xer!oozie**"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

