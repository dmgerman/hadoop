begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestTimelineStorageUtils
specifier|public
class|class
name|TestTimelineStorageUtils
block|{
annotation|@
name|Test
DECL|method|testEncodeDecodeAppId ()
specifier|public
name|void
name|testEncodeDecodeAppId
parameter_list|()
block|{
name|long
name|currentTs
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId1
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|currentTs
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId2
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|currentTs
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId3
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|currentTs
operator|+
literal|300
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|appIdStr1
init|=
name|appId1
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|appIdStr2
init|=
name|appId2
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|appIdStr3
init|=
name|appId3
operator|.
name|toString
argument_list|()
decl_stmt|;
name|byte
index|[]
name|appIdBytes1
init|=
name|TimelineStorageUtils
operator|.
name|encodeAppId
argument_list|(
name|appIdStr1
argument_list|)
decl_stmt|;
name|byte
index|[]
name|appIdBytes2
init|=
name|TimelineStorageUtils
operator|.
name|encodeAppId
argument_list|(
name|appIdStr2
argument_list|)
decl_stmt|;
name|byte
index|[]
name|appIdBytes3
init|=
name|TimelineStorageUtils
operator|.
name|encodeAppId
argument_list|(
name|appIdStr3
argument_list|)
decl_stmt|;
comment|// App ids' should be encoded in a manner wherein descending order
comment|// is maintained.
name|assertTrue
argument_list|(
literal|"Ordering of app ids' is incorrect"
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|appIdBytes1
argument_list|,
name|appIdBytes2
argument_list|)
operator|>
literal|0
operator|&&
name|Bytes
operator|.
name|compareTo
argument_list|(
name|appIdBytes1
argument_list|,
name|appIdBytes3
argument_list|)
operator|>
literal|0
operator|&&
name|Bytes
operator|.
name|compareTo
argument_list|(
name|appIdBytes2
argument_list|,
name|appIdBytes3
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|decodedAppId1
init|=
name|TimelineStorageUtils
operator|.
name|decodeAppId
argument_list|(
name|appIdBytes1
argument_list|)
decl_stmt|;
name|String
name|decodedAppId2
init|=
name|TimelineStorageUtils
operator|.
name|decodeAppId
argument_list|(
name|appIdBytes2
argument_list|)
decl_stmt|;
name|String
name|decodedAppId3
init|=
name|TimelineStorageUtils
operator|.
name|decodeAppId
argument_list|(
name|appIdBytes3
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Decoded app id is not same as the app id encoded"
argument_list|,
name|appIdStr1
operator|.
name|equals
argument_list|(
name|decodedAppId1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Decoded app id is not same as the app id encoded"
argument_list|,
name|appIdStr2
operator|.
name|equals
argument_list|(
name|decodedAppId2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Decoded app id is not same as the app id encoded"
argument_list|,
name|appIdStr3
operator|.
name|equals
argument_list|(
name|decodedAppId3
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

