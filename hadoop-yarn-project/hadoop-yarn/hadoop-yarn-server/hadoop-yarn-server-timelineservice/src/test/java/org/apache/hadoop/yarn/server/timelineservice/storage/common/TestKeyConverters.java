begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|application
operator|.
name|ApplicationRowKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|application
operator|.
name|ApplicationRowKeyConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|apptoflow
operator|.
name|AppToFlowRowKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|apptoflow
operator|.
name|AppToFlowRowKeyConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|entity
operator|.
name|EntityRowKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|entity
operator|.
name|EntityRowKeyConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|flow
operator|.
name|FlowActivityRowKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|flow
operator|.
name|FlowActivityRowKeyConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|flow
operator|.
name|FlowRunRowKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|flow
operator|.
name|FlowRunRowKeyConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestKeyConverters
specifier|public
class|class
name|TestKeyConverters
block|{
DECL|field|QUALIFIER_SEP
specifier|private
specifier|final
specifier|static
name|String
name|QUALIFIER_SEP
init|=
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|getValue
argument_list|()
decl_stmt|;
DECL|field|QUALIFIER_SEP_BYTES
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|QUALIFIER_SEP_BYTES
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|QUALIFIER_SEP
argument_list|)
decl_stmt|;
DECL|field|CLUSTER
specifier|private
specifier|final
specifier|static
name|String
name|CLUSTER
init|=
literal|"cl"
operator|+
name|QUALIFIER_SEP
operator|+
literal|"uster"
decl_stmt|;
DECL|field|USER
specifier|private
specifier|final
specifier|static
name|String
name|USER
init|=
name|QUALIFIER_SEP
operator|+
literal|"user"
decl_stmt|;
DECL|field|FLOW_NAME
specifier|private
specifier|final
specifier|static
name|String
name|FLOW_NAME
init|=
literal|"dummy_"
operator|+
name|QUALIFIER_SEP
operator|+
literal|"flow"
operator|+
name|QUALIFIER_SEP
decl_stmt|;
DECL|field|FLOW_RUN_ID
specifier|private
specifier|final
specifier|static
name|Long
name|FLOW_RUN_ID
decl_stmt|;
DECL|field|APPLICATION_ID
specifier|private
specifier|final
specifier|static
name|String
name|APPLICATION_ID
decl_stmt|;
static|static
block|{
name|long
name|runid
init|=
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|900L
decl_stmt|;
name|byte
index|[]
name|longMaxByteArr
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|byte
index|[]
name|byteArr
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|runid
argument_list|)
decl_stmt|;
name|int
name|sepByteLen
init|=
name|QUALIFIER_SEP_BYTES
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|sepByteLen
operator|<=
name|byteArr
operator|.
name|length
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sepByteLen
condition|;
name|i
operator|++
control|)
block|{
name|byteArr
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|longMaxByteArr
index|[
name|i
index|]
operator|-
name|QUALIFIER_SEP_BYTES
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|FLOW_RUN_ID
operator|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|byteArr
argument_list|)
expr_stmt|;
name|long
name|clusterTs
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|byteArr
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|clusterTs
argument_list|)
expr_stmt|;
if|if
condition|(
name|sepByteLen
operator|<=
name|byteArr
operator|.
name|length
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sepByteLen
condition|;
name|i
operator|++
control|)
block|{
name|byteArr
index|[
name|byteArr
operator|.
name|length
operator|-
name|sepByteLen
operator|+
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|longMaxByteArr
index|[
name|byteArr
operator|.
name|length
operator|-
name|sepByteLen
operator|+
name|i
index|]
operator|-
name|QUALIFIER_SEP_BYTES
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|clusterTs
operator|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|byteArr
argument_list|)
expr_stmt|;
name|int
name|seqId
init|=
literal|222
decl_stmt|;
name|APPLICATION_ID
operator|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|clusterTs
argument_list|,
name|seqId
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
DECL|method|verifyRowPrefixBytes (byte[] byteRowKeyPrefix)
specifier|private
specifier|static
name|void
name|verifyRowPrefixBytes
parameter_list|(
name|byte
index|[]
name|byteRowKeyPrefix
parameter_list|)
block|{
name|int
name|sepLen
init|=
name|QUALIFIER_SEP_BYTES
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sepLen
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"Row key prefix not encoded properly."
argument_list|,
name|byteRowKeyPrefix
index|[
name|byteRowKeyPrefix
operator|.
name|length
operator|-
name|sepLen
operator|+
name|i
index|]
operator|==
name|QUALIFIER_SEP_BYTES
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFlowActivityRowKeyConverter ()
specifier|public
name|void
name|testFlowActivityRowKeyConverter
parameter_list|()
block|{
name|Long
name|ts
init|=
name|TimelineStorageUtils
operator|.
name|getTopOfTheDayTimestamp
argument_list|(
literal|1459900830000L
argument_list|)
decl_stmt|;
name|byte
index|[]
name|byteRowKey
init|=
name|FlowActivityRowKeyConverter
operator|.
name|getInstance
argument_list|()
operator|.
name|encode
argument_list|(
operator|new
name|FlowActivityRowKey
argument_list|(
name|CLUSTER
argument_list|,
name|ts
argument_list|,
name|USER
argument_list|,
name|FLOW_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|FlowActivityRowKey
name|rowKey
init|=
name|FlowActivityRowKeyConverter
operator|.
name|getInstance
argument_list|()
operator|.
name|decode
argument_list|(
name|byteRowKey
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|CLUSTER
argument_list|,
name|rowKey
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ts
argument_list|,
name|rowKey
operator|.
name|getDayTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|USER
argument_list|,
name|rowKey
operator|.
name|getUserId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FLOW_NAME
argument_list|,
name|rowKey
operator|.
name|getFlowName
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|byteRowKeyPrefix
init|=
name|FlowActivityRowKeyConverter
operator|.
name|getInstance
argument_list|()
operator|.
name|encode
argument_list|(
operator|new
name|FlowActivityRowKey
argument_list|(
name|CLUSTER
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|splits
init|=
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|split
argument_list|(
name|byteRowKeyPrefix
argument_list|,
operator|new
name|int
index|[]
block|{
name|Separator
operator|.
name|VARIABLE_SIZE
block|,
name|Separator
operator|.
name|VARIABLE_SIZE
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|splits
index|[
literal|1
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CLUSTER
argument_list|,
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|decode
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyRowPrefixBytes
argument_list|(
name|byteRowKeyPrefix
argument_list|)
expr_stmt|;
name|byteRowKeyPrefix
operator|=
name|FlowActivityRowKeyConverter
operator|.
name|getInstance
argument_list|()
operator|.
name|encode
argument_list|(
operator|new
name|FlowActivityRowKey
argument_list|(
name|CLUSTER
argument_list|,
name|ts
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|splits
operator|=
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|split
argument_list|(
name|byteRowKeyPrefix
argument_list|,
operator|new
name|int
index|[]
block|{
name|Separator
operator|.
name|VARIABLE_SIZE
block|,
name|Bytes
operator|.
name|SIZEOF_LONG
block|,
name|Separator
operator|.
name|VARIABLE_SIZE
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|splits
index|[
literal|2
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CLUSTER
argument_list|,
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|decode
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ts
argument_list|,
operator|(
name|Long
operator|)
name|TimelineStorageUtils
operator|.
name|invertLong
argument_list|(
name|Bytes
operator|.
name|toLong
argument_list|(
name|splits
index|[
literal|1
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyRowPrefixBytes
argument_list|(
name|byteRowKeyPrefix
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFlowRunRowKeyConverter ()
specifier|public
name|void
name|testFlowRunRowKeyConverter
parameter_list|()
block|{
name|byte
index|[]
name|byteRowKey
init|=
name|FlowRunRowKeyConverter
operator|.
name|getInstance
argument_list|()
operator|.
name|encode
argument_list|(
operator|new
name|FlowRunRowKey
argument_list|(
name|CLUSTER
argument_list|,
name|USER
argument_list|,
name|FLOW_NAME
argument_list|,
name|FLOW_RUN_ID
argument_list|)
argument_list|)
decl_stmt|;
name|FlowRunRowKey
name|rowKey
init|=
name|FlowRunRowKeyConverter
operator|.
name|getInstance
argument_list|()
operator|.
name|decode
argument_list|(
name|byteRowKey
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|CLUSTER
argument_list|,
name|rowKey
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|USER
argument_list|,
name|rowKey
operator|.
name|getUserId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FLOW_NAME
argument_list|,
name|rowKey
operator|.
name|getFlowName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FLOW_RUN_ID
argument_list|,
name|rowKey
operator|.
name|getFlowRunId
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|byteRowKeyPrefix
init|=
name|FlowRunRowKeyConverter
operator|.
name|getInstance
argument_list|()
operator|.
name|encode
argument_list|(
operator|new
name|FlowRunRowKey
argument_list|(
name|CLUSTER
argument_list|,
name|USER
argument_list|,
name|FLOW_NAME
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|splits
init|=
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|split
argument_list|(
name|byteRowKeyPrefix
argument_list|,
operator|new
name|int
index|[]
block|{
name|Separator
operator|.
name|VARIABLE_SIZE
block|,
name|Separator
operator|.
name|VARIABLE_SIZE
block|,
name|Separator
operator|.
name|VARIABLE_SIZE
block|,
name|Separator
operator|.
name|VARIABLE_SIZE
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|splits
index|[
literal|3
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FLOW_NAME
argument_list|,
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|decode
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|splits
index|[
literal|2
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyRowPrefixBytes
argument_list|(
name|byteRowKeyPrefix
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testApplicationRowKeyConverter ()
specifier|public
name|void
name|testApplicationRowKeyConverter
parameter_list|()
block|{
name|byte
index|[]
name|byteRowKey
init|=
name|ApplicationRowKeyConverter
operator|.
name|getInstance
argument_list|()
operator|.
name|encode
argument_list|(
operator|new
name|ApplicationRowKey
argument_list|(
name|CLUSTER
argument_list|,
name|USER
argument_list|,
name|FLOW_NAME
argument_list|,
name|FLOW_RUN_ID
argument_list|,
name|APPLICATION_ID
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationRowKey
name|rowKey
init|=
name|ApplicationRowKeyConverter
operator|.
name|getInstance
argument_list|()
operator|.
name|decode
argument_list|(
name|byteRowKey
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|CLUSTER
argument_list|,
name|rowKey
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|USER
argument_list|,
name|rowKey
operator|.
name|getUserId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FLOW_NAME
argument_list|,
name|rowKey
operator|.
name|getFlowName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FLOW_RUN_ID
argument_list|,
name|rowKey
operator|.
name|getFlowRunId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|APPLICATION_ID
argument_list|,
name|rowKey
operator|.
name|getAppId
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|byteRowKeyPrefix
init|=
name|ApplicationRowKeyConverter
operator|.
name|getInstance
argument_list|()
operator|.
name|encode
argument_list|(
operator|new
name|ApplicationRowKey
argument_list|(
name|CLUSTER
argument_list|,
name|USER
argument_list|,
name|FLOW_NAME
argument_list|,
name|FLOW_RUN_ID
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|splits
init|=
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|split
argument_list|(
name|byteRowKeyPrefix
argument_list|,
operator|new
name|int
index|[]
block|{
name|Separator
operator|.
name|VARIABLE_SIZE
block|,
name|Separator
operator|.
name|VARIABLE_SIZE
block|,
name|Separator
operator|.
name|VARIABLE_SIZE
block|,
name|Bytes
operator|.
name|SIZEOF_LONG
block|,
name|Separator
operator|.
name|VARIABLE_SIZE
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|splits
index|[
literal|4
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FLOW_NAME
argument_list|,
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|decode
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|splits
index|[
literal|2
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FLOW_RUN_ID
argument_list|,
operator|(
name|Long
operator|)
name|TimelineStorageUtils
operator|.
name|invertLong
argument_list|(
name|Bytes
operator|.
name|toLong
argument_list|(
name|splits
index|[
literal|3
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyRowPrefixBytes
argument_list|(
name|byteRowKeyPrefix
argument_list|)
expr_stmt|;
name|byteRowKeyPrefix
operator|=
name|ApplicationRowKeyConverter
operator|.
name|getInstance
argument_list|()
operator|.
name|encode
argument_list|(
operator|new
name|ApplicationRowKey
argument_list|(
name|CLUSTER
argument_list|,
name|USER
argument_list|,
name|FLOW_NAME
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|splits
operator|=
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|split
argument_list|(
name|byteRowKeyPrefix
argument_list|,
operator|new
name|int
index|[]
block|{
name|Separator
operator|.
name|VARIABLE_SIZE
block|,
name|Separator
operator|.
name|VARIABLE_SIZE
block|,
name|Separator
operator|.
name|VARIABLE_SIZE
block|,
name|Separator
operator|.
name|VARIABLE_SIZE
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|splits
index|[
literal|3
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FLOW_NAME
argument_list|,
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|decode
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|splits
index|[
literal|2
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyRowPrefixBytes
argument_list|(
name|byteRowKeyPrefix
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEntityRowKeyConverter ()
specifier|public
name|void
name|testEntityRowKeyConverter
parameter_list|()
block|{
name|String
name|entityId
init|=
literal|"!ent!ity!!id!"
decl_stmt|;
name|String
name|entityType
init|=
literal|"entity!Type"
decl_stmt|;
name|byte
index|[]
name|byteRowKey
init|=
name|EntityRowKeyConverter
operator|.
name|getInstance
argument_list|()
operator|.
name|encode
argument_list|(
operator|new
name|EntityRowKey
argument_list|(
name|CLUSTER
argument_list|,
name|USER
argument_list|,
name|FLOW_NAME
argument_list|,
name|FLOW_RUN_ID
argument_list|,
name|APPLICATION_ID
argument_list|,
name|entityType
argument_list|,
name|entityId
argument_list|)
argument_list|)
decl_stmt|;
name|EntityRowKey
name|rowKey
init|=
name|EntityRowKeyConverter
operator|.
name|getInstance
argument_list|()
operator|.
name|decode
argument_list|(
name|byteRowKey
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|CLUSTER
argument_list|,
name|rowKey
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|USER
argument_list|,
name|rowKey
operator|.
name|getUserId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FLOW_NAME
argument_list|,
name|rowKey
operator|.
name|getFlowName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FLOW_RUN_ID
argument_list|,
name|rowKey
operator|.
name|getFlowRunId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|APPLICATION_ID
argument_list|,
name|rowKey
operator|.
name|getAppId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entityType
argument_list|,
name|rowKey
operator|.
name|getEntityType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entityId
argument_list|,
name|rowKey
operator|.
name|getEntityId
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|byteRowKeyPrefix
init|=
name|EntityRowKeyConverter
operator|.
name|getInstance
argument_list|()
operator|.
name|encode
argument_list|(
operator|new
name|EntityRowKey
argument_list|(
name|CLUSTER
argument_list|,
name|USER
argument_list|,
name|FLOW_NAME
argument_list|,
name|FLOW_RUN_ID
argument_list|,
name|APPLICATION_ID
argument_list|,
name|entityType
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|splits
init|=
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|split
argument_list|(
name|byteRowKeyPrefix
argument_list|,
operator|new
name|int
index|[]
block|{
name|Separator
operator|.
name|VARIABLE_SIZE
block|,
name|Separator
operator|.
name|VARIABLE_SIZE
block|,
name|Separator
operator|.
name|VARIABLE_SIZE
block|,
name|Bytes
operator|.
name|SIZEOF_LONG
block|,
name|AppIdKeyConverter
operator|.
name|getKeySize
argument_list|()
block|,
name|Separator
operator|.
name|VARIABLE_SIZE
block|,
name|Separator
operator|.
name|VARIABLE_SIZE
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|splits
index|[
literal|6
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|APPLICATION_ID
argument_list|,
name|AppIdKeyConverter
operator|.
name|getInstance
argument_list|()
operator|.
name|decode
argument_list|(
name|splits
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entityType
argument_list|,
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|decode
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|splits
index|[
literal|5
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyRowPrefixBytes
argument_list|(
name|byteRowKeyPrefix
argument_list|)
expr_stmt|;
name|byteRowKeyPrefix
operator|=
name|EntityRowKeyConverter
operator|.
name|getInstance
argument_list|()
operator|.
name|encode
argument_list|(
operator|new
name|EntityRowKey
argument_list|(
name|CLUSTER
argument_list|,
name|USER
argument_list|,
name|FLOW_NAME
argument_list|,
name|FLOW_RUN_ID
argument_list|,
name|APPLICATION_ID
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|splits
operator|=
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|split
argument_list|(
name|byteRowKeyPrefix
argument_list|,
operator|new
name|int
index|[]
block|{
name|Separator
operator|.
name|VARIABLE_SIZE
block|,
name|Separator
operator|.
name|VARIABLE_SIZE
block|,
name|Separator
operator|.
name|VARIABLE_SIZE
block|,
name|Bytes
operator|.
name|SIZEOF_LONG
block|,
name|AppIdKeyConverter
operator|.
name|getKeySize
argument_list|()
block|,
name|Separator
operator|.
name|VARIABLE_SIZE
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|splits
index|[
literal|5
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|APPLICATION_ID
argument_list|,
name|AppIdKeyConverter
operator|.
name|getInstance
argument_list|()
operator|.
name|decode
argument_list|(
name|splits
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|verifyRowPrefixBytes
argument_list|(
name|byteRowKeyPrefix
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppToFlowRowKeyConverter ()
specifier|public
name|void
name|testAppToFlowRowKeyConverter
parameter_list|()
block|{
name|byte
index|[]
name|byteRowKey
init|=
name|AppToFlowRowKeyConverter
operator|.
name|getInstance
argument_list|()
operator|.
name|encode
argument_list|(
operator|new
name|AppToFlowRowKey
argument_list|(
name|CLUSTER
argument_list|,
name|APPLICATION_ID
argument_list|)
argument_list|)
decl_stmt|;
name|AppToFlowRowKey
name|rowKey
init|=
name|AppToFlowRowKeyConverter
operator|.
name|getInstance
argument_list|()
operator|.
name|decode
argument_list|(
name|byteRowKey
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|CLUSTER
argument_list|,
name|rowKey
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|APPLICATION_ID
argument_list|,
name|rowKey
operator|.
name|getAppId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppIdKeyConverter ()
specifier|public
name|void
name|testAppIdKeyConverter
parameter_list|()
block|{
name|long
name|currentTs
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId1
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|currentTs
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId2
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|currentTs
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId3
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|currentTs
operator|+
literal|300
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|appIdStr1
init|=
name|appId1
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|appIdStr2
init|=
name|appId2
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|appIdStr3
init|=
name|appId3
operator|.
name|toString
argument_list|()
decl_stmt|;
name|byte
index|[]
name|appIdBytes1
init|=
name|AppIdKeyConverter
operator|.
name|getInstance
argument_list|()
operator|.
name|encode
argument_list|(
name|appIdStr1
argument_list|)
decl_stmt|;
name|byte
index|[]
name|appIdBytes2
init|=
name|AppIdKeyConverter
operator|.
name|getInstance
argument_list|()
operator|.
name|encode
argument_list|(
name|appIdStr2
argument_list|)
decl_stmt|;
name|byte
index|[]
name|appIdBytes3
init|=
name|AppIdKeyConverter
operator|.
name|getInstance
argument_list|()
operator|.
name|encode
argument_list|(
name|appIdStr3
argument_list|)
decl_stmt|;
comment|// App ids' should be encoded in a manner wherein descending order
comment|// is maintained.
name|assertTrue
argument_list|(
literal|"Ordering of app ids' is incorrect"
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|appIdBytes1
argument_list|,
name|appIdBytes2
argument_list|)
operator|>
literal|0
operator|&&
name|Bytes
operator|.
name|compareTo
argument_list|(
name|appIdBytes1
argument_list|,
name|appIdBytes3
argument_list|)
operator|>
literal|0
operator|&&
name|Bytes
operator|.
name|compareTo
argument_list|(
name|appIdBytes2
argument_list|,
name|appIdBytes3
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|decodedAppId1
init|=
name|AppIdKeyConverter
operator|.
name|getInstance
argument_list|()
operator|.
name|decode
argument_list|(
name|appIdBytes1
argument_list|)
decl_stmt|;
name|String
name|decodedAppId2
init|=
name|AppIdKeyConverter
operator|.
name|getInstance
argument_list|()
operator|.
name|decode
argument_list|(
name|appIdBytes2
argument_list|)
decl_stmt|;
name|String
name|decodedAppId3
init|=
name|AppIdKeyConverter
operator|.
name|getInstance
argument_list|()
operator|.
name|decode
argument_list|(
name|appIdBytes3
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Decoded app id is not same as the app id encoded"
argument_list|,
name|appIdStr1
operator|.
name|equals
argument_list|(
name|decodedAppId1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Decoded app id is not same as the app id encoded"
argument_list|,
name|appIdStr2
operator|.
name|equals
argument_list|(
name|decodedAppId2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Decoded app id is not same as the app id encoded"
argument_list|,
name|appIdStr3
operator|.
name|equals
argument_list|(
name|decodedAppId3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEventColumnNameConverter ()
specifier|public
name|void
name|testEventColumnNameConverter
parameter_list|()
block|{
name|String
name|eventId
init|=
literal|"=foo_=eve=nt="
decl_stmt|;
name|byte
index|[]
name|valSepBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Separator
operator|.
name|VALUES
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|maxByteArr
init|=
name|Bytes
operator|.
name|createMaxByteArray
argument_list|(
name|Bytes
operator|.
name|SIZEOF_LONG
operator|-
name|valSepBytes
operator|.
name|length
argument_list|)
decl_stmt|;
name|byte
index|[]
name|ts
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|valSepBytes
argument_list|,
name|maxByteArr
argument_list|)
decl_stmt|;
name|Long
name|eventTs
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|byte
index|[]
name|byteEventColName
init|=
name|EventColumnNameConverter
operator|.
name|getInstance
argument_list|()
operator|.
name|encode
argument_list|(
operator|new
name|EventColumnName
argument_list|(
name|eventId
argument_list|,
name|eventTs
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|EventColumnName
name|eventColName
init|=
name|EventColumnNameConverter
operator|.
name|getInstance
argument_list|()
operator|.
name|decode
argument_list|(
name|byteEventColName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|eventId
argument_list|,
name|eventColName
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|eventTs
argument_list|,
name|eventColName
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|eventColName
operator|.
name|getInfoKey
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|infoKey
init|=
literal|"f=oo_event_in=fo=_key"
decl_stmt|;
name|byteEventColName
operator|=
name|EventColumnNameConverter
operator|.
name|getInstance
argument_list|()
operator|.
name|encode
argument_list|(
operator|new
name|EventColumnName
argument_list|(
name|eventId
argument_list|,
name|eventTs
argument_list|,
name|infoKey
argument_list|)
argument_list|)
expr_stmt|;
name|eventColName
operator|=
name|EventColumnNameConverter
operator|.
name|getInstance
argument_list|()
operator|.
name|decode
argument_list|(
name|byteEventColName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|eventId
argument_list|,
name|eventColName
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|eventTs
argument_list|,
name|eventColName
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoKey
argument_list|,
name|eventColName
operator|.
name|getInfoKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

