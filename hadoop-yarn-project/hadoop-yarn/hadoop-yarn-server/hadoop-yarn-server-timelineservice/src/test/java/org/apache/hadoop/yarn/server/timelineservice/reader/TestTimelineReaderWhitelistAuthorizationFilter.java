begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.reader
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|security
operator|.
name|TimelineReaderWhitelistAuthorizationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link TimelineReaderWhitelistAuthorizationFilter}.  *  */
end_comment

begin_class
DECL|class|TestTimelineReaderWhitelistAuthorizationFilter
specifier|public
class|class
name|TestTimelineReaderWhitelistAuthorizationFilter
block|{
DECL|field|GROUP1_NAME
specifier|final
specifier|private
specifier|static
name|String
name|GROUP1_NAME
init|=
literal|"group1"
decl_stmt|;
DECL|field|GROUP2_NAME
specifier|final
specifier|private
specifier|static
name|String
name|GROUP2_NAME
init|=
literal|"group2"
decl_stmt|;
DECL|field|GROUP3_NAME
specifier|final
specifier|private
specifier|static
name|String
name|GROUP3_NAME
init|=
literal|"group3"
decl_stmt|;
DECL|field|GROUP_NAMES
specifier|final
specifier|private
specifier|static
name|String
index|[]
name|GROUP_NAMES
init|=
operator|new
name|String
index|[]
block|{
name|GROUP1_NAME
block|,
name|GROUP2_NAME
block|,
name|GROUP3_NAME
block|}
decl_stmt|;
DECL|class|DummyFilterConfig
specifier|private
specifier|static
class|class
name|DummyFilterConfig
implements|implements
name|FilterConfig
block|{
DECL|field|map
specifier|final
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
decl_stmt|;
DECL|method|DummyFilterConfig (Map<String, String> map)
name|DummyFilterConfig
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFilterName ()
specifier|public
name|String
name|getFilterName
parameter_list|()
block|{
return|return
literal|"dummy"
return|;
block|}
annotation|@
name|Override
DECL|method|getInitParameter (String arg0)
specifier|public
name|String
name|getInitParameter
parameter_list|(
name|String
name|arg0
parameter_list|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|arg0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getInitParameterNames ()
specifier|public
name|Enumeration
argument_list|<
name|String
argument_list|>
name|getInitParameterNames
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|enumeration
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getServletContext ()
specifier|public
name|ServletContext
name|getServletContext
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|checkFilterAllowedUser ()
specifier|public
name|void
name|checkFilterAllowedUser
parameter_list|()
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_READ_AUTH_ENABLED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_READ_ALLOWED_USERS
argument_list|,
literal|"user1,user2"
argument_list|)
expr_stmt|;
name|TimelineReaderWhitelistAuthorizationFilter
name|f
init|=
operator|new
name|TimelineReaderWhitelistAuthorizationFilter
argument_list|()
decl_stmt|;
name|FilterConfig
name|fc
init|=
operator|new
name|DummyFilterConfig
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|f
operator|.
name|init
argument_list|(
name|fc
argument_list|)
expr_stmt|;
name|HttpServletRequest
name|mockHsr
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockHsr
operator|.
name|getUserPrincipal
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Principal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"user1"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|HttpServletResponse
name|r
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|f
operator|.
name|doFilter
argument_list|(
name|mockHsr
argument_list|,
name|r
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkFilterNotAllowedUser ()
specifier|public
name|void
name|checkFilterNotAllowedUser
parameter_list|()
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_READ_AUTH_ENABLED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_READ_ALLOWED_USERS
argument_list|,
literal|"user1,user2"
argument_list|)
expr_stmt|;
name|TimelineReaderWhitelistAuthorizationFilter
name|f
init|=
operator|new
name|TimelineReaderWhitelistAuthorizationFilter
argument_list|()
decl_stmt|;
name|FilterConfig
name|fc
init|=
operator|new
name|DummyFilterConfig
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|f
operator|.
name|init
argument_list|(
name|fc
argument_list|)
expr_stmt|;
name|HttpServletRequest
name|mockHsr
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
literal|"testuser1"
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockHsr
operator|.
name|getUserPrincipal
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Principal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|userName
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|HttpServletResponse
name|r
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|f
operator|.
name|doFilter
argument_list|(
name|mockHsr
argument_list|,
name|r
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|msg
init|=
literal|"User "
operator|+
name|userName
operator|+
literal|" is not allowed to read TimelineService V2 data."
decl_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|r
argument_list|)
operator|.
name|sendError
argument_list|(
name|eq
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|)
argument_list|,
name|eq
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkFilterAllowedUserGroup ()
specifier|public
name|void
name|checkFilterAllowedUserGroup
parameter_list|()
throws|throws
name|ServletException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_READ_AUTH_ENABLED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_READ_ALLOWED_USERS
argument_list|,
literal|"user2 group1,group2"
argument_list|)
expr_stmt|;
name|TimelineReaderWhitelistAuthorizationFilter
name|f
init|=
operator|new
name|TimelineReaderWhitelistAuthorizationFilter
argument_list|()
decl_stmt|;
name|FilterConfig
name|fc
init|=
operator|new
name|DummyFilterConfig
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|f
operator|.
name|init
argument_list|(
name|fc
argument_list|)
expr_stmt|;
name|HttpServletRequest
name|mockHsr
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockHsr
operator|.
name|getUserPrincipal
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Principal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"user1"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|HttpServletResponse
name|r
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|user1
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"user1"
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
name|user1
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|f
operator|.
name|doFilter
argument_list|(
name|mockHsr
argument_list|,
name|r
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkFilterNotAlloweGroup ()
specifier|public
name|void
name|checkFilterNotAlloweGroup
parameter_list|()
throws|throws
name|ServletException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_READ_AUTH_ENABLED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_READ_ALLOWED_USERS
argument_list|,
literal|" group5,group6"
argument_list|)
expr_stmt|;
name|TimelineReaderWhitelistAuthorizationFilter
name|f
init|=
operator|new
name|TimelineReaderWhitelistAuthorizationFilter
argument_list|()
decl_stmt|;
name|FilterConfig
name|fc
init|=
operator|new
name|DummyFilterConfig
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|f
operator|.
name|init
argument_list|(
name|fc
argument_list|)
expr_stmt|;
name|HttpServletRequest
name|mockHsr
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
literal|"user200"
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockHsr
operator|.
name|getUserPrincipal
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Principal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|userName
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|HttpServletResponse
name|r
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|user1
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|userName
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
name|user1
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|f
operator|.
name|doFilter
argument_list|(
name|mockHsr
argument_list|,
name|r
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|String
name|msg
init|=
literal|"User "
operator|+
name|userName
operator|+
literal|" is not allowed to read TimelineService V2 data."
decl_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|r
argument_list|)
operator|.
name|sendError
argument_list|(
name|eq
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|)
argument_list|,
name|eq
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkFilterAllowAdmins ()
specifier|public
name|void
name|checkFilterAllowAdmins
parameter_list|()
throws|throws
name|ServletException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
comment|// check that users in admin acl list are allowed to read
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_READ_AUTH_ENABLED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_READ_ALLOWED_USERS
argument_list|,
literal|"user3 group5,group6"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
literal|" group1,group2"
argument_list|)
expr_stmt|;
name|TimelineReaderWhitelistAuthorizationFilter
name|f
init|=
operator|new
name|TimelineReaderWhitelistAuthorizationFilter
argument_list|()
decl_stmt|;
name|FilterConfig
name|fc
init|=
operator|new
name|DummyFilterConfig
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|f
operator|.
name|init
argument_list|(
name|fc
argument_list|)
expr_stmt|;
name|HttpServletRequest
name|mockHsr
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockHsr
operator|.
name|getUserPrincipal
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Principal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"user90"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|HttpServletResponse
name|r
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|user1
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"user90"
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
name|user1
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|f
operator|.
name|doFilter
argument_list|(
name|mockHsr
argument_list|,
name|r
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkFilterAllowAdminsWhenNoUsersSet ()
specifier|public
name|void
name|checkFilterAllowAdminsWhenNoUsersSet
parameter_list|()
throws|throws
name|ServletException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
comment|// check that users in admin acl list are allowed to read
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_READ_AUTH_ENABLED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
literal|" group1,group2"
argument_list|)
expr_stmt|;
name|TimelineReaderWhitelistAuthorizationFilter
name|f
init|=
operator|new
name|TimelineReaderWhitelistAuthorizationFilter
argument_list|()
decl_stmt|;
name|FilterConfig
name|fc
init|=
operator|new
name|DummyFilterConfig
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|f
operator|.
name|init
argument_list|(
name|fc
argument_list|)
expr_stmt|;
name|HttpServletRequest
name|mockHsr
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockHsr
operator|.
name|getUserPrincipal
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Principal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"user90"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|HttpServletResponse
name|r
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|user1
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"user90"
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
name|user1
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|f
operator|.
name|doFilter
argument_list|(
name|mockHsr
argument_list|,
name|r
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkFilterAllowNoOneWhenAdminAclsEmptyAndUserAclsEmpty ()
specifier|public
name|void
name|checkFilterAllowNoOneWhenAdminAclsEmptyAndUserAclsEmpty
parameter_list|()
throws|throws
name|ServletException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
comment|// check that users in admin acl list are allowed to read
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_READ_AUTH_ENABLED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|TimelineReaderWhitelistAuthorizationFilter
name|f
init|=
operator|new
name|TimelineReaderWhitelistAuthorizationFilter
argument_list|()
decl_stmt|;
name|FilterConfig
name|fc
init|=
operator|new
name|DummyFilterConfig
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|f
operator|.
name|init
argument_list|(
name|fc
argument_list|)
expr_stmt|;
name|HttpServletRequest
name|mockHsr
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
literal|"user88"
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockHsr
operator|.
name|getUserPrincipal
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Principal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|userName
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|HttpServletResponse
name|r
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|user1
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|userName
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
name|user1
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|f
operator|.
name|doFilter
argument_list|(
name|mockHsr
argument_list|,
name|r
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|String
name|msg
init|=
literal|"User "
operator|+
name|userName
operator|+
literal|" is not allowed to read TimelineService V2 data."
decl_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|r
argument_list|)
operator|.
name|sendError
argument_list|(
name|eq
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|)
argument_list|,
name|eq
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkFilterReadAuthDisabledNoAclSettings ()
specifier|public
name|void
name|checkFilterReadAuthDisabledNoAclSettings
parameter_list|()
throws|throws
name|ServletException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Default settings for Read Auth Enabled (false)
comment|// No values in admin acls or allowed read user list
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|TimelineReaderWhitelistAuthorizationFilter
name|f
init|=
operator|new
name|TimelineReaderWhitelistAuthorizationFilter
argument_list|()
decl_stmt|;
name|FilterConfig
name|fc
init|=
operator|new
name|DummyFilterConfig
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|f
operator|.
name|init
argument_list|(
name|fc
argument_list|)
expr_stmt|;
name|HttpServletRequest
name|mockHsr
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockHsr
operator|.
name|getUserPrincipal
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Principal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"user437"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|HttpServletResponse
name|r
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|user1
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"user437"
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
name|user1
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|f
operator|.
name|doFilter
argument_list|(
name|mockHsr
argument_list|,
name|r
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkFilterReadAuthDisabledButAclSettingsPopulated ()
specifier|public
name|void
name|checkFilterReadAuthDisabledButAclSettingsPopulated
parameter_list|()
throws|throws
name|ServletException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Default settings for Read Auth Enabled (false)
comment|// But some values in admin acls and allowed read user list
name|map
operator|.
name|put
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
literal|"user1,user2 group9,group21"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_READ_ALLOWED_USERS
argument_list|,
literal|"user27,user36 group5,group6"
argument_list|)
expr_stmt|;
name|TimelineReaderWhitelistAuthorizationFilter
name|f
init|=
operator|new
name|TimelineReaderWhitelistAuthorizationFilter
argument_list|()
decl_stmt|;
name|FilterConfig
name|fc
init|=
operator|new
name|DummyFilterConfig
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|f
operator|.
name|init
argument_list|(
name|fc
argument_list|)
expr_stmt|;
name|HttpServletRequest
name|mockHsr
init|=
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockHsr
operator|.
name|getUserPrincipal
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Principal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"user37"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|HttpServletResponse
name|r
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|user1
init|=
comment|// both username and group name are not part of admin and
comment|// read allowed users
comment|// but read auth is turned off
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"user37"
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
name|user1
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|f
operator|.
name|doFilter
argument_list|(
name|mockHsr
argument_list|,
name|r
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// test with username in read allowed users
name|Mockito
operator|.
name|when
argument_list|(
name|mockHsr
operator|.
name|getUserPrincipal
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Principal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"user27"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|HttpServletResponse
name|r2
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|user2
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"user27"
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
name|user2
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|f
operator|.
name|doFilter
argument_list|(
name|mockHsr
argument_list|,
name|r2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// test with username in admin users
name|Mockito
operator|.
name|when
argument_list|(
name|mockHsr
operator|.
name|getUserPrincipal
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Principal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"user2"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|HttpServletResponse
name|r3
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|user3
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"user2"
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
name|user3
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|f
operator|.
name|doFilter
argument_list|(
name|mockHsr
argument_list|,
name|r3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

