begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.aggregator
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|aggregator
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|core
operator|.
name|impl
operator|.
name|provider
operator|.
name|entity
operator|.
name|XMLJAXBElementProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestTimelineAggregatorsCollection
specifier|public
class|class
name|TestTimelineAggregatorsCollection
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testMultithreadedAdd ()
specifier|public
name|void
name|testMultithreadedAdd
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TimelineAggregatorsCollection
name|aggregatorCollection
init|=
name|spy
argument_list|(
operator|new
name|TimelineAggregatorsCollection
argument_list|()
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|aggregatorCollection
argument_list|)
operator|.
name|getConfig
argument_list|()
expr_stmt|;
specifier|final
name|int
name|NUM_APPS
init|=
literal|5
decl_stmt|;
name|List
argument_list|<
name|Callable
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<
name|Callable
argument_list|<
name|Boolean
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_APPS
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|appId
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Callable
argument_list|<
name|Boolean
argument_list|>
name|task
init|=
operator|new
name|Callable
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|Boolean
name|call
parameter_list|()
block|{
name|AppLevelTimelineAggregator
name|aggregator
init|=
operator|new
name|AppLevelTimelineAggregator
argument_list|(
name|appId
argument_list|)
decl_stmt|;
return|return
operator|(
name|aggregatorCollection
operator|.
name|putIfAbsent
argument_list|(
name|appId
argument_list|,
name|aggregator
argument_list|)
operator|==
name|aggregator
operator|)
return|;
block|}
block|}
decl_stmt|;
name|tasks
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|NUM_APPS
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Future
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|futures
init|=
name|executor
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|)
decl_stmt|;
for|for
control|(
name|Future
argument_list|<
name|Boolean
argument_list|>
name|future
range|:
name|futures
control|)
block|{
name|assertTrue
argument_list|(
name|future
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
comment|// check the keys
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_APPS
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|aggregatorCollection
operator|.
name|containsKey
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMultithreadedAddAndRemove ()
specifier|public
name|void
name|testMultithreadedAddAndRemove
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TimelineAggregatorsCollection
name|aggregatorCollection
init|=
name|spy
argument_list|(
operator|new
name|TimelineAggregatorsCollection
argument_list|()
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|aggregatorCollection
argument_list|)
operator|.
name|getConfig
argument_list|()
expr_stmt|;
specifier|final
name|int
name|NUM_APPS
init|=
literal|5
decl_stmt|;
name|List
argument_list|<
name|Callable
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<
name|Callable
argument_list|<
name|Boolean
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_APPS
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|appId
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Callable
argument_list|<
name|Boolean
argument_list|>
name|task
init|=
operator|new
name|Callable
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|Boolean
name|call
parameter_list|()
block|{
name|AppLevelTimelineAggregator
name|aggregator
init|=
operator|new
name|AppLevelTimelineAggregator
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|boolean
name|successPut
init|=
operator|(
name|aggregatorCollection
operator|.
name|putIfAbsent
argument_list|(
name|appId
argument_list|,
name|aggregator
argument_list|)
operator|==
name|aggregator
operator|)
decl_stmt|;
return|return
name|successPut
operator|&&
name|aggregatorCollection
operator|.
name|remove
argument_list|(
name|appId
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|tasks
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|NUM_APPS
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Future
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|futures
init|=
name|executor
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|)
decl_stmt|;
for|for
control|(
name|Future
argument_list|<
name|Boolean
argument_list|>
name|future
range|:
name|futures
control|)
block|{
name|assertTrue
argument_list|(
name|future
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
comment|// check the keys
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_APPS
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|aggregatorCollection
operator|.
name|containsKey
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

