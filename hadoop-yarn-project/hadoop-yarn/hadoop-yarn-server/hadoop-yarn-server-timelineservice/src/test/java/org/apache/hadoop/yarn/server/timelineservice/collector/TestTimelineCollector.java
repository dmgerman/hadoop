begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.collector
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|collector
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineMetricOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|TestTimelineCollector
specifier|public
class|class
name|TestTimelineCollector
block|{
DECL|method|generateTestEntities (int groups, int entities)
specifier|private
name|TimelineEntities
name|generateTestEntities
parameter_list|(
name|int
name|groups
parameter_list|,
name|int
name|entities
parameter_list|)
block|{
name|TimelineEntities
name|te
init|=
operator|new
name|TimelineEntities
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|groups
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entities
condition|;
name|i
operator|++
control|)
block|{
name|TimelineEntity
name|entity
init|=
operator|new
name|TimelineEntity
argument_list|()
decl_stmt|;
name|String
name|containerId
init|=
literal|"container_1000178881110_2002_"
operator|+
name|i
decl_stmt|;
name|entity
operator|.
name|setId
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|String
name|entityType
init|=
literal|"TEST_"
operator|+
name|j
decl_stmt|;
name|entity
operator|.
name|setType
argument_list|(
name|entityType
argument_list|)
expr_stmt|;
name|long
name|cTime
init|=
literal|1425016501000L
decl_stmt|;
name|entity
operator|.
name|setCreatedTime
argument_list|(
name|cTime
argument_list|)
expr_stmt|;
comment|// add metrics
name|Set
argument_list|<
name|TimelineMetric
argument_list|>
name|metrics
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|TimelineMetric
name|m1
init|=
operator|new
name|TimelineMetric
argument_list|()
decl_stmt|;
name|m1
operator|.
name|setId
argument_list|(
literal|"HDFS_BYTES_WRITE"
argument_list|)
expr_stmt|;
name|m1
operator|.
name|setRealtimeAggregationOp
argument_list|(
name|TimelineMetricOperation
operator|.
name|SUM
argument_list|)
expr_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|m1
operator|.
name|addValue
argument_list|(
name|ts
operator|-
literal|20000
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|add
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|TimelineMetric
name|m2
init|=
operator|new
name|TimelineMetric
argument_list|()
decl_stmt|;
name|m2
operator|.
name|setId
argument_list|(
literal|"VCORES_USED"
argument_list|)
expr_stmt|;
name|m2
operator|.
name|setRealtimeAggregationOp
argument_list|(
name|TimelineMetricOperation
operator|.
name|SUM
argument_list|)
expr_stmt|;
name|m2
operator|.
name|addValue
argument_list|(
name|ts
operator|-
literal|20000
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|add
argument_list|(
name|m2
argument_list|)
expr_stmt|;
comment|// m3 should not show up in the aggregation
name|TimelineMetric
name|m3
init|=
operator|new
name|TimelineMetric
argument_list|()
decl_stmt|;
name|m3
operator|.
name|setId
argument_list|(
literal|"UNRELATED_VALUES"
argument_list|)
expr_stmt|;
name|m3
operator|.
name|addValue
argument_list|(
name|ts
operator|-
literal|20000
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|add
argument_list|(
name|m3
argument_list|)
expr_stmt|;
name|TimelineMetric
name|m4
init|=
operator|new
name|TimelineMetric
argument_list|()
decl_stmt|;
name|m4
operator|.
name|setId
argument_list|(
literal|"TXN_FINISH_TIME"
argument_list|)
expr_stmt|;
name|m4
operator|.
name|setRealtimeAggregationOp
argument_list|(
name|TimelineMetricOperation
operator|.
name|MAX
argument_list|)
expr_stmt|;
name|m4
operator|.
name|addValue
argument_list|(
name|ts
operator|-
literal|20000
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|add
argument_list|(
name|m4
argument_list|)
expr_stmt|;
name|entity
operator|.
name|addMetrics
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
name|te
operator|.
name|addEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|te
return|;
block|}
annotation|@
name|Test
DECL|method|testAggregation ()
specifier|public
name|void
name|testAggregation
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test aggregation with multiple groups.
name|int
name|groups
init|=
literal|3
decl_stmt|;
name|int
name|n
init|=
literal|50
decl_stmt|;
name|TimelineEntities
name|testEntities
init|=
name|generateTestEntities
argument_list|(
name|groups
argument_list|,
name|n
argument_list|)
decl_stmt|;
name|TimelineEntity
name|resultEntity
init|=
name|TimelineCollector
operator|.
name|aggregateEntities
argument_list|(
name|testEntities
argument_list|,
literal|"test_result"
argument_list|,
literal|"TEST_AGGR"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|resultEntity
operator|.
name|getMetrics
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|groups
operator|*
literal|3
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|groups
condition|;
name|i
operator|++
control|)
block|{
name|Set
argument_list|<
name|TimelineMetric
argument_list|>
name|metrics
init|=
name|resultEntity
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
for|for
control|(
name|TimelineMetric
name|m
range|:
name|metrics
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getId
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"HDFS_BYTES_WRITE"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|100
operator|*
name|n
argument_list|,
name|m
operator|.
name|getSingleDataValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|.
name|getId
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"VCORES_USED"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|3
operator|*
name|n
argument_list|,
name|m
operator|.
name|getSingleDataValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|.
name|getId
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"TXN_FINISH_TIME"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|n
operator|-
literal|1
argument_list|,
name|m
operator|.
name|getSingleDataValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Unrecognized metric! "
operator|+
name|m
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Test aggregation with a single group.
name|TimelineEntities
name|testEntities1
init|=
name|generateTestEntities
argument_list|(
literal|1
argument_list|,
name|n
argument_list|)
decl_stmt|;
name|TimelineEntity
name|resultEntity1
init|=
name|TimelineCollector
operator|.
name|aggregateEntities
argument_list|(
name|testEntities1
argument_list|,
literal|"test_result"
argument_list|,
literal|"TEST_AGGR"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|resultEntity1
operator|.
name|getMetrics
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|TimelineMetric
argument_list|>
name|metrics
init|=
name|resultEntity1
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
for|for
control|(
name|TimelineMetric
name|m
range|:
name|metrics
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"HDFS_BYTES_WRITE"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|100
operator|*
name|n
argument_list|,
name|m
operator|.
name|getSingleDataValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"VCORES_USED"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|3
operator|*
name|n
argument_list|,
name|m
operator|.
name|getSingleDataValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"TXN_FINISH_TIME"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|n
operator|-
literal|1
argument_list|,
name|m
operator|.
name|getSingleDataValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Unrecognized metric! "
operator|+
name|m
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

