begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.collector
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|collector
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|FileSystemTimelineWriterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|TimelineWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Unit tests for TimelineCollectorManager.  */
end_comment

begin_class
DECL|class|TestTimelineCollectorManager
specifier|public
class|class
name|TestTimelineCollectorManager
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|,
name|expected
operator|=
name|YarnRuntimeException
operator|.
name|class
argument_list|)
DECL|method|testTimelineCollectorManagerWithInvalidTimelineWriter ()
specifier|public
name|void
name|testTimelineCollectorManagerWithInvalidTimelineWriter
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_WRITER_CLASS
argument_list|,
name|Object
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|runTimelineCollectorManagerWithConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|,
name|expected
operator|=
name|YarnRuntimeException
operator|.
name|class
argument_list|)
DECL|method|testTimelineCollectorManagerWithNonexistentTimelineWriter ()
specifier|public
name|void
name|testTimelineCollectorManagerWithNonexistentTimelineWriter
parameter_list|()
block|{
name|String
name|nonexistentTimelineWriterClass
init|=
literal|"org.apache.org.yarn.server."
operator|+
literal|"timelineservice.storage.XXXXXXXX"
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_WRITER_CLASS
argument_list|,
name|nonexistentTimelineWriterClass
argument_list|)
expr_stmt|;
name|runTimelineCollectorManagerWithConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testTimelineCollectorManagerWithFileSystemWriter ()
specifier|public
name|void
name|testTimelineCollectorManagerWithFileSystemWriter
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_WRITER_CLASS
argument_list|,
name|FileSystemTimelineWriterImpl
operator|.
name|class
argument_list|,
name|TimelineWriter
operator|.
name|class
argument_list|)
expr_stmt|;
name|runTimelineCollectorManagerWithConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Run a TimelineCollectorManager with a given configuration.    * @param conf configuration to run TimelineCollectorManager with    */
DECL|method|runTimelineCollectorManagerWithConfig ( final Configuration conf)
specifier|private
specifier|static
name|void
name|runTimelineCollectorManagerWithConfig
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|TimelineCollectorManager
name|collectorManager
init|=
operator|new
name|TimelineCollectorManager
argument_list|(
literal|"testTimelineCollectorManager"
argument_list|)
decl_stmt|;
try|try
block|{
name|collectorManager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|collectorManager
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|collectorManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

