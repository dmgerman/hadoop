begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineWriteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|GenericObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|OfflineAggregationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|collector
operator|.
name|TimelineCollectorContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|phoenix
operator|.
name|util
operator|.
name|PropertiesUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Offline aggregation Phoenix storage. This storage currently consists of two  * aggregation tables, one for flow level aggregation and one for user level  * aggregation.  *  * Example table record:  *  *<pre>  * |---------------------------|  * |  Primary   | Column Family|  * |  key       | metrics      |  * |---------------------------|  * | row_key    | metricId1:   |  * |            | metricValue1 |  * |            | @timestamp1  |  * |            |              |  * |            | metriciD1:   |  * |            | metricValue2 |  * |            | @timestamp2  |  * |            |              |  * |            | metricId2:   |  * |            | metricValue1 |  * |            | @timestamp2  |  * |            |              |  * |            |              |  * |            |              |  * |            |              |  * |            |              |  * |            |              |  * |            |              |  * |            |              |  * |            |              |  * |            |              |  * |            |              |  * |            |              |  * |            |              |  * |            |              |  * |---------------------------|  *</pre>  *  * For the flow aggregation table, the primary key contains user, cluster, and  * flow id. For user aggregation table,the primary key is user.  *  * Metrics column family stores all aggregated metrics for each record.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|PhoenixOfflineAggregationWriterImpl
specifier|public
class|class
name|PhoenixOfflineAggregationWriterImpl
extends|extends
name|OfflineAggregationWriter
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PhoenixOfflineAggregationWriterImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PHOENIX_COL_FAMILY_PLACE_HOLDER
specifier|private
specifier|static
specifier|final
name|String
name|PHOENIX_COL_FAMILY_PLACE_HOLDER
init|=
literal|"timeline_cf_placeholder"
decl_stmt|;
comment|/** Default Phoenix JDBC driver name */
DECL|field|DRIVER_CLASS_NAME
specifier|private
specifier|static
specifier|final
name|String
name|DRIVER_CLASS_NAME
init|=
literal|"org.apache.phoenix.jdbc.PhoenixDriver"
decl_stmt|;
comment|/** Default Phoenix timeline config column family */
DECL|field|METRIC_COLUMN_FAMILY
specifier|private
specifier|static
specifier|final
name|String
name|METRIC_COLUMN_FAMILY
init|=
literal|"m."
decl_stmt|;
comment|/** Default Phoenix timeline info column family */
DECL|field|INFO_COLUMN_FAMILY
specifier|private
specifier|static
specifier|final
name|String
name|INFO_COLUMN_FAMILY
init|=
literal|"i."
decl_stmt|;
comment|/** Default separator for Phoenix storage */
DECL|field|AGGREGATION_STORAGE_SEPARATOR
specifier|private
specifier|static
specifier|final
name|String
name|AGGREGATION_STORAGE_SEPARATOR
init|=
literal|";"
decl_stmt|;
comment|/** Connection string to the deployed Phoenix cluster */
DECL|field|connString
specifier|private
name|String
name|connString
init|=
literal|null
decl_stmt|;
DECL|field|connProperties
specifier|private
name|Properties
name|connProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
DECL|method|PhoenixOfflineAggregationWriterImpl (Properties prop)
specifier|public
name|PhoenixOfflineAggregationWriterImpl
parameter_list|(
name|Properties
name|prop
parameter_list|)
block|{
name|super
argument_list|(
name|PhoenixOfflineAggregationWriterImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|connProperties
operator|=
name|PropertiesUtil
operator|.
name|deepCopy
argument_list|(
name|prop
argument_list|)
expr_stmt|;
block|}
DECL|method|PhoenixOfflineAggregationWriterImpl ()
specifier|public
name|PhoenixOfflineAggregationWriterImpl
parameter_list|()
block|{
name|super
argument_list|(
name|PhoenixOfflineAggregationWriterImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|public
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|Class
operator|.
name|forName
argument_list|(
name|DRIVER_CLASS_NAME
argument_list|)
expr_stmt|;
comment|// so check it here and only read in the config if it's not overridden.
name|connString
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|PHOENIX_OFFLINE_STORAGE_CONN_STR
argument_list|,
name|YarnConfiguration
operator|.
name|PHOENIX_OFFLINE_STORAGE_CONN_STR_DEFAULT
argument_list|)
expr_stmt|;
name|super
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeAggregatedEntity ( TimelineCollectorContext context, TimelineEntities entities, OfflineAggregationInfo info)
specifier|public
name|TimelineWriteResponse
name|writeAggregatedEntity
parameter_list|(
name|TimelineCollectorContext
name|context
parameter_list|,
name|TimelineEntities
name|entities
parameter_list|,
name|OfflineAggregationInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|TimelineWriteResponse
name|response
init|=
operator|new
name|TimelineWriteResponse
argument_list|()
decl_stmt|;
name|String
name|sql
init|=
literal|"UPSERT INTO "
operator|+
name|info
operator|.
name|getTableName
argument_list|()
operator|+
literal|" ("
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|info
operator|.
name|getPrimaryKeyList
argument_list|()
argument_list|,
literal|","
argument_list|)
operator|+
literal|", created_time, metric_names) "
operator|+
literal|"VALUES ("
operator|+
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"?,"
argument_list|,
name|info
operator|.
name|getPrimaryKeyList
argument_list|()
operator|.
name|length
argument_list|)
operator|+
literal|"?, ?)"
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"TimelineEntity write SQL: "
operator|+
name|sql
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Connection
name|conn
init|=
name|getConnection
argument_list|()
init|;
name|PreparedStatement
name|ps
operator|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
init|)
block|{
for|for
control|(
name|TimelineEntity
name|entity
range|:
name|entities
operator|.
name|getEntities
argument_list|()
control|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|TimelineMetric
argument_list|>
name|formattedMetrics
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|entity
operator|.
name|getMetrics
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TimelineMetric
name|m
range|:
name|entity
operator|.
name|getMetrics
argument_list|()
control|)
block|{
name|formattedMetrics
operator|.
name|put
argument_list|(
name|m
operator|.
name|getId
argument_list|()
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|idx
init|=
name|info
operator|.
name|setStringsForPrimaryKey
argument_list|(
name|ps
argument_list|,
name|context
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ps
operator|.
name|setLong
argument_list|(
name|idx
operator|++
argument_list|,
name|entity
operator|.
name|getCreatedTime
argument_list|()
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setString
argument_list|(
name|idx
operator|++
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|formattedMetrics
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|,
name|AGGREGATION_STORAGE_SEPARATOR
argument_list|)
argument_list|)
expr_stmt|;
name|ps
operator|.
name|execute
argument_list|()
expr_stmt|;
name|storeEntityVariableLengthFields
argument_list|(
name|entity
argument_list|,
name|formattedMetrics
argument_list|,
name|context
argument_list|,
name|conn
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|conn
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to add entity to Phoenix "
operator|+
name|se
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|se
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception on getting connection: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|response
return|;
block|}
comment|/**    * Create Phoenix tables for offline aggregation storage if the tables do not    * exist.    *    * @throws IOException    */
DECL|method|createPhoenixTables ()
specifier|public
name|void
name|createPhoenixTables
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Create tables if necessary
try|try
init|(
name|Connection
name|conn
init|=
name|getConnection
argument_list|()
init|;
name|Statement
name|stmt
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
comment|// Table schema defined as in YARN-3817.
name|String
name|sql
init|=
literal|"CREATE TABLE IF NOT EXISTS "
operator|+
name|OfflineAggregationInfo
operator|.
name|FLOW_AGGREGATION_TABLE_NAME
operator|+
literal|"(user VARCHAR NOT NULL, cluster VARCHAR NOT NULL, "
operator|+
literal|"flow_name VARCHAR NOT NULL, "
operator|+
literal|"created_time UNSIGNED_LONG, "
operator|+
name|METRIC_COLUMN_FAMILY
operator|+
name|PHOENIX_COL_FAMILY_PLACE_HOLDER
operator|+
literal|" VARBINARY, "
operator|+
literal|"metric_names VARCHAR, info_keys VARCHAR "
operator|+
literal|"CONSTRAINT pk PRIMARY KEY("
operator|+
literal|"user, cluster, flow_name))"
decl_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|sql
operator|=
literal|"CREATE TABLE IF NOT EXISTS "
operator|+
name|OfflineAggregationInfo
operator|.
name|USER_AGGREGATION_TABLE_NAME
operator|+
literal|"(user VARCHAR NOT NULL, cluster VARCHAR NOT NULL, "
operator|+
literal|"created_time UNSIGNED_LONG, "
operator|+
name|METRIC_COLUMN_FAMILY
operator|+
name|PHOENIX_COL_FAMILY_PLACE_HOLDER
operator|+
literal|" VARBINARY, "
operator|+
literal|"metric_names VARCHAR, info_keys VARCHAR "
operator|+
literal|"CONSTRAINT pk PRIMARY KEY(user, cluster))"
expr_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|conn
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed in init data "
operator|+
name|se
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|se
argument_list|)
throw|;
block|}
return|return;
block|}
comment|// Utility functions
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|getConnection ()
name|Connection
name|getConnection
parameter_list|()
throws|throws
name|IOException
block|{
name|Connection
name|conn
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|connString
argument_list|,
name|connProperties
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setAutoCommit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to connect to phoenix server! "
operator|+
name|se
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|se
argument_list|)
throw|;
block|}
return|return
name|conn
return|;
block|}
comment|// WARNING: This method will permanently drop a table!
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|dropTable (String tableName)
name|void
name|dropTable
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|conn
init|=
name|getConnection
argument_list|()
init|;
name|Statement
name|stmt
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|String
name|sql
init|=
literal|"DROP TABLE "
operator|+
name|tableName
decl_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed in dropping entity table "
operator|+
name|se
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|se
throw|;
block|}
block|}
DECL|class|DynamicColumns
specifier|private
specifier|static
class|class
name|DynamicColumns
parameter_list|<
name|K
parameter_list|>
block|{
DECL|field|COLUMN_FAMILY_TYPE_BYTES
specifier|static
specifier|final
name|String
name|COLUMN_FAMILY_TYPE_BYTES
init|=
literal|" VARBINARY"
decl_stmt|;
DECL|field|COLUMN_FAMILY_TYPE_STRING
specifier|static
specifier|final
name|String
name|COLUMN_FAMILY_TYPE_STRING
init|=
literal|" VARCHAR"
decl_stmt|;
DECL|field|columnFamilyPrefix
name|String
name|columnFamilyPrefix
decl_stmt|;
DECL|field|type
name|String
name|type
decl_stmt|;
DECL|field|columns
name|Set
argument_list|<
name|K
argument_list|>
name|columns
decl_stmt|;
DECL|method|DynamicColumns (String columnFamilyPrefix, String type, Set<K> keyValues)
specifier|public
name|DynamicColumns
parameter_list|(
name|String
name|columnFamilyPrefix
parameter_list|,
name|String
name|type
parameter_list|,
name|Set
argument_list|<
name|K
argument_list|>
name|keyValues
parameter_list|)
block|{
name|this
operator|.
name|columnFamilyPrefix
operator|=
name|columnFamilyPrefix
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|keyValues
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
block|}
DECL|method|appendColumnsSQL ( StringBuilder colNames, DynamicColumns<K> cfInfo)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|>
name|StringBuilder
name|appendColumnsSQL
parameter_list|(
name|StringBuilder
name|colNames
parameter_list|,
name|DynamicColumns
argument_list|<
name|K
argument_list|>
name|cfInfo
parameter_list|)
block|{
comment|// Prepare the sql template by iterating through all keys
for|for
control|(
name|K
name|key
range|:
name|cfInfo
operator|.
name|columns
control|)
block|{
name|colNames
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|cfInfo
operator|.
name|columnFamilyPrefix
argument_list|)
operator|.
name|append
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|cfInfo
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|colNames
return|;
block|}
DECL|method|setValuesForColumnFamily ( PreparedStatement ps, Map<K, V> keyValues, int startPos, boolean converToBytes)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|int
name|setValuesForColumnFamily
parameter_list|(
name|PreparedStatement
name|ps
parameter_list|,
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|keyValues
parameter_list|,
name|int
name|startPos
parameter_list|,
name|boolean
name|converToBytes
parameter_list|)
throws|throws
name|SQLException
block|{
name|int
name|idx
init|=
name|startPos
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|keyValues
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|V
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Collection
condition|)
block|{
name|ps
operator|.
name|setString
argument_list|(
name|idx
operator|++
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
operator|(
name|Collection
operator|)
name|value
argument_list|,
name|AGGREGATION_STORAGE_SEPARATOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|converToBytes
condition|)
block|{
try|try
block|{
name|ps
operator|.
name|setBytes
argument_list|(
name|idx
operator|++
argument_list|,
name|GenericObjectMapper
operator|.
name|write
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in converting values into bytes "
operator|+
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SQLException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|ps
operator|.
name|setString
argument_list|(
name|idx
operator|++
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|idx
return|;
block|}
DECL|method|setBytesForColumnFamily ( PreparedStatement ps, Map<K, V> keyValues, int startPos)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|int
name|setBytesForColumnFamily
parameter_list|(
name|PreparedStatement
name|ps
parameter_list|,
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|keyValues
parameter_list|,
name|int
name|startPos
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|setValuesForColumnFamily
argument_list|(
name|ps
argument_list|,
name|keyValues
argument_list|,
name|startPos
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|setStringsForColumnFamily ( PreparedStatement ps, Map<K, V> keyValues, int startPos)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|int
name|setStringsForColumnFamily
parameter_list|(
name|PreparedStatement
name|ps
parameter_list|,
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|keyValues
parameter_list|,
name|int
name|startPos
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|setValuesForColumnFamily
argument_list|(
name|ps
argument_list|,
name|keyValues
argument_list|,
name|startPos
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|storeEntityVariableLengthFields (TimelineEntity entity, Map<String, TimelineMetric> formattedMetrics, TimelineCollectorContext context, Connection conn, OfflineAggregationInfo aggregationInfo)
specifier|private
specifier|static
name|void
name|storeEntityVariableLengthFields
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|TimelineMetric
argument_list|>
name|formattedMetrics
parameter_list|,
name|TimelineCollectorContext
name|context
parameter_list|,
name|Connection
name|conn
parameter_list|,
name|OfflineAggregationInfo
name|aggregationInfo
parameter_list|)
throws|throws
name|SQLException
block|{
name|int
name|numPlaceholders
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|columnDefs
init|=
operator|new
name|StringBuilder
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
name|aggregationInfo
operator|.
name|getPrimaryKeyList
argument_list|()
argument_list|,
literal|","
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|formattedMetrics
operator|!=
literal|null
operator|&&
name|formattedMetrics
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|appendColumnsSQL
argument_list|(
name|columnDefs
argument_list|,
operator|new
name|DynamicColumns
argument_list|<>
argument_list|(
name|METRIC_COLUMN_FAMILY
argument_list|,
name|DynamicColumns
operator|.
name|COLUMN_FAMILY_TYPE_BYTES
argument_list|,
name|formattedMetrics
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|numPlaceholders
operator|+=
name|formattedMetrics
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|numPlaceholders
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|StringBuilder
name|placeholders
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|placeholders
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"?,"
argument_list|,
name|aggregationInfo
operator|.
name|getPrimaryKeyList
argument_list|()
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
comment|// numPlaceholders>= 1 now
name|placeholders
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|",?"
argument_list|,
name|numPlaceholders
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|sqlVariableLengthFields
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"UPSERT INTO "
argument_list|)
operator|.
name|append
argument_list|(
name|aggregationInfo
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
name|columnDefs
argument_list|)
operator|.
name|append
argument_list|(
literal|") VALUES("
argument_list|)
operator|.
name|append
argument_list|(
name|placeholders
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SQL statement for variable length fields: "
operator|+
name|sqlVariableLengthFields
argument_list|)
expr_stmt|;
block|}
comment|// Use try with resource statement for the prepared statement
try|try
init|(
name|PreparedStatement
name|psVariableLengthFields
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|sqlVariableLengthFields
argument_list|)
init|)
block|{
name|int
name|idx
init|=
name|aggregationInfo
operator|.
name|setStringsForPrimaryKey
argument_list|(
name|psVariableLengthFields
argument_list|,
name|context
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|formattedMetrics
operator|!=
literal|null
operator|&&
name|formattedMetrics
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|idx
operator|=
name|setBytesForColumnFamily
argument_list|(
name|psVariableLengthFields
argument_list|,
name|formattedMetrics
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
name|psVariableLengthFields
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

