begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.reader
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|FlowActivityEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|FlowRunEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntityType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|TimelineReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|TimelineReaderManager
specifier|public
class|class
name|TimelineReaderManager
extends|extends
name|AbstractService
block|{
annotation|@
name|VisibleForTesting
DECL|field|UID_KEY
specifier|public
specifier|static
specifier|final
name|String
name|UID_KEY
init|=
literal|"UID"
decl_stmt|;
DECL|field|reader
specifier|private
name|TimelineReader
name|reader
decl_stmt|;
DECL|method|TimelineReaderManager (TimelineReader timelineReader)
specifier|public
name|TimelineReaderManager
parameter_list|(
name|TimelineReader
name|timelineReader
parameter_list|)
block|{
name|super
argument_list|(
name|TimelineReaderManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|timelineReader
expr_stmt|;
block|}
comment|/**    * Gets cluster ID from config yarn.resourcemanager.cluster-id    * if not supplied by client.    * @param clusterId    * @param conf    * @return clusterId    */
DECL|method|getClusterID (String clusterId, Configuration conf)
specifier|private
specifier|static
name|String
name|getClusterID
parameter_list|(
name|String
name|clusterId
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|clusterId
operator|==
literal|null
operator|||
name|clusterId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CLUSTER_ID
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_CLUSTER_ID
argument_list|)
return|;
block|}
return|return
name|clusterId
return|;
block|}
DECL|method|getTimelineEntityType (String entityType)
specifier|private
specifier|static
name|TimelineEntityType
name|getTimelineEntityType
parameter_list|(
name|String
name|entityType
parameter_list|)
block|{
if|if
condition|(
name|entityType
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|TimelineEntityType
operator|.
name|valueOf
argument_list|(
name|entityType
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Fill UID in the info field of entity based on the query(identified by    * entity type).    * @param entityType Entity type of query.    * @param entity Timeline Entity.    * @param context Context defining the query.    */
DECL|method|fillUID (TimelineEntityType entityType, TimelineEntity entity, TimelineReaderContext context)
specifier|private
specifier|static
name|void
name|fillUID
parameter_list|(
name|TimelineEntityType
name|entityType
parameter_list|,
name|TimelineEntity
name|entity
parameter_list|,
name|TimelineReaderContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|entityType
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|entityType
condition|)
block|{
case|case
name|YARN_FLOW_ACTIVITY
case|:
name|FlowActivityEntity
name|activityEntity
init|=
operator|(
name|FlowActivityEntity
operator|)
name|entity
decl_stmt|;
name|context
operator|.
name|setUserId
argument_list|(
name|activityEntity
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setFlowName
argument_list|(
name|activityEntity
operator|.
name|getFlowName
argument_list|()
argument_list|)
expr_stmt|;
name|entity
operator|.
name|setUID
argument_list|(
name|UID_KEY
argument_list|,
name|TimelineUIDConverter
operator|.
name|FLOW_UID
operator|.
name|encodeUID
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
return|return;
case|case
name|YARN_FLOW_RUN
case|:
name|FlowRunEntity
name|runEntity
init|=
operator|(
name|FlowRunEntity
operator|)
name|entity
decl_stmt|;
name|context
operator|.
name|setFlowRunId
argument_list|(
name|runEntity
operator|.
name|getRunId
argument_list|()
argument_list|)
expr_stmt|;
name|entity
operator|.
name|setUID
argument_list|(
name|UID_KEY
argument_list|,
name|TimelineUIDConverter
operator|.
name|FLOWRUN_UID
operator|.
name|encodeUID
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
return|return;
case|case
name|YARN_APPLICATION
case|:
name|context
operator|.
name|setAppId
argument_list|(
name|entity
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|entity
operator|.
name|setUID
argument_list|(
name|UID_KEY
argument_list|,
name|TimelineUIDConverter
operator|.
name|APPLICATION_UID
operator|.
name|encodeUID
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
return|return;
default|default:
break|break;
block|}
block|}
name|context
operator|.
name|setEntityType
argument_list|(
name|entity
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setEntityId
argument_list|(
name|entity
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|entity
operator|.
name|setUID
argument_list|(
name|UID_KEY
argument_list|,
name|TimelineUIDConverter
operator|.
name|GENERIC_ENTITY_UID
operator|.
name|encodeUID
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a set of entities matching given predicates. The meaning of each    * argument has been documented with {@link TimelineReader#getEntities}.    *    * @see TimelineReader#getEntities    */
DECL|method|getEntities (TimelineReaderContext context, TimelineEntityFilters filters, TimelineDataToRetrieve dataToRetrieve)
specifier|public
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|getEntities
parameter_list|(
name|TimelineReaderContext
name|context
parameter_list|,
name|TimelineEntityFilters
name|filters
parameter_list|,
name|TimelineDataToRetrieve
name|dataToRetrieve
parameter_list|)
throws|throws
name|IOException
block|{
name|context
operator|.
name|setClusterId
argument_list|(
name|getClusterID
argument_list|(
name|context
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|getConfig
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|entities
init|=
name|reader
operator|.
name|getEntities
argument_list|(
operator|new
name|TimelineReaderContext
argument_list|(
name|context
argument_list|)
argument_list|,
name|filters
argument_list|,
name|dataToRetrieve
argument_list|)
decl_stmt|;
if|if
condition|(
name|entities
operator|!=
literal|null
condition|)
block|{
name|TimelineEntityType
name|type
init|=
name|getTimelineEntityType
argument_list|(
name|context
operator|.
name|getEntityType
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TimelineEntity
name|entity
range|:
name|entities
control|)
block|{
name|fillUID
argument_list|(
name|type
argument_list|,
name|entity
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|entities
return|;
block|}
comment|/**    * Get single timeline entity. The meaning of each argument has been    * documented with {@link TimelineReader#getEntity}.    *    * @see TimelineReader#getEntity    */
DECL|method|getEntity (TimelineReaderContext context, TimelineDataToRetrieve dataToRetrieve)
specifier|public
name|TimelineEntity
name|getEntity
parameter_list|(
name|TimelineReaderContext
name|context
parameter_list|,
name|TimelineDataToRetrieve
name|dataToRetrieve
parameter_list|)
throws|throws
name|IOException
block|{
name|context
operator|.
name|setClusterId
argument_list|(
name|getClusterID
argument_list|(
name|context
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|getConfig
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|TimelineEntity
name|entity
init|=
name|reader
operator|.
name|getEntity
argument_list|(
operator|new
name|TimelineReaderContext
argument_list|(
name|context
argument_list|)
argument_list|,
name|dataToRetrieve
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|TimelineEntityType
name|type
init|=
name|getTimelineEntityType
argument_list|(
name|context
operator|.
name|getEntityType
argument_list|()
argument_list|)
decl_stmt|;
name|fillUID
argument_list|(
name|type
argument_list|,
name|entity
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
return|return
name|entity
return|;
block|}
block|}
end_class

end_unit

