begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage.reader
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|reader
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|BinaryComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|BinaryPrefixComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FamilyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|PageFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|QualifierFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntityType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|TimelineDataToRetrieve
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|TimelineEntityFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|TimelineReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineFilterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|TimelineReader
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|application
operator|.
name|ApplicationColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|application
operator|.
name|ApplicationColumnFamily
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|application
operator|.
name|ApplicationColumnPrefix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|application
operator|.
name|ApplicationRowKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|application
operator|.
name|ApplicationTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|BaseTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|TimelineStorageUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Timeline entity reader for application entities that are stored in the  * application table.  */
end_comment

begin_class
DECL|class|ApplicationEntityReader
class|class
name|ApplicationEntityReader
extends|extends
name|GenericEntityReader
block|{
DECL|field|APPLICATION_TABLE
specifier|private
specifier|static
specifier|final
name|ApplicationTable
name|APPLICATION_TABLE
init|=
operator|new
name|ApplicationTable
argument_list|()
decl_stmt|;
DECL|method|ApplicationEntityReader (TimelineReaderContext ctxt, TimelineEntityFilters entityFilters, TimelineDataToRetrieve toRetrieve)
specifier|public
name|ApplicationEntityReader
parameter_list|(
name|TimelineReaderContext
name|ctxt
parameter_list|,
name|TimelineEntityFilters
name|entityFilters
parameter_list|,
name|TimelineDataToRetrieve
name|toRetrieve
parameter_list|)
block|{
name|super
argument_list|(
name|ctxt
argument_list|,
name|entityFilters
argument_list|,
name|toRetrieve
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|ApplicationEntityReader (TimelineReaderContext ctxt, TimelineDataToRetrieve toRetrieve)
specifier|public
name|ApplicationEntityReader
parameter_list|(
name|TimelineReaderContext
name|ctxt
parameter_list|,
name|TimelineDataToRetrieve
name|toRetrieve
parameter_list|)
block|{
name|super
argument_list|(
name|ctxt
argument_list|,
name|toRetrieve
argument_list|)
expr_stmt|;
block|}
comment|/**    * Uses the {@link ApplicationTable}.    */
DECL|method|getTable ()
specifier|protected
name|BaseTable
argument_list|<
name|?
argument_list|>
name|getTable
parameter_list|()
block|{
return|return
name|APPLICATION_TABLE
return|;
block|}
annotation|@
name|Override
DECL|method|constructFilterListBasedOnFields ()
specifier|protected
name|FilterList
name|constructFilterListBasedOnFields
parameter_list|()
block|{
name|FilterList
name|list
init|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|)
decl_stmt|;
name|TimelineDataToRetrieve
name|dataToRetrieve
init|=
name|getDataToRetrieve
argument_list|()
decl_stmt|;
comment|// Fetch all the columns.
if|if
condition|(
name|dataToRetrieve
operator|.
name|getFieldsToRetrieve
argument_list|()
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
operator|&&
operator|(
name|dataToRetrieve
operator|.
name|getConfsToRetrieve
argument_list|()
operator|==
literal|null
operator|||
name|dataToRetrieve
operator|.
name|getConfsToRetrieve
argument_list|()
operator|.
name|getFilterList
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
operator|(
name|dataToRetrieve
operator|.
name|getMetricsToRetrieve
argument_list|()
operator|==
literal|null
operator|||
name|dataToRetrieve
operator|.
name|getMetricsToRetrieve
argument_list|()
operator|.
name|getFilterList
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
return|return
name|list
return|;
block|}
name|FilterList
name|infoColFamilyList
init|=
operator|new
name|FilterList
argument_list|()
decl_stmt|;
comment|// By default fetch everything in INFO column family.
name|FamilyFilter
name|infoColumnFamily
init|=
operator|new
name|FamilyFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|ApplicationColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|infoColFamilyList
operator|.
name|addFilter
argument_list|(
name|infoColumnFamily
argument_list|)
expr_stmt|;
comment|// Events not required.
name|TimelineEntityFilters
name|filters
init|=
name|getFilters
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dataToRetrieve
operator|.
name|getFieldsToRetrieve
argument_list|()
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|EVENTS
argument_list|)
operator|&&
operator|!
name|dataToRetrieve
operator|.
name|getFieldsToRetrieve
argument_list|()
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
operator|&&
operator|(
name|isSingleEntityRead
argument_list|()
operator|||
name|filters
operator|.
name|getEventFilters
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
name|infoColFamilyList
operator|.
name|addFilter
argument_list|(
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|BinaryPrefixComparator
argument_list|(
name|ApplicationColumnPrefix
operator|.
name|EVENT
operator|.
name|getColumnPrefixBytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// info not required.
if|if
condition|(
operator|!
name|dataToRetrieve
operator|.
name|getFieldsToRetrieve
argument_list|()
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|INFO
argument_list|)
operator|&&
operator|!
name|dataToRetrieve
operator|.
name|getFieldsToRetrieve
argument_list|()
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
operator|&&
operator|(
name|isSingleEntityRead
argument_list|()
operator|||
name|filters
operator|.
name|getInfoFilters
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
name|infoColFamilyList
operator|.
name|addFilter
argument_list|(
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|BinaryPrefixComparator
argument_list|(
name|ApplicationColumnPrefix
operator|.
name|INFO
operator|.
name|getColumnPrefixBytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// is releated to not required.
if|if
condition|(
operator|!
name|dataToRetrieve
operator|.
name|getFieldsToRetrieve
argument_list|()
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|IS_RELATED_TO
argument_list|)
operator|&&
operator|!
name|dataToRetrieve
operator|.
name|getFieldsToRetrieve
argument_list|()
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
operator|&&
operator|(
name|isSingleEntityRead
argument_list|()
operator|||
name|filters
operator|.
name|getIsRelatedTo
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
name|infoColFamilyList
operator|.
name|addFilter
argument_list|(
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|BinaryPrefixComparator
argument_list|(
name|ApplicationColumnPrefix
operator|.
name|IS_RELATED_TO
operator|.
name|getColumnPrefixBytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// relates to not required.
if|if
condition|(
operator|!
name|dataToRetrieve
operator|.
name|getFieldsToRetrieve
argument_list|()
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|RELATES_TO
argument_list|)
operator|&&
operator|!
name|dataToRetrieve
operator|.
name|getFieldsToRetrieve
argument_list|()
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
operator|&&
operator|(
name|isSingleEntityRead
argument_list|()
operator|||
name|filters
operator|.
name|getRelatesTo
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
name|infoColFamilyList
operator|.
name|addFilter
argument_list|(
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|BinaryPrefixComparator
argument_list|(
name|ApplicationColumnPrefix
operator|.
name|RELATES_TO
operator|.
name|getColumnPrefixBytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|addFilter
argument_list|(
name|infoColFamilyList
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|dataToRetrieve
operator|.
name|getFieldsToRetrieve
argument_list|()
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|CONFIGS
argument_list|)
operator|||
operator|(
operator|!
name|isSingleEntityRead
argument_list|()
operator|&&
name|filters
operator|.
name|getConfigFilters
argument_list|()
operator|!=
literal|null
operator|)
operator|)
operator|||
operator|(
name|dataToRetrieve
operator|.
name|getConfsToRetrieve
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|dataToRetrieve
operator|.
name|getConfsToRetrieve
argument_list|()
operator|.
name|getFilterList
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|FilterList
name|filterCfg
init|=
operator|new
name|FilterList
argument_list|(
operator|new
name|FamilyFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|ApplicationColumnFamily
operator|.
name|CONFIGS
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataToRetrieve
operator|.
name|getConfsToRetrieve
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|dataToRetrieve
operator|.
name|getConfsToRetrieve
argument_list|()
operator|.
name|getFilterList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|filterCfg
operator|.
name|addFilter
argument_list|(
name|TimelineFilterUtils
operator|.
name|createHBaseFilterList
argument_list|(
name|ApplicationColumnPrefix
operator|.
name|CONFIG
argument_list|,
name|dataToRetrieve
operator|.
name|getConfsToRetrieve
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|addFilter
argument_list|(
name|filterCfg
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|dataToRetrieve
operator|.
name|getFieldsToRetrieve
argument_list|()
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|METRICS
argument_list|)
operator|||
operator|(
operator|!
name|isSingleEntityRead
argument_list|()
operator|&&
name|filters
operator|.
name|getMetricFilters
argument_list|()
operator|!=
literal|null
operator|)
operator|)
operator|||
operator|(
name|dataToRetrieve
operator|.
name|getMetricsToRetrieve
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|dataToRetrieve
operator|.
name|getMetricsToRetrieve
argument_list|()
operator|.
name|getFilterList
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|FilterList
name|filterMetrics
init|=
operator|new
name|FilterList
argument_list|(
operator|new
name|FamilyFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|ApplicationColumnFamily
operator|.
name|METRICS
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataToRetrieve
operator|.
name|getMetricsToRetrieve
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|dataToRetrieve
operator|.
name|getMetricsToRetrieve
argument_list|()
operator|.
name|getFilterList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|filterMetrics
operator|.
name|addFilter
argument_list|(
name|TimelineFilterUtils
operator|.
name|createHBaseFilterList
argument_list|(
name|ApplicationColumnPrefix
operator|.
name|METRIC
argument_list|,
name|dataToRetrieve
operator|.
name|getMetricsToRetrieve
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|addFilter
argument_list|(
name|filterMetrics
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
annotation|@
name|Override
DECL|method|getResult (Configuration hbaseConf, Connection conn, FilterList filterList)
specifier|protected
name|Result
name|getResult
parameter_list|(
name|Configuration
name|hbaseConf
parameter_list|,
name|Connection
name|conn
parameter_list|,
name|FilterList
name|filterList
parameter_list|)
throws|throws
name|IOException
block|{
name|TimelineReaderContext
name|context
init|=
name|getContext
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowKey
init|=
name|ApplicationRowKey
operator|.
name|getRowKey
argument_list|(
name|context
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|context
operator|.
name|getUserId
argument_list|()
argument_list|,
name|context
operator|.
name|getFlowName
argument_list|()
argument_list|,
name|context
operator|.
name|getFlowRunId
argument_list|()
argument_list|,
name|context
operator|.
name|getAppId
argument_list|()
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
if|if
condition|(
name|filterList
operator|!=
literal|null
operator|&&
operator|!
name|filterList
operator|.
name|getFilters
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|get
operator|.
name|setFilter
argument_list|(
name|filterList
argument_list|)
expr_stmt|;
block|}
return|return
name|getTable
argument_list|()
operator|.
name|getResult
argument_list|(
name|hbaseConf
argument_list|,
name|conn
argument_list|,
name|get
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|validateParams ()
specifier|protected
name|void
name|validateParams
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|getContext
argument_list|()
operator|.
name|getClusterId
argument_list|()
argument_list|,
literal|"clusterId shouldn't be null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|getContext
argument_list|()
operator|.
name|getEntityType
argument_list|()
argument_list|,
literal|"entityType shouldn't be null"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSingleEntityRead
argument_list|()
condition|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|getContext
argument_list|()
operator|.
name|getAppId
argument_list|()
argument_list|,
literal|"appId shouldn't be null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|getContext
argument_list|()
operator|.
name|getUserId
argument_list|()
argument_list|,
literal|"userId shouldn't be null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|getContext
argument_list|()
operator|.
name|getFlowName
argument_list|()
argument_list|,
literal|"flowName shouldn't be null"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|augmentParams (Configuration hbaseConf, Connection conn)
specifier|protected
name|void
name|augmentParams
parameter_list|(
name|Configuration
name|hbaseConf
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
name|TimelineReaderContext
name|context
init|=
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|isSingleEntityRead
argument_list|()
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|getFlowName
argument_list|()
operator|==
literal|null
operator|||
name|context
operator|.
name|getFlowRunId
argument_list|()
operator|==
literal|null
operator|||
name|context
operator|.
name|getUserId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|FlowContext
name|flowContext
init|=
name|lookupFlowContext
argument_list|(
name|context
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|context
operator|.
name|getAppId
argument_list|()
argument_list|,
name|hbaseConf
argument_list|,
name|conn
argument_list|)
decl_stmt|;
name|context
operator|.
name|setFlowName
argument_list|(
name|flowContext
operator|.
name|getFlowName
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setFlowRunId
argument_list|(
name|flowContext
operator|.
name|getFlowRunId
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setUserId
argument_list|(
name|flowContext
operator|.
name|getUserId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|getDataToRetrieve
argument_list|()
operator|.
name|addFieldsBasedOnConfsAndMetricsToRetrieve
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getResults (Configuration hbaseConf, Connection conn, FilterList filterList)
specifier|protected
name|ResultScanner
name|getResults
parameter_list|(
name|Configuration
name|hbaseConf
parameter_list|,
name|Connection
name|conn
parameter_list|,
name|FilterList
name|filterList
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|TimelineReaderContext
name|context
init|=
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getFlowRunId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|scan
operator|.
name|setRowPrefixFilter
argument_list|(
name|ApplicationRowKey
operator|.
name|getRowKeyPrefix
argument_list|(
name|context
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|context
operator|.
name|getUserId
argument_list|()
argument_list|,
name|context
operator|.
name|getFlowName
argument_list|()
argument_list|,
name|context
operator|.
name|getFlowRunId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|setRowPrefixFilter
argument_list|(
name|ApplicationRowKey
operator|.
name|getRowKeyPrefix
argument_list|(
name|context
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|context
operator|.
name|getUserId
argument_list|()
argument_list|,
name|context
operator|.
name|getFlowName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|FilterList
name|newList
init|=
operator|new
name|FilterList
argument_list|()
decl_stmt|;
name|newList
operator|.
name|addFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|getFilters
argument_list|()
operator|.
name|getLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|filterList
operator|!=
literal|null
operator|&&
operator|!
name|filterList
operator|.
name|getFilters
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|newList
operator|.
name|addFilter
argument_list|(
name|filterList
argument_list|)
expr_stmt|;
block|}
name|scan
operator|.
name|setFilter
argument_list|(
name|newList
argument_list|)
expr_stmt|;
return|return
name|getTable
argument_list|()
operator|.
name|getResultScanner
argument_list|(
name|hbaseConf
argument_list|,
name|conn
argument_list|,
name|scan
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|parseEntity (Result result)
specifier|protected
name|TimelineEntity
name|parseEntity
parameter_list|(
name|Result
name|result
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|result
operator|==
literal|null
operator|||
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|TimelineEntity
name|entity
init|=
operator|new
name|TimelineEntity
argument_list|()
decl_stmt|;
name|entity
operator|.
name|setType
argument_list|(
name|TimelineEntityType
operator|.
name|YARN_APPLICATION
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|entityId
init|=
name|ApplicationColumn
operator|.
name|ID
operator|.
name|readResult
argument_list|(
name|result
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|entity
operator|.
name|setId
argument_list|(
name|entityId
argument_list|)
expr_stmt|;
name|TimelineEntityFilters
name|filters
init|=
name|getFilters
argument_list|()
decl_stmt|;
comment|// fetch created time
name|Number
name|createdTime
init|=
operator|(
name|Number
operator|)
name|ApplicationColumn
operator|.
name|CREATED_TIME
operator|.
name|readResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|entity
operator|.
name|setCreatedTime
argument_list|(
name|createdTime
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isSingleEntityRead
argument_list|()
operator|&&
operator|(
name|entity
operator|.
name|getCreatedTime
argument_list|()
operator|<
name|filters
operator|.
name|getCreatedTimeBegin
argument_list|()
operator|||
name|entity
operator|.
name|getCreatedTime
argument_list|()
operator|>
name|filters
operator|.
name|getCreatedTimeEnd
argument_list|()
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|EnumSet
argument_list|<
name|Field
argument_list|>
name|fieldsToRetrieve
init|=
name|getDataToRetrieve
argument_list|()
operator|.
name|getFieldsToRetrieve
argument_list|()
decl_stmt|;
comment|// fetch is related to entities
name|boolean
name|checkIsRelatedTo
init|=
name|filters
operator|!=
literal|null
operator|&&
name|filters
operator|.
name|getIsRelatedTo
argument_list|()
operator|!=
literal|null
operator|&&
name|filters
operator|.
name|getIsRelatedTo
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
decl_stmt|;
if|if
condition|(
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
operator|||
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|IS_RELATED_TO
argument_list|)
operator|||
name|checkIsRelatedTo
condition|)
block|{
name|readRelationship
argument_list|(
name|entity
argument_list|,
name|result
argument_list|,
name|ApplicationColumnPrefix
operator|.
name|IS_RELATED_TO
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkIsRelatedTo
operator|&&
operator|!
name|TimelineStorageUtils
operator|.
name|matchRelations
argument_list|(
name|entity
operator|.
name|getIsRelatedToEntities
argument_list|()
argument_list|,
name|filters
operator|.
name|getIsRelatedTo
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
operator|&&
operator|!
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|IS_RELATED_TO
argument_list|)
condition|)
block|{
name|entity
operator|.
name|getIsRelatedToEntities
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|// fetch relates to entities
name|boolean
name|checkRelatesTo
init|=
name|filters
operator|!=
literal|null
operator|&&
name|filters
operator|.
name|getRelatesTo
argument_list|()
operator|!=
literal|null
operator|&&
name|filters
operator|.
name|getRelatesTo
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
decl_stmt|;
if|if
condition|(
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
operator|||
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|RELATES_TO
argument_list|)
operator|||
name|checkRelatesTo
condition|)
block|{
name|readRelationship
argument_list|(
name|entity
argument_list|,
name|result
argument_list|,
name|ApplicationColumnPrefix
operator|.
name|RELATES_TO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkRelatesTo
operator|&&
operator|!
name|TimelineStorageUtils
operator|.
name|matchRelations
argument_list|(
name|entity
operator|.
name|getRelatesToEntities
argument_list|()
argument_list|,
name|filters
operator|.
name|getRelatesTo
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
operator|&&
operator|!
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|RELATES_TO
argument_list|)
condition|)
block|{
name|entity
operator|.
name|getRelatesToEntities
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|// fetch info
name|boolean
name|checkInfo
init|=
name|filters
operator|!=
literal|null
operator|&&
name|filters
operator|.
name|getInfoFilters
argument_list|()
operator|!=
literal|null
operator|&&
name|filters
operator|.
name|getInfoFilters
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
decl_stmt|;
if|if
condition|(
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
operator|||
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|INFO
argument_list|)
operator|||
name|checkInfo
condition|)
block|{
name|readKeyValuePairs
argument_list|(
name|entity
argument_list|,
name|result
argument_list|,
name|ApplicationColumnPrefix
operator|.
name|INFO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkInfo
operator|&&
operator|!
name|TimelineStorageUtils
operator|.
name|matchFilters
argument_list|(
name|entity
operator|.
name|getInfo
argument_list|()
argument_list|,
name|filters
operator|.
name|getInfoFilters
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
operator|&&
operator|!
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|INFO
argument_list|)
condition|)
block|{
name|entity
operator|.
name|getInfo
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|// fetch configs
name|boolean
name|checkConfigs
init|=
name|filters
operator|!=
literal|null
operator|&&
name|filters
operator|.
name|getConfigFilters
argument_list|()
operator|!=
literal|null
operator|&&
name|filters
operator|.
name|getConfigFilters
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
decl_stmt|;
if|if
condition|(
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
operator|||
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|CONFIGS
argument_list|)
operator|||
name|checkConfigs
condition|)
block|{
name|readKeyValuePairs
argument_list|(
name|entity
argument_list|,
name|result
argument_list|,
name|ApplicationColumnPrefix
operator|.
name|CONFIG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkConfigs
operator|&&
operator|!
name|TimelineStorageUtils
operator|.
name|matchFilters
argument_list|(
name|entity
operator|.
name|getConfigs
argument_list|()
argument_list|,
name|filters
operator|.
name|getConfigFilters
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
operator|&&
operator|!
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|CONFIGS
argument_list|)
condition|)
block|{
name|entity
operator|.
name|getConfigs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|// fetch events
name|boolean
name|checkEvents
init|=
name|filters
operator|!=
literal|null
operator|&&
name|filters
operator|.
name|getEventFilters
argument_list|()
operator|!=
literal|null
operator|&&
name|filters
operator|.
name|getEventFilters
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
decl_stmt|;
if|if
condition|(
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
operator|||
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|EVENTS
argument_list|)
operator|||
name|checkEvents
condition|)
block|{
name|readEvents
argument_list|(
name|entity
argument_list|,
name|result
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkEvents
operator|&&
operator|!
name|TimelineStorageUtils
operator|.
name|matchEventFilters
argument_list|(
name|entity
operator|.
name|getEvents
argument_list|()
argument_list|,
name|filters
operator|.
name|getEventFilters
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
operator|&&
operator|!
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|EVENTS
argument_list|)
condition|)
block|{
name|entity
operator|.
name|getEvents
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|// fetch metrics
name|boolean
name|checkMetrics
init|=
name|filters
operator|!=
literal|null
operator|&&
name|filters
operator|.
name|getMetricFilters
argument_list|()
operator|!=
literal|null
operator|&&
name|filters
operator|.
name|getMetricFilters
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
decl_stmt|;
if|if
condition|(
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
operator|||
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|METRICS
argument_list|)
operator|||
name|checkMetrics
condition|)
block|{
name|readMetrics
argument_list|(
name|entity
argument_list|,
name|result
argument_list|,
name|ApplicationColumnPrefix
operator|.
name|METRIC
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkMetrics
operator|&&
operator|!
name|TimelineStorageUtils
operator|.
name|matchMetricFilters
argument_list|(
name|entity
operator|.
name|getMetrics
argument_list|()
argument_list|,
name|filters
operator|.
name|getMetricFilters
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
operator|&&
operator|!
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|METRICS
argument_list|)
condition|)
block|{
name|entity
operator|.
name|getMetrics
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|entity
return|;
block|}
block|}
end_class

end_unit

