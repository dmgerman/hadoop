begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.reader.filter
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link TimelineFilter} that represents an ordered list of  * timeline filters which will then be evaluated with a specified boolean  * operator {@link Operator#AND} or {@link Operator#OR}. Since you can use  * timeline filter lists as children of timeline filter lists, you can create a  * hierarchy of filters to be evaluated.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|TimelineFilterList
specifier|public
class|class
name|TimelineFilterList
extends|extends
name|TimelineFilter
block|{
comment|/**    * Specifies how filters in the filter list will be evaluated. AND means all    * the filters should match and OR means atleast one should match.    */
annotation|@
name|Private
annotation|@
name|Unstable
DECL|enum|Operator
specifier|public
specifier|static
enum|enum
name|Operator
block|{
DECL|enumConstant|AND
name|AND
block|,
DECL|enumConstant|OR
name|OR
block|}
DECL|field|operator
specifier|private
name|Operator
name|operator
decl_stmt|;
DECL|field|filterList
specifier|private
name|List
argument_list|<
name|TimelineFilter
argument_list|>
name|filterList
init|=
operator|new
name|ArrayList
argument_list|<
name|TimelineFilter
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|TimelineFilterList (TimelineFilter...filters)
specifier|public
name|TimelineFilterList
parameter_list|(
name|TimelineFilter
modifier|...
name|filters
parameter_list|)
block|{
name|this
argument_list|(
name|Operator
operator|.
name|AND
argument_list|,
name|filters
argument_list|)
expr_stmt|;
block|}
DECL|method|TimelineFilterList ()
specifier|public
name|TimelineFilterList
parameter_list|()
block|{
name|this
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
expr_stmt|;
block|}
DECL|method|TimelineFilterList (Operator op)
specifier|public
name|TimelineFilterList
parameter_list|(
name|Operator
name|op
parameter_list|)
block|{
name|this
operator|.
name|operator
operator|=
name|op
expr_stmt|;
block|}
DECL|method|TimelineFilterList (Operator op, TimelineFilter...filters)
specifier|public
name|TimelineFilterList
parameter_list|(
name|Operator
name|op
parameter_list|,
name|TimelineFilter
modifier|...
name|filters
parameter_list|)
block|{
name|this
operator|.
name|operator
operator|=
name|op
expr_stmt|;
name|this
operator|.
name|filterList
operator|=
operator|new
name|ArrayList
argument_list|<
name|TimelineFilter
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|filters
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFilterType ()
specifier|public
name|TimelineFilterType
name|getFilterType
parameter_list|()
block|{
return|return
name|TimelineFilterType
operator|.
name|LIST
return|;
block|}
comment|/**    * Get the filter list.    *    * @return filterList    */
DECL|method|getFilterList ()
specifier|public
name|List
argument_list|<
name|TimelineFilter
argument_list|>
name|getFilterList
parameter_list|()
block|{
return|return
name|filterList
return|;
block|}
comment|/**    * Get the operator.    *    * @return operator    */
DECL|method|getOperator ()
specifier|public
name|Operator
name|getOperator
parameter_list|()
block|{
return|return
name|operator
return|;
block|}
DECL|method|setOperator (Operator op)
specifier|public
name|void
name|setOperator
parameter_list|(
name|Operator
name|op
parameter_list|)
block|{
name|operator
operator|=
name|op
expr_stmt|;
block|}
DECL|method|addFilter (TimelineFilter filter)
specifier|public
name|void
name|addFilter
parameter_list|(
name|TimelineFilter
name|filter
parameter_list|)
block|{
name|filterList
operator|.
name|add
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"TimelineFilterList %s (%d): %s"
argument_list|,
name|this
operator|.
name|operator
argument_list|,
name|this
operator|.
name|filterList
operator|.
name|size
argument_list|()
argument_list|,
name|this
operator|.
name|filterList
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

