begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineWriteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|GenericObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|collector
operator|.
name|TimelineCollectorContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|PhoenixTimelineWriterImpl
specifier|public
class|class
name|PhoenixTimelineWriterImpl
extends|extends
name|AbstractService
implements|implements
name|TimelineWriter
block|{
DECL|field|TIMELINE_SERVICE_PHOENIX_STORAGE_CONN_STR
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_PHOENIX_STORAGE_CONN_STR
init|=
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"writer.phoenix.connectionString"
decl_stmt|;
DECL|field|TIMELINE_SERVICE_PHEONIX_STORAGE_CONN_STR_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_PHEONIX_STORAGE_CONN_STR_DEFAULT
init|=
literal|"jdbc:phoenix:localhost:2181:/hbase"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PhoenixTimelineWriterImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PHOENIX_COL_FAMILY_PLACE_HOLDER
specifier|private
specifier|static
specifier|final
name|String
name|PHOENIX_COL_FAMILY_PLACE_HOLDER
init|=
literal|"timeline_cf_placeholder"
decl_stmt|;
comment|// These lists are not taking effects in table creations.
DECL|field|PHOENIX_STORAGE_PK_LIST
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|PHOENIX_STORAGE_PK_LIST
init|=
block|{
literal|"cluster"
block|,
literal|"user"
block|,
literal|"flow_name"
block|,
literal|"flow_version"
block|,
literal|"flow_run"
block|,
literal|"app_id"
block|,
literal|"type"
block|,
literal|"entity_id"
block|}
decl_stmt|;
DECL|field|TIMELINE_EVENT_EXTRA_PK_LIST
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|TIMELINE_EVENT_EXTRA_PK_LIST
init|=
block|{
literal|"timestamp"
block|,
literal|"event_id"
block|}
decl_stmt|;
DECL|field|TIMELINE_METRIC_EXTRA_PK_LIST
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|TIMELINE_METRIC_EXTRA_PK_LIST
init|=
block|{
literal|"metric_id"
block|}
decl_stmt|;
comment|/** Default Phoenix JDBC driver name */
DECL|field|DRIVER_CLASS_NAME
specifier|private
specifier|static
specifier|final
name|String
name|DRIVER_CLASS_NAME
init|=
literal|"org.apache.phoenix.jdbc.PhoenixDriver"
decl_stmt|;
comment|/** Default Phoenix timeline entity table name */
annotation|@
name|VisibleForTesting
DECL|field|ENTITY_TABLE_NAME
specifier|static
specifier|final
name|String
name|ENTITY_TABLE_NAME
init|=
literal|"timeline_entity"
decl_stmt|;
comment|/** Default Phoenix event table name */
annotation|@
name|VisibleForTesting
DECL|field|EVENT_TABLE_NAME
specifier|static
specifier|final
name|String
name|EVENT_TABLE_NAME
init|=
literal|"timeline_event"
decl_stmt|;
comment|/** Default Phoenix metric table name */
annotation|@
name|VisibleForTesting
DECL|field|METRIC_TABLE_NAME
specifier|static
specifier|final
name|String
name|METRIC_TABLE_NAME
init|=
literal|"metric_singledata"
decl_stmt|;
comment|/** Default Phoenix timeline config column family */
DECL|field|CONFIG_COLUMN_FAMILY
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_COLUMN_FAMILY
init|=
literal|"c."
decl_stmt|;
comment|/** Default Phoenix timeline info column family */
DECL|field|INFO_COLUMN_FAMILY
specifier|private
specifier|static
specifier|final
name|String
name|INFO_COLUMN_FAMILY
init|=
literal|"i."
decl_stmt|;
comment|/** Default Phoenix event info column family */
DECL|field|EVENT_INFO_COLUMN_FAMILY
specifier|private
specifier|static
specifier|final
name|String
name|EVENT_INFO_COLUMN_FAMILY
init|=
literal|"ei."
decl_stmt|;
comment|/** Default Phoenix isRelatedTo column family */
DECL|field|IS_RELATED_TO_FAMILY
specifier|private
specifier|static
specifier|final
name|String
name|IS_RELATED_TO_FAMILY
init|=
literal|"ir."
decl_stmt|;
comment|/** Default Phoenix relatesTo column family */
DECL|field|RELATES_TO_FAMILY
specifier|private
specifier|static
specifier|final
name|String
name|RELATES_TO_FAMILY
init|=
literal|"rt."
decl_stmt|;
comment|/** Default separator for Phoenix storage */
DECL|field|PHOENIX_STORAGE_SEPARATOR
specifier|private
specifier|static
specifier|final
name|String
name|PHOENIX_STORAGE_SEPARATOR
init|=
literal|";"
decl_stmt|;
comment|/** Connection string to the deployed Phoenix cluster */
annotation|@
name|VisibleForTesting
DECL|field|connString
name|String
name|connString
init|=
literal|null
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|connProperties
name|Properties
name|connProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
DECL|method|PhoenixTimelineWriterImpl ()
name|PhoenixTimelineWriterImpl
parameter_list|()
block|{
name|super
argument_list|(
operator|(
name|PhoenixTimelineWriterImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
comment|// so check it here and only read in the config if it's not overridden.
name|connString
operator|=
name|conf
operator|.
name|get
argument_list|(
name|TIMELINE_SERVICE_PHOENIX_STORAGE_CONN_STR
argument_list|,
name|TIMELINE_SERVICE_PHEONIX_STORAGE_CONN_STR_DEFAULT
argument_list|)
expr_stmt|;
name|createTables
argument_list|()
expr_stmt|;
name|super
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (String clusterId, String userId, String flowName, String flowVersion, long flowRunId, String appId, TimelineEntities entities)
specifier|public
name|TimelineWriteResponse
name|write
parameter_list|(
name|String
name|clusterId
parameter_list|,
name|String
name|userId
parameter_list|,
name|String
name|flowName
parameter_list|,
name|String
name|flowVersion
parameter_list|,
name|long
name|flowRunId
parameter_list|,
name|String
name|appId
parameter_list|,
name|TimelineEntities
name|entities
parameter_list|)
throws|throws
name|IOException
block|{
name|TimelineWriteResponse
name|response
init|=
operator|new
name|TimelineWriteResponse
argument_list|()
decl_stmt|;
name|TimelineCollectorContext
name|currContext
init|=
operator|new
name|TimelineCollectorContext
argument_list|(
name|clusterId
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
name|flowVersion
argument_list|,
name|flowRunId
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
literal|"UPSERT INTO "
operator|+
name|ENTITY_TABLE_NAME
operator|+
literal|" ("
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|PHOENIX_STORAGE_PK_LIST
argument_list|,
literal|","
argument_list|)
operator|+
literal|", creation_time, modified_time, configs) "
operator|+
literal|"VALUES ("
operator|+
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"?,"
argument_list|,
name|PHOENIX_STORAGE_PK_LIST
operator|.
name|length
argument_list|)
operator|+
literal|"?, ?, ?)"
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"TimelineEntity write SQL: "
operator|+
name|sql
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Connection
name|conn
init|=
name|getConnection
argument_list|()
init|;
name|PreparedStatement
name|ps
operator|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
init|)
block|{
for|for
control|(
name|TimelineEntity
name|entity
range|:
name|entities
operator|.
name|getEntities
argument_list|()
control|)
block|{
name|int
name|idx
init|=
name|setStringsForPrimaryKey
argument_list|(
name|ps
argument_list|,
name|currContext
argument_list|,
name|entity
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ps
operator|.
name|setLong
argument_list|(
name|idx
operator|++
argument_list|,
name|entity
operator|.
name|getCreatedTime
argument_list|()
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setLong
argument_list|(
name|idx
operator|++
argument_list|,
name|entity
operator|.
name|getModifiedTime
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|configKeys
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|entity
operator|.
name|getConfigs
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|,
name|PHOENIX_STORAGE_SEPARATOR
argument_list|)
decl_stmt|;
name|ps
operator|.
name|setString
argument_list|(
name|idx
operator|++
argument_list|,
name|configKeys
argument_list|)
expr_stmt|;
name|ps
operator|.
name|execute
argument_list|()
expr_stmt|;
name|storeEntityVariableLengthFields
argument_list|(
name|entity
argument_list|,
name|currContext
argument_list|,
name|conn
argument_list|)
expr_stmt|;
name|storeEvents
argument_list|(
name|entity
argument_list|,
name|currContext
argument_list|,
name|conn
argument_list|)
expr_stmt|;
name|storeMetrics
argument_list|(
name|entity
argument_list|,
name|currContext
argument_list|,
name|conn
argument_list|)
expr_stmt|;
name|conn
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to add entity to Phoenix "
operator|+
name|se
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|se
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception on getting connection: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|response
return|;
block|}
comment|/**    * Aggregates the entity information to the timeline store based on which    * track this entity is to be rolled up to The tracks along which aggregations    * are to be done are given by {@link TimelineAggregationTrack}    *    * Any errors occurring for individual write request objects will be reported    * in the response.    *    * @param data    *          a {@link TimelineEntity} object    *          a {@link TimelineAggregationTrack} enum value    * @return a {@link TimelineWriteResponse} object.    * @throws IOException    */
annotation|@
name|Override
DECL|method|aggregate (TimelineEntity data, TimelineAggregationTrack track)
specifier|public
name|TimelineWriteResponse
name|aggregate
parameter_list|(
name|TimelineEntity
name|data
parameter_list|,
name|TimelineAggregationTrack
name|track
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
comment|// Utility functions
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|getConnection ()
name|Connection
name|getConnection
parameter_list|()
throws|throws
name|IOException
block|{
name|Connection
name|conn
decl_stmt|;
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
name|DRIVER_CLASS_NAME
argument_list|)
expr_stmt|;
name|conn
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|connString
argument_list|,
name|connProperties
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setAutoCommit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to connect to phoenix server! "
operator|+
name|se
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|se
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Class not found! "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|conn
return|;
block|}
DECL|method|createTables ()
specifier|private
name|void
name|createTables
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create tables if necessary
try|try
init|(
name|Connection
name|conn
init|=
name|getConnection
argument_list|()
init|;
name|Statement
name|stmt
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
comment|// Table schema defined as in YARN-3134.
name|String
name|sql
init|=
literal|"CREATE TABLE IF NOT EXISTS "
operator|+
name|ENTITY_TABLE_NAME
operator|+
literal|"(user VARCHAR NOT NULL, cluster VARCHAR NOT NULL, "
operator|+
literal|"flow_name VARCHAR NOT NULL, flow_version VARCHAR NOT NULL, "
operator|+
literal|"flow_run UNSIGNED_LONG NOT NULL, "
operator|+
literal|"app_id VARCHAR NOT NULL, type VARCHAR NOT NULL, "
operator|+
literal|"entity_id VARCHAR NOT NULL, "
operator|+
literal|"creation_time UNSIGNED_LONG, modified_time UNSIGNED_LONG, "
operator|+
literal|"configs VARCHAR, "
operator|+
name|CONFIG_COLUMN_FAMILY
operator|+
name|PHOENIX_COL_FAMILY_PLACE_HOLDER
operator|+
literal|" VARCHAR, "
operator|+
name|INFO_COLUMN_FAMILY
operator|+
name|PHOENIX_COL_FAMILY_PLACE_HOLDER
operator|+
literal|" VARBINARY, "
operator|+
name|IS_RELATED_TO_FAMILY
operator|+
name|PHOENIX_COL_FAMILY_PLACE_HOLDER
operator|+
literal|" VARCHAR, "
operator|+
name|RELATES_TO_FAMILY
operator|+
name|PHOENIX_COL_FAMILY_PLACE_HOLDER
operator|+
literal|" VARCHAR "
operator|+
literal|"CONSTRAINT pk PRIMARY KEY("
operator|+
literal|"user, cluster, flow_name, flow_version, flow_run DESC, app_id, "
operator|+
literal|"type, entity_id))"
decl_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|sql
operator|=
literal|"CREATE TABLE IF NOT EXISTS "
operator|+
name|EVENT_TABLE_NAME
operator|+
literal|"(user VARCHAR NOT NULL, cluster VARCHAR NOT NULL, "
operator|+
literal|"flow_name VARCHAR NOT NULL, flow_version VARCHAR NOT NULL, "
operator|+
literal|"flow_run UNSIGNED_LONG NOT NULL, "
operator|+
literal|"app_id VARCHAR NOT NULL, type VARCHAR NOT NULL, "
operator|+
literal|"entity_id VARCHAR NOT NULL, "
operator|+
literal|"timestamp UNSIGNED_LONG NOT NULL, event_id VARCHAR NOT NULL, "
operator|+
name|EVENT_INFO_COLUMN_FAMILY
operator|+
name|PHOENIX_COL_FAMILY_PLACE_HOLDER
operator|+
literal|" VARBINARY "
operator|+
literal|"CONSTRAINT pk PRIMARY KEY("
operator|+
literal|"user, cluster, flow_name, flow_version, flow_run DESC, app_id, "
operator|+
literal|"type, entity_id, timestamp DESC, event_id))"
expr_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|sql
operator|=
literal|"CREATE TABLE IF NOT EXISTS "
operator|+
name|METRIC_TABLE_NAME
operator|+
literal|"(user VARCHAR NOT NULL, cluster VARCHAR NOT NULL, "
operator|+
literal|"flow_name VARCHAR NOT NULL, flow_version VARCHAR NOT NULL, "
operator|+
literal|"flow_run UNSIGNED_LONG NOT NULL, "
operator|+
literal|"app_id VARCHAR NOT NULL, type VARCHAR NOT NULL, "
operator|+
literal|"entity_id VARCHAR NOT NULL, "
operator|+
literal|"metric_id VARCHAR NOT NULL, "
operator|+
literal|"singledata VARBINARY, "
operator|+
literal|"time UNSIGNED_LONG "
operator|+
literal|"CONSTRAINT pk PRIMARY KEY("
operator|+
literal|"user, cluster, flow_name, flow_version, flow_run DESC, app_id, "
operator|+
literal|"type, entity_id, metric_id))"
expr_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|conn
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed in init data "
operator|+
name|se
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|se
throw|;
block|}
return|return;
block|}
DECL|class|DynamicColumns
specifier|private
specifier|static
class|class
name|DynamicColumns
parameter_list|<
name|K
parameter_list|>
block|{
DECL|field|COLUMN_FAMILY_TYPE_BYTES
specifier|static
specifier|final
name|String
name|COLUMN_FAMILY_TYPE_BYTES
init|=
literal|" VARBINARY"
decl_stmt|;
DECL|field|COLUMN_FAMILY_TYPE_STRING
specifier|static
specifier|final
name|String
name|COLUMN_FAMILY_TYPE_STRING
init|=
literal|" VARCHAR"
decl_stmt|;
DECL|field|columnFamilyPrefix
name|String
name|columnFamilyPrefix
decl_stmt|;
DECL|field|type
name|String
name|type
decl_stmt|;
DECL|field|columns
name|Set
argument_list|<
name|K
argument_list|>
name|columns
decl_stmt|;
DECL|method|DynamicColumns (String columnFamilyPrefix, String type, Set<K> keyValues)
specifier|public
name|DynamicColumns
parameter_list|(
name|String
name|columnFamilyPrefix
parameter_list|,
name|String
name|type
parameter_list|,
name|Set
argument_list|<
name|K
argument_list|>
name|keyValues
parameter_list|)
block|{
name|this
operator|.
name|columnFamilyPrefix
operator|=
name|columnFamilyPrefix
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|keyValues
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
block|}
DECL|method|appendColumnsSQL ( StringBuilder colNames, DynamicColumns<K> cfInfo)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|>
name|StringBuilder
name|appendColumnsSQL
parameter_list|(
name|StringBuilder
name|colNames
parameter_list|,
name|DynamicColumns
argument_list|<
name|K
argument_list|>
name|cfInfo
parameter_list|)
block|{
comment|// Prepare the sql template by iterating through all keys
for|for
control|(
name|K
name|key
range|:
name|cfInfo
operator|.
name|columns
control|)
block|{
name|colNames
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|cfInfo
operator|.
name|columnFamilyPrefix
argument_list|)
operator|.
name|append
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|cfInfo
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|colNames
return|;
block|}
DECL|method|setValuesForColumnFamily ( PreparedStatement ps, Map<K, V> keyValues, int startPos, boolean converToBytes)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|int
name|setValuesForColumnFamily
parameter_list|(
name|PreparedStatement
name|ps
parameter_list|,
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|keyValues
parameter_list|,
name|int
name|startPos
parameter_list|,
name|boolean
name|converToBytes
parameter_list|)
throws|throws
name|SQLException
block|{
name|int
name|idx
init|=
name|startPos
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|keyValues
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|V
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Collection
condition|)
block|{
name|ps
operator|.
name|setString
argument_list|(
name|idx
operator|++
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
operator|(
name|Collection
operator|)
name|value
argument_list|,
name|PHOENIX_STORAGE_SEPARATOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|converToBytes
condition|)
block|{
try|try
block|{
name|ps
operator|.
name|setBytes
argument_list|(
name|idx
operator|++
argument_list|,
name|GenericObjectMapper
operator|.
name|write
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in converting values into bytes "
operator|+
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SQLException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|ps
operator|.
name|setString
argument_list|(
name|idx
operator|++
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|idx
return|;
block|}
DECL|method|setBytesForColumnFamily ( PreparedStatement ps, Map<K, V> keyValues, int startPos)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|int
name|setBytesForColumnFamily
parameter_list|(
name|PreparedStatement
name|ps
parameter_list|,
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|keyValues
parameter_list|,
name|int
name|startPos
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|setValuesForColumnFamily
argument_list|(
name|ps
argument_list|,
name|keyValues
argument_list|,
name|startPos
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|setStringsForColumnFamily ( PreparedStatement ps, Map<K, V> keyValues, int startPos)
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|int
name|setStringsForColumnFamily
parameter_list|(
name|PreparedStatement
name|ps
parameter_list|,
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|keyValues
parameter_list|,
name|int
name|startPos
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|setValuesForColumnFamily
argument_list|(
name|ps
argument_list|,
name|keyValues
argument_list|,
name|startPos
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|setStringsForPrimaryKey (PreparedStatement ps, TimelineCollectorContext context, TimelineEntity entity, int startPos)
specifier|private
specifier|static
name|int
name|setStringsForPrimaryKey
parameter_list|(
name|PreparedStatement
name|ps
parameter_list|,
name|TimelineCollectorContext
name|context
parameter_list|,
name|TimelineEntity
name|entity
parameter_list|,
name|int
name|startPos
parameter_list|)
throws|throws
name|SQLException
block|{
name|int
name|idx
init|=
name|startPos
decl_stmt|;
name|ps
operator|.
name|setString
argument_list|(
name|idx
operator|++
argument_list|,
name|context
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setString
argument_list|(
name|idx
operator|++
argument_list|,
name|context
operator|.
name|getUserId
argument_list|()
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setString
argument_list|(
name|idx
operator|++
argument_list|,
name|context
operator|.
name|getFlowName
argument_list|()
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setString
argument_list|(
name|idx
operator|++
argument_list|,
name|context
operator|.
name|getFlowVersion
argument_list|()
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setLong
argument_list|(
name|idx
operator|++
argument_list|,
name|context
operator|.
name|getFlowRunId
argument_list|()
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setString
argument_list|(
name|idx
operator|++
argument_list|,
name|context
operator|.
name|getAppId
argument_list|()
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setString
argument_list|(
name|idx
operator|++
argument_list|,
name|entity
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setString
argument_list|(
name|idx
operator|++
argument_list|,
name|entity
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|idx
return|;
block|}
DECL|method|storeEntityVariableLengthFields (TimelineEntity entity, TimelineCollectorContext context, Connection conn)
specifier|private
specifier|static
name|void
name|storeEntityVariableLengthFields
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|TimelineCollectorContext
name|context
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|SQLException
block|{
name|int
name|numPlaceholders
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|columnDefs
init|=
operator|new
name|StringBuilder
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
name|PHOENIX_STORAGE_PK_LIST
argument_list|,
literal|","
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|.
name|getConfigs
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|keySet
init|=
name|entity
operator|.
name|getConfigs
argument_list|()
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|appendColumnsSQL
argument_list|(
name|columnDefs
argument_list|,
operator|new
name|DynamicColumns
argument_list|<>
argument_list|(
name|CONFIG_COLUMN_FAMILY
argument_list|,
name|DynamicColumns
operator|.
name|COLUMN_FAMILY_TYPE_STRING
argument_list|,
name|keySet
argument_list|)
argument_list|)
expr_stmt|;
name|numPlaceholders
operator|+=
name|keySet
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|entity
operator|.
name|getInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|keySet
init|=
name|entity
operator|.
name|getInfo
argument_list|()
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|appendColumnsSQL
argument_list|(
name|columnDefs
argument_list|,
operator|new
name|DynamicColumns
argument_list|<>
argument_list|(
name|INFO_COLUMN_FAMILY
argument_list|,
name|DynamicColumns
operator|.
name|COLUMN_FAMILY_TYPE_BYTES
argument_list|,
name|keySet
argument_list|)
argument_list|)
expr_stmt|;
name|numPlaceholders
operator|+=
name|keySet
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|entity
operator|.
name|getIsRelatedToEntities
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|keySet
init|=
name|entity
operator|.
name|getIsRelatedToEntities
argument_list|()
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|appendColumnsSQL
argument_list|(
name|columnDefs
argument_list|,
operator|new
name|DynamicColumns
argument_list|<>
argument_list|(
name|IS_RELATED_TO_FAMILY
argument_list|,
name|DynamicColumns
operator|.
name|COLUMN_FAMILY_TYPE_STRING
argument_list|,
name|keySet
argument_list|)
argument_list|)
expr_stmt|;
name|numPlaceholders
operator|+=
name|keySet
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|entity
operator|.
name|getRelatesToEntities
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|keySet
init|=
name|entity
operator|.
name|getRelatesToEntities
argument_list|()
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|appendColumnsSQL
argument_list|(
name|columnDefs
argument_list|,
operator|new
name|DynamicColumns
argument_list|<>
argument_list|(
name|RELATES_TO_FAMILY
argument_list|,
name|DynamicColumns
operator|.
name|COLUMN_FAMILY_TYPE_STRING
argument_list|,
name|keySet
argument_list|)
argument_list|)
expr_stmt|;
name|numPlaceholders
operator|+=
name|keySet
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|numPlaceholders
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|StringBuilder
name|placeholders
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|placeholders
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"?,"
argument_list|,
name|PHOENIX_STORAGE_PK_LIST
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
comment|// numPlaceholders>= 1 now
name|placeholders
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|",?"
argument_list|,
name|numPlaceholders
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|sqlVariableLengthFields
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"UPSERT INTO "
argument_list|)
operator|.
name|append
argument_list|(
name|ENTITY_TABLE_NAME
argument_list|)
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
name|columnDefs
argument_list|)
operator|.
name|append
argument_list|(
literal|") VALUES("
argument_list|)
operator|.
name|append
argument_list|(
name|placeholders
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SQL statement for variable length fields: "
operator|+
name|sqlVariableLengthFields
argument_list|)
expr_stmt|;
block|}
comment|// Use try with resource statement for the prepared statement
try|try
init|(
name|PreparedStatement
name|psVariableLengthFields
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|sqlVariableLengthFields
argument_list|)
init|)
block|{
name|int
name|idx
init|=
name|setStringsForPrimaryKey
argument_list|(
name|psVariableLengthFields
argument_list|,
name|context
argument_list|,
name|entity
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|.
name|getConfigs
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|idx
operator|=
name|setStringsForColumnFamily
argument_list|(
name|psVariableLengthFields
argument_list|,
name|entity
operator|.
name|getConfigs
argument_list|()
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entity
operator|.
name|getInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|idx
operator|=
name|setBytesForColumnFamily
argument_list|(
name|psVariableLengthFields
argument_list|,
name|entity
operator|.
name|getInfo
argument_list|()
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entity
operator|.
name|getIsRelatedToEntities
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|idx
operator|=
name|setStringsForColumnFamily
argument_list|(
name|psVariableLengthFields
argument_list|,
name|entity
operator|.
name|getIsRelatedToEntities
argument_list|()
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entity
operator|.
name|getRelatesToEntities
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|idx
operator|=
name|setStringsForColumnFamily
argument_list|(
name|psVariableLengthFields
argument_list|,
name|entity
operator|.
name|getRelatesToEntities
argument_list|()
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
name|psVariableLengthFields
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|storeMetrics (TimelineEntity entity, TimelineCollectorContext context, Connection conn)
specifier|private
specifier|static
name|void
name|storeMetrics
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|TimelineCollectorContext
name|context
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|entity
operator|.
name|getMetrics
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Set
argument_list|<
name|TimelineMetric
argument_list|>
name|metrics
init|=
name|entity
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
for|for
control|(
name|TimelineMetric
name|metric
range|:
name|metrics
control|)
block|{
name|StringBuilder
name|sqlColumns
init|=
operator|new
name|StringBuilder
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
name|PHOENIX_STORAGE_PK_LIST
argument_list|,
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|sqlColumns
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
name|TIMELINE_METRIC_EXTRA_PK_LIST
argument_list|,
literal|","
argument_list|)
argument_list|)
expr_stmt|;
name|sqlColumns
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
literal|"singledata, time"
argument_list|)
expr_stmt|;
name|StringBuilder
name|placeholders
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|placeholders
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"?,"
argument_list|,
name|PHOENIX_STORAGE_PK_LIST
operator|.
name|length
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"?,"
argument_list|,
name|TIMELINE_METRIC_EXTRA_PK_LIST
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|placeholders
operator|.
name|append
argument_list|(
literal|"?, ?"
argument_list|)
expr_stmt|;
name|String
name|sqlMetric
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"UPSERT INTO "
argument_list|)
operator|.
name|append
argument_list|(
name|METRIC_TABLE_NAME
argument_list|)
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
name|sqlColumns
argument_list|)
operator|.
name|append
argument_list|(
literal|") VALUES("
argument_list|)
operator|.
name|append
argument_list|(
name|placeholders
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SQL statement for metric: "
operator|+
name|sqlMetric
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|PreparedStatement
name|psMetrics
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|sqlMetric
argument_list|)
init|)
block|{
if|if
condition|(
name|metric
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|TimelineMetric
operator|.
name|Type
operator|.
name|TIME_SERIES
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The incoming timeline metric contains time series data, "
operator|+
literal|"which is currently not supported by Phoenix storage. "
operator|+
literal|"Time series will be truncated. "
argument_list|)
expr_stmt|;
block|}
name|int
name|idx
init|=
name|setStringsForPrimaryKey
argument_list|(
name|psMetrics
argument_list|,
name|context
argument_list|,
name|entity
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|psMetrics
operator|.
name|setString
argument_list|(
name|idx
operator|++
argument_list|,
name|metric
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Number
argument_list|>
argument_list|>
name|currNumIter
init|=
name|metric
operator|.
name|getValues
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|currNumIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// TODO: support time series storage
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Number
argument_list|>
name|currEntry
init|=
name|currNumIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|psMetrics
operator|.
name|setBytes
argument_list|(
name|idx
operator|++
argument_list|,
name|GenericObjectMapper
operator|.
name|write
argument_list|(
name|currEntry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|psMetrics
operator|.
name|setLong
argument_list|(
name|idx
operator|++
argument_list|,
name|currEntry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|psMetrics
operator|.
name|setBytes
argument_list|(
name|idx
operator|++
argument_list|,
name|GenericObjectMapper
operator|.
name|write
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"The incoming metric contains an empty value set. "
argument_list|)
expr_stmt|;
block|}
name|psMetrics
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception on converting single data to bytes: "
operator|+
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SQLException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|storeEvents (TimelineEntity entity, TimelineCollectorContext context, Connection conn)
specifier|private
specifier|static
name|void
name|storeEvents
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|TimelineCollectorContext
name|context
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|entity
operator|.
name|getEvents
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Set
argument_list|<
name|TimelineEvent
argument_list|>
name|events
init|=
name|entity
operator|.
name|getEvents
argument_list|()
decl_stmt|;
for|for
control|(
name|TimelineEvent
name|event
range|:
name|events
control|)
block|{
comment|// We need this number to check if the incoming event's info field is empty
name|int
name|numPlaceholders
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|sqlColumns
init|=
operator|new
name|StringBuilder
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
name|PHOENIX_STORAGE_PK_LIST
argument_list|,
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|sqlColumns
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
name|TIMELINE_EVENT_EXTRA_PK_LIST
argument_list|,
literal|","
argument_list|)
argument_list|)
expr_stmt|;
name|appendColumnsSQL
argument_list|(
name|sqlColumns
argument_list|,
operator|new
name|DynamicColumns
argument_list|<>
argument_list|(
name|EVENT_INFO_COLUMN_FAMILY
argument_list|,
name|DynamicColumns
operator|.
name|COLUMN_FAMILY_TYPE_BYTES
argument_list|,
name|event
operator|.
name|getInfo
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|numPlaceholders
operator|+=
name|event
operator|.
name|getInfo
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|numPlaceholders
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|StringBuilder
name|placeholders
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|placeholders
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"?,"
argument_list|,
name|PHOENIX_STORAGE_PK_LIST
operator|.
name|length
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"?,"
argument_list|,
name|TIMELINE_EVENT_EXTRA_PK_LIST
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
comment|// numPlaceholders>= 1 now
name|placeholders
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|",?"
argument_list|,
name|numPlaceholders
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|sqlEvents
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"UPSERT INTO "
argument_list|)
operator|.
name|append
argument_list|(
name|EVENT_TABLE_NAME
argument_list|)
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
name|sqlColumns
argument_list|)
operator|.
name|append
argument_list|(
literal|") VALUES("
argument_list|)
operator|.
name|append
argument_list|(
name|placeholders
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SQL statement for events: "
operator|+
name|sqlEvents
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|PreparedStatement
name|psEvent
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|sqlEvents
argument_list|)
init|)
block|{
name|int
name|idx
init|=
name|setStringsForPrimaryKey
argument_list|(
name|psEvent
argument_list|,
name|context
argument_list|,
name|entity
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|psEvent
operator|.
name|setLong
argument_list|(
name|idx
operator|++
argument_list|,
name|event
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|psEvent
operator|.
name|setString
argument_list|(
name|idx
operator|++
argument_list|,
name|event
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|setBytesForColumnFamily
argument_list|(
name|psEvent
argument_list|,
name|event
operator|.
name|getInfo
argument_list|()
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|psEvent
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// WARNING: This method will permanently drop a table!
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|dropTable (String tableName)
name|void
name|dropTable
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|conn
init|=
name|getConnection
argument_list|()
init|;
name|Statement
name|stmt
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|String
name|sql
init|=
literal|"DROP TABLE "
operator|+
name|tableName
decl_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed in dropping entity table "
operator|+
name|se
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|se
throw|;
block|}
block|}
block|}
end_class

end_unit

