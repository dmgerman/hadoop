begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|collector
operator|.
name|TimelineCollectorContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_comment
comment|/**  * Class to carry the offline aggregation information for storage level  * implementations. There are currently two predefined aggregation info  * instances that represent flow and user level offline aggregations. Depend on  * its implementation, a storage class may use an OfflineAggregationInfo object  * to decide behaviors dynamically.  */
end_comment

begin_class
DECL|class|OfflineAggregationInfo
specifier|public
specifier|final
class|class
name|OfflineAggregationInfo
block|{
comment|/**    * Default flow level aggregation table name    */
annotation|@
name|VisibleForTesting
DECL|field|FLOW_AGGREGATION_TABLE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|FLOW_AGGREGATION_TABLE_NAME
init|=
literal|"yarn_timeline_flow_aggregation"
decl_stmt|;
comment|/**    * Default user level aggregation table name    */
DECL|field|USER_AGGREGATION_TABLE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|USER_AGGREGATION_TABLE_NAME
init|=
literal|"yarn_timeline_user_aggregation"
decl_stmt|;
comment|// These lists are not taking effects in table creations.
DECL|field|FLOW_AGGREGATION_PK_LIST
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|FLOW_AGGREGATION_PK_LIST
init|=
block|{
literal|"user"
block|,
literal|"cluster"
block|,
literal|"flow_name"
block|}
decl_stmt|;
DECL|field|USER_AGGREGATION_PK_LIST
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|USER_AGGREGATION_PK_LIST
init|=
block|{
literal|"user"
block|,
literal|"cluster"
block|}
decl_stmt|;
DECL|field|tableName
specifier|private
specifier|final
name|String
name|tableName
decl_stmt|;
DECL|field|primaryKeyList
specifier|private
specifier|final
name|String
index|[]
name|primaryKeyList
decl_stmt|;
DECL|field|primaryKeyStringSetter
specifier|private
specifier|final
name|PrimaryKeyStringSetter
name|primaryKeyStringSetter
decl_stmt|;
DECL|method|OfflineAggregationInfo (String table, String[] pkList, PrimaryKeyStringSetter formatter)
specifier|private
name|OfflineAggregationInfo
parameter_list|(
name|String
name|table
parameter_list|,
name|String
index|[]
name|pkList
parameter_list|,
name|PrimaryKeyStringSetter
name|formatter
parameter_list|)
block|{
name|tableName
operator|=
name|table
expr_stmt|;
name|primaryKeyList
operator|=
name|pkList
expr_stmt|;
name|primaryKeyStringSetter
operator|=
name|formatter
expr_stmt|;
block|}
DECL|interface|PrimaryKeyStringSetter
specifier|private
interface|interface
name|PrimaryKeyStringSetter
block|{
DECL|method|setValues (PreparedStatement ps, TimelineCollectorContext context, String[] extraInfo, int startPos)
name|int
name|setValues
parameter_list|(
name|PreparedStatement
name|ps
parameter_list|,
name|TimelineCollectorContext
name|context
parameter_list|,
name|String
index|[]
name|extraInfo
parameter_list|,
name|int
name|startPos
parameter_list|)
throws|throws
name|SQLException
function_decl|;
block|}
DECL|method|getTableName ()
specifier|public
name|String
name|getTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
DECL|method|getPrimaryKeyList ()
specifier|public
name|String
index|[]
name|getPrimaryKeyList
parameter_list|()
block|{
return|return
name|primaryKeyList
operator|.
name|clone
argument_list|()
return|;
block|}
DECL|method|setStringsForPrimaryKey (PreparedStatement ps, TimelineCollectorContext context, String[] extraInfo, int startPos)
specifier|public
name|int
name|setStringsForPrimaryKey
parameter_list|(
name|PreparedStatement
name|ps
parameter_list|,
name|TimelineCollectorContext
name|context
parameter_list|,
name|String
index|[]
name|extraInfo
parameter_list|,
name|int
name|startPos
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|primaryKeyStringSetter
operator|.
name|setValues
argument_list|(
name|ps
argument_list|,
name|context
argument_list|,
name|extraInfo
argument_list|,
name|startPos
argument_list|)
return|;
block|}
DECL|field|FLOW_AGGREGATION
specifier|public
specifier|static
specifier|final
name|OfflineAggregationInfo
name|FLOW_AGGREGATION
init|=
operator|new
name|OfflineAggregationInfo
argument_list|(
name|FLOW_AGGREGATION_TABLE_NAME
argument_list|,
name|FLOW_AGGREGATION_PK_LIST
argument_list|,
operator|new
name|PrimaryKeyStringSetter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|setValues
parameter_list|(
name|PreparedStatement
name|ps
parameter_list|,
name|TimelineCollectorContext
name|context
parameter_list|,
name|String
index|[]
name|extraInfo
parameter_list|,
name|int
name|startPos
parameter_list|)
throws|throws
name|SQLException
block|{
name|int
name|idx
init|=
name|startPos
decl_stmt|;
name|ps
operator|.
name|setString
argument_list|(
name|idx
operator|++
argument_list|,
name|context
operator|.
name|getUserId
argument_list|()
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setString
argument_list|(
name|idx
operator|++
argument_list|,
name|context
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setString
argument_list|(
name|idx
operator|++
argument_list|,
name|context
operator|.
name|getFlowName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|idx
return|;
block|}
block|}
argument_list|)
decl_stmt|;
DECL|field|USER_AGGREGATION
specifier|public
specifier|static
specifier|final
name|OfflineAggregationInfo
name|USER_AGGREGATION
init|=
operator|new
name|OfflineAggregationInfo
argument_list|(
name|USER_AGGREGATION_TABLE_NAME
argument_list|,
name|USER_AGGREGATION_PK_LIST
argument_list|,
operator|new
name|PrimaryKeyStringSetter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|setValues
parameter_list|(
name|PreparedStatement
name|ps
parameter_list|,
name|TimelineCollectorContext
name|context
parameter_list|,
name|String
index|[]
name|extraInfo
parameter_list|,
name|int
name|startPos
parameter_list|)
throws|throws
name|SQLException
block|{
name|int
name|idx
init|=
name|startPos
decl_stmt|;
name|ps
operator|.
name|setString
argument_list|(
name|idx
operator|++
argument_list|,
name|context
operator|.
name|getUserId
argument_list|()
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setString
argument_list|(
name|idx
operator|++
argument_list|,
name|context
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|idx
return|;
block|}
block|}
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

