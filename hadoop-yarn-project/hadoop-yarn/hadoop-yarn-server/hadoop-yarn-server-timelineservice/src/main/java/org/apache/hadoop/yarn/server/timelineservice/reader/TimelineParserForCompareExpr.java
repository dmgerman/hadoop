begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.reader
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineCompareFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineCompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineFilterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineFilterList
operator|.
name|Operator
import|;
end_import

begin_comment
comment|/**  * Abstract class for parsing compare expressions.  * Compare expressions are of the form :  * (&lt;key&gt;&lt;compareop&gt;&lt;value&gt;)&lt;op&gt; (&lt;key  *&gt;&lt;compareop&gt;&lt;value&gt;)  * compareop is used to compare value of a the specified key in the backend  * storage. compareop can be :  * 1. eq - Equals  * 2. ne - Not equals (matches if key does not exist)  * 3. ene - Exists and not equals (key must exist for match to occur)  * 4. lt - Less than  * 5. gt - Greater than  * 6. le - Less than or equals  * 7. ge - Greater than or equals  * compareop's supported would depend on implementation. For instance, all  * the above compareops' will be supported for metric filters but only eq,ne and  * ene would be supported for KV filters like config/info filters.  *  * op is a logical operator and can be either AND or OR.  *  * The way values will be interpreted would also depend on implementation  *  * A typical compare expression would look as under:  * ((key1 eq val1 OR key2 ne val2) AND (key5 gt val45))  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|TimelineParserForCompareExpr
specifier|abstract
class|class
name|TimelineParserForCompareExpr
implements|implements
name|TimelineParser
block|{
DECL|enum|ParseState
specifier|private
enum|enum
name|ParseState
block|{
DECL|enumConstant|PARSING_KEY
name|PARSING_KEY
block|,
DECL|enumConstant|PARSING_VALUE
name|PARSING_VALUE
block|,
DECL|enumConstant|PARSING_OP
name|PARSING_OP
block|,
DECL|enumConstant|PARSING_COMPAREOP
name|PARSING_COMPAREOP
block|}
comment|// Main expression.
DECL|field|expr
specifier|private
specifier|final
name|String
name|expr
decl_stmt|;
comment|// Expression in lower case.
DECL|field|exprInLowerCase
specifier|private
specifier|final
name|String
name|exprInLowerCase
decl_stmt|;
DECL|field|exprName
specifier|private
specifier|final
name|String
name|exprName
decl_stmt|;
DECL|field|offset
specifier|private
name|int
name|offset
init|=
literal|0
decl_stmt|;
DECL|field|kvStartOffset
specifier|private
name|int
name|kvStartOffset
init|=
literal|0
decl_stmt|;
DECL|field|exprLength
specifier|private
specifier|final
name|int
name|exprLength
decl_stmt|;
DECL|field|currentParseState
specifier|private
name|ParseState
name|currentParseState
init|=
name|ParseState
operator|.
name|PARSING_KEY
decl_stmt|;
comment|// Linked list implemented as a stack.
DECL|field|filterListStack
specifier|private
name|Deque
argument_list|<
name|TimelineFilterList
argument_list|>
name|filterListStack
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|currentFilter
specifier|private
name|TimelineFilter
name|currentFilter
init|=
literal|null
decl_stmt|;
DECL|field|filterList
specifier|private
name|TimelineFilterList
name|filterList
init|=
literal|null
decl_stmt|;
DECL|method|TimelineParserForCompareExpr (String expression, String name)
specifier|public
name|TimelineParserForCompareExpr
parameter_list|(
name|String
name|expression
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|!=
literal|null
condition|)
block|{
name|expr
operator|=
name|expression
operator|.
name|trim
argument_list|()
expr_stmt|;
name|exprLength
operator|=
name|expr
operator|.
name|length
argument_list|()
expr_stmt|;
name|exprInLowerCase
operator|=
name|expr
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|expr
operator|=
literal|null
expr_stmt|;
name|exprInLowerCase
operator|=
literal|null
expr_stmt|;
name|exprLength
operator|=
literal|0
expr_stmt|;
block|}
name|this
operator|.
name|exprName
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getCurrentFilter ()
specifier|protected
name|TimelineFilter
name|getCurrentFilter
parameter_list|()
block|{
return|return
name|currentFilter
return|;
block|}
DECL|method|getFilterList ()
specifier|protected
name|TimelineFilter
name|getFilterList
parameter_list|()
block|{
return|return
name|filterList
return|;
block|}
DECL|method|createFilter ()
specifier|protected
specifier|abstract
name|TimelineFilter
name|createFilter
parameter_list|()
function_decl|;
DECL|method|parseValue (String strValue)
specifier|protected
specifier|abstract
name|Object
name|parseValue
parameter_list|(
name|String
name|strValue
parameter_list|)
throws|throws
name|TimelineParseException
function_decl|;
DECL|method|setCompareOpToCurrentFilter ( TimelineCompareOp compareOp, boolean keyMustExistFlag)
specifier|protected
specifier|abstract
name|void
name|setCompareOpToCurrentFilter
parameter_list|(
name|TimelineCompareOp
name|compareOp
parameter_list|,
name|boolean
name|keyMustExistFlag
parameter_list|)
throws|throws
name|TimelineParseException
function_decl|;
DECL|method|setValueToCurrentFilter (Object value)
specifier|protected
specifier|abstract
name|void
name|setValueToCurrentFilter
parameter_list|(
name|Object
name|value
parameter_list|)
function_decl|;
DECL|method|handleSpaceChar ()
specifier|private
name|void
name|handleSpaceChar
parameter_list|()
throws|throws
name|TimelineParseException
block|{
if|if
condition|(
name|currentParseState
operator|==
name|ParseState
operator|.
name|PARSING_KEY
operator|||
name|currentParseState
operator|==
name|ParseState
operator|.
name|PARSING_VALUE
condition|)
block|{
if|if
condition|(
name|kvStartOffset
operator|==
name|offset
condition|)
block|{
name|kvStartOffset
operator|++
expr_stmt|;
name|offset
operator|++
expr_stmt|;
return|return;
block|}
name|String
name|str
init|=
name|expr
operator|.
name|substring
argument_list|(
name|kvStartOffset
argument_list|,
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentParseState
operator|==
name|ParseState
operator|.
name|PARSING_KEY
condition|)
block|{
if|if
condition|(
name|currentFilter
operator|==
literal|null
condition|)
block|{
name|currentFilter
operator|=
name|createFilter
argument_list|()
expr_stmt|;
block|}
operator|(
operator|(
name|TimelineCompareFilter
operator|)
name|currentFilter
operator|)
operator|.
name|setKey
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|currentParseState
operator|=
name|ParseState
operator|.
name|PARSING_COMPAREOP
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentParseState
operator|==
name|ParseState
operator|.
name|PARSING_VALUE
condition|)
block|{
if|if
condition|(
name|currentFilter
operator|!=
literal|null
condition|)
block|{
name|setValueToCurrentFilter
argument_list|(
name|parseValue
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|currentParseState
operator|=
name|ParseState
operator|.
name|PARSING_OP
expr_stmt|;
block|}
block|}
name|offset
operator|++
expr_stmt|;
block|}
DECL|method|handleOpeningBracketChar ()
specifier|private
name|void
name|handleOpeningBracketChar
parameter_list|()
throws|throws
name|TimelineParseException
block|{
if|if
condition|(
name|currentParseState
operator|!=
name|ParseState
operator|.
name|PARSING_KEY
condition|)
block|{
throw|throw
operator|new
name|TimelineParseException
argument_list|(
literal|"Encountered unexpected opening "
operator|+
literal|"bracket while parsing "
operator|+
name|exprName
operator|+
literal|"."
argument_list|)
throw|;
block|}
name|offset
operator|++
expr_stmt|;
name|kvStartOffset
operator|=
name|offset
expr_stmt|;
name|filterListStack
operator|.
name|push
argument_list|(
name|filterList
argument_list|)
expr_stmt|;
name|filterList
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|handleClosingBracketChar ()
specifier|private
name|void
name|handleClosingBracketChar
parameter_list|()
throws|throws
name|TimelineParseException
block|{
if|if
condition|(
name|currentParseState
operator|!=
name|ParseState
operator|.
name|PARSING_VALUE
operator|&&
name|currentParseState
operator|!=
name|ParseState
operator|.
name|PARSING_OP
condition|)
block|{
throw|throw
operator|new
name|TimelineParseException
argument_list|(
literal|"Encountered unexpected closing "
operator|+
literal|"bracket while parsing "
operator|+
name|exprName
operator|+
literal|"."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|filterListStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|currentParseState
operator|==
name|ParseState
operator|.
name|PARSING_VALUE
condition|)
block|{
name|setValueToCurrentFilter
argument_list|(
name|parseValue
argument_list|(
name|expr
operator|.
name|substring
argument_list|(
name|kvStartOffset
argument_list|,
name|offset
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|currentParseState
operator|=
name|ParseState
operator|.
name|PARSING_OP
expr_stmt|;
block|}
if|if
condition|(
name|currentFilter
operator|!=
literal|null
condition|)
block|{
name|filterList
operator|.
name|addFilter
argument_list|(
name|currentFilter
argument_list|)
expr_stmt|;
block|}
comment|// As bracket is closing, pop the filter list from top of the stack and
comment|// combine it with current filter list.
name|TimelineFilterList
name|fList
init|=
name|filterListStack
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|fList
operator|!=
literal|null
condition|)
block|{
name|fList
operator|.
name|addFilter
argument_list|(
name|filterList
argument_list|)
expr_stmt|;
name|filterList
operator|=
name|fList
expr_stmt|;
block|}
name|currentFilter
operator|=
literal|null
expr_stmt|;
name|offset
operator|++
expr_stmt|;
name|kvStartOffset
operator|=
name|offset
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|TimelineParseException
argument_list|(
literal|"Encountered unexpected closing "
operator|+
literal|"bracket while parsing "
operator|+
name|exprName
operator|+
literal|"."
argument_list|)
throw|;
block|}
block|}
DECL|method|parseCompareOp ()
specifier|private
name|void
name|parseCompareOp
parameter_list|()
throws|throws
name|TimelineParseException
block|{
if|if
condition|(
name|offset
operator|+
literal|2
operator|>=
name|exprLength
condition|)
block|{
throw|throw
operator|new
name|TimelineParseException
argument_list|(
literal|"Compare op cannot be parsed for "
operator|+
name|exprName
operator|+
literal|"."
argument_list|)
throw|;
block|}
name|TimelineCompareOp
name|compareOp
init|=
literal|null
decl_stmt|;
name|boolean
name|keyExistFlag
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|expr
operator|.
name|charAt
argument_list|(
name|offset
operator|+
literal|2
argument_list|)
operator|==
name|TimelineParseConstants
operator|.
name|SPACE_CHAR
condition|)
block|{
if|if
condition|(
name|exprInLowerCase
operator|.
name|startsWith
argument_list|(
literal|"eq"
argument_list|,
name|offset
argument_list|)
condition|)
block|{
name|compareOp
operator|=
name|TimelineCompareOp
operator|.
name|EQUAL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exprInLowerCase
operator|.
name|startsWith
argument_list|(
literal|"ne"
argument_list|,
name|offset
argument_list|)
condition|)
block|{
name|compareOp
operator|=
name|TimelineCompareOp
operator|.
name|NOT_EQUAL
expr_stmt|;
name|keyExistFlag
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exprInLowerCase
operator|.
name|startsWith
argument_list|(
literal|"lt"
argument_list|,
name|offset
argument_list|)
condition|)
block|{
name|compareOp
operator|=
name|TimelineCompareOp
operator|.
name|LESS_THAN
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exprInLowerCase
operator|.
name|startsWith
argument_list|(
literal|"le"
argument_list|,
name|offset
argument_list|)
condition|)
block|{
name|compareOp
operator|=
name|TimelineCompareOp
operator|.
name|LESS_OR_EQUAL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exprInLowerCase
operator|.
name|startsWith
argument_list|(
literal|"gt"
argument_list|,
name|offset
argument_list|)
condition|)
block|{
name|compareOp
operator|=
name|TimelineCompareOp
operator|.
name|GREATER_THAN
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exprInLowerCase
operator|.
name|startsWith
argument_list|(
literal|"ge"
argument_list|,
name|offset
argument_list|)
condition|)
block|{
name|compareOp
operator|=
name|TimelineCompareOp
operator|.
name|GREATER_OR_EQUAL
expr_stmt|;
block|}
name|offset
operator|=
name|offset
operator|+
literal|3
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exprInLowerCase
operator|.
name|startsWith
argument_list|(
literal|"ene "
argument_list|,
name|offset
argument_list|)
condition|)
block|{
comment|// Not equal but key should be present.
name|compareOp
operator|=
name|TimelineCompareOp
operator|.
name|NOT_EQUAL
expr_stmt|;
name|offset
operator|=
name|offset
operator|+
literal|4
expr_stmt|;
block|}
if|if
condition|(
name|compareOp
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TimelineParseException
argument_list|(
literal|"Compare op cannot be parsed for "
operator|+
name|exprName
operator|+
literal|"."
argument_list|)
throw|;
block|}
name|setCompareOpToCurrentFilter
argument_list|(
name|compareOp
argument_list|,
name|keyExistFlag
argument_list|)
expr_stmt|;
name|kvStartOffset
operator|=
name|offset
expr_stmt|;
name|currentParseState
operator|=
name|ParseState
operator|.
name|PARSING_VALUE
expr_stmt|;
block|}
DECL|method|parseOp (boolean closingBracket)
specifier|private
name|void
name|parseOp
parameter_list|(
name|boolean
name|closingBracket
parameter_list|)
throws|throws
name|TimelineParseException
block|{
name|Operator
name|operator
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|exprInLowerCase
operator|.
name|startsWith
argument_list|(
literal|"or "
argument_list|,
name|offset
argument_list|)
condition|)
block|{
name|operator
operator|=
name|Operator
operator|.
name|OR
expr_stmt|;
name|offset
operator|=
name|offset
operator|+
literal|3
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exprInLowerCase
operator|.
name|startsWith
argument_list|(
literal|"and "
argument_list|,
name|offset
argument_list|)
condition|)
block|{
name|operator
operator|=
name|Operator
operator|.
name|AND
expr_stmt|;
name|offset
operator|=
name|offset
operator|+
literal|4
expr_stmt|;
block|}
if|if
condition|(
name|operator
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TimelineParseException
argument_list|(
literal|"Operator cannot be parsed for "
operator|+
name|exprName
operator|+
literal|"."
argument_list|)
throw|;
block|}
if|if
condition|(
name|filterList
operator|==
literal|null
condition|)
block|{
name|filterList
operator|=
operator|new
name|TimelineFilterList
argument_list|(
name|operator
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|currentFilter
operator|!=
literal|null
condition|)
block|{
name|filterList
operator|.
name|addFilter
argument_list|(
name|currentFilter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|closingBracket
operator|||
name|filterList
operator|.
name|getOperator
argument_list|()
operator|!=
name|operator
condition|)
block|{
name|filterList
operator|=
operator|new
name|TimelineFilterList
argument_list|(
name|operator
argument_list|,
name|filterList
argument_list|)
expr_stmt|;
block|}
name|currentFilter
operator|=
literal|null
expr_stmt|;
name|kvStartOffset
operator|=
name|offset
expr_stmt|;
name|currentParseState
operator|=
name|ParseState
operator|.
name|PARSING_KEY
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parse ()
specifier|public
name|TimelineFilterList
name|parse
parameter_list|()
throws|throws
name|TimelineParseException
block|{
if|if
condition|(
name|expr
operator|==
literal|null
operator|||
name|exprLength
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|boolean
name|closingBracket
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|offset
operator|<
name|exprLength
condition|)
block|{
name|char
name|offsetChar
init|=
name|expr
operator|.
name|charAt
argument_list|(
name|offset
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|offsetChar
condition|)
block|{
case|case
name|TimelineParseConstants
operator|.
name|SPACE_CHAR
case|:
name|handleSpaceChar
argument_list|()
expr_stmt|;
break|break;
case|case
name|TimelineParseConstants
operator|.
name|OPENING_BRACKET_CHAR
case|:
name|handleOpeningBracketChar
argument_list|()
expr_stmt|;
break|break;
case|case
name|TimelineParseConstants
operator|.
name|CLOSING_BRACKET_CHAR
case|:
name|handleClosingBracketChar
argument_list|()
expr_stmt|;
name|closingBracket
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
comment|// other characters.
comment|// Parse based on state.
if|if
condition|(
name|currentParseState
operator|==
name|ParseState
operator|.
name|PARSING_COMPAREOP
condition|)
block|{
name|parseCompareOp
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentParseState
operator|==
name|ParseState
operator|.
name|PARSING_OP
condition|)
block|{
name|parseOp
argument_list|(
name|closingBracket
argument_list|)
expr_stmt|;
name|closingBracket
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|// Might be a key or value. Move ahead.
name|offset
operator|++
expr_stmt|;
block|}
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|filterListStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|filterListStack
operator|.
name|clear
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|TimelineParseException
argument_list|(
literal|"Encountered improper brackets while "
operator|+
literal|"parsing "
operator|+
name|exprName
operator|+
literal|"."
argument_list|)
throw|;
block|}
if|if
condition|(
name|currentParseState
operator|==
name|ParseState
operator|.
name|PARSING_VALUE
condition|)
block|{
name|setValueToCurrentFilter
argument_list|(
name|parseValue
argument_list|(
name|expr
operator|.
name|substring
argument_list|(
name|kvStartOffset
argument_list|,
name|offset
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filterList
operator|==
literal|null
operator|||
name|filterList
operator|.
name|getFilterList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|currentFilter
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TimelineParseException
argument_list|(
literal|"Invalid expression provided for "
operator|+
name|exprName
argument_list|)
throw|;
block|}
else|else
block|{
name|filterList
operator|=
operator|new
name|TimelineFilterList
argument_list|(
name|currentFilter
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|currentFilter
operator|!=
literal|null
condition|)
block|{
name|filterList
operator|.
name|addFilter
argument_list|(
name|currentFilter
argument_list|)
expr_stmt|;
block|}
return|return
name|filterList
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|filterListStack
operator|!=
literal|null
condition|)
block|{
name|filterListStack
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|filterList
operator|=
literal|null
expr_stmt|;
name|currentFilter
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

