begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.reader
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Used for encoding/decoding UID which will be used for query by UI.  */
end_comment

begin_enum
DECL|enum|TimelineUIDConverter
enum|enum
name|TimelineUIDConverter
block|{
comment|// Flow UID should contain cluster, user and flow name.
DECL|enumConstant|FLOW_UID
name|FLOW_UID
block|{
annotation|@
name|Override
name|String
name|encodeUID
parameter_list|(
name|TimelineReaderContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|context
operator|.
name|getClusterId
argument_list|()
operator|==
literal|null
operator|||
name|context
operator|.
name|getUserId
argument_list|()
operator|==
literal|null
operator|||
name|context
operator|.
name|getFlowName
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
index|[]
name|flowNameTupleArr
init|=
block|{
name|context
operator|.
name|getClusterId
argument_list|()
block|,
name|context
operator|.
name|getUserId
argument_list|()
block|,
name|context
operator|.
name|getFlowName
argument_list|()
block|}
decl_stmt|;
return|return
name|joinAndEscapeUIDParts
argument_list|(
name|flowNameTupleArr
argument_list|)
return|;
block|}
annotation|@
name|Override
name|TimelineReaderContext
name|decodeUID
parameter_list|(
name|String
name|uId
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|uId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|flowNameTupleList
init|=
name|splitUID
argument_list|(
name|uId
argument_list|)
decl_stmt|;
comment|// Should have 3 parts i.e. cluster, user and flow name.
if|if
condition|(
name|flowNameTupleList
operator|.
name|size
argument_list|()
operator|!=
literal|3
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|TimelineReaderContext
argument_list|(
name|flowNameTupleList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|flowNameTupleList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|flowNameTupleList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
block|,
comment|// Flowrun UID should contain cluster, user, flow name and flowrun id.
DECL|enumConstant|FLOWRUN_UID
name|FLOWRUN_UID
block|{
annotation|@
name|Override
name|String
name|encodeUID
parameter_list|(
name|TimelineReaderContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|context
operator|.
name|getClusterId
argument_list|()
operator|==
literal|null
operator|||
name|context
operator|.
name|getUserId
argument_list|()
operator|==
literal|null
operator|||
name|context
operator|.
name|getFlowName
argument_list|()
operator|==
literal|null
operator|||
name|context
operator|.
name|getFlowRunId
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
index|[]
name|flowRunTupleArr
init|=
block|{
name|context
operator|.
name|getClusterId
argument_list|()
block|,
name|context
operator|.
name|getUserId
argument_list|()
block|,
name|context
operator|.
name|getFlowName
argument_list|()
block|,
name|context
operator|.
name|getFlowRunId
argument_list|()
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
return|return
name|joinAndEscapeUIDParts
argument_list|(
name|flowRunTupleArr
argument_list|)
return|;
block|}
annotation|@
name|Override
name|TimelineReaderContext
name|decodeUID
parameter_list|(
name|String
name|uId
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|uId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|flowRunTupleList
init|=
name|splitUID
argument_list|(
name|uId
argument_list|)
decl_stmt|;
comment|// Should have 4 parts i.e. cluster, user, flow name and flowrun id.
if|if
condition|(
name|flowRunTupleList
operator|.
name|size
argument_list|()
operator|!=
literal|4
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|TimelineReaderContext
argument_list|(
name|flowRunTupleList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|flowRunTupleList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|flowRunTupleList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|flowRunTupleList
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
block|,
comment|// Application UID should contain cluster, user, flow name, flowrun id
comment|// and app id OR cluster and app id(i.e.without flow context info).
DECL|enumConstant|APPLICATION_UID
name|APPLICATION_UID
block|{
annotation|@
name|Override
name|String
name|encodeUID
parameter_list|(
name|TimelineReaderContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|context
operator|.
name|getClusterId
argument_list|()
operator|==
literal|null
operator|||
name|context
operator|.
name|getAppId
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|context
operator|.
name|getUserId
argument_list|()
operator|!=
literal|null
operator|&&
name|context
operator|.
name|getFlowName
argument_list|()
operator|!=
literal|null
operator|&&
name|context
operator|.
name|getFlowRunId
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Flow information exists.
name|String
index|[]
name|appTupleArr
init|=
block|{
name|context
operator|.
name|getClusterId
argument_list|()
block|,
name|context
operator|.
name|getUserId
argument_list|()
block|,
name|context
operator|.
name|getFlowName
argument_list|()
block|,
name|context
operator|.
name|getFlowRunId
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|context
operator|.
name|getAppId
argument_list|()
block|}
decl_stmt|;
return|return
name|joinAndEscapeUIDParts
argument_list|(
name|appTupleArr
argument_list|)
return|;
block|}
else|else
block|{
comment|// Only cluster and app information exists. Flow info does not exist.
name|String
index|[]
name|appTupleArr
init|=
block|{
name|context
operator|.
name|getClusterId
argument_list|()
block|,
name|context
operator|.
name|getAppId
argument_list|()
block|}
decl_stmt|;
return|return
name|joinAndEscapeUIDParts
argument_list|(
name|appTupleArr
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
name|TimelineReaderContext
name|decodeUID
parameter_list|(
name|String
name|uId
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|uId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|appTupleList
init|=
name|splitUID
argument_list|(
name|uId
argument_list|)
decl_stmt|;
comment|// Should have 5 parts i.e. cluster, user, flow name, flowrun id
comment|// and app id OR should have 2 parts i.e. cluster and app id.
if|if
condition|(
name|appTupleList
operator|.
name|size
argument_list|()
operator|==
literal|5
condition|)
block|{
comment|// Flow information exists.
return|return
operator|new
name|TimelineReaderContext
argument_list|(
name|appTupleList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|appTupleList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|appTupleList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|appTupleList
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|,
name|appTupleList
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|appTupleList
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
comment|// Flow information does not exist.
return|return
operator|new
name|TimelineReaderContext
argument_list|(
name|appTupleList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|appTupleList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
block|,
comment|// Generic Entity UID should contain cluster, user, flow name, flowrun id,
comment|// app id, entity type and entity id OR should contain cluster, appid, entity
comment|// type and entity id(i.e.without flow context info).
DECL|enumConstant|GENERIC_ENTITY_UID
name|GENERIC_ENTITY_UID
block|{
annotation|@
name|Override
name|String
name|encodeUID
parameter_list|(
name|TimelineReaderContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|context
operator|.
name|getClusterId
argument_list|()
operator|==
literal|null
operator|||
name|context
operator|.
name|getAppId
argument_list|()
operator|==
literal|null
operator|||
name|context
operator|.
name|getEntityType
argument_list|()
operator|==
literal|null
operator|||
name|context
operator|.
name|getEntityId
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|context
operator|.
name|getUserId
argument_list|()
operator|!=
literal|null
operator|&&
name|context
operator|.
name|getFlowName
argument_list|()
operator|!=
literal|null
operator|&&
name|context
operator|.
name|getFlowRunId
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Flow information exists.
name|String
index|[]
name|entityTupleArr
init|=
block|{
name|context
operator|.
name|getClusterId
argument_list|()
block|,
name|context
operator|.
name|getUserId
argument_list|()
block|,
name|context
operator|.
name|getFlowName
argument_list|()
block|,
name|context
operator|.
name|getFlowRunId
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|context
operator|.
name|getAppId
argument_list|()
block|,
name|context
operator|.
name|getEntityType
argument_list|()
block|,
name|context
operator|.
name|getEntityId
argument_list|()
block|}
decl_stmt|;
return|return
name|joinAndEscapeUIDParts
argument_list|(
name|entityTupleArr
argument_list|)
return|;
block|}
else|else
block|{
comment|// Only entity and app information exists. Flow info does not exist.
name|String
index|[]
name|entityTupleArr
init|=
block|{
name|context
operator|.
name|getClusterId
argument_list|()
block|,
name|context
operator|.
name|getAppId
argument_list|()
block|,
name|context
operator|.
name|getEntityType
argument_list|()
block|,
name|context
operator|.
name|getEntityId
argument_list|()
block|}
decl_stmt|;
return|return
name|joinAndEscapeUIDParts
argument_list|(
name|entityTupleArr
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
name|TimelineReaderContext
name|decodeUID
parameter_list|(
name|String
name|uId
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|uId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|entityTupleList
init|=
name|splitUID
argument_list|(
name|uId
argument_list|)
decl_stmt|;
comment|// Should have 7 parts i.e. cluster, user, flow name, flowrun id, app id,
comment|// entity type and entity id OR should have 4 parts i.e. cluster, app id,
comment|// entity type and entity id.
if|if
condition|(
name|entityTupleList
operator|.
name|size
argument_list|()
operator|==
literal|7
condition|)
block|{
comment|// Flow information exists.
return|return
operator|new
name|TimelineReaderContext
argument_list|(
name|entityTupleList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|entityTupleList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|entityTupleList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|entityTupleList
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|,
name|entityTupleList
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|entityTupleList
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
name|entityTupleList
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|entityTupleList
operator|.
name|size
argument_list|()
operator|==
literal|4
condition|)
block|{
comment|// Flow information does not exist.
return|return
operator|new
name|TimelineReaderContext
argument_list|(
name|entityTupleList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|entityTupleList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|entityTupleList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|entityTupleList
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
block|;
comment|/**    * Delimiter used for UID.    */
DECL|field|UID_DELIMITER_CHAR
specifier|public
specifier|static
specifier|final
name|char
name|UID_DELIMITER_CHAR
init|=
literal|'!'
decl_stmt|;
comment|/**    * Escape Character used if delimiter or escape character itself is part of    * different components of UID.    */
DECL|field|UID_ESCAPE_CHAR
specifier|public
specifier|static
specifier|final
name|char
name|UID_ESCAPE_CHAR
init|=
literal|'*'
decl_stmt|;
comment|/**    * Split UID using {@link #UID_DELIMITER_CHAR} and {@link #UID_ESCAPE_CHAR}.    * @param uid    * @return a list of different parts of UID split across delimiter.    * @throws IllegalArgumentException if UID is not properly escaped.    */
DECL|method|splitUID (String uid)
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|splitUID
parameter_list|(
name|String
name|uid
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
return|return
name|TimelineReaderUtils
operator|.
name|split
argument_list|(
name|uid
argument_list|,
name|UID_DELIMITER_CHAR
argument_list|,
name|UID_ESCAPE_CHAR
argument_list|)
return|;
block|}
comment|/**    * Join different parts of UID delimited by {@link #UID_DELIMITER_CHAR} with    * delimiter and escape character escaped using {@link #UID_ESCAPE_CHAR} if    * UID parts contain them.    * @param parts an array of UID parts to be joined.    * @return a string joined using the delimiter with escape and delimiter    *     characters escaped if they are part of the string parts to be joined.    *     Returns null if one of the parts is null.    */
DECL|method|joinAndEscapeUIDParts (String[] parts)
specifier|private
specifier|static
name|String
name|joinAndEscapeUIDParts
parameter_list|(
name|String
index|[]
name|parts
parameter_list|)
block|{
return|return
name|TimelineReaderUtils
operator|.
name|joinAndEscapeStrings
argument_list|(
name|parts
argument_list|,
name|UID_DELIMITER_CHAR
argument_list|,
name|UID_ESCAPE_CHAR
argument_list|)
return|;
block|}
comment|/**    * Encodes UID depending on UID implementation.    * @param context    * @return UID represented as a string.    */
DECL|method|encodeUID (TimelineReaderContext context)
specifier|abstract
name|String
name|encodeUID
parameter_list|(
name|TimelineReaderContext
name|context
parameter_list|)
function_decl|;
comment|/**    * Decodes UID depending on UID implementation.    * @param uId    * @return a {@link TimelineReaderContext} object if UID passed can be    * decoded, null otherwise.    * @throws Exception    */
DECL|method|decodeUID (String uId)
specifier|abstract
name|TimelineReaderContext
name|decodeUID
parameter_list|(
name|String
name|uId
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
end_enum

end_unit

