begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.reader
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineCompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineExistsFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineFilter
import|;
end_import

begin_comment
comment|/**  * Used for parsing existence filters such as event filters. These filters  * check for existence of a value. For example, in case of event filters, they  * check if an event exists or not and accordingly return an entity.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|TimelineParserForExistFilters
class|class
name|TimelineParserForExistFilters
extends|extends
name|TimelineParserForEqualityExpr
block|{
DECL|method|TimelineParserForExistFilters (String expression, char delimiter)
specifier|public
name|TimelineParserForExistFilters
parameter_list|(
name|String
name|expression
parameter_list|,
name|char
name|delimiter
parameter_list|)
block|{
name|super
argument_list|(
name|expression
argument_list|,
literal|"Event Filter"
argument_list|,
name|delimiter
argument_list|)
expr_stmt|;
block|}
DECL|method|createFilter ()
specifier|protected
name|TimelineFilter
name|createFilter
parameter_list|()
block|{
return|return
operator|new
name|TimelineExistsFilter
argument_list|()
return|;
block|}
DECL|method|setValueToCurrentFilter (String value)
specifier|protected
name|void
name|setValueToCurrentFilter
parameter_list|(
name|String
name|value
parameter_list|)
block|{
operator|(
operator|(
name|TimelineExistsFilter
operator|)
name|getCurrentFilter
argument_list|()
operator|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|setCompareOpToCurrentFilter (TimelineCompareOp compareOp)
specifier|protected
name|void
name|setCompareOpToCurrentFilter
parameter_list|(
name|TimelineCompareOp
name|compareOp
parameter_list|)
block|{
operator|(
operator|(
name|TimelineExistsFilter
operator|)
name|getCurrentFilter
argument_list|()
operator|)
operator|.
name|setCompareOp
argument_list|(
name|compareOp
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

