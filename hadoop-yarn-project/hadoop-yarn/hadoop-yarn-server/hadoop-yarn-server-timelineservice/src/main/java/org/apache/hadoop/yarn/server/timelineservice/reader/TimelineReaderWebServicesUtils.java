begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.reader
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|GenericObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|TimelineReader
operator|.
name|Field
import|;
end_import

begin_comment
comment|/**  * Set of utility methods to be used by timeline reader web services.  */
end_comment

begin_class
DECL|class|TimelineReaderWebServicesUtils
specifier|final
class|class
name|TimelineReaderWebServicesUtils
block|{
DECL|field|COMMA_DELIMITER
specifier|private
specifier|static
specifier|final
name|String
name|COMMA_DELIMITER
init|=
literal|","
decl_stmt|;
DECL|field|COLON_DELIMITER
specifier|private
specifier|static
specifier|final
name|String
name|COLON_DELIMITER
init|=
literal|":"
decl_stmt|;
DECL|method|TimelineReaderWebServicesUtils ()
specifier|private
name|TimelineReaderWebServicesUtils
parameter_list|()
block|{   }
comment|/**    * Parse the passed context information represented as strings and convert    * into a {@link TimelineReaderContext} object.    * @param clusterId Cluster Id.    * @param userId User Id.    * @param flowName Flow Name.    * @param flowRunId Run id for the flow.    * @param appId App Id.    * @param entityType Entity Type.    * @param entityId Entity Id.    * @return a {@link TimelineReaderContext} object.    * @throws Exception if any problem occurs during parsing.    */
DECL|method|createTimelineReaderContext (String clusterId, String userId, String flowName, String flowRunId, String appId, String entityType, String entityId)
specifier|static
name|TimelineReaderContext
name|createTimelineReaderContext
parameter_list|(
name|String
name|clusterId
parameter_list|,
name|String
name|userId
parameter_list|,
name|String
name|flowName
parameter_list|,
name|String
name|flowRunId
parameter_list|,
name|String
name|appId
parameter_list|,
name|String
name|entityType
parameter_list|,
name|String
name|entityId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|TimelineReaderContext
argument_list|(
name|parseStr
argument_list|(
name|clusterId
argument_list|)
argument_list|,
name|parseStr
argument_list|(
name|userId
argument_list|)
argument_list|,
name|parseStr
argument_list|(
name|flowName
argument_list|)
argument_list|,
name|parseLongStr
argument_list|(
name|flowRunId
argument_list|)
argument_list|,
name|parseStr
argument_list|(
name|appId
argument_list|)
argument_list|,
name|parseStr
argument_list|(
name|entityType
argument_list|)
argument_list|,
name|parseStr
argument_list|(
name|entityId
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Parse the passed filters represented as strings and convert them into a    * {@link TimelineEntityFilters} object.    * @param limit Limit to number of entities to return.    * @param createdTimeStart Created time start for the entities to return.    * @param createdTimeEnd Created time end for the entities to return.    * @param relatesTo Entities to return must match relatesTo.    * @param isRelatedTo Entities to return must match isRelatedTo.    * @param infofilters Entities to return must match these info filters.    * @param conffilters Entities to return must match these metric filters.    * @param metricfilters Entities to return must match these metric filters.    * @param eventfilters Entities to return must match these event filters.    * @return a {@link TimelineEntityFilters} object.    * @throws Exception if any problem occurs during parsing.    */
DECL|method|createTimelineEntityFilters (String limit, String createdTimeStart, String createdTimeEnd, String relatesTo, String isRelatedTo, String infofilters, String conffilters, String metricfilters, String eventfilters)
specifier|static
name|TimelineEntityFilters
name|createTimelineEntityFilters
parameter_list|(
name|String
name|limit
parameter_list|,
name|String
name|createdTimeStart
parameter_list|,
name|String
name|createdTimeEnd
parameter_list|,
name|String
name|relatesTo
parameter_list|,
name|String
name|isRelatedTo
parameter_list|,
name|String
name|infofilters
parameter_list|,
name|String
name|conffilters
parameter_list|,
name|String
name|metricfilters
parameter_list|,
name|String
name|eventfilters
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|TimelineEntityFilters
argument_list|(
name|parseLongStr
argument_list|(
name|limit
argument_list|)
argument_list|,
name|parseLongStr
argument_list|(
name|createdTimeStart
argument_list|)
argument_list|,
name|parseLongStr
argument_list|(
name|createdTimeEnd
argument_list|)
argument_list|,
name|parseKeyStrValuesStr
argument_list|(
name|relatesTo
argument_list|,
name|COMMA_DELIMITER
argument_list|,
name|COLON_DELIMITER
argument_list|)
argument_list|,
name|parseKeyStrValuesStr
argument_list|(
name|isRelatedTo
argument_list|,
name|COMMA_DELIMITER
argument_list|,
name|COLON_DELIMITER
argument_list|)
argument_list|,
name|parseKeyStrValueObj
argument_list|(
name|infofilters
argument_list|,
name|COMMA_DELIMITER
argument_list|,
name|COLON_DELIMITER
argument_list|)
argument_list|,
name|parseKeyStrValueStr
argument_list|(
name|conffilters
argument_list|,
name|COMMA_DELIMITER
argument_list|,
name|COLON_DELIMITER
argument_list|)
argument_list|,
name|parseValuesStr
argument_list|(
name|metricfilters
argument_list|,
name|COMMA_DELIMITER
argument_list|)
argument_list|,
name|parseValuesStr
argument_list|(
name|eventfilters
argument_list|,
name|COMMA_DELIMITER
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Parse the passed fields represented as strings and convert them into a    * {@link TimelineDataToRetrieve} object.    * @param confs confs to retrieve.    * @param metrics metrics to retrieve.    * @param fields fields to retrieve.    * @return a {@link TimelineDataToRetrieve} object.    * @throws Exception if any problem occurs during parsing.    */
DECL|method|createTimelineDataToRetrieve (String confs, String metrics, String fields)
specifier|static
name|TimelineDataToRetrieve
name|createTimelineDataToRetrieve
parameter_list|(
name|String
name|confs
parameter_list|,
name|String
name|metrics
parameter_list|,
name|String
name|fields
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|TimelineDataToRetrieve
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|parseFieldsStr
argument_list|(
name|fields
argument_list|,
name|COMMA_DELIMITER
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Parse a delimited string and convert it into a set of strings. For    * instance, if delimiter is ",", then the string should be represented as    * "value1,value2,value3".    * @param str delimited string.    * @param delimiter string is delimited by this delimiter.    * @return set of strings.    */
DECL|method|parseValuesStr (String str, String delimiter)
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|parseValuesStr
parameter_list|(
name|String
name|str
parameter_list|,
name|String
name|delimiter
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
operator|||
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|strSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|strs
init|=
name|str
operator|.
name|split
argument_list|(
name|delimiter
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|aStr
range|:
name|strs
control|)
block|{
name|strSet
operator|.
name|add
argument_list|(
name|aStr
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|strSet
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|parseKeyValues (Map<String, T> map, String str, String pairsDelim, String keyValuesDelim, boolean stringValue, boolean multipleValues)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|parseKeyValues
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|map
parameter_list|,
name|String
name|str
parameter_list|,
name|String
name|pairsDelim
parameter_list|,
name|String
name|keyValuesDelim
parameter_list|,
name|boolean
name|stringValue
parameter_list|,
name|boolean
name|multipleValues
parameter_list|)
block|{
name|String
index|[]
name|pairs
init|=
name|str
operator|.
name|split
argument_list|(
name|pairsDelim
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pair
range|:
name|pairs
control|)
block|{
if|if
condition|(
name|pair
operator|==
literal|null
operator|||
name|pair
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|String
index|[]
name|pairStrs
init|=
name|pair
operator|.
name|split
argument_list|(
name|keyValuesDelim
argument_list|)
decl_stmt|;
if|if
condition|(
name|pairStrs
operator|.
name|length
operator|<
literal|2
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|stringValue
condition|)
block|{
try|try
block|{
name|Object
name|value
init|=
name|GenericObjectMapper
operator|.
name|OBJECT_READER
operator|.
name|readValue
argument_list|(
name|pairStrs
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|pairStrs
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
argument_list|,
operator|(
name|T
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|map
operator|.
name|put
argument_list|(
name|pairStrs
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
argument_list|,
operator|(
name|T
operator|)
name|pairStrs
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|key
init|=
name|pairStrs
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|multipleValues
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pairStrs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|pairStrs
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|(
name|T
operator|)
name|values
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|(
name|T
operator|)
name|pairStrs
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Parse a delimited string and convert it into a map of key-values with each    * key having a set of values. Both the key and values are interpreted as    * strings.    * For instance, if pairsDelim is "," and keyValuesDelim is ":", then the    * string should be represented as    * "key1:value11:value12:value13,key2:value21,key3:value31:value32".    * @param str delimited string represented as multiple keys having multiple    *     values.    * @param pairsDelim key-values pairs are delimited by this delimiter.    * @param keyValuesDelim values for a key are delimited by this delimiter.    * @return a map of key-values with each key having a set of values.    */
DECL|method|parseKeyStrValuesStr (String str, String pairsDelim, String keyValuesDelim)
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|parseKeyStrValuesStr
parameter_list|(
name|String
name|str
parameter_list|,
name|String
name|pairsDelim
parameter_list|,
name|String
name|keyValuesDelim
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|parseKeyValues
argument_list|(
name|map
argument_list|,
name|str
argument_list|,
name|pairsDelim
argument_list|,
name|keyValuesDelim
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
comment|/**    * Parse a delimited string and convert it into a map of key-value pairs with    * both the key and value interpreted as strings.    * For instance, if pairsDelim is "," and keyValDelim is ":", then the string    * should be represented as "key1:value1,key2:value2,key3:value3".    * @param str delimited string represented as key-value pairs.    * @param pairsDelim key-value pairs are delimited by this delimiter.    * @param keyValDelim key and value are delimited by this delimiter.    * @return a map of key-value pairs with both key and value being strings.    */
DECL|method|parseKeyStrValueStr (String str, String pairsDelim, String keyValDelim)
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parseKeyStrValueStr
parameter_list|(
name|String
name|str
parameter_list|,
name|String
name|pairsDelim
parameter_list|,
name|String
name|keyValDelim
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|parseKeyValues
argument_list|(
name|map
argument_list|,
name|str
argument_list|,
name|pairsDelim
argument_list|,
name|keyValDelim
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
comment|/**    * Parse a delimited string and convert it into a map of key-value pairs with    * key being a string and value interpreted as any object.    * For instance, if pairsDelim is "," and keyValDelim is ":", then the string    * should be represented as "key1:value1,key2:value2,key3:value3".    * @param str delimited string represented as key-value pairs.    * @param pairsDelim key-value pairs are delimited by this delimiter.    * @param keyValDelim key and value are delimited by this delimiter.    * @return a map of key-value pairs with key being a string and value, any    *     object.    */
DECL|method|parseKeyStrValueObj (String str, String pairsDelim, String keyValDelim)
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parseKeyStrValueObj
parameter_list|(
name|String
name|str
parameter_list|,
name|String
name|pairsDelim
parameter_list|,
name|String
name|keyValDelim
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|parseKeyValues
argument_list|(
name|map
argument_list|,
name|str
argument_list|,
name|pairsDelim
argument_list|,
name|keyValDelim
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
comment|/**    * Interprets passed string as set of fields delimited by passed delimiter.    * For instance, if delimiter is ",", then the passed string should be    * represented as "METRICS,CONFIGS" where the delimited parts of the string    * present in {@link Field}.    * @param str passed string.    * @param delimiter string delimiter.    * @return a set of {@link Field}.    */
DECL|method|parseFieldsStr (String str, String delimiter)
specifier|static
name|EnumSet
argument_list|<
name|Field
argument_list|>
name|parseFieldsStr
parameter_list|(
name|String
name|str
parameter_list|,
name|String
name|delimiter
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
index|[]
name|strs
init|=
name|str
operator|.
name|split
argument_list|(
name|delimiter
argument_list|)
decl_stmt|;
name|EnumSet
argument_list|<
name|Field
argument_list|>
name|fieldList
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Field
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|strs
control|)
block|{
name|fieldList
operator|.
name|add
argument_list|(
name|Field
operator|.
name|valueOf
argument_list|(
name|s
operator|.
name|trim
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|fieldList
return|;
block|}
comment|/**    * Interpret passed string as a long.    * @param str Passed string.    * @return long representation if string is not null, null otherwise.    */
DECL|method|parseLongStr (String str)
specifier|static
name|Long
name|parseLongStr
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|str
operator|==
literal|null
condition|?
literal|null
else|:
name|Long
operator|.
name|parseLong
argument_list|(
name|str
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Trims the passed string if its not null.    * @param str Passed string.    * @return trimmed string if string is not null, null otherwise.    */
DECL|method|parseStr (String str)
specifier|static
name|String
name|parseStr
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|str
operator|==
literal|null
condition|?
literal|null
else|:
name|str
operator|.
name|trim
argument_list|()
return|;
block|}
comment|/**    * Get UGI from HTTP request.    * @param req HTTP request.    * @return UGI.    */
DECL|method|getUser (HttpServletRequest req)
specifier|static
name|UserGroupInformation
name|getUser
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
name|String
name|remoteUser
init|=
name|req
operator|.
name|getRemoteUser
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|remoteUser
operator|!=
literal|null
condition|)
block|{
name|callerUGI
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|remoteUser
argument_list|)
expr_stmt|;
block|}
return|return
name|callerUGI
return|;
block|}
comment|/**    * Get username from caller UGI.    * @param callerUGI caller UGI.    * @return username.    */
DECL|method|getUserName (UserGroupInformation callerUGI)
specifier|static
name|String
name|getUserName
parameter_list|(
name|UserGroupInformation
name|callerUGI
parameter_list|)
block|{
return|return
operator|(
operator|(
name|callerUGI
operator|!=
literal|null
operator|)
condition|?
name|callerUGI
operator|.
name|getUserName
argument_list|()
operator|.
name|trim
argument_list|()
else|:
literal|""
operator|)
return|;
block|}
block|}
end_class

end_unit

