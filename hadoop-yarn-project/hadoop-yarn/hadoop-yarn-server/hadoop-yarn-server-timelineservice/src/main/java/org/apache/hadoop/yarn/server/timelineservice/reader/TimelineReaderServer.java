begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.reader
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpServer2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|HttpCrossOriginFilterInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ShutdownHookManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnUncaughtExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|security
operator|.
name|TimelineReaderAuthenticationFilterInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|TimelineReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|util
operator|.
name|timeline
operator|.
name|TimelineServerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|GenericExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|YarnJacksonJaxbJsonProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|util
operator|.
name|WebAppUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/** Main class for Timeline Reader. */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|TimelineReaderServer
specifier|public
class|class
name|TimelineReaderServer
extends|extends
name|CompositeService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TimelineReaderServer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SHUTDOWN_HOOK_PRIORITY
specifier|private
specifier|static
specifier|final
name|int
name|SHUTDOWN_HOOK_PRIORITY
init|=
literal|30
decl_stmt|;
DECL|field|TIMELINE_READER_MANAGER_ATTR
specifier|static
specifier|final
name|String
name|TIMELINE_READER_MANAGER_ATTR
init|=
literal|"timeline.reader.manager"
decl_stmt|;
DECL|field|readerWebServer
specifier|private
name|HttpServer2
name|readerWebServer
decl_stmt|;
DECL|field|timelineReaderManager
specifier|private
name|TimelineReaderManager
name|timelineReaderManager
decl_stmt|;
DECL|method|TimelineReaderServer ()
specifier|public
name|TimelineReaderServer
parameter_list|()
block|{
name|super
argument_list|(
name|TimelineReaderServer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|YarnConfiguration
operator|.
name|timelineServiceV2Enabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"timeline service v.2 is not enabled"
argument_list|)
throw|;
block|}
name|InetSocketAddress
name|bindAddr
init|=
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_TIMELINE_SERVICE_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_TIMELINE_SERVICE_PORT
argument_list|)
decl_stmt|;
comment|// Login from keytab if security is enabled.
try|try
block|{
name|SecurityUtil
operator|.
name|login
argument_list|(
name|conf
argument_list|,
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_KEYTAB
argument_list|,
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_PRINCIPAL
argument_list|,
name|bindAddr
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Failed to login from keytab"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|TimelineReader
name|timelineReaderStore
init|=
name|createTimelineReaderStore
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|timelineReaderStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|timelineReaderStore
argument_list|)
expr_stmt|;
name|timelineReaderManager
operator|=
name|createTimelineReaderManager
argument_list|(
name|timelineReaderStore
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|timelineReaderManager
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|createTimelineReaderStore (final Configuration conf)
specifier|private
name|TimelineReader
name|createTimelineReaderStore
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|timelineReaderClassName
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_READER_CLASS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_TIMELINE_SERVICE_READER_CLASS
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using store: "
operator|+
name|timelineReaderClassName
argument_list|)
expr_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|timelineReaderClazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|timelineReaderClassName
argument_list|)
decl_stmt|;
if|if
condition|(
name|TimelineReader
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|timelineReaderClazz
argument_list|)
condition|)
block|{
return|return
operator|(
name|TimelineReader
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|timelineReaderClazz
argument_list|,
name|conf
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Class: "
operator|+
name|timelineReaderClassName
operator|+
literal|" not instance of "
operator|+
name|TimelineReader
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Could not instantiate TimelineReader: "
operator|+
name|timelineReaderClassName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createTimelineReaderManager ( TimelineReader timelineReaderStore)
specifier|private
name|TimelineReaderManager
name|createTimelineReaderManager
parameter_list|(
name|TimelineReader
name|timelineReaderStore
parameter_list|)
block|{
return|return
operator|new
name|TimelineReaderManager
argument_list|(
name|timelineReaderStore
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
name|startTimelineReaderWebApp
argument_list|()
expr_stmt|;
block|}
DECL|method|join ()
specifier|private
name|void
name|join
parameter_list|()
block|{
comment|// keep the main thread that started the server up until it receives a stop
comment|// signal
if|if
condition|(
name|readerWebServer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|readerWebServer
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{}
block|}
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|readerWebServer
operator|!=
literal|null
condition|)
block|{
name|readerWebServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
DECL|method|addFilters (Configuration conf)
specifier|protected
name|void
name|addFilters
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|boolean
name|enableCorsFilter
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT
argument_list|)
decl_stmt|;
comment|// Setup CORS
if|if
condition|(
name|enableCorsFilter
condition|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|HttpCrossOriginFilterInitializer
operator|.
name|PREFIX
operator|+
name|HttpCrossOriginFilterInitializer
operator|.
name|ENABLED_SUFFIX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|String
name|initializers
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"hadoop.http.filter.initializers"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|defaultInitializers
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|initializers
operator|.
name|contains
argument_list|(
name|TimelineReaderAuthenticationFilterInitializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|defaultInitializers
operator|.
name|add
argument_list|(
name|TimelineReaderAuthenticationFilterInitializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TimelineServerUtils
operator|.
name|setTimelineFilters
argument_list|(
name|conf
argument_list|,
name|initializers
argument_list|,
name|defaultInitializers
argument_list|)
expr_stmt|;
block|}
DECL|method|startTimelineReaderWebApp ()
specifier|private
name|void
name|startTimelineReaderWebApp
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|addFilters
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|bindAddress
init|=
name|WebAppUtils
operator|.
name|getWebAppBindURL
argument_list|(
name|conf
argument_list|,
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_BIND_HOST
argument_list|,
name|WebAppUtils
operator|.
name|getTimelineReaderWebAppURL
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Instantiating TimelineReaderWebApp at "
operator|+
name|bindAddress
argument_list|)
expr_stmt|;
try|try
block|{
name|HttpServer2
operator|.
name|Builder
name|builder
init|=
operator|new
name|HttpServer2
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"timeline"
argument_list|)
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|addEndpoint
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"http://"
operator|+
name|bindAddress
argument_list|)
argument_list|)
decl_stmt|;
name|readerWebServer
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|readerWebServer
operator|.
name|addJerseyResourcePackage
argument_list|(
name|TimelineReaderWebServices
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|";"
operator|+
name|GenericExceptionHandler
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|";"
operator|+
name|YarnJacksonJaxbJsonProvider
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"/*"
argument_list|)
expr_stmt|;
name|readerWebServer
operator|.
name|setAttribute
argument_list|(
name|TIMELINE_READER_MANAGER_ATTR
argument_list|,
name|timelineReaderManager
argument_list|)
expr_stmt|;
name|readerWebServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"TimelineReaderWebApp failed to start."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getWebServerPort ()
specifier|public
name|int
name|getWebServerPort
parameter_list|()
block|{
return|return
name|readerWebServer
operator|.
name|getConnectorAddress
argument_list|(
literal|0
argument_list|)
operator|.
name|getPort
argument_list|()
return|;
block|}
DECL|method|startTimelineReaderServer (String[] args, Configuration conf)
specifier|static
name|TimelineReaderServer
name|startTimelineReaderServer
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|Thread
operator|.
name|setDefaultUncaughtExceptionHandler
argument_list|(
operator|new
name|YarnUncaughtExceptionHandler
argument_list|()
argument_list|)
expr_stmt|;
name|StringUtils
operator|.
name|startupShutdownMessage
argument_list|(
name|TimelineReaderServer
operator|.
name|class
argument_list|,
name|args
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|TimelineReaderServer
name|timelineReaderServer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|timelineReaderServer
operator|=
operator|new
name|TimelineReaderServer
argument_list|()
expr_stmt|;
name|ShutdownHookManager
operator|.
name|get
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|CompositeServiceShutdownHook
argument_list|(
name|timelineReaderServer
argument_list|)
argument_list|,
name|SHUTDOWN_HOOK_PRIORITY
argument_list|)
expr_stmt|;
name|timelineReaderServer
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|timelineReaderServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error starting TimelineReaderWebServer"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|ExitUtil
operator|.
name|terminate
argument_list|(
operator|-
literal|1
argument_list|,
literal|"Error starting TimelineReaderWebServer"
argument_list|)
expr_stmt|;
block|}
return|return
name|timelineReaderServer
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_VERSION
argument_list|,
literal|2.0f
argument_list|)
expr_stmt|;
name|TimelineReaderServer
name|server
init|=
name|startTimelineReaderServer
argument_list|(
name|args
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|server
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

