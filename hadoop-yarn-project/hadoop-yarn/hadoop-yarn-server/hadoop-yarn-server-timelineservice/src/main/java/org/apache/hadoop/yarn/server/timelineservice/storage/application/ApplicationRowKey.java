begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage.application
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|application
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|Separator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|TimelineStorageUtils
import|;
end_import

begin_comment
comment|/**  * Represents a rowkey for the application table.  */
end_comment

begin_class
DECL|class|ApplicationRowKey
specifier|public
class|class
name|ApplicationRowKey
block|{
DECL|field|clusterId
specifier|private
specifier|final
name|String
name|clusterId
decl_stmt|;
DECL|field|userId
specifier|private
specifier|final
name|String
name|userId
decl_stmt|;
DECL|field|flowName
specifier|private
specifier|final
name|String
name|flowName
decl_stmt|;
DECL|field|flowRunId
specifier|private
specifier|final
name|long
name|flowRunId
decl_stmt|;
DECL|field|appId
specifier|private
specifier|final
name|String
name|appId
decl_stmt|;
DECL|method|ApplicationRowKey (String clusterId, String userId, String flowName, long flowRunId, String appId)
specifier|public
name|ApplicationRowKey
parameter_list|(
name|String
name|clusterId
parameter_list|,
name|String
name|userId
parameter_list|,
name|String
name|flowName
parameter_list|,
name|long
name|flowRunId
parameter_list|,
name|String
name|appId
parameter_list|)
block|{
name|this
operator|.
name|clusterId
operator|=
name|clusterId
expr_stmt|;
name|this
operator|.
name|userId
operator|=
name|userId
expr_stmt|;
name|this
operator|.
name|flowName
operator|=
name|flowName
expr_stmt|;
name|this
operator|.
name|flowRunId
operator|=
name|flowRunId
expr_stmt|;
name|this
operator|.
name|appId
operator|=
name|appId
expr_stmt|;
block|}
DECL|method|getClusterId ()
specifier|public
name|String
name|getClusterId
parameter_list|()
block|{
return|return
name|clusterId
return|;
block|}
DECL|method|getUserId ()
specifier|public
name|String
name|getUserId
parameter_list|()
block|{
return|return
name|userId
return|;
block|}
DECL|method|getFlowName ()
specifier|public
name|String
name|getFlowName
parameter_list|()
block|{
return|return
name|flowName
return|;
block|}
DECL|method|getFlowRunId ()
specifier|public
name|long
name|getFlowRunId
parameter_list|()
block|{
return|return
name|flowRunId
return|;
block|}
DECL|method|getAppId ()
specifier|public
name|String
name|getAppId
parameter_list|()
block|{
return|return
name|appId
return|;
block|}
comment|/**    * Constructs a row key prefix for the application table as follows:    * {@code clusterId!userName!flowName!}.    *    * @param clusterId Cluster Id.    * @param userId User Id.    * @param flowName Flow Name.    * @return byte array with the row key prefix    */
DECL|method|getRowKeyPrefix (String clusterId, String userId, String flowName)
specifier|public
specifier|static
name|byte
index|[]
name|getRowKeyPrefix
parameter_list|(
name|String
name|clusterId
parameter_list|,
name|String
name|userId
parameter_list|,
name|String
name|flowName
parameter_list|)
block|{
name|byte
index|[]
name|first
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|joinEncoded
argument_list|(
name|clusterId
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|join
argument_list|(
name|first
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/**    * Constructs a row key prefix for the application table as follows:    * {@code clusterId!userName!flowName!flowRunId!}.    *    * @param clusterId Cluster Id.    * @param userId User Id.    * @param flowName Flow Name.    * @param flowRunId Run Id for the flow.    * @return byte array with the row key prefix    */
DECL|method|getRowKeyPrefix (String clusterId, String userId, String flowName, Long flowRunId)
specifier|public
specifier|static
name|byte
index|[]
name|getRowKeyPrefix
parameter_list|(
name|String
name|clusterId
parameter_list|,
name|String
name|userId
parameter_list|,
name|String
name|flowName
parameter_list|,
name|Long
name|flowRunId
parameter_list|)
block|{
name|byte
index|[]
name|first
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|joinEncoded
argument_list|(
name|clusterId
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|second
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TimelineStorageUtils
operator|.
name|invertLong
argument_list|(
name|flowRunId
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|join
argument_list|(
name|first
argument_list|,
name|second
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/**    * Constructs a row key for the application table as follows:    * {@code clusterId!userName!flowName!flowRunId!AppId}.    *    * @param clusterId Cluster Id.    * @param userId User Id.    * @param flowName Flow Name.    * @param flowRunId Run Id for the flow.    * @param appId App Id.    * @return byte array with the row key    */
DECL|method|getRowKey (String clusterId, String userId, String flowName, Long flowRunId, String appId)
specifier|public
specifier|static
name|byte
index|[]
name|getRowKey
parameter_list|(
name|String
name|clusterId
parameter_list|,
name|String
name|userId
parameter_list|,
name|String
name|flowName
parameter_list|,
name|Long
name|flowRunId
parameter_list|,
name|String
name|appId
parameter_list|)
block|{
name|byte
index|[]
name|first
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|joinEncoded
argument_list|(
name|clusterId
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|)
argument_list|)
decl_stmt|;
comment|// Note that flowRunId is a long, so we can't encode them all at the same
comment|// time.
name|byte
index|[]
name|second
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TimelineStorageUtils
operator|.
name|invertLong
argument_list|(
name|flowRunId
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|third
init|=
name|TimelineStorageUtils
operator|.
name|encodeAppId
argument_list|(
name|appId
argument_list|)
decl_stmt|;
return|return
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|join
argument_list|(
name|first
argument_list|,
name|second
argument_list|,
name|third
argument_list|)
return|;
block|}
comment|/**    * Given the raw row key as bytes, returns the row key as an object.    *    * @param rowKey Byte representation  of row key.    * @return An<cite>ApplicationRowKey</cite> object.    */
DECL|method|parseRowKey (byte[] rowKey)
specifier|public
specifier|static
name|ApplicationRowKey
name|parseRowKey
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|rowKeyComponents
init|=
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|split
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|rowKeyComponents
operator|.
name|length
operator|<
literal|5
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"the row key is not valid for "
operator|+
literal|"an application"
argument_list|)
throw|;
block|}
name|String
name|clusterId
init|=
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|decode
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|rowKeyComponents
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|userId
init|=
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|decode
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|rowKeyComponents
index|[
literal|1
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|flowName
init|=
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|decode
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|rowKeyComponents
index|[
literal|2
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|flowRunId
init|=
name|TimelineStorageUtils
operator|.
name|invertLong
argument_list|(
name|Bytes
operator|.
name|toLong
argument_list|(
name|rowKeyComponents
index|[
literal|3
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|appId
init|=
name|TimelineStorageUtils
operator|.
name|decodeAppId
argument_list|(
name|rowKeyComponents
index|[
literal|4
index|]
argument_list|)
decl_stmt|;
return|return
operator|new
name|ApplicationRowKey
argument_list|(
name|clusterId
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
name|flowRunId
argument_list|,
name|appId
argument_list|)
return|;
block|}
block|}
end_class

end_unit

