begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_comment
comment|/**  * This abstract class is for monitoring Health of Timeline Storage.  */
end_comment

begin_class
DECL|class|TimelineStorageMonitor
specifier|public
specifier|abstract
class|class
name|TimelineStorageMonitor
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TimelineStorageMonitor
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Different Storages supported by ATSV2. */
DECL|enum|Storage
specifier|public
enum|enum
name|Storage
block|{
DECL|enumConstant|HBase
name|HBase
block|}
DECL|field|monitorExecutorService
specifier|private
name|ScheduledExecutorService
name|monitorExecutorService
decl_stmt|;
DECL|field|monitorInterval
specifier|private
name|long
name|monitorInterval
decl_stmt|;
DECL|field|storage
specifier|private
name|Storage
name|storage
decl_stmt|;
DECL|field|storageDown
specifier|private
name|AtomicBoolean
name|storageDown
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|method|TimelineStorageMonitor (Configuration conf, Storage storage)
specifier|public
name|TimelineStorageMonitor
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Storage
name|storage
parameter_list|)
block|{
name|this
operator|.
name|storage
operator|=
name|storage
expr_stmt|;
name|this
operator|.
name|monitorInterval
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_READER_STORAGE_MONITOR_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_TIMELINE_SERVICE_STORAGE_MONITOR_INTERVAL_MS
argument_list|)
expr_stmt|;
block|}
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Scheduling {} storage monitor at interval {}"
argument_list|,
name|this
operator|.
name|storage
argument_list|,
name|monitorInterval
argument_list|)
expr_stmt|;
name|monitorExecutorService
operator|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|monitorExecutorService
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|MonitorThread
argument_list|()
argument_list|,
literal|0
argument_list|,
name|monitorInterval
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|monitorExecutorService
operator|!=
literal|null
condition|)
block|{
name|monitorExecutorService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|monitorExecutorService
operator|.
name|awaitTermination
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to stop the monitor task in time. "
operator|+
literal|"will still proceed to close the monitor."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|healthCheck ()
specifier|abstract
specifier|public
name|void
name|healthCheck
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|checkStorageIsUp ()
specifier|public
name|void
name|checkStorageIsUp
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|storageDown
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|storage
operator|+
literal|" is down"
argument_list|)
throw|;
block|}
block|}
DECL|method|isStorageDown ()
specifier|public
name|boolean
name|isStorageDown
parameter_list|()
block|{
return|return
name|storageDown
operator|.
name|get
argument_list|()
return|;
block|}
DECL|class|MonitorThread
specifier|private
class|class
name|MonitorThread
implements|implements
name|Runnable
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running Timeline Storage monitor"
argument_list|)
expr_stmt|;
name|healthCheck
argument_list|()
expr_stmt|;
if|if
condition|(
name|storageDown
operator|.
name|getAndSet
argument_list|(
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} health check succeeded, "
operator|+
literal|"assuming storage is up"
argument_list|,
name|storage
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Got failure attempting to read from %s, "
operator|+
literal|"assuming Storage is down"
argument_list|,
name|storage
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|storageDown
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

