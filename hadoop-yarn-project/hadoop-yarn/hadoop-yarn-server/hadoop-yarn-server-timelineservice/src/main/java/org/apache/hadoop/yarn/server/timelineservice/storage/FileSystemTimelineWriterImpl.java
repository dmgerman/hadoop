begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineWriteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineWriteResponse
operator|.
name|TimelineWriteError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|timeline
operator|.
name|TimelineUtils
import|;
end_import

begin_comment
comment|/**  * This implements a local file based backend for storing application timeline  * information.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|FileSystemTimelineWriterImpl
specifier|public
class|class
name|FileSystemTimelineWriterImpl
extends|extends
name|AbstractService
implements|implements
name|TimelineWriter
block|{
DECL|field|outputRoot
specifier|private
name|String
name|outputRoot
decl_stmt|;
comment|/** Config param for timeline service storage tmp root for FILE YARN-3264 */
DECL|field|TIMELINE_SERVICE_STORAGE_DIR_ROOT
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_STORAGE_DIR_ROOT
init|=
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"fs-writer.root-dir"
decl_stmt|;
comment|/** default value for storage location on local disk */
DECL|field|DEFAULT_TIMELINE_SERVICE_STORAGE_DIR_ROOT
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_TIMELINE_SERVICE_STORAGE_DIR_ROOT
init|=
literal|"/tmp/timeline_service_data"
decl_stmt|;
DECL|field|ENTITIES_DIR
specifier|public
specifier|static
specifier|final
name|String
name|ENTITIES_DIR
init|=
literal|"entities"
decl_stmt|;
comment|/** Default extension for output files */
DECL|field|TIMELINE_SERVICE_STORAGE_EXTENSION
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_STORAGE_EXTENSION
init|=
literal|".thist"
decl_stmt|;
DECL|method|FileSystemTimelineWriterImpl ()
name|FileSystemTimelineWriterImpl
parameter_list|()
block|{
name|super
argument_list|(
operator|(
name|FileSystemTimelineWriterImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (String clusterId, String userId, String flowName, String flowVersion, long flowRunId, String appId, TimelineEntities entities)
specifier|public
name|TimelineWriteResponse
name|write
parameter_list|(
name|String
name|clusterId
parameter_list|,
name|String
name|userId
parameter_list|,
name|String
name|flowName
parameter_list|,
name|String
name|flowVersion
parameter_list|,
name|long
name|flowRunId
parameter_list|,
name|String
name|appId
parameter_list|,
name|TimelineEntities
name|entities
parameter_list|)
throws|throws
name|IOException
block|{
name|TimelineWriteResponse
name|response
init|=
operator|new
name|TimelineWriteResponse
argument_list|()
decl_stmt|;
for|for
control|(
name|TimelineEntity
name|entity
range|:
name|entities
operator|.
name|getEntities
argument_list|()
control|)
block|{
name|write
argument_list|(
name|clusterId
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
name|flowVersion
argument_list|,
name|flowRunId
argument_list|,
name|appId
argument_list|,
name|entity
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
DECL|method|write (String clusterId, String userId, String flowName, String flowVersion, long flowRun, String appId, TimelineEntity entity, TimelineWriteResponse response)
specifier|private
specifier|synchronized
name|void
name|write
parameter_list|(
name|String
name|clusterId
parameter_list|,
name|String
name|userId
parameter_list|,
name|String
name|flowName
parameter_list|,
name|String
name|flowVersion
parameter_list|,
name|long
name|flowRun
parameter_list|,
name|String
name|appId
parameter_list|,
name|TimelineEntity
name|entity
parameter_list|,
name|TimelineWriteResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|PrintWriter
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|dir
init|=
name|mkdirs
argument_list|(
name|outputRoot
argument_list|,
name|ENTITIES_DIR
argument_list|,
name|clusterId
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
name|flowVersion
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|flowRun
argument_list|)
argument_list|,
name|appId
argument_list|,
name|entity
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|fileName
init|=
name|dir
operator|+
name|entity
operator|.
name|getId
argument_list|()
operator|+
name|TIMELINE_SERVICE_STORAGE_EXTENSION
decl_stmt|;
name|out
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|fileName
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|TimelineUtils
operator|.
name|dumpTimelineRecordtoJSON
argument_list|(
name|entity
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|TimelineWriteError
name|error
init|=
operator|new
name|TimelineWriteError
argument_list|()
decl_stmt|;
name|error
operator|.
name|setEntityId
argument_list|(
name|entity
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|error
operator|.
name|setEntityType
argument_list|(
name|entity
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|/*        * TODO: set an appropriate error code after PoC could possibly be:        * error.setErrorCode(TimelineWriteError.IO_EXCEPTION);        */
name|response
operator|.
name|addError
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|aggregate (TimelineEntity data, TimelineAggregationTrack track)
specifier|public
name|TimelineWriteResponse
name|aggregate
parameter_list|(
name|TimelineEntity
name|data
parameter_list|,
name|TimelineAggregationTrack
name|track
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
DECL|method|getOutputRoot ()
specifier|public
name|String
name|getOutputRoot
parameter_list|()
block|{
return|return
name|outputRoot
return|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|public
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|outputRoot
operator|=
name|conf
operator|.
name|get
argument_list|(
name|TIMELINE_SERVICE_STORAGE_DIR_ROOT
argument_list|,
name|DEFAULT_TIMELINE_SERVICE_STORAGE_DIR_ROOT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|public
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|mkdirs
argument_list|(
name|outputRoot
argument_list|,
name|ENTITIES_DIR
argument_list|)
expr_stmt|;
block|}
DECL|method|mkdirs (String... dirStrs)
specifier|private
specifier|static
name|String
name|mkdirs
parameter_list|(
name|String
modifier|...
name|dirStrs
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|path
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dirStr
range|:
name|dirStrs
control|)
block|{
name|path
operator|.
name|append
argument_list|(
name|dirStr
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|dir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not create directories for "
operator|+
name|dir
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|path
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

