begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_comment
comment|/**  * Utility class that allows HBase coprocessors to interact with unique  * timestamps.  */
end_comment

begin_class
DECL|class|TimestampGenerator
specifier|public
class|class
name|TimestampGenerator
block|{
comment|/*    * if this is changed, then reading cell timestamps written with older    * multiplier value will not work    */
DECL|field|TS_MULTIPLIER
specifier|public
specifier|static
specifier|final
name|long
name|TS_MULTIPLIER
init|=
literal|1000000L
decl_stmt|;
DECL|field|lastTimestamp
specifier|private
specifier|final
name|AtomicLong
name|lastTimestamp
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
comment|/**    * Returns the current wall clock time in milliseconds, multiplied by the    * required precision.    *    * @return current timestamp.    */
DECL|method|currentTime ()
specifier|public
name|long
name|currentTime
parameter_list|()
block|{
comment|// We want to align cell timestamps with current time.
comment|// cell timestamps are not be less than
comment|// System.currentTimeMillis() * TS_MULTIPLIER.
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|*
name|TS_MULTIPLIER
return|;
block|}
comment|/**    * Returns a timestamp value unique within the scope of this    * {@code TimestampGenerator} instance. For usage by HBase    * {@code RegionObserver} coprocessors, this normally means unique within a    * given region.    *    * Unlikely scenario of generating a non-unique timestamp: if there is a    * sustained rate of more than 1M hbase writes per second AND if region fails    * over within that time range of timestamps being generated then there may be    * collisions writing to a cell version of the same column.    *    * @return unique timestamp.    */
DECL|method|getUniqueTimestamp ()
specifier|public
name|long
name|getUniqueTimestamp
parameter_list|()
block|{
name|long
name|lastTs
decl_stmt|;
name|long
name|nextTs
decl_stmt|;
do|do
block|{
name|lastTs
operator|=
name|lastTimestamp
operator|.
name|get
argument_list|()
expr_stmt|;
name|nextTs
operator|=
name|Math
operator|.
name|max
argument_list|(
name|lastTs
operator|+
literal|1
argument_list|,
name|currentTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|lastTimestamp
operator|.
name|compareAndSet
argument_list|(
name|lastTs
argument_list|,
name|nextTs
argument_list|)
condition|)
do|;
return|return
name|nextTs
return|;
block|}
comment|/**    * Returns a timestamp multiplied with TS_MULTIPLIER and last few digits of    * application id.    *    * Unlikely scenario of generating a timestamp that is a duplicate: If more    * than a 1M concurrent apps are running in one flow run AND write to same    * column at the same time, then say appId of 1M and 1 will overlap    * with appId of 001 and there may be collisions for that flow run's    * specific column.    *    * @param incomingTS Timestamp to be converted.    * @param appId Application Id.    * @return a timestamp multiplied with TS_MULTIPLIER and last few digits of    *         application id    */
DECL|method|getSupplementedTimestamp (long incomingTS, String appId)
specifier|public
specifier|static
name|long
name|getSupplementedTimestamp
parameter_list|(
name|long
name|incomingTS
parameter_list|,
name|String
name|appId
parameter_list|)
block|{
name|long
name|suffix
init|=
name|getAppIdSuffix
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|long
name|outgoingTS
init|=
name|incomingTS
operator|*
name|TS_MULTIPLIER
operator|+
name|suffix
decl_stmt|;
return|return
name|outgoingTS
return|;
block|}
DECL|method|getAppIdSuffix (String appIdStr)
specifier|private
specifier|static
name|long
name|getAppIdSuffix
parameter_list|(
name|String
name|appIdStr
parameter_list|)
block|{
if|if
condition|(
name|appIdStr
operator|==
literal|null
condition|)
block|{
return|return
literal|0L
return|;
block|}
name|ApplicationId
name|appId
init|=
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
name|appIdStr
argument_list|)
decl_stmt|;
name|long
name|id
init|=
name|appId
operator|.
name|getId
argument_list|()
operator|%
name|TS_MULTIPLIER
decl_stmt|;
return|return
name|id
return|;
block|}
comment|/**    * truncates the last few digits of the timestamp which were supplemented by    * the TimestampGenerator#getSupplementedTimestamp function.    *    * @param incomingTS Timestamp to be truncated.    * @return a truncated timestamp value    */
DECL|method|getTruncatedTimestamp (long incomingTS)
specifier|public
specifier|static
name|long
name|getTruncatedTimestamp
parameter_list|(
name|long
name|incomingTS
parameter_list|)
block|{
return|return
name|incomingTS
operator|/
name|TS_MULTIPLIER
return|;
block|}
block|}
end_class

end_unit

