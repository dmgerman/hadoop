begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.reader
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Set of utility methods to be used across timeline reader.  */
end_comment

begin_class
DECL|class|TimelineReaderUtils
specifier|public
specifier|final
class|class
name|TimelineReaderUtils
block|{
DECL|method|TimelineReaderUtils ()
specifier|private
name|TimelineReaderUtils
parameter_list|()
block|{   }
comment|/**    * Default delimiter for joining strings.    */
annotation|@
name|VisibleForTesting
DECL|field|DEFAULT_DELIMITER_CHAR
specifier|public
specifier|static
specifier|final
name|char
name|DEFAULT_DELIMITER_CHAR
init|=
literal|'!'
decl_stmt|;
comment|/**    * Default escape character used for joining strings.    */
annotation|@
name|VisibleForTesting
DECL|field|DEFAULT_ESCAPE_CHAR
specifier|public
specifier|static
specifier|final
name|char
name|DEFAULT_ESCAPE_CHAR
init|=
literal|'*'
decl_stmt|;
DECL|field|FROMID_KEY
specifier|public
specifier|static
specifier|final
name|String
name|FROMID_KEY
init|=
literal|"FROM_ID"
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|UID_KEY
specifier|public
specifier|static
specifier|final
name|String
name|UID_KEY
init|=
literal|"UID"
decl_stmt|;
comment|/**    * Split the passed string along the passed delimiter character while looking    * for escape char to interpret the splitted parts correctly. For delimiter or    * escape character to be interpreted as part of the string, they have to be    * escaped by putting an escape character in front.    * @param str string to be split.    * @param delimiterChar delimiter used for splitting.    * @param escapeChar delimiter and escape character will be escaped using this    *     character.    * @return a list of strings after split.    * @throws IllegalArgumentException if string is not properly escaped.    */
DECL|method|split (final String str, final char delimiterChar, final char escapeChar)
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|split
parameter_list|(
specifier|final
name|String
name|str
parameter_list|,
specifier|final
name|char
name|delimiterChar
parameter_list|,
specifier|final
name|char
name|escapeChar
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|len
init|=
name|str
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Keeps track of offset of the passed string.
name|int
name|offset
init|=
literal|0
decl_stmt|;
comment|// Indicates start offset from which characters will be copied from original
comment|// string to destination string. Resets when an escape or delimiter char is
comment|// encountered.
name|int
name|startOffset
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|len
argument_list|)
decl_stmt|;
comment|// Iterate over the string till we reach the end.
while|while
condition|(
name|offset
operator|<
name|len
condition|)
block|{
if|if
condition|(
name|str
operator|.
name|charAt
argument_list|(
name|offset
argument_list|)
operator|==
name|escapeChar
condition|)
block|{
comment|// An escape character must be followed by a delimiter or escape char
comment|// but we have reached the end and have no further character to look at.
if|if
condition|(
name|offset
operator|+
literal|1
operator|>=
name|len
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Escape char not properly escaped."
argument_list|)
throw|;
block|}
name|char
name|nextChar
init|=
name|str
operator|.
name|charAt
argument_list|(
name|offset
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// Next character must be a delimiter or an escape char.
if|if
condition|(
name|nextChar
operator|!=
name|escapeChar
operator|&&
name|nextChar
operator|!=
name|delimiterChar
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Escape char or delimiter char not properly escaped."
argument_list|)
throw|;
block|}
comment|// Copy contents from the offset where last escape or delimiter char was
comment|// encountered.
if|if
condition|(
name|startOffset
operator|<
name|offset
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|str
operator|.
name|substring
argument_list|(
name|startOffset
argument_list|,
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|nextChar
argument_list|)
expr_stmt|;
name|offset
operator|+=
literal|2
expr_stmt|;
comment|// Reset the start offset as an escape char has been encountered.
name|startOffset
operator|=
name|offset
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|str
operator|.
name|charAt
argument_list|(
name|offset
argument_list|)
operator|==
name|delimiterChar
condition|)
block|{
comment|// A delimiter has been encountered without an escape character.
comment|// String needs to be split here. Copy remaining chars and add the
comment|// string to list.
name|builder
operator|.
name|append
argument_list|(
name|str
operator|.
name|substring
argument_list|(
name|startOffset
argument_list|,
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reset the start offset as a delimiter has been encountered.
name|startOffset
operator|=
operator|++
name|offset
expr_stmt|;
name|builder
operator|=
operator|new
name|StringBuilder
argument_list|(
name|len
operator|-
name|offset
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|offset
operator|++
expr_stmt|;
block|}
comment|// Copy rest of the characters.
if|if
condition|(
operator|!
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|str
operator|.
name|substring
argument_list|(
name|startOffset
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Add the last part of delimited string to list.
name|list
operator|.
name|add
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
DECL|method|escapeString (final String str, final char delimiterChar, final char escapeChar)
specifier|private
specifier|static
name|String
name|escapeString
parameter_list|(
specifier|final
name|String
name|str
parameter_list|,
specifier|final
name|char
name|delimiterChar
parameter_list|,
specifier|final
name|char
name|escapeChar
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|len
init|=
name|str
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// Keeps track of offset of the passed string.
name|int
name|offset
init|=
literal|0
decl_stmt|;
comment|// Indicates start offset from which characters will be copied from original
comment|// string to destination string. Resets when an escape or delimiter char is
comment|// encountered.
name|int
name|startOffset
init|=
literal|0
decl_stmt|;
comment|// Iterate over the string till we reach the end.
while|while
condition|(
name|offset
operator|<
name|len
condition|)
block|{
name|char
name|charAtOffset
init|=
name|str
operator|.
name|charAt
argument_list|(
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|charAtOffset
operator|==
name|escapeChar
operator|||
name|charAtOffset
operator|==
name|delimiterChar
condition|)
block|{
comment|// If an escape or delimiter character is encountered, copy characters
comment|// from the offset where escape or delimiter was last encountered.
if|if
condition|(
name|startOffset
operator|<
name|offset
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|str
operator|.
name|substring
argument_list|(
name|startOffset
argument_list|,
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Append escape char before delimiter/escape char.
name|builder
operator|.
name|append
argument_list|(
name|escapeChar
argument_list|)
operator|.
name|append
argument_list|(
name|charAtOffset
argument_list|)
expr_stmt|;
comment|// Reset start offset for copying characters when next escape/delimiter
comment|// char is encountered.
name|startOffset
operator|=
name|offset
operator|+
literal|1
expr_stmt|;
block|}
name|offset
operator|++
expr_stmt|;
block|}
comment|// Copy remaining characters.
name|builder
operator|.
name|append
argument_list|(
name|str
operator|.
name|substring
argument_list|(
name|startOffset
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Join different strings in the passed string array delimited by passed    * delimiter with delimiter and escape character escaped using passed escape    * char.    * @param strs strings to be joined.    * @param delimiterChar delimiter used to join strings.    * @param escapeChar escape character used to escape delimiter and escape    *     char.    * @return a single string joined using delimiter and properly escaped.    */
DECL|method|joinAndEscapeStrings (final String[] strs, final char delimiterChar, final char escapeChar)
specifier|static
name|String
name|joinAndEscapeStrings
parameter_list|(
specifier|final
name|String
index|[]
name|strs
parameter_list|,
specifier|final
name|char
name|delimiterChar
parameter_list|,
specifier|final
name|char
name|escapeChar
parameter_list|)
block|{
name|int
name|len
init|=
name|strs
operator|.
name|length
decl_stmt|;
comment|// Escape each string in string array.
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|len
condition|;
name|index
operator|++
control|)
block|{
if|if
condition|(
name|strs
index|[
name|index
index|]
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|strs
index|[
name|index
index|]
operator|=
name|escapeString
argument_list|(
name|strs
index|[
name|index
index|]
argument_list|,
name|delimiterChar
argument_list|,
name|escapeChar
argument_list|)
expr_stmt|;
block|}
comment|// Join the strings after they have been escaped.
return|return
name|StringUtils
operator|.
name|join
argument_list|(
name|strs
argument_list|,
name|delimiterChar
argument_list|)
return|;
block|}
DECL|method|split (final String str)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|split
parameter_list|(
specifier|final
name|String
name|str
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
return|return
name|split
argument_list|(
name|str
argument_list|,
name|DEFAULT_DELIMITER_CHAR
argument_list|,
name|DEFAULT_ESCAPE_CHAR
argument_list|)
return|;
block|}
DECL|method|joinAndEscapeStrings (final String[] strs)
specifier|public
specifier|static
name|String
name|joinAndEscapeStrings
parameter_list|(
specifier|final
name|String
index|[]
name|strs
parameter_list|)
block|{
return|return
name|joinAndEscapeStrings
argument_list|(
name|strs
argument_list|,
name|DEFAULT_DELIMITER_CHAR
argument_list|,
name|DEFAULT_ESCAPE_CHAR
argument_list|)
return|;
block|}
block|}
end_class

end_unit

