begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineWriteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|BufferedMutator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|TimelineEntitySchemaConstants
import|;
end_import

begin_comment
comment|/**  * This implements a hbase based backend for storing application timeline entity  * information.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|HBaseTimelineWriterImpl
specifier|public
class|class
name|HBaseTimelineWriterImpl
extends|extends
name|AbstractService
implements|implements
name|TimelineWriter
block|{
DECL|field|conn
specifier|private
name|Connection
name|conn
decl_stmt|;
DECL|field|entityTable
specifier|private
name|BufferedMutator
name|entityTable
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HBaseTimelineWriterImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|HBaseTimelineWriterImpl ()
specifier|public
name|HBaseTimelineWriterImpl
parameter_list|()
block|{
name|super
argument_list|(
name|HBaseTimelineWriterImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|HBaseTimelineWriterImpl (Configuration conf)
specifier|public
name|HBaseTimelineWriterImpl
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"yarn.application.id"
argument_list|,
name|HBaseTimelineWriterImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * initializes the hbase connection to write to the entity table    */
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Configuration
name|hbaseConf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conn
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|hbaseConf
argument_list|)
expr_stmt|;
name|TableName
name|entityTableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|hbaseConf
operator|.
name|get
argument_list|(
name|TimelineEntitySchemaConstants
operator|.
name|ENTITY_TABLE_NAME
argument_list|,
name|TimelineEntitySchemaConstants
operator|.
name|DEFAULT_ENTITY_TABLE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|entityTable
operator|=
name|conn
operator|.
name|getBufferedMutator
argument_list|(
name|entityTableName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Stores the entire information in TimelineEntities to the timeline store.    */
annotation|@
name|Override
DECL|method|write (String clusterId, String userId, String flowName, String flowVersion, long flowRunId, String appId, TimelineEntities data)
specifier|public
name|TimelineWriteResponse
name|write
parameter_list|(
name|String
name|clusterId
parameter_list|,
name|String
name|userId
parameter_list|,
name|String
name|flowName
parameter_list|,
name|String
name|flowVersion
parameter_list|,
name|long
name|flowRunId
parameter_list|,
name|String
name|appId
parameter_list|,
name|TimelineEntities
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|rowKeyPrefix
init|=
name|TimelineWriterUtils
operator|.
name|getRowKeyPrefix
argument_list|(
name|clusterId
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
name|flowRunId
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|TimelineWriteResponse
name|putStatus
init|=
operator|new
name|TimelineWriteResponse
argument_list|()
decl_stmt|;
for|for
control|(
name|TimelineEntity
name|te
range|:
name|data
operator|.
name|getEntities
argument_list|()
control|)
block|{
comment|// a set can have at most 1 null
if|if
condition|(
name|te
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|// get row key
name|byte
index|[]
name|row
init|=
name|TimelineWriterUtils
operator|.
name|join
argument_list|(
name|TimelineEntitySchemaConstants
operator|.
name|ROW_KEY_SEPARATOR_BYTES
argument_list|,
name|rowKeyPrefix
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|te
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|te
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|storeInfo
argument_list|(
name|row
argument_list|,
name|te
argument_list|,
name|flowVersion
argument_list|)
expr_stmt|;
name|storeEvents
argument_list|(
name|row
argument_list|,
name|te
operator|.
name|getEvents
argument_list|()
argument_list|)
expr_stmt|;
name|storeConfig
argument_list|(
name|row
argument_list|,
name|te
operator|.
name|getConfigs
argument_list|()
argument_list|)
expr_stmt|;
name|storeMetrics
argument_list|(
name|row
argument_list|,
name|te
operator|.
name|getMetrics
argument_list|()
argument_list|)
expr_stmt|;
name|storeRelations
argument_list|(
name|row
argument_list|,
name|te
operator|.
name|getIsRelatedToEntities
argument_list|()
argument_list|,
name|EntityColumnDetails
operator|.
name|PREFIX_IS_RELATED_TO
argument_list|)
expr_stmt|;
name|storeRelations
argument_list|(
name|row
argument_list|,
name|te
operator|.
name|getRelatesToEntities
argument_list|()
argument_list|,
name|EntityColumnDetails
operator|.
name|PREFIX_RELATES_TO
argument_list|)
expr_stmt|;
block|}
return|return
name|putStatus
return|;
block|}
comment|/**    * Stores the Relations from the {@linkplain TimelineEntity} object    */
DECL|method|storeRelations (byte[] rowKey, Map<String, Set<String>> connectedEntities, EntityColumnDetails columnNamePrefix)
specifier|private
name|void
name|storeRelations
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|connectedEntities
parameter_list|,
name|EntityColumnDetails
name|columnNamePrefix
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|connectedEntities
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|columnNamePrefix
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|entityTable
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Stores information from the {@linkplain TimelineEntity} object    */
DECL|method|storeInfo (byte[] rowKey, TimelineEntity te, String flowVersion)
specifier|private
name|void
name|storeInfo
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|,
name|TimelineEntity
name|te
parameter_list|,
name|String
name|flowVersion
parameter_list|)
throws|throws
name|IOException
block|{
name|EntityColumnDetails
operator|.
name|ID
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|entityTable
argument_list|,
name|te
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|EntityColumnDetails
operator|.
name|TYPE
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|entityTable
argument_list|,
name|te
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|EntityColumnDetails
operator|.
name|CREATED_TIME
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|entityTable
argument_list|,
name|te
operator|.
name|getCreatedTime
argument_list|()
argument_list|)
expr_stmt|;
name|EntityColumnDetails
operator|.
name|MODIFIED_TIME
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|entityTable
argument_list|,
name|te
operator|.
name|getModifiedTime
argument_list|()
argument_list|)
expr_stmt|;
name|EntityColumnDetails
operator|.
name|FLOW_VERSION
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|entityTable
argument_list|,
name|flowVersion
argument_list|)
expr_stmt|;
block|}
comment|/**    * stores the config information from {@linkplain TimelineEntity}    */
DECL|method|storeConfig (byte[] rowKey, Map<String, String> config)
specifier|private
name|void
name|storeConfig
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|config
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|EntityColumnFamily
operator|.
name|CONFIG
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|entityTable
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * stores the {@linkplain TimelineMetric} information from the    * {@linkplain TimelineEvent} object    */
DECL|method|storeMetrics (byte[] rowKey, Set<TimelineMetric> metrics)
specifier|private
name|void
name|storeMetrics
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|,
name|Set
argument_list|<
name|TimelineMetric
argument_list|>
name|metrics
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TimelineMetric
name|metric
range|:
name|metrics
control|)
block|{
name|String
name|key
init|=
name|metric
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Number
argument_list|>
name|timeseries
init|=
name|metric
operator|.
name|getValues
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Number
argument_list|>
name|entry
range|:
name|timeseries
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|EntityColumnFamily
operator|.
name|METRICS
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|entityTable
argument_list|,
name|key
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Stores the events from the {@linkplain TimelineEvent} object    */
DECL|method|storeEvents (byte[] rowKey, Set<TimelineEvent> events)
specifier|private
name|void
name|storeEvents
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|,
name|Set
argument_list|<
name|TimelineEvent
argument_list|>
name|events
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|events
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TimelineEvent
name|event
range|:
name|events
control|)
block|{
if|if
condition|(
name|event
operator|!=
literal|null
condition|)
block|{
name|String
name|id
init|=
name|event
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|idBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|eventInfo
init|=
name|event
operator|.
name|getInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|eventInfo
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|info
range|:
name|eventInfo
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|EntityColumnDetails
operator|.
name|PREFIX_EVENTS
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|entityTable
argument_list|,
name|idBytes
argument_list|,
name|info
operator|.
name|getKey
argument_list|()
argument_list|,
name|info
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|aggregate (TimelineEntity data, TimelineAggregationTrack track)
specifier|public
name|TimelineWriteResponse
name|aggregate
parameter_list|(
name|TimelineEntity
name|data
parameter_list|,
name|TimelineAggregationTrack
name|track
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
comment|/**    * close the hbase connections    * The close APIs perform flushing and release any    * resources held    */
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|entityTable
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"closing entity table"
argument_list|)
expr_stmt|;
comment|// The close API performs flushing and releases any resources held
name|entityTable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"closing the hbase Connection"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

