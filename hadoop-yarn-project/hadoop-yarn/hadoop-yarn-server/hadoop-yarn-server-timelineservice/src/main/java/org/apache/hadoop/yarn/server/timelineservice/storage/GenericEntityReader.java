begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|TimelineReader
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|application
operator|.
name|ApplicationColumnPrefix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|application
operator|.
name|ApplicationTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|apptoflow
operator|.
name|AppToFlowColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|apptoflow
operator|.
name|AppToFlowRowKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|apptoflow
operator|.
name|AppToFlowTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|BaseTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|ColumnPrefix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|Separator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|TimelineStorageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|entity
operator|.
name|EntityColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|entity
operator|.
name|EntityColumnPrefix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|entity
operator|.
name|EntityRowKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|entity
operator|.
name|EntityTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Timeline entity reader for generic entities that are stored in the entity  * table.  */
end_comment

begin_class
DECL|class|GenericEntityReader
class|class
name|GenericEntityReader
extends|extends
name|TimelineEntityReader
block|{
DECL|field|ENTITY_TABLE
specifier|private
specifier|static
specifier|final
name|EntityTable
name|ENTITY_TABLE
init|=
operator|new
name|EntityTable
argument_list|()
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GenericEntityReader
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Used to look up the flow context.    */
DECL|field|appToFlowTable
specifier|private
specifier|final
name|AppToFlowTable
name|appToFlowTable
init|=
operator|new
name|AppToFlowTable
argument_list|()
decl_stmt|;
DECL|method|GenericEntityReader (String userId, String clusterId, String flowId, Long flowRunId, String appId, String entityType, Long limit, Long createdTimeBegin, Long createdTimeEnd, Long modifiedTimeBegin, Long modifiedTimeEnd, Map<String, Set<String>> relatesTo, Map<String, Set<String>> isRelatedTo, Map<String, Object> infoFilters, Map<String, String> configFilters, Set<String> metricFilters, Set<String> eventFilters, EnumSet<Field> fieldsToRetrieve, boolean sortedKeys)
specifier|public
name|GenericEntityReader
parameter_list|(
name|String
name|userId
parameter_list|,
name|String
name|clusterId
parameter_list|,
name|String
name|flowId
parameter_list|,
name|Long
name|flowRunId
parameter_list|,
name|String
name|appId
parameter_list|,
name|String
name|entityType
parameter_list|,
name|Long
name|limit
parameter_list|,
name|Long
name|createdTimeBegin
parameter_list|,
name|Long
name|createdTimeEnd
parameter_list|,
name|Long
name|modifiedTimeBegin
parameter_list|,
name|Long
name|modifiedTimeEnd
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|relatesTo
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|isRelatedTo
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|infoFilters
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configFilters
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|metricFilters
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|eventFilters
parameter_list|,
name|EnumSet
argument_list|<
name|Field
argument_list|>
name|fieldsToRetrieve
parameter_list|,
name|boolean
name|sortedKeys
parameter_list|)
block|{
name|super
argument_list|(
name|userId
argument_list|,
name|clusterId
argument_list|,
name|flowId
argument_list|,
name|flowRunId
argument_list|,
name|appId
argument_list|,
name|entityType
argument_list|,
name|limit
argument_list|,
name|createdTimeBegin
argument_list|,
name|createdTimeEnd
argument_list|,
name|modifiedTimeBegin
argument_list|,
name|modifiedTimeEnd
argument_list|,
name|relatesTo
argument_list|,
name|isRelatedTo
argument_list|,
name|infoFilters
argument_list|,
name|configFilters
argument_list|,
name|metricFilters
argument_list|,
name|eventFilters
argument_list|,
name|fieldsToRetrieve
argument_list|,
name|sortedKeys
argument_list|)
expr_stmt|;
block|}
DECL|method|GenericEntityReader (String userId, String clusterId, String flowId, Long flowRunId, String appId, String entityType, String entityId, EnumSet<Field> fieldsToRetrieve)
specifier|public
name|GenericEntityReader
parameter_list|(
name|String
name|userId
parameter_list|,
name|String
name|clusterId
parameter_list|,
name|String
name|flowId
parameter_list|,
name|Long
name|flowRunId
parameter_list|,
name|String
name|appId
parameter_list|,
name|String
name|entityType
parameter_list|,
name|String
name|entityId
parameter_list|,
name|EnumSet
argument_list|<
name|Field
argument_list|>
name|fieldsToRetrieve
parameter_list|)
block|{
name|super
argument_list|(
name|userId
argument_list|,
name|clusterId
argument_list|,
name|flowId
argument_list|,
name|flowRunId
argument_list|,
name|appId
argument_list|,
name|entityType
argument_list|,
name|entityId
argument_list|,
name|fieldsToRetrieve
argument_list|)
expr_stmt|;
block|}
comment|/**    * Uses the {@link EntityTable}.    */
DECL|method|getTable ()
specifier|protected
name|BaseTable
argument_list|<
name|?
argument_list|>
name|getTable
parameter_list|()
block|{
return|return
name|ENTITY_TABLE
return|;
block|}
DECL|method|lookupFlowContext (String clusterId, String appId, Configuration hbaseConf, Connection conn)
specifier|protected
name|FlowContext
name|lookupFlowContext
parameter_list|(
name|String
name|clusterId
parameter_list|,
name|String
name|appId
parameter_list|,
name|Configuration
name|hbaseConf
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|rowKey
init|=
name|AppToFlowRowKey
operator|.
name|getRowKey
argument_list|(
name|clusterId
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|appToFlowTable
operator|.
name|getResult
argument_list|(
name|hbaseConf
argument_list|,
name|conn
argument_list|,
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|FlowContext
argument_list|(
name|AppToFlowColumn
operator|.
name|USER_ID
operator|.
name|readResult
argument_list|(
name|result
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|AppToFlowColumn
operator|.
name|FLOW_ID
operator|.
name|readResult
argument_list|(
name|result
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|AppToFlowColumn
operator|.
name|FLOW_RUN_ID
operator|.
name|readResult
argument_list|(
name|result
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to find the context flow ID and flow run ID for clusterId="
operator|+
name|clusterId
operator|+
literal|", appId="
operator|+
name|appId
argument_list|)
throw|;
block|}
block|}
DECL|class|FlowContext
specifier|protected
specifier|static
class|class
name|FlowContext
block|{
DECL|field|userId
specifier|protected
specifier|final
name|String
name|userId
decl_stmt|;
DECL|field|flowId
specifier|protected
specifier|final
name|String
name|flowId
decl_stmt|;
DECL|field|flowRunId
specifier|protected
specifier|final
name|Long
name|flowRunId
decl_stmt|;
DECL|method|FlowContext (String user, String flowId, Long flowRunId)
specifier|public
name|FlowContext
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|flowId
parameter_list|,
name|Long
name|flowRunId
parameter_list|)
block|{
name|this
operator|.
name|userId
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|flowId
operator|=
name|flowId
expr_stmt|;
name|this
operator|.
name|flowRunId
operator|=
name|flowRunId
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|validateParams ()
specifier|protected
name|void
name|validateParams
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|clusterId
argument_list|,
literal|"clusterId shouldn't be null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|appId
argument_list|,
literal|"appId shouldn't be null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|entityType
argument_list|,
literal|"entityType shouldn't be null"
argument_list|)
expr_stmt|;
if|if
condition|(
name|singleEntityRead
condition|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|entityId
argument_list|,
literal|"entityId shouldn't be null"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|augmentParams (Configuration hbaseConf, Connection conn)
specifier|protected
name|void
name|augmentParams
parameter_list|(
name|Configuration
name|hbaseConf
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
comment|// In reality all three should be null or neither should be null
if|if
condition|(
name|flowId
operator|==
literal|null
operator|||
name|flowRunId
operator|==
literal|null
operator|||
name|userId
operator|==
literal|null
condition|)
block|{
name|FlowContext
name|context
init|=
name|lookupFlowContext
argument_list|(
name|clusterId
argument_list|,
name|appId
argument_list|,
name|hbaseConf
argument_list|,
name|conn
argument_list|)
decl_stmt|;
name|flowId
operator|=
name|context
operator|.
name|flowId
expr_stmt|;
name|flowRunId
operator|=
name|context
operator|.
name|flowRunId
expr_stmt|;
name|userId
operator|=
name|context
operator|.
name|userId
expr_stmt|;
block|}
if|if
condition|(
name|fieldsToRetrieve
operator|==
literal|null
condition|)
block|{
name|fieldsToRetrieve
operator|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Field
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|singleEntityRead
condition|)
block|{
if|if
condition|(
name|limit
operator|==
literal|null
operator|||
name|limit
operator|<
literal|0
condition|)
block|{
name|limit
operator|=
name|TimelineReader
operator|.
name|DEFAULT_LIMIT
expr_stmt|;
block|}
if|if
condition|(
name|createdTimeBegin
operator|==
literal|null
condition|)
block|{
name|createdTimeBegin
operator|=
name|DEFAULT_BEGIN_TIME
expr_stmt|;
block|}
if|if
condition|(
name|createdTimeEnd
operator|==
literal|null
condition|)
block|{
name|createdTimeEnd
operator|=
name|DEFAULT_END_TIME
expr_stmt|;
block|}
if|if
condition|(
name|modifiedTimeBegin
operator|==
literal|null
condition|)
block|{
name|modifiedTimeBegin
operator|=
name|DEFAULT_BEGIN_TIME
expr_stmt|;
block|}
if|if
condition|(
name|modifiedTimeEnd
operator|==
literal|null
condition|)
block|{
name|modifiedTimeEnd
operator|=
name|DEFAULT_END_TIME
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getResult (Configuration hbaseConf, Connection conn)
specifier|protected
name|Result
name|getResult
parameter_list|(
name|Configuration
name|hbaseConf
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|rowKey
init|=
name|EntityRowKey
operator|.
name|getRowKey
argument_list|(
name|clusterId
argument_list|,
name|userId
argument_list|,
name|flowId
argument_list|,
name|flowRunId
argument_list|,
name|appId
argument_list|,
name|entityType
argument_list|,
name|entityId
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
return|return
name|table
operator|.
name|getResult
argument_list|(
name|hbaseConf
argument_list|,
name|conn
argument_list|,
name|get
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getResults (Configuration hbaseConf, Connection conn)
specifier|protected
name|ResultScanner
name|getResults
parameter_list|(
name|Configuration
name|hbaseConf
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Scan through part of the table to find the entities belong to one app
comment|// and one type
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setRowPrefixFilter
argument_list|(
name|EntityRowKey
operator|.
name|getRowKeyPrefix
argument_list|(
name|clusterId
argument_list|,
name|userId
argument_list|,
name|flowId
argument_list|,
name|flowRunId
argument_list|,
name|appId
argument_list|,
name|entityType
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
return|return
name|table
operator|.
name|getResultScanner
argument_list|(
name|hbaseConf
argument_list|,
name|conn
argument_list|,
name|scan
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|parseEntity (Result result)
specifier|protected
name|TimelineEntity
name|parseEntity
parameter_list|(
name|Result
name|result
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|result
operator|==
literal|null
operator|||
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|TimelineEntity
name|entity
init|=
operator|new
name|TimelineEntity
argument_list|()
decl_stmt|;
name|String
name|entityType
init|=
name|EntityColumn
operator|.
name|TYPE
operator|.
name|readResult
argument_list|(
name|result
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|entity
operator|.
name|setType
argument_list|(
name|entityType
argument_list|)
expr_stmt|;
name|String
name|entityId
init|=
name|EntityColumn
operator|.
name|ID
operator|.
name|readResult
argument_list|(
name|result
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|entity
operator|.
name|setId
argument_list|(
name|entityId
argument_list|)
expr_stmt|;
comment|// fetch created time
name|Number
name|createdTime
init|=
operator|(
name|Number
operator|)
name|EntityColumn
operator|.
name|CREATED_TIME
operator|.
name|readResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|entity
operator|.
name|setCreatedTime
argument_list|(
name|createdTime
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|singleEntityRead
operator|&&
operator|(
name|entity
operator|.
name|getCreatedTime
argument_list|()
operator|<
name|createdTimeBegin
operator|||
name|entity
operator|.
name|getCreatedTime
argument_list|()
operator|>
name|createdTimeEnd
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// fetch modified time
name|Number
name|modifiedTime
init|=
operator|(
name|Number
operator|)
name|EntityColumn
operator|.
name|MODIFIED_TIME
operator|.
name|readResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|entity
operator|.
name|setModifiedTime
argument_list|(
name|modifiedTime
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|singleEntityRead
operator|&&
operator|(
name|entity
operator|.
name|getModifiedTime
argument_list|()
operator|<
name|modifiedTimeBegin
operator|||
name|entity
operator|.
name|getModifiedTime
argument_list|()
operator|>
name|modifiedTimeEnd
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// fetch is related to entities
name|boolean
name|checkIsRelatedTo
init|=
name|isRelatedTo
operator|!=
literal|null
operator|&&
name|isRelatedTo
operator|.
name|size
argument_list|()
operator|>
literal|0
decl_stmt|;
if|if
condition|(
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
operator|||
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|IS_RELATED_TO
argument_list|)
operator|||
name|checkIsRelatedTo
condition|)
block|{
name|readRelationship
argument_list|(
name|entity
argument_list|,
name|result
argument_list|,
name|EntityColumnPrefix
operator|.
name|IS_RELATED_TO
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkIsRelatedTo
operator|&&
operator|!
name|TimelineStorageUtils
operator|.
name|matchRelations
argument_list|(
name|entity
operator|.
name|getIsRelatedToEntities
argument_list|()
argument_list|,
name|isRelatedTo
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
operator|&&
operator|!
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|IS_RELATED_TO
argument_list|)
condition|)
block|{
name|entity
operator|.
name|getIsRelatedToEntities
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|// fetch relates to entities
name|boolean
name|checkRelatesTo
init|=
name|relatesTo
operator|!=
literal|null
operator|&&
name|relatesTo
operator|.
name|size
argument_list|()
operator|>
literal|0
decl_stmt|;
if|if
condition|(
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
operator|||
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|RELATES_TO
argument_list|)
operator|||
name|checkRelatesTo
condition|)
block|{
name|readRelationship
argument_list|(
name|entity
argument_list|,
name|result
argument_list|,
name|EntityColumnPrefix
operator|.
name|RELATES_TO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkRelatesTo
operator|&&
operator|!
name|TimelineStorageUtils
operator|.
name|matchRelations
argument_list|(
name|entity
operator|.
name|getRelatesToEntities
argument_list|()
argument_list|,
name|relatesTo
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
operator|&&
operator|!
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|RELATES_TO
argument_list|)
condition|)
block|{
name|entity
operator|.
name|getRelatesToEntities
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|// fetch info
name|boolean
name|checkInfo
init|=
name|infoFilters
operator|!=
literal|null
operator|&&
name|infoFilters
operator|.
name|size
argument_list|()
operator|>
literal|0
decl_stmt|;
if|if
condition|(
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
operator|||
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|INFO
argument_list|)
operator|||
name|checkInfo
condition|)
block|{
name|readKeyValuePairs
argument_list|(
name|entity
argument_list|,
name|result
argument_list|,
name|EntityColumnPrefix
operator|.
name|INFO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkInfo
operator|&&
operator|!
name|TimelineStorageUtils
operator|.
name|matchFilters
argument_list|(
name|entity
operator|.
name|getInfo
argument_list|()
argument_list|,
name|infoFilters
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
operator|&&
operator|!
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|INFO
argument_list|)
condition|)
block|{
name|entity
operator|.
name|getInfo
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|// fetch configs
name|boolean
name|checkConfigs
init|=
name|configFilters
operator|!=
literal|null
operator|&&
name|configFilters
operator|.
name|size
argument_list|()
operator|>
literal|0
decl_stmt|;
if|if
condition|(
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
operator|||
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|CONFIGS
argument_list|)
operator|||
name|checkConfigs
condition|)
block|{
name|readKeyValuePairs
argument_list|(
name|entity
argument_list|,
name|result
argument_list|,
name|EntityColumnPrefix
operator|.
name|CONFIG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkConfigs
operator|&&
operator|!
name|TimelineStorageUtils
operator|.
name|matchFilters
argument_list|(
name|entity
operator|.
name|getConfigs
argument_list|()
argument_list|,
name|configFilters
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
operator|&&
operator|!
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|CONFIGS
argument_list|)
condition|)
block|{
name|entity
operator|.
name|getConfigs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|// fetch events
name|boolean
name|checkEvents
init|=
name|eventFilters
operator|!=
literal|null
operator|&&
name|eventFilters
operator|.
name|size
argument_list|()
operator|>
literal|0
decl_stmt|;
if|if
condition|(
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
operator|||
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|EVENTS
argument_list|)
operator|||
name|checkEvents
condition|)
block|{
name|readEvents
argument_list|(
name|entity
argument_list|,
name|result
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkEvents
operator|&&
operator|!
name|TimelineStorageUtils
operator|.
name|matchEventFilters
argument_list|(
name|entity
operator|.
name|getEvents
argument_list|()
argument_list|,
name|eventFilters
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
operator|&&
operator|!
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|EVENTS
argument_list|)
condition|)
block|{
name|entity
operator|.
name|getEvents
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|// fetch metrics
name|boolean
name|checkMetrics
init|=
name|metricFilters
operator|!=
literal|null
operator|&&
name|metricFilters
operator|.
name|size
argument_list|()
operator|>
literal|0
decl_stmt|;
if|if
condition|(
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
operator|||
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|METRICS
argument_list|)
operator|||
name|checkMetrics
condition|)
block|{
name|readMetrics
argument_list|(
name|entity
argument_list|,
name|result
argument_list|,
name|EntityColumnPrefix
operator|.
name|METRIC
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkMetrics
operator|&&
operator|!
name|TimelineStorageUtils
operator|.
name|matchMetricFilters
argument_list|(
name|entity
operator|.
name|getMetrics
argument_list|()
argument_list|,
name|metricFilters
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
operator|&&
operator|!
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|METRICS
argument_list|)
condition|)
block|{
name|entity
operator|.
name|getMetrics
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|entity
return|;
block|}
comment|/**    * Helper method for reading relationship.    */
DECL|method|readRelationship ( TimelineEntity entity, Result result, ColumnPrefix<T> prefix, boolean isRelatedTo)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|void
name|readRelationship
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|Result
name|result
parameter_list|,
name|ColumnPrefix
argument_list|<
name|T
argument_list|>
name|prefix
parameter_list|,
name|boolean
name|isRelatedTo
parameter_list|)
throws|throws
name|IOException
block|{
comment|// isRelatedTo and relatesTo are of type Map<String, Set<String>>
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|columns
init|=
name|prefix
operator|.
name|readResults
argument_list|(
name|result
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|column
range|:
name|columns
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|id
range|:
name|Separator
operator|.
name|VALUES
operator|.
name|splitEncoded
argument_list|(
name|column
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|isRelatedTo
condition|)
block|{
name|entity
operator|.
name|addIsRelatedToEntity
argument_list|(
name|column
operator|.
name|getKey
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entity
operator|.
name|addRelatesToEntity
argument_list|(
name|column
operator|.
name|getKey
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Helper method for reading key-value pairs for either info or config.    */
DECL|method|readKeyValuePairs ( TimelineEntity entity, Result result, ColumnPrefix<T> prefix, boolean isConfig)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|void
name|readKeyValuePairs
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|Result
name|result
parameter_list|,
name|ColumnPrefix
argument_list|<
name|T
argument_list|>
name|prefix
parameter_list|,
name|boolean
name|isConfig
parameter_list|)
throws|throws
name|IOException
block|{
comment|// info and configuration are of type Map<String, Object or String>
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|columns
init|=
name|prefix
operator|.
name|readResults
argument_list|(
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|isConfig
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|column
range|:
name|columns
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|entity
operator|.
name|addConfig
argument_list|(
name|column
operator|.
name|getKey
argument_list|()
argument_list|,
name|column
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|entity
operator|.
name|addInfo
argument_list|(
name|columns
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Read events from the entity table or the application table. The column name    * is of the form "eventId=timestamp=infoKey" where "infoKey" may be omitted    * if there is no info associated with the event.    *    * See {@link EntityTable} and {@link ApplicationTable} for a more detailed    * schema description.    */
DECL|method|readEvents (TimelineEntity entity, Result result, boolean isApplication)
specifier|protected
name|void
name|readEvents
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|Result
name|result
parameter_list|,
name|boolean
name|isApplication
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|TimelineEvent
argument_list|>
name|eventsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|Object
argument_list|>
name|eventsResult
init|=
name|isApplication
condition|?
name|ApplicationColumnPrefix
operator|.
name|EVENT
operator|.
name|readResultsHavingCompoundColumnQualifiers
argument_list|(
name|result
argument_list|)
else|:
name|EntityColumnPrefix
operator|.
name|EVENT
operator|.
name|readResultsHavingCompoundColumnQualifiers
argument_list|(
name|result
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|Object
argument_list|>
name|eventResult
range|:
name|eventsResult
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
index|[]
name|karr
init|=
operator|(
name|byte
index|[]
index|[]
operator|)
name|eventResult
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|// the column name is of the form "eventId=timestamp=infoKey"
if|if
condition|(
name|karr
operator|.
name|length
operator|==
literal|3
condition|)
block|{
name|String
name|id
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|karr
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
name|TimelineStorageUtils
operator|.
name|invertLong
argument_list|(
name|Bytes
operator|.
name|toLong
argument_list|(
name|karr
index|[
literal|1
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|Separator
operator|.
name|VALUES
operator|.
name|joinEncoded
argument_list|(
name|id
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|ts
argument_list|)
argument_list|)
decl_stmt|;
name|TimelineEvent
name|event
init|=
name|eventsMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
name|event
operator|=
operator|new
name|TimelineEvent
argument_list|()
expr_stmt|;
name|event
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|event
operator|.
name|setTimestamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|eventsMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
comment|// handle empty info
name|String
name|infoKey
init|=
name|karr
index|[
literal|2
index|]
operator|.
name|length
operator|==
literal|0
condition|?
literal|null
else|:
name|Bytes
operator|.
name|toString
argument_list|(
name|karr
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|infoKey
operator|!=
literal|null
condition|)
block|{
name|event
operator|.
name|addInfo
argument_list|(
name|infoKey
argument_list|,
name|eventResult
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"incorrectly formatted column name: it will be discarded"
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|Set
argument_list|<
name|TimelineEvent
argument_list|>
name|eventsSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|eventsMap
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|entity
operator|.
name|addEvents
argument_list|(
name|eventsSet
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

