begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.reader.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|ForbiddenException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|TimelineReaderWebServicesUtils
import|;
end_import

begin_comment
comment|/**  * Filter to check if a particular user is allowed to read ATSv2 data.  */
end_comment

begin_class
DECL|class|TimelineReaderWhitelistAuthorizationFilter
specifier|public
class|class
name|TimelineReaderWhitelistAuthorizationFilter
implements|implements
name|Filter
block|{
DECL|field|EMPTY_STRING
specifier|public
specifier|static
specifier|final
name|String
name|EMPTY_STRING
init|=
literal|""
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TimelineReaderWhitelistAuthorizationFilter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|isWhitelistReadAuthEnabled
specifier|private
name|boolean
name|isWhitelistReadAuthEnabled
init|=
literal|false
decl_stmt|;
DECL|field|allowedUsersAclList
specifier|private
name|AccessControlList
name|allowedUsersAclList
decl_stmt|;
DECL|field|adminAclList
specifier|private
name|AccessControlList
name|adminAclList
decl_stmt|;
annotation|@
name|Override
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{
comment|// NOTHING
block|}
annotation|@
name|Override
DECL|method|doFilter (ServletRequest request, ServletResponse response, FilterChain chain)
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|request
parameter_list|,
name|ServletResponse
name|response
parameter_list|,
name|FilterChain
name|chain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
if|if
condition|(
name|isWhitelistReadAuthEnabled
condition|)
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|TimelineReaderWebServicesUtils
operator|.
name|getCallerUserGroupInformation
argument_list|(
operator|(
name|HttpServletRequest
operator|)
name|request
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"Unable to obtain user name, user not authenticated"
decl_stmt|;
throw|throw
operator|new
name|AuthorizationException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|adminAclList
operator|.
name|isUserAllowed
argument_list|(
name|callerUGI
argument_list|)
operator|||
name|allowedUsersAclList
operator|.
name|isUserAllowed
argument_list|(
name|callerUGI
argument_list|)
operator|)
condition|)
block|{
name|String
name|userName
init|=
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|String
name|msg
init|=
literal|"User "
operator|+
name|userName
operator|+
literal|" is not allowed to read TimelineService V2 data."
decl_stmt|;
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|entity
argument_list|(
name|msg
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|ForbiddenException
argument_list|(
literal|"user "
operator|+
name|userName
operator|+
literal|" is not allowed to read TimelineService V2 data"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|chain
operator|!=
literal|null
condition|)
block|{
name|chain
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|init (FilterConfig conf)
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|conf
parameter_list|)
throws|throws
name|ServletException
block|{
name|String
name|isWhitelistReadAuthEnabledStr
init|=
name|conf
operator|.
name|getInitParameter
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_READ_AUTH_ENABLED
argument_list|)
decl_stmt|;
if|if
condition|(
name|isWhitelistReadAuthEnabledStr
operator|==
literal|null
condition|)
block|{
name|isWhitelistReadAuthEnabled
operator|=
name|YarnConfiguration
operator|.
name|DEFAULT_TIMELINE_SERVICE_READ_AUTH_ENABLED
expr_stmt|;
block|}
else|else
block|{
name|isWhitelistReadAuthEnabled
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isWhitelistReadAuthEnabledStr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isWhitelistReadAuthEnabled
condition|)
block|{
name|String
name|listAllowedUsers
init|=
name|conf
operator|.
name|getInitParameter
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_READ_ALLOWED_USERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|listAllowedUsers
argument_list|)
condition|)
block|{
name|listAllowedUsers
operator|=
name|YarnConfiguration
operator|.
name|DEFAULT_TIMELINE_SERVICE_READ_ALLOWED_USERS
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"listAllowedUsers="
operator|+
name|listAllowedUsers
argument_list|)
expr_stmt|;
name|allowedUsersAclList
operator|=
operator|new
name|AccessControlList
argument_list|(
name|listAllowedUsers
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"allowedUsersAclList="
operator|+
name|allowedUsersAclList
operator|.
name|getUsers
argument_list|()
argument_list|)
expr_stmt|;
comment|// also allow admins
name|String
name|adminAclListStr
init|=
name|conf
operator|.
name|getInitParameter
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|adminAclListStr
argument_list|)
condition|)
block|{
name|adminAclListStr
operator|=
name|TimelineReaderWhitelistAuthorizationFilter
operator|.
name|EMPTY_STRING
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"adminAclList not set, hence setting it to \"\""
argument_list|)
expr_stmt|;
block|}
name|adminAclList
operator|=
operator|new
name|AccessControlList
argument_list|(
name|adminAclListStr
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"adminAclList="
operator|+
name|adminAclList
operator|.
name|getUsers
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

