begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.collector
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|collector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ShutdownHookManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|YarnUncaughtExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ApplicationInitializationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ApplicationTerminationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|AuxiliaryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ContainerInitializationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ContainerTerminationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ContainerType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The top-level server for the per-node timeline collector manager. Currently  * it is defined as an auxiliary service to accommodate running within another  * daemon (e.g. node manager).  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|PerNodeTimelineCollectorsAuxService
specifier|public
class|class
name|PerNodeTimelineCollectorsAuxService
extends|extends
name|AuxiliaryService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PerNodeTimelineCollectorsAuxService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SHUTDOWN_HOOK_PRIORITY
specifier|private
specifier|static
specifier|final
name|int
name|SHUTDOWN_HOOK_PRIORITY
init|=
literal|30
decl_stmt|;
DECL|field|collectorManager
specifier|private
specifier|final
name|NodeTimelineCollectorManager
name|collectorManager
decl_stmt|;
DECL|field|collectorLingerPeriod
specifier|private
name|long
name|collectorLingerPeriod
decl_stmt|;
DECL|field|scheduler
specifier|private
name|ScheduledExecutorService
name|scheduler
decl_stmt|;
DECL|field|appIdToContainerId
specifier|private
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|Set
argument_list|<
name|ContainerId
argument_list|>
argument_list|>
name|appIdToContainerId
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|PerNodeTimelineCollectorsAuxService ()
specifier|public
name|PerNodeTimelineCollectorsAuxService
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|NodeTimelineCollectorManager
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|PerNodeTimelineCollectorsAuxService ( NodeTimelineCollectorManager collectorsManager)
annotation|@
name|VisibleForTesting
name|PerNodeTimelineCollectorsAuxService
parameter_list|(
name|NodeTimelineCollectorManager
name|collectorsManager
parameter_list|)
block|{
name|super
argument_list|(
literal|"timeline_collector"
argument_list|)
expr_stmt|;
name|this
operator|.
name|collectorManager
operator|=
name|collectorsManager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|YarnConfiguration
operator|.
name|timelineServiceV2Enabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Looks like timeline_collector is set as an auxillary service in "
operator|+
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICES
operator|+
literal|". But Timeline service v2 is not enabled,"
operator|+
literal|" so timeline_collector needs to be removed"
operator|+
literal|" from that list of auxillary services."
argument_list|)
throw|;
block|}
name|collectorLingerPeriod
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|ATS_APP_COLLECTOR_LINGER_PERIOD_IN_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_ATS_APP_COLLECTOR_LINGER_PERIOD_IN_MS
argument_list|)
expr_stmt|;
name|scheduler
operator|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|()
expr_stmt|;
name|collectorManager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|collectorManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|scheduler
operator|.
name|awaitTermination
argument_list|(
name|collectorLingerPeriod
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Scheduler terminated before removing the application collectors"
argument_list|)
expr_stmt|;
block|}
name|collectorManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
comment|// these methods can be used as the basis for future service methods if the
comment|// per-node collector runs separate from the node manager
comment|/**    * Creates and adds an app level collector for the specified application id.    * The collector is also initialized and started. If the service already    * exists, no new service is created.    *    * @param appId Application Id to be added.    * @param user Application Master container user.    * @return whether it was added successfully    */
DECL|method|addApplication (ApplicationId appId, String user)
specifier|public
name|boolean
name|addApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|user
parameter_list|)
block|{
name|AppLevelTimelineCollector
name|collector
init|=
operator|new
name|AppLevelTimelineCollectorWithAgg
argument_list|(
name|appId
argument_list|,
name|user
argument_list|)
decl_stmt|;
return|return
operator|(
name|collectorManager
operator|.
name|putIfAbsent
argument_list|(
name|appId
argument_list|,
name|collector
argument_list|)
operator|==
name|collector
operator|)
return|;
block|}
comment|/**    * Removes the app level collector for the specified application id. The    * collector is also stopped as a result. If the collector does not exist, no    * change is made.    *    * @param appId Application Id to be removed.    * @return whether it was removed successfully    */
DECL|method|removeApplication (ApplicationId appId)
specifier|public
name|boolean
name|removeApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
return|return
name|collectorManager
operator|.
name|remove
argument_list|(
name|appId
argument_list|)
return|;
block|}
comment|/**    * Creates and adds an app level collector for the specified application id.    * The collector is also initialized and started. If the collector already    * exists, no new collector is created.    */
annotation|@
name|Override
DECL|method|initializeContainer (ContainerInitializationContext context)
specifier|public
name|void
name|initializeContainer
parameter_list|(
name|ContainerInitializationContext
name|context
parameter_list|)
block|{
comment|// intercept the event of the AM container being created and initialize the
comment|// app level collector service
if|if
condition|(
name|context
operator|.
name|getContainerType
argument_list|()
operator|==
name|ContainerType
operator|.
name|APPLICATION_MASTER
condition|)
block|{
name|ApplicationId
name|appId
init|=
name|context
operator|.
name|getContainerId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|appIdToContainerId
init|)
block|{
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|masterContainers
init|=
name|appIdToContainerId
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|masterContainers
operator|==
literal|null
condition|)
block|{
name|masterContainers
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|appIdToContainerId
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|masterContainers
argument_list|)
expr_stmt|;
block|}
name|masterContainers
operator|.
name|add
argument_list|(
name|context
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|addApplication
argument_list|(
name|appId
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Removes the app level collector for the specified application id. The    * collector is also stopped as a result. If the collector does not exist, no    * change is made.    */
annotation|@
name|Override
DECL|method|stopContainer (ContainerTerminationContext context)
specifier|public
name|void
name|stopContainer
parameter_list|(
name|ContainerTerminationContext
name|context
parameter_list|)
block|{
comment|// intercept the event of the AM container being stopped and remove the app
comment|// level collector service
if|if
condition|(
name|context
operator|.
name|getContainerType
argument_list|()
operator|==
name|ContainerType
operator|.
name|APPLICATION_MASTER
condition|)
block|{
specifier|final
name|ContainerId
name|containerId
init|=
name|context
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|removeApplicationCollector
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|removeApplicationCollector (final ContainerId containerId)
specifier|protected
name|Future
name|removeApplicationCollector
parameter_list|(
specifier|final
name|ContainerId
name|containerId
parameter_list|)
block|{
specifier|final
name|ApplicationId
name|appId
init|=
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
return|return
name|scheduler
operator|.
name|schedule
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
synchronized|synchronized
init|(
name|appIdToContainerId
init|)
block|{
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|masterContainers
init|=
name|appIdToContainerId
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|masterContainers
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stop container for "
operator|+
name|containerId
operator|+
literal|" is called before initializing container."
argument_list|)
expr_stmt|;
return|return;
block|}
name|masterContainers
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
if|if
condition|(
name|masterContainers
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// remove only if it is last master container
name|removeApplication
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|appIdToContainerId
operator|.
name|remove
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|,
name|collectorLingerPeriod
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|hasApplication (ApplicationId appId)
name|boolean
name|hasApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
return|return
name|collectorManager
operator|.
name|containsTimelineCollector
argument_list|(
name|appId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|initializeApplication (ApplicationInitializationContext context)
specifier|public
name|void
name|initializeApplication
parameter_list|(
name|ApplicationInitializationContext
name|context
parameter_list|)
block|{   }
annotation|@
name|Override
DECL|method|stopApplication (ApplicationTerminationContext context)
specifier|public
name|void
name|stopApplication
parameter_list|(
name|ApplicationTerminationContext
name|context
parameter_list|)
block|{   }
annotation|@
name|Override
DECL|method|getMetaData ()
specifier|public
name|ByteBuffer
name|getMetaData
parameter_list|()
block|{
comment|// TODO currently it is not used; we can return a more meaningful data when
comment|// we connect it with an AM
return|return
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|PerNodeTimelineCollectorsAuxService
DECL|method|launchServer (String[] args, NodeTimelineCollectorManager collectorManager, Configuration conf)
name|launchServer
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|NodeTimelineCollectorManager
name|collectorManager
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|Thread
operator|.
name|setDefaultUncaughtExceptionHandler
argument_list|(
operator|new
name|YarnUncaughtExceptionHandler
argument_list|()
argument_list|)
expr_stmt|;
name|StringUtils
operator|.
name|startupShutdownMessage
argument_list|(
name|PerNodeTimelineCollectorsAuxService
operator|.
name|class
argument_list|,
name|args
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|PerNodeTimelineCollectorsAuxService
name|auxService
init|=
literal|null
decl_stmt|;
try|try
block|{
name|auxService
operator|=
name|collectorManager
operator|==
literal|null
condition|?
operator|new
name|PerNodeTimelineCollectorsAuxService
argument_list|(
operator|new
name|NodeTimelineCollectorManager
argument_list|(
literal|false
argument_list|)
argument_list|)
else|:
operator|new
name|PerNodeTimelineCollectorsAuxService
argument_list|(
name|collectorManager
argument_list|)
expr_stmt|;
name|ShutdownHookManager
operator|.
name|get
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|ShutdownHook
argument_list|(
name|auxService
argument_list|)
argument_list|,
name|SHUTDOWN_HOOK_PRIORITY
argument_list|)
expr_stmt|;
name|auxService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|auxService
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error starting PerNodeTimelineCollectorServer"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|ExitUtil
operator|.
name|terminate
argument_list|(
operator|-
literal|1
argument_list|,
literal|"Error starting PerNodeTimelineCollectorServer"
argument_list|)
expr_stmt|;
block|}
return|return
name|auxService
return|;
block|}
DECL|class|ShutdownHook
specifier|private
specifier|static
class|class
name|ShutdownHook
implements|implements
name|Runnable
block|{
DECL|field|auxService
specifier|private
specifier|final
name|PerNodeTimelineCollectorsAuxService
name|auxService
decl_stmt|;
DECL|method|ShutdownHook (PerNodeTimelineCollectorsAuxService auxService)
specifier|public
name|ShutdownHook
parameter_list|(
name|PerNodeTimelineCollectorsAuxService
name|auxService
parameter_list|)
block|{
name|this
operator|.
name|auxService
operator|=
name|auxService
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|auxService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_VERSION
argument_list|,
literal|2.0f
argument_list|)
expr_stmt|;
name|launchServer
argument_list|(
name|args
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

