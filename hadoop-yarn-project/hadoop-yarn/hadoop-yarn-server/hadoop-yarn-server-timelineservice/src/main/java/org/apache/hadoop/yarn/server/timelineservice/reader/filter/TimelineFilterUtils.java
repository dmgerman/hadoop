begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.reader.filter
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|BinaryPrefixComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|ColumnPrefix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|QualifierFilter
import|;
end_import

begin_comment
comment|/**  * Set of utility methods used by timeline filter classes.  */
end_comment

begin_class
DECL|class|TimelineFilterUtils
specifier|public
specifier|final
class|class
name|TimelineFilterUtils
block|{
DECL|method|TimelineFilterUtils ()
specifier|private
name|TimelineFilterUtils
parameter_list|()
block|{   }
comment|/**    * Returns the equivalent HBase filter list's {@link Operator}.    * @param op    * @return HBase filter list's Operator.    */
DECL|method|getHBaseOperator (TimelineFilterList.Operator op)
specifier|private
specifier|static
name|Operator
name|getHBaseOperator
parameter_list|(
name|TimelineFilterList
operator|.
name|Operator
name|op
parameter_list|)
block|{
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|AND
case|:
return|return
name|Operator
operator|.
name|MUST_PASS_ALL
return|;
case|case
name|OR
case|:
return|return
name|Operator
operator|.
name|MUST_PASS_ONE
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid operator"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Returns the equivalent HBase compare filter's {@link CompareOp}.    * @param op    * @return HBase compare filter's CompareOp.    */
DECL|method|getHBaseCompareOp ( TimelineCompareOp op)
specifier|private
specifier|static
name|CompareOp
name|getHBaseCompareOp
parameter_list|(
name|TimelineCompareOp
name|op
parameter_list|)
block|{
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|LESS_THAN
case|:
return|return
name|CompareOp
operator|.
name|LESS
return|;
case|case
name|LESS_OR_EQUAL
case|:
return|return
name|CompareOp
operator|.
name|LESS_OR_EQUAL
return|;
case|case
name|EQUAL
case|:
return|return
name|CompareOp
operator|.
name|EQUAL
return|;
case|case
name|NOT_EQUAL
case|:
return|return
name|CompareOp
operator|.
name|NOT_EQUAL
return|;
case|case
name|GREATER_OR_EQUAL
case|:
return|return
name|CompareOp
operator|.
name|GREATER_OR_EQUAL
return|;
case|case
name|GREATER_THAN
case|:
return|return
name|CompareOp
operator|.
name|GREATER
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid compare operator"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Converts a {@link TimelinePrefixFilter} to an equivalent HBase    * {@link QualifierFilter}.    * @param colPrefix    * @param filter    * @return a {@link QualifierFilter} object    */
DECL|method|createHBaseColQualPrefixFilter ( ColumnPrefix<T> colPrefix, TimelinePrefixFilter filter)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Filter
name|createHBaseColQualPrefixFilter
parameter_list|(
name|ColumnPrefix
argument_list|<
name|T
argument_list|>
name|colPrefix
parameter_list|,
name|TimelinePrefixFilter
name|filter
parameter_list|)
block|{
return|return
operator|new
name|QualifierFilter
argument_list|(
name|getHBaseCompareOp
argument_list|(
name|filter
operator|.
name|getCompareOp
argument_list|()
argument_list|)
argument_list|,
operator|new
name|BinaryPrefixComparator
argument_list|(
name|colPrefix
operator|.
name|getColumnPrefixBytes
argument_list|(
name|filter
operator|.
name|getPrefix
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Creates equivalent HBase {@link FilterList} from {@link TimelineFilterList}    * while converting different timeline filters(of type {@link TimelineFilter})    * into their equivalent HBase filters.    *    * @param<T> Describes the type of column prefix.    * @param colPrefix column prefix which will be used for conversion.    * @param filterList timeline filter list which has to be converted.    * @return A {@link FilterList} object.    */
DECL|method|createHBaseFilterList (ColumnPrefix<T> colPrefix, TimelineFilterList filterList)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|FilterList
name|createHBaseFilterList
parameter_list|(
name|ColumnPrefix
argument_list|<
name|T
argument_list|>
name|colPrefix
parameter_list|,
name|TimelineFilterList
name|filterList
parameter_list|)
block|{
name|FilterList
name|list
init|=
operator|new
name|FilterList
argument_list|(
name|getHBaseOperator
argument_list|(
name|filterList
operator|.
name|getOperator
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|TimelineFilter
name|filter
range|:
name|filterList
operator|.
name|getFilterList
argument_list|()
control|)
block|{
switch|switch
condition|(
name|filter
operator|.
name|getFilterType
argument_list|()
condition|)
block|{
case|case
name|LIST
case|:
name|list
operator|.
name|addFilter
argument_list|(
name|createHBaseFilterList
argument_list|(
name|colPrefix
argument_list|,
operator|(
name|TimelineFilterList
operator|)
name|filter
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|PREFIX
case|:
name|list
operator|.
name|addFilter
argument_list|(
name|createHBaseColQualPrefixFilter
argument_list|(
name|colPrefix
argument_list|,
operator|(
name|TimelinePrefixFilter
operator|)
name|filter
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
return|return
name|list
return|;
block|}
block|}
end_class

end_unit

