begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntityType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|metrics
operator|.
name|ApplicationMetricsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|flow
operator|.
name|AggregationCompactionDimension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|flow
operator|.
name|AggregationOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|flow
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_comment
comment|/**  * A bunch of utility functions used across TimelineReader and TimelineWriter.  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Unstable
DECL|class|TimelineStorageUtils
specifier|public
specifier|final
class|class
name|TimelineStorageUtils
block|{
DECL|method|TimelineStorageUtils ()
specifier|private
name|TimelineStorageUtils
parameter_list|()
block|{   }
comment|/** empty bytes. */
DECL|field|EMPTY_BYTES
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_BYTES
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
comment|/** indicator for no limits for splitting. */
DECL|field|NO_LIMIT_SPLIT
specifier|public
specifier|static
specifier|final
name|int
name|NO_LIMIT_SPLIT
init|=
operator|-
literal|1
decl_stmt|;
comment|/** milliseconds in one day. */
DECL|field|MILLIS_ONE_DAY
specifier|public
specifier|static
specifier|final
name|long
name|MILLIS_ONE_DAY
init|=
literal|86400000L
decl_stmt|;
comment|/**    * Splits the source array into multiple array segments using the given    * separator, up to a maximum of count items. This will naturally produce    * copied byte arrays for each of the split segments. To identify the split    * ranges without the array copies, see {@link #splitRanges(byte[], byte[])}.    *    * @param source Source array.    * @param separator Separator represented as a byte array.    * @return byte[][] after splitting the source    */
DECL|method|split (byte[] source, byte[] separator)
specifier|public
specifier|static
name|byte
index|[]
index|[]
name|split
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|byte
index|[]
name|separator
parameter_list|)
block|{
return|return
name|split
argument_list|(
name|source
argument_list|,
name|separator
argument_list|,
name|NO_LIMIT_SPLIT
argument_list|)
return|;
block|}
comment|/**    * Splits the source array into multiple array segments using the given    * separator, up to a maximum of count items. This will naturally produce    * copied byte arrays for each of the split segments. To identify the split    * ranges without the array copies, see {@link #splitRanges(byte[], byte[])}.    *    * @param source Source array.    * @param separator Separator represented as a byte array.    * @param limit a non-positive value indicates no limit on number of segments.    * @return byte[][] after splitting the input source.    */
DECL|method|split (byte[] source, byte[] separator, int limit)
specifier|public
specifier|static
name|byte
index|[]
index|[]
name|split
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|byte
index|[]
name|separator
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|List
argument_list|<
name|Range
argument_list|>
name|segments
init|=
name|splitRanges
argument_list|(
name|source
argument_list|,
name|separator
argument_list|,
name|limit
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|splits
init|=
operator|new
name|byte
index|[
name|segments
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|segments
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Range
name|r
init|=
name|segments
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|byte
index|[]
name|tmp
init|=
operator|new
name|byte
index|[
name|r
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
name|tmp
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|source
argument_list|,
name|r
operator|.
name|start
argument_list|()
argument_list|,
name|tmp
argument_list|,
literal|0
argument_list|,
name|r
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|splits
index|[
name|i
index|]
operator|=
name|tmp
expr_stmt|;
block|}
return|return
name|splits
return|;
block|}
comment|/**    * Returns a list of ranges identifying [start, end) -- closed, open --    * positions within the source byte array that would be split using the    * separator byte array.    *    * @param source Source array.    * @param separator Separator represented as a byte array.    * @return a list of ranges.    */
DECL|method|splitRanges (byte[] source, byte[] separator)
specifier|public
specifier|static
name|List
argument_list|<
name|Range
argument_list|>
name|splitRanges
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|byte
index|[]
name|separator
parameter_list|)
block|{
return|return
name|splitRanges
argument_list|(
name|source
argument_list|,
name|separator
argument_list|,
name|NO_LIMIT_SPLIT
argument_list|)
return|;
block|}
comment|/**    * Returns a list of ranges identifying [start, end) -- closed, open --    * positions within the source byte array that would be split using the    * separator byte array.    *    * @param source the source data    * @param separator the separator pattern to look for    * @param limit the maximum number of splits to identify in the source    * @return a list of ranges.    */
DECL|method|splitRanges (byte[] source, byte[] separator, int limit)
specifier|public
specifier|static
name|List
argument_list|<
name|Range
argument_list|>
name|splitRanges
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|byte
index|[]
name|separator
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|List
argument_list|<
name|Range
argument_list|>
name|segments
init|=
operator|new
name|ArrayList
argument_list|<
name|Range
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|source
operator|==
literal|null
operator|)
operator|||
operator|(
name|separator
operator|==
literal|null
operator|)
condition|)
block|{
return|return
name|segments
return|;
block|}
name|int
name|start
init|=
literal|0
decl_stmt|;
name|itersource
label|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|source
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|separator
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|source
index|[
name|i
operator|+
name|j
index|]
operator|!=
name|separator
index|[
name|j
index|]
condition|)
block|{
continue|continue
name|itersource
continue|;
block|}
block|}
comment|// all separator elements matched
if|if
condition|(
name|limit
operator|>
literal|0
operator|&&
name|segments
operator|.
name|size
argument_list|()
operator|>=
operator|(
name|limit
operator|-
literal|1
operator|)
condition|)
block|{
comment|// everything else goes in one final segment
break|break;
block|}
name|segments
operator|.
name|add
argument_list|(
operator|new
name|Range
argument_list|(
name|start
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|start
operator|=
name|i
operator|+
name|separator
operator|.
name|length
expr_stmt|;
comment|// i will be incremented again in outer for loop
name|i
operator|+=
name|separator
operator|.
name|length
operator|-
literal|1
expr_stmt|;
block|}
comment|// add in remaining to a final range
if|if
condition|(
name|start
operator|<=
name|source
operator|.
name|length
condition|)
block|{
name|segments
operator|.
name|add
argument_list|(
operator|new
name|Range
argument_list|(
name|start
argument_list|,
name|source
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|segments
return|;
block|}
comment|/**    * Converts a timestamp into it's inverse timestamp to be used in (row) keys    * where we want to have the most recent timestamp in the top of the table    * (scans start at the most recent timestamp first).    *    * @param key value to be inverted so that the latest version will be first in    *          a scan.    * @return inverted long    */
DECL|method|invertLong (long key)
specifier|public
specifier|static
name|long
name|invertLong
parameter_list|(
name|long
name|key
parameter_list|)
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
operator|-
name|key
return|;
block|}
comment|/**    * Converts an int into it's inverse int to be used in (row) keys    * where we want to have the largest int value in the top of the table    * (scans start at the largest int first).    *    * @param key value to be inverted so that the latest version will be first in    *          a scan.    * @return inverted int    */
DECL|method|invertInt (int key)
specifier|public
specifier|static
name|int
name|invertInt
parameter_list|(
name|int
name|key
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
operator|-
name|key
return|;
block|}
comment|/**    * Converts/encodes a string app Id into a byte representation for (row) keys.    * For conversion, we extract cluster timestamp and sequence id from the    * string app id (calls {@link ConverterUtils#toApplicationId(String)} for    * conversion) and then store it in a byte array of length 12 (8 bytes (long)    * for cluster timestamp followed 4 bytes(int) for sequence id). Both cluster    * timestamp and sequence id are inverted so that the most recent cluster    * timestamp and highest sequence id appears first in the table (i.e.    * application id appears in a descending order).    *    * @param appIdStr application id in string format i.e.    * application_{cluster timestamp}_{sequence id with min 4 digits}    *    * @return encoded byte representation of app id.    */
DECL|method|encodeAppId (String appIdStr)
specifier|public
specifier|static
name|byte
index|[]
name|encodeAppId
parameter_list|(
name|String
name|appIdStr
parameter_list|)
block|{
name|ApplicationId
name|appId
init|=
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
name|appIdStr
argument_list|)
decl_stmt|;
name|byte
index|[]
name|appIdBytes
init|=
operator|new
name|byte
index|[
name|Bytes
operator|.
name|SIZEOF_LONG
operator|+
name|Bytes
operator|.
name|SIZEOF_INT
index|]
decl_stmt|;
name|byte
index|[]
name|clusterTs
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|invertLong
argument_list|(
name|appId
operator|.
name|getClusterTimestamp
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|clusterTs
argument_list|,
literal|0
argument_list|,
name|appIdBytes
argument_list|,
literal|0
argument_list|,
name|Bytes
operator|.
name|SIZEOF_LONG
argument_list|)
expr_stmt|;
name|byte
index|[]
name|seqId
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|invertInt
argument_list|(
name|appId
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|seqId
argument_list|,
literal|0
argument_list|,
name|appIdBytes
argument_list|,
name|Bytes
operator|.
name|SIZEOF_LONG
argument_list|,
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|)
expr_stmt|;
return|return
name|appIdBytes
return|;
block|}
comment|/**    * Converts/decodes a 12 byte representation of app id for (row) keys to an    * app id in string format which can be returned back to client.    * For decoding, 12 bytes are interpreted as 8 bytes of inverted cluster    * timestamp(long) followed by 4 bytes of inverted sequence id(int). Calls    * {@link ApplicationId#toString} to generate string representation of app id.    *    * @param appIdBytes application id in byte representation.    *    * @return decoded app id in string format.    */
DECL|method|decodeAppId (byte[] appIdBytes)
specifier|public
specifier|static
name|String
name|decodeAppId
parameter_list|(
name|byte
index|[]
name|appIdBytes
parameter_list|)
block|{
if|if
condition|(
name|appIdBytes
operator|.
name|length
operator|!=
operator|(
name|Bytes
operator|.
name|SIZEOF_LONG
operator|+
name|Bytes
operator|.
name|SIZEOF_INT
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid app id in byte format"
argument_list|)
throw|;
block|}
name|long
name|clusterTs
init|=
name|invertLong
argument_list|(
name|Bytes
operator|.
name|toLong
argument_list|(
name|appIdBytes
argument_list|,
literal|0
argument_list|,
name|Bytes
operator|.
name|SIZEOF_LONG
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|seqId
init|=
name|invertInt
argument_list|(
name|Bytes
operator|.
name|toInt
argument_list|(
name|appIdBytes
argument_list|,
name|Bytes
operator|.
name|SIZEOF_LONG
argument_list|,
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|clusterTs
argument_list|,
name|seqId
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * returns the timestamp of that day's start (which is midnight 00:00:00 AM)    * for a given input timestamp.    *    * @param ts Timestamp.    * @return timestamp of that day's beginning (midnight)    */
DECL|method|getTopOfTheDayTimestamp (long ts)
specifier|public
specifier|static
name|long
name|getTopOfTheDayTimestamp
parameter_list|(
name|long
name|ts
parameter_list|)
block|{
name|long
name|dayTimestamp
init|=
name|ts
operator|-
operator|(
name|ts
operator|%
name|MILLIS_ONE_DAY
operator|)
decl_stmt|;
return|return
name|dayTimestamp
return|;
block|}
comment|/**    * Combines the input array of attributes and the input aggregation operation    * into a new array of attributes.    *    * @param attributes Attributes to be combined.    * @param aggOp Aggregation operation.    * @return array of combined attributes.    */
DECL|method|combineAttributes (Attribute[] attributes, AggregationOperation aggOp)
specifier|public
specifier|static
name|Attribute
index|[]
name|combineAttributes
parameter_list|(
name|Attribute
index|[]
name|attributes
parameter_list|,
name|AggregationOperation
name|aggOp
parameter_list|)
block|{
name|int
name|newLength
init|=
name|getNewLengthCombinedAttributes
argument_list|(
name|attributes
argument_list|,
name|aggOp
argument_list|)
decl_stmt|;
name|Attribute
index|[]
name|combinedAttributes
init|=
operator|new
name|Attribute
index|[
name|newLength
index|]
decl_stmt|;
if|if
condition|(
name|attributes
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|attributes
argument_list|,
literal|0
argument_list|,
name|combinedAttributes
argument_list|,
literal|0
argument_list|,
name|attributes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|aggOp
operator|!=
literal|null
condition|)
block|{
name|Attribute
name|a2
init|=
name|aggOp
operator|.
name|getAttribute
argument_list|()
decl_stmt|;
name|combinedAttributes
index|[
name|newLength
operator|-
literal|1
index|]
operator|=
name|a2
expr_stmt|;
block|}
return|return
name|combinedAttributes
return|;
block|}
comment|/**    * Returns a number for the new array size. The new array is the combination    * of input array of attributes and the input aggregation operation.    *    * @param attributes Attributes.    * @param aggOp Aggregation operation.    * @return the size for the new array    */
DECL|method|getNewLengthCombinedAttributes (Attribute[] attributes, AggregationOperation aggOp)
specifier|private
specifier|static
name|int
name|getNewLengthCombinedAttributes
parameter_list|(
name|Attribute
index|[]
name|attributes
parameter_list|,
name|AggregationOperation
name|aggOp
parameter_list|)
block|{
name|int
name|oldLength
init|=
name|getAttributesLength
argument_list|(
name|attributes
argument_list|)
decl_stmt|;
name|int
name|aggLength
init|=
name|getAppOpLength
argument_list|(
name|aggOp
argument_list|)
decl_stmt|;
return|return
name|oldLength
operator|+
name|aggLength
return|;
block|}
DECL|method|getAppOpLength (AggregationOperation aggOp)
specifier|private
specifier|static
name|int
name|getAppOpLength
parameter_list|(
name|AggregationOperation
name|aggOp
parameter_list|)
block|{
if|if
condition|(
name|aggOp
operator|!=
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|method|getAttributesLength (Attribute[] attributes)
specifier|private
specifier|static
name|int
name|getAttributesLength
parameter_list|(
name|Attribute
index|[]
name|attributes
parameter_list|)
block|{
if|if
condition|(
name|attributes
operator|!=
literal|null
condition|)
block|{
return|return
name|attributes
operator|.
name|length
return|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * checks if an application has finished.    *    * @param te TimlineEntity object.    * @return true if application has finished else false    */
DECL|method|isApplicationFinished (TimelineEntity te)
specifier|public
specifier|static
name|boolean
name|isApplicationFinished
parameter_list|(
name|TimelineEntity
name|te
parameter_list|)
block|{
name|SortedSet
argument_list|<
name|TimelineEvent
argument_list|>
name|allEvents
init|=
name|te
operator|.
name|getEvents
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|allEvents
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|allEvents
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|TimelineEvent
name|event
init|=
name|allEvents
operator|.
name|last
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|FINISHED_EVENT_TYPE
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Checks if the input TimelineEntity object is an ApplicationEntity.    *    * @param te TimelineEntity object.    * @return true if input is an ApplicationEntity, false otherwise    */
DECL|method|isApplicationEntity (TimelineEntity te)
specifier|public
specifier|static
name|boolean
name|isApplicationEntity
parameter_list|(
name|TimelineEntity
name|te
parameter_list|)
block|{
return|return
name|te
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|TimelineEntityType
operator|.
name|YARN_APPLICATION
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @param te TimelineEntity object.    * @param eventId event with this id needs to be fetched    * @return TimelineEvent if TimelineEntity contains the desired event.    */
DECL|method|getApplicationEvent (TimelineEntity te, String eventId)
specifier|public
specifier|static
name|TimelineEvent
name|getApplicationEvent
parameter_list|(
name|TimelineEntity
name|te
parameter_list|,
name|String
name|eventId
parameter_list|)
block|{
if|if
condition|(
name|isApplicationEntity
argument_list|(
name|te
argument_list|)
condition|)
block|{
for|for
control|(
name|TimelineEvent
name|event
range|:
name|te
operator|.
name|getEvents
argument_list|()
control|)
block|{
if|if
condition|(
name|event
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|eventId
argument_list|)
condition|)
block|{
return|return
name|event
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Returns the first seen aggregation operation as seen in the list of input    * tags or null otherwise.    *    * @param tags list of HBase tags.    * @return AggregationOperation    */
DECL|method|getAggregationOperationFromTagsList ( List<Tag> tags)
specifier|public
specifier|static
name|AggregationOperation
name|getAggregationOperationFromTagsList
parameter_list|(
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
parameter_list|)
block|{
for|for
control|(
name|AggregationOperation
name|aggOp
range|:
name|AggregationOperation
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Tag
name|tag
range|:
name|tags
control|)
block|{
if|if
condition|(
name|tag
operator|.
name|getType
argument_list|()
operator|==
name|aggOp
operator|.
name|getTagType
argument_list|()
condition|)
block|{
return|return
name|aggOp
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Creates a {@link Tag} from the input attribute.    *    * @param attribute Attribute from which tag has to be fetched.    * @return a HBase Tag.    */
DECL|method|getTagFromAttribute (Entry<String, byte[]> attribute)
specifier|public
specifier|static
name|Tag
name|getTagFromAttribute
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attribute
parameter_list|)
block|{
comment|// attribute could be either an Aggregation Operation or
comment|// an Aggregation Dimension
comment|// Get the Tag type from either
name|AggregationOperation
name|aggOp
init|=
name|AggregationOperation
operator|.
name|getAggregationOperation
argument_list|(
name|attribute
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|aggOp
operator|!=
literal|null
condition|)
block|{
name|Tag
name|t
init|=
operator|new
name|Tag
argument_list|(
name|aggOp
operator|.
name|getTagType
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|t
return|;
block|}
name|AggregationCompactionDimension
name|aggCompactDim
init|=
name|AggregationCompactionDimension
operator|.
name|getAggregationCompactionDimension
argument_list|(
name|attribute
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|aggCompactDim
operator|!=
literal|null
condition|)
block|{
name|Tag
name|t
init|=
operator|new
name|Tag
argument_list|(
name|aggCompactDim
operator|.
name|getTagType
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|t
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    *    * @param entityRelations the relations of an entity    * @param relationFilters the relations for filtering    * @return a boolean flag to indicate if both match    */
DECL|method|matchRelations ( Map<String, Set<String>> entityRelations, Map<String, Set<String>> relationFilters)
specifier|public
specifier|static
name|boolean
name|matchRelations
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entityRelations
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|relationFilters
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|relation
range|:
name|relationFilters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|ids
init|=
name|entityRelations
operator|.
name|get
argument_list|(
name|relation
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ids
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|String
name|id
range|:
name|relation
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ids
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    *    * @param map the map of key/value pairs in an entity    * @param filters the map of key/value pairs for filtering    * @return a boolean flag to indicate if both match    */
DECL|method|matchFilters (Map<String, ? extends Object> map, Map<String, ? extends Object> filters)
specifier|public
specifier|static
name|boolean
name|matchFilters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|Object
argument_list|>
name|map
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|Object
argument_list|>
name|filters
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|Object
argument_list|>
name|filter
range|:
name|filters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Object
name|value
init|=
name|map
operator|.
name|get
argument_list|(
name|filter
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|filter
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    *    * @param entityEvents the set of event objects in an entity    * @param eventFilters the set of event Ids for filtering    * @return a boolean flag to indicate if both match    */
DECL|method|matchEventFilters (Set<TimelineEvent> entityEvents, Set<String> eventFilters)
specifier|public
specifier|static
name|boolean
name|matchEventFilters
parameter_list|(
name|Set
argument_list|<
name|TimelineEvent
argument_list|>
name|entityEvents
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|eventFilters
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|eventIds
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TimelineEvent
name|event
range|:
name|entityEvents
control|)
block|{
name|eventIds
operator|.
name|add
argument_list|(
name|event
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|eventFilter
range|:
name|eventFilters
control|)
block|{
if|if
condition|(
operator|!
name|eventIds
operator|.
name|contains
argument_list|(
name|eventFilter
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    *    * @param metrics the set of metric objects in an entity    * @param metricFilters the set of metric Ids for filtering    * @return a boolean flag to indicate if both match    */
DECL|method|matchMetricFilters (Set<TimelineMetric> metrics, Set<String> metricFilters)
specifier|public
specifier|static
name|boolean
name|matchMetricFilters
parameter_list|(
name|Set
argument_list|<
name|TimelineMetric
argument_list|>
name|metrics
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|metricFilters
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|metricIds
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TimelineMetric
name|metric
range|:
name|metrics
control|)
block|{
name|metricIds
operator|.
name|add
argument_list|(
name|metric
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|metricFilter
range|:
name|metricFilters
control|)
block|{
if|if
condition|(
operator|!
name|metricIds
operator|.
name|contains
argument_list|(
name|metricFilter
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Checks if passed object is of integral type(Short/Integer/Long).    *    * @param obj Object to be checked.    * @return true if object passed is of type Short or Integer or Long, false    * otherwise.    */
DECL|method|isIntegralValue (Object obj)
specifier|public
specifier|static
name|boolean
name|isIntegralValue
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
operator|(
name|obj
operator|instanceof
name|Short
operator|)
operator|||
operator|(
name|obj
operator|instanceof
name|Integer
operator|)
operator|||
operator|(
name|obj
operator|instanceof
name|Long
operator|)
return|;
block|}
comment|/**    * creates a new cell based on the input cell but with the new value.    *    * @param origCell Original cell    * @param newValue new cell value    * @return cell    * @throws IOException while creating new cell.    */
DECL|method|createNewCell (Cell origCell, byte[] newValue)
specifier|public
specifier|static
name|Cell
name|createNewCell
parameter_list|(
name|Cell
name|origCell
parameter_list|,
name|byte
index|[]
name|newValue
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|CellUtil
operator|.
name|createCell
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|origCell
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|origCell
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|origCell
argument_list|)
argument_list|,
name|origCell
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|,
name|newValue
argument_list|)
return|;
block|}
comment|/**    * creates a cell with the given inputs.    *    * @param row row of the cell to be created    * @param family column family name of the new cell    * @param qualifier qualifier for the new cell    * @param ts timestamp of the new cell    * @param newValue value of the new cell    * @param tags tags in the new cell    * @return cell    * @throws IOException while creating the cell.    */
DECL|method|createNewCell (byte[] row, byte[] family, byte[] qualifier, long ts, byte[] newValue, byte[] tags)
specifier|public
specifier|static
name|Cell
name|createNewCell
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|ts
parameter_list|,
name|byte
index|[]
name|newValue
parameter_list|,
name|byte
index|[]
name|tags
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|CellUtil
operator|.
name|createCell
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|newValue
argument_list|,
name|tags
argument_list|)
return|;
block|}
comment|/**    * returns app id from the list of tags.    *    * @param tags cell tags to be looked into    * @return App Id as the AggregationCompactionDimension    */
DECL|method|getAggregationCompactionDimension (List<Tag> tags)
specifier|public
specifier|static
name|String
name|getAggregationCompactionDimension
parameter_list|(
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
parameter_list|)
block|{
name|String
name|appId
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Tag
name|t
range|:
name|tags
control|)
block|{
if|if
condition|(
name|AggregationCompactionDimension
operator|.
name|APPLICATION_ID
operator|.
name|getTagType
argument_list|()
operator|==
name|t
operator|.
name|getType
argument_list|()
condition|)
block|{
name|appId
operator|=
name|Bytes
operator|.
name|toString
argument_list|(
name|t
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|appId
return|;
block|}
block|}
return|return
name|appId
return|;
block|}
block|}
end_class

end_unit

