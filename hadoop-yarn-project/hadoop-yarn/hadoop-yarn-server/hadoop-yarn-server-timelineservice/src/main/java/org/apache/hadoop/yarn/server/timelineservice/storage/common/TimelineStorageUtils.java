begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineCompareFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineCompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineExistsFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineFilter
operator|.
name|TimelineFilterType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineFilterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineKeyValueFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineKeyValuesFilter
import|;
end_import

begin_comment
comment|/**  * A bunch of utility functions used across TimelineReader and TimelineWriter.  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Unstable
DECL|class|TimelineStorageUtils
specifier|public
specifier|final
class|class
name|TimelineStorageUtils
block|{
DECL|method|TimelineStorageUtils ()
specifier|private
name|TimelineStorageUtils
parameter_list|()
block|{   }
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TimelineStorageUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Matches key-values filter. Used for relatesTo/isRelatedTo filters.    *    * @param entity entity which holds relatesTo/isRelatedTo relations which we    *     will match against.    * @param keyValuesFilter key-values filter.    * @param entityFiltersType type of filters we are trying to match.    * @return true, if filter matches, false otherwise.    */
DECL|method|matchKeyValuesFilter (TimelineEntity entity, TimelineKeyValuesFilter keyValuesFilter, TimelineEntityFiltersType entityFiltersType)
specifier|private
specifier|static
name|boolean
name|matchKeyValuesFilter
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|TimelineKeyValuesFilter
name|keyValuesFilter
parameter_list|,
name|TimelineEntityFiltersType
name|entityFiltersType
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|relations
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|entityFiltersType
operator|==
name|TimelineEntityFiltersType
operator|.
name|IS_RELATED_TO
condition|)
block|{
name|relations
operator|=
name|entity
operator|.
name|getIsRelatedToEntities
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|entityFiltersType
operator|==
name|TimelineEntityFiltersType
operator|.
name|RELATES_TO
condition|)
block|{
name|relations
operator|=
name|entity
operator|.
name|getRelatesToEntities
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|relations
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|ids
init|=
name|relations
operator|.
name|get
argument_list|(
name|keyValuesFilter
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ids
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|matched
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Object
name|id
range|:
name|keyValuesFilter
operator|.
name|getValues
argument_list|()
control|)
block|{
comment|// Matches if id is found amongst the relationships for an entity and
comment|// filter's compare op is EQUAL.
comment|// If compare op is NOT_EQUAL, for a match to occur, id should not be
comment|// found amongst relationships for an entity.
name|matched
operator|=
operator|!
operator|(
name|ids
operator|.
name|contains
argument_list|(
name|id
argument_list|)
operator|^
name|keyValuesFilter
operator|.
name|getCompareOp
argument_list|()
operator|==
name|TimelineCompareOp
operator|.
name|EQUAL
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|matched
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Matches relatesto.    *    * @param entity entity which holds relatesto relations.    * @param relatesTo the relations for filtering.    * @return true, if filter matches, false otherwise.    * @throws IOException if an unsupported filter for matching relations is    *     being matched.    */
DECL|method|matchRelatesTo (TimelineEntity entity, TimelineFilterList relatesTo)
specifier|public
specifier|static
name|boolean
name|matchRelatesTo
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|TimelineFilterList
name|relatesTo
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|matchFilters
argument_list|(
name|entity
argument_list|,
name|relatesTo
argument_list|,
name|TimelineEntityFiltersType
operator|.
name|RELATES_TO
argument_list|)
return|;
block|}
comment|/**    * Matches isrelatedto.    *    * @param entity entity which holds isRelatedTo relations.    * @param isRelatedTo the relations for filtering.    * @return true, if filter matches, false otherwise.    * @throws IOException if an unsupported filter for matching relations is    *     being matched.    */
DECL|method|matchIsRelatedTo (TimelineEntity entity, TimelineFilterList isRelatedTo)
specifier|public
specifier|static
name|boolean
name|matchIsRelatedTo
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|TimelineFilterList
name|isRelatedTo
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|matchFilters
argument_list|(
name|entity
argument_list|,
name|isRelatedTo
argument_list|,
name|TimelineEntityFiltersType
operator|.
name|IS_RELATED_TO
argument_list|)
return|;
block|}
comment|/**    * Matches key-value filter. Used for config and info filters.    *    * @param entity entity which holds the config/info which we will match    *     against.    * @param kvFilter a key-value filter.    * @param entityFiltersType type of filters we are trying to match.    * @return true, if filter matches, false otherwise.    */
DECL|method|matchKeyValueFilter (TimelineEntity entity, TimelineKeyValueFilter kvFilter, TimelineEntityFiltersType entityFiltersType)
specifier|private
specifier|static
name|boolean
name|matchKeyValueFilter
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|TimelineKeyValueFilter
name|kvFilter
parameter_list|,
name|TimelineEntityFiltersType
name|entityFiltersType
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|Object
argument_list|>
name|map
init|=
literal|null
decl_stmt|;
comment|// Supported only for config and info filters.
if|if
condition|(
name|entityFiltersType
operator|==
name|TimelineEntityFiltersType
operator|.
name|CONFIG
condition|)
block|{
name|map
operator|=
name|entity
operator|.
name|getConfigs
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|entityFiltersType
operator|==
name|TimelineEntityFiltersType
operator|.
name|INFO
condition|)
block|{
name|map
operator|=
name|entity
operator|.
name|getInfo
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Object
name|value
init|=
name|map
operator|.
name|get
argument_list|(
name|kvFilter
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Matches if filter's value is equal to the value of the key and filter's
comment|// compare op is EQUAL.
comment|// If compare op is NOT_EQUAL, for a match to occur, value should not be
comment|// equal to the value of the key.
return|return
operator|!
operator|(
name|value
operator|.
name|equals
argument_list|(
name|kvFilter
operator|.
name|getValue
argument_list|()
argument_list|)
operator|^
name|kvFilter
operator|.
name|getCompareOp
argument_list|()
operator|==
name|TimelineCompareOp
operator|.
name|EQUAL
operator|)
return|;
block|}
comment|/**    * Matches config filters.    *    * @param entity entity which holds a map of config key-value pairs.    * @param configFilters list of info filters.    * @return a boolean flag to indicate if both match.    * @throws IOException if an unsupported filter for matching config filters is    *     being matched.    */
DECL|method|matchConfigFilters (TimelineEntity entity, TimelineFilterList configFilters)
specifier|public
specifier|static
name|boolean
name|matchConfigFilters
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|TimelineFilterList
name|configFilters
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|matchFilters
argument_list|(
name|entity
argument_list|,
name|configFilters
argument_list|,
name|TimelineEntityFiltersType
operator|.
name|CONFIG
argument_list|)
return|;
block|}
comment|/**    * Matches info filters.    *    * @param entity entity which holds a map of info key-value pairs.    * @param infoFilters list of info filters.    * @return a boolean flag to indicate if both match.    * @throws IOException if an unsupported filter for matching info filters is    *     being matched.    */
DECL|method|matchInfoFilters (TimelineEntity entity, TimelineFilterList infoFilters)
specifier|public
specifier|static
name|boolean
name|matchInfoFilters
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|TimelineFilterList
name|infoFilters
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|matchFilters
argument_list|(
name|entity
argument_list|,
name|infoFilters
argument_list|,
name|TimelineEntityFiltersType
operator|.
name|INFO
argument_list|)
return|;
block|}
comment|/**    * Matches exists filter. Used for event filters.    *    * @param entity entity which holds the events which we will match against.    * @param existsFilter exists filter.    * @param entityFiltersType type of filters we are trying to match.    * @return true, if filter matches, false otherwise.    */
DECL|method|matchExistsFilter (TimelineEntity entity, TimelineExistsFilter existsFilter, TimelineEntityFiltersType entityFiltersType)
specifier|private
specifier|static
name|boolean
name|matchExistsFilter
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|TimelineExistsFilter
name|existsFilter
parameter_list|,
name|TimelineEntityFiltersType
name|entityFiltersType
parameter_list|)
block|{
comment|// Currently exists filter is only supported for event filters.
if|if
condition|(
name|entityFiltersType
operator|!=
name|TimelineEntityFiltersType
operator|.
name|EVENT
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|eventIds
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TimelineEvent
name|event
range|:
name|entity
operator|.
name|getEvents
argument_list|()
control|)
block|{
name|eventIds
operator|.
name|add
argument_list|(
name|event
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Matches if filter's value is contained in the list of events filter's
comment|// compare op is EQUAL.
comment|// If compare op is NOT_EQUAL, for a match to occur, value should not be
comment|// contained in the list of events.
return|return
operator|!
operator|(
name|eventIds
operator|.
name|contains
argument_list|(
name|existsFilter
operator|.
name|getValue
argument_list|()
argument_list|)
operator|^
name|existsFilter
operator|.
name|getCompareOp
argument_list|()
operator|==
name|TimelineCompareOp
operator|.
name|EQUAL
operator|)
return|;
block|}
comment|/**    * Matches event filters.    *    * @param entity entity which holds a set of event objects.    * @param eventFilters the set of event Ids for filtering.    * @return a boolean flag to indicate if both match.    * @throws IOException if an unsupported filter for matching event filters is    *     being matched.    */
DECL|method|matchEventFilters (TimelineEntity entity, TimelineFilterList eventFilters)
specifier|public
specifier|static
name|boolean
name|matchEventFilters
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|TimelineFilterList
name|eventFilters
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|matchFilters
argument_list|(
name|entity
argument_list|,
name|eventFilters
argument_list|,
name|TimelineEntityFiltersType
operator|.
name|EVENT
argument_list|)
return|;
block|}
comment|/**    * Compare two values based on comparison operator.    *    * @param compareOp comparison operator.    * @param val1 value 1.    * @param val2 value 2.    * @return true, if relation matches, false otherwise    */
DECL|method|compareValues (TimelineCompareOp compareOp, long val1, long val2)
specifier|private
specifier|static
name|boolean
name|compareValues
parameter_list|(
name|TimelineCompareOp
name|compareOp
parameter_list|,
name|long
name|val1
parameter_list|,
name|long
name|val2
parameter_list|)
block|{
switch|switch
condition|(
name|compareOp
condition|)
block|{
case|case
name|LESS_THAN
case|:
return|return
name|val1
operator|<
name|val2
return|;
case|case
name|LESS_OR_EQUAL
case|:
return|return
name|val1
operator|<=
name|val2
return|;
case|case
name|EQUAL
case|:
return|return
name|val1
operator|==
name|val2
return|;
case|case
name|NOT_EQUAL
case|:
return|return
name|val1
operator|!=
name|val2
return|;
case|case
name|GREATER_OR_EQUAL
case|:
return|return
name|val1
operator|>=
name|val2
return|;
case|case
name|GREATER_THAN
case|:
return|return
name|val1
operator|>
name|val2
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown TimelineCompareOp "
operator|+
name|compareOp
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Matches compare filter. Used for metric filters.    *    * @param entity entity which holds the metrics which we will match against.    * @param compareFilter compare filter.    * @param entityFiltersType type of filters we are trying to match.    * @return true, if filter matches, false otherwise.    * @throws IOException if metric filters holds non integral values.    */
DECL|method|matchCompareFilter (TimelineEntity entity, TimelineCompareFilter compareFilter, TimelineEntityFiltersType entityFiltersType)
specifier|private
specifier|static
name|boolean
name|matchCompareFilter
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|TimelineCompareFilter
name|compareFilter
parameter_list|,
name|TimelineEntityFiltersType
name|entityFiltersType
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Currently exists filter is only supported for metric filters.
if|if
condition|(
name|entityFiltersType
operator|!=
name|TimelineEntityFiltersType
operator|.
name|METRIC
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// We expect only integral values(short/int/long) for metric filters.
if|if
condition|(
operator|!
name|isIntegralValue
argument_list|(
name|compareFilter
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Metric filters has non integral values"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|TimelineMetric
argument_list|>
name|metricMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TimelineMetric
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TimelineMetric
name|metric
range|:
name|entity
operator|.
name|getMetrics
argument_list|()
control|)
block|{
name|metricMap
operator|.
name|put
argument_list|(
name|metric
operator|.
name|getId
argument_list|()
argument_list|,
name|metric
argument_list|)
expr_stmt|;
block|}
name|TimelineMetric
name|metric
init|=
name|metricMap
operator|.
name|get
argument_list|(
name|compareFilter
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|metric
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// We will be using the latest value of metric to compare.
return|return
name|compareValues
argument_list|(
name|compareFilter
operator|.
name|getCompareOp
argument_list|()
argument_list|,
name|metric
operator|.
name|getValuesJAXB
argument_list|()
operator|.
name|firstEntry
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|compareFilter
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Matches metric filters.    *    * @param entity entity which holds a set of metric objects.    * @param metricFilters list of metric filters.    * @return a boolean flag to indicate if both match.    * @throws IOException if an unsupported filter for matching metric filters is    *     being matched.    */
DECL|method|matchMetricFilters (TimelineEntity entity, TimelineFilterList metricFilters)
specifier|public
specifier|static
name|boolean
name|matchMetricFilters
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|TimelineFilterList
name|metricFilters
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|matchFilters
argument_list|(
name|entity
argument_list|,
name|metricFilters
argument_list|,
name|TimelineEntityFiltersType
operator|.
name|METRIC
argument_list|)
return|;
block|}
comment|/**    * Common routine to match different filters. Iterates over a filter list and    * calls routines based on filter type.    *    * @param entity Timeline entity.    * @param filters filter list.    * @param entityFiltersType type of filters which are being matched.    * @return a boolean flag to indicate if filter matches.    * @throws IOException if an unsupported filter for matching this specific    *     filter is being matched.    */
DECL|method|matchFilters (TimelineEntity entity, TimelineFilterList filters, TimelineEntityFiltersType entityFiltersType)
specifier|private
specifier|static
name|boolean
name|matchFilters
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|TimelineFilterList
name|filters
parameter_list|,
name|TimelineEntityFiltersType
name|entityFiltersType
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|filters
operator|==
literal|null
operator|||
name|filters
operator|.
name|getFilterList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|TimelineFilterList
operator|.
name|Operator
name|operator
init|=
name|filters
operator|.
name|getOperator
argument_list|()
decl_stmt|;
for|for
control|(
name|TimelineFilter
name|filter
range|:
name|filters
operator|.
name|getFilterList
argument_list|()
control|)
block|{
name|TimelineFilterType
name|filterType
init|=
name|filter
operator|.
name|getFilterType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|entityFiltersType
operator|.
name|isValidFilter
argument_list|(
name|filterType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unsupported filter "
operator|+
name|filterType
argument_list|)
throw|;
block|}
name|boolean
name|matched
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|filterType
condition|)
block|{
case|case
name|LIST
case|:
name|matched
operator|=
name|matchFilters
argument_list|(
name|entity
argument_list|,
operator|(
name|TimelineFilterList
operator|)
name|filter
argument_list|,
name|entityFiltersType
argument_list|)
expr_stmt|;
break|break;
case|case
name|COMPARE
case|:
name|matched
operator|=
name|matchCompareFilter
argument_list|(
name|entity
argument_list|,
operator|(
name|TimelineCompareFilter
operator|)
name|filter
argument_list|,
name|entityFiltersType
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXISTS
case|:
name|matched
operator|=
name|matchExistsFilter
argument_list|(
name|entity
argument_list|,
operator|(
name|TimelineExistsFilter
operator|)
name|filter
argument_list|,
name|entityFiltersType
argument_list|)
expr_stmt|;
break|break;
case|case
name|KEY_VALUE
case|:
name|matched
operator|=
name|matchKeyValueFilter
argument_list|(
name|entity
argument_list|,
operator|(
name|TimelineKeyValueFilter
operator|)
name|filter
argument_list|,
name|entityFiltersType
argument_list|)
expr_stmt|;
break|break;
case|case
name|KEY_VALUES
case|:
name|matched
operator|=
name|matchKeyValuesFilter
argument_list|(
name|entity
argument_list|,
operator|(
name|TimelineKeyValuesFilter
operator|)
name|filter
argument_list|,
name|entityFiltersType
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unsupported filter "
operator|+
name|filterType
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|matched
condition|)
block|{
if|if
condition|(
name|operator
operator|==
name|TimelineFilterList
operator|.
name|Operator
operator|.
name|AND
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|operator
operator|==
name|TimelineFilterList
operator|.
name|Operator
operator|.
name|OR
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
name|operator
operator|==
name|TimelineFilterList
operator|.
name|Operator
operator|.
name|AND
return|;
block|}
comment|/**    * Checks if passed object is of integral type(Short/Integer/Long).    *    * @param obj Object to be checked.    * @return true if object passed is of type Short or Integer or Long, false    * otherwise.    */
DECL|method|isIntegralValue (Object obj)
specifier|public
specifier|static
name|boolean
name|isIntegralValue
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
operator|(
name|obj
operator|instanceof
name|Short
operator|)
operator|||
operator|(
name|obj
operator|instanceof
name|Integer
operator|)
operator|||
operator|(
name|obj
operator|instanceof
name|Long
operator|)
return|;
block|}
block|}
end_class

end_unit

