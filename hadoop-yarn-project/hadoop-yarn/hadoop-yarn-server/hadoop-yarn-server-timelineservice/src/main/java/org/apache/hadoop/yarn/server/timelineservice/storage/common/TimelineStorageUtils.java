begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntityType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|metrics
operator|.
name|ApplicationMetricsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineCompareFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineCompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineExistsFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineFilter
operator|.
name|TimelineFilterType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineFilterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineKeyValueFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineKeyValuesFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|TimelineReader
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|flow
operator|.
name|AggregationCompactionDimension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|flow
operator|.
name|AggregationOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|flow
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|flow
operator|.
name|FlowRunTable
import|;
end_import

begin_comment
comment|/**  * A bunch of utility functions used across TimelineReader and TimelineWriter.  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Unstable
DECL|class|TimelineStorageUtils
specifier|public
specifier|final
class|class
name|TimelineStorageUtils
block|{
DECL|method|TimelineStorageUtils ()
specifier|private
name|TimelineStorageUtils
parameter_list|()
block|{   }
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TimelineStorageUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** milliseconds in one day. */
DECL|field|MILLIS_ONE_DAY
specifier|public
specifier|static
specifier|final
name|long
name|MILLIS_ONE_DAY
init|=
literal|86400000L
decl_stmt|;
comment|/**    * Converts a timestamp into it's inverse timestamp to be used in (row) keys    * where we want to have the most recent timestamp in the top of the table    * (scans start at the most recent timestamp first).    *    * @param key value to be inverted so that the latest version will be first in    *          a scan.    * @return inverted long    */
DECL|method|invertLong (long key)
specifier|public
specifier|static
name|long
name|invertLong
parameter_list|(
name|long
name|key
parameter_list|)
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
operator|-
name|key
return|;
block|}
comment|/**    * Converts an int into it's inverse int to be used in (row) keys    * where we want to have the largest int value in the top of the table    * (scans start at the largest int first).    *    * @param key value to be inverted so that the latest version will be first in    *          a scan.    * @return inverted int    */
DECL|method|invertInt (int key)
specifier|public
specifier|static
name|int
name|invertInt
parameter_list|(
name|int
name|key
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
operator|-
name|key
return|;
block|}
comment|/**    * returns the timestamp of that day's start (which is midnight 00:00:00 AM)    * for a given input timestamp.    *    * @param ts Timestamp.    * @return timestamp of that day's beginning (midnight)    */
DECL|method|getTopOfTheDayTimestamp (long ts)
specifier|public
specifier|static
name|long
name|getTopOfTheDayTimestamp
parameter_list|(
name|long
name|ts
parameter_list|)
block|{
name|long
name|dayTimestamp
init|=
name|ts
operator|-
operator|(
name|ts
operator|%
name|MILLIS_ONE_DAY
operator|)
decl_stmt|;
return|return
name|dayTimestamp
return|;
block|}
comment|/**    * Combines the input array of attributes and the input aggregation operation    * into a new array of attributes.    *    * @param attributes Attributes to be combined.    * @param aggOp Aggregation operation.    * @return array of combined attributes.    */
DECL|method|combineAttributes (Attribute[] attributes, AggregationOperation aggOp)
specifier|public
specifier|static
name|Attribute
index|[]
name|combineAttributes
parameter_list|(
name|Attribute
index|[]
name|attributes
parameter_list|,
name|AggregationOperation
name|aggOp
parameter_list|)
block|{
name|int
name|newLength
init|=
name|getNewLengthCombinedAttributes
argument_list|(
name|attributes
argument_list|,
name|aggOp
argument_list|)
decl_stmt|;
name|Attribute
index|[]
name|combinedAttributes
init|=
operator|new
name|Attribute
index|[
name|newLength
index|]
decl_stmt|;
if|if
condition|(
name|attributes
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|attributes
argument_list|,
literal|0
argument_list|,
name|combinedAttributes
argument_list|,
literal|0
argument_list|,
name|attributes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|aggOp
operator|!=
literal|null
condition|)
block|{
name|Attribute
name|a2
init|=
name|aggOp
operator|.
name|getAttribute
argument_list|()
decl_stmt|;
name|combinedAttributes
index|[
name|newLength
operator|-
literal|1
index|]
operator|=
name|a2
expr_stmt|;
block|}
return|return
name|combinedAttributes
return|;
block|}
comment|/**    * Returns a number for the new array size. The new array is the combination    * of input array of attributes and the input aggregation operation.    *    * @param attributes Attributes.    * @param aggOp Aggregation operation.    * @return the size for the new array    */
DECL|method|getNewLengthCombinedAttributes (Attribute[] attributes, AggregationOperation aggOp)
specifier|private
specifier|static
name|int
name|getNewLengthCombinedAttributes
parameter_list|(
name|Attribute
index|[]
name|attributes
parameter_list|,
name|AggregationOperation
name|aggOp
parameter_list|)
block|{
name|int
name|oldLength
init|=
name|getAttributesLength
argument_list|(
name|attributes
argument_list|)
decl_stmt|;
name|int
name|aggLength
init|=
name|getAppOpLength
argument_list|(
name|aggOp
argument_list|)
decl_stmt|;
return|return
name|oldLength
operator|+
name|aggLength
return|;
block|}
DECL|method|getAppOpLength (AggregationOperation aggOp)
specifier|private
specifier|static
name|int
name|getAppOpLength
parameter_list|(
name|AggregationOperation
name|aggOp
parameter_list|)
block|{
if|if
condition|(
name|aggOp
operator|!=
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|method|getAttributesLength (Attribute[] attributes)
specifier|private
specifier|static
name|int
name|getAttributesLength
parameter_list|(
name|Attribute
index|[]
name|attributes
parameter_list|)
block|{
if|if
condition|(
name|attributes
operator|!=
literal|null
condition|)
block|{
return|return
name|attributes
operator|.
name|length
return|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * checks if an application has finished.    *    * @param te TimlineEntity object.    * @return true if application has finished else false    */
DECL|method|isApplicationFinished (TimelineEntity te)
specifier|public
specifier|static
name|boolean
name|isApplicationFinished
parameter_list|(
name|TimelineEntity
name|te
parameter_list|)
block|{
name|SortedSet
argument_list|<
name|TimelineEvent
argument_list|>
name|allEvents
init|=
name|te
operator|.
name|getEvents
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|allEvents
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|allEvents
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|TimelineEvent
name|event
init|=
name|allEvents
operator|.
name|last
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|FINISHED_EVENT_TYPE
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Check if we have a certain field amongst fields to retrieve. This method    * checks against {@link Field#ALL} as well because that would mean field    * passed needs to be matched.    *    * @param fieldsToRetrieve fields to be retrieved.    * @param requiredField fields to be checked in fieldsToRetrieve.    * @return true if has the required field, false otherwise.    */
DECL|method|hasField (EnumSet<Field> fieldsToRetrieve, Field requiredField)
specifier|public
specifier|static
name|boolean
name|hasField
parameter_list|(
name|EnumSet
argument_list|<
name|Field
argument_list|>
name|fieldsToRetrieve
parameter_list|,
name|Field
name|requiredField
parameter_list|)
block|{
return|return
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|ALL
argument_list|)
operator|||
name|fieldsToRetrieve
operator|.
name|contains
argument_list|(
name|requiredField
argument_list|)
return|;
block|}
comment|/**    * Checks if the input TimelineEntity object is an ApplicationEntity.    *    * @param te TimelineEntity object.    * @return true if input is an ApplicationEntity, false otherwise    */
DECL|method|isApplicationEntity (TimelineEntity te)
specifier|public
specifier|static
name|boolean
name|isApplicationEntity
parameter_list|(
name|TimelineEntity
name|te
parameter_list|)
block|{
return|return
name|te
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|TimelineEntityType
operator|.
name|YARN_APPLICATION
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @param te TimelineEntity object.    * @param eventId event with this id needs to be fetched    * @return TimelineEvent if TimelineEntity contains the desired event.    */
DECL|method|getApplicationEvent (TimelineEntity te, String eventId)
specifier|public
specifier|static
name|TimelineEvent
name|getApplicationEvent
parameter_list|(
name|TimelineEntity
name|te
parameter_list|,
name|String
name|eventId
parameter_list|)
block|{
if|if
condition|(
name|isApplicationEntity
argument_list|(
name|te
argument_list|)
condition|)
block|{
for|for
control|(
name|TimelineEvent
name|event
range|:
name|te
operator|.
name|getEvents
argument_list|()
control|)
block|{
if|if
condition|(
name|event
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|eventId
argument_list|)
condition|)
block|{
return|return
name|event
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Returns the first seen aggregation operation as seen in the list of input    * tags or null otherwise.    *    * @param tags list of HBase tags.    * @return AggregationOperation    */
DECL|method|getAggregationOperationFromTagsList ( List<Tag> tags)
specifier|public
specifier|static
name|AggregationOperation
name|getAggregationOperationFromTagsList
parameter_list|(
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
parameter_list|)
block|{
for|for
control|(
name|AggregationOperation
name|aggOp
range|:
name|AggregationOperation
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Tag
name|tag
range|:
name|tags
control|)
block|{
if|if
condition|(
name|tag
operator|.
name|getType
argument_list|()
operator|==
name|aggOp
operator|.
name|getTagType
argument_list|()
condition|)
block|{
return|return
name|aggOp
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Creates a {@link Tag} from the input attribute.    *    * @param attribute Attribute from which tag has to be fetched.    * @return a HBase Tag.    */
DECL|method|getTagFromAttribute (Entry<String, byte[]> attribute)
specifier|public
specifier|static
name|Tag
name|getTagFromAttribute
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attribute
parameter_list|)
block|{
comment|// attribute could be either an Aggregation Operation or
comment|// an Aggregation Dimension
comment|// Get the Tag type from either
name|AggregationOperation
name|aggOp
init|=
name|AggregationOperation
operator|.
name|getAggregationOperation
argument_list|(
name|attribute
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|aggOp
operator|!=
literal|null
condition|)
block|{
name|Tag
name|t
init|=
operator|new
name|Tag
argument_list|(
name|aggOp
operator|.
name|getTagType
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|t
return|;
block|}
name|AggregationCompactionDimension
name|aggCompactDim
init|=
name|AggregationCompactionDimension
operator|.
name|getAggregationCompactionDimension
argument_list|(
name|attribute
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|aggCompactDim
operator|!=
literal|null
condition|)
block|{
name|Tag
name|t
init|=
operator|new
name|Tag
argument_list|(
name|aggCompactDim
operator|.
name|getTagType
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|t
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Matches key-values filter. Used for relatesTo/isRelatedTo filters.    *    * @param entity entity which holds relatesTo/isRelatedTo relations which we    *     will match against.    * @param keyValuesFilter key-values filter.    * @param entityFiltersType type of filters we are trying to match.    * @return true, if filter matches, false otherwise.    */
DECL|method|matchKeyValuesFilter (TimelineEntity entity, TimelineKeyValuesFilter keyValuesFilter, TimelineEntityFiltersType entityFiltersType)
specifier|private
specifier|static
name|boolean
name|matchKeyValuesFilter
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|TimelineKeyValuesFilter
name|keyValuesFilter
parameter_list|,
name|TimelineEntityFiltersType
name|entityFiltersType
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|relations
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|entityFiltersType
operator|==
name|TimelineEntityFiltersType
operator|.
name|IS_RELATED_TO
condition|)
block|{
name|relations
operator|=
name|entity
operator|.
name|getIsRelatedToEntities
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|entityFiltersType
operator|==
name|TimelineEntityFiltersType
operator|.
name|RELATES_TO
condition|)
block|{
name|relations
operator|=
name|entity
operator|.
name|getRelatesToEntities
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|relations
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|ids
init|=
name|relations
operator|.
name|get
argument_list|(
name|keyValuesFilter
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ids
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|matched
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Object
name|id
range|:
name|keyValuesFilter
operator|.
name|getValues
argument_list|()
control|)
block|{
comment|// Matches if id is found amongst the relationships for an entity and
comment|// filter's compare op is EQUAL.
comment|// If compare op is NOT_EQUAL, for a match to occur, id should not be
comment|// found amongst relationships for an entity.
name|matched
operator|=
operator|!
operator|(
name|ids
operator|.
name|contains
argument_list|(
name|id
argument_list|)
operator|^
name|keyValuesFilter
operator|.
name|getCompareOp
argument_list|()
operator|==
name|TimelineCompareOp
operator|.
name|EQUAL
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|matched
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Matches relatesto.    *    * @param entity entity which holds relatesto relations.    * @param relatesTo the relations for filtering.    * @return true, if filter matches, false otherwise.    * @throws IOException if an unsupported filter for matching relations is    *     being matched.    */
DECL|method|matchRelatesTo (TimelineEntity entity, TimelineFilterList relatesTo)
specifier|public
specifier|static
name|boolean
name|matchRelatesTo
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|TimelineFilterList
name|relatesTo
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|matchFilters
argument_list|(
name|entity
argument_list|,
name|relatesTo
argument_list|,
name|TimelineEntityFiltersType
operator|.
name|RELATES_TO
argument_list|)
return|;
block|}
comment|/**    * Matches isrelatedto.    *    * @param entity entity which holds isRelatedTo relations.    * @param isRelatedTo the relations for filtering.    * @return true, if filter matches, false otherwise.    * @throws IOException if an unsupported filter for matching relations is    *     being matched.    */
DECL|method|matchIsRelatedTo (TimelineEntity entity, TimelineFilterList isRelatedTo)
specifier|public
specifier|static
name|boolean
name|matchIsRelatedTo
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|TimelineFilterList
name|isRelatedTo
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|matchFilters
argument_list|(
name|entity
argument_list|,
name|isRelatedTo
argument_list|,
name|TimelineEntityFiltersType
operator|.
name|IS_RELATED_TO
argument_list|)
return|;
block|}
comment|/**    * Matches key-value filter. Used for config and info filters.    *    * @param entity entity which holds the config/info which we will match    *     against.    * @param kvFilter a key-value filter.    * @param entityFiltersType type of filters we are trying to match.    * @return true, if filter matches, false otherwise.    */
DECL|method|matchKeyValueFilter (TimelineEntity entity, TimelineKeyValueFilter kvFilter, TimelineEntityFiltersType entityFiltersType)
specifier|private
specifier|static
name|boolean
name|matchKeyValueFilter
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|TimelineKeyValueFilter
name|kvFilter
parameter_list|,
name|TimelineEntityFiltersType
name|entityFiltersType
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|Object
argument_list|>
name|map
init|=
literal|null
decl_stmt|;
comment|// Supported only for config and info filters.
if|if
condition|(
name|entityFiltersType
operator|==
name|TimelineEntityFiltersType
operator|.
name|CONFIG
condition|)
block|{
name|map
operator|=
name|entity
operator|.
name|getConfigs
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|entityFiltersType
operator|==
name|TimelineEntityFiltersType
operator|.
name|INFO
condition|)
block|{
name|map
operator|=
name|entity
operator|.
name|getInfo
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Object
name|value
init|=
name|map
operator|.
name|get
argument_list|(
name|kvFilter
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Matches if filter's value is equal to the value of the key and filter's
comment|// compare op is EQUAL.
comment|// If compare op is NOT_EQUAL, for a match to occur, value should not be
comment|// equal to the value of the key.
return|return
operator|!
operator|(
name|value
operator|.
name|equals
argument_list|(
name|kvFilter
operator|.
name|getValue
argument_list|()
argument_list|)
operator|^
name|kvFilter
operator|.
name|getCompareOp
argument_list|()
operator|==
name|TimelineCompareOp
operator|.
name|EQUAL
operator|)
return|;
block|}
comment|/**    * Matches config filters.    *    * @param entity entity which holds a map of config key-value pairs.    * @param configFilters list of info filters.    * @return a boolean flag to indicate if both match.    * @throws IOException if an unsupported filter for matching config filters is    *     being matched.    */
DECL|method|matchConfigFilters (TimelineEntity entity, TimelineFilterList configFilters)
specifier|public
specifier|static
name|boolean
name|matchConfigFilters
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|TimelineFilterList
name|configFilters
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|matchFilters
argument_list|(
name|entity
argument_list|,
name|configFilters
argument_list|,
name|TimelineEntityFiltersType
operator|.
name|CONFIG
argument_list|)
return|;
block|}
comment|/**    * Matches info filters.    *    * @param entity entity which holds a map of info key-value pairs.    * @param infoFilters list of info filters.    * @return a boolean flag to indicate if both match.    * @throws IOException if an unsupported filter for matching info filters is    *     being matched.    */
DECL|method|matchInfoFilters (TimelineEntity entity, TimelineFilterList infoFilters)
specifier|public
specifier|static
name|boolean
name|matchInfoFilters
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|TimelineFilterList
name|infoFilters
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|matchFilters
argument_list|(
name|entity
argument_list|,
name|infoFilters
argument_list|,
name|TimelineEntityFiltersType
operator|.
name|INFO
argument_list|)
return|;
block|}
comment|/**    * Matches exists filter. Used for event filters.    *    * @param entity entity which holds the events which we will match against.    * @param existsFilter exists filter.    * @param entityFiltersType type of filters we are trying to match.    * @return true, if filter matches, false otherwise.    */
DECL|method|matchExistsFilter (TimelineEntity entity, TimelineExistsFilter existsFilter, TimelineEntityFiltersType entityFiltersType)
specifier|private
specifier|static
name|boolean
name|matchExistsFilter
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|TimelineExistsFilter
name|existsFilter
parameter_list|,
name|TimelineEntityFiltersType
name|entityFiltersType
parameter_list|)
block|{
comment|// Currently exists filter is only supported for event filters.
if|if
condition|(
name|entityFiltersType
operator|!=
name|TimelineEntityFiltersType
operator|.
name|EVENT
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|eventIds
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TimelineEvent
name|event
range|:
name|entity
operator|.
name|getEvents
argument_list|()
control|)
block|{
name|eventIds
operator|.
name|add
argument_list|(
name|event
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Matches if filter's value is contained in the list of events filter's
comment|// compare op is EQUAL.
comment|// If compare op is NOT_EQUAL, for a match to occur, value should not be
comment|// contained in the list of events.
return|return
operator|!
operator|(
name|eventIds
operator|.
name|contains
argument_list|(
name|existsFilter
operator|.
name|getValue
argument_list|()
argument_list|)
operator|^
name|existsFilter
operator|.
name|getCompareOp
argument_list|()
operator|==
name|TimelineCompareOp
operator|.
name|EQUAL
operator|)
return|;
block|}
comment|/**    * Matches event filters.    *    * @param entity entity which holds a set of event objects.    * @param eventFilters the set of event Ids for filtering.    * @return a boolean flag to indicate if both match.    * @throws IOException if an unsupported filter for matching event filters is    *     being matched.    */
DECL|method|matchEventFilters (TimelineEntity entity, TimelineFilterList eventFilters)
specifier|public
specifier|static
name|boolean
name|matchEventFilters
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|TimelineFilterList
name|eventFilters
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|matchFilters
argument_list|(
name|entity
argument_list|,
name|eventFilters
argument_list|,
name|TimelineEntityFiltersType
operator|.
name|EVENT
argument_list|)
return|;
block|}
comment|/**    * Compare two values based on comparison operator.    *    * @param compareOp comparison operator.    * @param val1 value 1.    * @param val2 value 2.    * @return true, if relation matches, false otherwise    */
DECL|method|compareValues (TimelineCompareOp compareOp, long val1, long val2)
specifier|private
specifier|static
name|boolean
name|compareValues
parameter_list|(
name|TimelineCompareOp
name|compareOp
parameter_list|,
name|long
name|val1
parameter_list|,
name|long
name|val2
parameter_list|)
block|{
switch|switch
condition|(
name|compareOp
condition|)
block|{
case|case
name|LESS_THAN
case|:
return|return
name|val1
operator|<
name|val2
return|;
case|case
name|LESS_OR_EQUAL
case|:
return|return
name|val1
operator|<=
name|val2
return|;
case|case
name|EQUAL
case|:
return|return
name|val1
operator|==
name|val2
return|;
case|case
name|NOT_EQUAL
case|:
return|return
name|val1
operator|!=
name|val2
return|;
case|case
name|GREATER_OR_EQUAL
case|:
return|return
name|val1
operator|>=
name|val2
return|;
case|case
name|GREATER_THAN
case|:
return|return
name|val1
operator|>
name|val2
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown TimelineCompareOp "
operator|+
name|compareOp
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Matches compare filter. Used for metric filters.    *    * @param entity entity which holds the metrics which we will match against.    * @param compareFilter compare filter.    * @param entityFiltersType type of filters we are trying to match.    * @return true, if filter matches, false otherwise.    * @throws IOException if metric filters holds non integral values.    */
DECL|method|matchCompareFilter (TimelineEntity entity, TimelineCompareFilter compareFilter, TimelineEntityFiltersType entityFiltersType)
specifier|private
specifier|static
name|boolean
name|matchCompareFilter
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|TimelineCompareFilter
name|compareFilter
parameter_list|,
name|TimelineEntityFiltersType
name|entityFiltersType
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Currently exists filter is only supported for metric filters.
if|if
condition|(
name|entityFiltersType
operator|!=
name|TimelineEntityFiltersType
operator|.
name|METRIC
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// We expect only integral values(short/int/long) for metric filters.
if|if
condition|(
operator|!
name|isIntegralValue
argument_list|(
name|compareFilter
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Metric filters has non integral values"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|TimelineMetric
argument_list|>
name|metricMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TimelineMetric
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TimelineMetric
name|metric
range|:
name|entity
operator|.
name|getMetrics
argument_list|()
control|)
block|{
name|metricMap
operator|.
name|put
argument_list|(
name|metric
operator|.
name|getId
argument_list|()
argument_list|,
name|metric
argument_list|)
expr_stmt|;
block|}
name|TimelineMetric
name|metric
init|=
name|metricMap
operator|.
name|get
argument_list|(
name|compareFilter
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|metric
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// We will be using the latest value of metric to compare.
return|return
name|compareValues
argument_list|(
name|compareFilter
operator|.
name|getCompareOp
argument_list|()
argument_list|,
name|metric
operator|.
name|getValuesJAXB
argument_list|()
operator|.
name|firstEntry
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|compareFilter
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Matches metric filters.    *    * @param entity entity which holds a set of metric objects.    * @param metricFilters list of metric filters.    * @return a boolean flag to indicate if both match.    * @throws IOException if an unsupported filter for matching metric filters is    *     being matched.    */
DECL|method|matchMetricFilters (TimelineEntity entity, TimelineFilterList metricFilters)
specifier|public
specifier|static
name|boolean
name|matchMetricFilters
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|TimelineFilterList
name|metricFilters
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|matchFilters
argument_list|(
name|entity
argument_list|,
name|metricFilters
argument_list|,
name|TimelineEntityFiltersType
operator|.
name|METRIC
argument_list|)
return|;
block|}
comment|/**    * Common routine to match different filters. Iterates over a filter list and    * calls routines based on filter type.    *    * @param entity Timeline entity.    * @param filters filter list.    * @param entityFiltersType type of filters which are being matched.    * @return a boolean flag to indicate if filter matches.    * @throws IOException if an unsupported filter for matching this specific    *     filter is being matched.    */
DECL|method|matchFilters (TimelineEntity entity, TimelineFilterList filters, TimelineEntityFiltersType entityFiltersType)
specifier|private
specifier|static
name|boolean
name|matchFilters
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|TimelineFilterList
name|filters
parameter_list|,
name|TimelineEntityFiltersType
name|entityFiltersType
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|filters
operator|==
literal|null
operator|||
name|filters
operator|.
name|getFilterList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|TimelineFilterList
operator|.
name|Operator
name|operator
init|=
name|filters
operator|.
name|getOperator
argument_list|()
decl_stmt|;
for|for
control|(
name|TimelineFilter
name|filter
range|:
name|filters
operator|.
name|getFilterList
argument_list|()
control|)
block|{
name|TimelineFilterType
name|filterType
init|=
name|filter
operator|.
name|getFilterType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|entityFiltersType
operator|.
name|isValidFilter
argument_list|(
name|filterType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unsupported filter "
operator|+
name|filterType
argument_list|)
throw|;
block|}
name|boolean
name|matched
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|filterType
condition|)
block|{
case|case
name|LIST
case|:
name|matched
operator|=
name|matchFilters
argument_list|(
name|entity
argument_list|,
operator|(
name|TimelineFilterList
operator|)
name|filter
argument_list|,
name|entityFiltersType
argument_list|)
expr_stmt|;
break|break;
case|case
name|COMPARE
case|:
name|matched
operator|=
name|matchCompareFilter
argument_list|(
name|entity
argument_list|,
operator|(
name|TimelineCompareFilter
operator|)
name|filter
argument_list|,
name|entityFiltersType
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXISTS
case|:
name|matched
operator|=
name|matchExistsFilter
argument_list|(
name|entity
argument_list|,
operator|(
name|TimelineExistsFilter
operator|)
name|filter
argument_list|,
name|entityFiltersType
argument_list|)
expr_stmt|;
break|break;
case|case
name|KEY_VALUE
case|:
name|matched
operator|=
name|matchKeyValueFilter
argument_list|(
name|entity
argument_list|,
operator|(
name|TimelineKeyValueFilter
operator|)
name|filter
argument_list|,
name|entityFiltersType
argument_list|)
expr_stmt|;
break|break;
case|case
name|KEY_VALUES
case|:
name|matched
operator|=
name|matchKeyValuesFilter
argument_list|(
name|entity
argument_list|,
operator|(
name|TimelineKeyValuesFilter
operator|)
name|filter
argument_list|,
name|entityFiltersType
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unsupported filter "
operator|+
name|filterType
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|matched
condition|)
block|{
if|if
condition|(
name|operator
operator|==
name|TimelineFilterList
operator|.
name|Operator
operator|.
name|AND
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|operator
operator|==
name|TimelineFilterList
operator|.
name|Operator
operator|.
name|OR
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
name|operator
operator|==
name|TimelineFilterList
operator|.
name|Operator
operator|.
name|AND
return|;
block|}
comment|/**    * Checks if passed object is of integral type(Short/Integer/Long).    *    * @param obj Object to be checked.    * @return true if object passed is of type Short or Integer or Long, false    * otherwise.    */
DECL|method|isIntegralValue (Object obj)
specifier|public
specifier|static
name|boolean
name|isIntegralValue
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
operator|(
name|obj
operator|instanceof
name|Short
operator|)
operator|||
operator|(
name|obj
operator|instanceof
name|Integer
operator|)
operator|||
operator|(
name|obj
operator|instanceof
name|Long
operator|)
return|;
block|}
comment|/**    * creates a new cell based on the input cell but with the new value.    *    * @param origCell Original cell    * @param newValue new cell value    * @return cell    * @throws IOException while creating new cell.    */
DECL|method|createNewCell (Cell origCell, byte[] newValue)
specifier|public
specifier|static
name|Cell
name|createNewCell
parameter_list|(
name|Cell
name|origCell
parameter_list|,
name|byte
index|[]
name|newValue
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|CellUtil
operator|.
name|createCell
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|origCell
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|origCell
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|origCell
argument_list|)
argument_list|,
name|origCell
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|,
name|newValue
argument_list|)
return|;
block|}
comment|/**    * creates a cell with the given inputs.    *    * @param row row of the cell to be created    * @param family column family name of the new cell    * @param qualifier qualifier for the new cell    * @param ts timestamp of the new cell    * @param newValue value of the new cell    * @param tags tags in the new cell    * @return cell    * @throws IOException while creating the cell.    */
DECL|method|createNewCell (byte[] row, byte[] family, byte[] qualifier, long ts, byte[] newValue, byte[] tags)
specifier|public
specifier|static
name|Cell
name|createNewCell
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|ts
parameter_list|,
name|byte
index|[]
name|newValue
parameter_list|,
name|byte
index|[]
name|tags
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|CellUtil
operator|.
name|createCell
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|newValue
argument_list|,
name|tags
argument_list|)
return|;
block|}
comment|/**    * returns app id from the list of tags.    *    * @param tags cell tags to be looked into    * @return App Id as the AggregationCompactionDimension    */
DECL|method|getAggregationCompactionDimension (List<Tag> tags)
specifier|public
specifier|static
name|String
name|getAggregationCompactionDimension
parameter_list|(
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
parameter_list|)
block|{
name|String
name|appId
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Tag
name|t
range|:
name|tags
control|)
block|{
if|if
condition|(
name|AggregationCompactionDimension
operator|.
name|APPLICATION_ID
operator|.
name|getTagType
argument_list|()
operator|==
name|t
operator|.
name|getType
argument_list|()
condition|)
block|{
name|appId
operator|=
name|Bytes
operator|.
name|toString
argument_list|(
name|t
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|appId
return|;
block|}
block|}
return|return
name|appId
return|;
block|}
comment|/**    * Helper method for reading relationship.    *    * @param<T> Describes the type of column prefix.    * @param entity entity to fill.    * @param result result from HBase.    * @param prefix column prefix.    * @param isRelatedTo if true, means relationship is to be added to    *     isRelatedTo, otherwise its added to relatesTo.    * @throws IOException if any problem is encountered while reading result.    */
DECL|method|readRelationship ( TimelineEntity entity, Result result, ColumnPrefix<T> prefix, boolean isRelatedTo)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|readRelationship
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|Result
name|result
parameter_list|,
name|ColumnPrefix
argument_list|<
name|T
argument_list|>
name|prefix
parameter_list|,
name|boolean
name|isRelatedTo
parameter_list|)
throws|throws
name|IOException
block|{
comment|// isRelatedTo and relatesTo are of type Map<String, Set<String>>
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|columns
init|=
name|prefix
operator|.
name|readResults
argument_list|(
name|result
argument_list|,
name|StringKeyConverter
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|column
range|:
name|columns
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|id
range|:
name|Separator
operator|.
name|VALUES
operator|.
name|splitEncoded
argument_list|(
name|column
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|isRelatedTo
condition|)
block|{
name|entity
operator|.
name|addIsRelatedToEntity
argument_list|(
name|column
operator|.
name|getKey
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entity
operator|.
name|addRelatesToEntity
argument_list|(
name|column
operator|.
name|getKey
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Helper method for reading key-value pairs for either info or config.    *    * @param<T> Describes the type of column prefix.    * @param entity entity to fill.    * @param result result from HBase.    * @param prefix column prefix.    * @param isConfig if true, means we are reading configs, otherwise info.    * @throws IOException if any problem is encountered while reading result.    */
DECL|method|readKeyValuePairs ( TimelineEntity entity, Result result, ColumnPrefix<T> prefix, boolean isConfig)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|readKeyValuePairs
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|Result
name|result
parameter_list|,
name|ColumnPrefix
argument_list|<
name|T
argument_list|>
name|prefix
parameter_list|,
name|boolean
name|isConfig
parameter_list|)
throws|throws
name|IOException
block|{
comment|// info and configuration are of type Map<String, Object or String>
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|columns
init|=
name|prefix
operator|.
name|readResults
argument_list|(
name|result
argument_list|,
name|StringKeyConverter
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isConfig
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|column
range|:
name|columns
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|entity
operator|.
name|addConfig
argument_list|(
name|column
operator|.
name|getKey
argument_list|()
argument_list|,
name|column
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|entity
operator|.
name|addInfo
argument_list|(
name|columns
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Read events from the entity table or the application table. The column name    * is of the form "eventId=timestamp=infoKey" where "infoKey" may be omitted    * if there is no info associated with the event.    *    * @param<T> Describes the type of column prefix.    * @param entity entity to fill.    * @param result HBase Result.    * @param prefix column prefix.    * @throws IOException if any problem is encountered while reading result.    */
DECL|method|readEvents (TimelineEntity entity, Result result, ColumnPrefix<T> prefix)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|readEvents
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|Result
name|result
parameter_list|,
name|ColumnPrefix
argument_list|<
name|T
argument_list|>
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|TimelineEvent
argument_list|>
name|eventsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|EventColumnName
argument_list|,
name|Object
argument_list|>
name|eventsResult
init|=
name|prefix
operator|.
name|readResults
argument_list|(
name|result
argument_list|,
name|EventColumnNameConverter
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|EventColumnName
argument_list|,
name|Object
argument_list|>
name|eventResult
range|:
name|eventsResult
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|EventColumnName
name|eventColumnName
init|=
name|eventResult
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|eventColumnName
operator|.
name|getId
argument_list|()
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|eventColumnName
operator|.
name|getTimestamp
argument_list|()
argument_list|)
decl_stmt|;
comment|// Retrieve previously seen event to add to it
name|TimelineEvent
name|event
init|=
name|eventsMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
comment|// First time we're seeing this event, add it to the eventsMap
name|event
operator|=
operator|new
name|TimelineEvent
argument_list|()
expr_stmt|;
name|event
operator|.
name|setId
argument_list|(
name|eventColumnName
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setTimestamp
argument_list|(
name|eventColumnName
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|eventsMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|eventColumnName
operator|.
name|getInfoKey
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|event
operator|.
name|addInfo
argument_list|(
name|eventColumnName
operator|.
name|getInfoKey
argument_list|()
argument_list|,
name|eventResult
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|TimelineEvent
argument_list|>
name|eventsSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|eventsMap
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|entity
operator|.
name|addEvents
argument_list|(
name|eventsSet
argument_list|)
expr_stmt|;
block|}
DECL|method|isFlowRunTable (HRegionInfo hRegionInfo, Configuration conf)
specifier|public
specifier|static
name|boolean
name|isFlowRunTable
parameter_list|(
name|HRegionInfo
name|hRegionInfo
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|regionTableName
init|=
name|hRegionInfo
operator|.
name|getTable
argument_list|()
operator|.
name|getNameAsString
argument_list|()
decl_stmt|;
name|String
name|flowRunTableName
init|=
name|conf
operator|.
name|get
argument_list|(
name|FlowRunTable
operator|.
name|TABLE_NAME_CONF_NAME
argument_list|,
name|FlowRunTable
operator|.
name|DEFAULT_TABLE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"regionTableName="
operator|+
name|regionTableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flowRunTableName
operator|.
name|equalsIgnoreCase
argument_list|(
name|regionTableName
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|" table is the flow run table!! "
operator|+
name|flowRunTableName
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

