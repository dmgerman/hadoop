begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.reader
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Used for decoding FROM_ID  */
end_comment

begin_enum
DECL|enum|TimelineFromIdConverter
enum|enum
name|TimelineFromIdConverter
block|{
DECL|enumConstant|APPLICATION_FROMID
name|APPLICATION_FROMID
block|{
annotation|@
name|Override
name|TimelineReaderContext
name|decodeUID
parameter_list|(
name|String
name|fromId
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|fromId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|appTupleList
init|=
name|TimelineReaderUtils
operator|.
name|split
argument_list|(
name|fromId
argument_list|)
decl_stmt|;
if|if
condition|(
name|appTupleList
operator|==
literal|null
operator|||
name|appTupleList
operator|.
name|size
argument_list|()
operator|!=
literal|5
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid row key for application table."
argument_list|)
throw|;
block|}
return|return
operator|new
name|TimelineReaderContext
argument_list|(
name|appTupleList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|appTupleList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|appTupleList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|appTupleList
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|,
name|appTupleList
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|SUB_APPLICATION_ENTITY_FROMID
name|SUB_APPLICATION_ENTITY_FROMID
block|{
annotation|@
name|Override
name|TimelineReaderContext
name|decodeUID
parameter_list|(
name|String
name|fromId
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|fromId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|split
init|=
name|TimelineReaderUtils
operator|.
name|split
argument_list|(
name|fromId
argument_list|)
decl_stmt|;
if|if
condition|(
name|split
operator|==
literal|null
operator|||
name|split
operator|.
name|size
argument_list|()
operator|!=
literal|6
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid row key for sub app table."
argument_list|)
throw|;
block|}
name|String
name|subAppUserId
init|=
name|split
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|clusterId
init|=
name|split
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|entityType
init|=
name|split
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Long
name|entityIdPrefix
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|split
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|entityId
init|=
name|split
operator|.
name|get
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|userId
init|=
name|split
operator|.
name|get
argument_list|(
literal|5
argument_list|)
decl_stmt|;
return|return
operator|new
name|TimelineReaderContext
argument_list|(
name|clusterId
argument_list|,
name|userId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|entityType
argument_list|,
name|entityIdPrefix
argument_list|,
name|entityId
argument_list|,
name|subAppUserId
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|GENERIC_ENTITY_FROMID
name|GENERIC_ENTITY_FROMID
block|{
annotation|@
name|Override
name|TimelineReaderContext
name|decodeUID
parameter_list|(
name|String
name|fromId
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|fromId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|split
init|=
name|TimelineReaderUtils
operator|.
name|split
argument_list|(
name|fromId
argument_list|)
decl_stmt|;
if|if
condition|(
name|split
operator|==
literal|null
operator|||
name|split
operator|.
name|size
argument_list|()
operator|!=
literal|8
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid row key for entity table."
argument_list|)
throw|;
block|}
name|Long
name|flowRunId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|split
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|Long
name|entityIdPrefix
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|split
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|TimelineReaderContext
argument_list|(
name|split
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|split
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|split
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|flowRunId
argument_list|,
name|split
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|split
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
name|entityIdPrefix
argument_list|,
name|split
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|)
return|;
block|}
block|}
block|;
comment|/**    * Decodes FROM_ID depending on FROM_ID implementation.    *    * @param fromId FROM_ID to be decoded.    * @return a {@link TimelineReaderContext} object if FROM_ID passed can be    * decoded, null otherwise.    * @throws Exception if any problem occurs while decoding.    */
DECL|method|decodeUID (String fromId)
specifier|abstract
name|TimelineReaderContext
name|decodeUID
parameter_list|(
name|String
name|fromId
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
end_enum

end_unit

