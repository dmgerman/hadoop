begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.reader
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineCompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineFilterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelinePrefixFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineFilterList
operator|.
name|Operator
import|;
end_import

begin_comment
comment|/**  * Used for parsing metrics or configs to retrieve.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|TimelineParserForDataToRetrieve
specifier|public
class|class
name|TimelineParserForDataToRetrieve
implements|implements
name|TimelineParser
block|{
DECL|field|expr
specifier|private
name|String
name|expr
decl_stmt|;
DECL|field|exprLength
specifier|private
specifier|final
name|int
name|exprLength
decl_stmt|;
DECL|method|TimelineParserForDataToRetrieve (String expression)
specifier|public
name|TimelineParserForDataToRetrieve
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
name|this
operator|.
name|expr
operator|=
name|expression
expr_stmt|;
if|if
condition|(
name|expression
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|expr
operator|=
name|expr
operator|.
name|trim
argument_list|()
expr_stmt|;
name|exprLength
operator|=
name|expr
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|exprLength
operator|=
literal|0
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|parse ()
specifier|public
name|TimelineFilterList
name|parse
parameter_list|()
throws|throws
name|TimelineParseException
block|{
if|if
condition|(
name|expr
operator|==
literal|null
operator|||
name|exprLength
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|TimelineCompareOp
name|compareOp
init|=
literal|null
decl_stmt|;
name|int
name|openingBracketIndex
init|=
name|expr
operator|.
name|indexOf
argument_list|(
name|TimelineParseConstants
operator|.
name|OPENING_BRACKET_CHAR
argument_list|)
decl_stmt|;
if|if
condition|(
name|expr
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
name|TimelineParseConstants
operator|.
name|NOT_CHAR
condition|)
block|{
if|if
condition|(
name|openingBracketIndex
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|TimelineParseException
argument_list|(
literal|"Invalid config/metric to retrieve "
operator|+
literal|"expression"
argument_list|)
throw|;
block|}
if|if
condition|(
name|openingBracketIndex
operator|!=
literal|1
operator|&&
name|expr
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|openingBracketIndex
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|TimelineParseException
argument_list|(
literal|"Invalid config/metric to retrieve "
operator|+
literal|"expression"
argument_list|)
throw|;
block|}
name|compareOp
operator|=
name|TimelineCompareOp
operator|.
name|NOT_EQUAL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|openingBracketIndex
operator|<=
literal|0
condition|)
block|{
name|compareOp
operator|=
name|TimelineCompareOp
operator|.
name|EQUAL
expr_stmt|;
block|}
name|char
name|lastChar
init|=
name|expr
operator|.
name|charAt
argument_list|(
name|exprLength
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|compareOp
operator|==
name|TimelineCompareOp
operator|.
name|NOT_EQUAL
operator|&&
name|lastChar
operator|!=
name|TimelineParseConstants
operator|.
name|CLOSING_BRACKET_CHAR
condition|)
block|{
throw|throw
operator|new
name|TimelineParseException
argument_list|(
literal|"Invalid config/metric to retrieve "
operator|+
literal|"expression"
argument_list|)
throw|;
block|}
if|if
condition|(
name|openingBracketIndex
operator|!=
operator|-
literal|1
operator|&&
name|expr
operator|.
name|charAt
argument_list|(
name|exprLength
operator|-
literal|1
argument_list|)
operator|==
name|TimelineParseConstants
operator|.
name|CLOSING_BRACKET_CHAR
condition|)
block|{
name|expr
operator|=
name|expr
operator|.
name|substring
argument_list|(
name|openingBracketIndex
operator|+
literal|1
argument_list|,
name|exprLength
operator|-
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|expr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Operator
name|op
init|=
operator|(
name|compareOp
operator|==
name|TimelineCompareOp
operator|.
name|NOT_EQUAL
operator|)
condition|?
name|Operator
operator|.
name|AND
else|:
name|Operator
operator|.
name|OR
decl_stmt|;
name|TimelineFilterList
name|list
init|=
operator|new
name|TimelineFilterList
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|String
index|[]
name|splits
init|=
name|expr
operator|.
name|split
argument_list|(
name|TimelineParseConstants
operator|.
name|COMMA_DELIMITER
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|split
range|:
name|splits
control|)
block|{
name|list
operator|.
name|addFilter
argument_list|(
operator|new
name|TimelinePrefixFilter
argument_list|(
name|compareOp
argument_list|,
name|split
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{   }
block|}
end_class

end_unit

