begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.collector
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|collector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|TimelineWriter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Class that manages adding and removing collectors and their lifecycle. It  * provides thread safety access to the collectors inside.  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|TimelineCollectorManager
specifier|public
class|class
name|TimelineCollectorManager
extends|extends
name|AbstractService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TimelineCollectorManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|writer
specifier|private
name|TimelineWriter
name|writer
decl_stmt|;
DECL|field|writerFlusher
specifier|private
name|ScheduledExecutorService
name|writerFlusher
decl_stmt|;
DECL|field|flushInterval
specifier|private
name|int
name|flushInterval
decl_stmt|;
DECL|field|writerFlusherRunning
specifier|private
name|boolean
name|writerFlusherRunning
decl_stmt|;
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|public
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|writer
operator|=
name|createTimelineWriter
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|writer
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// create a single dedicated thread for flushing the writer on a periodic
comment|// basis
name|writerFlusher
operator|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|()
expr_stmt|;
name|flushInterval
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_WRITER_FLUSH_INTERVAL_SECONDS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_TIMELINE_SERVICE_WRITER_FLUSH_INTERVAL_SECONDS
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|createTimelineWriter (final Configuration conf)
specifier|private
name|TimelineWriter
name|createTimelineWriter
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|timelineWriterClassName
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_WRITER_CLASS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_TIMELINE_SERVICE_WRITER_CLASS
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using TimelineWriter: "
operator|+
name|timelineWriterClassName
argument_list|)
expr_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|timelineWriterClazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|timelineWriterClassName
argument_list|)
decl_stmt|;
if|if
condition|(
name|TimelineWriter
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|timelineWriterClazz
argument_list|)
condition|)
block|{
return|return
operator|(
name|TimelineWriter
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|timelineWriterClazz
argument_list|,
name|conf
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Class: "
operator|+
name|timelineWriterClassName
operator|+
literal|" not instance of "
operator|+
name|TimelineWriter
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Could not instantiate TimelineWriter: "
operator|+
name|timelineWriterClassName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// schedule the flush task
name|writerFlusher
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|WriterFlushTask
argument_list|(
name|writer
argument_list|)
argument_list|,
name|flushInterval
argument_list|,
name|flushInterval
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|writerFlusherRunning
operator|=
literal|true
expr_stmt|;
block|}
comment|// access to this map is synchronized with the map itself
DECL|field|collectors
specifier|private
specifier|final
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|TimelineCollector
argument_list|>
name|collectors
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|ApplicationId
argument_list|,
name|TimelineCollector
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|TimelineCollectorManager (String name)
specifier|public
name|TimelineCollectorManager
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|getWriter ()
specifier|protected
name|TimelineWriter
name|getWriter
parameter_list|()
block|{
return|return
name|writer
return|;
block|}
comment|/**    * Put the collector into the collection if an collector mapped by id does    * not exist.    *    * @param appId Application Id for which collector needs to be put.    * @param collector timeline collector to be put.    * @throws YarnRuntimeException if there  was any exception in initializing    *                              and starting the app level service    * @return the collector associated with id after the potential put.    */
DECL|method|putIfAbsent (ApplicationId appId, TimelineCollector collector)
specifier|public
name|TimelineCollector
name|putIfAbsent
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|TimelineCollector
name|collector
parameter_list|)
block|{
name|TimelineCollector
name|collectorInTable
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|collectors
init|)
block|{
name|collectorInTable
operator|=
name|collectors
operator|.
name|get
argument_list|(
name|appId
argument_list|)
expr_stmt|;
if|if
condition|(
name|collectorInTable
operator|==
literal|null
condition|)
block|{
try|try
block|{
comment|// initialize, start, and add it to the collection so it can be
comment|// cleaned up when the parent shuts down
name|collector
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|collector
operator|.
name|setWriter
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|collector
operator|.
name|start
argument_list|()
expr_stmt|;
name|collectors
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|collector
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"the collector for "
operator|+
name|appId
operator|+
literal|" was added"
argument_list|)
expr_stmt|;
name|collectorInTable
operator|=
name|collector
expr_stmt|;
name|postPut
argument_list|(
name|appId
argument_list|,
name|collectorInTable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"the collector for "
operator|+
name|appId
operator|+
literal|" already exists!"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|collectorInTable
return|;
block|}
comment|/**    * Callback handler for the timeline collector manager when a collector has    * been added into the collector map.    * @param appId Application id of the collector.    * @param collector The actual timeline collector that has been added.    */
DECL|method|postPut (ApplicationId appId, TimelineCollector collector)
specifier|public
name|void
name|postPut
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|TimelineCollector
name|collector
parameter_list|)
block|{
name|doPostPut
argument_list|(
name|appId
argument_list|,
name|collector
argument_list|)
expr_stmt|;
name|collector
operator|.
name|setReadyToAggregate
argument_list|()
expr_stmt|;
block|}
comment|/**    * A template method that will be called by    * {@link  #postPut(ApplicationId, TimelineCollector)}.    * @param appId Application id of the collector.    * @param collector The actual timeline collector that has been added.    */
DECL|method|doPostPut (ApplicationId appId, TimelineCollector collector)
specifier|protected
name|void
name|doPostPut
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|TimelineCollector
name|collector
parameter_list|)
block|{   }
comment|/**    * Removes the collector for the specified id. The collector is also stopped    * as a result. If the collector does not exist, no change is made.    *    * @param appId Application Id to remove.    * @return whether it was removed successfully    */
DECL|method|remove (ApplicationId appId)
specifier|public
name|boolean
name|remove
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
name|TimelineCollector
name|collector
init|=
name|collectors
operator|.
name|remove
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|collector
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"the collector for "
operator|+
name|appId
operator|+
literal|" does not exist!"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|postRemove
argument_list|(
name|appId
argument_list|,
name|collector
argument_list|)
expr_stmt|;
comment|// stop the service to do clean up
name|collector
operator|.
name|stop
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"The collector service for "
operator|+
name|appId
operator|+
literal|" was removed"
argument_list|)
expr_stmt|;
block|}
return|return
name|collector
operator|!=
literal|null
return|;
block|}
DECL|method|postRemove (ApplicationId appId, TimelineCollector collector)
specifier|protected
name|void
name|postRemove
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|TimelineCollector
name|collector
parameter_list|)
block|{    }
comment|/**    * Returns the collector for the specified id.    *    * @param appId Application Id for which we need to get the collector.    * @return the collector or null if it does not exist    */
DECL|method|get (ApplicationId appId)
specifier|public
name|TimelineCollector
name|get
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
return|return
name|collectors
operator|.
name|get
argument_list|(
name|appId
argument_list|)
return|;
block|}
comment|/**    * Returns whether the collector for the specified id exists in this    * collection.    * @param appId Application Id.    * @return true if collector for the app id is found, false otherwise.    */
DECL|method|containsTimelineCollector (ApplicationId appId)
specifier|public
name|boolean
name|containsTimelineCollector
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
return|return
name|collectors
operator|.
name|containsKey
argument_list|(
name|appId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|collectors
operator|!=
literal|null
operator|&&
name|collectors
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
synchronized|synchronized
init|(
name|collectors
init|)
block|{
for|for
control|(
name|TimelineCollector
name|c
range|:
name|collectors
operator|.
name|values
argument_list|()
control|)
block|{
name|c
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// stop the flusher first
if|if
condition|(
name|writerFlusher
operator|!=
literal|null
condition|)
block|{
name|writerFlusher
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|writerFlusherRunning
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|writerFlusher
operator|.
name|awaitTermination
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
comment|// in reality it should be ample time for the flusher task to finish
comment|// even if it times out, writers may be able to handle closing in this
comment|// situation fine
comment|// proceed to close the writer
name|LOG
operator|.
name|warn
argument_list|(
literal|"failed to stop the flusher task in time. "
operator|+
literal|"will still proceed to close the writer."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|writerFlusherRunning ()
name|boolean
name|writerFlusherRunning
parameter_list|()
block|{
return|return
name|writerFlusherRunning
return|;
block|}
comment|/**    * Task that invokes the flush operation on the timeline writer.    */
DECL|class|WriterFlushTask
specifier|private
specifier|static
class|class
name|WriterFlushTask
implements|implements
name|Runnable
block|{
DECL|field|writer
specifier|private
specifier|final
name|TimelineWriter
name|writer
decl_stmt|;
DECL|method|WriterFlushTask (TimelineWriter writer)
specifier|public
name|WriterFlushTask
parameter_list|(
name|TimelineWriter
name|writer
parameter_list|)
block|{
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// synchronize on the writer object to avoid flushing timeline
comment|// entities placed on the buffer by synchronous putEntities
comment|// requests.
synchronized|synchronized
init|(
name|writer
init|)
block|{
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
comment|// we need to handle all exceptions or subsequent execution may be
comment|// suppressed
name|LOG
operator|.
name|error
argument_list|(
literal|"exception during timeline writer flush!"
argument_list|,
name|th
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

