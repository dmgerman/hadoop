begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|BufferedMutator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|GenericObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|Range
import|;
end_import

begin_comment
comment|/**  * bunch of utility functions used across TimelineWriter classes  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|TimelineWriterUtils
specifier|public
class|class
name|TimelineWriterUtils
block|{
comment|/** empty bytes */
DECL|field|EMPTY_BYTES
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_BYTES
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
DECL|field|SPACE
specifier|private
specifier|static
specifier|final
name|String
name|SPACE
init|=
literal|" "
decl_stmt|;
DECL|field|UNDERSCORE
specifier|private
specifier|static
specifier|final
name|String
name|UNDERSCORE
init|=
literal|"_"
decl_stmt|;
DECL|field|EMPTY_STRING
specifier|private
specifier|static
specifier|final
name|String
name|EMPTY_STRING
init|=
literal|""
decl_stmt|;
comment|/**    * Returns a single byte array containing all of the individual component    * arrays separated by the separator array.    *    * @param separator    * @param components    * @return byte array after joining the components    */
DECL|method|join (byte[] separator, byte[]... components)
specifier|public
specifier|static
name|byte
index|[]
name|join
parameter_list|(
name|byte
index|[]
name|separator
parameter_list|,
name|byte
index|[]
modifier|...
name|components
parameter_list|)
block|{
if|if
condition|(
name|components
operator|==
literal|null
operator|||
name|components
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|EMPTY_BYTES
return|;
block|}
name|int
name|finalSize
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|separator
operator|!=
literal|null
condition|)
block|{
name|finalSize
operator|=
name|separator
operator|.
name|length
operator|*
operator|(
name|components
operator|.
name|length
operator|-
literal|1
operator|)
expr_stmt|;
block|}
for|for
control|(
name|byte
index|[]
name|comp
range|:
name|components
control|)
block|{
if|if
condition|(
name|comp
operator|!=
literal|null
condition|)
block|{
name|finalSize
operator|+=
name|comp
operator|.
name|length
expr_stmt|;
block|}
block|}
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|finalSize
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|components
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|components
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|components
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|buf
argument_list|,
name|offset
argument_list|,
name|components
index|[
name|i
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|components
index|[
name|i
index|]
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|i
argument_list|<
operator|(
name|components
operator|.
name|length
operator|-
literal|1
operator|)
operator|&&
name|separator
operator|!=
literal|null
operator|&&
name|separator
operator|.
name|length
argument_list|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|separator
argument_list|,
literal|0
argument_list|,
name|buf
argument_list|,
name|offset
argument_list|,
name|separator
operator|.
name|length
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|separator
operator|.
name|length
expr_stmt|;
block|}
block|}
block|}
return|return
name|buf
return|;
block|}
comment|/**    * Splits the source array into multiple array segments using the given    * separator, up to a maximum of count items. This will naturally produce    * copied byte arrays for each of the split segments. To identify the split    * ranges without the array copies, see    * {@link TimelineWriterUtils#splitRanges(byte[], byte[])}.    *    * @param source    * @param separator    * @return byte[] array after splitting the source    */
DECL|method|split (byte[] source, byte[] separator)
specifier|public
specifier|static
name|byte
index|[]
index|[]
name|split
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|byte
index|[]
name|separator
parameter_list|)
block|{
return|return
name|split
argument_list|(
name|source
argument_list|,
name|separator
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**    * Splits the source array into multiple array segments using the given    * separator, up to a maximum of count items. This will naturally produce    * copied byte arrays for each of the split segments. To identify the split    * ranges without the array copies, see    * {@link TimelineWriterUtils#splitRanges(byte[], byte[])}.    *    * @param source    * @param separator    * @param limit    * @return byte[][] after splitting the input source    */
DECL|method|split (byte[] source, byte[] separator, int limit)
specifier|public
specifier|static
name|byte
index|[]
index|[]
name|split
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|byte
index|[]
name|separator
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|List
argument_list|<
name|Range
argument_list|>
name|segments
init|=
name|splitRanges
argument_list|(
name|source
argument_list|,
name|separator
argument_list|,
name|limit
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|splits
init|=
operator|new
name|byte
index|[
name|segments
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|segments
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Range
name|r
init|=
name|segments
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|byte
index|[]
name|tmp
init|=
operator|new
name|byte
index|[
name|r
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
name|tmp
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|source
argument_list|,
name|r
operator|.
name|start
argument_list|()
argument_list|,
name|tmp
argument_list|,
literal|0
argument_list|,
name|r
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|splits
index|[
name|i
index|]
operator|=
name|tmp
expr_stmt|;
block|}
return|return
name|splits
return|;
block|}
comment|/**    * Returns a list of ranges identifying [start, end) -- closed, open --    * positions within the source byte array that would be split using the    * separator byte array.    */
DECL|method|splitRanges (byte[] source, byte[] separator)
specifier|public
specifier|static
name|List
argument_list|<
name|Range
argument_list|>
name|splitRanges
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|byte
index|[]
name|separator
parameter_list|)
block|{
return|return
name|splitRanges
argument_list|(
name|source
argument_list|,
name|separator
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**    * Returns a list of ranges identifying [start, end) -- closed, open --    * positions within the source byte array that would be split using the    * separator byte array.    * @param source the source data    * @param separator the separator pattern to look for    * @param limit the maximum number of splits to identify in the source    */
DECL|method|splitRanges (byte[] source, byte[] separator, int limit)
specifier|public
specifier|static
name|List
argument_list|<
name|Range
argument_list|>
name|splitRanges
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|byte
index|[]
name|separator
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|List
argument_list|<
name|Range
argument_list|>
name|segments
init|=
operator|new
name|ArrayList
argument_list|<
name|Range
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|source
operator|==
literal|null
operator|)
operator|||
operator|(
name|separator
operator|==
literal|null
operator|)
condition|)
block|{
return|return
name|segments
return|;
block|}
name|int
name|start
init|=
literal|0
decl_stmt|;
name|itersource
label|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|source
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|separator
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|source
index|[
name|i
operator|+
name|j
index|]
operator|!=
name|separator
index|[
name|j
index|]
condition|)
block|{
continue|continue
name|itersource
continue|;
block|}
block|}
comment|// all separator elements matched
if|if
condition|(
name|limit
operator|>
literal|0
operator|&&
name|segments
operator|.
name|size
argument_list|()
operator|>=
operator|(
name|limit
operator|-
literal|1
operator|)
condition|)
block|{
comment|// everything else goes in one final segment
break|break;
block|}
name|segments
operator|.
name|add
argument_list|(
operator|new
name|Range
argument_list|(
name|start
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|start
operator|=
name|i
operator|+
name|separator
operator|.
name|length
expr_stmt|;
comment|// i will be incremented again in outer for loop
name|i
operator|+=
name|separator
operator|.
name|length
operator|-
literal|1
expr_stmt|;
block|}
comment|// add in remaining to a final range
if|if
condition|(
name|start
operator|<=
name|source
operator|.
name|length
condition|)
block|{
name|segments
operator|.
name|add
argument_list|(
operator|new
name|Range
argument_list|(
name|start
argument_list|,
name|source
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|segments
return|;
block|}
comment|/**    * converts run id into it's inverse timestamp    * @param flowRunId    * @return inverted long    */
DECL|method|encodeRunId (Long flowRunId)
specifier|public
specifier|static
name|long
name|encodeRunId
parameter_list|(
name|Long
name|flowRunId
parameter_list|)
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
operator|-
name|flowRunId
return|;
block|}
comment|/**    * return a value from the Map as a String    * @param key    * @param values    * @return value as a String or ""    * @throws IOException     */
DECL|method|getValueAsString (final byte[] key, final Map<byte[], byte[]> values)
specifier|public
specifier|static
name|String
name|getValueAsString
parameter_list|(
specifier|final
name|byte
index|[]
name|key
parameter_list|,
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|values
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
return|return
name|EMPTY_STRING
return|;
block|}
name|byte
index|[]
name|value
init|=
name|values
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|GenericObjectMapper
operator|.
name|read
argument_list|(
name|value
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|EMPTY_STRING
return|;
block|}
block|}
comment|/**    * return a value from the Map as a long    * @param key    * @param values    * @return value as Long or 0L    * @throws IOException     */
DECL|method|getValueAsLong (final byte[] key, final Map<byte[], byte[]> values)
specifier|public
specifier|static
name|long
name|getValueAsLong
parameter_list|(
specifier|final
name|byte
index|[]
name|key
parameter_list|,
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|values
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
name|byte
index|[]
name|value
init|=
name|values
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|Number
name|val
init|=
operator|(
name|Number
operator|)
name|GenericObjectMapper
operator|.
name|read
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|val
operator|.
name|longValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0L
return|;
block|}
block|}
comment|/**    * concates the values from a Set<Strings> to return a single delimited string value    * @param rowKeySeparator    * @param values    * @return Value from the set of strings as a string    */
DECL|method|getValueAsString (String rowKeySeparator, Set<String> values)
specifier|public
specifier|static
name|String
name|getValueAsString
parameter_list|(
name|String
name|rowKeySeparator
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
return|return
name|EMPTY_STRING
return|;
block|}
name|StringBuilder
name|concatStrings
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|value
range|:
name|values
control|)
block|{
name|concatStrings
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|concatStrings
operator|.
name|append
argument_list|(
name|rowKeySeparator
argument_list|)
expr_stmt|;
block|}
comment|// remove the last separator
if|if
condition|(
name|concatStrings
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
name|concatStrings
operator|.
name|deleteCharAt
argument_list|(
name|concatStrings
operator|.
name|lastIndexOf
argument_list|(
name|rowKeySeparator
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|concatStrings
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Constructs a row key prefix for the entity table    * @param clusterId    * @param userId    * @param flowId    * @param flowRunId    * @param appId    * @return byte array with the row key prefix    */
DECL|method|getRowKeyPrefix (String clusterId, String userId, String flowId, Long flowRunId, String appId)
specifier|static
name|byte
index|[]
name|getRowKeyPrefix
parameter_list|(
name|String
name|clusterId
parameter_list|,
name|String
name|userId
parameter_list|,
name|String
name|flowId
parameter_list|,
name|Long
name|flowRunId
parameter_list|,
name|String
name|appId
parameter_list|)
block|{
return|return
name|TimelineWriterUtils
operator|.
name|join
argument_list|(
name|TimelineEntitySchemaConstants
operator|.
name|ROW_KEY_SEPARATOR_BYTES
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cleanse
argument_list|(
name|userId
argument_list|)
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cleanse
argument_list|(
name|clusterId
argument_list|)
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cleanse
argument_list|(
name|flowId
argument_list|)
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TimelineWriterUtils
operator|.
name|encodeRunId
argument_list|(
name|flowRunId
argument_list|)
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cleanse
argument_list|(
name|appId
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Takes a string token to be used as a key or qualifier and    * cleanses out reserved tokens.    * This operation is not symmetrical.    * Logic is to replace all spaces and separator chars in input with    * underscores.    *    * @param token token to cleanse.    * @return String with no spaces and no separator chars    */
DECL|method|cleanse (String token)
specifier|public
specifier|static
name|String
name|cleanse
parameter_list|(
name|String
name|token
parameter_list|)
block|{
if|if
condition|(
name|token
operator|==
literal|null
operator|||
name|token
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|token
return|;
block|}
name|String
name|cleansed
init|=
name|token
operator|.
name|replaceAll
argument_list|(
name|SPACE
argument_list|,
name|UNDERSCORE
argument_list|)
decl_stmt|;
name|cleansed
operator|=
name|cleansed
operator|.
name|replaceAll
argument_list|(
name|TimelineEntitySchemaConstants
operator|.
name|ROW_KEY_SEPARATOR
argument_list|,
name|UNDERSCORE
argument_list|)
expr_stmt|;
return|return
name|cleansed
return|;
block|}
comment|/**    * stores the info to the table in hbase    *     * @param rowKey    * @param table    * @param columnFamily    * @param columnPrefix    * @param columnQualifier    * @param inputValue    * @param cellTimeStamp    * @throws IOException    */
DECL|method|store (byte[] rowKey, BufferedMutator table, byte[] columnFamily, byte[] columnPrefix, byte[] columnQualifier, Object inputValue, Long cellTimeStamp)
specifier|public
specifier|static
name|void
name|store
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|,
name|BufferedMutator
name|table
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|,
name|byte
index|[]
name|columnPrefix
parameter_list|,
name|byte
index|[]
name|columnQualifier
parameter_list|,
name|Object
name|inputValue
parameter_list|,
name|Long
name|cellTimeStamp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|rowKey
operator|==
literal|null
operator|)
operator|||
operator|(
name|table
operator|==
literal|null
operator|)
operator|||
operator|(
name|columnFamily
operator|==
literal|null
operator|)
operator|||
operator|(
name|columnQualifier
operator|==
literal|null
operator|)
operator|||
operator|(
name|inputValue
operator|==
literal|null
operator|)
condition|)
block|{
return|return;
block|}
name|Put
name|p
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cellTimeStamp
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|columnPrefix
operator|!=
literal|null
condition|)
block|{
comment|// store with prefix
name|p
operator|=
operator|new
name|Put
argument_list|(
name|rowKey
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|columnFamily
argument_list|,
name|join
argument_list|(
name|TimelineEntitySchemaConstants
operator|.
name|ROW_KEY_SEPARATOR_BYTES
argument_list|,
name|columnPrefix
argument_list|,
name|columnQualifier
argument_list|)
argument_list|,
name|GenericObjectMapper
operator|.
name|write
argument_list|(
name|inputValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// store without prefix
name|p
operator|=
operator|new
name|Put
argument_list|(
name|rowKey
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|columnFamily
argument_list|,
name|columnQualifier
argument_list|,
name|GenericObjectMapper
operator|.
name|write
argument_list|(
name|inputValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// store with cell timestamp
name|Cell
name|cell
init|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|rowKey
argument_list|,
name|columnFamily
argument_list|,
name|columnQualifier
argument_list|,
comment|// set the cell timestamp
name|cellTimeStamp
argument_list|,
comment|// KeyValue Type minimum
name|TimelineEntitySchemaConstants
operator|.
name|ZERO_BYTES
argument_list|,
name|GenericObjectMapper
operator|.
name|write
argument_list|(
name|inputValue
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|rowKey
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|mutate
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

