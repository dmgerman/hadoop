begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.reader
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|JettyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineAbout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntityType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|TimelineReader
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|timeline
operator|.
name|TimelineUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/** REST end point for Timeline Reader. */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
annotation|@
name|Singleton
annotation|@
name|Path
argument_list|(
literal|"/ws/v2/timeline"
argument_list|)
DECL|class|TimelineReaderWebServices
specifier|public
class|class
name|TimelineReaderWebServices
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TimelineReaderWebServices
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ctxt
annotation|@
name|Context
specifier|private
name|ServletContext
name|ctxt
decl_stmt|;
DECL|field|QUERY_STRING_SEP
specifier|private
specifier|static
specifier|final
name|String
name|QUERY_STRING_SEP
init|=
literal|"?"
decl_stmt|;
DECL|field|RANGE_DELIMITER
specifier|private
specifier|static
specifier|final
name|String
name|RANGE_DELIMITER
init|=
literal|"-"
decl_stmt|;
DECL|field|DATE_PATTERN
specifier|private
specifier|static
specifier|final
name|String
name|DATE_PATTERN
init|=
literal|"yyyyMMdd"
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|DATE_FORMAT
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|DateFormat
argument_list|>
name|DATE_FORMAT
init|=
operator|new
name|ThreadLocal
argument_list|<
name|DateFormat
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|DateFormat
name|initialValue
parameter_list|()
block|{
name|SimpleDateFormat
name|format
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|DATE_PATTERN
argument_list|,
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
name|format
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"GMT"
argument_list|)
argument_list|)
expr_stmt|;
name|format
operator|.
name|setLenient
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|format
return|;
block|}
block|}
decl_stmt|;
DECL|method|init (HttpServletResponse response)
specifier|private
name|void
name|init
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|)
block|{
name|response
operator|.
name|setContentType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|class|DateRange
specifier|private
specifier|static
specifier|final
class|class
name|DateRange
block|{
DECL|field|dateStart
specifier|private
name|Long
name|dateStart
decl_stmt|;
DECL|field|dateEnd
specifier|private
name|Long
name|dateEnd
decl_stmt|;
DECL|method|DateRange (Long start, Long end)
specifier|private
name|DateRange
parameter_list|(
name|Long
name|start
parameter_list|,
name|Long
name|end
parameter_list|)
block|{
name|this
operator|.
name|dateStart
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|dateEnd
operator|=
name|end
expr_stmt|;
block|}
block|}
DECL|method|parseDate (String strDate)
specifier|private
specifier|static
name|long
name|parseDate
parameter_list|(
name|String
name|strDate
parameter_list|)
throws|throws
name|ParseException
block|{
name|Date
name|date
init|=
name|DATE_FORMAT
operator|.
name|get
argument_list|()
operator|.
name|parse
argument_list|(
name|strDate
argument_list|)
decl_stmt|;
return|return
name|date
operator|.
name|getTime
argument_list|()
return|;
block|}
comment|/**    * Parses date range which can be a single date or in the format    * "[startdate]-[enddate]" where either of start or end date may not exist.    * @param dateRange    * @return a {@link DateRange} object.    * @throws IllegalArgumentException    */
DECL|method|parseDateRange (String dateRange)
specifier|private
specifier|static
name|DateRange
name|parseDateRange
parameter_list|(
name|String
name|dateRange
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|dateRange
operator|==
literal|null
operator|||
name|dateRange
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|DateRange
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|// Split date range around "-" fetching two components indicating start and
comment|// end date.
name|String
index|[]
name|dates
init|=
name|dateRange
operator|.
name|split
argument_list|(
name|RANGE_DELIMITER
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Long
name|start
init|=
literal|null
decl_stmt|;
name|Long
name|end
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|startDate
init|=
name|dates
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|startDate
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Start date is not in yyyyMMdd format.
if|if
condition|(
name|startDate
operator|.
name|length
argument_list|()
operator|!=
name|DATE_PATTERN
operator|.
name|length
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid date range "
operator|+
name|dateRange
argument_list|)
throw|;
block|}
comment|// Parse start date which exists before "-" in date range.
comment|// If "-" does not exist in date range, this effectively
comment|// gives single date.
name|start
operator|=
name|parseDate
argument_list|(
name|startDate
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dates
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|String
name|endDate
init|=
name|dates
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|endDate
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// End date is not in yyyyMMdd format.
if|if
condition|(
name|endDate
operator|.
name|length
argument_list|()
operator|!=
name|DATE_PATTERN
operator|.
name|length
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid date range "
operator|+
name|dateRange
argument_list|)
throw|;
block|}
comment|// Parse end date which exists after "-" in date range.
name|end
operator|=
name|parseDate
argument_list|(
name|endDate
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Its a single date(without "-" in date range), so set
comment|// end equal to start.
name|end
operator|=
name|start
expr_stmt|;
block|}
if|if
condition|(
name|start
operator|!=
literal|null
operator|&&
name|end
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|start
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid date range "
operator|+
name|dateRange
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|DateRange
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
comment|// Date could not be parsed.
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid date range "
operator|+
name|dateRange
argument_list|)
throw|;
block|}
block|}
DECL|method|getTimelineReaderManager ()
specifier|private
name|TimelineReaderManager
name|getTimelineReaderManager
parameter_list|()
block|{
return|return
operator|(
name|TimelineReaderManager
operator|)
name|ctxt
operator|.
name|getAttribute
argument_list|(
name|TimelineReaderServer
operator|.
name|TIMELINE_READER_MANAGER_ATTR
argument_list|)
return|;
block|}
DECL|method|handleException (Exception e, String url, long startTime, String invalidNumMsg)
specifier|private
specifier|static
name|void
name|handleException
parameter_list|(
name|Exception
name|e
parameter_list|,
name|String
name|url
parameter_list|,
name|long
name|startTime
parameter_list|,
name|String
name|invalidNumMsg
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|WebApplicationException
block|{
name|long
name|endTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed URL "
operator|+
name|url
operator|+
literal|" but encountered exception (Took "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|" ms.)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|NumberFormatException
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|invalidNumMsg
operator|+
literal|" is not a numeric value."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|IllegalArgumentException
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"Requested Invalid Field."
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NotFoundException
condition|)
block|{
throw|throw
operator|(
name|NotFoundException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TimelineParseException
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"Filter Parsing failed."
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|BadRequestException
condition|)
block|{
throw|throw
operator|(
name|BadRequestException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while processing REST request"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
block|}
comment|/**    * Return the description of the timeline reader web services.    *    * @param req Servlet request.    * @param res Servlet response.    *    * @return information about the cluster including timeline version.    */
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|about ( @ontext HttpServletRequest req, @Context HttpServletResponse res)
specifier|public
name|TimelineAbout
name|about
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|)
block|{
name|init
argument_list|(
name|res
argument_list|)
expr_stmt|;
return|return
name|TimelineUtils
operator|.
name|createTimelineAbout
argument_list|(
literal|"Timeline Reader API"
argument_list|)
return|;
block|}
comment|/**    * Return a single entity for a given entity type and UID which is a delimited    * string containing clusterid, userid, flow name, flowrun id and app id.    *    * @param req Servlet request.    * @param res Servlet response.    * @param uId a delimited string containing clusterid, userid, flow name,    *     flowrun id and app id which are extracted from UID and then used to    *     query backend(Mandatory path param).    * @param entityType Type of entities(Mandatory path param).    * @param limit If specified, defines the number of entities to return. The    *     maximum possible value for limit can be {@link Long#MAX_VALUE}. If it    *     is not specified or has a value less than 0, then limit will be    *     considered as 100. (Optional query param).    * @param createdTimeStart If specified, matched entities should not be    *     created before this timestamp(Optional query param).    * @param createdTimeEnd If specified, matched entities should not be created    *     after this timestamp(Optional query param).    * @param relatesTo If specified, matched entities should relate to given    *     entities associated with a entity type. relatesto is a comma separated    *     list in the format [entitytype]:[entityid1]:[entityid2]... (Optional    *     query param).    * @param isRelatedTo If specified, matched entities should be related to    *     given entities associated with a entity type. relatesto is a comma    *     separated list in the format [entitytype]:[entityid1]:[entityid2]...    *     (Optional query param).    * @param infofilters If specified, matched entities should have exact matches    *     to the given info represented as key-value pairs. This is represented    *     as infofilters=info1:value1,info2:value2... (Optional query param).    * @param conffilters If specified, matched entities should have exact matches    *     to the given configs represented as key-value pairs. This is    *     represented as conffilters=conf1:value1,conf2:value2... (Optional query    *     param).    * @param metricfilters If specified, matched entities should contain the    *     given metrics. This is represented as    *     metricfilters=metricid1, metricid2... (Optional query param).    * @param eventfilters If specified, matched entities should contain the given    *     events. This is represented as eventfilters=eventid1, eventid2...    * @param confsToRetrieve If specified, defines which configurations to    *     retrieve and send back in response. These configs will be retrieved    *     irrespective of whether configs are specified in fields to retrieve or    *     not.    * @param metricsToRetrieve If specified, defines which metrics to retrieve    *     and send back in response. These metrics will be retrieved    *     irrespective of whether metrics are specified in fields to retrieve or    *     not.    * @param fields Specifies which fields of the entity object to retrieve, see    *     {@link Field}. All fields will be retrieved if fields=ALL. If not    *     specified, 3 fields i.e. entity type, id and created time is returned    *     (Optional query param).    * @param metricsLimit If specified, defines the number of metrics to return.    *     Considered only if fields contains METRICS/ALL or metricsToRetrieve is    *     specified. Ignored otherwise. The maximum possible value for    *     metricsLimit can be {@link Integer#MAX_VALUE}. If it is not specified    *     or has a value less than 1, and metrics have to be retrieved, then    *     metricsLimit will be considered as 1 i.e. latest single value of    *     metric(s) will be returned. (Optional query param).    * @param fromIdPrefix If specified, retrieve entities with an id prefix    *     greater than or equal to the specified fromIdPrefix. If fromIdPrefix    *     is same for all entities of a given entity type, then the user must    *     provide fromId as a filter to denote the start entity from which    *     further entities will be fetched. fromIdPrefix is mandatory even    *     in the case the entity id prefix is not used and should be set to 0.    * @param fromId If specified along with fromIdPrefix, retrieve entities with    *     an id prefix greater than or equal to specified id prefix in    *     fromIdPrefix and entity id lexicographically greater than or equal    *     to entity id specified in fromId. Please note than fromIdPrefix is    *     mandatory if fromId is specified, otherwise, the filter will be    *     ignored. It is recommended to provide both fromIdPrefix and fromId    *     filters for more accurate results as id prefix may not be unique    *     for an entity.    *    * @return If successful, a HTTP 200(OK) response having a JSON representing    *     a set of<cite>TimelineEntity</cite> instances of the given entity type    *     is returned.<br>    *     On failures,<br>    *     If any problem occurs in parsing request or UID is incorrect,    *     HTTP 400(Bad Request) is returned.<br>    *     For all other errors while retrieving data, HTTP 500(Internal Server    *     Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/app-uid/{uid}/entities/{entitytype}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|getEntities ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String uId, @PathParam(R) String entityType, @QueryParam(R) String limit, @QueryParam(R) String createdTimeStart, @QueryParam(R) String createdTimeEnd, @QueryParam(R) String relatesTo, @QueryParam(R) String isRelatedTo, @QueryParam(R) String infofilters, @QueryParam(R) String conffilters, @QueryParam(R) String metricfilters, @QueryParam(R) String eventfilters, @QueryParam(R) String confsToRetrieve, @QueryParam(R) String metricsToRetrieve, @QueryParam(R) String fields, @QueryParam(R) String metricsLimit, @QueryParam(R) String fromIdPrefix, @QueryParam(R) String fromId)
specifier|public
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|getEntities
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"uid"
argument_list|)
name|String
name|uId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"entitytype"
argument_list|)
name|String
name|entityType
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"limit"
argument_list|)
name|String
name|limit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimestart"
argument_list|)
name|String
name|createdTimeStart
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimeend"
argument_list|)
name|String
name|createdTimeEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"relatesto"
argument_list|)
name|String
name|relatesTo
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"isrelatedto"
argument_list|)
name|String
name|isRelatedTo
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"infofilters"
argument_list|)
name|String
name|infofilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"conffilters"
argument_list|)
name|String
name|conffilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricfilters"
argument_list|)
name|String
name|metricfilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"eventfilters"
argument_list|)
name|String
name|eventfilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"confstoretrieve"
argument_list|)
name|String
name|confsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricstoretrieve"
argument_list|)
name|String
name|metricsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricslimit"
argument_list|)
name|String
name|metricsLimit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fromidprefix"
argument_list|)
name|String
name|fromIdPrefix
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fromid"
argument_list|)
name|String
name|fromId
parameter_list|)
block|{
name|String
name|url
init|=
name|req
operator|.
name|getRequestURI
argument_list|()
operator|+
operator|(
name|req
operator|.
name|getQueryString
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|QUERY_STRING_SEP
operator|+
name|req
operator|.
name|getQueryString
argument_list|()
operator|)
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|TimelineReaderWebServicesUtils
operator|.
name|getUser
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received URL "
operator|+
name|url
operator|+
literal|" from user "
operator|+
name|TimelineReaderWebServicesUtils
operator|.
name|getUserName
argument_list|(
name|callerUGI
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|init
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|TimelineReaderManager
name|timelineReaderManager
init|=
name|getTimelineReaderManager
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|entities
init|=
literal|null
decl_stmt|;
try|try
block|{
name|TimelineReaderContext
name|context
init|=
name|TimelineUIDConverter
operator|.
name|APPLICATION_UID
operator|.
name|decodeUID
argument_list|(
name|uId
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Incorrect UID "
operator|+
name|uId
argument_list|)
throw|;
block|}
name|context
operator|.
name|setEntityType
argument_list|(
name|TimelineReaderWebServicesUtils
operator|.
name|parseStr
argument_list|(
name|entityType
argument_list|)
argument_list|)
expr_stmt|;
name|entities
operator|=
name|timelineReaderManager
operator|.
name|getEntities
argument_list|(
name|context
argument_list|,
name|TimelineReaderWebServicesUtils
operator|.
name|createTimelineEntityFilters
argument_list|(
name|limit
argument_list|,
name|createdTimeStart
argument_list|,
name|createdTimeEnd
argument_list|,
name|relatesTo
argument_list|,
name|isRelatedTo
argument_list|,
name|infofilters
argument_list|,
name|conffilters
argument_list|,
name|metricfilters
argument_list|,
name|eventfilters
argument_list|,
name|fromIdPrefix
argument_list|,
name|fromId
argument_list|)
argument_list|,
name|TimelineReaderWebServicesUtils
operator|.
name|createTimelineDataToRetrieve
argument_list|(
name|confsToRetrieve
argument_list|,
name|metricsToRetrieve
argument_list|,
name|fields
argument_list|,
name|metricsLimit
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|,
name|url
argument_list|,
name|startTime
argument_list|,
literal|"createdTime start/end or limit or flowrunid"
argument_list|)
expr_stmt|;
block|}
name|long
name|endTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
if|if
condition|(
name|entities
operator|==
literal|null
condition|)
block|{
name|entities
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed URL "
operator|+
name|url
operator|+
literal|" (Took "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|" ms.)"
argument_list|)
expr_stmt|;
return|return
name|entities
return|;
block|}
comment|/**    * Return a set of entities that match the given parameters. Cluster ID is not    * provided by client so default cluster ID has to be taken. If userid, flow    * name and flowrun id which are optional query parameters are not specified,    * they will be queried based on app id and default cluster id from the flow    * context information stored in underlying storage implementation. If number    * of matching entities are more than the limit, most recent entities till the    * limit is reached, will be returned.    *    * @param req Servlet request.    * @param res Servlet response.    * @param appId Application id to which the entities to be queried belong to(    *     Mandatory path param).    * @param entityType Type of entities(Mandatory path param).    * @param userId User id which should match for the entities(Optional query    *     param)    * @param flowName Flow name which should match for the entities(Optional    *     query param).    * @param flowRunId Run id which should match for the entities(Optional query    *     param).    * @param limit If specified, defines the number of entities to return. The    *     maximum possible value for limit can be {@link Long#MAX_VALUE}. If it    *     is not specified or has a value less than 0, then limit will be    *     considered as 100. (Optional query param).    * @param createdTimeStart If specified, matched entities should not be    *     created before this timestamp(Optional query param).    * @param createdTimeEnd If specified, matched entities should not be created    *     after this timestamp(Optional query param).    * @param relatesTo If specified, matched entities should relate to given    *     entities associated with a entity type. relatesto is a comma separated    *     list in the format [entitytype]:[entityid1]:[entityid2]... (Optional    *     query param).    * @param isRelatedTo If specified, matched entities should be related to    *     given entities associated with a entity type. relatesto is a comma    *     separated list in the format [entitytype]:[entityid1]:[entityid2]...    *     (Optional query param).    * @param infofilters If specified, matched entities should have exact matches    *     to the given info represented as key-value pairs. This is represented    *     as infofilters=info1:value1,info2:value2... (Optional query param).    * @param conffilters If specified, matched entities should have exact matches    *     to the given configs represented as key-value pairs. This is    *     represented as conffilters=conf1:value1,conf2:value2... (Optional query    *     param).    * @param metricfilters If specified, matched entities should contain the    *     given metrics. This is represented as    *     metricfilters=metricid1, metricid2... (Optional query param).    * @param eventfilters If specified, matched entities should contain the given    *     events. This is represented as eventfilters=eventid1, eventid2...    * @param confsToRetrieve If specified, defines which configurations to    *     retrieve and send back in response. These configs will be retrieved    *     irrespective of whether configs are specified in fields to retrieve or    *     not.    * @param metricsToRetrieve If specified, defines which metrics to retrieve    *     and send back in response. These metrics will be retrieved    *     irrespective of whether metrics are specified in fields to retrieve or    *     not.    * @param fields Specifies which fields of the entity object to retrieve, see    *     {@link Field}. All fields will be retrieved if fields=ALL. If not    *     specified, 3 fields i.e. entity type, id, created time is returned    *     (Optional query param).    * @param metricsLimit If specified, defines the number of metrics to return.    *     Considered only if fields contains METRICS/ALL or metricsToRetrieve is    *     specified. Ignored otherwise. The maximum possible value for    *     metricsLimit can be {@link Integer#MAX_VALUE}. If it is not specified    *     or has a value less than 1, and metrics have to be retrieved, then    *     metricsLimit will be considered as 1 i.e. latest single value of    *     metric(s) will be returned. (Optional query param).    * @param fromIdPrefix If specified, retrieve entities with an id prefix    *     greater than or equal to the specified fromIdPrefix. If fromIdPrefix    *     is same for all entities of a given entity type, then the user must    *     provide fromId as a filter to denote the start entity from which    *     further entities will be fetched. fromIdPrefix is mandatory even    *     in the case the entity id prefix is not used and should be set to 0.    * @param fromId If specified along with fromIdPrefix, retrieve entities with    *     an id prefix greater than or equal to specified id prefix in    *     fromIdPrefix and entity id lexicographically greater than or equal    *     to entity id specified in fromId. Please note than fromIdPrefix is    *     mandatory if fromId is specified, otherwise, the filter will be    *     ignored. It is recommended to provide both fromIdPrefix and fromId    *     filters for more accurate results as id prefix may not be unique    *     for an entity.    *    * @return If successful, a HTTP 200(OK) response having a JSON representing    *     a set of<cite>TimelineEntity</cite> instances of the given entity type    *     is returned.<br>    *     On failures,<br>    *     If any problem occurs in parsing request, HTTP 400(Bad Request) is    *     returned.<br>    *     If flow context information cannot be retrieved, HTTP 404(Not Found)    *     is returned.<br>    *     For all other errors while retrieving data, HTTP 500(Internal Server    *     Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/apps/{appid}/entities/{entitytype}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|getEntities ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String appId, @PathParam(R) String entityType, @QueryParam(R) String userId, @QueryParam(R) String flowName, @QueryParam(R) String flowRunId, @QueryParam(R) String limit, @QueryParam(R) String createdTimeStart, @QueryParam(R) String createdTimeEnd, @QueryParam(R) String relatesTo, @QueryParam(R) String isRelatedTo, @QueryParam(R) String infofilters, @QueryParam(R) String conffilters, @QueryParam(R) String metricfilters, @QueryParam(R) String eventfilters, @QueryParam(R) String confsToRetrieve, @QueryParam(R) String metricsToRetrieve, @QueryParam(R) String fields, @QueryParam(R) String metricsLimit, @QueryParam(R) String fromIdPrefix, @QueryParam(R) String fromId)
specifier|public
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|getEntities
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"entitytype"
argument_list|)
name|String
name|entityType
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"userid"
argument_list|)
name|String
name|userId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowname"
argument_list|)
name|String
name|flowName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowrunid"
argument_list|)
name|String
name|flowRunId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"limit"
argument_list|)
name|String
name|limit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimestart"
argument_list|)
name|String
name|createdTimeStart
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimeend"
argument_list|)
name|String
name|createdTimeEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"relatesto"
argument_list|)
name|String
name|relatesTo
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"isrelatedto"
argument_list|)
name|String
name|isRelatedTo
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"infofilters"
argument_list|)
name|String
name|infofilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"conffilters"
argument_list|)
name|String
name|conffilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricfilters"
argument_list|)
name|String
name|metricfilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"eventfilters"
argument_list|)
name|String
name|eventfilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"confstoretrieve"
argument_list|)
name|String
name|confsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricstoretrieve"
argument_list|)
name|String
name|metricsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricslimit"
argument_list|)
name|String
name|metricsLimit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fromidprefix"
argument_list|)
name|String
name|fromIdPrefix
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fromid"
argument_list|)
name|String
name|fromId
parameter_list|)
block|{
return|return
name|getEntities
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
literal|null
argument_list|,
name|appId
argument_list|,
name|entityType
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
name|flowRunId
argument_list|,
name|limit
argument_list|,
name|createdTimeStart
argument_list|,
name|createdTimeEnd
argument_list|,
name|relatesTo
argument_list|,
name|isRelatedTo
argument_list|,
name|infofilters
argument_list|,
name|conffilters
argument_list|,
name|metricfilters
argument_list|,
name|eventfilters
argument_list|,
name|confsToRetrieve
argument_list|,
name|metricsToRetrieve
argument_list|,
name|fields
argument_list|,
name|metricsLimit
argument_list|,
name|fromIdPrefix
argument_list|,
name|fromId
argument_list|)
return|;
block|}
comment|/**    * Return a set of entities that match the given parameters. If userid, flow    * name and flowrun id which are optional query parameters are not specified,    * they will be queried based on app id and cluster id from the flow context    * information stored in underlying storage implementation. If number of    * matching entities are more than the limit, most recent entities till the    * limit is reached, will be returned.    *    * @param req Servlet request.    * @param res Servlet response.    * @param clusterId Cluster id to which the entities to be queried belong to(    *     Mandatory path param).    * @param appId Application id to which the entities to be queried belong to(    *     Mandatory path param).    * @param entityType Type of entities(Mandatory path param).    * @param userId User id which should match for the entities(Optional query    *     param)    * @param flowName Flow name which should match for the entities(Optional    *     query param).    * @param flowRunId Run id which should match for the entities(Optional query    *     param).    * @param limit If specified, defines the number of entities to return. The    *     maximum possible value for limit can be {@link Long#MAX_VALUE}. If it    *     is not specified or has a value less than 0, then limit will be    *     considered as 100. (Optional query param).    * @param createdTimeStart If specified, matched entities should not be    *     created before this timestamp(Optional query param).    * @param createdTimeEnd If specified, matched entities should not be created    *     after this timestamp(Optional query param).    * @param relatesTo If specified, matched entities should relate to given    *     entities associated with a entity type. relatesto is a comma separated    *     list in the format [entitytype]:[entityid1]:[entityid2]... (Optional    *     query param).    * @param isRelatedTo If specified, matched entities should be related to    *     given entities associated with a entity type. relatesto is a comma    *     separated list in the format [entitytype]:[entityid1]:[entityid2]...    *     (Optional query param).    * @param infofilters If specified, matched entities should have exact matches    *     to the given info represented as key-value pairs. This is represented    *     as infofilters=info1:value1,info2:value2... (Optional query param).    * @param conffilters If specified, matched entities should have exact matches    *     to the given configs represented as key-value pairs. This is    *     represented as conffilters=conf1:value1,conf2:value2... (Optional query    *     param).    * @param metricfilters If specified, matched entities should contain the    *     given metrics. This is represented as    *     metricfilters=metricid1, metricid2... (Optional query param).    * @param eventfilters If specified, matched entities should contain the given    *     events. This is represented as eventfilters=eventid1, eventid2...    * @param confsToRetrieve If specified, defines which configurations to    *     retrieve and send back in response. These configs will be retrieved    *     irrespective of whether configs are specified in fields to retrieve or    *     not.    * @param metricsToRetrieve If specified, defines which metrics to retrieve    *     and send back in response. These metrics will be retrieved    *     irrespective of whether metrics are specified in fields to retrieve or    *     not.    * @param fields Specifies which fields of the entity object to retrieve, see    *     {@link Field}. All fields will be retrieved if fields=ALL. If not    *     specified, 3 fields i.e. entity type, id, created time is returned    *     (Optional query param).    * @param metricsLimit If specified, defines the number of metrics to return.    *     Considered only if fields contains METRICS/ALL or metricsToRetrieve is    *     specified. Ignored otherwise. The maximum possible value for    *     metricsLimit can be {@link Integer#MAX_VALUE}. If it is not specified    *     or has a value less than 1, and metrics have to be retrieved, then    *     metricsLimit will be considered as 1 i.e. latest single value of    *     metric(s) will be returned. (Optional query param).    * @param fromIdPrefix If specified, retrieve entities with an id prefix    *     greater than or equal to the specified fromIdPrefix. If fromIdPrefix    *     is same for all entities of a given entity type, then the user must    *     provide fromId as a filter to denote the start entity from which    *     further entities will be fetched. fromIdPrefix is mandatory even    *     in the case the entity id prefix is not used and should be set to 0.    * @param fromId If specified along with fromIdPrefix, retrieve entities with    *     an id prefix greater than or equal to specified id prefix in    *     fromIdPrefix and entity id lexicographically greater than or equal    *     to entity id specified in fromId. Please note than fromIdPrefix is    *     mandatory if fromId is specified, otherwise, the filter will be    *     ignored. It is recommended to provide both fromIdPrefix and fromId    *     filters for more accurate results as id prefix may not be unique    *     for an entity.    *    * @return If successful, a HTTP 200(OK) response having a JSON representing    *     a set of<cite>TimelineEntity</cite> instances of the given entity type    *     is returned.<br>    *     On failures,<br>    *     If any problem occurs in parsing request, HTTP 400(Bad Request) is    *     returned.<br>    *     If flow context information cannot be retrieved, HTTP 404(Not Found)    *     is returned.<br>    *     For all other errors while retrieving data, HTTP 500(Internal Server    *     Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/clusters/{clusterid}/apps/{appid}/entities/{entitytype}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|getEntities ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String clusterId, @PathParam(R) String appId, @PathParam(R) String entityType, @QueryParam(R) String userId, @QueryParam(R) String flowName, @QueryParam(R) String flowRunId, @QueryParam(R) String limit, @QueryParam(R) String createdTimeStart, @QueryParam(R) String createdTimeEnd, @QueryParam(R) String relatesTo, @QueryParam(R) String isRelatedTo, @QueryParam(R) String infofilters, @QueryParam(R) String conffilters, @QueryParam(R) String metricfilters, @QueryParam(R) String eventfilters, @QueryParam(R) String confsToRetrieve, @QueryParam(R) String metricsToRetrieve, @QueryParam(R) String fields, @QueryParam(R) String metricsLimit, @QueryParam(R) String fromIdPrefix, @QueryParam(R) String fromId)
specifier|public
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|getEntities
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"clusterid"
argument_list|)
name|String
name|clusterId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"entitytype"
argument_list|)
name|String
name|entityType
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"userid"
argument_list|)
name|String
name|userId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowname"
argument_list|)
name|String
name|flowName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowrunid"
argument_list|)
name|String
name|flowRunId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"limit"
argument_list|)
name|String
name|limit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimestart"
argument_list|)
name|String
name|createdTimeStart
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimeend"
argument_list|)
name|String
name|createdTimeEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"relatesto"
argument_list|)
name|String
name|relatesTo
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"isrelatedto"
argument_list|)
name|String
name|isRelatedTo
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"infofilters"
argument_list|)
name|String
name|infofilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"conffilters"
argument_list|)
name|String
name|conffilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricfilters"
argument_list|)
name|String
name|metricfilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"eventfilters"
argument_list|)
name|String
name|eventfilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"confstoretrieve"
argument_list|)
name|String
name|confsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricstoretrieve"
argument_list|)
name|String
name|metricsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricslimit"
argument_list|)
name|String
name|metricsLimit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fromidprefix"
argument_list|)
name|String
name|fromIdPrefix
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fromid"
argument_list|)
name|String
name|fromId
parameter_list|)
block|{
name|String
name|url
init|=
name|req
operator|.
name|getRequestURI
argument_list|()
operator|+
operator|(
name|req
operator|.
name|getQueryString
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|QUERY_STRING_SEP
operator|+
name|req
operator|.
name|getQueryString
argument_list|()
operator|)
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|TimelineReaderWebServicesUtils
operator|.
name|getUser
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received URL "
operator|+
name|url
operator|+
literal|" from user "
operator|+
name|TimelineReaderWebServicesUtils
operator|.
name|getUserName
argument_list|(
name|callerUGI
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|init
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|TimelineReaderManager
name|timelineReaderManager
init|=
name|getTimelineReaderManager
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|entities
init|=
literal|null
decl_stmt|;
try|try
block|{
name|TimelineReaderContext
name|context
init|=
name|TimelineReaderWebServicesUtils
operator|.
name|createTimelineReaderContext
argument_list|(
name|clusterId
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
name|flowRunId
argument_list|,
name|appId
argument_list|,
name|entityType
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|entities
operator|=
name|timelineReaderManager
operator|.
name|getEntities
argument_list|(
name|context
argument_list|,
name|TimelineReaderWebServicesUtils
operator|.
name|createTimelineEntityFilters
argument_list|(
name|limit
argument_list|,
name|createdTimeStart
argument_list|,
name|createdTimeEnd
argument_list|,
name|relatesTo
argument_list|,
name|isRelatedTo
argument_list|,
name|infofilters
argument_list|,
name|conffilters
argument_list|,
name|metricfilters
argument_list|,
name|eventfilters
argument_list|,
name|fromIdPrefix
argument_list|,
name|fromId
argument_list|)
argument_list|,
name|TimelineReaderWebServicesUtils
operator|.
name|createTimelineDataToRetrieve
argument_list|(
name|confsToRetrieve
argument_list|,
name|metricsToRetrieve
argument_list|,
name|fields
argument_list|,
name|metricsLimit
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|,
name|url
argument_list|,
name|startTime
argument_list|,
literal|"createdTime start/end or limit or flowrunid"
argument_list|)
expr_stmt|;
block|}
name|long
name|endTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
if|if
condition|(
name|entities
operator|==
literal|null
condition|)
block|{
name|entities
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed URL "
operator|+
name|url
operator|+
literal|" (Took "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|" ms.)"
argument_list|)
expr_stmt|;
return|return
name|entities
return|;
block|}
comment|/**    * Return a single entity for given UID which is a delimited string containing    * clusterid, userid, flow name, flowrun id, app id, entity type and entityid.    *    * @param req Servlet request.    * @param res Servlet response.    * @param uId a delimited string containing clusterid, userid, flow name,    *     flowrun id, app id, entity type and entity id which are extracted from    *     UID and then used to query backend(Mandatory path param).    * @param confsToRetrieve If specified, defines which configurations to    *     retrieve and send back in response. These configs will be retrieved    *     irrespective of whether configs are specified in fields to retrieve or    *     not.    * @param metricsToRetrieve If specified, defines which metrics to retrieve    *     and send back in response. These metrics will be retrieved    *     irrespective of whether metrics are specified in fields to retrieve or    *     not.    * @param fields Specifies which fields of the entity object to retrieve, see    *     {@link Field}. All fields will be retrieved if fields=ALL. If not    *     specified, 3 fields i.e. entity type, id, created time is returned    *     (Optional query param).    * @param metricsLimit If specified, defines the number of metrics to return.    *     Considered only if fields contains METRICS/ALL or metricsToRetrieve is    *     specified. Ignored otherwise. The maximum possible value for    *     metricsLimit can be {@link Integer#MAX_VALUE}. If it is not specified    *     or has a value less than 1, and metrics have to be retrieved, then    *     metricsLimit will be considered as 1 i.e. latest single value of    *     metric(s) will be returned. (Optional query param).    *    * @return If successful, a HTTP 200(OK) response having a JSON representing a    *<cite>TimelineEntity</cite> instance is returned.<br>    *     On failures,<br>    *     If any problem occurs in parsing request or UID is incorrect,    *     HTTP 400(Bad Request) is returned.<br>    *     If entity for the given entity id cannot be found, HTTP 404(Not Found)    *     is returned.<br>    *     For all other errors while retrieving data, HTTP 500(Internal Server    *     Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/entity-uid/{uid}/"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|getEntity ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String uId, @QueryParam(R) String confsToRetrieve, @QueryParam(R) String metricsToRetrieve, @QueryParam(R) String fields, @QueryParam(R) String metricsLimit)
specifier|public
name|TimelineEntity
name|getEntity
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"uid"
argument_list|)
name|String
name|uId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"confstoretrieve"
argument_list|)
name|String
name|confsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricstoretrieve"
argument_list|)
name|String
name|metricsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricslimit"
argument_list|)
name|String
name|metricsLimit
parameter_list|)
block|{
name|String
name|url
init|=
name|req
operator|.
name|getRequestURI
argument_list|()
operator|+
operator|(
name|req
operator|.
name|getQueryString
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|QUERY_STRING_SEP
operator|+
name|req
operator|.
name|getQueryString
argument_list|()
operator|)
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|TimelineReaderWebServicesUtils
operator|.
name|getUser
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received URL "
operator|+
name|url
operator|+
literal|" from user "
operator|+
name|TimelineReaderWebServicesUtils
operator|.
name|getUserName
argument_list|(
name|callerUGI
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|init
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|TimelineReaderManager
name|timelineReaderManager
init|=
name|getTimelineReaderManager
argument_list|()
decl_stmt|;
name|TimelineEntity
name|entity
init|=
literal|null
decl_stmt|;
try|try
block|{
name|TimelineReaderContext
name|context
init|=
name|TimelineUIDConverter
operator|.
name|GENERIC_ENTITY_UID
operator|.
name|decodeUID
argument_list|(
name|uId
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Incorrect UID "
operator|+
name|uId
argument_list|)
throw|;
block|}
name|entity
operator|=
name|timelineReaderManager
operator|.
name|getEntity
argument_list|(
name|context
argument_list|,
name|TimelineReaderWebServicesUtils
operator|.
name|createTimelineDataToRetrieve
argument_list|(
name|confsToRetrieve
argument_list|,
name|metricsToRetrieve
argument_list|,
name|fields
argument_list|,
name|metricsLimit
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|,
name|url
argument_list|,
name|startTime
argument_list|,
literal|"flowrunid"
argument_list|)
expr_stmt|;
block|}
name|long
name|endTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed URL "
operator|+
name|url
operator|+
literal|" but entity not found"
operator|+
literal|" (Took "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|" ms.)"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Timeline entity with uid: "
operator|+
name|uId
operator|+
literal|"is not found"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed URL "
operator|+
name|url
operator|+
literal|" (Took "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|" ms.)"
argument_list|)
expr_stmt|;
return|return
name|entity
return|;
block|}
comment|/**    * Return a single entity of the given entity type and Id. Cluster ID is not    * provided by client so default cluster ID has to be taken. If userid, flow    * name and flowrun id which are optional query parameters are not specified,    * they will be queried based on app id and default cluster id from the flow    * context information stored in underlying storage implementation.    *    * @param req Servlet request.    * @param res Servlet response.    * @param appId Application id to which the entity to be queried belongs to(    *     Mandatory path param).    * @param entityType Type of entity(Mandatory path param).    * @param entityId Id of the entity to be fetched(Mandatory path param).    * @param userId User id which should match for the entity(Optional query    *     param).    * @param flowName Flow name which should match for the entity(Optional query    *     param).    * @param flowRunId Run id which should match for the entity(Optional query    *     param).    * @param confsToRetrieve If specified, defines which configurations to    *     retrieve and send back in response. These configs will be retrieved    *     irrespective of whether configs are specified in fields to retrieve or    *     not.    * @param metricsToRetrieve If specified, defines which metrics to retrieve    *     and send back in response. These metrics will be retrieved    *     irrespective of whether metrics are specified in fields to retrieve or    *     not.    * @param fields Specifies which fields of the entity object to retrieve, see    *     {@link Field}. All fields will be retrieved if fields=ALL. If not    *     specified, 3 fields i.e. entity type, id, created time is returned    *     (Optional query param).    * @param metricsLimit If specified, defines the number of metrics to return.    *     Considered only if fields contains METRICS/ALL or metricsToRetrieve is    *     specified. Ignored otherwise. The maximum possible value for    *     metricsLimit can be {@link Integer#MAX_VALUE}. If it is not specified    *     or has a value less than 1, and metrics have to be retrieved, then    *     metricsLimit will be considered as 1 i.e. latest single value of    *     metric(s) will be returned. (Optional query param).    * @param entityIdPrefix Defines the id prefix for the entity to be fetched.    *     If specified, then entity retrieval will be faster.    *    * @return If successful, a HTTP 200(OK) response having a JSON representing a    *<cite>TimelineEntity</cite> instance is returned.<br>    *     On failures,<br>    *     If any problem occurs in parsing request, HTTP 400(Bad Request) is    *     returned.<br>    *     If flow context information cannot be retrieved or entity for the given    *     entity id cannot be found, HTTP 404(Not Found) is returned.<br>    *     For all other errors while retrieving data, HTTP 500(Internal Server    *     Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/apps/{appid}/entities/{entitytype}/{entityid}/"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|getEntity ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String appId, @PathParam(R) String entityType, @PathParam(R) String entityId, @QueryParam(R) String userId, @QueryParam(R) String flowName, @QueryParam(R) String flowRunId, @QueryParam(R) String confsToRetrieve, @QueryParam(R) String metricsToRetrieve, @QueryParam(R) String fields, @QueryParam(R) String metricsLimit, @QueryParam(R) String entityIdPrefix)
specifier|public
name|TimelineEntity
name|getEntity
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"entitytype"
argument_list|)
name|String
name|entityType
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"entityid"
argument_list|)
name|String
name|entityId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"userid"
argument_list|)
name|String
name|userId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowname"
argument_list|)
name|String
name|flowName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowrunid"
argument_list|)
name|String
name|flowRunId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"confstoretrieve"
argument_list|)
name|String
name|confsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricstoretrieve"
argument_list|)
name|String
name|metricsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricslimit"
argument_list|)
name|String
name|metricsLimit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"entityidprefix"
argument_list|)
name|String
name|entityIdPrefix
parameter_list|)
block|{
return|return
name|getEntity
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
literal|null
argument_list|,
name|appId
argument_list|,
name|entityType
argument_list|,
name|entityId
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
name|flowRunId
argument_list|,
name|confsToRetrieve
argument_list|,
name|metricsToRetrieve
argument_list|,
name|fields
argument_list|,
name|metricsLimit
argument_list|,
name|entityIdPrefix
argument_list|)
return|;
block|}
comment|/**    * Return a single entity of the given entity type and Id. If userid, flowname    * and flowrun id which are optional query parameters are not specified, they    * will be queried based on app id and cluster id from the flow context    * information stored in underlying storage implementation.    *    * @param req Servlet request.    * @param res Servlet response.    * @param clusterId Cluster id to which the entity to be queried belongs to(    *     Mandatory path param).    * @param appId Application id to which the entity to be queried belongs to(    *     Mandatory path param).    * @param entityType Type of entity(Mandatory path param).    * @param entityId Id of the entity to be fetched(Mandatory path param).    * @param userId User id which should match for the entity(Optional query    *     param).    * @param flowName Flow name which should match for the entity(Optional query    *     param).    * @param flowRunId Run id which should match for the entity(Optional query    *     param).    * @param confsToRetrieve If specified, defines which configurations to    *     retrieve and send back in response. These configs will be retrieved    *     irrespective of whether configs are specified in fields to retrieve or    *     not.    * @param metricsToRetrieve If specified, defines which metrics to retrieve    *     and send back in response. These metrics will be retrieved    *     irrespective of whether metrics are specified in fields to retrieve or    *     not.    * @param fields Specifies which fields of the entity object to retrieve, see    *     {@link Field}. All fields will be retrieved if fields=ALL. If not    *     specified, 3 fields i.e. entity type, id and created time is returned    *     (Optional query param).    * @param metricsLimit If specified, defines the number of metrics to return.    *     Considered only if fields contains METRICS/ALL or metricsToRetrieve is    *     specified. Ignored otherwise. The maximum possible value for    *     metricsLimit can be {@link Integer#MAX_VALUE}. If it is not specified    *     or has a value less than 1, and metrics have to be retrieved, then    *     metricsLimit will be considered as 1 i.e. latest single value of    *     metric(s) will be returned. (Optional query param).    * @param entityIdPrefix Defines the id prefix for the entity to be fetched.    *     If specified, then entity retrieval will be faster.    *    * @return If successful, a HTTP 200(OK) response having a JSON representing a    *<cite>TimelineEntity</cite> instance is returned.<br>    *     On failures,<br>    *     If any problem occurs in parsing request, HTTP 400(Bad Request) is    *     returned.<br>    *     If flow context information cannot be retrieved or entity for the given    *     entity id cannot be found, HTTP 404(Not Found) is returned.<br>    *     For all other errors while retrieving data, HTTP 500(Internal Server    *     Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/clusters/{clusterid}/apps/{appid}/entities/{entitytype}/{entityid}/"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|getEntity ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String clusterId, @PathParam(R) String appId, @PathParam(R) String entityType, @PathParam(R) String entityId, @QueryParam(R) String userId, @QueryParam(R) String flowName, @QueryParam(R) String flowRunId, @QueryParam(R) String confsToRetrieve, @QueryParam(R) String metricsToRetrieve, @QueryParam(R) String fields, @QueryParam(R) String metricsLimit, @QueryParam(R) String entityIdPrefix)
specifier|public
name|TimelineEntity
name|getEntity
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"clusterid"
argument_list|)
name|String
name|clusterId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"entitytype"
argument_list|)
name|String
name|entityType
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"entityid"
argument_list|)
name|String
name|entityId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"userid"
argument_list|)
name|String
name|userId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowname"
argument_list|)
name|String
name|flowName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowrunid"
argument_list|)
name|String
name|flowRunId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"confstoretrieve"
argument_list|)
name|String
name|confsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricstoretrieve"
argument_list|)
name|String
name|metricsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricslimit"
argument_list|)
name|String
name|metricsLimit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"entityidprefix"
argument_list|)
name|String
name|entityIdPrefix
parameter_list|)
block|{
name|String
name|url
init|=
name|req
operator|.
name|getRequestURI
argument_list|()
operator|+
operator|(
name|req
operator|.
name|getQueryString
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|QUERY_STRING_SEP
operator|+
name|req
operator|.
name|getQueryString
argument_list|()
operator|)
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|TimelineReaderWebServicesUtils
operator|.
name|getUser
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received URL "
operator|+
name|url
operator|+
literal|" from user "
operator|+
name|TimelineReaderWebServicesUtils
operator|.
name|getUserName
argument_list|(
name|callerUGI
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|init
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|TimelineReaderManager
name|timelineReaderManager
init|=
name|getTimelineReaderManager
argument_list|()
decl_stmt|;
name|TimelineEntity
name|entity
init|=
literal|null
decl_stmt|;
try|try
block|{
name|entity
operator|=
name|timelineReaderManager
operator|.
name|getEntity
argument_list|(
name|TimelineReaderWebServicesUtils
operator|.
name|createTimelineReaderContext
argument_list|(
name|clusterId
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
name|flowRunId
argument_list|,
name|appId
argument_list|,
name|entityType
argument_list|,
name|entityIdPrefix
argument_list|,
name|entityId
argument_list|)
argument_list|,
name|TimelineReaderWebServicesUtils
operator|.
name|createTimelineDataToRetrieve
argument_list|(
name|confsToRetrieve
argument_list|,
name|metricsToRetrieve
argument_list|,
name|fields
argument_list|,
name|metricsLimit
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|,
name|url
argument_list|,
name|startTime
argument_list|,
literal|"flowrunid"
argument_list|)
expr_stmt|;
block|}
name|long
name|endTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed URL "
operator|+
name|url
operator|+
literal|" but entity not found"
operator|+
literal|" (Took "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|" ms.)"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Timeline entity {id: "
operator|+
name|entityId
operator|+
literal|", type: "
operator|+
name|entityType
operator|+
literal|" } is not found"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed URL "
operator|+
name|url
operator|+
literal|" (Took "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|" ms.)"
argument_list|)
expr_stmt|;
return|return
name|entity
return|;
block|}
comment|/**    * Return a single flow run for given UID which is a delimited string    * containing clusterid, userid, flow name and flowrun id.    *    * @param req Servlet request.    * @param res Servlet response.    * @param uId a delimited string containing clusterid, userid, flow name and    *     flowrun id which are extracted from UID and then used to query backend    *     (Mandatory path param).    * @param metricsToRetrieve If specified, defines which metrics to retrieve    *     and send back in response.    *    * @return If successful, a HTTP 200(OK) response having a JSON representing a    *<cite>FlowRunEntity</cite> instance is returned. By default, all    *     metrics for the flow run will be returned.<br>    *     On failures,<br>    *     If any problem occurs in parsing request or UID is incorrect,    *     HTTP 400(Bad Request) is returned.<br>    *     If flow run for the given flow run id cannot be found, HTTP 404    *     (Not Found) is returned.<br>    *     For all other errors while retrieving data, HTTP 500(Internal Server    *     Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/run-uid/{uid}/"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|getFlowRun ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String uId, @QueryParam(R) String metricsToRetrieve)
specifier|public
name|TimelineEntity
name|getFlowRun
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"uid"
argument_list|)
name|String
name|uId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricstoretrieve"
argument_list|)
name|String
name|metricsToRetrieve
parameter_list|)
block|{
name|String
name|url
init|=
name|req
operator|.
name|getRequestURI
argument_list|()
operator|+
operator|(
name|req
operator|.
name|getQueryString
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|QUERY_STRING_SEP
operator|+
name|req
operator|.
name|getQueryString
argument_list|()
operator|)
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|TimelineReaderWebServicesUtils
operator|.
name|getUser
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received URL "
operator|+
name|url
operator|+
literal|" from user "
operator|+
name|TimelineReaderWebServicesUtils
operator|.
name|getUserName
argument_list|(
name|callerUGI
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|init
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|TimelineReaderManager
name|timelineReaderManager
init|=
name|getTimelineReaderManager
argument_list|()
decl_stmt|;
name|TimelineEntity
name|entity
init|=
literal|null
decl_stmt|;
try|try
block|{
name|TimelineReaderContext
name|context
init|=
name|TimelineUIDConverter
operator|.
name|FLOWRUN_UID
operator|.
name|decodeUID
argument_list|(
name|uId
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Incorrect UID "
operator|+
name|uId
argument_list|)
throw|;
block|}
name|context
operator|.
name|setEntityType
argument_list|(
name|TimelineEntityType
operator|.
name|YARN_FLOW_RUN
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|entity
operator|=
name|timelineReaderManager
operator|.
name|getEntity
argument_list|(
name|context
argument_list|,
name|TimelineReaderWebServicesUtils
operator|.
name|createTimelineDataToRetrieve
argument_list|(
literal|null
argument_list|,
name|metricsToRetrieve
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|,
name|url
argument_list|,
name|startTime
argument_list|,
literal|"flowrunid"
argument_list|)
expr_stmt|;
block|}
name|long
name|endTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed URL "
operator|+
name|url
operator|+
literal|" but flowrun not found (Took "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|" ms.)"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Flowrun with uid: "
operator|+
name|uId
operator|+
literal|"is not found"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed URL "
operator|+
name|url
operator|+
literal|" (Took "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|" ms.)"
argument_list|)
expr_stmt|;
return|return
name|entity
return|;
block|}
comment|/**    * Return a single flow run for the given user, flow name and run id.    * Cluster ID is not provided by client so default cluster ID has to be taken.    *    * @param req Servlet request.    * @param res Servlet response.    * @param userId User id representing the user who ran the flow run(Mandatory    *     path param).    * @param flowName Flow name to which the flow run to be queried belongs to(    *     Mandatory path param).    * @param flowRunId Id of the flow run to be queried(Mandatory path param).    * @param metricsToRetrieve If specified, defines which metrics to retrieve    *     and send back in response.    *    * @return If successful, a HTTP 200(OK) response having a JSON representing a    *<cite>FlowRunEntity</cite> instance is returned. By default, all    *     metrics for the flow run will be returned.<br>    *     On failures,<br>    *     If any problem occurs in parsing request, HTTP 400(Bad Request) is    *     returned.<br>    *     If flow run for the given flow run id cannot be found, HTTP 404    *     (Not Found) is returned.<br>    *     For all other errors while retrieving data, HTTP 500(Internal Server    *     Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/users/{userid}/flows/{flowname}/runs/{flowrunid}/"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|getFlowRun ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String userId, @PathParam(R) String flowName, @PathParam(R) String flowRunId, @QueryParam(R) String metricsToRetrieve)
specifier|public
name|TimelineEntity
name|getFlowRun
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"userid"
argument_list|)
name|String
name|userId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"flowname"
argument_list|)
name|String
name|flowName
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"flowrunid"
argument_list|)
name|String
name|flowRunId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricstoretrieve"
argument_list|)
name|String
name|metricsToRetrieve
parameter_list|)
block|{
return|return
name|getFlowRun
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
literal|null
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
name|flowRunId
argument_list|,
name|metricsToRetrieve
argument_list|)
return|;
block|}
comment|/**    * Return a single flow run for the given user, cluster, flow name and run id.    *    * @param req Servlet request.    * @param res Servlet response.    * @param clusterId Cluster id to which the flow run to be queried belong to(    *     Mandatory path param).    * @param userId User id representing the user who ran the flow run(Mandatory    *     path param).    * @param flowName Flow name to which the flow run to be queried belongs to(    *     Mandatory path param).    * @param flowRunId Id of the flow run to be queried(Mandatory path param).    * @param metricsToRetrieve If specified, defines which metrics to retrieve    *     and send back in response.    *    * @return If successful, a HTTP 200(OK) response having a JSON representing a    *<cite>FlowRunEntity</cite> instance is returned. By default, all    *     metrics for the flow run will be returned.<br>    *     On failures,<br>    *     If any problem occurs in parsing request, HTTP 400(Bad Request) is    *     returned.<br>    *     If flow run for the given flow run id cannot be found, HTTP 404    *     (Not Found) is returned.<br>    *     For all other errors while retrieving data, HTTP 500(Internal Server    *     Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/clusters/{clusterid}/users/{userid}/flows/{flowname}/"
operator|+
literal|"runs/{flowrunid}/"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|getFlowRun ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String clusterId, @PathParam(R) String userId, @PathParam(R) String flowName, @PathParam(R) String flowRunId, @QueryParam(R) String metricsToRetrieve)
specifier|public
name|TimelineEntity
name|getFlowRun
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"clusterid"
argument_list|)
name|String
name|clusterId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"userid"
argument_list|)
name|String
name|userId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"flowname"
argument_list|)
name|String
name|flowName
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"flowrunid"
argument_list|)
name|String
name|flowRunId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricstoretrieve"
argument_list|)
name|String
name|metricsToRetrieve
parameter_list|)
block|{
name|String
name|url
init|=
name|req
operator|.
name|getRequestURI
argument_list|()
operator|+
operator|(
name|req
operator|.
name|getQueryString
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|QUERY_STRING_SEP
operator|+
name|req
operator|.
name|getQueryString
argument_list|()
operator|)
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|TimelineReaderWebServicesUtils
operator|.
name|getUser
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received URL "
operator|+
name|url
operator|+
literal|" from user "
operator|+
name|TimelineReaderWebServicesUtils
operator|.
name|getUserName
argument_list|(
name|callerUGI
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|init
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|TimelineReaderManager
name|timelineReaderManager
init|=
name|getTimelineReaderManager
argument_list|()
decl_stmt|;
name|TimelineEntity
name|entity
init|=
literal|null
decl_stmt|;
try|try
block|{
name|entity
operator|=
name|timelineReaderManager
operator|.
name|getEntity
argument_list|(
name|TimelineReaderWebServicesUtils
operator|.
name|createTimelineReaderContext
argument_list|(
name|clusterId
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
name|flowRunId
argument_list|,
literal|null
argument_list|,
name|TimelineEntityType
operator|.
name|YARN_FLOW_RUN
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TimelineReaderWebServicesUtils
operator|.
name|createTimelineDataToRetrieve
argument_list|(
literal|null
argument_list|,
name|metricsToRetrieve
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|,
name|url
argument_list|,
name|startTime
argument_list|,
literal|"flowrunid"
argument_list|)
expr_stmt|;
block|}
name|long
name|endTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed URL "
operator|+
name|url
operator|+
literal|" but flowrun not found (Took "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|" ms.)"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Flow run {flow name: "
operator|+
name|TimelineReaderWebServicesUtils
operator|.
name|parseStr
argument_list|(
name|flowName
argument_list|)
operator|+
literal|", run id: "
operator|+
name|TimelineReaderWebServicesUtils
operator|.
name|parseLongStr
argument_list|(
name|flowRunId
argument_list|)
operator|+
literal|" } is not found"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed URL "
operator|+
name|url
operator|+
literal|" (Took "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|" ms.)"
argument_list|)
expr_stmt|;
return|return
name|entity
return|;
block|}
comment|/**    * Return a list of flow runs for given UID which is a delimited string    * containing clusterid, userid and flow name.    *    * @param req Servlet request.    * @param res Servlet response.    * @param uId a delimited string containing clusterid, userid, and flow name    *     which are extracted from UID and then used to query backend(Mandatory    *     path param).    * @param limit If specified, defines the number of flow runs to return. The    *     maximum possible value for limit can be {@link Long#MAX_VALUE}. If it    *     is not specified or has a value less than 0, then limit will be    *     considered as 100. (Optional query param).    * @param createdTimeStart If specified, matched flow runs should not be    *     created before this timestamp(Optional query param).    * @param createdTimeEnd If specified, matched flow runs should not be created    *     after this timestamp(Optional query param).    * @param metricsToRetrieve If specified, defines which metrics to retrieve    *     and send back in response. These metrics will be retrieved    *     irrespective of whether metrics are specified in fields to retrieve or    *     not.    * @param fields Specifies which fields to retrieve, see {@link Field}. All    *     fields will be retrieved if fields=ALL. Amongst all the fields, only    *     METRICS makes sense for flow runs hence only ALL or METRICS are    *     supported as fields for fetching flow runs. Other fields will lead to    *     HTTP 400 (Bad Request) response. (Optional query param).    * @param fromId Defines the flow run id. If specified, retrieve the next    *     set of flow runs from the given id. The set of flow runs retrieved    *     is inclusive of specified fromId.    *    * @return If successful, a HTTP 200(OK) response having a JSON representing a    *     set of<cite>FlowRunEntity</cite> instances for the given flow are    *     returned.<br>    *     On failures,<br>    *     If any problem occurs in parsing request or UID is incorrect,    *     HTTP 400(Bad Request) is returned.<br>    *     For all other errors while retrieving data, HTTP 500(Internal Server    *     Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/flow-uid/{uid}/runs/"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|getFlowRuns ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String uId, @QueryParam(R) String limit, @QueryParam(R) String createdTimeStart, @QueryParam(R) String createdTimeEnd, @QueryParam(R) String metricsToRetrieve, @QueryParam(R) String fields, @QueryParam(R) String fromId)
specifier|public
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|getFlowRuns
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"uid"
argument_list|)
name|String
name|uId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"limit"
argument_list|)
name|String
name|limit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimestart"
argument_list|)
name|String
name|createdTimeStart
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimeend"
argument_list|)
name|String
name|createdTimeEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricstoretrieve"
argument_list|)
name|String
name|metricsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fromid"
argument_list|)
name|String
name|fromId
parameter_list|)
block|{
name|String
name|url
init|=
name|req
operator|.
name|getRequestURI
argument_list|()
operator|+
operator|(
name|req
operator|.
name|getQueryString
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|QUERY_STRING_SEP
operator|+
name|req
operator|.
name|getQueryString
argument_list|()
operator|)
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|TimelineReaderWebServicesUtils
operator|.
name|getUser
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received URL "
operator|+
name|url
operator|+
literal|" from user "
operator|+
name|TimelineReaderWebServicesUtils
operator|.
name|getUserName
argument_list|(
name|callerUGI
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|init
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|TimelineReaderManager
name|timelineReaderManager
init|=
name|getTimelineReaderManager
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|entities
init|=
literal|null
decl_stmt|;
try|try
block|{
name|TimelineReaderContext
name|context
init|=
name|TimelineUIDConverter
operator|.
name|FLOW_UID
operator|.
name|decodeUID
argument_list|(
name|uId
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Incorrect UID "
operator|+
name|uId
argument_list|)
throw|;
block|}
name|context
operator|.
name|setEntityType
argument_list|(
name|TimelineEntityType
operator|.
name|YARN_FLOW_RUN
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|entities
operator|=
name|timelineReaderManager
operator|.
name|getEntities
argument_list|(
name|context
argument_list|,
name|TimelineReaderWebServicesUtils
operator|.
name|createTimelineEntityFilters
argument_list|(
name|limit
argument_list|,
name|createdTimeStart
argument_list|,
name|createdTimeEnd
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|fromId
argument_list|)
argument_list|,
name|TimelineReaderWebServicesUtils
operator|.
name|createTimelineDataToRetrieve
argument_list|(
literal|null
argument_list|,
name|metricsToRetrieve
argument_list|,
name|fields
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|,
name|url
argument_list|,
name|startTime
argument_list|,
literal|"createdTime start/end or limit or fromId"
argument_list|)
expr_stmt|;
block|}
name|long
name|endTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
if|if
condition|(
name|entities
operator|==
literal|null
condition|)
block|{
name|entities
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed URL "
operator|+
name|url
operator|+
literal|" (Took "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|" ms.)"
argument_list|)
expr_stmt|;
return|return
name|entities
return|;
block|}
comment|/**    * Return a set of flows runs for the given user and flow name.    * Cluster ID is not provided by client so default cluster ID has to be taken.    *    * @param req Servlet request.    * @param res Servlet response.    * @param userId User id representing the user who ran the flow runs(    *     Mandatory path param)    * @param flowName Flow name to which the flow runs to be queried belongs to(    *     Mandatory path param).    * @param limit If specified, defines the number of flow runs to return. The    *     maximum possible value for limit can be {@link Long#MAX_VALUE}. If it    *     is not specified or has a value less than 0, then limit will be    *     considered as 100. (Optional query param).    * @param createdTimeStart If specified, matched flow runs should not be    *     created before this timestamp(Optional query param).    * @param createdTimeEnd If specified, matched flow runs should not be created    *     after this timestamp(Optional query param).    * @param metricsToRetrieve If specified, defines which metrics to retrieve    *     and send back in response. These metrics will be retrieved    *     irrespective of whether metrics are specified in fields to retrieve or    *     not.    * @param fields Specifies which fields to retrieve, see {@link Field}. All    *     fields will be retrieved if fields=ALL. Amongst all the fields, only    *     METRICS makes sense for flow runs hence only ALL or METRICS are    *     supported as fields for fetching flow runs. Other fields will lead to    *     HTTP 400 (Bad Request) response. (Optional query param).    * @param fromId Defines the flow run id. If specified, retrieve the next    *     set of flow runs from the given id. The set of flow runs retrieved    *     is inclusive of specified fromId.    *    * @return If successful, a HTTP 200(OK) response having a JSON representing a    *     set of<cite>FlowRunEntity</cite> instances for the given flow are    *     returned.<br>    *     On failures,<br>    *     If any problem occurs in parsing request, HTTP 400(Bad Request) is    *     returned.<br>    *     For all other errors while retrieving data, HTTP 500(Internal Server    *     Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/users/{userid}/flows/{flowname}/runs/"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|getFlowRuns ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String userId, @PathParam(R) String flowName, @QueryParam(R) String limit, @QueryParam(R) String createdTimeStart, @QueryParam(R) String createdTimeEnd, @QueryParam(R) String metricsToRetrieve, @QueryParam(R) String fields, @QueryParam(R) String fromId)
specifier|public
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|getFlowRuns
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"userid"
argument_list|)
name|String
name|userId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"flowname"
argument_list|)
name|String
name|flowName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"limit"
argument_list|)
name|String
name|limit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimestart"
argument_list|)
name|String
name|createdTimeStart
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimeend"
argument_list|)
name|String
name|createdTimeEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricstoretrieve"
argument_list|)
name|String
name|metricsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fromid"
argument_list|)
name|String
name|fromId
parameter_list|)
block|{
return|return
name|getFlowRuns
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
literal|null
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
name|limit
argument_list|,
name|createdTimeStart
argument_list|,
name|createdTimeEnd
argument_list|,
name|metricsToRetrieve
argument_list|,
name|fields
argument_list|,
name|fromId
argument_list|)
return|;
block|}
comment|/**    * Return a set of flows runs for the given cluster, user and flow name.    *    * @param req Servlet request.    * @param res Servlet response.    * @param clusterId Cluster id to which the flow runs to be queried belong to(    *     Mandatory path param).    * @param userId User id representing the user who ran the flow runs(    *     Mandatory path param)    * @param flowName Flow name to which the flow runs to be queried belongs to(    *     Mandatory path param).    * @param limit If specified, defines the number of flow runs to return. The    *     maximum possible value for limit can be {@link Long#MAX_VALUE}. If it    *     is not specified or has a value less than 0, then limit will be    *     considered as 100. (Optional query param).    * @param createdTimeStart If specified, matched flow runs should not be    *     created before this timestamp(Optional query param).    * @param createdTimeEnd If specified, matched flow runs should not be created    *     after this timestamp(Optional query param).    * @param metricsToRetrieve If specified, defines which metrics to retrieve    *     and send back in response. These metrics will be retrieved    *     irrespective of whether metrics are specified in fields to retrieve or    *     not.    * @param fields Specifies which fields to retrieve, see {@link Field}. All    *     fields will be retrieved if fields=ALL. Amongst all the fields, only    *     METRICS makes sense for flow runs hence only ALL or METRICS are    *     supported as fields for fetching flow runs. Other fields will lead to    *     HTTP 400 (Bad Request) response. (Optional query param).    * @param fromId Defines the flow run id. If specified, retrieve the next    *     set of flow runs from the given id. The set of flow runs retrieved    *     is inclusive of specified fromId.    *    * @return If successful, a HTTP 200(OK) response having a JSON representing a    *     set of<cite>FlowRunEntity</cite> instances for the given flow are    *     returned.<br>    *     On failures,<br>    *     If any problem occurs in parsing request, HTTP 400(Bad Request) is    *     returned.<br>    *     For all other errors while retrieving data, HTTP 500(Internal Server    *     Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/clusters/{clusterid}/users/{userid}/flows/{flowname}/runs/"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|getFlowRuns ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String clusterId, @PathParam(R) String userId, @PathParam(R) String flowName, @QueryParam(R) String limit, @QueryParam(R) String createdTimeStart, @QueryParam(R) String createdTimeEnd, @QueryParam(R) String metricsToRetrieve, @QueryParam(R) String fields, @QueryParam(R) String fromId)
specifier|public
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|getFlowRuns
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"clusterid"
argument_list|)
name|String
name|clusterId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"userid"
argument_list|)
name|String
name|userId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"flowname"
argument_list|)
name|String
name|flowName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"limit"
argument_list|)
name|String
name|limit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimestart"
argument_list|)
name|String
name|createdTimeStart
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimeend"
argument_list|)
name|String
name|createdTimeEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricstoretrieve"
argument_list|)
name|String
name|metricsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fromid"
argument_list|)
name|String
name|fromId
parameter_list|)
block|{
name|String
name|url
init|=
name|req
operator|.
name|getRequestURI
argument_list|()
operator|+
operator|(
name|req
operator|.
name|getQueryString
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|QUERY_STRING_SEP
operator|+
name|req
operator|.
name|getQueryString
argument_list|()
operator|)
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|TimelineReaderWebServicesUtils
operator|.
name|getUser
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received URL "
operator|+
name|url
operator|+
literal|" from user "
operator|+
name|TimelineReaderWebServicesUtils
operator|.
name|getUserName
argument_list|(
name|callerUGI
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|init
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|TimelineReaderManager
name|timelineReaderManager
init|=
name|getTimelineReaderManager
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|entities
init|=
literal|null
decl_stmt|;
try|try
block|{
name|entities
operator|=
name|timelineReaderManager
operator|.
name|getEntities
argument_list|(
name|TimelineReaderWebServicesUtils
operator|.
name|createTimelineReaderContext
argument_list|(
name|clusterId
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TimelineEntityType
operator|.
name|YARN_FLOW_RUN
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TimelineReaderWebServicesUtils
operator|.
name|createTimelineEntityFilters
argument_list|(
name|limit
argument_list|,
name|createdTimeStart
argument_list|,
name|createdTimeEnd
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|fromId
argument_list|)
argument_list|,
name|TimelineReaderWebServicesUtils
operator|.
name|createTimelineDataToRetrieve
argument_list|(
literal|null
argument_list|,
name|metricsToRetrieve
argument_list|,
name|fields
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|,
name|url
argument_list|,
name|startTime
argument_list|,
literal|"createdTime start/end or limit or fromId"
argument_list|)
expr_stmt|;
block|}
name|long
name|endTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
if|if
condition|(
name|entities
operator|==
literal|null
condition|)
block|{
name|entities
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed URL "
operator|+
name|url
operator|+
literal|" (Took "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|" ms.)"
argument_list|)
expr_stmt|;
return|return
name|entities
return|;
block|}
comment|/**    * Return a list of active flows. Cluster ID is not provided by client so    * default cluster ID has to be taken.    *    * @param req Servlet request.    * @param res Servlet response.    * @param limit If specified, defines the number of flows to return. The    *     maximum possible value for limit can be {@link Long#MAX_VALUE}. If it    *     is not specified or has a value less than 0, then limit will be    *     considered as 100. (Optional query param).    * @param dateRange If specified is given as "[startdate]-[enddate]"(i.e.    *     start and end date separated by "-") or single date. Dates are    *     interpreted in yyyyMMdd format and are assumed to be in GMT(Optional    *     query param).    *     If a single date is specified, all flows active on that date are    *     returned. If both startdate and enddate is given, all flows active    *     between start and end date will be returned. If only startdate is    *     given, flows active on and after startdate are returned. If only    *     enddate is given, flows active on and before enddate are returned.    *     For example :    *     "daterange=20150711" returns flows active on 20150711.    *     "daterange=20150711-20150714" returns flows active between these    *     2 dates.    *     "daterange=20150711-" returns flows active on and after 20150711.    *     "daterange=-20150711" returns flows active on and before 20150711.    * @param fromId If specified, retrieve the next set of flows from the given    *     fromId. The set of flows retrieved is inclusive of specified fromId.    *     fromId should be taken from the value associated with FROM_ID info key    *     in flow entity response which was sent earlier.    *    * @return If successful, a HTTP 200(OK) response having a JSON representing a    *     set of<cite>FlowActivityEntity</cite> instances are returned.<br>    *     On failures,<br>    *     If any problem occurs in parsing request, HTTP 400(Bad Request) is    *     returned.<br>    *     For all other errors while retrieving data, HTTP 500(Internal Server    *     Error) is returned.<br>    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/flows/"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|getFlows ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @QueryParam(R) String limit, @QueryParam(R) String dateRange, @QueryParam(R) String fromId)
specifier|public
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|getFlows
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"limit"
argument_list|)
name|String
name|limit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"daterange"
argument_list|)
name|String
name|dateRange
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fromid"
argument_list|)
name|String
name|fromId
parameter_list|)
block|{
return|return
name|getFlows
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
literal|null
argument_list|,
name|limit
argument_list|,
name|dateRange
argument_list|,
name|fromId
argument_list|)
return|;
block|}
comment|/**    * Return a list of active flows for a given cluster id.    *    * @param req Servlet request.    * @param res Servlet response.    * @param clusterId Cluster id to which the flows to be queried belong to(    *     Mandatory path param).    * @param limit If specified, defines the number of flows to return. The    *     maximum possible value for limit can be {@link Long#MAX_VALUE}. If it    *     is not specified or has a value less than 0, then limit will be    *     considered as 100. (Optional query param).    * @param dateRange If specified is given as "[startdate]-[enddate]"(i.e.    *     start and end date separated by "-") or single date. Dates are    *     interpreted in yyyyMMdd format and are assumed to be in GMT(Optional    *     query param).    *     If a single date is specified, all flows active on that date are    *     returned. If both startdate and enddate is given, all flows active    *     between start and end date will be returned. If only startdate is    *     given, flows active on and after startdate are returned. If only    *     enddate is given, flows active on and before enddate are returned.    *     For example :    *     "daterange=20150711" returns flows active on 20150711.    *     "daterange=20150711-20150714" returns flows active between these    *     2 dates.    *     "daterange=20150711-" returns flows active on and after 20150711.    *     "daterange=-20150711" returns flows active on and before 20150711.    * @param fromId If specified, retrieve the next set of flows from the given    *     fromId. The set of flows retrieved is inclusive of specified fromId.    *     fromId should be taken from the value associated with FROM_ID info key    *     in flow entity response which was sent earlier.    *    * @return If successful, a HTTP 200(OK) response having a JSON representing a    *     set of<cite>FlowActivityEntity</cite> instances are returned.<br>    *     On failures,<br>    *     If any problem occurs in parsing request, HTTP 400(Bad Request) is    *     returned.<br>    *     For all other errors while retrieving data, HTTP 500(Internal Server    *     Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/clusters/{clusterid}/flows/"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|getFlows ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String clusterId, @QueryParam(R) String limit, @QueryParam(R) String dateRange, @QueryParam(R) String fromId)
specifier|public
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|getFlows
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"clusterid"
argument_list|)
name|String
name|clusterId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"limit"
argument_list|)
name|String
name|limit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"daterange"
argument_list|)
name|String
name|dateRange
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fromid"
argument_list|)
name|String
name|fromId
parameter_list|)
block|{
name|String
name|url
init|=
name|req
operator|.
name|getRequestURI
argument_list|()
operator|+
operator|(
name|req
operator|.
name|getQueryString
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|QUERY_STRING_SEP
operator|+
name|req
operator|.
name|getQueryString
argument_list|()
operator|)
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|TimelineReaderWebServicesUtils
operator|.
name|getUser
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received URL "
operator|+
name|url
operator|+
literal|" from user "
operator|+
name|TimelineReaderWebServicesUtils
operator|.
name|getUserName
argument_list|(
name|callerUGI
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|init
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|TimelineReaderManager
name|timelineReaderManager
init|=
name|getTimelineReaderManager
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|entities
init|=
literal|null
decl_stmt|;
try|try
block|{
name|DateRange
name|range
init|=
name|parseDateRange
argument_list|(
name|dateRange
argument_list|)
decl_stmt|;
name|TimelineEntityFilters
name|entityFilters
init|=
name|TimelineReaderWebServicesUtils
operator|.
name|createTimelineEntityFilters
argument_list|(
name|limit
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|fromId
argument_list|)
decl_stmt|;
name|entityFilters
operator|.
name|setCreatedTimeBegin
argument_list|(
name|range
operator|.
name|dateStart
argument_list|)
expr_stmt|;
name|entityFilters
operator|.
name|setCreatedTimeEnd
argument_list|(
name|range
operator|.
name|dateEnd
argument_list|)
expr_stmt|;
name|entities
operator|=
name|timelineReaderManager
operator|.
name|getEntities
argument_list|(
name|TimelineReaderWebServicesUtils
operator|.
name|createTimelineReaderContext
argument_list|(
name|clusterId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TimelineEntityType
operator|.
name|YARN_FLOW_ACTIVITY
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|entityFilters
argument_list|,
name|TimelineReaderWebServicesUtils
operator|.
name|createTimelineDataToRetrieve
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|,
name|url
argument_list|,
name|startTime
argument_list|,
literal|"limit"
argument_list|)
expr_stmt|;
block|}
name|long
name|endTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
if|if
condition|(
name|entities
operator|==
literal|null
condition|)
block|{
name|entities
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed URL "
operator|+
name|url
operator|+
literal|" (Took "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|" ms.)"
argument_list|)
expr_stmt|;
return|return
name|entities
return|;
block|}
comment|/**    * Return a single app for given UID which is a delimited string containing    * clusterid, userid, flow name, flowrun id and app id.    *    * @param req Servlet request.    * @param res Servlet response.    * @param uId a delimited string containing clusterid, userid, flow name, flow    *     run id and app id which are extracted from UID and then used to query    *     backend(Mandatory path param).    * @param confsToRetrieve If specified, defines which configurations to    *     retrieve and send back in response. These configs will be retrieved    *     irrespective of whether configs are specified in fields to retrieve or    *     not.    * @param metricsToRetrieve If specified, defines which metrics to retrieve    *     and send back in response. These metrics will be retrieved    *     irrespective of whether metrics are specified in fields to retrieve or    *     not.    * @param fields Specifies which fields of the app entity object to retrieve,    *     see {@link Field}. All fields will be retrieved if fields=ALL. If not    *     specified, 3 fields i.e. entity type(equivalent to YARN_APPLICATION),    *     app id and app created time is returned(Optional query param).    * @param metricsLimit If specified, defines the number of metrics to return.    *     Considered only if fields contains METRICS/ALL or metricsToRetrieve is    *     specified. Ignored otherwise. The maximum possible value for    *     metricsLimit can be {@link Integer#MAX_VALUE}. If it is not specified    *     or has a value less than 1, and metrics have to be retrieved, then    *     metricsLimit will be considered as 1 i.e. latest single value of    *     metric(s) will be returned. (Optional query param).    *    * @return If successful, a HTTP 200(OK) response having a JSON representing a    *<cite>TimelineEntity</cite> instance is returned.<br>    *     On failures,<br>    *     If any problem occurs in parsing request or UID is incorrect,    *     HTTP 400(Bad Request) is returned.<br>    *     If app for the given app id cannot be found, HTTP 404(Not Found) is    *     returned.<br>    *     For all other errors while retrieving data, HTTP 500(Internal Server    *     Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/app-uid/{uid}/"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|getApp ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String uId, @QueryParam(R) String confsToRetrieve, @QueryParam(R) String metricsToRetrieve, @QueryParam(R) String fields, @QueryParam(R) String metricsLimit)
specifier|public
name|TimelineEntity
name|getApp
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"uid"
argument_list|)
name|String
name|uId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"confstoretrieve"
argument_list|)
name|String
name|confsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricstoretrieve"
argument_list|)
name|String
name|metricsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricslimit"
argument_list|)
name|String
name|metricsLimit
parameter_list|)
block|{
name|String
name|url
init|=
name|req
operator|.
name|getRequestURI
argument_list|()
operator|+
operator|(
name|req
operator|.
name|getQueryString
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|QUERY_STRING_SEP
operator|+
name|req
operator|.
name|getQueryString
argument_list|()
operator|)
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|TimelineReaderWebServicesUtils
operator|.
name|getUser
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received URL "
operator|+
name|url
operator|+
literal|" from user "
operator|+
name|TimelineReaderWebServicesUtils
operator|.
name|getUserName
argument_list|(
name|callerUGI
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|init
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|TimelineReaderManager
name|timelineReaderManager
init|=
name|getTimelineReaderManager
argument_list|()
decl_stmt|;
name|TimelineEntity
name|entity
init|=
literal|null
decl_stmt|;
try|try
block|{
name|TimelineReaderContext
name|context
init|=
name|TimelineUIDConverter
operator|.
name|APPLICATION_UID
operator|.
name|decodeUID
argument_list|(
name|uId
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Incorrect UID "
operator|+
name|uId
argument_list|)
throw|;
block|}
name|context
operator|.
name|setEntityType
argument_list|(
name|TimelineEntityType
operator|.
name|YARN_APPLICATION
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|entity
operator|=
name|timelineReaderManager
operator|.
name|getEntity
argument_list|(
name|context
argument_list|,
name|TimelineReaderWebServicesUtils
operator|.
name|createTimelineDataToRetrieve
argument_list|(
name|confsToRetrieve
argument_list|,
name|metricsToRetrieve
argument_list|,
name|fields
argument_list|,
name|metricsLimit
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|,
name|url
argument_list|,
name|startTime
argument_list|,
literal|"flowrunid"
argument_list|)
expr_stmt|;
block|}
name|long
name|endTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed URL "
operator|+
name|url
operator|+
literal|" but app not found"
operator|+
literal|" (Took "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|" ms.)"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"App with uid "
operator|+
name|uId
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed URL "
operator|+
name|url
operator|+
literal|" (Took "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|" ms.)"
argument_list|)
expr_stmt|;
return|return
name|entity
return|;
block|}
comment|/**    * Return a single app for given app id. Cluster ID is not provided by client    * client so default cluster ID has to be taken. If userid, flow name and flow    * run id which are optional query parameters are not specified, they will be    * queried based on app id and cluster id from the flow context information    * stored in underlying storage implementation.    *    * @param req Servlet request.    * @param res Servlet response.    * @param appId Application id to be queried(Mandatory path param).    * @param flowName Flow name which should match for the app(Optional query    *     param).    * @param flowRunId Run id which should match for the app(Optional query    *     param).    * @param userId User id which should match for the app(Optional query param).    * @param confsToRetrieve If specified, defines which configurations to    *     retrieve and send back in response. These configs will be retrieved    *     irrespective of whether configs are specified in fields to retrieve or    *     not.    * @param metricsToRetrieve If specified, defines which metrics to retrieve    *     and send back in response. These metrics will be retrieved    *     irrespective of whether metrics are specified in fields to retrieve or    *     not.    * @param fields Specifies which fields of the app entity object to retrieve,    *     see {@link Field}. All fields will be retrieved if fields=ALL. If not    *     specified, 3 fields i.e. entity type(equivalent to YARN_APPLICATION),    *     app id and app created time is returned(Optional query param).    * @param metricsLimit If specified, defines the number of metrics to return.    *     Considered only if fields contains METRICS/ALL or metricsToRetrieve is    *     specified. Ignored otherwise. The maximum possible value for    *     metricsLimit can be {@link Integer#MAX_VALUE}. If it is not specified    *     or has a value less than 1, and metrics have to be retrieved, then    *     metricsLimit will be considered as 1 i.e. latest single value of    *     metric(s) will be returned. (Optional query param).    *    * @return If successful, a HTTP 200(OK) response having a JSON representing a    *<cite>TimelineEntity</cite> instance is returned.<br>    *     On failures,<br>    *     If any problem occurs in parsing request, HTTP 400(Bad Request) is    *     returned.<br>    *     If flow context information cannot be retrieved or app for the given    *     app id cannot be found, HTTP 404(Not Found) is returned.<br>    *     For all other errors while retrieving data, HTTP 500(Internal Server    *     Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/apps/{appid}/"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|getApp ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String appId, @QueryParam(R) String flowName, @QueryParam(R) String flowRunId, @QueryParam(R) String userId, @QueryParam(R) String confsToRetrieve, @QueryParam(R) String metricsToRetrieve, @QueryParam(R) String fields, @QueryParam(R) String metricsLimit)
specifier|public
name|TimelineEntity
name|getApp
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowname"
argument_list|)
name|String
name|flowName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowrunid"
argument_list|)
name|String
name|flowRunId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"userid"
argument_list|)
name|String
name|userId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"confstoretrieve"
argument_list|)
name|String
name|confsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricstoretrieve"
argument_list|)
name|String
name|metricsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricslimit"
argument_list|)
name|String
name|metricsLimit
parameter_list|)
block|{
return|return
name|getApp
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
literal|null
argument_list|,
name|appId
argument_list|,
name|flowName
argument_list|,
name|flowRunId
argument_list|,
name|userId
argument_list|,
name|confsToRetrieve
argument_list|,
name|metricsToRetrieve
argument_list|,
name|fields
argument_list|,
name|metricsLimit
argument_list|)
return|;
block|}
comment|/**    * Return a single app for given cluster id and app id. If userid, flow name    * and flowrun id which are optional query parameters are not specified, they    * will be queried based on app id and cluster id from the flow context    * information stored in underlying storage implementation.    *    * @param req Servlet request.    * @param res Servlet response.    * @param clusterId Cluster id to which the app to be queried belong to(    *     Mandatory path param).    * @param appId Application id to be queried(Mandatory path param).    * @param flowName Flow name which should match for the app(Optional query    *     param).    * @param flowRunId Run id which should match for the app(Optional query    *     param).    * @param userId User id which should match for the app(Optional query param).    * @param confsToRetrieve If specified, defines which configurations to    *     retrieve and send back in response. These configs will be retrieved    *     irrespective of whether configs are specified in fields to retrieve or    *     not.    * @param metricsToRetrieve If specified, defines which metrics to retrieve    *     and send back in response. These metrics will be retrieved    *     irrespective of whether metrics are specified in fields to retrieve or    *     not.    * @param fields Specifies which fields of the app entity object to retrieve,    *     see {@link Field}. All fields will be retrieved if fields=ALL. If not    *     specified, 3 fields i.e. entity type(equivalent to YARN_APPLICATION),    *     app id and app created time is returned(Optional query param).    * @param metricsLimit If specified, defines the number of metrics to return.    *     Considered only if fields contains METRICS/ALL or metricsToRetrieve is    *     specified. Ignored otherwise. The maximum possible value for    *     metricsLimit can be {@link Integer#MAX_VALUE}. If it is not specified    *     or has a value less than 1, and metrics have to be retrieved, then    *     metricsLimit will be considered as 1 i.e. latest single value of    *     metric(s) will be returned. (Optional query param).    *    * @return If successful, a HTTP 200(OK) response having a JSON representing a    *<cite>TimelineEntity</cite> instance is returned.<br>    *     On failures,<br>    *     If any problem occurs in parsing request, HTTP 400(Bad Request) is    *     returned.<br>    *     If flow context information cannot be retrieved or app for the given    *     app id cannot be found, HTTP 404(Not Found) is returned.<br>    *     For all other errors while retrieving data, HTTP 500(Internal Server    *     Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/clusters/{clusterid}/apps/{appid}/"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|getApp ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String clusterId, @PathParam(R) String appId, @QueryParam(R) String flowName, @QueryParam(R) String flowRunId, @QueryParam(R) String userId, @QueryParam(R) String confsToRetrieve, @QueryParam(R) String metricsToRetrieve, @QueryParam(R) String fields, @QueryParam(R) String metricsLimit)
specifier|public
name|TimelineEntity
name|getApp
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"clusterid"
argument_list|)
name|String
name|clusterId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowname"
argument_list|)
name|String
name|flowName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowrunid"
argument_list|)
name|String
name|flowRunId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"userid"
argument_list|)
name|String
name|userId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"confstoretrieve"
argument_list|)
name|String
name|confsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricstoretrieve"
argument_list|)
name|String
name|metricsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricslimit"
argument_list|)
name|String
name|metricsLimit
parameter_list|)
block|{
name|String
name|url
init|=
name|req
operator|.
name|getRequestURI
argument_list|()
operator|+
operator|(
name|req
operator|.
name|getQueryString
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|QUERY_STRING_SEP
operator|+
name|req
operator|.
name|getQueryString
argument_list|()
operator|)
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|TimelineReaderWebServicesUtils
operator|.
name|getUser
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received URL "
operator|+
name|url
operator|+
literal|" from user "
operator|+
name|TimelineReaderWebServicesUtils
operator|.
name|getUserName
argument_list|(
name|callerUGI
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|init
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|TimelineReaderManager
name|timelineReaderManager
init|=
name|getTimelineReaderManager
argument_list|()
decl_stmt|;
name|TimelineEntity
name|entity
init|=
literal|null
decl_stmt|;
try|try
block|{
name|entity
operator|=
name|timelineReaderManager
operator|.
name|getEntity
argument_list|(
name|TimelineReaderWebServicesUtils
operator|.
name|createTimelineReaderContext
argument_list|(
name|clusterId
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
name|flowRunId
argument_list|,
name|appId
argument_list|,
name|TimelineEntityType
operator|.
name|YARN_APPLICATION
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TimelineReaderWebServicesUtils
operator|.
name|createTimelineDataToRetrieve
argument_list|(
name|confsToRetrieve
argument_list|,
name|metricsToRetrieve
argument_list|,
name|fields
argument_list|,
name|metricsLimit
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|,
name|url
argument_list|,
name|startTime
argument_list|,
literal|"flowrunid"
argument_list|)
expr_stmt|;
block|}
name|long
name|endTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed URL "
operator|+
name|url
operator|+
literal|" but app not found"
operator|+
literal|" (Took "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|" ms.)"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"App "
operator|+
name|appId
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed URL "
operator|+
name|url
operator|+
literal|" (Took "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|" ms.)"
argument_list|)
expr_stmt|;
return|return
name|entity
return|;
block|}
comment|/**    * Return a list of apps for given UID which is a delimited string containing    * clusterid, userid, flow name and flowrun id. If number of matching apps are    * more than the limit, most recent apps till the limit is reached, will be    * returned.    *    * @param req Servlet request.    * @param res Servlet response.    * @param uId a delimited string containing clusterid, userid, flow name and    *     flowrun id which are extracted from UID and then used to query backend.    *     (Mandatory path param).    * @param limit If specified, defines the number of apps to return. The    *     maximum possible value for limit can be {@link Long#MAX_VALUE}. If it    *     is not specified or has a value less than 0, then limit will be    *     considered as 100. (Optional query param).    * @param createdTimeStart If specified, matched apps should not be created    *     before this timestamp(Optional query param).    * @param createdTimeEnd If specified, matched apps should not be created    *     after this timestamp(Optional query param).    * @param relatesTo If specified, matched apps should relate to given    *     entities associated with a entity type. relatesto is a comma separated    *     list in the format [entitytype]:[entityid1]:[entityid2]... (Optional    *     query param).    * @param isRelatedTo If specified, matched apps should be related to given    *     entities associated with a entity type. relatesto is a comma separated    *     list in the format [entitytype]:[entityid1]:[entityid2]... (Optional    *     query param).    * @param infofilters If specified, matched apps should have exact matches    *     to the given info represented as key-value pairs. This is represented    *     as infofilters=info1:value1,info2:value2... (Optional query param).    * @param conffilters If specified, matched apps should have exact matches    *     to the given configs represented as key-value pairs. This is    *     represented as conffilters=conf1:value1,conf2:value2... (Optional query    *     param).    * @param metricfilters If specified, matched apps should contain the given    *     metrics. This is represented as metricfilters=metricid1, metricid2...    *     (Optional query param).    * @param eventfilters If specified, matched apps should contain the given    *     events. This is represented as eventfilters=eventid1, eventid2...    * @param confsToRetrieve If specified, defines which configurations to    *     retrieve and send back in response. These configs will be retrieved    *     irrespective of whether configs are specified in fields to retrieve or    *     not.    * @param metricsToRetrieve If specified, defines which metrics to retrieve    *     and send back in response. These metrics will be retrieved    *     irrespective of whether metrics are specified in fields to retrieve or    *     not.    * @param fields Specifies which fields of the app entity object to retrieve,    *     see {@link Field}. All fields will be retrieved if fields=ALL. If not    *     specified, 3 fields i.e. entity type(equivalent to YARN_APPLICATION),    *     app id and app created time is returned(Optional query param).    * @param metricsLimit If specified, defines the number of metrics to return.    *     Considered only if fields contains METRICS/ALL or metricsToRetrieve is    *     specified. Ignored otherwise. The maximum possible value for    *     metricsLimit can be {@link Integer#MAX_VALUE}. If it is not specified    *     or has a value less than 1, and metrics have to be retrieved, then    *     metricsLimit will be considered as 1 i.e. latest single value of    *     metric(s) will be returned. (Optional query param).    * @param fromId Defines the application id. If specified, retrieve the next    *     set of applications from the given id. The set of applications    *     retrieved is inclusive of specified fromId.    *    * @return If successful, a HTTP 200(OK) response having a JSON representing    *     a set of<cite>TimelineEntity</cite> instances representing apps is    *     returned.<br>    *     On failures,<br>    *     If any problem occurs in parsing request or UID is incorrect,    *     HTTP 400(Bad Request) is returned.<br>    *     For all other errors while retrieving data, HTTP 500(Internal Server    *     Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/run-uid/{uid}/apps"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|getFlowRunApps ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String uId, @QueryParam(R) String limit, @QueryParam(R) String createdTimeStart, @QueryParam(R) String createdTimeEnd, @QueryParam(R) String relatesTo, @QueryParam(R) String isRelatedTo, @QueryParam(R) String infofilters, @QueryParam(R) String conffilters, @QueryParam(R) String metricfilters, @QueryParam(R) String eventfilters, @QueryParam(R) String confsToRetrieve, @QueryParam(R) String metricsToRetrieve, @QueryParam(R) String fields, @QueryParam(R) String metricsLimit, @QueryParam(R) String fromId)
specifier|public
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|getFlowRunApps
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"uid"
argument_list|)
name|String
name|uId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"limit"
argument_list|)
name|String
name|limit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimestart"
argument_list|)
name|String
name|createdTimeStart
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimeend"
argument_list|)
name|String
name|createdTimeEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"relatesto"
argument_list|)
name|String
name|relatesTo
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"isrelatedto"
argument_list|)
name|String
name|isRelatedTo
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"infofilters"
argument_list|)
name|String
name|infofilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"conffilters"
argument_list|)
name|String
name|conffilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricfilters"
argument_list|)
name|String
name|metricfilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"eventfilters"
argument_list|)
name|String
name|eventfilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"confstoretrieve"
argument_list|)
name|String
name|confsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricstoretrieve"
argument_list|)
name|String
name|metricsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricslimit"
argument_list|)
name|String
name|metricsLimit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fromid"
argument_list|)
name|String
name|fromId
parameter_list|)
block|{
name|String
name|url
init|=
name|req
operator|.
name|getRequestURI
argument_list|()
operator|+
operator|(
name|req
operator|.
name|getQueryString
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|QUERY_STRING_SEP
operator|+
name|req
operator|.
name|getQueryString
argument_list|()
operator|)
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|TimelineReaderWebServicesUtils
operator|.
name|getUser
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received URL "
operator|+
name|url
operator|+
literal|" from user "
operator|+
name|TimelineReaderWebServicesUtils
operator|.
name|getUserName
argument_list|(
name|callerUGI
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|init
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|TimelineReaderManager
name|timelineReaderManager
init|=
name|getTimelineReaderManager
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|entities
init|=
literal|null
decl_stmt|;
try|try
block|{
name|TimelineReaderContext
name|context
init|=
name|TimelineUIDConverter
operator|.
name|FLOWRUN_UID
operator|.
name|decodeUID
argument_list|(
name|uId
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Incorrect UID "
operator|+
name|uId
argument_list|)
throw|;
block|}
name|context
operator|.
name|setEntityType
argument_list|(
name|TimelineEntityType
operator|.
name|YARN_APPLICATION
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|entities
operator|=
name|timelineReaderManager
operator|.
name|getEntities
argument_list|(
name|context
argument_list|,
name|TimelineReaderWebServicesUtils
operator|.
name|createTimelineEntityFilters
argument_list|(
name|limit
argument_list|,
name|createdTimeStart
argument_list|,
name|createdTimeEnd
argument_list|,
name|relatesTo
argument_list|,
name|isRelatedTo
argument_list|,
name|infofilters
argument_list|,
name|conffilters
argument_list|,
name|metricfilters
argument_list|,
name|eventfilters
argument_list|,
literal|null
argument_list|,
name|fromId
argument_list|)
argument_list|,
name|TimelineReaderWebServicesUtils
operator|.
name|createTimelineDataToRetrieve
argument_list|(
name|confsToRetrieve
argument_list|,
name|metricsToRetrieve
argument_list|,
name|fields
argument_list|,
name|metricsLimit
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|,
name|url
argument_list|,
name|startTime
argument_list|,
literal|"createdTime start/end or limit or flowrunid"
argument_list|)
expr_stmt|;
block|}
name|long
name|endTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
if|if
condition|(
name|entities
operator|==
literal|null
condition|)
block|{
name|entities
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed URL "
operator|+
name|url
operator|+
literal|" (Took "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|" ms.)"
argument_list|)
expr_stmt|;
return|return
name|entities
return|;
block|}
comment|/**    * Return a list of apps for given user, flow name and flow run id. Cluster ID    * is not provided by client so default cluster ID has to be taken. If number    * of matching apps are more than the limit, most recent apps till the limit    * is reached, will be returned.    *    * @param req Servlet request.    * @param res Servlet response.    * @param userId User id which should match for the apps(Mandatory path param)    * @param flowName Flow name which should match for the apps(Mandatory path    *     param).    * @param flowRunId Run id which should match for the apps(Mandatory path    *     param).    * @param limit If specified, defines the number of apps to return. The    *     maximum possible value for limit can be {@link Long#MAX_VALUE}. If it    *     is not specified or has a value less than 0, then limit will be    *     considered as 100. (Optional query param).    * @param createdTimeStart If specified, matched apps should not be created    *     before this timestamp(Optional query param).    * @param createdTimeEnd If specified, matched apps should not be created    *     after this timestamp(Optional query param).    * @param relatesTo If specified, matched apps should relate to given    *     entities associated with a entity type. relatesto is a comma separated    *     list in the format [entitytype]:[entityid1]:[entityid2]... (Optional    *     query param).    * @param isRelatedTo If specified, matched apps should be related to given    *     entities associated with a entity type. relatesto is a comma separated    *     list in the format [entitytype]:[entityid1]:[entityid2]... (Optional    *     query param).    * @param infofilters If specified, matched apps should have exact matches    *     to the given info represented as key-value pairs. This is represented    *     as infofilters=info1:value1,info2:value2... (Optional query param).    * @param conffilters If specified, matched apps should have exact matches    *     to the given configs represented as key-value pairs. This is    *     represented as conffilters=conf1:value1,conf2:value2... (Optional query    *     param).    * @param metricfilters If specified, matched apps should contain the given    *     metrics. This is represented as metricfilters=metricid1, metricid2...    *     (Optional query param).    * @param eventfilters If specified, matched apps should contain the given    *     events. This is represented as eventfilters=eventid1, eventid2...    * @param confsToRetrieve If specified, defines which configurations to    *     retrieve and send back in response. These configs will be retrieved    *     irrespective of whether configs are specified in fields to retrieve or    *     not.    * @param metricsToRetrieve If specified, defines which metrics to retrieve    *     and send back in response. These metrics will be retrieved    *     irrespective of whether metrics are specified in fields to retrieve or    *     not.    * @param fields Specifies which fields of the app entity object to retrieve,    *     see {@link Field}. All fields will be retrieved if fields=ALL. If not    *     specified, 3 fields i.e. entity type(equivalent to YARN_APPLICATION),    *     app id and app created time is returned(Optional query param).    * @param metricsLimit If specified, defines the number of metrics to return.    *     Considered only if fields contains METRICS/ALL or metricsToRetrieve is    *     specified. Ignored otherwise. The maximum possible value for    *     metricsLimit can be {@link Integer#MAX_VALUE}. If it is not specified    *     or has a value less than 1, and metrics have to be retrieved, then    *     metricsLimit will be considered as 1 i.e. latest single value of    *     metric(s) will be returned. (Optional query param).    * @param fromId Defines the application id. If specified, retrieve the next    *     set of applications from the given id. The set of applications    *     retrieved is inclusive of specified fromId.    *    * @return If successful, a HTTP 200(OK) response having a JSON representing    *     a set of<cite>TimelineEntity</cite> instances representing apps is    *     returned.<br>    *     On failures,<br>    *     If any problem occurs in parsing request, HTTP 400(Bad Request) is    *     returned.<br>    *     For all other errors while retrieving data, HTTP 500(Internal Server    *     Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/users/{userid}/flows/{flowname}/runs/{flowrunid}/apps/"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|getFlowRunApps ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String userId, @PathParam(R) String flowName, @PathParam(R) String flowRunId, @QueryParam(R) String limit, @QueryParam(R) String createdTimeStart, @QueryParam(R) String createdTimeEnd, @QueryParam(R) String relatesTo, @QueryParam(R) String isRelatedTo, @QueryParam(R) String infofilters, @QueryParam(R) String conffilters, @QueryParam(R) String metricfilters, @QueryParam(R) String eventfilters, @QueryParam(R) String confsToRetrieve, @QueryParam(R) String metricsToRetrieve, @QueryParam(R) String fields, @QueryParam(R) String metricsLimit, @QueryParam(R) String fromId)
specifier|public
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|getFlowRunApps
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"userid"
argument_list|)
name|String
name|userId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"flowname"
argument_list|)
name|String
name|flowName
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"flowrunid"
argument_list|)
name|String
name|flowRunId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"limit"
argument_list|)
name|String
name|limit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimestart"
argument_list|)
name|String
name|createdTimeStart
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimeend"
argument_list|)
name|String
name|createdTimeEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"relatesto"
argument_list|)
name|String
name|relatesTo
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"isrelatedto"
argument_list|)
name|String
name|isRelatedTo
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"infofilters"
argument_list|)
name|String
name|infofilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"conffilters"
argument_list|)
name|String
name|conffilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricfilters"
argument_list|)
name|String
name|metricfilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"eventfilters"
argument_list|)
name|String
name|eventfilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"confstoretrieve"
argument_list|)
name|String
name|confsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricstoretrieve"
argument_list|)
name|String
name|metricsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricslimit"
argument_list|)
name|String
name|metricsLimit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fromid"
argument_list|)
name|String
name|fromId
parameter_list|)
block|{
return|return
name|getEntities
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TimelineEntityType
operator|.
name|YARN_APPLICATION
operator|.
name|toString
argument_list|()
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
name|flowRunId
argument_list|,
name|limit
argument_list|,
name|createdTimeStart
argument_list|,
name|createdTimeEnd
argument_list|,
name|relatesTo
argument_list|,
name|isRelatedTo
argument_list|,
name|infofilters
argument_list|,
name|conffilters
argument_list|,
name|metricfilters
argument_list|,
name|eventfilters
argument_list|,
name|confsToRetrieve
argument_list|,
name|metricsToRetrieve
argument_list|,
name|fields
argument_list|,
name|metricsLimit
argument_list|,
literal|null
argument_list|,
name|fromId
argument_list|)
return|;
block|}
comment|/**    * Return a list of apps for a given user, cluster id, flow name and flow run    * id. If number of matching apps are more than the limit, most recent apps    * till the limit is reached, will be returned.    *    * @param req Servlet request.    * @param res Servlet response.    * @param clusterId Cluster id to which the apps to be queried belong to    *     (Mandatory path param).    * @param userId User id which should match for the apps(Mandatory path param)    * @param flowName Flow name which should match for the apps(Mandatory path    *     param).    * @param flowRunId Run id which should match for the apps(Mandatory path    *     param).    * @param limit If specified, defines the number of apps to return. The    *     maximum possible value for limit can be {@link Long#MAX_VALUE}. If it    *     is not specified or has a value less than 0, then limit will be    *     considered as 100. (Optional query param).    * @param createdTimeStart If specified, matched apps should not be created    *     before this timestamp(Optional query param).    * @param createdTimeEnd If specified, matched apps should not be created    *     after this timestamp(Optional query param).    * @param relatesTo If specified, matched apps should relate to given    *     entities associated with a entity type. relatesto is a comma separated    *     list in the format [entitytype]:[entityid1]:[entityid2]... (Optional    *     query param).    * @param isRelatedTo If specified, matched apps should be related to given    *     entities associated with a entity type. relatesto is a comma separated    *     list in the format [entitytype]:[entityid1]:[entityid2]... (Optional    *     query param).    * @param infofilters If specified, matched apps should have exact matches    *     to the given info represented as key-value pairs. This is represented    *     as infofilters=info1:value1,info2:value2... (Optional query param).    * @param conffilters If specified, matched apps should have exact matches    *     to the given configs represented as key-value pairs. This is    *     represented as conffilters=conf1:value1,conf2:value2... (Optional query    *     param).    * @param metricfilters If specified, matched apps should contain the given    *     metrics. This is represented as metricfilters=metricid1, metricid2...    *     (Optional query param).    * @param eventfilters If specified, matched apps should contain the given    *     events. This is represented as eventfilters=eventid1, eventid2...    * @param confsToRetrieve If specified, defines which configurations to    *     retrieve and send back in response. These configs will be retrieved    *     irrespective of whether configs are specified in fields to retrieve or    *     not.    * @param metricsToRetrieve If specified, defines which metrics to retrieve    *     and send back in response. These metrics will be retrieved    *     irrespective of whether metrics are specified in fields to retrieve or    *     not.    * @param fields Specifies which fields of the app entity object to retrieve,    *     see {@link Field}. All fields will be retrieved if fields=ALL. If not    *     specified, 3 fields i.e. entity type(equivalent to YARN_APPLICATION),    *     app id and app created time is returned(Optional query param).    * @param metricsLimit If specified, defines the number of metrics to return.    *     Considered only if fields contains METRICS/ALL or metricsToRetrieve is    *     specified. Ignored otherwise. The maximum possible value for    *     metricsLimit can be {@link Integer#MAX_VALUE}. If it is not specified    *     or has a value less than 1, and metrics have to be retrieved, then    *     metricsLimit will be considered as 1 i.e. latest single value of    *     metric(s) will be returned. (Optional query param).    * @param fromId Defines the application id. If specified, retrieve the next    *     set of applications from the given id. The set of applications    *     retrieved is inclusive of specified fromId.    *    * @return If successful, a HTTP 200(OK) response having a JSON representing    *     a set of<cite>TimelineEntity</cite> instances representing apps is    *     returned.<br>    *     On failures,<br>    *     If any problem occurs in parsing request, HTTP 400(Bad Request) is    *     returned.<br>    *     For all other errors while retrieving data, HTTP 500(Internal Server    *     Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/clusters/{clusterid}/users/{userid}/flows/{flowname}/runs/"
operator|+
literal|"{flowrunid}/apps/"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|getFlowRunApps ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String clusterId, @PathParam(R) String userId, @PathParam(R) String flowName, @PathParam(R) String flowRunId, @QueryParam(R) String limit, @QueryParam(R) String createdTimeStart, @QueryParam(R) String createdTimeEnd, @QueryParam(R) String relatesTo, @QueryParam(R) String isRelatedTo, @QueryParam(R) String infofilters, @QueryParam(R) String conffilters, @QueryParam(R) String metricfilters, @QueryParam(R) String eventfilters, @QueryParam(R) String confsToRetrieve, @QueryParam(R) String metricsToRetrieve, @QueryParam(R) String fields, @QueryParam(R) String metricsLimit, @QueryParam(R) String fromId)
specifier|public
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|getFlowRunApps
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"clusterid"
argument_list|)
name|String
name|clusterId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"userid"
argument_list|)
name|String
name|userId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"flowname"
argument_list|)
name|String
name|flowName
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"flowrunid"
argument_list|)
name|String
name|flowRunId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"limit"
argument_list|)
name|String
name|limit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimestart"
argument_list|)
name|String
name|createdTimeStart
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimeend"
argument_list|)
name|String
name|createdTimeEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"relatesto"
argument_list|)
name|String
name|relatesTo
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"isrelatedto"
argument_list|)
name|String
name|isRelatedTo
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"infofilters"
argument_list|)
name|String
name|infofilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"conffilters"
argument_list|)
name|String
name|conffilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricfilters"
argument_list|)
name|String
name|metricfilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"eventfilters"
argument_list|)
name|String
name|eventfilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"confstoretrieve"
argument_list|)
name|String
name|confsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricstoretrieve"
argument_list|)
name|String
name|metricsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricslimit"
argument_list|)
name|String
name|metricsLimit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fromid"
argument_list|)
name|String
name|fromId
parameter_list|)
block|{
return|return
name|getEntities
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|clusterId
argument_list|,
literal|null
argument_list|,
name|TimelineEntityType
operator|.
name|YARN_APPLICATION
operator|.
name|toString
argument_list|()
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
name|flowRunId
argument_list|,
name|limit
argument_list|,
name|createdTimeStart
argument_list|,
name|createdTimeEnd
argument_list|,
name|relatesTo
argument_list|,
name|isRelatedTo
argument_list|,
name|infofilters
argument_list|,
name|conffilters
argument_list|,
name|metricfilters
argument_list|,
name|eventfilters
argument_list|,
name|confsToRetrieve
argument_list|,
name|metricsToRetrieve
argument_list|,
name|fields
argument_list|,
name|metricsLimit
argument_list|,
literal|null
argument_list|,
name|fromId
argument_list|)
return|;
block|}
comment|/**    * Return a list of apps for given user and flow name. Cluster ID is not    * provided by client so default cluster ID has to be taken. If number of    * matching apps are more than the limit, most recent apps till the limit is    * reached, will be returned.    *    * @param req Servlet request.    * @param res Servlet response.    * @param userId User id which should match for the apps(Mandatory path param)    * @param flowName Flow name which should match for the apps(Mandatory path    *     param).    * @param limit If specified, defines the number of apps to return. The    *     maximum possible value for limit can be {@link Long#MAX_VALUE}. If it    *     is not specified or has a value less than 0, then limit will be    *     considered as 100. (Optional query param).    * @param createdTimeStart If specified, matched apps should not be created    *     before this timestamp(Optional query param).    * @param createdTimeEnd If specified, matched apps should not be created    *     after this timestamp(Optional query param).    * @param relatesTo If specified, matched apps should relate to given    *     entities associated with a entity type. relatesto is a comma separated    *     list in the format [entitytype]:[entityid1]:[entityid2]... (Optional    *     query param).    * @param isRelatedTo If specified, matched apps should be related to given    *     entities associated with a entity type. relatesto is a comma separated    *     list in the format [entitytype]:[entityid1]:[entityid2]... (Optional    *     query param).    * @param infofilters If specified, matched apps should have exact matches    *     to the given info represented as key-value pairs. This is represented    *     as infofilters=info1:value1,info2:value2... (Optional query param).    * @param conffilters If specified, matched apps should have exact matches    *     to the given configs represented as key-value pairs. This is    *     represented as conffilters=conf1:value1,conf2:value2... (Optional query    *     param).    * @param metricfilters If specified, matched apps should contain the given    *     metrics. This is represented as metricfilters=metricid1, metricid2...    *     (Optional query param).    * @param eventfilters If specified, matched apps should contain the given    *     events. This is represented as eventfilters=eventid1, eventid2...    * @param confsToRetrieve If specified, defines which configurations to    *     retrieve and send back in response. These configs will be retrieved    *     irrespective of whether configs are specified in fields to retrieve or    *     not.    * @param metricsToRetrieve If specified, defines which metrics to retrieve    *     and send back in response. These metrics will be retrieved    *     irrespective of whether metrics are specified in fields to retrieve or    *     not.    * @param fields Specifies which fields of the app entity object to retrieve,    *     see {@link Field}. All fields will be retrieved if fields=ALL. If not    *     specified, 3 fields i.e. entity type(equivalent to YARN_APPLICATION),    *     app id and app created time is returned(Optional query param).    * @param metricsLimit If specified, defines the number of metrics to return.    *     Considered only if fields contains METRICS/ALL or metricsToRetrieve is    *     specified. Ignored otherwise. The maximum possible value for    *     metricsLimit can be {@link Integer#MAX_VALUE}. If it is not specified    *     or has a value less than 1, and metrics have to be retrieved, then    *     metricsLimit will be considered as 1 i.e. latest single value of    *     metric(s) will be returned. (Optional query param).    * @param fromId Defines the application id. If specified, retrieve the next    *     set of applications from the given id. The set of applications    *     retrieved is inclusive of specified fromId.    *    * @return If successful, a HTTP 200(OK) response having a JSON representing    *     a set of<cite>TimelineEntity</cite> instances representing apps is    *     returned.<br>    *     On failures,<br>    *     If any problem occurs in parsing request, HTTP 400(Bad Request) is    *     returned.<br>    *     For all other errors while retrieving data, HTTP 500(Internal Server    *     Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/users/{userid}/flows/{flowname}/apps/"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|getFlowApps ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String userId, @PathParam(R) String flowName, @QueryParam(R) String limit, @QueryParam(R) String createdTimeStart, @QueryParam(R) String createdTimeEnd, @QueryParam(R) String relatesTo, @QueryParam(R) String isRelatedTo, @QueryParam(R) String infofilters, @QueryParam(R) String conffilters, @QueryParam(R) String metricfilters, @QueryParam(R) String eventfilters, @QueryParam(R) String confsToRetrieve, @QueryParam(R) String metricsToRetrieve, @QueryParam(R) String fields, @QueryParam(R) String metricsLimit, @QueryParam(R) String fromId)
specifier|public
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|getFlowApps
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"userid"
argument_list|)
name|String
name|userId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"flowname"
argument_list|)
name|String
name|flowName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"limit"
argument_list|)
name|String
name|limit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimestart"
argument_list|)
name|String
name|createdTimeStart
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimeend"
argument_list|)
name|String
name|createdTimeEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"relatesto"
argument_list|)
name|String
name|relatesTo
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"isrelatedto"
argument_list|)
name|String
name|isRelatedTo
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"infofilters"
argument_list|)
name|String
name|infofilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"conffilters"
argument_list|)
name|String
name|conffilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricfilters"
argument_list|)
name|String
name|metricfilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"eventfilters"
argument_list|)
name|String
name|eventfilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"confstoretrieve"
argument_list|)
name|String
name|confsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricstoretrieve"
argument_list|)
name|String
name|metricsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricslimit"
argument_list|)
name|String
name|metricsLimit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fromid"
argument_list|)
name|String
name|fromId
parameter_list|)
block|{
return|return
name|getEntities
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TimelineEntityType
operator|.
name|YARN_APPLICATION
operator|.
name|toString
argument_list|()
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
literal|null
argument_list|,
name|limit
argument_list|,
name|createdTimeStart
argument_list|,
name|createdTimeEnd
argument_list|,
name|relatesTo
argument_list|,
name|isRelatedTo
argument_list|,
name|infofilters
argument_list|,
name|conffilters
argument_list|,
name|metricfilters
argument_list|,
name|eventfilters
argument_list|,
name|confsToRetrieve
argument_list|,
name|metricsToRetrieve
argument_list|,
name|fields
argument_list|,
name|metricsLimit
argument_list|,
literal|null
argument_list|,
name|fromId
argument_list|)
return|;
block|}
comment|/**    * Return a list of apps for a given user, cluster id and flow name. If number    * of matching apps are more than the limit, most recent apps till the limit    * is reached, will be returned.    *    * @param req Servlet request.    * @param res Servlet response.    * @param clusterId Cluster id to which the apps to be queried belong to    *     (Mandatory path param).    * @param userId User id which should match for the apps(Mandatory path param)    * @param flowName Flow name which should match for the apps(Mandatory path    *     param).    * @param limit If specified, defines the number of apps to return. The    *     maximum possible value for limit can be {@link Long#MAX_VALUE}. If it    *     is not specified or has a value less than 0, then limit will be    *     considered as 100. (Optional query param).    * @param createdTimeStart If specified, matched apps should not be created    *     before this timestamp(Optional query param).    * @param createdTimeEnd If specified, matched apps should not be created    *     after this timestamp(Optional query param).    * @param relatesTo If specified, matched apps should relate to given    *     entities associated with a entity type. relatesto is a comma separated    *     list in the format [entitytype]:[entityid1]:[entityid2]... (Optional    *     query param).    * @param isRelatedTo If specified, matched apps should be related to given    *     entities associated with a entity type. relatesto is a comma separated    *     list in the format [entitytype]:[entityid1]:[entityid2]... (Optional    *     query param).    * @param infofilters If specified, matched apps should have exact matches    *     to the given info represented as key-value pairs. This is represented    *     as infofilters=info1:value1,info2:value2... (Optional query param).    * @param conffilters If specified, matched apps should have exact matches    *     to the given configs represented as key-value pairs. This is    *     represented as conffilters=conf1:value1,conf2:value2... (Optional query    *     param).    * @param metricfilters If specified, matched apps should contain the given    *     metrics. This is represented as metricfilters=metricid1, metricid2...    *     (Optional query param).    * @param eventfilters If specified, matched apps should contain the given    *     events. This is represented as eventfilters=eventid1, eventid2...    * @param confsToRetrieve If specified, defines which configurations to    *     retrieve and send back in response. These configs will be retrieved    *     irrespective of whether configs are specified in fields to retrieve or    *     not.    * @param metricsToRetrieve If specified, defines which metrics to retrieve    *     and send back in response. These metrics will be retrieved    *     irrespective of whether metrics are specified in fields to retrieve or    *     not.    * @param fields Specifies which fields of the app entity object to retrieve,    *     see {@link Field}. All fields will be retrieved if fields=ALL. If not    *     specified, 3 fields i.e. entity type(equivalent to YARN_APPLICATION),    *     app id and app created time is returned(Optional query param).    * @param metricsLimit If specified, defines the number of metrics to return.    *     Considered only if fields contains METRICS/ALL or metricsToRetrieve is    *     specified. Ignored otherwise. The maximum possible value for    *     metricsLimit can be {@link Integer#MAX_VALUE}. If it is not specified    *     or has a value less than 1, and metrics have to be retrieved, then    *     metricsLimit will be considered as 1 i.e. latest single value of    *     metric(s) will be returned. (Optional query param).    * @param fromId Defines the application id. If specified, retrieve the next    *     set of applications from the given id. The set of applications    *     retrieved is inclusive of specified fromId.    *    * @return If successful, a HTTP 200(OK) response having a JSON representing    *     a set of<cite>TimelineEntity</cite> instances representing apps is    *     returned.<br>    *     On failures,<br>    *     If any problem occurs in parsing request, HTTP 400(Bad Request) is    *     returned.<br>    *     For all other errors while retrieving data, HTTP 500(Internal Server    *     Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/clusters/{clusterid}/users/{userid}/flows/{flowname}/apps/"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|getFlowApps ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String clusterId, @PathParam(R) String userId, @PathParam(R) String flowName, @QueryParam(R) String limit, @QueryParam(R) String createdTimeStart, @QueryParam(R) String createdTimeEnd, @QueryParam(R) String relatesTo, @QueryParam(R) String isRelatedTo, @QueryParam(R) String infofilters, @QueryParam(R) String conffilters, @QueryParam(R) String metricfilters, @QueryParam(R) String eventfilters, @QueryParam(R) String confsToRetrieve, @QueryParam(R) String metricsToRetrieve, @QueryParam(R) String fields, @QueryParam(R) String metricsLimit, @QueryParam(R) String fromId)
specifier|public
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|getFlowApps
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"clusterid"
argument_list|)
name|String
name|clusterId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"userid"
argument_list|)
name|String
name|userId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"flowname"
argument_list|)
name|String
name|flowName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"limit"
argument_list|)
name|String
name|limit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimestart"
argument_list|)
name|String
name|createdTimeStart
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimeend"
argument_list|)
name|String
name|createdTimeEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"relatesto"
argument_list|)
name|String
name|relatesTo
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"isrelatedto"
argument_list|)
name|String
name|isRelatedTo
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"infofilters"
argument_list|)
name|String
name|infofilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"conffilters"
argument_list|)
name|String
name|conffilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricfilters"
argument_list|)
name|String
name|metricfilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"eventfilters"
argument_list|)
name|String
name|eventfilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"confstoretrieve"
argument_list|)
name|String
name|confsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricstoretrieve"
argument_list|)
name|String
name|metricsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricslimit"
argument_list|)
name|String
name|metricsLimit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fromid"
argument_list|)
name|String
name|fromId
parameter_list|)
block|{
return|return
name|getEntities
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|clusterId
argument_list|,
literal|null
argument_list|,
name|TimelineEntityType
operator|.
name|YARN_APPLICATION
operator|.
name|toString
argument_list|()
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
literal|null
argument_list|,
name|limit
argument_list|,
name|createdTimeStart
argument_list|,
name|createdTimeEnd
argument_list|,
name|relatesTo
argument_list|,
name|isRelatedTo
argument_list|,
name|infofilters
argument_list|,
name|conffilters
argument_list|,
name|metricfilters
argument_list|,
name|eventfilters
argument_list|,
name|confsToRetrieve
argument_list|,
name|metricsToRetrieve
argument_list|,
name|fields
argument_list|,
name|metricsLimit
argument_list|,
literal|null
argument_list|,
name|fromId
argument_list|)
return|;
block|}
comment|/**    * Return a set of application-attempt entities for a given applicationId.    * Cluster ID is not provided by client so default cluster ID has to be taken.    * If userid, flow name and flowrun id which are optional query parameters are    * not specified, they will be queried based on app id and default cluster id    * from the flow context information stored in underlying storage    * implementation. If number of matching entities are more than the limit,    * most recent entities till the limit is reached, will be returned.    *    * @param req Servlet request.    * @param res Servlet response.    * @param appId Application id to which the entities to be queried belong to(    *          Mandatory path param).    * @param userId User id which should match for the entities(Optional query    *          param)    * @param flowName Flow name which should match for the entities(Optional    *          query param).    * @param flowRunId Run id which should match for the entities(Optional query    *          param).    * @param limit If specified, defines the number of entities to return. The    *          maximum possible value for limit can be {@link Long#MAX_VALUE}. If    *          it is not specified or has a value less than 0, then limit will be    *          considered as 100. (Optional query param).    * @param createdTimeStart If specified, matched entities should not be    *          created before this timestamp(Optional query param).    * @param createdTimeEnd If specified, matched entities should not be created    *          after this timestamp(Optional query param).    * @param relatesTo If specified, matched entities should relate to given    *          entities associated with a entity type. relatesto is a comma    *          separated list in the format    *          [entitytype]:[entityid1]:[entityid2]... (Optional query param).    * @param isRelatedTo If specified, matched entities should be related to    *          given entities associated with a entity type. relatesto is a comma    *          separated list in the format    *          [entitytype]:[entityid1]:[entityid2]... (Optional query param).    * @param infofilters If specified, matched entities should have exact matches    *          to the given info represented as key-value pairs. This is    *          represented as infofilters=info1:value1,info2:value2... (Optional    *          query param).    * @param conffilters If specified, matched entities should have exact matches    *          to the given configs represented as key-value pairs. This is    *          represented as conffilters=conf1:value1,conf2:value2... (Optional    *          query param).    * @param metricfilters If specified, matched entities should contain the    *          given metrics. This is represented as metricfilters=metricid1,    *          metricid2... (Optional query param).    * @param eventfilters If specified, matched entities should contain the given    *          events. This is represented as eventfilters=eventid1, eventid2...    * @param confsToRetrieve If specified, defines which configurations to    *          retrieve and send back in response. These configs will be    *          retrieved irrespective of whether configs are specified in fields    *          to retrieve or not.    * @param metricsToRetrieve If specified, defines which metrics to retrieve    *          and send back in response. These metrics will be retrieved    *          irrespective of whether metrics are specified in fields to    *          retrieve or not.    * @param fields Specifies which fields of the entity object to retrieve, see    *          {@link Field}. All fields will be retrieved if fields=ALL. If not    *          specified, 3 fields i.e. entity type, id, created time is returned    *          (Optional query param).    * @param metricsLimit If specified, defines the number of metrics to return.    *          Considered only if fields contains METRICS/ALL or    *          metricsToRetrieve is specified. Ignored otherwise. The maximum    *          possible value for metricsLimit can be {@link Integer#MAX_VALUE}.    *          If it is not specified or has a value less than 1, and metrics    *          have to be retrieved, then metricsLimit will be considered as 1    *          i.e. latest single value of metric(s) will be returned. (Optional    *          query param).    * @param fromIdPrefix If specified, retrieve entities with an id prefix    *          greater than or equal to the specified fromIdPrefix. If    *          fromIdPrefix is same for all entities of a given entity type, then    *          the user must provide fromId as a filter to denote the start    *          entity from which further entities will be fetched. fromIdPrefix    *          is mandatory even in the case the entity id prefix is not used and    *          should be set to 0.    * @param fromId If specified along with fromIdPrefix, retrieve entities with    *          an id prefix greater than or equal to specified id prefix in    *          fromIdPrefix and entity id lexicographically greater than or equal    *          to entity id specified in fromId. Please note than fromIdPrefix is    *          mandatory if fromId is specified, otherwise, the filter will be    *          ignored. It is recommended to provide both fromIdPrefix and fromId    *          filters for more accurate results as id prefix may not be unique    *          for an entity.    *    * @return If successful, a HTTP 200(OK) response having a JSON representing a    *         set of<cite>TimelineEntity</cite> instances of the app-attempt    *         entity type is returned.<br>    *         On failures,<br>    *         If any problem occurs in parsing request, HTTP 400(Bad Request) is    *         returned.<br>    *         If flow context information cannot be retrieved, HTTP 404(Not    *         Found) is returned.<br>    *         For all other errors while retrieving data, HTTP 500(Internal    *         Server Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/apps/{appid}/appattempts"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
DECL|method|getAppAttempts (@ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String appId, @QueryParam(R) String userId, @QueryParam(R) String flowName, @QueryParam(R) String flowRunId, @QueryParam(R) String limit, @QueryParam(R) String createdTimeStart, @QueryParam(R) String createdTimeEnd, @QueryParam(R) String relatesTo, @QueryParam(R) String isRelatedTo, @QueryParam(R) String infofilters, @QueryParam(R) String conffilters, @QueryParam(R) String metricfilters, @QueryParam(R) String eventfilters, @QueryParam(R) String confsToRetrieve, @QueryParam(R) String metricsToRetrieve, @QueryParam(R) String fields, @QueryParam(R) String metricsLimit, @QueryParam(R) String fromIdPrefix, @QueryParam(R) String fromId)
specifier|public
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|getAppAttempts
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"userid"
argument_list|)
name|String
name|userId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowname"
argument_list|)
name|String
name|flowName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowrunid"
argument_list|)
name|String
name|flowRunId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"limit"
argument_list|)
name|String
name|limit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimestart"
argument_list|)
name|String
name|createdTimeStart
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimeend"
argument_list|)
name|String
name|createdTimeEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"relatesto"
argument_list|)
name|String
name|relatesTo
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"isrelatedto"
argument_list|)
name|String
name|isRelatedTo
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"infofilters"
argument_list|)
name|String
name|infofilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"conffilters"
argument_list|)
name|String
name|conffilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricfilters"
argument_list|)
name|String
name|metricfilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"eventfilters"
argument_list|)
name|String
name|eventfilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"confstoretrieve"
argument_list|)
name|String
name|confsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricstoretrieve"
argument_list|)
name|String
name|metricsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricslimit"
argument_list|)
name|String
name|metricsLimit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fromidprefix"
argument_list|)
name|String
name|fromIdPrefix
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fromid"
argument_list|)
name|String
name|fromId
parameter_list|)
block|{
return|return
name|getAppAttempts
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
literal|null
argument_list|,
name|appId
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
name|flowRunId
argument_list|,
name|limit
argument_list|,
name|createdTimeStart
argument_list|,
name|createdTimeEnd
argument_list|,
name|relatesTo
argument_list|,
name|isRelatedTo
argument_list|,
name|infofilters
argument_list|,
name|conffilters
argument_list|,
name|metricfilters
argument_list|,
name|eventfilters
argument_list|,
name|confsToRetrieve
argument_list|,
name|metricsToRetrieve
argument_list|,
name|fields
argument_list|,
name|metricsLimit
argument_list|,
name|fromIdPrefix
argument_list|,
name|fromId
argument_list|)
return|;
block|}
comment|/**    * Return a set of application-attempt entities for a given applicationId. If    * userid, flow name and flowrun id which are optional query parameters are    * not specified, they will be queried based on app id and cluster id from the    * flow context information stored in underlying storage implementation. If    * number of matching entities are more than the limit, most recent entities    * till the limit is reached, will be returned.    *    * @param req Servlet request.    * @param res Servlet response.    * @param clusterId Cluster id to which the entities to be queried belong to(    *          Mandatory path param).    * @param appId Application id to which the entities to be queried belong to(    *          Mandatory path param).    * @param userId User id which should match for the entities(Optional query    *          param)    * @param flowName Flow name which should match for the entities(Optional    *          query param).    * @param flowRunId Run id which should match for the entities(Optional query    *          param).    * @param limit If specified, defines the number of entities to return. The    *          maximum possible value for limit can be {@link Long#MAX_VALUE}. If    *          it is not specified or has a value less than 0, then limit will be    *          considered as 100. (Optional query param).    * @param createdTimeStart If specified, matched entities should not be    *          created before this timestamp(Optional query param).    * @param createdTimeEnd If specified, matched entities should not be created    *          after this timestamp(Optional query param).    * @param relatesTo If specified, matched entities should relate to given    *          entities associated with a entity type. relatesto is a comma    *          separated list in the format    *          [entitytype]:[entityid1]:[entityid2]... (Optional query param).    * @param isRelatedTo If specified, matched entities should be related to    *          given entities associated with a entity type. relatesto is a comma    *          separated list in the format    *          [entitytype]:[entityid1]:[entityid2]... (Optional query param).    * @param infofilters If specified, matched entities should have exact matches    *          to the given info represented as key-value pairs. This is    *          represented as infofilters=info1:value1,info2:value2... (Optional    *          query param).    * @param conffilters If specified, matched entities should have exact matches    *          to the given configs represented as key-value pairs. This is    *          represented as conffilters=conf1:value1,conf2:value2... (Optional    *          query param).    * @param metricfilters If specified, matched entities should contain the    *          given metrics. This is represented as metricfilters=metricid1,    *          metricid2... (Optional query param).    * @param eventfilters If specified, matched entities should contain the given    *          events. This is represented as eventfilters=eventid1, eventid2...    * @param confsToRetrieve If specified, defines which configurations to    *          retrieve and send back in response. These configs will be    *          retrieved irrespective of whether configs are specified in fields    *          to retrieve or not.    * @param metricsToRetrieve If specified, defines which metrics to retrieve    *          and send back in response. These metrics will be retrieved    *          irrespective of whether metrics are specified in fields to    *          retrieve or not.    * @param fields Specifies which fields of the entity object to retrieve, see    *          {@link Field}. All fields will be retrieved if fields=ALL. If not    *          specified, 3 fields i.e. entity type, id, created time is returned    *          (Optional query param).    * @param metricsLimit If specified, defines the number of metrics to return.    *          Considered only if fields contains METRICS/ALL or    *          metricsToRetrieve is specified. Ignored otherwise. The maximum    *          possible value for metricsLimit can be {@link Integer#MAX_VALUE}.    *          If it is not specified or has a value less than 1, and metrics    *          have to be retrieved, then metricsLimit will be considered as 1    *          i.e. latest single value of metric(s) will be returned. (Optional    *          query param).    * @param fromIdPrefix If specified, retrieve entities with an id prefix    *          greater than or equal to the specified fromIdPrefix. If    *          fromIdPrefix is same for all entities of a given entity type, then    *          the user must provide fromId as a filter to denote the start    *          entity from which further entities will be fetched. fromIdPrefix    *          is mandatory even in the case the entity id prefix is not used and    *          should be set to 0.    * @param fromId If specified along with fromIdPrefix, retrieve entities with    *          an id prefix greater than or equal to specified id prefix in    *          fromIdPrefix and entity id lexicographically greater than or equal    *          to entity id specified in fromId. Please note than fromIdPrefix is    *          mandatory if fromId is specified, otherwise, the filter will be    *          ignored. It is recommended to provide both fromIdPrefix and fromId    *          filters for more accurate results as id prefix may not be unique    *          for an entity.    *    * @return If successful, a HTTP 200(OK) response having a JSON representing a    *         set of<cite>TimelineEntity</cite> instances of the app-attempts    *         entity type is returned.<br>    *         On failures,<br>    *         If any problem occurs in parsing request, HTTP 400(Bad Request) is    *         returned.<br>    *         If flow context information cannot be retrieved, HTTP 404(Not    *         Found) is returned.<br>    *         For all other errors while retrieving data, HTTP 500(Internal    *         Server Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/clusters/{clusterid}/apps/{appid}/appattempts"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
DECL|method|getAppAttempts (@ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String clusterId, @PathParam(R) String appId, @QueryParam(R) String userId, @QueryParam(R) String flowName, @QueryParam(R) String flowRunId, @QueryParam(R) String limit, @QueryParam(R) String createdTimeStart, @QueryParam(R) String createdTimeEnd, @QueryParam(R) String relatesTo, @QueryParam(R) String isRelatedTo, @QueryParam(R) String infofilters, @QueryParam(R) String conffilters, @QueryParam(R) String metricfilters, @QueryParam(R) String eventfilters, @QueryParam(R) String confsToRetrieve, @QueryParam(R) String metricsToRetrieve, @QueryParam(R) String fields, @QueryParam(R) String metricsLimit, @QueryParam(R) String fromIdPrefix, @QueryParam(R) String fromId)
specifier|public
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|getAppAttempts
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"clusterid"
argument_list|)
name|String
name|clusterId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"userid"
argument_list|)
name|String
name|userId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowname"
argument_list|)
name|String
name|flowName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowrunid"
argument_list|)
name|String
name|flowRunId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"limit"
argument_list|)
name|String
name|limit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimestart"
argument_list|)
name|String
name|createdTimeStart
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimeend"
argument_list|)
name|String
name|createdTimeEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"relatesto"
argument_list|)
name|String
name|relatesTo
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"isrelatedto"
argument_list|)
name|String
name|isRelatedTo
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"infofilters"
argument_list|)
name|String
name|infofilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"conffilters"
argument_list|)
name|String
name|conffilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricfilters"
argument_list|)
name|String
name|metricfilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"eventfilters"
argument_list|)
name|String
name|eventfilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"confstoretrieve"
argument_list|)
name|String
name|confsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricstoretrieve"
argument_list|)
name|String
name|metricsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricslimit"
argument_list|)
name|String
name|metricsLimit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fromidprefix"
argument_list|)
name|String
name|fromIdPrefix
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fromid"
argument_list|)
name|String
name|fromId
parameter_list|)
block|{
return|return
name|getEntities
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|clusterId
argument_list|,
name|appId
argument_list|,
name|TimelineEntityType
operator|.
name|YARN_APPLICATION_ATTEMPT
operator|.
name|toString
argument_list|()
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
name|flowRunId
argument_list|,
name|limit
argument_list|,
name|createdTimeStart
argument_list|,
name|createdTimeEnd
argument_list|,
name|relatesTo
argument_list|,
name|isRelatedTo
argument_list|,
name|infofilters
argument_list|,
name|conffilters
argument_list|,
name|metricfilters
argument_list|,
name|eventfilters
argument_list|,
name|confsToRetrieve
argument_list|,
name|metricsToRetrieve
argument_list|,
name|fields
argument_list|,
name|metricsLimit
argument_list|,
name|fromIdPrefix
argument_list|,
name|fromId
argument_list|)
return|;
block|}
comment|/**    * Return a single application-attempt entity for the given attempt Id.    * Cluster ID is not provided by client so default cluster ID has to be taken.    * If userid, flow name and flowrun id which are optional query parameters are    * not specified, they will be queried based on app id and default cluster id    * from the flow context information stored in underlying storage    * implementation.    *    * @param req Servlet request.    * @param res Servlet response.    * @param appId Application id to which the entity to be queried belongs to(    *          Mandatory path param).    * @param appAttemptId Application Attempt Id to which the containers belong    *          to( Mandatory path param).    * @param userId User id which should match for the entity(Optional query    *          param).    * @param flowName Flow name which should match for the entity(Optional query    *          param).    * @param flowRunId Run id which should match for the entity(Optional query    *          param).    * @param confsToRetrieve If specified, defines which configurations to    *          retrieve and send back in response. These configs will be    *          retrieved irrespective of whether configs are specified in fields    *          to retrieve or not.    * @param metricsToRetrieve If specified, defines which metrics to retrieve    *          and send back in response. These metrics will be retrieved    *          irrespective of whether metrics are specified in fields to    *          retrieve or not.    * @param fields Specifies which fields of the entity object to retrieve, see    *          {@link Field}. All fields will be retrieved if fields=ALL. If not    *          specified, 3 fields i.e. entity type, id, created time is returned    *          (Optional query param).    * @param metricsLimit If specified, defines the number of metrics to return.    *          Considered only if fields contains METRICS/ALL or    *          metricsToRetrieve is specified. Ignored otherwise. The maximum    *          possible value for metricsLimit can be {@link Integer#MAX_VALUE}.    *          If it is not specified or has a value less than 1, and metrics    *          have to be retrieved, then metricsLimit will be considered as 1    *          i.e. latest single value of metric(s) will be returned. (Optional    *          query param).    * @param entityIdPrefix Defines the id prefix for the entity to be fetched.    *          If specified, then entity retrieval will be faster.    *    * @return If successful, a HTTP 200(OK) response having a JSON representing a    *<cite>TimelineEntity</cite> instance is returned.<br>    *         On failures,<br>    *         If any problem occurs in parsing request, HTTP 400(Bad Request) is    *         returned.<br>    *         If flow context information cannot be retrieved or entity for the    *         given entity id cannot be found, HTTP 404(Not Found) is    *         returned.<br>    *         For all other errors while retrieving data, HTTP 500(Internal    *         Server Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/apps/{appid}/appattempts/{appattemptid}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
DECL|method|getAppAttempt (@ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String appId, @PathParam(R) String appAttemptId, @QueryParam(R) String userId, @QueryParam(R) String flowName, @QueryParam(R) String flowRunId, @QueryParam(R) String confsToRetrieve, @QueryParam(R) String metricsToRetrieve, @QueryParam(R) String fields, @QueryParam(R) String metricsLimit, @QueryParam(R) String entityIdPrefix)
specifier|public
name|TimelineEntity
name|getAppAttempt
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appattemptid"
argument_list|)
name|String
name|appAttemptId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"userid"
argument_list|)
name|String
name|userId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowname"
argument_list|)
name|String
name|flowName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowrunid"
argument_list|)
name|String
name|flowRunId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"confstoretrieve"
argument_list|)
name|String
name|confsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricstoretrieve"
argument_list|)
name|String
name|metricsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricslimit"
argument_list|)
name|String
name|metricsLimit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"entityidprefix"
argument_list|)
name|String
name|entityIdPrefix
parameter_list|)
block|{
return|return
name|getAppAttempt
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
literal|null
argument_list|,
name|appId
argument_list|,
name|appAttemptId
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
name|flowRunId
argument_list|,
name|confsToRetrieve
argument_list|,
name|metricsToRetrieve
argument_list|,
name|fields
argument_list|,
name|metricsLimit
argument_list|,
name|entityIdPrefix
argument_list|)
return|;
block|}
comment|/**    * Return a single application attempt entity of the given entity Id. If    * userid, flowname and flowrun id which are optional query parameters are not    * specified, they will be queried based on app id and cluster id from the    * flow context information stored in underlying storage implementation.    *    * @param req Servlet request.    * @param res Servlet response.    * @param clusterId Cluster id to which the entity to be queried belongs to(    *          Mandatory path param).    * @param appId Application id to which the entity to be queried belongs to(    *          Mandatory path param).    * @param appAttemptId Application Attempt Id to which the containers belong    *          to( Mandatory path param).    * @param userId User id which should match for the entity(Optional query    *          param).    * @param flowName Flow name which should match for the entity(Optional query    *          param).    * @param flowRunId Run id which should match for the entity(Optional query    *          param).    * @param confsToRetrieve If specified, defines which configurations to    *          retrieve and send back in response. These configs will be    *          retrieved irrespective of whether configs are specified in fields    *          to retrieve or not.    * @param metricsToRetrieve If specified, defines which metrics to retrieve    *          and send back in response. These metrics will be retrieved    *          irrespective of whether metrics are specified in fields to    *          retrieve or not.    * @param fields Specifies which fields of the entity object to retrieve, see    *          {@link Field}. All fields will be retrieved if fields=ALL. If not    *          specified, 3 fields i.e. entity type, id and created time is    *          returned (Optional query param).    * @param metricsLimit If specified, defines the number of metrics to return.    *          Considered only if fields contains METRICS/ALL or    *          metricsToRetrieve is specified. Ignored otherwise. The maximum    *          possible value for metricsLimit can be {@link Integer#MAX_VALUE}.    *          If it is not specified or has a value less than 1, and metrics    *          have to be retrieved, then metricsLimit will be considered as 1    *          i.e. latest single value of metric(s) will be returned. (Optional    *          query param).    * @param entityIdPrefix Defines the id prefix for the entity to be fetched.    *          If specified, then entity retrieval will be faster.    *    * @return If successful, a HTTP 200(OK) response having a JSON representing a    *<cite>TimelineEntity</cite> instance is returned.<br>    *         On failures,<br>    *         If any problem occurs in parsing request, HTTP 400(Bad Request) is    *         returned.<br>    *         If flow context information cannot be retrieved or entity for the    *         given entity id cannot be found, HTTP 404(Not Found) is    *         returned.<br>    *         For all other errors while retrieving data, HTTP 500(Internal    *         Server Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/clusters/{clusterid}/apps/{appid}/appattempts/{appattemptid}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
DECL|method|getAppAttempt (@ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String clusterId, @PathParam(R) String appId, @PathParam(R) String appAttemptId, @QueryParam(R) String userId, @QueryParam(R) String flowName, @QueryParam(R) String flowRunId, @QueryParam(R) String confsToRetrieve, @QueryParam(R) String metricsToRetrieve, @QueryParam(R) String fields, @QueryParam(R) String metricsLimit, @QueryParam(R) String entityIdPrefix)
specifier|public
name|TimelineEntity
name|getAppAttempt
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"clusterid"
argument_list|)
name|String
name|clusterId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appattemptid"
argument_list|)
name|String
name|appAttemptId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"userid"
argument_list|)
name|String
name|userId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowname"
argument_list|)
name|String
name|flowName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowrunid"
argument_list|)
name|String
name|flowRunId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"confstoretrieve"
argument_list|)
name|String
name|confsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricstoretrieve"
argument_list|)
name|String
name|metricsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricslimit"
argument_list|)
name|String
name|metricsLimit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"entityidprefix"
argument_list|)
name|String
name|entityIdPrefix
parameter_list|)
block|{
return|return
name|getEntity
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|clusterId
argument_list|,
name|appId
argument_list|,
name|TimelineEntityType
operator|.
name|YARN_APPLICATION_ATTEMPT
operator|.
name|toString
argument_list|()
argument_list|,
name|appAttemptId
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
name|flowRunId
argument_list|,
name|confsToRetrieve
argument_list|,
name|metricsToRetrieve
argument_list|,
name|fields
argument_list|,
name|metricsLimit
argument_list|,
name|entityIdPrefix
argument_list|)
return|;
block|}
comment|/**    * Return a set of container entities belonging to given application attempt    * id. Cluster ID is not provided by client so default cluster ID has to be    * taken. If userid, flow name and flowrun id which are optional query    * parameters are not specified, they will be queried based on app id and    * default cluster id from the flow context information stored in underlying    * storage implementation. If number of matching entities are more than the    * limit, most recent entities till the limit is reached, will be returned.    *    * @param req Servlet request.    * @param res Servlet response.    * @param appId Application id to which the entities to be queried belong to(    *          Mandatory path param).    * @param appattemptId Application Attempt Id to which the containers belong    *          to( Mandatory path param).    * @param userId User id which should match for the entities(Optional query    *          param)    * @param flowName Flow name which should match for the entities(Optional    *          query param).    * @param flowRunId Run id which should match for the entities(Optional query    *          param).    * @param limit If specified, defines the number of entities to return. The    *          maximum possible value for limit can be {@link Long#MAX_VALUE}. If    *          it is not specified or has a value less than 0, then limit will be    *          considered as 100. (Optional query param).    * @param createdTimeStart If specified, matched entities should not be    *          created before this timestamp(Optional query param).    * @param createdTimeEnd If specified, matched entities should not be created    *          after this timestamp(Optional query param).    * @param relatesTo If specified, matched entities should relate to given    *          entities associated with a entity type. relatesto is a comma    *          separated list in the format    *          [entitytype]:[entityid1]:[entityid2]... (Optional query param).    * @param isRelatedTo If specified, matched entities should be related to    *          given entities associated with a entity type. relatesto is a comma    *          separated list in the format    *          [entitytype]:[entityid1]:[entityid2]... (Optional query param).    * @param infofilters If specified, matched entities should have exact matches    *          to the given info represented as key-value pairs. This is    *          represented as infofilters=info1:value1,info2:value2... (Optional    *          query param).    * @param conffilters If specified, matched entities should have exact matches    *          to the given configs represented as key-value pairs. This is    *          represented as conffilters=conf1:value1,conf2:value2... (Optional    *          query param).    * @param metricfilters If specified, matched entities should contain the    *          given metrics. This is represented as metricfilters=metricid1,    *          metricid2... (Optional query param).    * @param eventfilters If specified, matched entities should contain the given    *          events. This is represented as eventfilters=eventid1, eventid2...    * @param confsToRetrieve If specified, defines which configurations to    *          retrieve and send back in response. These configs will be    *          retrieved irrespective of whether configs are specified in fields    *          to retrieve or not.    * @param metricsToRetrieve If specified, defines which metrics to retrieve    *          and send back in response. These metrics will be retrieved    *          irrespective of whether metrics are specified in fields to    *          retrieve or not.    * @param fields Specifies which fields of the entity object to retrieve, see    *          {@link Field}. All fields will be retrieved if fields=ALL. If not    *          specified, 3 fields i.e. entity type, id, created time is returned    *          (Optional query param).    * @param metricsLimit If specified, defines the number of metrics to return.    *          Considered only if fields contains METRICS/ALL or    *          metricsToRetrieve is specified. Ignored otherwise. The maximum    *          possible value for metricsLimit can be {@link Integer#MAX_VALUE}.    *          If it is not specified or has a value less than 1, and metrics    *          have to be retrieved, then metricsLimit will be considered as 1    *          i.e. latest single value of metric(s) will be returned. (Optional    *          query param).    * @param fromIdPrefix If specified, retrieve entities with an id prefix    *          greater than or equal to the specified fromIdPrefix. If    *          fromIdPrefix is same for all entities of a given entity type, then    *          the user must provide fromId as a filter to denote the start    *          entity from which further entities will be fetched. fromIdPrefix    *          is mandatory even in the case the entity id prefix is not used and    *          should be set to 0.    * @param fromId If specified along with fromIdPrefix, retrieve entities with    *          an id prefix greater than or equal to specified id prefix in    *          fromIdPrefix and entity id lexicographically greater than or equal    *          to entity id specified in fromId. Please note than fromIdPrefix is    *          mandatory if fromId is specified, otherwise, the filter will be    *          ignored. It is recommended to provide both fromIdPrefix and fromId    *          filters for more accurate results as id prefix may not be unique    *          for an entity.    *    * @return If successful, a HTTP 200(OK) response having a JSON representing a    *         set of<cite>TimelineEntity</cite> instances of the containers    *         belongs to given application attempt id.<br>    *         On failures,<br>    *         If any problem occurs in parsing request, HTTP 400(Bad Request) is    *         returned.<br>    *         If flow context information cannot be retrieved, HTTP 404(Not    *         Found) is returned.<br>    *         For all other errors while retrieving data, HTTP 500(Internal    *         Server Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/apps/{appid}/appattempts/{appattemptid}/containers"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
DECL|method|getContainers (@ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String appId, @PathParam(R) String appattemptId, @QueryParam(R) String userId, @QueryParam(R) String flowName, @QueryParam(R) String flowRunId, @QueryParam(R) String limit, @QueryParam(R) String createdTimeStart, @QueryParam(R) String createdTimeEnd, @QueryParam(R) String relatesTo, @QueryParam(R) String isRelatedTo, @QueryParam(R) String infofilters, @QueryParam(R) String conffilters, @QueryParam(R) String metricfilters, @QueryParam(R) String eventfilters, @QueryParam(R) String confsToRetrieve, @QueryParam(R) String metricsToRetrieve, @QueryParam(R) String fields, @QueryParam(R) String metricsLimit, @QueryParam(R) String fromIdPrefix, @QueryParam(R) String fromId)
specifier|public
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|getContainers
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appattemptid"
argument_list|)
name|String
name|appattemptId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"userid"
argument_list|)
name|String
name|userId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowname"
argument_list|)
name|String
name|flowName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowrunid"
argument_list|)
name|String
name|flowRunId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"limit"
argument_list|)
name|String
name|limit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimestart"
argument_list|)
name|String
name|createdTimeStart
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimeend"
argument_list|)
name|String
name|createdTimeEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"relatesto"
argument_list|)
name|String
name|relatesTo
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"isrelatedto"
argument_list|)
name|String
name|isRelatedTo
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"infofilters"
argument_list|)
name|String
name|infofilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"conffilters"
argument_list|)
name|String
name|conffilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricfilters"
argument_list|)
name|String
name|metricfilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"eventfilters"
argument_list|)
name|String
name|eventfilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"confstoretrieve"
argument_list|)
name|String
name|confsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricstoretrieve"
argument_list|)
name|String
name|metricsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricslimit"
argument_list|)
name|String
name|metricsLimit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fromidprefix"
argument_list|)
name|String
name|fromIdPrefix
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fromid"
argument_list|)
name|String
name|fromId
parameter_list|)
block|{
return|return
name|getContainers
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
literal|null
argument_list|,
name|appId
argument_list|,
name|appattemptId
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
name|flowRunId
argument_list|,
name|limit
argument_list|,
name|createdTimeStart
argument_list|,
name|createdTimeEnd
argument_list|,
name|relatesTo
argument_list|,
name|isRelatedTo
argument_list|,
name|infofilters
argument_list|,
name|conffilters
argument_list|,
name|metricfilters
argument_list|,
name|eventfilters
argument_list|,
name|confsToRetrieve
argument_list|,
name|metricsToRetrieve
argument_list|,
name|fields
argument_list|,
name|metricsLimit
argument_list|,
name|fromIdPrefix
argument_list|,
name|fromId
argument_list|)
return|;
block|}
comment|/**    * Return a set of container entities belonging to given application attempt    * id. If userid, flow name and flowrun id which are optional query parameters    * are not specified, they will be queried based on app id and cluster id from    * the flow context information stored in underlying storage implementation.    * If number of matching entities are more than the limit, most recent    * entities till the limit is reached, will be returned.    *    * @param req Servlet request.    * @param res Servlet response.    * @param clusterId Cluster id to which the entities to be queried belong to(    *          Mandatory path param).    * @param appId Application id to which the entities to be queried belong to(    *          Mandatory path param).    * @param appattemptId Application Attempt Id to which the containers belong    *          to( Mandatory path param).    * @param userId User id which should match for the entities(Optional query    *          param)    * @param flowName Flow name which should match for the entities(Optional    *          query param).    * @param flowRunId Run id which should match for the entities(Optional query    *          param).    * @param limit If specified, defines the number of entities to return. The    *          maximum possible value for limit can be {@link Long#MAX_VALUE}. If    *          it is not specified or has a value less than 0, then limit will be    *          considered as 100. (Optional query param).    * @param createdTimeStart If specified, matched entities should not be    *          created before this timestamp(Optional query param).    * @param createdTimeEnd If specified, matched entities should not be created    *          after this timestamp(Optional query param).    * @param relatesTo If specified, matched entities should relate to given    *          entities associated with a entity type. relatesto is a comma    *          separated list in the format    *          [entitytype]:[entityid1]:[entityid2]... (Optional query param).    * @param isRelatedTo If specified, matched entities should be related to    *          given entities associated with a entity type. relatesto is a comma    *          separated list in the format    *          [entitytype]:[entityid1]:[entityid2]... (Optional query param).    * @param infofilters If specified, matched entities should have exact matches    *          to the given info represented as key-value pairs. This is    *          represented as infofilters=info1:value1,info2:value2... (Optional    *          query param).    * @param conffilters If specified, matched entities should have exact matches    *          to the given configs represented as key-value pairs. This is    *          represented as conffilters=conf1:value1,conf2:value2... (Optional    *          query param).    * @param metricfilters If specified, matched entities should contain the    *          given metrics. This is represented as metricfilters=metricid1,    *          metricid2... (Optional query param).    * @param eventfilters If specified, matched entities should contain the given    *          events. This is represented as eventfilters=eventid1, eventid2...    * @param confsToRetrieve If specified, defines which configurations to    *          retrieve and send back in response. These configs will be    *          retrieved irrespective of whether configs are specified in fields    *          to retrieve or not.    * @param metricsToRetrieve If specified, defines which metrics to retrieve    *          and send back in response. These metrics will be retrieved    *          irrespective of whether metrics are specified in fields to    *          retrieve or not.    * @param fields Specifies which fields of the entity object to retrieve, see    *          {@link Field}. All fields will be retrieved if fields=ALL. If not    *          specified, 3 fields i.e. entity type, id, created time is returned    *          (Optional query param).    * @param metricsLimit If specified, defines the number of metrics to return.    *          Considered only if fields contains METRICS/ALL or    *          metricsToRetrieve is specified. Ignored otherwise. The maximum    *          possible value for metricsLimit can be {@link Integer#MAX_VALUE}.    *          If it is not specified or has a value less than 1, and metrics    *          have to be retrieved, then metricsLimit will be considered as 1    *          i.e. latest single value of metric(s) will be returned. (Optional    *          query param).    * @param fromIdPrefix If specified, retrieve entities with an id prefix    *          greater than or equal to the specified fromIdPrefix. If    *          fromIdPrefix is same for all entities of a given entity type, then    *          the user must provide fromId as a filter to denote the start    *          entity from which further entities will be fetched. fromIdPrefix    *          is mandatory even in the case the entity id prefix is not used and    *          should be set to 0.    * @param fromId If specified along with fromIdPrefix, retrieve entities with    *          an id prefix greater than or equal to specified id prefix in    *          fromIdPrefix and entity id lexicographically greater than or equal    *          to entity id specified in fromId. Please note than fromIdPrefix is    *          mandatory if fromId is specified, otherwise, the filter will be    *          ignored. It is recommended to provide both fromIdPrefix and fromId    *          filters for more accurate results as id prefix may not be unique    *          for an entity.    *    * @return If successful, a HTTP 200(OK) response having a JSON representing a    *         set of<cite>TimelineEntity</cite> instances of the containers    *         belongs to given application attempt id.<br>    *         On failures,<br>    *         If any problem occurs in parsing request, HTTP 400(Bad Request) is    *         returned.<br>    *         If flow context information cannot be retrieved, HTTP 404(Not    *         Found) is returned.<br>    *         For all other errors while retrieving data, HTTP 500(Internal    *         Server Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/clusters/{clusterid}/apps/{appid}/appattempts/{appattemptid}/containers"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
DECL|method|getContainers (@ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String clusterId, @PathParam(R) String appId, @PathParam(R) String appattemptId, @QueryParam(R) String userId, @QueryParam(R) String flowName, @QueryParam(R) String flowRunId, @QueryParam(R) String limit, @QueryParam(R) String createdTimeStart, @QueryParam(R) String createdTimeEnd, @QueryParam(R) String relatesTo, @QueryParam(R) String isRelatedTo, @QueryParam(R) String infofilters, @QueryParam(R) String conffilters, @QueryParam(R) String metricfilters, @QueryParam(R) String eventfilters, @QueryParam(R) String confsToRetrieve, @QueryParam(R) String metricsToRetrieve, @QueryParam(R) String fields, @QueryParam(R) String metricsLimit, @QueryParam(R) String fromIdPrefix, @QueryParam(R) String fromId)
specifier|public
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|getContainers
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"clusterid"
argument_list|)
name|String
name|clusterId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appattemptid"
argument_list|)
name|String
name|appattemptId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"userid"
argument_list|)
name|String
name|userId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowname"
argument_list|)
name|String
name|flowName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowrunid"
argument_list|)
name|String
name|flowRunId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"limit"
argument_list|)
name|String
name|limit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimestart"
argument_list|)
name|String
name|createdTimeStart
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimeend"
argument_list|)
name|String
name|createdTimeEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"relatesto"
argument_list|)
name|String
name|relatesTo
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"isrelatedto"
argument_list|)
name|String
name|isRelatedTo
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"infofilters"
argument_list|)
name|String
name|infofilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"conffilters"
argument_list|)
name|String
name|conffilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricfilters"
argument_list|)
name|String
name|metricfilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"eventfilters"
argument_list|)
name|String
name|eventfilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"confstoretrieve"
argument_list|)
name|String
name|confsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricstoretrieve"
argument_list|)
name|String
name|metricsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricslimit"
argument_list|)
name|String
name|metricsLimit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fromidprefix"
argument_list|)
name|String
name|fromIdPrefix
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fromid"
argument_list|)
name|String
name|fromId
parameter_list|)
block|{
name|String
name|entityType
init|=
name|TimelineEntityType
operator|.
name|YARN_CONTAINER
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|parentEntityType
init|=
name|TimelineEntityType
operator|.
name|YARN_APPLICATION_ATTEMPT
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|jsonFormatString
init|=
literal|"{\"type\":\""
operator|+
name|parentEntityType
operator|+
literal|"\",\"id\":\""
operator|+
name|appattemptId
operator|+
literal|"\"}"
decl_stmt|;
name|String
name|containerFilters
init|=
literal|"SYSTEM_INFO_PARENT_ENTITY eq "
operator|+
name|jsonFormatString
decl_stmt|;
name|String
name|infofilter
decl_stmt|;
if|if
condition|(
name|infofilters
operator|!=
literal|null
condition|)
block|{
name|infofilter
operator|=
name|containerFilters
operator|+
literal|" AND "
operator|+
name|infofilters
expr_stmt|;
block|}
else|else
block|{
name|infofilter
operator|=
name|containerFilters
expr_stmt|;
block|}
return|return
name|getEntities
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|clusterId
argument_list|,
name|appId
argument_list|,
name|entityType
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
name|flowRunId
argument_list|,
name|limit
argument_list|,
name|createdTimeStart
argument_list|,
name|createdTimeEnd
argument_list|,
name|relatesTo
argument_list|,
name|isRelatedTo
argument_list|,
name|infofilter
argument_list|,
name|conffilters
argument_list|,
name|metricfilters
argument_list|,
name|eventfilters
argument_list|,
name|confsToRetrieve
argument_list|,
name|metricsToRetrieve
argument_list|,
name|fields
argument_list|,
name|metricsLimit
argument_list|,
name|fromIdPrefix
argument_list|,
name|fromId
argument_list|)
return|;
block|}
comment|/**    * Return a single container entity for the given container Id. Cluster ID is    * not provided by client so default cluster ID has to be taken. If userid,    * flow name and flowrun id which are optional query parameters are not    * specified, they will be queried based on app id and default cluster id from    * the flow context information stored in underlying storage implementation.    *    * @param req Servlet request.    * @param res Servlet response.    * @param appId Application id to which the entity to be queried belongs to(    *          Mandatory path param).    * @param containerId Container Id to which the entity to be queried belongs    *          to( Mandatory path param).    * @param userId User id which should match for the entity(Optional query    *          param).    * @param flowName Flow name which should match for the entity(Optional query    *          param).    * @param flowRunId Run id which should match for the entity(Optional query    *          param).    * @param confsToRetrieve If specified, defines which configurations to    *          retrieve and send back in response. These configs will be    *          retrieved irrespective of whether configs are specified in fields    *          to retrieve or not.    * @param metricsToRetrieve If specified, defines which metrics to retrieve    *          and send back in response. These metrics will be retrieved    *          irrespective of whether metrics are specified in fields to    *          retrieve or not.    * @param fields Specifies which fields of the entity object to retrieve, see    *          {@link Field}. All fields will be retrieved if fields=ALL. If not    *          specified, 3 fields i.e. entity type, id, created time is returned    *          (Optional query param).    * @param metricsLimit If specified, defines the number of metrics to return.    *          Considered only if fields contains METRICS/ALL or    *          metricsToRetrieve is specified. Ignored otherwise. The maximum    *          possible value for metricsLimit can be {@link Integer#MAX_VALUE}.    *          If it is not specified or has a value less than 1, and metrics    *          have to be retrieved, then metricsLimit will be considered as 1    *          i.e. latest single value of metric(s) will be returned. (Optional    *          query param).    * @param entityIdPrefix Defines the id prefix for the entity to be fetched.    *          If specified, then entity retrieval will be faster.    *    * @return If successful, a HTTP 200(OK) response having a JSON representing    *<cite>TimelineEntity</cite> instance is returned.<br>    *         On failures,<br>    *         If any problem occurs in parsing request, HTTP 400(Bad Request) is    *         returned.<br>    *         If flow context information cannot be retrieved or entity for the    *         given entity id cannot be found, HTTP 404(Not Found) is    *         returned.<br>    *         For all other errors while retrieving data, HTTP 500(Internal    *         Server Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/apps/{appid}/containers/{containerid}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
DECL|method|getContainer (@ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String appId, @PathParam(R) String containerId, @QueryParam(R) String userId, @QueryParam(R) String flowName, @QueryParam(R) String flowRunId, @QueryParam(R) String confsToRetrieve, @QueryParam(R) String metricsToRetrieve, @QueryParam(R) String fields, @QueryParam(R) String metricsLimit, @QueryParam(R) String entityIdPrefix)
specifier|public
name|TimelineEntity
name|getContainer
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"containerid"
argument_list|)
name|String
name|containerId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"userid"
argument_list|)
name|String
name|userId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowname"
argument_list|)
name|String
name|flowName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowrunid"
argument_list|)
name|String
name|flowRunId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"confstoretrieve"
argument_list|)
name|String
name|confsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricstoretrieve"
argument_list|)
name|String
name|metricsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricslimit"
argument_list|)
name|String
name|metricsLimit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"entityidprefix"
argument_list|)
name|String
name|entityIdPrefix
parameter_list|)
block|{
return|return
name|getContainer
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
literal|null
argument_list|,
name|appId
argument_list|,
name|containerId
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
name|flowRunId
argument_list|,
name|confsToRetrieve
argument_list|,
name|metricsToRetrieve
argument_list|,
name|fields
argument_list|,
name|metricsLimit
argument_list|,
name|entityIdPrefix
argument_list|)
return|;
block|}
comment|/**    * Return a single container entity for the given container Id. If userid,    * flowname and flowrun id which are optional query parameters are not    * specified, they will be queried based on app id and cluster id from the    * flow context information stored in underlying storage implementation.    *    * @param req Servlet request.    * @param res Servlet response.    * @param clusterId Cluster id to which the entity to be queried belongs to(    *          Mandatory path param).    * @param appId Application id to which the entity to be queried belongs to(    *          Mandatory path param).    * @param containerId Container Id to which the entity to be queried belongs    *          to( Mandatory path param).    * @param userId User id which should match for the entity(Optional query    *          param).    * @param flowName Flow name which should match for the entity(Optional query    *          param).    * @param flowRunId Run id which should match for the entity(Optional query    *          param).    * @param confsToRetrieve If specified, defines which configurations to    *          retrieve and send back in response. These configs will be    *          retrieved irrespective of whether configs are specified in fields    *          to retrieve or not.    * @param metricsToRetrieve If specified, defines which metrics to retrieve    *          and send back in response. These metrics will be retrieved    *          irrespective of whether metrics are specified in fields to    *          retrieve or not.    * @param fields Specifies which fields of the entity object to retrieve, see    *          {@link Field}. All fields will be retrieved if fields=ALL. If not    *          specified, 3 fields i.e. entity type, id and created time is    *          returned (Optional query param).    * @param metricsLimit If specified, defines the number of metrics to return.    *          Considered only if fields contains METRICS/ALL or    *          metricsToRetrieve is specified. Ignored otherwise. The maximum    *          possible value for metricsLimit can be {@link Integer#MAX_VALUE}.    *          If it is not specified or has a value less than 1, and metrics    *          have to be retrieved, then metricsLimit will be considered as 1    *          i.e. latest single value of metric(s) will be returned. (Optional    *          query param).    * @param entityIdPrefix Defines the id prefix for the entity to be fetched.    *          If specified, then entity retrieval will be faster.    *    * @return If successful, a HTTP 200(OK) response having a JSON representing a    *<cite>TimelineEntity</cite> instance is returned.<br>    *         On failures,<br>    *         If any problem occurs in parsing request, HTTP 400(Bad Request) is    *         returned.<br>    *         If flow context information cannot be retrieved or entity for the    *         given entity id cannot be found, HTTP 404(Not Found) is    *         returned.<br>    *         For all other errors while retrieving data, HTTP 500(Internal    *         Server Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/clusters/{clusterid}/apps/{appid}/containers/{containerid}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
DECL|method|getContainer (@ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String clusterId, @PathParam(R) String appId, @PathParam(R) String containerId, @QueryParam(R) String userId, @QueryParam(R) String flowName, @QueryParam(R) String flowRunId, @QueryParam(R) String confsToRetrieve, @QueryParam(R) String metricsToRetrieve, @QueryParam(R) String fields, @QueryParam(R) String metricsLimit, @QueryParam(R) String entityIdPrefix)
specifier|public
name|TimelineEntity
name|getContainer
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"clusterid"
argument_list|)
name|String
name|clusterId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"containerid"
argument_list|)
name|String
name|containerId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"userid"
argument_list|)
name|String
name|userId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowname"
argument_list|)
name|String
name|flowName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowrunid"
argument_list|)
name|String
name|flowRunId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"confstoretrieve"
argument_list|)
name|String
name|confsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricstoretrieve"
argument_list|)
name|String
name|metricsToRetrieve
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricslimit"
argument_list|)
name|String
name|metricsLimit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"entityidprefix"
argument_list|)
name|String
name|entityIdPrefix
parameter_list|)
block|{
return|return
name|getEntity
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|clusterId
argument_list|,
name|appId
argument_list|,
name|TimelineEntityType
operator|.
name|YARN_CONTAINER
operator|.
name|toString
argument_list|()
argument_list|,
name|containerId
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
name|flowRunId
argument_list|,
name|confsToRetrieve
argument_list|,
name|metricsToRetrieve
argument_list|,
name|fields
argument_list|,
name|metricsLimit
argument_list|,
name|entityIdPrefix
argument_list|)
return|;
block|}
comment|/**    * Returns a set of available entity types for a given app id. Cluster ID is    * not provided by client so default cluster ID has to be taken. If userid,    * flow name and flow run id which are optional query parameters are not    * specified, they will be queried based on app id and cluster id from the    * flow context information stored in underlying storage implementation.    *    * @param req Servlet request.    * @param res Servlet response.    * @param appId Application id to be queried(Mandatory path param).    * @param flowName Flow name which should match for the app(Optional query    *     param).    * @param flowRunId Run id which should match for the app(Optional query    *     param).    * @param userId User id which should match for the app(Optional query param).    *    * @return If successful, a HTTP 200(OK) response having a JSON representing a    *     list contains all timeline entity types is returned.<br>    *     On failures,<br>    *     If any problem occurs in parsing request, HTTP 400(Bad Request) is    *     returned.<br>    *     If flow context information cannot be retrieved or app for the given    *     app id cannot be found, HTTP 404(Not Found) is returned.<br>    *     For all other errors while retrieving data, HTTP 500(Internal Server    *     Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/apps/{appid}/entity-types"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
DECL|method|getEntityTypes ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String appId, @QueryParam(R) String flowName, @QueryParam(R) String flowRunId, @QueryParam(R) String userId)
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getEntityTypes
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowname"
argument_list|)
name|String
name|flowName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowrunid"
argument_list|)
name|String
name|flowRunId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"userid"
argument_list|)
name|String
name|userId
parameter_list|)
block|{
return|return
name|getEntityTypes
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
literal|null
argument_list|,
name|appId
argument_list|,
name|flowName
argument_list|,
name|flowRunId
argument_list|,
name|userId
argument_list|)
return|;
block|}
comment|/**    * Returns a set of available entity types for a given app id. If userid,    * flow name and flow run id which are optional query parameters are not    * specified, they will be queried based on app id and cluster id from the    * flow context information stored in underlying storage implementation.    *    * @param req Servlet request.    * @param res Servlet response.    * @param clusterId Cluster id to which the app to be queried belong to(    *     Mandatory path param).    * @param appId Application id to be queried(Mandatory path param).    * @param flowName Flow name which should match for the app(Optional query    *     param).    * @param flowRunId Run id which should match for the app(Optional query    *     param).    * @param userId User id which should match for the app(Optional query param).    *    * @return If successful, a HTTP 200(OK) response having a JSON representing a    *     list contains all timeline entity types is returned.<br>    *     On failures,<br>    *     If any problem occurs in parsing request, HTTP 400(Bad Request) is    *     returned.<br>    *     If flow context information cannot be retrieved or app for the given    *     app id cannot be found, HTTP 404(Not Found) is returned.<br>    *     For all other errors while retrieving data, HTTP 500(Internal Server    *     Error) is returned.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/clusters/{clusterid}/apps/{appid}/entity-types"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
DECL|method|getEntityTypes ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String clusterId, @PathParam(R) String appId, @QueryParam(R) String flowName, @QueryParam(R) String flowRunId, @QueryParam(R) String userId)
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getEntityTypes
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"clusterid"
argument_list|)
name|String
name|clusterId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowname"
argument_list|)
name|String
name|flowName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowrunid"
argument_list|)
name|String
name|flowRunId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"userid"
argument_list|)
name|String
name|userId
parameter_list|)
block|{
name|String
name|url
init|=
name|req
operator|.
name|getRequestURI
argument_list|()
operator|+
operator|(
name|req
operator|.
name|getQueryString
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|QUERY_STRING_SEP
operator|+
name|req
operator|.
name|getQueryString
argument_list|()
operator|)
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|TimelineReaderWebServicesUtils
operator|.
name|getUser
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received URL "
operator|+
name|url
operator|+
literal|" from user "
operator|+
name|TimelineReaderWebServicesUtils
operator|.
name|getUserName
argument_list|(
name|callerUGI
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|init
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|TimelineReaderManager
name|timelineReaderManager
init|=
name|getTimelineReaderManager
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|results
init|=
literal|null
decl_stmt|;
try|try
block|{
name|results
operator|=
name|timelineReaderManager
operator|.
name|getEntityTypes
argument_list|(
name|TimelineReaderWebServicesUtils
operator|.
name|createTimelineReaderContext
argument_list|(
name|clusterId
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
name|flowRunId
argument_list|,
name|appId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|,
name|url
argument_list|,
name|startTime
argument_list|,
literal|"flowrunid"
argument_list|)
expr_stmt|;
block|}
name|long
name|endTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed URL "
operator|+
name|url
operator|+
literal|" (Took "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|" ms.)"
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
block|}
end_class

end_unit

