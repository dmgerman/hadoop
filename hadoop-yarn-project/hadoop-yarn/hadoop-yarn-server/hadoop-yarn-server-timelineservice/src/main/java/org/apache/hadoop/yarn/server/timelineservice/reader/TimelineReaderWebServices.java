begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.reader
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineAbout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntityType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|GenericObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|TimelineReader
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|timeline
operator|.
name|TimelineUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_comment
comment|/** REST end point for Timeline Reader */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
annotation|@
name|Singleton
annotation|@
name|Path
argument_list|(
literal|"/ws/v2/timeline"
argument_list|)
DECL|class|TimelineReaderWebServices
specifier|public
class|class
name|TimelineReaderWebServices
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TimelineReaderWebServices
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ctxt
annotation|@
name|Context
specifier|private
name|ServletContext
name|ctxt
decl_stmt|;
DECL|field|COMMA_DELIMITER
specifier|private
specifier|static
specifier|final
name|String
name|COMMA_DELIMITER
init|=
literal|","
decl_stmt|;
DECL|field|COLON_DELIMITER
specifier|private
specifier|static
specifier|final
name|String
name|COLON_DELIMITER
init|=
literal|":"
decl_stmt|;
DECL|field|QUERY_STRING_SEP
specifier|private
specifier|static
specifier|final
name|String
name|QUERY_STRING_SEP
init|=
literal|"?"
decl_stmt|;
DECL|method|init (HttpServletResponse response)
specifier|private
name|void
name|init
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|)
block|{
name|response
operator|.
name|setContentType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|parseValuesStr (String str, String delimiter)
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|parseValuesStr
parameter_list|(
name|String
name|str
parameter_list|,
name|String
name|delimiter
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
operator|||
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|strSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|strs
init|=
name|str
operator|.
name|split
argument_list|(
name|delimiter
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|aStr
range|:
name|strs
control|)
block|{
name|strSet
operator|.
name|add
argument_list|(
name|aStr
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|strSet
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|parseKeyValues (Map<String,T> map, String str, String pairsDelim, String keyValuesDelim, boolean stringValue, boolean multipleValues)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|parseKeyValues
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|map
parameter_list|,
name|String
name|str
parameter_list|,
name|String
name|pairsDelim
parameter_list|,
name|String
name|keyValuesDelim
parameter_list|,
name|boolean
name|stringValue
parameter_list|,
name|boolean
name|multipleValues
parameter_list|)
block|{
name|String
index|[]
name|pairs
init|=
name|str
operator|.
name|split
argument_list|(
name|pairsDelim
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pair
range|:
name|pairs
control|)
block|{
if|if
condition|(
name|pair
operator|==
literal|null
operator|||
name|pair
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|String
index|[]
name|pairStrs
init|=
name|pair
operator|.
name|split
argument_list|(
name|keyValuesDelim
argument_list|)
decl_stmt|;
if|if
condition|(
name|pairStrs
operator|.
name|length
operator|<
literal|2
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|stringValue
condition|)
block|{
try|try
block|{
name|Object
name|value
init|=
name|GenericObjectMapper
operator|.
name|OBJECT_READER
operator|.
name|readValue
argument_list|(
name|pairStrs
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|pairStrs
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
argument_list|,
operator|(
name|T
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|map
operator|.
name|put
argument_list|(
name|pairStrs
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
argument_list|,
operator|(
name|T
operator|)
name|pairStrs
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|key
init|=
name|pairStrs
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|multipleValues
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pairStrs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|pairStrs
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|(
name|T
operator|)
name|values
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|(
name|T
operator|)
name|pairStrs
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|parseKeyStrValuesStr (String str, String pairsDelim, String keyValuesDelim)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|parseKeyStrValuesStr
parameter_list|(
name|String
name|str
parameter_list|,
name|String
name|pairsDelim
parameter_list|,
name|String
name|keyValuesDelim
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|parseKeyValues
argument_list|(
name|map
argument_list|,
name|str
argument_list|,
name|pairsDelim
argument_list|,
name|keyValuesDelim
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
DECL|method|parseKeyStrValueStr (String str, String pairsDelim, String keyValDelim)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parseKeyStrValueStr
parameter_list|(
name|String
name|str
parameter_list|,
name|String
name|pairsDelim
parameter_list|,
name|String
name|keyValDelim
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|parseKeyValues
argument_list|(
name|map
argument_list|,
name|str
argument_list|,
name|pairsDelim
argument_list|,
name|keyValDelim
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
DECL|method|parseKeyStrValueObj (String str, String pairsDelim, String keyValDelim)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parseKeyStrValueObj
parameter_list|(
name|String
name|str
parameter_list|,
name|String
name|pairsDelim
parameter_list|,
name|String
name|keyValDelim
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|parseKeyValues
argument_list|(
name|map
argument_list|,
name|str
argument_list|,
name|pairsDelim
argument_list|,
name|keyValDelim
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
DECL|method|parseFieldsStr (String str, String delimiter)
specifier|private
specifier|static
name|EnumSet
argument_list|<
name|Field
argument_list|>
name|parseFieldsStr
parameter_list|(
name|String
name|str
parameter_list|,
name|String
name|delimiter
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
index|[]
name|strs
init|=
name|str
operator|.
name|split
argument_list|(
name|delimiter
argument_list|)
decl_stmt|;
name|EnumSet
argument_list|<
name|Field
argument_list|>
name|fieldList
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Field
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|strs
control|)
block|{
name|fieldList
operator|.
name|add
argument_list|(
name|Field
operator|.
name|valueOf
argument_list|(
name|s
operator|.
name|trim
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|fieldList
return|;
block|}
DECL|method|parseLongStr (String str)
specifier|private
specifier|static
name|Long
name|parseLongStr
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|str
operator|==
literal|null
condition|?
literal|null
else|:
name|Long
operator|.
name|parseLong
argument_list|(
name|str
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
DECL|method|parseStr (String str)
specifier|private
specifier|static
name|String
name|parseStr
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|str
operator|==
literal|null
condition|?
literal|null
else|:
name|str
operator|.
name|trim
argument_list|()
return|;
block|}
DECL|method|parseUser (UserGroupInformation callerUGI, String user)
specifier|private
specifier|static
name|String
name|parseUser
parameter_list|(
name|UserGroupInformation
name|callerUGI
parameter_list|,
name|String
name|user
parameter_list|)
block|{
return|return
operator|(
name|callerUGI
operator|!=
literal|null
operator|&&
operator|(
name|user
operator|==
literal|null
operator|||
name|user
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|callerUGI
operator|.
name|getUserName
argument_list|()
operator|.
name|trim
argument_list|()
else|:
name|parseStr
argument_list|(
name|user
argument_list|)
operator|)
return|;
block|}
DECL|method|getUser (HttpServletRequest req)
specifier|private
specifier|static
name|UserGroupInformation
name|getUser
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
name|String
name|remoteUser
init|=
name|req
operator|.
name|getRemoteUser
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|remoteUser
operator|!=
literal|null
condition|)
block|{
name|callerUGI
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|remoteUser
argument_list|)
expr_stmt|;
block|}
return|return
name|callerUGI
return|;
block|}
DECL|method|getUserName (UserGroupInformation callerUGI)
specifier|private
specifier|static
name|String
name|getUserName
parameter_list|(
name|UserGroupInformation
name|callerUGI
parameter_list|)
block|{
return|return
operator|(
operator|(
name|callerUGI
operator|!=
literal|null
operator|)
condition|?
name|callerUGI
operator|.
name|getUserName
argument_list|()
operator|.
name|trim
argument_list|()
else|:
literal|""
operator|)
return|;
block|}
DECL|method|getTimelineReaderManager ()
specifier|private
name|TimelineReaderManager
name|getTimelineReaderManager
parameter_list|()
block|{
return|return
operator|(
name|TimelineReaderManager
operator|)
name|ctxt
operator|.
name|getAttribute
argument_list|(
name|TimelineReaderServer
operator|.
name|TIMELINE_READER_MANAGER_ATTR
argument_list|)
return|;
block|}
DECL|method|handleException (Exception e, String url, long startTime, String invalidNumMsg)
specifier|private
specifier|static
name|void
name|handleException
parameter_list|(
name|Exception
name|e
parameter_list|,
name|String
name|url
parameter_list|,
name|long
name|startTime
parameter_list|,
name|String
name|invalidNumMsg
parameter_list|)
throws|throws
name|BadRequestException
throws|,
name|WebApplicationException
block|{
name|long
name|endTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed URL "
operator|+
name|url
operator|+
literal|" but encountered exception (Took "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|" ms.)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|NumberFormatException
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|invalidNumMsg
operator|+
literal|" is not a numeric value."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|IllegalArgumentException
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Requested Invalid Field."
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while processing REST request"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
block|}
comment|/**    * Return the description of the timeline reader web services.    */
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
DECL|method|about ( @ontext HttpServletRequest req, @Context HttpServletResponse res)
specifier|public
name|TimelineAbout
name|about
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|)
block|{
name|init
argument_list|(
name|res
argument_list|)
expr_stmt|;
return|return
name|TimelineUtils
operator|.
name|createTimelineAbout
argument_list|(
literal|"Timeline Reader API"
argument_list|)
return|;
block|}
comment|/**    * Return a set of entities that match the given parameters. Cluster ID is not    * provided by client so default cluster ID has to be taken.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/entities/{appid}/{entitytype}/"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
DECL|method|getEntities ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String appId, @PathParam(R) String entityType, @QueryParam(R) String userId, @QueryParam(R) String flowId, @QueryParam(R) String flowRunId, @QueryParam(R) String limit, @QueryParam(R) String createdTimeStart, @QueryParam(R) String createdTimeEnd, @QueryParam(R) String modifiedTimeStart, @QueryParam(R) String modifiedTimeEnd, @QueryParam(R) String relatesTo, @QueryParam(R) String isRelatedTo, @QueryParam(R) String infofilters, @QueryParam(R) String conffilters, @QueryParam(R) String metricfilters, @QueryParam(R) String eventfilters, @QueryParam(R) String fields)
specifier|public
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|getEntities
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"entitytype"
argument_list|)
name|String
name|entityType
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"userid"
argument_list|)
name|String
name|userId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowid"
argument_list|)
name|String
name|flowId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowrunid"
argument_list|)
name|String
name|flowRunId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"limit"
argument_list|)
name|String
name|limit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimestart"
argument_list|)
name|String
name|createdTimeStart
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimeend"
argument_list|)
name|String
name|createdTimeEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"modifiedtimestart"
argument_list|)
name|String
name|modifiedTimeStart
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"modifiedtimeend"
argument_list|)
name|String
name|modifiedTimeEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"relatesto"
argument_list|)
name|String
name|relatesTo
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"isrelatedto"
argument_list|)
name|String
name|isRelatedTo
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"infofilters"
argument_list|)
name|String
name|infofilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"conffilters"
argument_list|)
name|String
name|conffilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricfilters"
argument_list|)
name|String
name|metricfilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"eventfilters"
argument_list|)
name|String
name|eventfilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|)
block|{
return|return
name|getEntities
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
literal|null
argument_list|,
name|appId
argument_list|,
name|entityType
argument_list|,
name|userId
argument_list|,
name|flowId
argument_list|,
name|flowRunId
argument_list|,
name|limit
argument_list|,
name|createdTimeStart
argument_list|,
name|createdTimeEnd
argument_list|,
name|modifiedTimeStart
argument_list|,
name|modifiedTimeEnd
argument_list|,
name|relatesTo
argument_list|,
name|isRelatedTo
argument_list|,
name|infofilters
argument_list|,
name|conffilters
argument_list|,
name|metricfilters
argument_list|,
name|eventfilters
argument_list|,
name|fields
argument_list|)
return|;
block|}
comment|/**    * Return a set of entities that match the given parameters.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/entities/{clusterid}/{appid}/{entitytype}/"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
DECL|method|getEntities ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String clusterId, @PathParam(R) String appId, @PathParam(R) String entityType, @QueryParam(R) String userId, @QueryParam(R) String flowId, @QueryParam(R) String flowRunId, @QueryParam(R) String limit, @QueryParam(R) String createdTimeStart, @QueryParam(R) String createdTimeEnd, @QueryParam(R) String modifiedTimeStart, @QueryParam(R) String modifiedTimeEnd, @QueryParam(R) String relatesTo, @QueryParam(R) String isRelatedTo, @QueryParam(R) String infofilters, @QueryParam(R) String conffilters, @QueryParam(R) String metricfilters, @QueryParam(R) String eventfilters, @QueryParam(R) String fields)
specifier|public
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|getEntities
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"clusterid"
argument_list|)
name|String
name|clusterId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"entitytype"
argument_list|)
name|String
name|entityType
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"userid"
argument_list|)
name|String
name|userId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowid"
argument_list|)
name|String
name|flowId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowrunid"
argument_list|)
name|String
name|flowRunId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"limit"
argument_list|)
name|String
name|limit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimestart"
argument_list|)
name|String
name|createdTimeStart
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"createdtimeend"
argument_list|)
name|String
name|createdTimeEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"modifiedtimestart"
argument_list|)
name|String
name|modifiedTimeStart
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"modifiedtimeend"
argument_list|)
name|String
name|modifiedTimeEnd
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"relatesto"
argument_list|)
name|String
name|relatesTo
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"isrelatedto"
argument_list|)
name|String
name|isRelatedTo
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"infofilters"
argument_list|)
name|String
name|infofilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"conffilters"
argument_list|)
name|String
name|conffilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"metricfilters"
argument_list|)
name|String
name|metricfilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"eventfilters"
argument_list|)
name|String
name|eventfilters
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|)
block|{
name|String
name|url
init|=
name|req
operator|.
name|getRequestURI
argument_list|()
operator|+
operator|(
literal|null
operator|==
name|req
operator|.
name|getQueryString
argument_list|()
condition|?
literal|""
else|:
name|QUERY_STRING_SEP
operator|+
name|req
operator|.
name|getQueryString
argument_list|()
operator|)
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|getUser
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received URL "
operator|+
name|url
operator|+
literal|" from user "
operator|+
name|getUserName
argument_list|(
name|callerUGI
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|init
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|TimelineReaderManager
name|timelineReaderManager
init|=
name|getTimelineReaderManager
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|entities
init|=
literal|null
decl_stmt|;
try|try
block|{
name|entities
operator|=
name|timelineReaderManager
operator|.
name|getEntities
argument_list|(
name|parseUser
argument_list|(
name|callerUGI
argument_list|,
name|userId
argument_list|)
argument_list|,
name|parseStr
argument_list|(
name|clusterId
argument_list|)
argument_list|,
name|parseStr
argument_list|(
name|flowId
argument_list|)
argument_list|,
name|parseLongStr
argument_list|(
name|flowRunId
argument_list|)
argument_list|,
name|parseStr
argument_list|(
name|appId
argument_list|)
argument_list|,
name|parseStr
argument_list|(
name|entityType
argument_list|)
argument_list|,
name|parseLongStr
argument_list|(
name|limit
argument_list|)
argument_list|,
name|parseLongStr
argument_list|(
name|createdTimeStart
argument_list|)
argument_list|,
name|parseLongStr
argument_list|(
name|createdTimeEnd
argument_list|)
argument_list|,
name|parseLongStr
argument_list|(
name|modifiedTimeStart
argument_list|)
argument_list|,
name|parseLongStr
argument_list|(
name|modifiedTimeEnd
argument_list|)
argument_list|,
name|parseKeyStrValuesStr
argument_list|(
name|relatesTo
argument_list|,
name|COMMA_DELIMITER
argument_list|,
name|COLON_DELIMITER
argument_list|)
argument_list|,
name|parseKeyStrValuesStr
argument_list|(
name|isRelatedTo
argument_list|,
name|COMMA_DELIMITER
argument_list|,
name|COLON_DELIMITER
argument_list|)
argument_list|,
name|parseKeyStrValueObj
argument_list|(
name|infofilters
argument_list|,
name|COMMA_DELIMITER
argument_list|,
name|COLON_DELIMITER
argument_list|)
argument_list|,
name|parseKeyStrValueStr
argument_list|(
name|conffilters
argument_list|,
name|COMMA_DELIMITER
argument_list|,
name|COLON_DELIMITER
argument_list|)
argument_list|,
name|parseValuesStr
argument_list|(
name|metricfilters
argument_list|,
name|COMMA_DELIMITER
argument_list|)
argument_list|,
name|parseValuesStr
argument_list|(
name|eventfilters
argument_list|,
name|COMMA_DELIMITER
argument_list|)
argument_list|,
name|parseFieldsStr
argument_list|(
name|fields
argument_list|,
name|COMMA_DELIMITER
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|,
name|url
argument_list|,
name|startTime
argument_list|,
literal|"createdTime or modifiedTime start/end or limit or flowId"
argument_list|)
expr_stmt|;
block|}
name|long
name|endTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
if|if
condition|(
name|entities
operator|==
literal|null
condition|)
block|{
name|entities
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed URL "
operator|+
name|url
operator|+
literal|" (Took "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|" ms.)"
argument_list|)
expr_stmt|;
return|return
name|entities
return|;
block|}
comment|/**    * Return a single entity of the given entity type and Id. Cluster ID is not    * provided by client so default cluster ID has to be taken.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/entity/{appid}/{entitytype}/{entityid}/"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
DECL|method|getEntity ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String appId, @PathParam(R) String entityType, @PathParam(R) String entityId, @QueryParam(R) String userId, @QueryParam(R) String flowId, @QueryParam(R) String flowRunId, @QueryParam(R) String fields)
specifier|public
name|TimelineEntity
name|getEntity
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"entitytype"
argument_list|)
name|String
name|entityType
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"entityid"
argument_list|)
name|String
name|entityId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"userid"
argument_list|)
name|String
name|userId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowid"
argument_list|)
name|String
name|flowId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowrunid"
argument_list|)
name|String
name|flowRunId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|)
block|{
return|return
name|getEntity
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
literal|null
argument_list|,
name|appId
argument_list|,
name|entityType
argument_list|,
name|entityId
argument_list|,
name|userId
argument_list|,
name|flowId
argument_list|,
name|flowRunId
argument_list|,
name|fields
argument_list|)
return|;
block|}
comment|/**    * Return a single entity of the given entity type and Id.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/entity/{clusterid}/{appid}/{entitytype}/{entityid}/"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
DECL|method|getEntity ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String clusterId, @PathParam(R) String appId, @PathParam(R) String entityType, @PathParam(R) String entityId, @QueryParam(R) String userId, @QueryParam(R) String flowId, @QueryParam(R) String flowRunId, @QueryParam(R) String fields)
specifier|public
name|TimelineEntity
name|getEntity
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"clusterid"
argument_list|)
name|String
name|clusterId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"appid"
argument_list|)
name|String
name|appId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"entitytype"
argument_list|)
name|String
name|entityType
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"entityid"
argument_list|)
name|String
name|entityId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"userid"
argument_list|)
name|String
name|userId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowid"
argument_list|)
name|String
name|flowId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"flowrunid"
argument_list|)
name|String
name|flowRunId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|)
block|{
name|String
name|url
init|=
name|req
operator|.
name|getRequestURI
argument_list|()
operator|+
operator|(
literal|null
operator|==
name|req
operator|.
name|getQueryString
argument_list|()
condition|?
literal|""
else|:
name|QUERY_STRING_SEP
operator|+
name|req
operator|.
name|getQueryString
argument_list|()
operator|)
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|getUser
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received URL "
operator|+
name|url
operator|+
literal|" from user "
operator|+
name|getUserName
argument_list|(
name|callerUGI
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|init
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|TimelineReaderManager
name|timelineReaderManager
init|=
name|getTimelineReaderManager
argument_list|()
decl_stmt|;
name|TimelineEntity
name|entity
init|=
literal|null
decl_stmt|;
try|try
block|{
name|entity
operator|=
name|timelineReaderManager
operator|.
name|getEntity
argument_list|(
name|parseUser
argument_list|(
name|callerUGI
argument_list|,
name|userId
argument_list|)
argument_list|,
name|parseStr
argument_list|(
name|clusterId
argument_list|)
argument_list|,
name|parseStr
argument_list|(
name|flowId
argument_list|)
argument_list|,
name|parseLongStr
argument_list|(
name|flowRunId
argument_list|)
argument_list|,
name|parseStr
argument_list|(
name|appId
argument_list|)
argument_list|,
name|parseStr
argument_list|(
name|entityType
argument_list|)
argument_list|,
name|parseStr
argument_list|(
name|entityId
argument_list|)
argument_list|,
name|parseFieldsStr
argument_list|(
name|fields
argument_list|,
name|COMMA_DELIMITER
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|,
name|url
argument_list|,
name|startTime
argument_list|,
literal|"flowrunid"
argument_list|)
expr_stmt|;
block|}
name|long
name|endTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed URL "
operator|+
name|url
operator|+
literal|" but entity not found"
operator|+
literal|" (Took "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|" ms.)"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Timeline entity {id: "
operator|+
name|parseStr
argument_list|(
name|entityId
argument_list|)
operator|+
literal|", type: "
operator|+
name|parseStr
argument_list|(
name|entityType
argument_list|)
operator|+
literal|" } is not found"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed URL "
operator|+
name|url
operator|+
literal|" (Took "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|" ms.)"
argument_list|)
expr_stmt|;
return|return
name|entity
return|;
block|}
comment|/**    * Return a single flow run for the given cluster, flow id and run id.    * Cluster ID is not provided by client so default cluster ID has to be taken.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/flowrun/{flowid}/{flowrunid}/"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
DECL|method|getFlowRun ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String flowId, @PathParam(R) String flowRunId, @QueryParam(R) String userId, @QueryParam(R) String fields)
specifier|public
name|TimelineEntity
name|getFlowRun
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"flowid"
argument_list|)
name|String
name|flowId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"flowrunid"
argument_list|)
name|String
name|flowRunId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"userid"
argument_list|)
name|String
name|userId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|)
block|{
return|return
name|getFlowRun
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
literal|null
argument_list|,
name|flowId
argument_list|,
name|flowRunId
argument_list|,
name|userId
argument_list|,
name|fields
argument_list|)
return|;
block|}
comment|/**    * Return a single flow run for the given cluster, flow id and run id.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/flowrun/{clusterid}/{flowid}/{flowrunid}/"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
DECL|method|getFlowRun ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String clusterId, @PathParam(R) String flowId, @PathParam(R) String flowRunId, @QueryParam(R) String userId, @QueryParam(R) String fields)
specifier|public
name|TimelineEntity
name|getFlowRun
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"clusterid"
argument_list|)
name|String
name|clusterId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"flowid"
argument_list|)
name|String
name|flowId
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"flowrunid"
argument_list|)
name|String
name|flowRunId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"userid"
argument_list|)
name|String
name|userId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|)
block|{
name|String
name|url
init|=
name|req
operator|.
name|getRequestURI
argument_list|()
operator|+
operator|(
literal|null
operator|==
name|req
operator|.
name|getQueryString
argument_list|()
condition|?
literal|""
else|:
name|QUERY_STRING_SEP
operator|+
name|req
operator|.
name|getQueryString
argument_list|()
operator|)
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|getUser
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received URL "
operator|+
name|url
operator|+
literal|" from user "
operator|+
name|getUserName
argument_list|(
name|callerUGI
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|init
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|TimelineReaderManager
name|timelineReaderManager
init|=
name|getTimelineReaderManager
argument_list|()
decl_stmt|;
name|TimelineEntity
name|entity
init|=
literal|null
decl_stmt|;
try|try
block|{
name|entity
operator|=
name|timelineReaderManager
operator|.
name|getEntity
argument_list|(
name|parseUser
argument_list|(
name|callerUGI
argument_list|,
name|userId
argument_list|)
argument_list|,
name|parseStr
argument_list|(
name|clusterId
argument_list|)
argument_list|,
name|parseStr
argument_list|(
name|flowId
argument_list|)
argument_list|,
name|parseLongStr
argument_list|(
name|flowRunId
argument_list|)
argument_list|,
literal|null
argument_list|,
name|TimelineEntityType
operator|.
name|YARN_FLOW_RUN
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|,
name|parseFieldsStr
argument_list|(
name|fields
argument_list|,
name|COMMA_DELIMITER
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|,
name|url
argument_list|,
name|startTime
argument_list|,
literal|"flowrunid"
argument_list|)
expr_stmt|;
block|}
name|long
name|endTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed URL "
operator|+
name|url
operator|+
literal|" but flowrun not found (Took "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|" ms.)"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Flow run {flow id: "
operator|+
name|parseStr
argument_list|(
name|flowId
argument_list|)
operator|+
literal|", run id: "
operator|+
name|parseLongStr
argument_list|(
name|flowRunId
argument_list|)
operator|+
literal|" } is not found"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed URL "
operator|+
name|url
operator|+
literal|" (Took "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|" ms.)"
argument_list|)
expr_stmt|;
return|return
name|entity
return|;
block|}
comment|/**    * Return a list of flows for a given cluster id. Cluster ID is not    * provided by client so default cluster ID has to be taken.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/flows/"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
DECL|method|getFlows ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @QueryParam(R) String limit, @QueryParam(R) String fields)
specifier|public
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|getFlows
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"limit"
argument_list|)
name|String
name|limit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|)
block|{
return|return
name|getFlows
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
literal|null
argument_list|,
name|limit
argument_list|,
name|fields
argument_list|)
return|;
block|}
comment|/**    * Return a list of flows for a given cluster id.    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/flows/{clusterid}/"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
DECL|method|getFlows ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(R) String clusterId, @QueryParam(R) String limit, @QueryParam(R) String fields)
specifier|public
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|getFlows
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"clusterid"
argument_list|)
name|String
name|clusterId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"limit"
argument_list|)
name|String
name|limit
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"fields"
argument_list|)
name|String
name|fields
parameter_list|)
block|{
name|String
name|url
init|=
name|req
operator|.
name|getRequestURI
argument_list|()
operator|+
operator|(
literal|null
operator|==
name|req
operator|.
name|getQueryString
argument_list|()
condition|?
literal|""
else|:
name|QUERY_STRING_SEP
operator|+
name|req
operator|.
name|getQueryString
argument_list|()
operator|)
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|getUser
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received URL "
operator|+
name|url
operator|+
literal|" from user "
operator|+
name|getUserName
argument_list|(
name|callerUGI
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|init
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|TimelineReaderManager
name|timelineReaderManager
init|=
name|getTimelineReaderManager
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TimelineEntity
argument_list|>
name|entities
init|=
literal|null
decl_stmt|;
try|try
block|{
name|entities
operator|=
name|timelineReaderManager
operator|.
name|getEntities
argument_list|(
literal|null
argument_list|,
name|parseStr
argument_list|(
name|clusterId
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TimelineEntityType
operator|.
name|YARN_FLOW_ACTIVITY
operator|.
name|toString
argument_list|()
argument_list|,
name|parseLongStr
argument_list|(
name|limit
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|parseFieldsStr
argument_list|(
name|fields
argument_list|,
name|COMMA_DELIMITER
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|,
name|url
argument_list|,
name|startTime
argument_list|,
literal|"limit"
argument_list|)
expr_stmt|;
block|}
name|long
name|endTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
if|if
condition|(
name|entities
operator|==
literal|null
condition|)
block|{
name|entities
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed URL "
operator|+
name|url
operator|+
literal|" (Took "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|" ms.)"
argument_list|)
expr_stmt|;
return|return
name|entities
return|;
block|}
block|}
end_class

end_unit

