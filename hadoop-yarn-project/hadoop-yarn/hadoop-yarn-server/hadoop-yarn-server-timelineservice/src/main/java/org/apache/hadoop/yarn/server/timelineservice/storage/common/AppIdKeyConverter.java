begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_comment
comment|/**  * Encodes and decodes {@link ApplicationId} for row keys.  * App ID is stored in row key as 12 bytes, cluster timestamp section of app id  * (long - 8 bytes) followed by sequence id section of app id (int - 4 bytes).  */
end_comment

begin_class
DECL|class|AppIdKeyConverter
specifier|public
specifier|final
class|class
name|AppIdKeyConverter
implements|implements
name|KeyConverter
argument_list|<
name|String
argument_list|>
block|{
DECL|method|AppIdKeyConverter ()
specifier|public
name|AppIdKeyConverter
parameter_list|()
block|{   }
comment|/*    * (non-Javadoc)    *    * Converts/encodes a string app Id into a byte representation for (row) keys.    * For conversion, we extract cluster timestamp and sequence id from the    * string app id (calls ConverterUtils#toApplicationId(String) for    * conversion) and then store it in a byte array of length 12 (8 bytes (long)    * for cluster timestamp followed 4 bytes(int) for sequence id). Both cluster    * timestamp and sequence id are inverted so that the most recent cluster    * timestamp and highest sequence id appears first in the table (i.e.    * application id appears in a descending order).    *    * @see    * org.apache.hadoop.yarn.server.timelineservice.storage.common.KeyConverter    * #encode(java.lang.Object)    */
annotation|@
name|Override
DECL|method|encode (String appIdStr)
specifier|public
name|byte
index|[]
name|encode
parameter_list|(
name|String
name|appIdStr
parameter_list|)
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|appIdStr
argument_list|)
decl_stmt|;
name|byte
index|[]
name|appIdBytes
init|=
operator|new
name|byte
index|[
name|getKeySize
argument_list|()
index|]
decl_stmt|;
name|byte
index|[]
name|clusterTs
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|LongConverter
operator|.
name|invertLong
argument_list|(
name|appId
operator|.
name|getClusterTimestamp
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|clusterTs
argument_list|,
literal|0
argument_list|,
name|appIdBytes
argument_list|,
literal|0
argument_list|,
name|Bytes
operator|.
name|SIZEOF_LONG
argument_list|)
expr_stmt|;
name|byte
index|[]
name|seqId
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|HBaseTimelineStorageUtils
operator|.
name|invertInt
argument_list|(
name|appId
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|seqId
argument_list|,
literal|0
argument_list|,
name|appIdBytes
argument_list|,
name|Bytes
operator|.
name|SIZEOF_LONG
argument_list|,
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|)
expr_stmt|;
return|return
name|appIdBytes
return|;
block|}
comment|/*    * (non-Javadoc)    *    * Converts/decodes a 12 byte representation of app id for (row) keys to an    * app id in string format which can be returned back to client.    * For decoding, 12 bytes are interpreted as 8 bytes of inverted cluster    * timestamp(long) followed by 4 bytes of inverted sequence id(int). Calls    * ApplicationId#toString to generate string representation of app id.    *    * @see    * org.apache.hadoop.yarn.server.timelineservice.storage.common.KeyConverter    * #decode(byte[])    */
annotation|@
name|Override
DECL|method|decode (byte[] appIdBytes)
specifier|public
name|String
name|decode
parameter_list|(
name|byte
index|[]
name|appIdBytes
parameter_list|)
block|{
if|if
condition|(
name|appIdBytes
operator|.
name|length
operator|!=
name|getKeySize
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid app id in byte format"
argument_list|)
throw|;
block|}
name|long
name|clusterTs
init|=
name|LongConverter
operator|.
name|invertLong
argument_list|(
name|Bytes
operator|.
name|toLong
argument_list|(
name|appIdBytes
argument_list|,
literal|0
argument_list|,
name|Bytes
operator|.
name|SIZEOF_LONG
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|seqId
init|=
name|HBaseTimelineStorageUtils
operator|.
name|invertInt
argument_list|(
name|Bytes
operator|.
name|toInt
argument_list|(
name|appIdBytes
argument_list|,
name|Bytes
operator|.
name|SIZEOF_LONG
argument_list|,
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|clusterTs
argument_list|,
name|seqId
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Returns the size of app id after encoding.    *    * @return size of app id after encoding.    */
DECL|method|getKeySize ()
specifier|public
specifier|static
name|int
name|getKeySize
parameter_list|()
block|{
return|return
name|Bytes
operator|.
name|SIZEOF_LONG
operator|+
name|Bytes
operator|.
name|SIZEOF_INT
return|;
block|}
block|}
end_class

end_unit

