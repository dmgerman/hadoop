begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * contains the constants used in the context of schema accesses for  * {@link org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity}  * information  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|TimelineHBaseSchemaConstants
specifier|public
class|class
name|TimelineHBaseSchemaConstants
block|{
comment|/**    * Used to create a pre-split for tables starting with a username in the    * prefix. TODO: this may have to become a config variable (string with    * separators) so that different installations can presplit based on their own    * commonly occurring names.    */
DECL|field|USERNAME_SPLITS
specifier|private
specifier|final
specifier|static
name|byte
index|[]
index|[]
name|USERNAME_SPLITS
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ad"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"an"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ca"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cl"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"e"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"g"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"h"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"i"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"j"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"k"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"l"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"m"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"n"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"o"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"s"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"se"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"t"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"u"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"w"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"x"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"y"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"z"
argument_list|)
block|}
decl_stmt|;
comment|/**    * The length at which keys auto-split    */
DECL|field|USERNAME_SPLIT_KEY_PREFIX_LENGTH
specifier|public
specifier|static
specifier|final
name|String
name|USERNAME_SPLIT_KEY_PREFIX_LENGTH
init|=
literal|"4"
decl_stmt|;
comment|/**    * @return splits for splits where a user is a prefix.    */
DECL|method|getUsernameSplits ()
specifier|public
specifier|final
specifier|static
name|byte
index|[]
index|[]
name|getUsernameSplits
parameter_list|()
block|{
name|byte
index|[]
index|[]
name|kloon
init|=
name|USERNAME_SPLITS
operator|.
name|clone
argument_list|()
decl_stmt|;
comment|// Deep copy.
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|USERNAME_SPLITS
operator|.
name|length
condition|;
name|row
operator|++
control|)
block|{
name|kloon
index|[
name|row
index|]
operator|=
name|Bytes
operator|.
name|copy
argument_list|(
name|USERNAME_SPLITS
index|[
name|row
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|kloon
return|;
block|}
block|}
end_class

end_unit

