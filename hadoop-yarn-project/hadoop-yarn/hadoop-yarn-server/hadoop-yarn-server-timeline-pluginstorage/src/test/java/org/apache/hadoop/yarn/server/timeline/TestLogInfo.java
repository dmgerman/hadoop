begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timeline
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContextTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|util
operator|.
name|MinimalPrettyPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestLogInfo
specifier|public
class|class
name|TestLogInfo
block|{
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_ROOT_DIR
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|)
argument_list|,
name|TestLogInfo
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|TEST_ATTEMPT_DIR_NAME
specifier|private
specifier|static
specifier|final
name|String
name|TEST_ATTEMPT_DIR_NAME
init|=
literal|"test_app"
decl_stmt|;
DECL|field|TEST_ENTITY_FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|TEST_ENTITY_FILE_NAME
init|=
literal|"test_entity"
decl_stmt|;
DECL|field|TEST_DOMAIN_FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DOMAIN_FILE_NAME
init|=
literal|"test_domain"
decl_stmt|;
DECL|field|TEST_BROKEN_FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|TEST_BROKEN_FILE_NAME
init|=
literal|"test_broken"
decl_stmt|;
DECL|field|config
specifier|private
name|Configuration
name|config
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
DECL|field|hdfsCluster
specifier|private
name|MiniDFSCluster
name|hdfsCluster
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|fc
specifier|private
name|FileContext
name|fc
decl_stmt|;
DECL|field|fileContextTestHelper
specifier|private
name|FileContextTestHelper
name|fileContextTestHelper
init|=
operator|new
name|FileContextTestHelper
argument_list|(
literal|"/tmp/TestLogInfo"
argument_list|)
decl_stmt|;
DECL|field|objMapper
specifier|private
name|ObjectMapper
name|objMapper
decl_stmt|;
DECL|field|jsonFactory
specifier|private
name|JsonFactory
name|jsonFactory
init|=
operator|new
name|JsonFactory
argument_list|()
decl_stmt|;
DECL|field|jsonGenerator
specifier|private
name|JsonGenerator
name|jsonGenerator
decl_stmt|;
DECL|field|outStream
specifier|private
name|FSDataOutputStream
name|outStream
init|=
literal|null
decl_stmt|;
DECL|field|outStreamDomain
specifier|private
name|FSDataOutputStream
name|outStreamDomain
init|=
literal|null
decl_stmt|;
DECL|field|testDomain
specifier|private
name|TimelineDomain
name|testDomain
decl_stmt|;
DECL|field|FILE_LOG_DIR_PERMISSIONS
specifier|private
specifier|static
specifier|final
name|short
name|FILE_LOG_DIR_PERMISSIONS
init|=
literal|0770
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|config
operator|.
name|set
argument_list|(
name|MiniDFSCluster
operator|.
name|HDFS_MINIDFS_BASEDIR
argument_list|,
name|TEST_ROOT_DIR
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HdfsConfiguration
name|hdfsConfig
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|hdfsCluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|hdfsConfig
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
name|hdfsCluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|fc
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|hdfsCluster
operator|.
name|getURI
argument_list|(
literal|0
argument_list|)
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|Path
name|testAppDirPath
init|=
name|getTestRootPath
argument_list|(
name|TEST_ATTEMPT_DIR_NAME
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|testAppDirPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FILE_LOG_DIR_PERMISSIONS
argument_list|)
argument_list|)
expr_stmt|;
name|objMapper
operator|=
name|PluginStoreTestUtils
operator|.
name|createObjectMapper
argument_list|()
expr_stmt|;
name|TimelineEntities
name|testEntities
init|=
name|PluginStoreTestUtils
operator|.
name|generateTestEntities
argument_list|()
decl_stmt|;
name|writeEntitiesLeaveOpen
argument_list|(
name|testEntities
argument_list|,
operator|new
name|Path
argument_list|(
name|testAppDirPath
argument_list|,
name|TEST_ENTITY_FILE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|testDomain
operator|=
operator|new
name|TimelineDomain
argument_list|()
expr_stmt|;
name|testDomain
operator|.
name|setId
argument_list|(
literal|"domain_1"
argument_list|)
expr_stmt|;
name|testDomain
operator|.
name|setReaders
argument_list|(
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|testDomain
operator|.
name|setOwner
argument_list|(
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|testDomain
operator|.
name|setDescription
argument_list|(
literal|"description"
argument_list|)
expr_stmt|;
name|writeDomainLeaveOpen
argument_list|(
name|testDomain
argument_list|,
operator|new
name|Path
argument_list|(
name|testAppDirPath
argument_list|,
name|TEST_DOMAIN_FILE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|writeBrokenFile
argument_list|(
operator|new
name|Path
argument_list|(
name|testAppDirPath
argument_list|,
name|TEST_BROKEN_FILE_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|jsonGenerator
operator|.
name|close
argument_list|()
expr_stmt|;
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|outStreamDomain
operator|.
name|close
argument_list|()
expr_stmt|;
name|hdfsCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMatchesGroupId ()
specifier|public
name|void
name|testMatchesGroupId
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testGroupId
init|=
literal|"app1_group1"
decl_stmt|;
comment|// Match
name|EntityLogInfo
name|testLogInfo
init|=
operator|new
name|EntityLogInfo
argument_list|(
name|TEST_ATTEMPT_DIR_NAME
argument_list|,
literal|"app1_group1"
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|testLogInfo
operator|.
name|matchesGroupId
argument_list|(
name|testGroupId
argument_list|)
argument_list|)
expr_stmt|;
name|testLogInfo
operator|=
operator|new
name|EntityLogInfo
argument_list|(
name|TEST_ATTEMPT_DIR_NAME
argument_list|,
literal|"test_app1_group1"
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testLogInfo
operator|.
name|matchesGroupId
argument_list|(
name|testGroupId
argument_list|)
argument_list|)
expr_stmt|;
comment|// Unmatch
name|testLogInfo
operator|=
operator|new
name|EntityLogInfo
argument_list|(
name|TEST_ATTEMPT_DIR_NAME
argument_list|,
literal|"app2_group1"
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testLogInfo
operator|.
name|matchesGroupId
argument_list|(
name|testGroupId
argument_list|)
argument_list|)
expr_stmt|;
name|testLogInfo
operator|=
operator|new
name|EntityLogInfo
argument_list|(
name|TEST_ATTEMPT_DIR_NAME
argument_list|,
literal|"app1_group2"
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testLogInfo
operator|.
name|matchesGroupId
argument_list|(
name|testGroupId
argument_list|)
argument_list|)
expr_stmt|;
name|testLogInfo
operator|=
operator|new
name|EntityLogInfo
argument_list|(
name|TEST_ATTEMPT_DIR_NAME
argument_list|,
literal|"app1_group12"
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testLogInfo
operator|.
name|matchesGroupId
argument_list|(
name|testGroupId
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check delimiters
name|testLogInfo
operator|=
operator|new
name|EntityLogInfo
argument_list|(
name|TEST_ATTEMPT_DIR_NAME
argument_list|,
literal|"app1_group1_2"
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testLogInfo
operator|.
name|matchesGroupId
argument_list|(
name|testGroupId
argument_list|)
argument_list|)
expr_stmt|;
name|testLogInfo
operator|=
operator|new
name|EntityLogInfo
argument_list|(
name|TEST_ATTEMPT_DIR_NAME
argument_list|,
literal|"app1_group1.dat"
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testLogInfo
operator|.
name|matchesGroupId
argument_list|(
name|testGroupId
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check file names shorter than group id
name|testLogInfo
operator|=
operator|new
name|EntityLogInfo
argument_list|(
name|TEST_ATTEMPT_DIR_NAME
argument_list|,
literal|"app2"
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testLogInfo
operator|.
name|matchesGroupId
argument_list|(
name|testGroupId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParseEntity ()
specifier|public
name|void
name|testParseEntity
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Load test data
name|TimelineDataManager
name|tdm
init|=
name|PluginStoreTestUtils
operator|.
name|getTdmWithMemStore
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|EntityLogInfo
name|testLogInfo
init|=
operator|new
name|EntityLogInfo
argument_list|(
name|TEST_ATTEMPT_DIR_NAME
argument_list|,
name|TEST_ENTITY_FILE_NAME
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
decl_stmt|;
name|testLogInfo
operator|.
name|parseForStore
argument_list|(
name|tdm
argument_list|,
name|getTestRootPath
argument_list|()
argument_list|,
literal|true
argument_list|,
name|jsonFactory
argument_list|,
name|objMapper
argument_list|,
name|fs
argument_list|)
expr_stmt|;
comment|// Verify for the first batch
name|PluginStoreTestUtils
operator|.
name|verifyTestEntities
argument_list|(
name|tdm
argument_list|)
expr_stmt|;
comment|// Load new data
name|TimelineEntity
name|entityNew
init|=
name|PluginStoreTestUtils
operator|.
name|createEntity
argument_list|(
literal|"id_3"
argument_list|,
literal|"type_3"
argument_list|,
literal|789l
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"domain_id_1"
argument_list|)
decl_stmt|;
name|TimelineEntities
name|entityList
init|=
operator|new
name|TimelineEntities
argument_list|()
decl_stmt|;
name|entityList
operator|.
name|addEntity
argument_list|(
name|entityNew
argument_list|)
expr_stmt|;
name|writeEntitiesLeaveOpen
argument_list|(
name|entityList
argument_list|,
operator|new
name|Path
argument_list|(
name|getTestRootPath
argument_list|(
name|TEST_ATTEMPT_DIR_NAME
argument_list|)
argument_list|,
name|TEST_ENTITY_FILE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|testLogInfo
operator|.
name|parseForStore
argument_list|(
name|tdm
argument_list|,
name|getTestRootPath
argument_list|()
argument_list|,
literal|true
argument_list|,
name|jsonFactory
argument_list|,
name|objMapper
argument_list|,
name|fs
argument_list|)
expr_stmt|;
comment|// Verify the newly added data
name|TimelineEntity
name|entity3
init|=
name|tdm
operator|.
name|getEntity
argument_list|(
name|entityNew
operator|.
name|getEntityType
argument_list|()
argument_list|,
name|entityNew
operator|.
name|getEntityId
argument_list|()
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|TimelineReader
operator|.
name|Field
operator|.
name|class
argument_list|)
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|entity3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Failed to read out entity new"
argument_list|,
name|entityNew
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|entity3
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|tdm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParseBrokenEntity ()
specifier|public
name|void
name|testParseBrokenEntity
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Load test data
name|TimelineDataManager
name|tdm
init|=
name|PluginStoreTestUtils
operator|.
name|getTdmWithMemStore
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|EntityLogInfo
name|testLogInfo
init|=
operator|new
name|EntityLogInfo
argument_list|(
name|TEST_ATTEMPT_DIR_NAME
argument_list|,
name|TEST_BROKEN_FILE_NAME
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
decl_stmt|;
name|DomainLogInfo
name|domainLogInfo
init|=
operator|new
name|DomainLogInfo
argument_list|(
name|TEST_ATTEMPT_DIR_NAME
argument_list|,
name|TEST_BROKEN_FILE_NAME
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Try parse, should not fail
name|testLogInfo
operator|.
name|parseForStore
argument_list|(
name|tdm
argument_list|,
name|getTestRootPath
argument_list|()
argument_list|,
literal|true
argument_list|,
name|jsonFactory
argument_list|,
name|objMapper
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|domainLogInfo
operator|.
name|parseForStore
argument_list|(
name|tdm
argument_list|,
name|getTestRootPath
argument_list|()
argument_list|,
literal|true
argument_list|,
name|jsonFactory
argument_list|,
name|objMapper
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|tdm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParseDomain ()
specifier|public
name|void
name|testParseDomain
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Load test data
name|TimelineDataManager
name|tdm
init|=
name|PluginStoreTestUtils
operator|.
name|getTdmWithMemStore
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|DomainLogInfo
name|domainLogInfo
init|=
operator|new
name|DomainLogInfo
argument_list|(
name|TEST_ATTEMPT_DIR_NAME
argument_list|,
name|TEST_DOMAIN_FILE_NAME
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
decl_stmt|;
name|domainLogInfo
operator|.
name|parseForStore
argument_list|(
name|tdm
argument_list|,
name|getTestRootPath
argument_list|()
argument_list|,
literal|true
argument_list|,
name|jsonFactory
argument_list|,
name|objMapper
argument_list|,
name|fs
argument_list|)
expr_stmt|;
comment|// Verify domain data
name|TimelineDomain
name|resultDomain
init|=
name|tdm
operator|.
name|getDomain
argument_list|(
literal|"domain_1"
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|resultDomain
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testDomain
operator|.
name|getReaders
argument_list|()
argument_list|,
name|resultDomain
operator|.
name|getReaders
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testDomain
operator|.
name|getOwner
argument_list|()
argument_list|,
name|resultDomain
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testDomain
operator|.
name|getDescription
argument_list|()
argument_list|,
name|resultDomain
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|writeBrokenFile (Path logPath)
specifier|private
name|void
name|writeBrokenFile
parameter_list|(
name|Path
name|logPath
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|broken
init|=
literal|"{ broken { [[]} broken"
decl_stmt|;
name|out
operator|=
name|PluginStoreTestUtils
operator|.
name|createLogFile
argument_list|(
name|logPath
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|broken
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// TestLogInfo needs to maintain opened hdfs files so we have to build our own
comment|// write methods
DECL|method|writeEntitiesLeaveOpen (TimelineEntities entities, Path logPath)
specifier|private
name|void
name|writeEntitiesLeaveOpen
parameter_list|(
name|TimelineEntities
name|entities
parameter_list|,
name|Path
name|logPath
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|outStream
operator|==
literal|null
condition|)
block|{
name|outStream
operator|=
name|PluginStoreTestUtils
operator|.
name|createLogFile
argument_list|(
name|logPath
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|jsonGenerator
operator|=
operator|(
operator|new
name|JsonFactory
argument_list|()
operator|)
operator|.
name|createJsonGenerator
argument_list|(
name|outStream
argument_list|)
expr_stmt|;
name|jsonGenerator
operator|.
name|setPrettyPrinter
argument_list|(
operator|new
name|MinimalPrettyPrinter
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TimelineEntity
name|entity
range|:
name|entities
operator|.
name|getEntities
argument_list|()
control|)
block|{
name|objMapper
operator|.
name|writeValue
argument_list|(
name|jsonGenerator
argument_list|,
name|entity
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|hflush
argument_list|()
expr_stmt|;
block|}
DECL|method|writeDomainLeaveOpen (TimelineDomain domain, Path logPath)
specifier|private
name|void
name|writeDomainLeaveOpen
parameter_list|(
name|TimelineDomain
name|domain
parameter_list|,
name|Path
name|logPath
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|outStreamDomain
operator|==
literal|null
condition|)
block|{
name|outStreamDomain
operator|=
name|PluginStoreTestUtils
operator|.
name|createLogFile
argument_list|(
name|logPath
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
comment|// Write domain uses its own json generator to isolate from entity writers
name|JsonGenerator
name|jsonGeneratorLocal
init|=
operator|(
operator|new
name|JsonFactory
argument_list|()
operator|)
operator|.
name|createJsonGenerator
argument_list|(
name|outStreamDomain
argument_list|)
decl_stmt|;
name|jsonGeneratorLocal
operator|.
name|setPrettyPrinter
argument_list|(
operator|new
name|MinimalPrettyPrinter
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
name|objMapper
operator|.
name|writeValue
argument_list|(
name|jsonGeneratorLocal
argument_list|,
name|domain
argument_list|)
expr_stmt|;
name|outStreamDomain
operator|.
name|hflush
argument_list|()
expr_stmt|;
block|}
DECL|method|getTestRootPath ()
specifier|private
name|Path
name|getTestRootPath
parameter_list|()
block|{
return|return
name|fileContextTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fc
argument_list|)
return|;
block|}
DECL|method|getTestRootPath (String pathString)
specifier|private
name|Path
name|getTestRootPath
parameter_list|(
name|String
name|pathString
parameter_list|)
block|{
return|return
name|fileContextTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fc
argument_list|,
name|pathString
argument_list|)
return|;
block|}
block|}
end_class

end_unit

