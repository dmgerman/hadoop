begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timeline
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|util
operator|.
name|LeveldbUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|leveldbjni
operator|.
name|JniDBFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DBIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * LevelDB implementation of {@link KeyValueBasedTimelineStore}. This  * implementation stores the entity hash map into a LevelDB instance.  * There are two partitions of the key space. One partition is to store a  * entity id to start time mapping:  *  * i!ENTITY_ID!ENTITY_TYPE to ENTITY_START_TIME  *  * The other partition is to store the actual data:  *  * e!START_TIME!ENTITY_ID!ENTITY_TYPE to ENTITY_BYTES  *  * This storage does not have any garbage collection mechanism, and is designed  * mainly for caching usages.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|LevelDBCacheTimelineStore
specifier|public
class|class
name|LevelDBCacheTimelineStore
extends|extends
name|KeyValueBasedTimelineStore
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LevelDBCacheTimelineStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CACHED_LDB_FILE_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|CACHED_LDB_FILE_PREFIX
init|=
literal|"-timeline-cache.ldb"
decl_stmt|;
DECL|field|dbId
specifier|private
name|String
name|dbId
decl_stmt|;
DECL|field|entityDb
specifier|private
name|DB
name|entityDb
decl_stmt|;
DECL|field|configuration
specifier|private
name|Configuration
name|configuration
decl_stmt|;
DECL|method|LevelDBCacheTimelineStore (String id, String name)
specifier|public
name|LevelDBCacheTimelineStore
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|dbId
operator|=
name|id
expr_stmt|;
name|entityInsertTimes
operator|=
operator|new
name|MemoryTimelineStore
operator|.
name|HashMapStoreAdapter
argument_list|<>
argument_list|()
expr_stmt|;
name|domainById
operator|=
operator|new
name|MemoryTimelineStore
operator|.
name|HashMapStoreAdapter
argument_list|<>
argument_list|()
expr_stmt|;
name|domainsByOwner
operator|=
operator|new
name|MemoryTimelineStore
operator|.
name|HashMapStoreAdapter
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|LevelDBCacheTimelineStore (String id)
specifier|public
name|LevelDBCacheTimelineStore
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
argument_list|(
name|id
argument_list|,
name|LevelDBCacheTimelineStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
specifier|synchronized
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|configuration
operator|=
name|conf
expr_stmt|;
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|createIfMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|options
operator|.
name|cacheSize
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_LEVELDB_CACHE_READ_CACHE_SIZE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_TIMELINE_SERVICE_LEVELDB_CACHE_READ_CACHE_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|JniDBFactory
name|factory
init|=
operator|new
name|JniDBFactory
argument_list|()
decl_stmt|;
name|Path
name|dbPath
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_LEVELDB_PATH
argument_list|)
argument_list|,
name|dbId
operator|+
name|CACHED_LDB_FILE_PREFIX
argument_list|)
decl_stmt|;
name|FileSystem
name|localFS
init|=
literal|null
decl_stmt|;
try|try
block|{
name|localFS
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|localFS
operator|.
name|exists
argument_list|(
name|dbPath
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|localFS
operator|.
name|mkdirs
argument_list|(
name|dbPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't create directory for leveldb "
operator|+
literal|"timeline store "
operator|+
name|dbPath
argument_list|)
throw|;
block|}
name|localFS
operator|.
name|setPermission
argument_list|(
name|dbPath
argument_list|,
name|LeveldbUtils
operator|.
name|LEVELDB_DIR_UMASK
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|localFS
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Using leveldb path "
operator|+
name|dbPath
argument_list|)
expr_stmt|;
name|entityDb
operator|=
name|factory
operator|.
name|open
argument_list|(
operator|new
name|File
argument_list|(
name|dbPath
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|entities
operator|=
operator|new
name|LevelDBMapAdapter
argument_list|<>
argument_list|(
name|entityDb
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
specifier|synchronized
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|entityDb
argument_list|)
expr_stmt|;
name|Path
name|dbPath
init|=
operator|new
name|Path
argument_list|(
name|configuration
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_LEVELDB_PATH
argument_list|)
argument_list|,
name|dbId
operator|+
name|CACHED_LDB_FILE_PREFIX
argument_list|)
decl_stmt|;
name|FileSystem
name|localFS
init|=
literal|null
decl_stmt|;
try|try
block|{
name|localFS
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|localFS
operator|.
name|delete
argument_list|(
name|dbPath
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't delete data file for leveldb "
operator|+
literal|"timeline store "
operator|+
name|dbPath
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|localFS
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
comment|/**    * A specialized hash map storage that uses LevelDB for storing entity id to    * entity mappings.    *    * @param<K> an {@link EntityIdentifier} typed hash key    * @param<V> a {@link TimelineEntity} typed value    */
DECL|class|LevelDBMapAdapter
specifier|static
class|class
name|LevelDBMapAdapter
parameter_list|<
name|K
extends|extends
name|EntityIdentifier
parameter_list|,
name|V
extends|extends
name|TimelineEntity
parameter_list|>
implements|implements
name|TimelineStoreMapAdapter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|TIME_INDEX_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|TIME_INDEX_PREFIX
init|=
literal|"i"
decl_stmt|;
DECL|field|ENTITY_STORAGE_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|ENTITY_STORAGE_PREFIX
init|=
literal|"e"
decl_stmt|;
DECL|field|entityDb
name|DB
name|entityDb
decl_stmt|;
DECL|method|LevelDBMapAdapter (DB currLevelDb)
specifier|public
name|LevelDBMapAdapter
parameter_list|(
name|DB
name|currLevelDb
parameter_list|)
block|{
name|entityDb
operator|=
name|currLevelDb
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get (K entityId)
specifier|public
name|V
name|get
parameter_list|(
name|K
name|entityId
parameter_list|)
block|{
name|V
name|result
init|=
literal|null
decl_stmt|;
comment|// Read the start time from the index
name|byte
index|[]
name|startTimeBytes
init|=
name|entityDb
operator|.
name|get
argument_list|(
name|getStartTimeKey
argument_list|(
name|entityId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|startTimeBytes
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Build the key for the entity storage and read it
try|try
block|{
name|result
operator|=
name|getEntityForKey
argument_list|(
name|getEntityKey
argument_list|(
name|entityId
argument_list|,
name|startTimeBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"GenericObjectMapper cannot read key from key "
operator|+
name|entityId
operator|.
name|toString
argument_list|()
operator|+
literal|" into an object. Read aborted! "
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|put (K entityId, V entity)
specifier|public
name|void
name|put
parameter_list|(
name|K
name|entityId
parameter_list|,
name|V
name|entity
parameter_list|)
block|{
name|Long
name|startTime
init|=
name|entity
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|startTime
operator|==
literal|null
condition|)
block|{
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
comment|// Build the key for the entity storage and read it
name|byte
index|[]
name|startTimeBytes
init|=
name|GenericObjectMapper
operator|.
name|writeReverseOrderedLong
argument_list|(
name|startTime
argument_list|)
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|valueBytes
init|=
name|GenericObjectMapper
operator|.
name|write
argument_list|(
name|entity
argument_list|)
decl_stmt|;
name|entityDb
operator|.
name|put
argument_list|(
name|getEntityKey
argument_list|(
name|entityId
argument_list|,
name|startTimeBytes
argument_list|)
argument_list|,
name|valueBytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"GenericObjectMapper cannot write "
operator|+
name|entity
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" into a byte array. Write aborted! "
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Build the key for the start time index
name|entityDb
operator|.
name|put
argument_list|(
name|getStartTimeKey
argument_list|(
name|entityId
argument_list|)
argument_list|,
name|startTimeBytes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|remove (K entityId)
specifier|public
name|void
name|remove
parameter_list|(
name|K
name|entityId
parameter_list|)
block|{
comment|// Read the start time from the index (key starts with an "i") then delete
comment|// the record
name|LeveldbUtils
operator|.
name|KeyBuilder
name|startTimeKeyBuilder
init|=
name|LeveldbUtils
operator|.
name|KeyBuilder
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|startTimeKeyBuilder
operator|.
name|add
argument_list|(
name|TIME_INDEX_PREFIX
argument_list|)
operator|.
name|add
argument_list|(
name|entityId
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|entityId
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|startTimeBytes
init|=
name|entityDb
operator|.
name|get
argument_list|(
name|startTimeKeyBuilder
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|startTimeBytes
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|entityDb
operator|.
name|delete
argument_list|(
name|startTimeKeyBuilder
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Build the key for the entity storage and delete it
name|entityDb
operator|.
name|delete
argument_list|(
name|getEntityKey
argument_list|(
name|entityId
argument_list|,
name|startTimeBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|valueSetIterator ()
specifier|public
name|Iterator
argument_list|<
name|V
argument_list|>
name|valueSetIterator
parameter_list|()
block|{
return|return
name|getIterator
argument_list|(
literal|null
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|valueSetIterator (V minV)
specifier|public
name|Iterator
argument_list|<
name|V
argument_list|>
name|valueSetIterator
parameter_list|(
name|V
name|minV
parameter_list|)
block|{
return|return
name|getIterator
argument_list|(
operator|new
name|EntityIdentifier
argument_list|(
name|minV
operator|.
name|getEntityId
argument_list|()
argument_list|,
name|minV
operator|.
name|getEntityType
argument_list|()
argument_list|)
argument_list|,
name|minV
operator|.
name|getStartTime
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getIterator ( EntityIdentifier startId, long startTimeMax)
specifier|private
name|Iterator
argument_list|<
name|V
argument_list|>
name|getIterator
parameter_list|(
name|EntityIdentifier
name|startId
parameter_list|,
name|long
name|startTimeMax
parameter_list|)
block|{
specifier|final
name|DBIterator
name|internalDbIterator
init|=
name|entityDb
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// we need to iterate from the first element with key greater than or
comment|// equal to ENTITY_STORAGE_PREFIX!maxTS(!startId), but stop on the first
comment|// key who does not have prefix ENTITY_STORATE_PREFIX
comment|// decide end prefix
name|LeveldbUtils
operator|.
name|KeyBuilder
name|entityPrefixKeyBuilder
init|=
name|LeveldbUtils
operator|.
name|KeyBuilder
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|entityPrefixKeyBuilder
operator|.
name|add
argument_list|(
name|ENTITY_STORAGE_PREFIX
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|prefixBytes
init|=
name|entityPrefixKeyBuilder
operator|.
name|getBytesForLookup
argument_list|()
decl_stmt|;
comment|// decide start prefix on top of end prefix and seek
specifier|final
name|byte
index|[]
name|startTimeBytes
init|=
name|GenericObjectMapper
operator|.
name|writeReverseOrderedLong
argument_list|(
name|startTimeMax
argument_list|)
decl_stmt|;
name|entityPrefixKeyBuilder
operator|.
name|add
argument_list|(
name|startTimeBytes
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|startId
operator|!=
literal|null
condition|)
block|{
name|entityPrefixKeyBuilder
operator|.
name|add
argument_list|(
name|startId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|byte
index|[]
name|startPrefixBytes
init|=
name|entityPrefixKeyBuilder
operator|.
name|getBytesForLookup
argument_list|()
decl_stmt|;
name|internalDbIterator
operator|.
name|seek
argument_list|(
name|startPrefixBytes
argument_list|)
expr_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
operator|!
name|internalDbIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|nextEntry
init|=
name|internalDbIterator
operator|.
name|peekNext
argument_list|()
decl_stmt|;
if|if
condition|(
name|LeveldbUtils
operator|.
name|prefixMatches
argument_list|(
name|prefixBytes
argument_list|,
name|prefixBytes
operator|.
name|length
argument_list|,
name|nextEntry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|next
parameter_list|()
block|{
if|if
condition|(
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|nextRaw
init|=
name|internalDbIterator
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|V
name|result
init|=
name|getEntityForKey
argument_list|(
name|nextRaw
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"GenericObjectMapper cannot read key from key "
operator|+
name|nextRaw
operator|.
name|getKey
argument_list|()
operator|+
literal|" into an object. Read aborted! "
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|// We do not support remove operations within one iteration
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"LevelDB map adapter does not support iterate-and-remove"
operator|+
literal|" use cases. "
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|field|OBJECT_MAPPER
specifier|static
specifier|final
name|ObjectMapper
name|OBJECT_MAPPER
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getEntityForKey (byte[] key)
specifier|private
name|V
name|getEntityForKey
parameter_list|(
name|byte
index|[]
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|resultRaw
init|=
name|entityDb
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultRaw
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|V
operator|)
name|OBJECT_MAPPER
operator|.
name|readValue
argument_list|(
name|resultRaw
argument_list|,
name|TimelineEntity
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|getStartTimeKey (K entityId)
specifier|private
name|byte
index|[]
name|getStartTimeKey
parameter_list|(
name|K
name|entityId
parameter_list|)
block|{
name|LeveldbUtils
operator|.
name|KeyBuilder
name|startTimeKeyBuilder
init|=
name|LeveldbUtils
operator|.
name|KeyBuilder
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|startTimeKeyBuilder
operator|.
name|add
argument_list|(
name|TIME_INDEX_PREFIX
argument_list|)
operator|.
name|add
argument_list|(
name|entityId
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|entityId
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|startTimeKeyBuilder
operator|.
name|getBytes
argument_list|()
return|;
block|}
DECL|method|getEntityKey (K entityId, byte[] startTimeBytes)
specifier|private
name|byte
index|[]
name|getEntityKey
parameter_list|(
name|K
name|entityId
parameter_list|,
name|byte
index|[]
name|startTimeBytes
parameter_list|)
block|{
name|LeveldbUtils
operator|.
name|KeyBuilder
name|entityKeyBuilder
init|=
name|LeveldbUtils
operator|.
name|KeyBuilder
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|entityKeyBuilder
operator|.
name|add
argument_list|(
name|ENTITY_STORAGE_PREFIX
argument_list|)
operator|.
name|add
argument_list|(
name|startTimeBytes
argument_list|,
literal|true
argument_list|)
operator|.
name|add
argument_list|(
name|entityId
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|entityId
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|entityKeyBuilder
operator|.
name|getBytes
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

