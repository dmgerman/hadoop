begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timeline
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntityGroupId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelinePutResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|MappingIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_class
DECL|class|LogInfo
specifier|abstract
class|class
name|LogInfo
block|{
DECL|field|ENTITY_FILE_NAME_DELIMITERS
specifier|public
specifier|static
specifier|final
name|String
name|ENTITY_FILE_NAME_DELIMITERS
init|=
literal|"_."
decl_stmt|;
DECL|method|getAttemptDirName ()
specifier|public
name|String
name|getAttemptDirName
parameter_list|()
block|{
return|return
name|attemptDirName
return|;
block|}
DECL|method|getOffset ()
specifier|public
name|long
name|getOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
DECL|method|setOffset (long newOffset)
specifier|public
name|void
name|setOffset
parameter_list|(
name|long
name|newOffset
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|newOffset
expr_stmt|;
block|}
DECL|field|attemptDirName
specifier|private
name|String
name|attemptDirName
decl_stmt|;
DECL|field|filename
specifier|private
name|String
name|filename
decl_stmt|;
DECL|field|user
specifier|private
name|String
name|user
decl_stmt|;
DECL|field|offset
specifier|private
name|long
name|offset
init|=
literal|0
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LogInfo
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|LogInfo (String attemptDirName, String file, String owner)
specifier|public
name|LogInfo
parameter_list|(
name|String
name|attemptDirName
parameter_list|,
name|String
name|file
parameter_list|,
name|String
name|owner
parameter_list|)
block|{
name|this
operator|.
name|attemptDirName
operator|=
name|attemptDirName
expr_stmt|;
name|filename
operator|=
name|file
expr_stmt|;
name|user
operator|=
name|owner
expr_stmt|;
block|}
DECL|method|getPath (Path rootPath)
specifier|public
name|Path
name|getPath
parameter_list|(
name|Path
name|rootPath
parameter_list|)
block|{
name|Path
name|attemptPath
init|=
operator|new
name|Path
argument_list|(
name|rootPath
argument_list|,
name|attemptDirName
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|attemptPath
argument_list|,
name|filename
argument_list|)
return|;
block|}
DECL|method|getFilename ()
specifier|public
name|String
name|getFilename
parameter_list|()
block|{
return|return
name|filename
return|;
block|}
DECL|method|matchesGroupId (TimelineEntityGroupId groupId)
specifier|public
name|boolean
name|matchesGroupId
parameter_list|(
name|TimelineEntityGroupId
name|groupId
parameter_list|)
block|{
return|return
name|matchesGroupId
argument_list|(
name|groupId
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|VisibleForTesting
DECL|method|matchesGroupId (String groupId)
name|boolean
name|matchesGroupId
parameter_list|(
name|String
name|groupId
parameter_list|)
block|{
comment|// Return true if the group id is a segment (separated by _, ., or end of
comment|// string) of the file name.
name|int
name|pos
init|=
name|filename
operator|.
name|indexOf
argument_list|(
name|groupId
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|filename
operator|.
name|length
argument_list|()
operator|==
name|pos
operator|+
name|groupId
operator|.
name|length
argument_list|()
operator|||
name|ENTITY_FILE_NAME_DELIMITERS
operator|.
name|contains
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|filename
operator|.
name|charAt
argument_list|(
name|pos
operator|+
name|groupId
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|parseForStore (TimelineDataManager tdm, Path appDirPath, boolean appCompleted, JsonFactory jsonFactory, ObjectMapper objMapper, FileSystem fs)
specifier|public
name|long
name|parseForStore
parameter_list|(
name|TimelineDataManager
name|tdm
parameter_list|,
name|Path
name|appDirPath
parameter_list|,
name|boolean
name|appCompleted
parameter_list|,
name|JsonFactory
name|jsonFactory
parameter_list|,
name|ObjectMapper
name|objMapper
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Parsing for log dir {} on attempt {}"
argument_list|,
name|appDirPath
argument_list|,
name|attemptDirName
argument_list|)
expr_stmt|;
name|Path
name|logPath
init|=
name|getPath
argument_list|(
name|appDirPath
argument_list|)
decl_stmt|;
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|logPath
argument_list|)
decl_stmt|;
name|long
name|numParsed
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Parsing {} at offset {}"
argument_list|,
name|logPath
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|long
name|count
init|=
name|parsePath
argument_list|(
name|tdm
argument_list|,
name|logPath
argument_list|,
name|appCompleted
argument_list|,
name|jsonFactory
argument_list|,
name|objMapper
argument_list|,
name|fs
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Parsed {} entities from {} in {} msec"
argument_list|,
name|count
argument_list|,
name|logPath
argument_list|,
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|startTime
argument_list|)
expr_stmt|;
name|numParsed
operator|+=
name|count
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|// If AppLogs cannot parse this log, it may be corrupted or just empty
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|JsonParseException
operator|&&
operator|(
name|status
operator|.
name|getLen
argument_list|()
operator|>
literal|0
operator|||
name|offset
operator|>
literal|0
operator|)
condition|)
block|{
comment|// log on parse problems if the file as been read in the past or
comment|// is visibly non-empty
name|LOG
operator|.
name|info
argument_list|(
literal|"Log {} appears to be corrupted. Skip. "
argument_list|,
name|logPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"{} no longer exists. Skip for scanning. "
argument_list|,
name|logPath
argument_list|)
expr_stmt|;
block|}
return|return
name|numParsed
return|;
block|}
DECL|method|parsePath (TimelineDataManager tdm, Path logPath, boolean appCompleted, JsonFactory jsonFactory, ObjectMapper objMapper, FileSystem fs)
specifier|private
name|long
name|parsePath
parameter_list|(
name|TimelineDataManager
name|tdm
parameter_list|,
name|Path
name|logPath
parameter_list|,
name|boolean
name|appCompleted
parameter_list|,
name|JsonFactory
name|jsonFactory
parameter_list|,
name|ObjectMapper
name|objMapper
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|logPath
argument_list|)
decl_stmt|;
name|JsonParser
name|parser
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|.
name|seek
argument_list|(
name|offset
argument_list|)
expr_stmt|;
try|try
block|{
name|parser
operator|=
name|jsonFactory
operator|.
name|createJsonParser
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|parser
operator|.
name|configure
argument_list|(
name|JsonParser
operator|.
name|Feature
operator|.
name|AUTO_CLOSE_SOURCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// if app hasn't completed then there may be errors due to the
comment|// incomplete file which are treated as EOF until app completes
if|if
condition|(
name|appCompleted
condition|)
block|{
throw|throw
name|e
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception in parse path: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
return|return
name|doParse
argument_list|(
name|tdm
argument_list|,
name|parser
argument_list|,
name|objMapper
argument_list|,
name|ugi
argument_list|,
name|appCompleted
argument_list|)
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doParse (TimelineDataManager tdm, JsonParser parser, ObjectMapper objMapper, UserGroupInformation ugi, boolean appCompleted)
specifier|protected
specifier|abstract
name|long
name|doParse
parameter_list|(
name|TimelineDataManager
name|tdm
parameter_list|,
name|JsonParser
name|parser
parameter_list|,
name|ObjectMapper
name|objMapper
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|boolean
name|appCompleted
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_class

begin_class
DECL|class|EntityLogInfo
class|class
name|EntityLogInfo
extends|extends
name|LogInfo
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EntityGroupFSTimelineStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|EntityLogInfo (String attemptId, String file, String owner)
specifier|public
name|EntityLogInfo
parameter_list|(
name|String
name|attemptId
parameter_list|,
name|String
name|file
parameter_list|,
name|String
name|owner
parameter_list|)
block|{
name|super
argument_list|(
name|attemptId
argument_list|,
name|file
argument_list|,
name|owner
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doParse (TimelineDataManager tdm, JsonParser parser, ObjectMapper objMapper, UserGroupInformation ugi, boolean appCompleted)
specifier|protected
name|long
name|doParse
parameter_list|(
name|TimelineDataManager
name|tdm
parameter_list|,
name|JsonParser
name|parser
parameter_list|,
name|ObjectMapper
name|objMapper
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|boolean
name|appCompleted
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|count
init|=
literal|0
decl_stmt|;
name|TimelineEntities
name|entities
init|=
operator|new
name|TimelineEntities
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|TimelineEntity
argument_list|>
name|entityList
init|=
operator|new
name|ArrayList
argument_list|<
name|TimelineEntity
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|long
name|bytesParsed
decl_stmt|;
name|long
name|bytesParsedLastBatch
init|=
literal|0
decl_stmt|;
name|boolean
name|postError
init|=
literal|false
decl_stmt|;
try|try
block|{
name|MappingIterator
argument_list|<
name|TimelineEntity
argument_list|>
name|iter
init|=
name|objMapper
operator|.
name|readValues
argument_list|(
name|parser
argument_list|,
name|TimelineEntity
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|TimelineEntity
name|entity
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|etype
init|=
name|entity
operator|.
name|getEntityType
argument_list|()
decl_stmt|;
name|String
name|eid
init|=
name|entity
operator|.
name|getEntityId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Read entity {}"
argument_list|,
name|etype
argument_list|)
expr_stmt|;
operator|++
name|count
expr_stmt|;
name|bytesParsed
operator|=
name|parser
operator|.
name|getCurrentLocation
argument_list|()
operator|.
name|getCharOffset
argument_list|()
operator|+
literal|1
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Parser now at offset {}"
argument_list|,
name|bytesParsed
argument_list|)
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding {}({}) to store"
argument_list|,
name|eid
argument_list|,
name|etype
argument_list|)
expr_stmt|;
name|entityList
operator|.
name|add
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|entities
operator|.
name|setEntities
argument_list|(
name|entityList
argument_list|)
expr_stmt|;
name|TimelinePutResponse
name|response
init|=
name|tdm
operator|.
name|postEntities
argument_list|(
name|entities
argument_list|,
name|ugi
argument_list|)
decl_stmt|;
for|for
control|(
name|TimelinePutResponse
operator|.
name|TimelinePutError
name|e
range|:
name|response
operator|.
name|getErrors
argument_list|()
control|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error putting entity: {} ({}): {}"
argument_list|,
name|e
operator|.
name|getEntityId
argument_list|()
argument_list|,
name|e
operator|.
name|getEntityType
argument_list|()
argument_list|,
name|e
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setOffset
argument_list|(
name|getOffset
argument_list|()
operator|+
name|bytesParsed
operator|-
name|bytesParsedLastBatch
argument_list|)
expr_stmt|;
name|bytesParsedLastBatch
operator|=
name|bytesParsed
expr_stmt|;
name|entityList
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|postError
operator|=
literal|true
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error posting entities"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|postError
operator|=
literal|true
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error posting entities"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// if app hasn't completed then there may be errors due to the
comment|// incomplete file which are treated as EOF until app completes
if|if
condition|(
name|appCompleted
operator|||
name|postError
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|appCompleted
operator|||
operator|!
operator|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|JsonParseException
operator|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
return|return
name|count
return|;
block|}
block|}
end_class

begin_class
DECL|class|DomainLogInfo
class|class
name|DomainLogInfo
extends|extends
name|LogInfo
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EntityGroupFSTimelineStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|DomainLogInfo (String attemptDirName, String file, String owner)
specifier|public
name|DomainLogInfo
parameter_list|(
name|String
name|attemptDirName
parameter_list|,
name|String
name|file
parameter_list|,
name|String
name|owner
parameter_list|)
block|{
name|super
argument_list|(
name|attemptDirName
argument_list|,
name|file
argument_list|,
name|owner
argument_list|)
expr_stmt|;
block|}
DECL|method|doParse (TimelineDataManager tdm, JsonParser parser, ObjectMapper objMapper, UserGroupInformation ugi, boolean appCompleted)
specifier|protected
name|long
name|doParse
parameter_list|(
name|TimelineDataManager
name|tdm
parameter_list|,
name|JsonParser
name|parser
parameter_list|,
name|ObjectMapper
name|objMapper
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|boolean
name|appCompleted
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|count
init|=
literal|0
decl_stmt|;
name|long
name|bytesParsed
decl_stmt|;
name|long
name|bytesParsedLastBatch
init|=
literal|0
decl_stmt|;
name|boolean
name|putError
init|=
literal|false
decl_stmt|;
try|try
block|{
name|MappingIterator
argument_list|<
name|TimelineDomain
argument_list|>
name|iter
init|=
name|objMapper
operator|.
name|readValues
argument_list|(
name|parser
argument_list|,
name|TimelineDomain
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|TimelineDomain
name|domain
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|domain
operator|.
name|setOwner
argument_list|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Read domain {}"
argument_list|,
name|domain
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|count
expr_stmt|;
name|bytesParsed
operator|=
name|parser
operator|.
name|getCurrentLocation
argument_list|()
operator|.
name|getCharOffset
argument_list|()
operator|+
literal|1
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Parser now at offset {}"
argument_list|,
name|bytesParsed
argument_list|)
expr_stmt|;
try|try
block|{
name|tdm
operator|.
name|putDomain
argument_list|(
name|domain
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
name|setOffset
argument_list|(
name|getOffset
argument_list|()
operator|+
name|bytesParsed
operator|-
name|bytesParsedLastBatch
argument_list|)
expr_stmt|;
name|bytesParsedLastBatch
operator|=
name|bytesParsed
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|putError
operator|=
literal|true
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error posting domain"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|putError
operator|=
literal|true
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error posting domain"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// if app hasn't completed then there may be errors due to the
comment|// incomplete file which are treated as EOF until app completes
if|if
condition|(
name|appCompleted
operator|||
name|putError
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|appCompleted
operator|||
operator|!
operator|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|JsonParseException
operator|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
return|return
name|count
return|;
block|}
block|}
end_class

end_unit

