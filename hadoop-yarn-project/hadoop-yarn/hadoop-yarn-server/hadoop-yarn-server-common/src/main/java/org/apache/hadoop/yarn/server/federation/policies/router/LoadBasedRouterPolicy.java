begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.policies.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|router
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|FederationPolicyInitializationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|dao
operator|.
name|WeightedPolicyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|exceptions
operator|.
name|FederationPolicyInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterIdInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_comment
comment|/**  * This implements a simple load-balancing policy. The policy "weights" are  * binary 0/1 values that enable/disable each sub-cluster, and the policy peaks  * the sub-cluster with the least load to forward this application.  */
end_comment

begin_class
DECL|class|LoadBasedRouterPolicy
specifier|public
class|class
name|LoadBasedRouterPolicy
extends|extends
name|AbstractRouterPolicy
block|{
annotation|@
name|Override
DECL|method|reinitialize (FederationPolicyInitializationContext policyContext)
specifier|public
name|void
name|reinitialize
parameter_list|(
name|FederationPolicyInitializationContext
name|policyContext
parameter_list|)
throws|throws
name|FederationPolicyInitializationException
block|{
comment|// remember old policyInfo
name|WeightedPolicyInfo
name|tempPolicy
init|=
name|getPolicyInfo
argument_list|()
decl_stmt|;
comment|// attempt new initialization
name|super
operator|.
name|reinitialize
argument_list|(
name|policyContext
argument_list|)
expr_stmt|;
comment|// check extra constraints
for|for
control|(
name|Float
name|weight
range|:
name|getPolicyInfo
argument_list|()
operator|.
name|getRouterPolicyWeights
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|weight
operator|!=
literal|0
operator|&&
name|weight
operator|!=
literal|1
condition|)
block|{
comment|// reset to old policyInfo if check fails
name|setPolicyInfo
argument_list|(
name|tempPolicy
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FederationPolicyInitializationException
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|" policy expects all weights to be either "
operator|+
literal|"\"0\" or \"1\""
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getHomeSubcluster ( ApplicationSubmissionContext appSubmissionContext, List<SubClusterId> blacklist)
specifier|public
name|SubClusterId
name|getHomeSubcluster
parameter_list|(
name|ApplicationSubmissionContext
name|appSubmissionContext
parameter_list|,
name|List
argument_list|<
name|SubClusterId
argument_list|>
name|blacklist
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// null checks and default-queue behavior
name|validate
argument_list|(
name|appSubmissionContext
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|SubClusterInfo
argument_list|>
name|activeSubclusters
init|=
name|getActiveSubclusters
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|SubClusterIdInfo
argument_list|,
name|Float
argument_list|>
name|weights
init|=
name|getPolicyInfo
argument_list|()
operator|.
name|getRouterPolicyWeights
argument_list|()
decl_stmt|;
name|SubClusterIdInfo
name|chosen
init|=
literal|null
decl_stmt|;
name|long
name|currBestMem
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|SubClusterId
argument_list|,
name|SubClusterInfo
argument_list|>
name|entry
range|:
name|activeSubclusters
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|blacklist
operator|!=
literal|null
operator|&&
name|blacklist
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|SubClusterIdInfo
name|id
init|=
operator|new
name|SubClusterIdInfo
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|weights
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
operator|&&
name|weights
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|>
literal|0
condition|)
block|{
name|long
name|availableMemory
init|=
name|getAvailableMemory
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|availableMemory
operator|>
name|currBestMem
condition|)
block|{
name|currBestMem
operator|=
name|availableMemory
expr_stmt|;
name|chosen
operator|=
name|id
expr_stmt|;
block|}
block|}
block|}
return|return
name|chosen
operator|.
name|toId
argument_list|()
return|;
block|}
DECL|method|getAvailableMemory (SubClusterInfo value)
specifier|private
name|long
name|getAvailableMemory
parameter_list|(
name|SubClusterInfo
name|value
parameter_list|)
throws|throws
name|YarnException
block|{
try|try
block|{
name|long
name|mem
init|=
operator|-
literal|1
decl_stmt|;
name|JSONObject
name|obj
init|=
operator|new
name|JSONObject
argument_list|(
name|value
operator|.
name|getCapability
argument_list|()
argument_list|)
decl_stmt|;
name|mem
operator|=
name|obj
operator|.
name|getJSONObject
argument_list|(
literal|"clusterMetrics"
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"availableMB"
argument_list|)
expr_stmt|;
return|return
name|mem
return|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|j
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"FederationSubCluserInfo cannot be parsed"
argument_list|,
name|j
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

