begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.store.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|CallableStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|exception
operator|.
name|FederationStateStoreErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|exception
operator|.
name|FederationStateStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|exception
operator|.
name|FederationStateStoreInvalidInputException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|exception
operator|.
name|FederationStateStoreRetriableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Common utility methods used by the store implementations.  *  */
end_comment

begin_class
DECL|class|FederationStateStoreUtils
specifier|public
specifier|final
class|class
name|FederationStateStoreUtils
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FederationStateStoreUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|FederationStateStoreUtils ()
specifier|private
name|FederationStateStoreUtils
parameter_list|()
block|{   }
comment|/**    * Returns the SQL<code>FederationStateStore</code> connection to the pool.    *    * @param log the logger interface    * @param cstmt the interface used to execute SQL stored procedures    * @param conn the SQL connection    * @throws YarnException on failure    */
DECL|method|returnToPool (Logger log, CallableStatement cstmt, Connection conn)
specifier|public
specifier|static
name|void
name|returnToPool
parameter_list|(
name|Logger
name|log
parameter_list|,
name|CallableStatement
name|cstmt
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|YarnException
block|{
if|if
condition|(
name|cstmt
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|cstmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|logAndThrowException
argument_list|(
name|log
argument_list|,
literal|"Exception while trying to close Statement"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|logAndThrowException
argument_list|(
name|log
argument_list|,
literal|"Exception while trying to close Connection"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Throws an exception due to an error in<code>FederationStateStore</code>.    *    * @param log the logger interface    * @param errMsg the error message    * @param t the throwable raised in the called class.    * @throws YarnException on failure    */
DECL|method|logAndThrowException (Logger log, String errMsg, Throwable t)
specifier|public
specifier|static
name|void
name|logAndThrowException
parameter_list|(
name|Logger
name|log
parameter_list|,
name|String
name|errMsg
parameter_list|,
name|Throwable
name|t
parameter_list|)
throws|throws
name|YarnException
block|{
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
name|errMsg
argument_list|,
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|errMsg
argument_list|,
name|t
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
block|}
comment|/**    * Throws an<code>FederationStateStoreException</code> due to an error in    *<code>FederationStateStore</code>.    *    * @param log the logger interface    * @param code FederationStateStoreErrorCode of the error    * @param errMsg the error message    * @throws YarnException on failure    */
DECL|method|logAndThrowStoreException (Logger log, FederationStateStoreErrorCode code, String errMsg)
specifier|public
specifier|static
name|void
name|logAndThrowStoreException
parameter_list|(
name|Logger
name|log
parameter_list|,
name|FederationStateStoreErrorCode
name|code
parameter_list|,
name|String
name|errMsg
parameter_list|)
throws|throws
name|YarnException
block|{
name|log
operator|.
name|error
argument_list|(
name|errMsg
operator|+
literal|" "
operator|+
name|code
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FederationStateStoreException
argument_list|(
name|code
argument_list|)
throw|;
block|}
comment|/**    * Throws an<code>FederationStateStoreException</code> due to an error in    *<code>FederationStateStore</code>.    *    * @param log the logger interface    * @param code FederationStateStoreErrorCode of the error    * @throws YarnException on failure    */
DECL|method|logAndThrowStoreException (Logger log, FederationStateStoreErrorCode code)
specifier|public
specifier|static
name|void
name|logAndThrowStoreException
parameter_list|(
name|Logger
name|log
parameter_list|,
name|FederationStateStoreErrorCode
name|code
parameter_list|)
throws|throws
name|YarnException
block|{
name|log
operator|.
name|error
argument_list|(
name|code
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FederationStateStoreException
argument_list|(
name|code
argument_list|)
throw|;
block|}
comment|/**    * Throws an<code>FederationStateStoreInvalidInputException</code> due to an    * error in<code>FederationStateStore</code>.    *    * @param log the logger interface    * @param errMsg the error message    * @throws YarnException on failure    */
DECL|method|logAndThrowInvalidInputException (Logger log, String errMsg)
specifier|public
specifier|static
name|void
name|logAndThrowInvalidInputException
parameter_list|(
name|Logger
name|log
parameter_list|,
name|String
name|errMsg
parameter_list|)
throws|throws
name|YarnException
block|{
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FederationStateStoreInvalidInputException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
comment|/**    * Throws an<code>FederationStateStoreRetriableException</code> due to an    * error in<code>FederationStateStore</code>.    *    * @param log the logger interface    * @param errMsg the error message    * @param t the throwable raised in the called class.    * @throws YarnException on failure    */
DECL|method|logAndThrowRetriableException (Logger log, String errMsg, Throwable t)
specifier|public
specifier|static
name|void
name|logAndThrowRetriableException
parameter_list|(
name|Logger
name|log
parameter_list|,
name|String
name|errMsg
parameter_list|,
name|Throwable
name|t
parameter_list|)
throws|throws
name|YarnException
block|{
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|,
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FederationStateStoreRetriableException
argument_list|(
name|errMsg
argument_list|,
name|t
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FederationStateStoreRetriableException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

