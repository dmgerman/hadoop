begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.store.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|CallableStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|NotImplementedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|FederationStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|exception
operator|.
name|FederationStateStoreInvalidInputException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|metrics
operator|.
name|FederationStateStoreClientMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|AddApplicationHomeSubClusterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|AddApplicationHomeSubClusterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|ApplicationHomeSubCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|DeleteApplicationHomeSubClusterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|DeleteApplicationHomeSubClusterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetApplicationHomeSubClusterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetApplicationHomeSubClusterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetApplicationsHomeSubClusterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetApplicationsHomeSubClusterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterPoliciesConfigurationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterPoliciesConfigurationsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterPolicyConfigurationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterPolicyConfigurationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClustersInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClustersInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SetSubClusterPolicyConfigurationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SetSubClusterPolicyConfigurationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterDeregisterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterDeregisterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterHeartbeatRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterPolicyConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterRegisterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterRegisterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|UpdateApplicationHomeSubClusterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|UpdateApplicationHomeSubClusterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|utils
operator|.
name|FederationApplicationHomeSubClusterStoreInputValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|utils
operator|.
name|FederationMembershipStateStoreInputValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|utils
operator|.
name|FederationPolicyStoreInputValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|utils
operator|.
name|FederationStateStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|records
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|MonotonicClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|zaxxer
operator|.
name|hikari
operator|.
name|HikariDataSource
import|;
end_import

begin_comment
comment|/**  * SQL implementation of {@link FederationStateStore}.  */
end_comment

begin_class
DECL|class|SQLFederationStateStore
specifier|public
class|class
name|SQLFederationStateStore
implements|implements
name|FederationStateStore
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SQLFederationStateStore
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Stored procedures patterns
DECL|field|CALL_SP_REGISTER_SUBCLUSTER
specifier|private
specifier|static
specifier|final
name|String
name|CALL_SP_REGISTER_SUBCLUSTER
init|=
literal|"{call sp_registerSubCluster(?, ?, ?, ?, ?, ?, ?, ?, ?)}"
decl_stmt|;
DECL|field|CALL_SP_DEREGISTER_SUBCLUSTER
specifier|private
specifier|static
specifier|final
name|String
name|CALL_SP_DEREGISTER_SUBCLUSTER
init|=
literal|"{call sp_deregisterSubCluster(?, ?, ?)}"
decl_stmt|;
DECL|field|CALL_SP_GET_SUBCLUSTER
specifier|private
specifier|static
specifier|final
name|String
name|CALL_SP_GET_SUBCLUSTER
init|=
literal|"{call sp_getSubCluster(?, ?, ?, ?, ?, ?, ?, ?, ?)}"
decl_stmt|;
DECL|field|CALL_SP_GET_SUBCLUSTERS
specifier|private
specifier|static
specifier|final
name|String
name|CALL_SP_GET_SUBCLUSTERS
init|=
literal|"{call sp_getSubClusters()}"
decl_stmt|;
DECL|field|CALL_SP_SUBCLUSTER_HEARTBEAT
specifier|private
specifier|static
specifier|final
name|String
name|CALL_SP_SUBCLUSTER_HEARTBEAT
init|=
literal|"{call sp_subClusterHeartbeat(?, ?, ?, ?)}"
decl_stmt|;
DECL|field|CALL_SP_ADD_APPLICATION_HOME_SUBCLUSTER
specifier|private
specifier|static
specifier|final
name|String
name|CALL_SP_ADD_APPLICATION_HOME_SUBCLUSTER
init|=
literal|"{call sp_addApplicationHomeSubCluster(?, ?, ?, ?)}"
decl_stmt|;
DECL|field|CALL_SP_UPDATE_APPLICATION_HOME_SUBCLUSTER
specifier|private
specifier|static
specifier|final
name|String
name|CALL_SP_UPDATE_APPLICATION_HOME_SUBCLUSTER
init|=
literal|"{call sp_updateApplicationHomeSubCluster(?, ?, ?)}"
decl_stmt|;
DECL|field|CALL_SP_DELETE_APPLICATION_HOME_SUBCLUSTER
specifier|private
specifier|static
specifier|final
name|String
name|CALL_SP_DELETE_APPLICATION_HOME_SUBCLUSTER
init|=
literal|"{call sp_deleteApplicationHomeSubCluster(?, ?)}"
decl_stmt|;
DECL|field|CALL_SP_GET_APPLICATION_HOME_SUBCLUSTER
specifier|private
specifier|static
specifier|final
name|String
name|CALL_SP_GET_APPLICATION_HOME_SUBCLUSTER
init|=
literal|"{call sp_getApplicationHomeSubCluster(?, ?)}"
decl_stmt|;
DECL|field|CALL_SP_GET_APPLICATIONS_HOME_SUBCLUSTER
specifier|private
specifier|static
specifier|final
name|String
name|CALL_SP_GET_APPLICATIONS_HOME_SUBCLUSTER
init|=
literal|"{call sp_getApplicationsHomeSubCluster()}"
decl_stmt|;
DECL|field|CALL_SP_SET_POLICY_CONFIGURATION
specifier|private
specifier|static
specifier|final
name|String
name|CALL_SP_SET_POLICY_CONFIGURATION
init|=
literal|"{call sp_setPolicyConfiguration(?, ?, ?, ?)}"
decl_stmt|;
DECL|field|CALL_SP_GET_POLICY_CONFIGURATION
specifier|private
specifier|static
specifier|final
name|String
name|CALL_SP_GET_POLICY_CONFIGURATION
init|=
literal|"{call sp_getPolicyConfiguration(?, ?, ?)}"
decl_stmt|;
DECL|field|CALL_SP_GET_POLICIES_CONFIGURATIONS
specifier|private
specifier|static
specifier|final
name|String
name|CALL_SP_GET_POLICIES_CONFIGURATIONS
init|=
literal|"{call sp_getPoliciesConfigurations()}"
decl_stmt|;
DECL|field|utcCalendar
specifier|private
name|Calendar
name|utcCalendar
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
decl_stmt|;
comment|// SQL database configurations
DECL|field|userName
specifier|private
name|String
name|userName
decl_stmt|;
DECL|field|password
specifier|private
name|String
name|password
decl_stmt|;
DECL|field|driverClass
specifier|private
name|String
name|driverClass
decl_stmt|;
DECL|field|url
specifier|private
name|String
name|url
decl_stmt|;
DECL|field|maximumPoolSize
specifier|private
name|int
name|maximumPoolSize
decl_stmt|;
DECL|field|dataSource
specifier|private
name|HikariDataSource
name|dataSource
init|=
literal|null
decl_stmt|;
DECL|field|clock
specifier|private
specifier|final
name|Clock
name|clock
init|=
operator|new
name|MonotonicClock
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|init (Configuration conf)
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|YarnException
block|{
name|driverClass
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|FEDERATION_STATESTORE_SQL_JDBC_CLASS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_FEDERATION_STATESTORE_SQL_JDBC_CLASS
argument_list|)
expr_stmt|;
name|maximumPoolSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|FEDERATION_STATESTORE_SQL_MAXCONNECTIONS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_FEDERATION_STATESTORE_SQL_MAXCONNECTIONS
argument_list|)
expr_stmt|;
comment|// An helper method avoids to assign a null value to these property
name|userName
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|FEDERATION_STATESTORE_SQL_USERNAME
argument_list|)
expr_stmt|;
name|password
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|FEDERATION_STATESTORE_SQL_PASSWORD
argument_list|)
expr_stmt|;
name|url
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|FEDERATION_STATESTORE_SQL_URL
argument_list|)
expr_stmt|;
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
name|driverClass
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|FederationStateStoreUtils
operator|.
name|logAndThrowException
argument_list|(
name|LOG
argument_list|,
literal|"Driver class not found."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Create the data source to pool connections in a thread-safe manner
name|dataSource
operator|=
operator|new
name|HikariDataSource
argument_list|()
expr_stmt|;
name|dataSource
operator|.
name|setDataSourceClassName
argument_list|(
name|driverClass
argument_list|)
expr_stmt|;
name|FederationStateStoreUtils
operator|.
name|setUsername
argument_list|(
name|dataSource
argument_list|,
name|userName
argument_list|)
expr_stmt|;
name|FederationStateStoreUtils
operator|.
name|setPassword
argument_list|(
name|dataSource
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|FederationStateStoreUtils
operator|.
name|setProperty
argument_list|(
name|dataSource
argument_list|,
name|FederationStateStoreUtils
operator|.
name|FEDERATION_STORE_URL
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|dataSource
operator|.
name|setMaximumPoolSize
argument_list|(
name|maximumPoolSize
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialized connection pool to the Federation StateStore "
operator|+
literal|"database at address: "
operator|+
name|url
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|registerSubCluster ( SubClusterRegisterRequest registerSubClusterRequest)
specifier|public
name|SubClusterRegisterResponse
name|registerSubCluster
parameter_list|(
name|SubClusterRegisterRequest
name|registerSubClusterRequest
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// Input validator
name|FederationMembershipStateStoreInputValidator
operator|.
name|validate
argument_list|(
name|registerSubClusterRequest
argument_list|)
expr_stmt|;
name|CallableStatement
name|cstmt
init|=
literal|null
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|SubClusterInfo
name|subClusterInfo
init|=
name|registerSubClusterRequest
operator|.
name|getSubClusterInfo
argument_list|()
decl_stmt|;
name|SubClusterId
name|subClusterId
init|=
name|subClusterInfo
operator|.
name|getSubClusterId
argument_list|()
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|getConnection
argument_list|()
expr_stmt|;
name|cstmt
operator|=
name|conn
operator|.
name|prepareCall
argument_list|(
name|CALL_SP_REGISTER_SUBCLUSTER
argument_list|)
expr_stmt|;
comment|// Set the parameters for the stored procedure
name|cstmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|subClusterInfo
operator|.
name|getAMRMServiceAddress
argument_list|()
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|subClusterInfo
operator|.
name|getClientRMServiceAddress
argument_list|()
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|setString
argument_list|(
literal|4
argument_list|,
name|subClusterInfo
operator|.
name|getRMAdminServiceAddress
argument_list|()
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|setString
argument_list|(
literal|5
argument_list|,
name|subClusterInfo
operator|.
name|getRMWebServiceAddress
argument_list|()
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|setString
argument_list|(
literal|6
argument_list|,
name|subClusterInfo
operator|.
name|getState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|setLong
argument_list|(
literal|7
argument_list|,
name|subClusterInfo
operator|.
name|getLastStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|setString
argument_list|(
literal|8
argument_list|,
name|subClusterInfo
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|registerOutParameter
argument_list|(
literal|9
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
comment|// Execute the query
name|long
name|startTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|cstmt
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|long
name|stopTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
comment|// Check the ROWCOUNT value, if it is equal to 0 it means the call
comment|// did not add a new subcluster into FederationStateStore
if|if
condition|(
name|cstmt
operator|.
name|getInt
argument_list|(
literal|9
argument_list|)
operator|==
literal|0
condition|)
block|{
name|String
name|errMsg
init|=
literal|"SubCluster "
operator|+
name|subClusterId
operator|+
literal|" was not registered into the StateStore"
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
comment|// Check the ROWCOUNT value, if it is different from 1 it means the call
comment|// had a wrong behavior. Maybe the database is not set correctly.
if|if
condition|(
name|cstmt
operator|.
name|getInt
argument_list|(
literal|9
argument_list|)
operator|!=
literal|1
condition|)
block|{
name|String
name|errMsg
init|=
literal|"Wrong behavior during registration of SubCluster "
operator|+
name|subClusterId
operator|+
literal|" into the StateStore"
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Registered the SubCluster "
operator|+
name|subClusterId
operator|+
literal|" into the StateStore"
argument_list|)
expr_stmt|;
name|FederationStateStoreClientMetrics
operator|.
name|succeededStateStoreCall
argument_list|(
name|stopTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|FederationStateStoreClientMetrics
operator|.
name|failedStateStoreCall
argument_list|()
expr_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowRetriableException
argument_list|(
name|LOG
argument_list|,
literal|"Unable to register the SubCluster "
operator|+
name|subClusterId
operator|+
literal|" into the StateStore"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Return to the pool the CallableStatement and the Connection
name|FederationStateStoreUtils
operator|.
name|returnToPool
argument_list|(
name|LOG
argument_list|,
name|cstmt
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
return|return
name|SubClusterRegisterResponse
operator|.
name|newInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|deregisterSubCluster ( SubClusterDeregisterRequest subClusterDeregisterRequest)
specifier|public
name|SubClusterDeregisterResponse
name|deregisterSubCluster
parameter_list|(
name|SubClusterDeregisterRequest
name|subClusterDeregisterRequest
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// Input validator
name|FederationMembershipStateStoreInputValidator
operator|.
name|validate
argument_list|(
name|subClusterDeregisterRequest
argument_list|)
expr_stmt|;
name|CallableStatement
name|cstmt
init|=
literal|null
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|SubClusterId
name|subClusterId
init|=
name|subClusterDeregisterRequest
operator|.
name|getSubClusterId
argument_list|()
decl_stmt|;
name|SubClusterState
name|state
init|=
name|subClusterDeregisterRequest
operator|.
name|getState
argument_list|()
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|getConnection
argument_list|()
expr_stmt|;
name|cstmt
operator|=
name|conn
operator|.
name|prepareCall
argument_list|(
name|CALL_SP_DEREGISTER_SUBCLUSTER
argument_list|)
expr_stmt|;
comment|// Set the parameters for the stored procedure
name|cstmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|state
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|registerOutParameter
argument_list|(
literal|3
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
comment|// Execute the query
name|long
name|startTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|cstmt
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|long
name|stopTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
comment|// Check the ROWCOUNT value, if it is equal to 0 it means the call
comment|// did not deregister the subcluster into FederationStateStore
if|if
condition|(
name|cstmt
operator|.
name|getInt
argument_list|(
literal|3
argument_list|)
operator|==
literal|0
condition|)
block|{
name|String
name|errMsg
init|=
literal|"SubCluster "
operator|+
name|subClusterId
operator|+
literal|" not found"
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
comment|// Check the ROWCOUNT value, if it is different from 1 it means the call
comment|// had a wrong behavior. Maybe the database is not set correctly.
if|if
condition|(
name|cstmt
operator|.
name|getInt
argument_list|(
literal|3
argument_list|)
operator|!=
literal|1
condition|)
block|{
name|String
name|errMsg
init|=
literal|"Wrong behavior during deregistration of SubCluster "
operator|+
name|subClusterId
operator|+
literal|" from the StateStore"
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Deregistered the SubCluster "
operator|+
name|subClusterId
operator|+
literal|" state to "
operator|+
name|state
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|FederationStateStoreClientMetrics
operator|.
name|succeededStateStoreCall
argument_list|(
name|stopTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|FederationStateStoreClientMetrics
operator|.
name|failedStateStoreCall
argument_list|()
expr_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowRetriableException
argument_list|(
name|LOG
argument_list|,
literal|"Unable to deregister the sub-cluster "
operator|+
name|subClusterId
operator|+
literal|" state to "
operator|+
name|state
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Return to the pool the CallableStatement and the Connection
name|FederationStateStoreUtils
operator|.
name|returnToPool
argument_list|(
name|LOG
argument_list|,
name|cstmt
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
return|return
name|SubClusterDeregisterResponse
operator|.
name|newInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|subClusterHeartbeat ( SubClusterHeartbeatRequest subClusterHeartbeatRequest)
specifier|public
name|SubClusterHeartbeatResponse
name|subClusterHeartbeat
parameter_list|(
name|SubClusterHeartbeatRequest
name|subClusterHeartbeatRequest
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// Input validator
name|FederationMembershipStateStoreInputValidator
operator|.
name|validate
argument_list|(
name|subClusterHeartbeatRequest
argument_list|)
expr_stmt|;
name|CallableStatement
name|cstmt
init|=
literal|null
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|SubClusterId
name|subClusterId
init|=
name|subClusterHeartbeatRequest
operator|.
name|getSubClusterId
argument_list|()
decl_stmt|;
name|SubClusterState
name|state
init|=
name|subClusterHeartbeatRequest
operator|.
name|getState
argument_list|()
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|getConnection
argument_list|()
expr_stmt|;
name|cstmt
operator|=
name|conn
operator|.
name|prepareCall
argument_list|(
name|CALL_SP_SUBCLUSTER_HEARTBEAT
argument_list|)
expr_stmt|;
comment|// Set the parameters for the stored procedure
name|cstmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|state
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|subClusterHeartbeatRequest
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|registerOutParameter
argument_list|(
literal|4
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
comment|// Execute the query
name|long
name|startTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|cstmt
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|long
name|stopTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
comment|// Check the ROWCOUNT value, if it is equal to 0 it means the call
comment|// did not update the subcluster into FederationStateStore
if|if
condition|(
name|cstmt
operator|.
name|getInt
argument_list|(
literal|4
argument_list|)
operator|==
literal|0
condition|)
block|{
name|String
name|errMsg
init|=
literal|"SubCluster "
operator|+
name|subClusterId
operator|.
name|toString
argument_list|()
operator|+
literal|" does not exist; cannot heartbeat"
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
comment|// Check the ROWCOUNT value, if it is different from 1 it means the call
comment|// had a wrong behavior. Maybe the database is not set correctly.
if|if
condition|(
name|cstmt
operator|.
name|getInt
argument_list|(
literal|4
argument_list|)
operator|!=
literal|1
condition|)
block|{
name|String
name|errMsg
init|=
literal|"Wrong behavior during the heartbeat of SubCluster "
operator|+
name|subClusterId
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Heartbeated the StateStore for the specified SubCluster "
operator|+
name|subClusterId
argument_list|)
expr_stmt|;
name|FederationStateStoreClientMetrics
operator|.
name|succeededStateStoreCall
argument_list|(
name|stopTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|FederationStateStoreClientMetrics
operator|.
name|failedStateStoreCall
argument_list|()
expr_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowRetriableException
argument_list|(
name|LOG
argument_list|,
literal|"Unable to heartbeat the StateStore for the specified SubCluster "
operator|+
name|subClusterId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Return to the pool the CallableStatement and the Connection
name|FederationStateStoreUtils
operator|.
name|returnToPool
argument_list|(
name|LOG
argument_list|,
name|cstmt
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
return|return
name|SubClusterHeartbeatResponse
operator|.
name|newInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getSubCluster ( GetSubClusterInfoRequest subClusterRequest)
specifier|public
name|GetSubClusterInfoResponse
name|getSubCluster
parameter_list|(
name|GetSubClusterInfoRequest
name|subClusterRequest
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// Input validator
name|FederationMembershipStateStoreInputValidator
operator|.
name|validate
argument_list|(
name|subClusterRequest
argument_list|)
expr_stmt|;
name|CallableStatement
name|cstmt
init|=
literal|null
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|SubClusterInfo
name|subClusterInfo
init|=
literal|null
decl_stmt|;
name|SubClusterId
name|subClusterId
init|=
name|subClusterRequest
operator|.
name|getSubClusterId
argument_list|()
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|getConnection
argument_list|()
expr_stmt|;
name|cstmt
operator|=
name|conn
operator|.
name|prepareCall
argument_list|(
name|CALL_SP_GET_SUBCLUSTER
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set the parameters for the stored procedure
name|cstmt
operator|.
name|registerOutParameter
argument_list|(
literal|2
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|registerOutParameter
argument_list|(
literal|3
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|registerOutParameter
argument_list|(
literal|4
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|registerOutParameter
argument_list|(
literal|5
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|registerOutParameter
argument_list|(
literal|6
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|registerOutParameter
argument_list|(
literal|7
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|registerOutParameter
argument_list|(
literal|8
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|registerOutParameter
argument_list|(
literal|9
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
comment|// Execute the query
name|long
name|startTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|cstmt
operator|.
name|execute
argument_list|()
expr_stmt|;
name|long
name|stopTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|String
name|amRMAddress
init|=
name|cstmt
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|clientRMAddress
init|=
name|cstmt
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|String
name|rmAdminAddress
init|=
name|cstmt
operator|.
name|getString
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|webAppAddress
init|=
name|cstmt
operator|.
name|getString
argument_list|(
literal|5
argument_list|)
decl_stmt|;
comment|// first check if the subCluster exists
if|if
condition|(
operator|(
name|amRMAddress
operator|==
literal|null
operator|)
operator|||
operator|(
name|clientRMAddress
operator|==
literal|null
operator|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The queried SubCluster: {} does not exist."
argument_list|,
name|subClusterId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Timestamp
name|heartBeatTimeStamp
init|=
name|cstmt
operator|.
name|getTimestamp
argument_list|(
literal|6
argument_list|,
name|utcCalendar
argument_list|)
decl_stmt|;
name|long
name|lastHeartBeat
init|=
name|heartBeatTimeStamp
operator|!=
literal|null
condition|?
name|heartBeatTimeStamp
operator|.
name|getTime
argument_list|()
else|:
literal|0
decl_stmt|;
name|SubClusterState
name|state
init|=
name|SubClusterState
operator|.
name|fromString
argument_list|(
name|cstmt
operator|.
name|getString
argument_list|(
literal|7
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|lastStartTime
init|=
name|cstmt
operator|.
name|getLong
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|String
name|capability
init|=
name|cstmt
operator|.
name|getString
argument_list|(
literal|9
argument_list|)
decl_stmt|;
name|subClusterInfo
operator|=
name|SubClusterInfo
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|amRMAddress
argument_list|,
name|clientRMAddress
argument_list|,
name|rmAdminAddress
argument_list|,
name|webAppAddress
argument_list|,
name|lastHeartBeat
argument_list|,
name|state
argument_list|,
name|lastStartTime
argument_list|,
name|capability
argument_list|)
expr_stmt|;
name|FederationStateStoreClientMetrics
operator|.
name|succeededStateStoreCall
argument_list|(
name|stopTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
comment|// Check if the output it is a valid subcluster
try|try
block|{
name|FederationMembershipStateStoreInputValidator
operator|.
name|checkSubClusterInfo
argument_list|(
name|subClusterInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"SubCluster "
operator|+
name|subClusterId
operator|.
name|toString
argument_list|()
operator|+
literal|" does not exist"
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got the information about the specified SubCluster {}"
argument_list|,
name|subClusterInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|FederationStateStoreClientMetrics
operator|.
name|failedStateStoreCall
argument_list|()
expr_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowRetriableException
argument_list|(
name|LOG
argument_list|,
literal|"Unable to obtain the SubCluster information for "
operator|+
name|subClusterId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Return to the pool the CallableStatement and the Connection
name|FederationStateStoreUtils
operator|.
name|returnToPool
argument_list|(
name|LOG
argument_list|,
name|cstmt
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
return|return
name|GetSubClusterInfoResponse
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getSubClusters ( GetSubClustersInfoRequest subClustersRequest)
specifier|public
name|GetSubClustersInfoResponse
name|getSubClusters
parameter_list|(
name|GetSubClustersInfoRequest
name|subClustersRequest
parameter_list|)
throws|throws
name|YarnException
block|{
name|CallableStatement
name|cstmt
init|=
literal|null
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|SubClusterInfo
argument_list|>
name|subClusters
init|=
operator|new
name|ArrayList
argument_list|<
name|SubClusterInfo
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|getConnection
argument_list|()
expr_stmt|;
name|cstmt
operator|=
name|conn
operator|.
name|prepareCall
argument_list|(
name|CALL_SP_GET_SUBCLUSTERS
argument_list|)
expr_stmt|;
comment|// Execute the query
name|long
name|startTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|rs
operator|=
name|cstmt
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
name|long
name|stopTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
comment|// Extract the output for each tuple
name|String
name|subClusterName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|amRMAddress
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|clientRMAddress
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|String
name|rmAdminAddress
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|webAppAddress
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|long
name|lastHeartBeat
init|=
name|rs
operator|.
name|getTimestamp
argument_list|(
literal|6
argument_list|,
name|utcCalendar
argument_list|)
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|SubClusterState
name|state
init|=
name|SubClusterState
operator|.
name|fromString
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|7
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|lastStartTime
init|=
name|rs
operator|.
name|getLong
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|String
name|capability
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|9
argument_list|)
decl_stmt|;
name|SubClusterId
name|subClusterId
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
name|subClusterName
argument_list|)
decl_stmt|;
name|SubClusterInfo
name|subClusterInfo
init|=
name|SubClusterInfo
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|amRMAddress
argument_list|,
name|clientRMAddress
argument_list|,
name|rmAdminAddress
argument_list|,
name|webAppAddress
argument_list|,
name|lastHeartBeat
argument_list|,
name|state
argument_list|,
name|lastStartTime
argument_list|,
name|capability
argument_list|)
decl_stmt|;
name|FederationStateStoreClientMetrics
operator|.
name|succeededStateStoreCall
argument_list|(
name|stopTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
comment|// Check if the output it is a valid subcluster
try|try
block|{
name|FederationMembershipStateStoreInputValidator
operator|.
name|checkSubClusterInfo
argument_list|(
name|subClusterInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"SubCluster "
operator|+
name|subClusterId
operator|.
name|toString
argument_list|()
operator|+
literal|" is not valid"
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
comment|// Filter the inactive
if|if
condition|(
operator|!
name|subClustersRequest
operator|.
name|getFilterInactiveSubClusters
argument_list|()
operator|||
name|subClusterInfo
operator|.
name|getState
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|subClusters
operator|.
name|add
argument_list|(
name|subClusterInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|FederationStateStoreClientMetrics
operator|.
name|failedStateStoreCall
argument_list|()
expr_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowRetriableException
argument_list|(
name|LOG
argument_list|,
literal|"Unable to obtain the information for all the SubClusters "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Return to the pool the CallableStatement and the Connection
name|FederationStateStoreUtils
operator|.
name|returnToPool
argument_list|(
name|LOG
argument_list|,
name|cstmt
argument_list|,
name|conn
argument_list|,
name|rs
argument_list|)
expr_stmt|;
block|}
return|return
name|GetSubClustersInfoResponse
operator|.
name|newInstance
argument_list|(
name|subClusters
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|addApplicationHomeSubCluster ( AddApplicationHomeSubClusterRequest request)
specifier|public
name|AddApplicationHomeSubClusterResponse
name|addApplicationHomeSubCluster
parameter_list|(
name|AddApplicationHomeSubClusterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// Input validator
name|FederationApplicationHomeSubClusterStoreInputValidator
operator|.
name|validate
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|CallableStatement
name|cstmt
init|=
literal|null
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|String
name|subClusterHome
init|=
literal|null
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|request
operator|.
name|getApplicationHomeSubCluster
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|SubClusterId
name|subClusterId
init|=
name|request
operator|.
name|getApplicationHomeSubCluster
argument_list|()
operator|.
name|getHomeSubCluster
argument_list|()
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|getConnection
argument_list|()
expr_stmt|;
name|cstmt
operator|=
name|conn
operator|.
name|prepareCall
argument_list|(
name|CALL_SP_ADD_APPLICATION_HOME_SUBCLUSTER
argument_list|)
expr_stmt|;
comment|// Set the parameters for the stored procedure
name|cstmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|registerOutParameter
argument_list|(
literal|3
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|registerOutParameter
argument_list|(
literal|4
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
comment|// Execute the query
name|long
name|startTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|cstmt
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|long
name|stopTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|subClusterHome
operator|=
name|cstmt
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|SubClusterId
name|subClusterIdHome
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
name|subClusterHome
argument_list|)
decl_stmt|;
name|FederationStateStoreClientMetrics
operator|.
name|succeededStateStoreCall
argument_list|(
name|stopTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
comment|// For failover reason, we check the returned SubClusterId.
comment|// If it is equal to the subclusterId we sent, the call added the new
comment|// application into FederationStateStore. If the call returns a different
comment|// SubClusterId it means we already tried to insert this application but a
comment|// component (Router/StateStore/RM) failed during the submission.
if|if
condition|(
name|subClusterId
operator|.
name|equals
argument_list|(
name|subClusterIdHome
argument_list|)
condition|)
block|{
comment|// Check the ROWCOUNT value, if it is equal to 0 it means the call
comment|// did not add a new application into FederationStateStore
if|if
condition|(
name|cstmt
operator|.
name|getInt
argument_list|(
literal|4
argument_list|)
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"The application {} was not inserted in the StateStore because it"
operator|+
literal|" was already present in SubCluster {}"
argument_list|,
name|appId
argument_list|,
name|subClusterHome
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cstmt
operator|.
name|getInt
argument_list|(
literal|4
argument_list|)
operator|!=
literal|1
condition|)
block|{
comment|// Check the ROWCOUNT value, if it is different from 1 it means the
comment|// call had a wrong behavior. Maybe the database is not set correctly.
name|String
name|errMsg
init|=
literal|"Wrong behavior during the insertion of SubCluster "
operator|+
name|subClusterId
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Insert into the StateStore the application: "
operator|+
name|appId
operator|+
literal|" in SubCluster:  "
operator|+
name|subClusterHome
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Check the ROWCOUNT value, if it is different from 0 it means the call
comment|// did edited the table
if|if
condition|(
name|cstmt
operator|.
name|getInt
argument_list|(
literal|4
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|String
name|errMsg
init|=
literal|"The application "
operator|+
name|appId
operator|+
literal|" does exist but was overwritten"
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Application: "
operator|+
name|appId
operator|+
literal|" already present with SubCluster:  "
operator|+
name|subClusterHome
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|FederationStateStoreClientMetrics
operator|.
name|failedStateStoreCall
argument_list|()
expr_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowRetriableException
argument_list|(
name|LOG
argument_list|,
literal|"Unable to insert the newly generated application "
operator|+
name|request
operator|.
name|getApplicationHomeSubCluster
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Return to the pool the CallableStatement and the Connection
name|FederationStateStoreUtils
operator|.
name|returnToPool
argument_list|(
name|LOG
argument_list|,
name|cstmt
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
return|return
name|AddApplicationHomeSubClusterResponse
operator|.
name|newInstance
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
name|subClusterHome
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|updateApplicationHomeSubCluster ( UpdateApplicationHomeSubClusterRequest request)
specifier|public
name|UpdateApplicationHomeSubClusterResponse
name|updateApplicationHomeSubCluster
parameter_list|(
name|UpdateApplicationHomeSubClusterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// Input validator
name|FederationApplicationHomeSubClusterStoreInputValidator
operator|.
name|validate
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|CallableStatement
name|cstmt
init|=
literal|null
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|request
operator|.
name|getApplicationHomeSubCluster
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|SubClusterId
name|subClusterId
init|=
name|request
operator|.
name|getApplicationHomeSubCluster
argument_list|()
operator|.
name|getHomeSubCluster
argument_list|()
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|getConnection
argument_list|()
expr_stmt|;
name|cstmt
operator|=
name|conn
operator|.
name|prepareCall
argument_list|(
name|CALL_SP_UPDATE_APPLICATION_HOME_SUBCLUSTER
argument_list|)
expr_stmt|;
comment|// Set the parameters for the stored procedure
name|cstmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|registerOutParameter
argument_list|(
literal|3
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
comment|// Execute the query
name|long
name|startTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|cstmt
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|long
name|stopTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
comment|// Check the ROWCOUNT value, if it is equal to 0 it means the call
comment|// did not update the application into FederationStateStore
if|if
condition|(
name|cstmt
operator|.
name|getInt
argument_list|(
literal|3
argument_list|)
operator|==
literal|0
condition|)
block|{
name|String
name|errMsg
init|=
literal|"Application "
operator|+
name|appId
operator|+
literal|" does not exist"
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
comment|// Check the ROWCOUNT value, if it is different from 1 it means the call
comment|// had a wrong behavior. Maybe the database is not set correctly.
if|if
condition|(
name|cstmt
operator|.
name|getInt
argument_list|(
literal|3
argument_list|)
operator|!=
literal|1
condition|)
block|{
name|String
name|errMsg
init|=
literal|"Wrong behavior during the update of SubCluster "
operator|+
name|subClusterId
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Update the SubCluster to {} for application {} in the StateStore"
argument_list|,
name|subClusterId
argument_list|,
name|appId
argument_list|)
expr_stmt|;
name|FederationStateStoreClientMetrics
operator|.
name|succeededStateStoreCall
argument_list|(
name|stopTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|FederationStateStoreClientMetrics
operator|.
name|failedStateStoreCall
argument_list|()
expr_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowRetriableException
argument_list|(
name|LOG
argument_list|,
literal|"Unable to update the application "
operator|+
name|request
operator|.
name|getApplicationHomeSubCluster
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Return to the pool the CallableStatement and the Connection
name|FederationStateStoreUtils
operator|.
name|returnToPool
argument_list|(
name|LOG
argument_list|,
name|cstmt
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
return|return
name|UpdateApplicationHomeSubClusterResponse
operator|.
name|newInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationHomeSubCluster ( GetApplicationHomeSubClusterRequest request)
specifier|public
name|GetApplicationHomeSubClusterResponse
name|getApplicationHomeSubCluster
parameter_list|(
name|GetApplicationHomeSubClusterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// Input validator
name|FederationApplicationHomeSubClusterStoreInputValidator
operator|.
name|validate
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|CallableStatement
name|cstmt
init|=
literal|null
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|SubClusterId
name|homeRM
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|getConnection
argument_list|()
expr_stmt|;
name|cstmt
operator|=
name|conn
operator|.
name|prepareCall
argument_list|(
name|CALL_SP_GET_APPLICATION_HOME_SUBCLUSTER
argument_list|)
expr_stmt|;
comment|// Set the parameters for the stored procedure
name|cstmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|request
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|registerOutParameter
argument_list|(
literal|2
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
comment|// Execute the query
name|long
name|startTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|cstmt
operator|.
name|execute
argument_list|()
expr_stmt|;
name|long
name|stopTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|cstmt
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|homeRM
operator|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
name|cstmt
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|errMsg
init|=
literal|"Application "
operator|+
name|request
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" does not exist"
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got the information about the specified application {}."
operator|+
literal|" The AM is running in {}"
argument_list|,
name|request
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|homeRM
argument_list|)
expr_stmt|;
name|FederationStateStoreClientMetrics
operator|.
name|succeededStateStoreCall
argument_list|(
name|stopTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|FederationStateStoreClientMetrics
operator|.
name|failedStateStoreCall
argument_list|()
expr_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowRetriableException
argument_list|(
name|LOG
argument_list|,
literal|"Unable to obtain the application information "
operator|+
literal|"for the specified application "
operator|+
name|request
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Return to the pool the CallableStatement and the Connection
name|FederationStateStoreUtils
operator|.
name|returnToPool
argument_list|(
name|LOG
argument_list|,
name|cstmt
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
return|return
name|GetApplicationHomeSubClusterResponse
operator|.
name|newInstance
argument_list|(
name|ApplicationHomeSubCluster
operator|.
name|newInstance
argument_list|(
name|request
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|homeRM
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationsHomeSubCluster ( GetApplicationsHomeSubClusterRequest request)
specifier|public
name|GetApplicationsHomeSubClusterResponse
name|getApplicationsHomeSubCluster
parameter_list|(
name|GetApplicationsHomeSubClusterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|CallableStatement
name|cstmt
init|=
literal|null
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|ApplicationHomeSubCluster
argument_list|>
name|appsHomeSubClusters
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationHomeSubCluster
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|getConnection
argument_list|()
expr_stmt|;
name|cstmt
operator|=
name|conn
operator|.
name|prepareCall
argument_list|(
name|CALL_SP_GET_APPLICATIONS_HOME_SUBCLUSTER
argument_list|)
expr_stmt|;
comment|// Execute the query
name|long
name|startTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|rs
operator|=
name|cstmt
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
name|long
name|stopTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
comment|// Extract the output for each tuple
name|String
name|applicationId
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|homeSubCluster
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|appsHomeSubClusters
operator|.
name|add
argument_list|(
name|ApplicationHomeSubCluster
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|applicationId
argument_list|)
argument_list|,
name|SubClusterId
operator|.
name|newInstance
argument_list|(
name|homeSubCluster
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|FederationStateStoreClientMetrics
operator|.
name|succeededStateStoreCall
argument_list|(
name|stopTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|FederationStateStoreClientMetrics
operator|.
name|failedStateStoreCall
argument_list|()
expr_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowRetriableException
argument_list|(
name|LOG
argument_list|,
literal|"Unable to obtain the information for all the applications "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Return to the pool the CallableStatement and the Connection
name|FederationStateStoreUtils
operator|.
name|returnToPool
argument_list|(
name|LOG
argument_list|,
name|cstmt
argument_list|,
name|conn
argument_list|,
name|rs
argument_list|)
expr_stmt|;
block|}
return|return
name|GetApplicationsHomeSubClusterResponse
operator|.
name|newInstance
argument_list|(
name|appsHomeSubClusters
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|deleteApplicationHomeSubCluster ( DeleteApplicationHomeSubClusterRequest request)
specifier|public
name|DeleteApplicationHomeSubClusterResponse
name|deleteApplicationHomeSubCluster
parameter_list|(
name|DeleteApplicationHomeSubClusterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// Input validator
name|FederationApplicationHomeSubClusterStoreInputValidator
operator|.
name|validate
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|CallableStatement
name|cstmt
init|=
literal|null
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|getConnection
argument_list|()
expr_stmt|;
name|cstmt
operator|=
name|conn
operator|.
name|prepareCall
argument_list|(
name|CALL_SP_DELETE_APPLICATION_HOME_SUBCLUSTER
argument_list|)
expr_stmt|;
comment|// Set the parameters for the stored procedure
name|cstmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|request
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|registerOutParameter
argument_list|(
literal|2
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
comment|// Execute the query
name|long
name|startTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|cstmt
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|long
name|stopTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
comment|// Check the ROWCOUNT value, if it is equal to 0 it means the call
comment|// did not delete the application from FederationStateStore
if|if
condition|(
name|cstmt
operator|.
name|getInt
argument_list|(
literal|2
argument_list|)
operator|==
literal|0
condition|)
block|{
name|String
name|errMsg
init|=
literal|"Application "
operator|+
name|request
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" does not exist"
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
comment|// Check the ROWCOUNT value, if it is different from 1 it means the call
comment|// had a wrong behavior. Maybe the database is not set correctly.
if|if
condition|(
name|cstmt
operator|.
name|getInt
argument_list|(
literal|2
argument_list|)
operator|!=
literal|1
condition|)
block|{
name|String
name|errMsg
init|=
literal|"Wrong behavior during deleting the application "
operator|+
name|request
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Delete from the StateStore the application: {}"
argument_list|,
name|request
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|FederationStateStoreClientMetrics
operator|.
name|succeededStateStoreCall
argument_list|(
name|stopTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|FederationStateStoreClientMetrics
operator|.
name|failedStateStoreCall
argument_list|()
expr_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowRetriableException
argument_list|(
name|LOG
argument_list|,
literal|"Unable to delete the application "
operator|+
name|request
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Return to the pool the CallableStatement and the Connection
name|FederationStateStoreUtils
operator|.
name|returnToPool
argument_list|(
name|LOG
argument_list|,
name|cstmt
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
return|return
name|DeleteApplicationHomeSubClusterResponse
operator|.
name|newInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPolicyConfiguration ( GetSubClusterPolicyConfigurationRequest request)
specifier|public
name|GetSubClusterPolicyConfigurationResponse
name|getPolicyConfiguration
parameter_list|(
name|GetSubClusterPolicyConfigurationRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// Input validator
name|FederationPolicyStoreInputValidator
operator|.
name|validate
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|CallableStatement
name|cstmt
init|=
literal|null
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|SubClusterPolicyConfiguration
name|subClusterPolicyConfiguration
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|getConnection
argument_list|()
expr_stmt|;
name|cstmt
operator|=
name|conn
operator|.
name|prepareCall
argument_list|(
name|CALL_SP_GET_POLICY_CONFIGURATION
argument_list|)
expr_stmt|;
comment|// Set the parameters for the stored procedure
name|cstmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|request
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|registerOutParameter
argument_list|(
literal|2
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|registerOutParameter
argument_list|(
literal|3
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|VARBINARY
argument_list|)
expr_stmt|;
comment|// Execute the query
name|long
name|startTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|cstmt
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|long
name|stopTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
comment|// Check if the output it is a valid policy
if|if
condition|(
name|cstmt
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
operator|!=
literal|null
operator|&&
name|cstmt
operator|.
name|getBytes
argument_list|(
literal|3
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|subClusterPolicyConfiguration
operator|=
name|SubClusterPolicyConfiguration
operator|.
name|newInstance
argument_list|(
name|request
operator|.
name|getQueue
argument_list|()
argument_list|,
name|cstmt
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|cstmt
operator|.
name|getBytes
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Selected from StateStore the policy for the queue: {}"
argument_list|,
name|subClusterPolicyConfiguration
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Policy for queue: {} does not exist."
argument_list|,
name|request
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|FederationStateStoreClientMetrics
operator|.
name|succeededStateStoreCall
argument_list|(
name|stopTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|FederationStateStoreClientMetrics
operator|.
name|failedStateStoreCall
argument_list|()
expr_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowRetriableException
argument_list|(
name|LOG
argument_list|,
literal|"Unable to select the policy for the queue :"
operator|+
name|request
operator|.
name|getQueue
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Return to the pool the CallableStatement and the Connection
name|FederationStateStoreUtils
operator|.
name|returnToPool
argument_list|(
name|LOG
argument_list|,
name|cstmt
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
return|return
name|GetSubClusterPolicyConfigurationResponse
operator|.
name|newInstance
argument_list|(
name|subClusterPolicyConfiguration
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setPolicyConfiguration ( SetSubClusterPolicyConfigurationRequest request)
specifier|public
name|SetSubClusterPolicyConfigurationResponse
name|setPolicyConfiguration
parameter_list|(
name|SetSubClusterPolicyConfigurationRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// Input validator
name|FederationPolicyStoreInputValidator
operator|.
name|validate
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|CallableStatement
name|cstmt
init|=
literal|null
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|SubClusterPolicyConfiguration
name|policyConf
init|=
name|request
operator|.
name|getPolicyConfiguration
argument_list|()
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|getConnection
argument_list|()
expr_stmt|;
name|cstmt
operator|=
name|conn
operator|.
name|prepareCall
argument_list|(
name|CALL_SP_SET_POLICY_CONFIGURATION
argument_list|)
expr_stmt|;
comment|// Set the parameters for the stored procedure
name|cstmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|policyConf
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|policyConf
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|setBytes
argument_list|(
literal|3
argument_list|,
name|getByteArray
argument_list|(
name|policyConf
operator|.
name|getParams
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cstmt
operator|.
name|registerOutParameter
argument_list|(
literal|4
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
comment|// Execute the query
name|long
name|startTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|cstmt
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|long
name|stopTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
comment|// Check the ROWCOUNT value, if it is equal to 0 it means the call
comment|// did not add a new policy into FederationStateStore
if|if
condition|(
name|cstmt
operator|.
name|getInt
argument_list|(
literal|4
argument_list|)
operator|==
literal|0
condition|)
block|{
name|String
name|errMsg
init|=
literal|"The policy "
operator|+
name|policyConf
operator|.
name|getQueue
argument_list|()
operator|+
literal|" was not insert into the StateStore"
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
comment|// Check the ROWCOUNT value, if it is different from 1 it means the call
comment|// had a wrong behavior. Maybe the database is not set correctly.
if|if
condition|(
name|cstmt
operator|.
name|getInt
argument_list|(
literal|4
argument_list|)
operator|!=
literal|1
condition|)
block|{
name|String
name|errMsg
init|=
literal|"Wrong behavior during insert the policy "
operator|+
name|policyConf
operator|.
name|getQueue
argument_list|()
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Insert into the state store the policy for the queue: "
operator|+
name|policyConf
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|FederationStateStoreClientMetrics
operator|.
name|succeededStateStoreCall
argument_list|(
name|stopTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|FederationStateStoreClientMetrics
operator|.
name|failedStateStoreCall
argument_list|()
expr_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowRetriableException
argument_list|(
name|LOG
argument_list|,
literal|"Unable to insert the newly generated policy for the queue :"
operator|+
name|policyConf
operator|.
name|getQueue
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Return to the pool the CallableStatement and the Connection
name|FederationStateStoreUtils
operator|.
name|returnToPool
argument_list|(
name|LOG
argument_list|,
name|cstmt
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
return|return
name|SetSubClusterPolicyConfigurationResponse
operator|.
name|newInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPoliciesConfigurations ( GetSubClusterPoliciesConfigurationsRequest request)
specifier|public
name|GetSubClusterPoliciesConfigurationsResponse
name|getPoliciesConfigurations
parameter_list|(
name|GetSubClusterPoliciesConfigurationsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|CallableStatement
name|cstmt
init|=
literal|null
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|SubClusterPolicyConfiguration
argument_list|>
name|policyConfigurations
init|=
operator|new
name|ArrayList
argument_list|<
name|SubClusterPolicyConfiguration
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|getConnection
argument_list|()
expr_stmt|;
name|cstmt
operator|=
name|conn
operator|.
name|prepareCall
argument_list|(
name|CALL_SP_GET_POLICIES_CONFIGURATIONS
argument_list|)
expr_stmt|;
comment|// Execute the query
name|long
name|startTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|rs
operator|=
name|cstmt
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
name|long
name|stopTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
comment|// Extract the output for each tuple
name|String
name|queue
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|byte
index|[]
name|policyInfo
init|=
name|rs
operator|.
name|getBytes
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|SubClusterPolicyConfiguration
name|subClusterPolicyConfiguration
init|=
name|SubClusterPolicyConfiguration
operator|.
name|newInstance
argument_list|(
name|queue
argument_list|,
name|type
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|policyInfo
argument_list|)
argument_list|)
decl_stmt|;
name|policyConfigurations
operator|.
name|add
argument_list|(
name|subClusterPolicyConfiguration
argument_list|)
expr_stmt|;
block|}
name|FederationStateStoreClientMetrics
operator|.
name|succeededStateStoreCall
argument_list|(
name|stopTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|FederationStateStoreClientMetrics
operator|.
name|failedStateStoreCall
argument_list|()
expr_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowRetriableException
argument_list|(
name|LOG
argument_list|,
literal|"Unable to obtain the policy information for all the queues."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Return to the pool the CallableStatement and the Connection
name|FederationStateStoreUtils
operator|.
name|returnToPool
argument_list|(
name|LOG
argument_list|,
name|cstmt
argument_list|,
name|conn
argument_list|,
name|rs
argument_list|)
expr_stmt|;
block|}
return|return
name|GetSubClusterPoliciesConfigurationsResponse
operator|.
name|newInstance
argument_list|(
name|policyConfigurations
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCurrentVersion ()
specifier|public
name|Version
name|getCurrentVersion
parameter_list|()
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Code is not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|loadVersion ()
specifier|public
name|Version
name|loadVersion
parameter_list|()
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Code is not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|dataSource
operator|!=
literal|null
condition|)
block|{
name|dataSource
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Get a connection from the DataSource pool.    *    * @return a connection from the DataSource pool.    * @throws SQLException on failure    */
DECL|method|getConnection ()
specifier|public
name|Connection
name|getConnection
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|dataSource
operator|.
name|getConnection
argument_list|()
return|;
block|}
DECL|method|getByteArray (ByteBuffer bb)
specifier|private
specifier|static
name|byte
index|[]
name|getByteArray
parameter_list|(
name|ByteBuffer
name|bb
parameter_list|)
block|{
name|byte
index|[]
name|ba
init|=
operator|new
name|byte
index|[
name|bb
operator|.
name|limit
argument_list|()
index|]
decl_stmt|;
name|bb
operator|.
name|get
argument_list|(
name|ba
argument_list|)
expr_stmt|;
return|return
name|ba
return|;
block|}
block|}
end_class

end_unit

