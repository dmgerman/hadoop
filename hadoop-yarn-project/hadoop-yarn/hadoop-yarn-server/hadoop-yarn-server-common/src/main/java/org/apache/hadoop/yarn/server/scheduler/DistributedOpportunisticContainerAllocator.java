begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceBlacklistRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RemoteNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|metrics
operator|.
name|OpportunisticSchedulerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|BaseContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  *<p>  * The DistributedOpportunisticContainerAllocator allocates containers on a  * given list of nodes, after modifying the container sizes to respect the  * limits set by the ResourceManager. It tries to distribute the containers  * as evenly as possible.  *</p>  */
end_comment

begin_class
DECL|class|DistributedOpportunisticContainerAllocator
specifier|public
class|class
name|DistributedOpportunisticContainerAllocator
extends|extends
name|OpportunisticContainerAllocator
block|{
DECL|field|NODE_LOCAL_LOOP
specifier|private
specifier|static
specifier|final
name|int
name|NODE_LOCAL_LOOP
init|=
literal|0
decl_stmt|;
DECL|field|RACK_LOCAL_LOOP
specifier|private
specifier|static
specifier|final
name|int
name|RACK_LOCAL_LOOP
init|=
literal|1
decl_stmt|;
DECL|field|OFF_SWITCH_LOOP
specifier|private
specifier|static
specifier|final
name|int
name|OFF_SWITCH_LOOP
init|=
literal|2
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DistributedOpportunisticContainerAllocator
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Create a new Opportunistic Container Allocator.    * @param tokenSecretManager TokenSecretManager    */
DECL|method|DistributedOpportunisticContainerAllocator ( BaseContainerTokenSecretManager tokenSecretManager)
specifier|public
name|DistributedOpportunisticContainerAllocator
parameter_list|(
name|BaseContainerTokenSecretManager
name|tokenSecretManager
parameter_list|)
block|{
name|super
argument_list|(
name|tokenSecretManager
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new Opportunistic Container Allocator.    * @param tokenSecretManager TokenSecretManager    * @param maxAllocationsPerAMHeartbeat max number of containers to be    *                                     allocated in one AM heartbeat    */
DECL|method|DistributedOpportunisticContainerAllocator ( BaseContainerTokenSecretManager tokenSecretManager, int maxAllocationsPerAMHeartbeat)
specifier|public
name|DistributedOpportunisticContainerAllocator
parameter_list|(
name|BaseContainerTokenSecretManager
name|tokenSecretManager
parameter_list|,
name|int
name|maxAllocationsPerAMHeartbeat
parameter_list|)
block|{
name|super
argument_list|(
name|tokenSecretManager
argument_list|,
name|maxAllocationsPerAMHeartbeat
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|allocateContainers (ResourceBlacklistRequest blackList, List<ResourceRequest> oppResourceReqs, ApplicationAttemptId applicationAttemptId, OpportunisticContainerContext opportContext, long rmIdentifier, String appSubmitter)
specifier|public
name|List
argument_list|<
name|Container
argument_list|>
name|allocateContainers
parameter_list|(
name|ResourceBlacklistRequest
name|blackList
parameter_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|oppResourceReqs
parameter_list|,
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|OpportunisticContainerContext
name|opportContext
parameter_list|,
name|long
name|rmIdentifier
parameter_list|,
name|String
name|appSubmitter
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// Update black list.
name|updateBlacklist
argument_list|(
name|blackList
argument_list|,
name|opportContext
argument_list|)
expr_stmt|;
comment|// Add OPPORTUNISTIC requests to the outstanding ones.
name|opportContext
operator|.
name|addToOutstandingReqs
argument_list|(
name|oppResourceReqs
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|nodeBlackList
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|opportContext
operator|.
name|getBlacklist
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allocatedNodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Satisfy the outstanding OPPORTUNISTIC requests.
name|boolean
name|continueLoop
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|continueLoop
condition|)
block|{
name|continueLoop
operator|=
literal|false
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Allocation
argument_list|>
argument_list|>
argument_list|>
name|allocations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SchedulerRequestKey
name|schedulerKey
range|:
name|opportContext
operator|.
name|getOutstandingOpReqs
argument_list|()
operator|.
name|descendingKeySet
argument_list|()
control|)
block|{
comment|// Allocated containers :
comment|//  Key = Requested Capability,
comment|//  Value = List of Containers of given cap (the actual container size
comment|//          might be different than what is requested, which is why
comment|//          we need the requested capability (key) to match against
comment|//          the outstanding reqs)
name|int
name|remAllocs
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|maxAllocationsPerAMHeartbeat
init|=
name|getMaxAllocationsPerAMHeartbeat
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxAllocationsPerAMHeartbeat
operator|>
literal|0
condition|)
block|{
name|remAllocs
operator|=
name|maxAllocationsPerAMHeartbeat
operator|-
name|allocatedContainers
operator|.
name|size
argument_list|()
operator|-
name|getTotalAllocations
argument_list|(
name|allocations
argument_list|)
expr_stmt|;
if|if
condition|(
name|remAllocs
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Not allocating more containers as we have reached max "
operator|+
literal|"allocations per AM heartbeat {}"
argument_list|,
name|maxAllocationsPerAMHeartbeat
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Allocation
argument_list|>
argument_list|>
name|allocation
init|=
name|allocate
argument_list|(
name|rmIdentifier
argument_list|,
name|opportContext
argument_list|,
name|schedulerKey
argument_list|,
name|applicationAttemptId
argument_list|,
name|appSubmitter
argument_list|,
name|nodeBlackList
argument_list|,
name|allocatedNodes
argument_list|,
name|remAllocs
argument_list|)
decl_stmt|;
if|if
condition|(
name|allocation
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|allocations
operator|.
name|add
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|continueLoop
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|matchAllocation
argument_list|(
name|allocations
argument_list|,
name|allocatedContainers
argument_list|,
name|opportContext
argument_list|)
expr_stmt|;
block|}
return|return
name|allocatedContainers
return|;
block|}
DECL|method|allocate (long rmIdentifier, OpportunisticContainerContext appContext, SchedulerRequestKey schedKey, ApplicationAttemptId appAttId, String userName, Set<String> blackList, Set<String> allocatedNodes, int maxAllocations)
specifier|private
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Allocation
argument_list|>
argument_list|>
name|allocate
parameter_list|(
name|long
name|rmIdentifier
parameter_list|,
name|OpportunisticContainerContext
name|appContext
parameter_list|,
name|SchedulerRequestKey
name|schedKey
parameter_list|,
name|ApplicationAttemptId
name|appAttId
parameter_list|,
name|String
name|userName
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|blackList
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|allocatedNodes
parameter_list|,
name|int
name|maxAllocations
parameter_list|)
throws|throws
name|YarnException
block|{
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Allocation
argument_list|>
argument_list|>
name|containers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|EnrichedResourceRequest
name|enrichedAsk
range|:
name|appContext
operator|.
name|getOutstandingOpReqs
argument_list|()
operator|.
name|get
argument_list|(
name|schedKey
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
name|int
name|remainingAllocs
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|maxAllocations
operator|>
literal|0
condition|)
block|{
name|int
name|totalAllocated
init|=
literal|0
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|Allocation
argument_list|>
name|allocs
range|:
name|containers
operator|.
name|values
argument_list|()
control|)
block|{
name|totalAllocated
operator|+=
name|allocs
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|remainingAllocs
operator|=
name|maxAllocations
operator|-
name|totalAllocated
expr_stmt|;
if|if
condition|(
name|remainingAllocs
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Not allocating more containers as max allocations per AM "
operator|+
literal|"heartbeat {} has reached"
argument_list|,
name|getMaxAllocationsPerAMHeartbeat
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|allocateContainersInternal
argument_list|(
name|rmIdentifier
argument_list|,
name|appContext
operator|.
name|getAppParams
argument_list|()
argument_list|,
name|appContext
operator|.
name|getContainerIdGenerator
argument_list|()
argument_list|,
name|blackList
argument_list|,
name|allocatedNodes
argument_list|,
name|appAttId
argument_list|,
name|appContext
operator|.
name|getNodeMap
argument_list|()
argument_list|,
name|userName
argument_list|,
name|containers
argument_list|,
name|enrichedAsk
argument_list|,
name|remainingAllocs
argument_list|)
expr_stmt|;
name|ResourceRequest
name|anyAsk
init|=
name|enrichedAsk
operator|.
name|getRequest
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|containers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Opportunistic allocation requested for [priority={}, "
operator|+
literal|"allocationRequestId={}, num_containers={}, capability={}] "
operator|+
literal|"allocated = {}"
argument_list|,
name|anyAsk
operator|.
name|getPriority
argument_list|()
argument_list|,
name|anyAsk
operator|.
name|getAllocationRequestId
argument_list|()
argument_list|,
name|anyAsk
operator|.
name|getNumContainers
argument_list|()
argument_list|,
name|anyAsk
operator|.
name|getCapability
argument_list|()
argument_list|,
name|containers
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|containers
return|;
block|}
DECL|method|allocateContainersInternal (long rmIdentifier, AllocationParams appParams, ContainerIdGenerator idCounter, Set<String> blacklist, Set<String> allocatedNodes, ApplicationAttemptId id, Map<String, RemoteNode> allNodes, String userName, Map<Resource, List<Allocation>> allocations, EnrichedResourceRequest enrichedAsk, int maxAllocations)
specifier|private
name|void
name|allocateContainersInternal
parameter_list|(
name|long
name|rmIdentifier
parameter_list|,
name|AllocationParams
name|appParams
parameter_list|,
name|ContainerIdGenerator
name|idCounter
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|blacklist
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|allocatedNodes
parameter_list|,
name|ApplicationAttemptId
name|id
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteNode
argument_list|>
name|allNodes
parameter_list|,
name|String
name|userName
parameter_list|,
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Allocation
argument_list|>
argument_list|>
name|allocations
parameter_list|,
name|EnrichedResourceRequest
name|enrichedAsk
parameter_list|,
name|int
name|maxAllocations
parameter_list|)
throws|throws
name|YarnException
block|{
if|if
condition|(
name|allNodes
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No nodes currently available to "
operator|+
literal|"allocate OPPORTUNISTIC containers."
argument_list|)
expr_stmt|;
return|return;
block|}
name|ResourceRequest
name|anyAsk
init|=
name|enrichedAsk
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|int
name|toAllocate
init|=
name|anyAsk
operator|.
name|getNumContainers
argument_list|()
operator|-
operator|(
name|allocations
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
name|allocations
operator|.
name|get
argument_list|(
name|anyAsk
operator|.
name|getCapability
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
name|toAllocate
operator|=
name|Math
operator|.
name|min
argument_list|(
name|toAllocate
argument_list|,
name|appParams
operator|.
name|getMaxAllocationsPerSchedulerKeyPerRound
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxAllocations
operator|>=
literal|0
condition|)
block|{
name|toAllocate
operator|=
name|Math
operator|.
name|min
argument_list|(
name|maxAllocations
argument_list|,
name|toAllocate
argument_list|)
expr_stmt|;
block|}
name|int
name|numAllocated
init|=
literal|0
decl_stmt|;
comment|// Node Candidates are selected as follows:
comment|// * Node local candidates selected in loop == 0
comment|// * Rack local candidates selected in loop == 1
comment|// * From loop == 2 onwards, we revert to off switch allocations.
name|int
name|loopIndex
init|=
name|OFF_SWITCH_LOOP
decl_stmt|;
if|if
condition|(
name|enrichedAsk
operator|.
name|getNodeLocations
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|loopIndex
operator|=
name|NODE_LOCAL_LOOP
expr_stmt|;
block|}
while|while
condition|(
name|numAllocated
operator|<
name|toAllocate
condition|)
block|{
name|Collection
argument_list|<
name|RemoteNode
argument_list|>
name|nodeCandidates
init|=
name|findNodeCandidates
argument_list|(
name|loopIndex
argument_list|,
name|allNodes
argument_list|,
name|blacklist
argument_list|,
name|allocatedNodes
argument_list|,
name|enrichedAsk
argument_list|)
decl_stmt|;
for|for
control|(
name|RemoteNode
name|rNode
range|:
name|nodeCandidates
control|)
block|{
name|String
name|rNodeHost
init|=
name|rNode
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
decl_stmt|;
comment|// Ignore black list
if|if
condition|(
name|blacklist
operator|.
name|contains
argument_list|(
name|rNodeHost
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Nodes for scheduling has a blacklisted node"
operator|+
literal|" ["
operator|+
name|rNodeHost
operator|+
literal|"].."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|location
init|=
name|ResourceRequest
operator|.
name|ANY
decl_stmt|;
if|if
condition|(
name|loopIndex
operator|==
name|NODE_LOCAL_LOOP
condition|)
block|{
if|if
condition|(
name|enrichedAsk
operator|.
name|getNodeLocations
argument_list|()
operator|.
name|contains
argument_list|(
name|rNodeHost
argument_list|)
condition|)
block|{
name|location
operator|=
name|rNodeHost
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
block|}
elseif|else
if|if
condition|(
name|allocatedNodes
operator|.
name|contains
argument_list|(
name|rNodeHost
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Opportunistic container has already been allocated on {}."
argument_list|,
name|rNodeHost
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|loopIndex
operator|==
name|RACK_LOCAL_LOOP
condition|)
block|{
if|if
condition|(
name|enrichedAsk
operator|.
name|getRackLocations
argument_list|()
operator|.
name|contains
argument_list|(
name|rNode
operator|.
name|getRackName
argument_list|()
argument_list|)
condition|)
block|{
name|location
operator|=
name|rNode
operator|.
name|getRackName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
block|}
name|Container
name|container
init|=
name|createContainer
argument_list|(
name|rmIdentifier
argument_list|,
name|appParams
argument_list|,
name|idCounter
argument_list|,
name|id
argument_list|,
name|userName
argument_list|,
name|allocations
argument_list|,
name|location
argument_list|,
name|anyAsk
argument_list|,
name|rNode
argument_list|)
decl_stmt|;
name|numAllocated
operator|++
expr_stmt|;
name|updateMetrics
argument_list|(
name|loopIndex
argument_list|)
expr_stmt|;
name|allocatedNodes
operator|.
name|add
argument_list|(
name|rNodeHost
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Allocated ["
operator|+
name|container
operator|.
name|getId
argument_list|()
operator|+
literal|"] as opportunistic at "
operator|+
literal|"location ["
operator|+
name|location
operator|+
literal|"]"
argument_list|)
expr_stmt|;
if|if
condition|(
name|numAllocated
operator|>=
name|toAllocate
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|loopIndex
operator|==
name|NODE_LOCAL_LOOP
operator|&&
name|enrichedAsk
operator|.
name|getRackLocations
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|loopIndex
operator|=
name|RACK_LOCAL_LOOP
expr_stmt|;
block|}
else|else
block|{
name|loopIndex
operator|++
expr_stmt|;
block|}
comment|// Handle case where there are no nodes remaining after blacklist is
comment|// considered.
if|if
condition|(
name|loopIndex
operator|>
name|OFF_SWITCH_LOOP
operator|&&
name|numAllocated
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to allocate any opportunistic containers."
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|updateMetrics (int loopIndex)
specifier|private
name|void
name|updateMetrics
parameter_list|(
name|int
name|loopIndex
parameter_list|)
block|{
name|OpportunisticSchedulerMetrics
name|metrics
init|=
name|OpportunisticSchedulerMetrics
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
if|if
condition|(
name|loopIndex
operator|==
name|NODE_LOCAL_LOOP
condition|)
block|{
name|metrics
operator|.
name|incrNodeLocalOppContainers
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|loopIndex
operator|==
name|RACK_LOCAL_LOOP
condition|)
block|{
name|metrics
operator|.
name|incrRackLocalOppContainers
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|metrics
operator|.
name|incrOffSwitchOppContainers
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|findNodeCandidates (int loopIndex, Map<String, RemoteNode> allNodes, Set<String> blackList, Set<String> allocatedNodes, EnrichedResourceRequest enrichedRR)
specifier|private
name|Collection
argument_list|<
name|RemoteNode
argument_list|>
name|findNodeCandidates
parameter_list|(
name|int
name|loopIndex
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteNode
argument_list|>
name|allNodes
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|blackList
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|allocatedNodes
parameter_list|,
name|EnrichedResourceRequest
name|enrichedRR
parameter_list|)
block|{
name|LinkedList
argument_list|<
name|RemoteNode
argument_list|>
name|retList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|partition
init|=
name|getRequestPartition
argument_list|(
name|enrichedRR
argument_list|)
decl_stmt|;
if|if
condition|(
name|loopIndex
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|RemoteNode
name|remoteNode
range|:
name|allNodes
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|partition
argument_list|,
name|getRemoteNodePartition
argument_list|(
name|remoteNode
argument_list|)
argument_list|)
condition|)
block|{
name|retList
operator|.
name|add
argument_list|(
name|remoteNode
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|retList
return|;
block|}
else|else
block|{
name|int
name|numContainers
init|=
name|enrichedRR
operator|.
name|getRequest
argument_list|()
operator|.
name|getNumContainers
argument_list|()
decl_stmt|;
while|while
condition|(
name|numContainers
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|loopIndex
operator|==
literal|0
condition|)
block|{
comment|// Node local candidates
name|numContainers
operator|=
name|collectNodeLocalCandidates
argument_list|(
name|allNodes
argument_list|,
name|enrichedRR
argument_list|,
name|retList
argument_list|,
name|numContainers
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Rack local candidates
name|numContainers
operator|=
name|collectRackLocalCandidates
argument_list|(
name|allNodes
argument_list|,
name|enrichedRR
argument_list|,
name|retList
argument_list|,
name|blackList
argument_list|,
name|allocatedNodes
argument_list|,
name|numContainers
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numContainers
operator|==
name|enrichedRR
operator|.
name|getRequest
argument_list|()
operator|.
name|getNumContainers
argument_list|()
condition|)
block|{
comment|// If there is no change in numContainers, then there is no point
comment|// in looping again.
break|break;
block|}
block|}
return|return
name|retList
return|;
block|}
block|}
DECL|method|collectRackLocalCandidates (Map<String, RemoteNode> allNodes, EnrichedResourceRequest enrichedRR, LinkedList<RemoteNode> retList, Set<String> blackList, Set<String> allocatedNodes, int numContainers)
specifier|private
name|int
name|collectRackLocalCandidates
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteNode
argument_list|>
name|allNodes
parameter_list|,
name|EnrichedResourceRequest
name|enrichedRR
parameter_list|,
name|LinkedList
argument_list|<
name|RemoteNode
argument_list|>
name|retList
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|blackList
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|allocatedNodes
parameter_list|,
name|int
name|numContainers
parameter_list|)
block|{
name|String
name|partition
init|=
name|getRequestPartition
argument_list|(
name|enrichedRR
argument_list|)
decl_stmt|;
for|for
control|(
name|RemoteNode
name|rNode
range|:
name|allNodes
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|partition
argument_list|,
name|getRemoteNodePartition
argument_list|(
name|rNode
argument_list|)
argument_list|)
operator|&&
name|enrichedRR
operator|.
name|getRackLocations
argument_list|()
operator|.
name|contains
argument_list|(
name|rNode
operator|.
name|getRackName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|rHost
init|=
name|rNode
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|blackList
operator|.
name|contains
argument_list|(
name|rHost
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|allocatedNodes
operator|.
name|contains
argument_list|(
name|rHost
argument_list|)
condition|)
block|{
name|retList
operator|.
name|addLast
argument_list|(
name|rNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|retList
operator|.
name|addFirst
argument_list|(
name|rNode
argument_list|)
expr_stmt|;
name|numContainers
operator|--
expr_stmt|;
block|}
block|}
if|if
condition|(
name|numContainers
operator|==
literal|0
condition|)
block|{
break|break;
block|}
block|}
return|return
name|numContainers
return|;
block|}
DECL|method|collectNodeLocalCandidates (Map<String, RemoteNode> allNodes, EnrichedResourceRequest enrichedRR, List<RemoteNode> retList, int numContainers)
specifier|private
name|int
name|collectNodeLocalCandidates
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteNode
argument_list|>
name|allNodes
parameter_list|,
name|EnrichedResourceRequest
name|enrichedRR
parameter_list|,
name|List
argument_list|<
name|RemoteNode
argument_list|>
name|retList
parameter_list|,
name|int
name|numContainers
parameter_list|)
block|{
name|String
name|partition
init|=
name|getRequestPartition
argument_list|(
name|enrichedRR
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|nodeName
range|:
name|enrichedRR
operator|.
name|getNodeLocations
argument_list|()
control|)
block|{
name|RemoteNode
name|remoteNode
init|=
name|allNodes
operator|.
name|get
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|remoteNode
operator|!=
literal|null
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|partition
argument_list|,
name|getRemoteNodePartition
argument_list|(
name|remoteNode
argument_list|)
argument_list|)
condition|)
block|{
name|retList
operator|.
name|add
argument_list|(
name|remoteNode
argument_list|)
expr_stmt|;
name|numContainers
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|numContainers
operator|==
literal|0
condition|)
block|{
break|break;
block|}
block|}
return|return
name|numContainers
return|;
block|}
block|}
end_class

end_unit

