begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.lib
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_comment
comment|/** ZK Registration Library  * currently does not use any authorization  */
end_comment

begin_class
DECL|class|ZKClient
specifier|public
class|class
name|ZKClient
block|{
DECL|field|zkClient
specifier|private
name|ZooKeeper
name|zkClient
decl_stmt|;
comment|/**    * the zookeeper client library to     * talk to zookeeper     * @param string the host    * @throws throws IOException    */
DECL|method|ZKClient (String string)
specifier|public
name|ZKClient
parameter_list|(
name|String
name|string
parameter_list|)
throws|throws
name|IOException
block|{
name|zkClient
operator|=
operator|new
name|ZooKeeper
argument_list|(
name|string
argument_list|,
literal|30000
argument_list|,
operator|new
name|ZKWatcher
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * register the service to a specific path    * @param path the path in zookeeper namespace to register to    * @param data the data that is part of this registration    * @throws IOException    * @throws InterruptedException    */
DECL|method|registerService (String path, String data)
specifier|public
name|void
name|registerService
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|data
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
try|try
block|{
name|zkClient
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
name|ZooDefs
operator|.
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ke
argument_list|)
throw|;
block|}
block|}
comment|/**    * unregister the service.     * @param path the path at which the service was registered    * @throws IOException    * @throws InterruptedException    */
DECL|method|unregisterService (String path)
specifier|public
name|void
name|unregisterService
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
try|try
block|{
name|zkClient
operator|.
name|delete
argument_list|(
name|path
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ke
argument_list|)
throw|;
block|}
block|}
comment|/**    * list the services registered under a path    * @param path the path under which services are    * registered    * @return the list of names of services registered    * @throws IOException     * @throws InterruptedException    */
DECL|method|listServices (String path)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listServices
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
literal|null
decl_stmt|;
try|try
block|{
name|children
operator|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ke
argument_list|)
throw|;
block|}
return|return
name|children
return|;
block|}
comment|/**    * get data published by the service at the registration address    * @param path the path where the service is registered     * @return  the data of the registered service    * @throws IOException    * @throws InterruptedException    */
DECL|method|getServiceData (String path)
specifier|public
name|String
name|getServiceData
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|data
decl_stmt|;
try|try
block|{
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
name|byte
index|[]
name|byteData
init|=
name|zkClient
operator|.
name|getData
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
name|stat
argument_list|)
decl_stmt|;
name|data
operator|=
operator|new
name|String
argument_list|(
name|byteData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ke
argument_list|)
throw|;
block|}
return|return
name|data
return|;
block|}
comment|/**    * a watcher class that handles what events from    * zookeeper.    *    */
DECL|class|ZKWatcher
specifier|private
specifier|static
class|class
name|ZKWatcher
implements|implements
name|Watcher
block|{
annotation|@
name|Override
DECL|method|process (WatchedEvent arg0)
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|arg0
parameter_list|)
block|{            }
block|}
block|}
end_class

end_unit

