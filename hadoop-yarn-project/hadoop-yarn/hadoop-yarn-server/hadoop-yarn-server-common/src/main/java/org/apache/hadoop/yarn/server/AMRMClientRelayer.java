begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationMasterProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceBlacklistRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|SchedulingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|UpdateContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|UpdatedContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|AMRMClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|ClientRMProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ApplicationMasterNotRegisteredException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidApplicationMasterRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|metrics
operator|.
name|AMRMClientRelayerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|scheduler
operator|.
name|ResourceRequestSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|scheduler
operator|.
name|ResourceRequestSetKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * A component that sits in between AMRMClient(Impl) and Yarn RM. It remembers  * pending requests similar to AMRMClient, and handles RM re-sync automatically  * without propagate the re-sync exception back to AMRMClient.  */
end_comment

begin_class
DECL|class|AMRMClientRelayer
specifier|public
class|class
name|AMRMClientRelayer
extends|extends
name|AbstractService
implements|implements
name|ApplicationMasterProtocol
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AMRMClientRelayer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rmClient
specifier|private
name|ApplicationMasterProtocol
name|rmClient
decl_stmt|;
comment|/**    * The original registration request that was sent by the AM. This instance is    * reused to register/re-register with all the sub-cluster RMs.    */
DECL|field|amRegistrationRequest
specifier|private
name|RegisterApplicationMasterRequest
name|amRegistrationRequest
decl_stmt|;
comment|/**    * Similar to AMRMClientImpl, all data structures below have two versions:    *    * The remote ones are all the pending requests that RM has not fulfill yet.    * Whenever RM fails over, we re-register and then full re-send all these    * pending requests.    *    * The non-remote ones are the requests that RM has not received yet. When RM    * throws non-fail-over exception back, the request is considered not received    * by RM. We will merge with new requests and re-send in the next heart beat.    */
DECL|field|remotePendingAsks
specifier|private
name|Map
argument_list|<
name|ResourceRequestSetKey
argument_list|,
name|ResourceRequestSet
argument_list|>
name|remotePendingAsks
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Same as AMRMClientImpl, we need to use a custom comparator that does not    * look at ResourceRequest.getNumContainers() here. TreeSet allows a custom    * comparator.    */
DECL|field|ask
specifier|private
name|Set
argument_list|<
name|ResourceRequest
argument_list|>
name|ask
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
operator|new
name|ResourceRequest
operator|.
name|ResourceRequestComparator
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Data structures for pending and allocate latency metrics. This only applies    * for requests with non-zero allocationRequestId.    */
DECL|field|pendingCountForMetrics
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|pendingCountForMetrics
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|askTimeStamp
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|askTimeStamp
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// List of allocated containerId to avoid double counting
DECL|field|knownContainers
specifier|private
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|knownContainers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|remotePendingRelease
specifier|private
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|remotePendingRelease
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|release
specifier|private
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|release
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|remoteBlacklistedNodes
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|remoteBlacklistedNodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|blacklistAdditions
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|blacklistRemovals
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|blacklistRemovals
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|remotePendingChange
specifier|private
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|UpdateContainerRequest
argument_list|>
name|remotePendingChange
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|change
specifier|private
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|UpdateContainerRequest
argument_list|>
name|change
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|changeTimeStamp
specifier|private
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|Long
argument_list|>
name|changeTimeStamp
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|remotePendingSchedRequest
specifier|private
name|Map
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|,
name|List
argument_list|<
name|SchedulingRequest
argument_list|>
argument_list|>
name|remotePendingSchedRequest
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|schedulingRequest
specifier|private
name|List
argument_list|<
name|SchedulingRequest
argument_list|>
name|schedulingRequest
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|appId
specifier|private
name|ApplicationId
name|appId
decl_stmt|;
comment|// Normally -1, otherwise will override responseId with this value in the next
comment|// heartbeat
DECL|field|resetResponseId
specifier|private
specifier|volatile
name|int
name|resetResponseId
decl_stmt|;
DECL|field|rmId
specifier|private
name|String
name|rmId
init|=
literal|""
decl_stmt|;
DECL|field|shutdown
specifier|private
specifier|volatile
name|boolean
name|shutdown
init|=
literal|false
decl_stmt|;
DECL|field|metrics
specifier|private
name|AMRMClientRelayerMetrics
name|metrics
decl_stmt|;
DECL|method|AMRMClientRelayer ()
specifier|public
name|AMRMClientRelayer
parameter_list|()
block|{
name|super
argument_list|(
name|AMRMClientRelayer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|resetResponseId
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|AMRMClientRelayerMetrics
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|this
operator|.
name|rmClient
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|appId
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|rmId
operator|=
literal|""
expr_stmt|;
block|}
DECL|method|AMRMClientRelayer (ApplicationMasterProtocol rmClient, ApplicationId appId, String rmId)
specifier|public
name|AMRMClientRelayer
parameter_list|(
name|ApplicationMasterProtocol
name|rmClient
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|String
name|rmId
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|rmClient
operator|=
name|rmClient
expr_stmt|;
name|this
operator|.
name|appId
operator|=
name|appId
expr_stmt|;
name|this
operator|.
name|rmId
operator|=
name|rmId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|rmClient
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|rmClient
operator|=
name|ClientRMProxy
operator|.
name|createRMProxy
argument_list|(
name|conf
argument_list|,
name|ApplicationMasterProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|rmClient
operator|!=
literal|null
condition|)
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|this
operator|.
name|rmClient
argument_list|)
expr_stmt|;
block|}
name|shutdown
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
DECL|method|setAMRegistrationRequest ( RegisterApplicationMasterRequest registerRequest)
specifier|public
name|void
name|setAMRegistrationRequest
parameter_list|(
name|RegisterApplicationMasterRequest
name|registerRequest
parameter_list|)
block|{
name|this
operator|.
name|amRegistrationRequest
operator|=
name|registerRequest
expr_stmt|;
block|}
DECL|method|getRMIdentifier ()
specifier|public
name|String
name|getRMIdentifier
parameter_list|()
block|{
return|return
name|this
operator|.
name|rmId
return|;
block|}
DECL|method|setRMClient (ApplicationMasterProtocol client)
specifier|public
name|void
name|setRMClient
parameter_list|(
name|ApplicationMasterProtocol
name|client
parameter_list|)
block|{
name|this
operator|.
name|rmClient
operator|=
name|client
expr_stmt|;
block|}
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
comment|// On finish, clear out our pending count from the metrics
comment|// and set the shut down flag so no more pending requests get
comment|// added
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|this
operator|.
name|shutdown
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Shutdown called twice for AMRMClientRelayer for RM "
operator|+
name|this
operator|.
name|rmId
argument_list|)
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|shutdown
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ResourceRequestSetKey
argument_list|,
name|ResourceRequestSet
argument_list|>
name|entry
range|:
name|this
operator|.
name|remotePendingAsks
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ResourceRequestSetKey
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|getAllocationRequestId
argument_list|()
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|metrics
operator|.
name|decrClientPending
argument_list|(
name|this
operator|.
name|rmId
argument_list|,
name|AMRMClientRelayerMetrics
operator|.
name|getRequestType
argument_list|(
name|key
operator|.
name|getExeType
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|askTimeStamp
operator|.
name|remove
argument_list|(
name|key
operator|.
name|getAllocationRequestId
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
name|pending
init|=
name|this
operator|.
name|pendingCountForMetrics
operator|.
name|remove
argument_list|(
name|key
operator|.
name|getAllocationRequestId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pending
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"pendingCountForMetrics not found for key "
operator|+
name|key
operator|+
literal|" during shutdown"
argument_list|)
throw|;
block|}
name|this
operator|.
name|metrics
operator|.
name|decrClientPending
argument_list|(
name|this
operator|.
name|rmId
argument_list|,
name|AMRMClientRelayerMetrics
operator|.
name|getRequestType
argument_list|(
name|key
operator|.
name|getExeType
argument_list|()
argument_list|)
argument_list|,
name|pending
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|UpdateContainerRequest
name|req
range|:
name|remotePendingChange
operator|.
name|values
argument_list|()
control|)
block|{
name|this
operator|.
name|metrics
operator|.
name|decrClientPending
argument_list|(
name|rmId
argument_list|,
name|req
operator|.
name|getContainerUpdateType
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|registerApplicationMaster ( RegisterApplicationMasterRequest request)
specifier|public
name|RegisterApplicationMasterResponse
name|registerApplicationMaster
parameter_list|(
name|RegisterApplicationMasterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|this
operator|.
name|amRegistrationRequest
operator|=
name|request
expr_stmt|;
return|return
name|this
operator|.
name|rmClient
operator|.
name|registerApplicationMaster
argument_list|(
name|request
argument_list|)
return|;
block|}
comment|/**    * After an RM failover, there might be more than one    * allocate/finishApplicationMaster call thread (due to RPC timeout and retry)    * doing the auto re-register concurrently. As a result, we need to swallow    * the already register exception thrown by the new RM.    */
DECL|method|reRegisterApplicationMaster ( RegisterApplicationMasterRequest request)
specifier|private
name|void
name|reRegisterApplicationMaster
parameter_list|(
name|RegisterApplicationMasterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
try|try
block|{
name|registerApplicationMaster
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidApplicationMasterRequestException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|AMRMClientUtils
operator|.
name|APP_ALREADY_REGISTERED_MESSAGE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Concurrent thread successfully re-registered, moving on."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|finishApplicationMaster ( FinishApplicationMasterRequest request)
specifier|public
name|FinishApplicationMasterResponse
name|finishApplicationMaster
parameter_list|(
name|FinishApplicationMasterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
try|try
block|{
return|return
name|this
operator|.
name|rmClient
operator|.
name|finishApplicationMaster
argument_list|(
name|request
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ApplicationMasterNotRegisteredException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Out of sync with RM "
operator|+
name|rmId
operator|+
literal|" for "
operator|+
name|this
operator|.
name|appId
operator|+
literal|", hence resyncing."
argument_list|)
expr_stmt|;
comment|// re register with RM
name|reRegisterApplicationMaster
argument_list|(
name|this
operator|.
name|amRegistrationRequest
argument_list|)
expr_stmt|;
return|return
name|finishApplicationMaster
argument_list|(
name|request
argument_list|)
return|;
block|}
block|}
DECL|method|addNewAllocateRequest (AllocateRequest allocateRequest)
specifier|private
name|void
name|addNewAllocateRequest
parameter_list|(
name|AllocateRequest
name|allocateRequest
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// update the data structures first
name|addNewAsks
argument_list|(
name|allocateRequest
operator|.
name|getAskList
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|allocateRequest
operator|.
name|getReleaseList
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|remotePendingRelease
operator|.
name|addAll
argument_list|(
name|allocateRequest
operator|.
name|getReleaseList
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|release
operator|.
name|addAll
argument_list|(
name|allocateRequest
operator|.
name|getReleaseList
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allocateRequest
operator|.
name|getResourceBlacklistRequest
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|allocateRequest
operator|.
name|getResourceBlacklistRequest
argument_list|()
operator|.
name|getBlacklistAdditions
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|remoteBlacklistedNodes
operator|.
name|addAll
argument_list|(
name|allocateRequest
operator|.
name|getResourceBlacklistRequest
argument_list|()
operator|.
name|getBlacklistAdditions
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|blacklistAdditions
operator|.
name|addAll
argument_list|(
name|allocateRequest
operator|.
name|getResourceBlacklistRequest
argument_list|()
operator|.
name|getBlacklistAdditions
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allocateRequest
operator|.
name|getResourceBlacklistRequest
argument_list|()
operator|.
name|getBlacklistRemovals
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|remoteBlacklistedNodes
operator|.
name|removeAll
argument_list|(
name|allocateRequest
operator|.
name|getResourceBlacklistRequest
argument_list|()
operator|.
name|getBlacklistRemovals
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|blacklistRemovals
operator|.
name|addAll
argument_list|(
name|allocateRequest
operator|.
name|getResourceBlacklistRequest
argument_list|()
operator|.
name|getBlacklistRemovals
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|allocateRequest
operator|.
name|getUpdateRequests
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|UpdateContainerRequest
name|update
range|:
name|allocateRequest
operator|.
name|getUpdateRequests
argument_list|()
control|)
block|{
name|UpdateContainerRequest
name|req
init|=
name|this
operator|.
name|remotePendingChange
operator|.
name|put
argument_list|(
name|update
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|update
argument_list|)
decl_stmt|;
name|this
operator|.
name|changeTimeStamp
operator|.
name|put
argument_list|(
name|update
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|req
operator|==
literal|null
condition|)
block|{
comment|// If this is a brand new request, all we have to do is increment
name|this
operator|.
name|metrics
operator|.
name|incrClientPending
argument_list|(
name|rmId
argument_list|,
name|update
operator|.
name|getContainerUpdateType
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|req
operator|.
name|getContainerUpdateType
argument_list|()
operator|!=
name|update
operator|.
name|getContainerUpdateType
argument_list|()
condition|)
block|{
comment|// If this is replacing a request with a different update type, we
comment|// need to decrement the replaced type
name|this
operator|.
name|metrics
operator|.
name|decrClientPending
argument_list|(
name|rmId
argument_list|,
name|req
operator|.
name|getContainerUpdateType
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|metrics
operator|.
name|incrClientPending
argument_list|(
name|rmId
argument_list|,
name|update
operator|.
name|getContainerUpdateType
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|change
operator|.
name|put
argument_list|(
name|update
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|update
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|allocateRequest
operator|.
name|getSchedulingRequests
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|AMRMClientUtils
operator|.
name|addToOutstandingSchedulingRequests
argument_list|(
name|allocateRequest
operator|.
name|getSchedulingRequests
argument_list|()
argument_list|,
name|this
operator|.
name|remotePendingSchedRequest
argument_list|)
expr_stmt|;
name|this
operator|.
name|schedulingRequest
operator|.
name|addAll
argument_list|(
name|allocateRequest
operator|.
name|getSchedulingRequests
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|allocate (AllocateRequest allocateRequest)
specifier|public
name|AllocateResponse
name|allocate
parameter_list|(
name|AllocateRequest
name|allocateRequest
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|AllocateResponse
name|allocateResponse
init|=
literal|null
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|this
operator|.
name|shutdown
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Allocate called after AMRMClientRelayer for "
operator|+
literal|"RM "
operator|+
name|rmId
operator|+
literal|" shutdown."
argument_list|)
throw|;
block|}
name|addNewAllocateRequest
argument_list|(
name|allocateRequest
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
name|askList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|ask
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ResourceRequest
name|r
range|:
name|ask
control|)
block|{
comment|// create a copy of ResourceRequest as we might change it while the
comment|// RPC layer is using it to send info across
name|askList
operator|.
name|add
argument_list|(
name|ResourceRequest
operator|.
name|clone
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|allocateRequest
operator|=
name|AllocateRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|responseId
argument_list|(
name|allocateRequest
operator|.
name|getResponseId
argument_list|()
argument_list|)
operator|.
name|progress
argument_list|(
name|allocateRequest
operator|.
name|getProgress
argument_list|()
argument_list|)
operator|.
name|askList
argument_list|(
name|askList
argument_list|)
operator|.
name|releaseList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|this
operator|.
name|release
argument_list|)
argument_list|)
operator|.
name|resourceBlacklistRequest
argument_list|(
name|ResourceBlacklistRequest
operator|.
name|newInstance
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|this
operator|.
name|blacklistAdditions
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|this
operator|.
name|blacklistRemovals
argument_list|)
argument_list|)
argument_list|)
operator|.
name|updateRequests
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|this
operator|.
name|change
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
operator|.
name|schedulingRequests
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|this
operator|.
name|schedulingRequest
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|resetResponseId
operator|!=
operator|-
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Override allocate responseId from "
operator|+
name|allocateRequest
operator|.
name|getResponseId
argument_list|()
operator|+
literal|" to "
operator|+
name|this
operator|.
name|resetResponseId
operator|+
literal|" for "
operator|+
name|this
operator|.
name|appId
argument_list|)
expr_stmt|;
name|allocateRequest
operator|.
name|setResponseId
argument_list|(
name|this
operator|.
name|resetResponseId
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Do the actual allocate call
try|try
block|{
name|allocateResponse
operator|=
name|this
operator|.
name|rmClient
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
expr_stmt|;
comment|// Heartbeat succeeded, wipe out responseId overriding
name|this
operator|.
name|resetResponseId
operator|=
operator|-
literal|1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ApplicationMasterNotRegisteredException
name|e
parameter_list|)
block|{
comment|// This is a retriable exception - we will re register and mke a
comment|// recursive call to retry
name|LOG
operator|.
name|warn
argument_list|(
literal|"ApplicationMaster is out of sync with RM "
operator|+
name|rmId
operator|+
literal|" for "
operator|+
name|this
operator|.
name|appId
operator|+
literal|", hence resyncing."
argument_list|)
expr_stmt|;
name|this
operator|.
name|metrics
operator|.
name|incrRMMasterSlaveSwitch
argument_list|(
name|this
operator|.
name|rmId
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// Add all remotePending data into to-send data structures
for|for
control|(
name|ResourceRequestSet
name|requestSet
range|:
name|this
operator|.
name|remotePendingAsks
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|ResourceRequest
name|rr
range|:
name|requestSet
operator|.
name|getRRs
argument_list|()
control|)
block|{
name|addResourceRequestToAsk
argument_list|(
name|rr
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|release
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|remotePendingRelease
argument_list|)
expr_stmt|;
name|this
operator|.
name|blacklistAdditions
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|remoteBlacklistedNodes
argument_list|)
expr_stmt|;
name|this
operator|.
name|change
operator|.
name|putAll
argument_list|(
name|this
operator|.
name|remotePendingChange
argument_list|)
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|SchedulingRequest
argument_list|>
name|reqs
range|:
name|this
operator|.
name|remotePendingSchedRequest
operator|.
name|values
argument_list|()
control|)
block|{
name|this
operator|.
name|schedulingRequest
operator|.
name|addAll
argument_list|(
name|reqs
argument_list|)
expr_stmt|;
block|}
block|}
comment|// re-register with RM, then retry allocate recursively
name|reRegisterApplicationMaster
argument_list|(
name|this
operator|.
name|amRegistrationRequest
argument_list|)
expr_stmt|;
comment|// Reset responseId after re-register
name|allocateRequest
operator|.
name|setResponseId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|allocateResponse
operator|=
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
expr_stmt|;
return|return
name|allocateResponse
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Unexpected exception - rethrow and increment heart beat failure metric
name|this
operator|.
name|metrics
operator|.
name|addHeartbeatFailure
argument_list|(
name|this
operator|.
name|rmId
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
argument_list|)
expr_stmt|;
comment|// If RM is complaining about responseId out of sync, force reset next
comment|// time
if|if
condition|(
name|t
operator|instanceof
name|InvalidApplicationMasterRequestException
condition|)
block|{
name|int
name|responseId
init|=
name|AMRMClientUtils
operator|.
name|parseExpectedResponseIdFromException
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|responseId
operator|!=
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|resetResponseId
operator|=
name|responseId
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ResponseId out of sync with RM, expect "
operator|+
name|responseId
operator|+
literal|" but "
operator|+
name|allocateRequest
operator|.
name|getResponseId
argument_list|()
operator|+
literal|" used by "
operator|+
name|this
operator|.
name|appId
operator|+
literal|". Will override in the next allocate."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to parse expected responseId out of exception for "
operator|+
name|this
operator|.
name|appId
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
name|t
throw|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|this
operator|.
name|shutdown
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Allocate call succeeded for "
operator|+
name|this
operator|.
name|appId
operator|+
literal|" after AMRMClientRelayer for RM "
operator|+
name|rmId
operator|+
literal|" shutdown."
argument_list|)
throw|;
block|}
name|updateMetrics
argument_list|(
name|allocateResponse
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
name|AMRMClientUtils
operator|.
name|removeFromOutstandingSchedulingRequests
argument_list|(
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|,
name|this
operator|.
name|remotePendingSchedRequest
argument_list|)
expr_stmt|;
name|AMRMClientUtils
operator|.
name|removeFromOutstandingSchedulingRequests
argument_list|(
name|allocateResponse
operator|.
name|getContainersFromPreviousAttempts
argument_list|()
argument_list|,
name|this
operator|.
name|remotePendingSchedRequest
argument_list|)
expr_stmt|;
name|this
operator|.
name|ask
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|release
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|blacklistAdditions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|blacklistRemovals
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|change
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|schedulingRequest
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|allocateResponse
return|;
block|}
block|}
DECL|method|updateMetrics (AllocateResponse allocateResponse, long startTime)
specifier|private
name|void
name|updateMetrics
parameter_list|(
name|AllocateResponse
name|allocateResponse
parameter_list|,
name|long
name|startTime
parameter_list|)
block|{
name|this
operator|.
name|metrics
operator|.
name|addHeartbeatSuccess
argument_list|(
name|this
operator|.
name|rmId
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
argument_list|)
expr_stmt|;
comment|// Process the allocate response from RM
if|if
condition|(
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Container
name|container
range|:
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
control|)
block|{
comment|// Do not update metrics aggressively for AllocationRequestId zero
comment|// case. Also avoid double count to due to re-send
if|if
condition|(
name|this
operator|.
name|knownContainers
operator|.
name|add
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|this
operator|.
name|metrics
operator|.
name|addFulfilledQPS
argument_list|(
name|this
operator|.
name|rmId
argument_list|,
name|AMRMClientRelayerMetrics
operator|.
name|getRequestType
argument_list|(
name|container
operator|.
name|getExecutionType
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|container
operator|.
name|getAllocationRequestId
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|Integer
name|count
init|=
name|this
operator|.
name|pendingCountForMetrics
operator|.
name|get
argument_list|(
name|container
operator|.
name|getAllocationRequestId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|!=
literal|null
operator|&&
name|count
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|pendingCountForMetrics
operator|.
name|put
argument_list|(
name|container
operator|.
name|getAllocationRequestId
argument_list|()
argument_list|,
operator|--
name|count
argument_list|)
expr_stmt|;
name|this
operator|.
name|metrics
operator|.
name|decrClientPending
argument_list|(
name|this
operator|.
name|rmId
argument_list|,
name|AMRMClientRelayerMetrics
operator|.
name|getRequestType
argument_list|(
name|container
operator|.
name|getExecutionType
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|metrics
operator|.
name|addFulfillLatency
argument_list|(
name|this
operator|.
name|rmId
argument_list|,
name|AMRMClientRelayerMetrics
operator|.
name|getRequestType
argument_list|(
name|container
operator|.
name|getExecutionType
argument_list|()
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|this
operator|.
name|askTimeStamp
operator|.
name|get
argument_list|(
name|container
operator|.
name|getAllocationRequestId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|allocateResponse
operator|.
name|getCompletedContainersStatuses
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ContainerStatus
name|container
range|:
name|allocateResponse
operator|.
name|getCompletedContainersStatuses
argument_list|()
control|)
block|{
name|this
operator|.
name|remotePendingRelease
operator|.
name|remove
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|UpdateContainerRequest
name|req
init|=
name|this
operator|.
name|remotePendingChange
operator|.
name|remove
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|req
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|metrics
operator|.
name|decrClientPending
argument_list|(
name|rmId
argument_list|,
name|req
operator|.
name|getContainerUpdateType
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|knownContainers
operator|.
name|remove
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|allocateResponse
operator|.
name|getUpdatedContainers
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|UpdatedContainer
name|updatedContainer
range|:
name|allocateResponse
operator|.
name|getUpdatedContainers
argument_list|()
control|)
block|{
name|UpdateContainerRequest
name|req
init|=
name|this
operator|.
name|remotePendingChange
operator|.
name|remove
argument_list|(
name|updatedContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|req
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|metrics
operator|.
name|decrClientPending
argument_list|(
name|rmId
argument_list|,
name|req
operator|.
name|getContainerUpdateType
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|metrics
operator|.
name|addFulfillLatency
argument_list|(
name|rmId
argument_list|,
name|req
operator|.
name|getContainerUpdateType
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|this
operator|.
name|changeTimeStamp
operator|.
name|remove
argument_list|(
name|req
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|metrics
operator|.
name|addFulfilledQPS
argument_list|(
name|rmId
argument_list|,
name|req
operator|.
name|getContainerUpdateType
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|addNewAsks (List<ResourceRequest> asks)
specifier|private
name|void
name|addNewAsks
parameter_list|(
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|asks
parameter_list|)
throws|throws
name|YarnException
block|{
name|Set
argument_list|<
name|ResourceRequestSetKey
argument_list|>
name|touchedKeys
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ResourceRequestSetKey
argument_list|>
name|nonZeroNewKeys
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ResourceRequest
name|rr
range|:
name|asks
control|)
block|{
name|addResourceRequestToAsk
argument_list|(
name|rr
argument_list|)
expr_stmt|;
name|ResourceRequestSetKey
name|key
init|=
operator|new
name|ResourceRequestSetKey
argument_list|(
name|rr
argument_list|)
decl_stmt|;
name|touchedKeys
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|ResourceRequestSet
name|askSet
init|=
name|this
operator|.
name|remotePendingAsks
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|askSet
operator|==
literal|null
condition|)
block|{
name|askSet
operator|=
operator|new
name|ResourceRequestSet
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|this
operator|.
name|remotePendingAsks
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|askSet
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|.
name|getAllocationRequestId
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|nonZeroNewKeys
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|numContainers
init|=
name|askSet
operator|.
name|getNumContainers
argument_list|()
decl_stmt|;
name|askSet
operator|.
name|addAndOverrideRR
argument_list|(
name|rr
argument_list|)
expr_stmt|;
name|int
name|deltaContainers
init|=
name|askSet
operator|.
name|getNumContainers
argument_list|()
operator|-
name|numContainers
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|getAllocationRequestId
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// AllocationRequestId is zero, keep track of pending count in the
comment|// delayed but correct way. Allocation latency is not supported
if|if
condition|(
name|deltaContainers
operator|!=
literal|0
condition|)
block|{
name|this
operator|.
name|metrics
operator|.
name|incrClientPending
argument_list|(
name|this
operator|.
name|rmId
argument_list|,
name|AMRMClientRelayerMetrics
operator|.
name|getRequestType
argument_list|(
name|key
operator|.
name|getExeType
argument_list|()
argument_list|)
argument_list|,
name|deltaContainers
argument_list|)
expr_stmt|;
if|if
condition|(
name|deltaContainers
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|metrics
operator|.
name|addRequestedQPS
argument_list|(
name|this
operator|.
name|rmId
argument_list|,
name|AMRMClientRelayerMetrics
operator|.
name|getRequestType
argument_list|(
name|key
operator|.
name|getExeType
argument_list|()
argument_list|)
argument_list|,
name|deltaContainers
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// AllocationRequestId is non-zero, we do pending decrement and latency
comment|// aggressively. So don't update metrics here. Double check AM is not
comment|// reusing the requestId for more asks
if|if
condition|(
name|deltaContainers
operator|>
literal|0
operator|&&
name|numContainers
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Received new ask ("
operator|+
name|askSet
operator|.
name|getNumContainers
argument_list|()
operator|+
literal|") on top of existing ("
operator|+
name|numContainers
operator|+
literal|") in key "
operator|+
name|key
argument_list|)
throw|;
block|}
block|}
block|}
comment|// Cleanup properly if needed
for|for
control|(
name|ResourceRequestSetKey
name|key
range|:
name|touchedKeys
control|)
block|{
name|ResourceRequestSet
name|askSet
init|=
name|this
operator|.
name|remotePendingAsks
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|askSet
operator|.
name|getNumContainers
argument_list|()
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|remotePendingAsks
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Remove non-any zero RRs
name|askSet
operator|.
name|cleanupZeroNonAnyRR
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Initialize data for pending metrics for each new key
for|for
control|(
name|ResourceRequestSetKey
name|key
range|:
name|nonZeroNewKeys
control|)
block|{
if|if
condition|(
name|remotePendingAsks
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|this
operator|.
name|askTimeStamp
operator|.
name|put
argument_list|(
name|key
operator|.
name|getAllocationRequestId
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|this
operator|.
name|remotePendingAsks
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|getNumContainers
argument_list|()
decl_stmt|;
name|this
operator|.
name|pendingCountForMetrics
operator|.
name|put
argument_list|(
name|key
operator|.
name|getAllocationRequestId
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|this
operator|.
name|metrics
operator|.
name|incrClientPending
argument_list|(
name|this
operator|.
name|rmId
argument_list|,
name|AMRMClientRelayerMetrics
operator|.
name|getRequestType
argument_list|(
name|key
operator|.
name|getExeType
argument_list|()
argument_list|)
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|this
operator|.
name|metrics
operator|.
name|addRequestedQPS
argument_list|(
name|this
operator|.
name|rmId
argument_list|,
name|AMRMClientRelayerMetrics
operator|.
name|getRequestType
argument_list|(
name|key
operator|.
name|getExeType
argument_list|()
argument_list|)
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addResourceRequestToAsk (ResourceRequest remoteRequest)
specifier|private
name|void
name|addResourceRequestToAsk
parameter_list|(
name|ResourceRequest
name|remoteRequest
parameter_list|)
block|{
comment|// The ResourceRequestComparator doesn't look at container count when
comment|// comparing. So we need to make sure the new RR override the old if any
name|this
operator|.
name|ask
operator|.
name|remove
argument_list|(
name|remoteRequest
argument_list|)
expr_stmt|;
name|this
operator|.
name|ask
operator|.
name|add
argument_list|(
name|remoteRequest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
specifier|protected
name|Map
argument_list|<
name|ResourceRequestSetKey
argument_list|,
name|ResourceRequestSet
argument_list|>
DECL|method|getRemotePendingAsks ()
name|getRemotePendingAsks
parameter_list|()
block|{
return|return
name|this
operator|.
name|remotePendingAsks
return|;
block|}
block|}
end_class

end_unit

