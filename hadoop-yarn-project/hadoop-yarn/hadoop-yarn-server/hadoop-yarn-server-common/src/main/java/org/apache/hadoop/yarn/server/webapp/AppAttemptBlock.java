begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|join
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|YarnWebParams
operator|.
name|APPLICATION_ATTEMPT_ID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringEscapeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationBaseProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
operator|.
name|TABLE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
operator|.
name|TBODY
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|HtmlBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|InfoBlock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_class
DECL|class|AppAttemptBlock
specifier|public
class|class
name|AppAttemptBlock
extends|extends
name|HtmlBlock
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AppAttemptBlock
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|appBaseProt
specifier|protected
name|ApplicationBaseProtocol
name|appBaseProt
decl_stmt|;
DECL|field|appAttemptId
specifier|protected
name|ApplicationAttemptId
name|appAttemptId
init|=
literal|null
decl_stmt|;
annotation|@
name|Inject
DECL|method|AppAttemptBlock (ApplicationBaseProtocol appBaseProt, ViewContext ctx)
specifier|public
name|AppAttemptBlock
parameter_list|(
name|ApplicationBaseProtocol
name|appBaseProt
parameter_list|,
name|ViewContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|appBaseProt
operator|=
name|appBaseProt
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|render (Block html)
specifier|protected
name|void
name|render
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
name|String
name|attemptid
init|=
name|$
argument_list|(
name|APPLICATION_ATTEMPT_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|attemptid
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|puts
argument_list|(
literal|"Bad request: requires application attempt ID"
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|appAttemptId
operator|=
name|ApplicationAttemptId
operator|.
name|fromString
argument_list|(
name|attemptid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|puts
argument_list|(
literal|"Invalid application attempt ID: "
operator|+
name|attemptid
argument_list|)
expr_stmt|;
return|return;
block|}
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUGI
argument_list|()
decl_stmt|;
name|ApplicationAttemptReport
name|appAttemptReport
decl_stmt|;
try|try
block|{
specifier|final
name|GetApplicationAttemptReportRequest
name|request
init|=
name|GetApplicationAttemptReportRequest
operator|.
name|newInstance
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
name|appAttemptReport
operator|=
name|appBaseProt
operator|.
name|getApplicationAttemptReport
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationAttemptReport
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|appAttemptReport
operator|=
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|ApplicationAttemptReport
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ApplicationAttemptReport
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|appBaseProt
operator|.
name|getApplicationAttemptReport
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationAttemptReport
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Failed to read the application attempt "
operator|+
name|appAttemptId
operator|+
literal|"."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|html
operator|.
name|p
argument_list|()
operator|.
name|_
argument_list|(
name|message
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|appAttemptReport
operator|==
literal|null
condition|)
block|{
name|puts
argument_list|(
literal|"Application Attempt not found: "
operator|+
name|attemptid
argument_list|)
expr_stmt|;
return|return;
block|}
name|boolean
name|exceptionWhenGetContainerReports
init|=
literal|false
decl_stmt|;
name|Collection
argument_list|<
name|ContainerReport
argument_list|>
name|containers
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|GetContainersRequest
name|request
init|=
name|GetContainersRequest
operator|.
name|newInstance
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
name|containers
operator|=
name|appBaseProt
operator|.
name|getContainers
argument_list|(
name|request
argument_list|)
operator|.
name|getContainerList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|containers
operator|=
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Collection
argument_list|<
name|ContainerReport
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|ContainerReport
argument_list|>
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|appBaseProt
operator|.
name|getContainers
argument_list|(
name|request
argument_list|)
operator|.
name|getContainerList
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|// have this block to suppress the findbugs warning
name|exceptionWhenGetContainerReports
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exceptionWhenGetContainerReports
operator|=
literal|true
expr_stmt|;
block|}
name|AppAttemptInfo
name|appAttempt
init|=
operator|new
name|AppAttemptInfo
argument_list|(
name|appAttemptReport
argument_list|)
decl_stmt|;
name|setTitle
argument_list|(
name|join
argument_list|(
literal|"Application Attempt "
argument_list|,
name|attemptid
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|node
init|=
literal|"N/A"
decl_stmt|;
if|if
condition|(
name|appAttempt
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
operator|&&
name|appAttempt
operator|.
name|getRpcPort
argument_list|()
operator|>=
literal|0
operator|&&
name|appAttempt
operator|.
name|getRpcPort
argument_list|()
operator|<
literal|65536
condition|)
block|{
name|node
operator|=
name|appAttempt
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|appAttempt
operator|.
name|getRpcPort
argument_list|()
expr_stmt|;
block|}
name|generateOverview
argument_list|(
name|appAttemptReport
argument_list|,
name|containers
argument_list|,
name|appAttempt
argument_list|,
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|exceptionWhenGetContainerReports
condition|)
block|{
name|html
operator|.
name|p
argument_list|()
operator|.
name|_
argument_list|(
literal|"Sorry, Failed to get containers for application attempt"
operator|+
name|attemptid
operator|+
literal|"."
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
return|return;
block|}
name|createAttemptHeadRoomTable
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|html
operator|.
name|_
argument_list|(
name|InfoBlock
operator|.
name|class
argument_list|)
expr_stmt|;
name|createTablesForAttemptMetrics
argument_list|(
name|html
argument_list|)
expr_stmt|;
comment|// Container Table
name|TBODY
argument_list|<
name|TABLE
argument_list|<
name|Hamlet
argument_list|>
argument_list|>
name|tbody
init|=
name|html
operator|.
name|table
argument_list|(
literal|"#containers"
argument_list|)
operator|.
name|thead
argument_list|()
operator|.
name|tr
argument_list|()
operator|.
name|th
argument_list|(
literal|".id"
argument_list|,
literal|"Container ID"
argument_list|)
operator|.
name|th
argument_list|(
literal|".node"
argument_list|,
literal|"Node"
argument_list|)
operator|.
name|th
argument_list|(
literal|".exitstatus"
argument_list|,
literal|"Container Exit Status"
argument_list|)
operator|.
name|th
argument_list|(
literal|".logs"
argument_list|,
literal|"Logs"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
operator|.
name|tbody
argument_list|()
decl_stmt|;
name|StringBuilder
name|containersTableData
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"[\n"
argument_list|)
decl_stmt|;
for|for
control|(
name|ContainerReport
name|containerReport
range|:
name|containers
control|)
block|{
name|ContainerInfo
name|container
init|=
operator|new
name|ContainerInfo
argument_list|(
name|containerReport
argument_list|)
decl_stmt|;
name|containersTableData
operator|.
name|append
argument_list|(
literal|"[\"<a href='"
argument_list|)
operator|.
name|append
argument_list|(
name|url
argument_list|(
literal|"container"
argument_list|,
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"'>"
argument_list|)
operator|.
name|append
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"</a>\",\"<a "
argument_list|)
operator|.
name|append
argument_list|(
name|container
operator|.
name|getNodeHttpAddress
argument_list|()
operator|==
literal|null
condition|?
literal|"#"
else|:
literal|"href='"
operator|+
name|container
operator|.
name|getNodeHttpAddress
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"'>"
argument_list|)
operator|.
name|append
argument_list|(
name|container
operator|.
name|getNodeHttpAddress
argument_list|()
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|StringEscapeUtils
operator|.
name|escapeJavaScript
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeHtml
argument_list|(
name|container
operator|.
name|getNodeHttpAddress
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"</a>\",\""
argument_list|)
operator|.
name|append
argument_list|(
name|container
operator|.
name|getContainerExitStatus
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\",\"<a href='"
argument_list|)
operator|.
name|append
argument_list|(
name|container
operator|.
name|getLogUrl
argument_list|()
operator|==
literal|null
condition|?
literal|"#"
else|:
name|container
operator|.
name|getLogUrl
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"'>"
argument_list|)
operator|.
name|append
argument_list|(
name|container
operator|.
name|getLogUrl
argument_list|()
operator|==
literal|null
condition|?
literal|"N/A"
else|:
literal|"Logs"
argument_list|)
operator|.
name|append
argument_list|(
literal|"</a>\"],\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|containersTableData
operator|.
name|charAt
argument_list|(
name|containersTableData
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
operator|==
literal|','
condition|)
block|{
name|containersTableData
operator|.
name|delete
argument_list|(
name|containersTableData
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|,
name|containersTableData
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|containersTableData
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|html
operator|.
name|script
argument_list|()
operator|.
name|$type
argument_list|(
literal|"text/javascript"
argument_list|)
operator|.
name|_
argument_list|(
literal|"var containersTableData="
operator|+
name|containersTableData
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
name|tbody
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
DECL|method|generateOverview (ApplicationAttemptReport appAttemptReport, Collection<ContainerReport> containers, AppAttemptInfo appAttempt, String node)
specifier|protected
name|void
name|generateOverview
parameter_list|(
name|ApplicationAttemptReport
name|appAttemptReport
parameter_list|,
name|Collection
argument_list|<
name|ContainerReport
argument_list|>
name|containers
parameter_list|,
name|AppAttemptInfo
name|appAttempt
parameter_list|,
name|String
name|node
parameter_list|)
block|{
name|String
name|amContainerId
init|=
name|appAttempt
operator|.
name|getAmContainerId
argument_list|()
decl_stmt|;
name|info
argument_list|(
literal|"Application Attempt Overview"
argument_list|)
operator|.
name|_
argument_list|(
literal|"Application Attempt State:"
argument_list|,
name|appAttempt
operator|.
name|getAppAttemptState
argument_list|()
operator|==
literal|null
condition|?
name|UNAVAILABLE
else|:
name|appAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
operator|.
name|_
argument_list|(
literal|"AM Container:"
argument_list|,
name|amContainerId
operator|==
literal|null
operator|||
name|containers
operator|==
literal|null
operator|||
operator|!
name|hasAMContainer
argument_list|(
name|appAttemptReport
operator|.
name|getAMContainerId
argument_list|()
argument_list|,
name|containers
argument_list|)
condition|?
literal|null
else|:
name|root_url
argument_list|(
literal|"container"
argument_list|,
name|amContainerId
argument_list|)
argument_list|,
name|amContainerId
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|amContainerId
argument_list|)
operator|.
name|_
argument_list|(
literal|"Node:"
argument_list|,
name|node
argument_list|)
operator|.
name|_
argument_list|(
literal|"Tracking URL:"
argument_list|,
name|appAttempt
operator|.
name|getTrackingUrl
argument_list|()
operator|==
literal|null
operator|||
name|appAttempt
operator|.
name|getTrackingUrl
argument_list|()
operator|.
name|equals
argument_list|(
name|UNAVAILABLE
argument_list|)
condition|?
literal|null
else|:
name|root_url
argument_list|(
name|appAttempt
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
argument_list|,
name|appAttempt
operator|.
name|getTrackingUrl
argument_list|()
operator|==
literal|null
operator|||
name|appAttempt
operator|.
name|getTrackingUrl
argument_list|()
operator|.
name|equals
argument_list|(
name|UNAVAILABLE
argument_list|)
condition|?
literal|"Unassigned"
else|:
name|appAttempt
operator|.
name|getAppAttemptState
argument_list|()
operator|==
name|YarnApplicationAttemptState
operator|.
name|FINISHED
operator|||
name|appAttempt
operator|.
name|getAppAttemptState
argument_list|()
operator|==
name|YarnApplicationAttemptState
operator|.
name|FAILED
operator|||
name|appAttempt
operator|.
name|getAppAttemptState
argument_list|()
operator|==
name|YarnApplicationAttemptState
operator|.
name|KILLED
condition|?
literal|"History"
else|:
literal|"ApplicationMaster"
argument_list|)
operator|.
name|_
argument_list|(
literal|"Diagnostics Info:"
argument_list|,
name|appAttempt
operator|.
name|getDiagnosticsInfo
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|appAttempt
operator|.
name|getDiagnosticsInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|hasAMContainer (ContainerId containerId, Collection<ContainerReport> containers)
specifier|protected
name|boolean
name|hasAMContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Collection
argument_list|<
name|ContainerReport
argument_list|>
name|containers
parameter_list|)
block|{
for|for
control|(
name|ContainerReport
name|container
range|:
name|containers
control|)
block|{
if|if
condition|(
name|containerId
operator|.
name|equals
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|createAttemptHeadRoomTable (Block html)
specifier|protected
name|void
name|createAttemptHeadRoomTable
parameter_list|(
name|Block
name|html
parameter_list|)
block|{        }
DECL|method|createTablesForAttemptMetrics (Block html)
specifier|protected
name|void
name|createTablesForAttemptMetrics
parameter_list|(
name|Block
name|html
parameter_list|)
block|{    }
block|}
end_class

end_unit

