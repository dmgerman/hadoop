begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.store.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|curator
operator|.
name|ZKCuratorManager
operator|.
name|getNodePath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|curator
operator|.
name|ZKCuratorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|federation
operator|.
name|proto
operator|.
name|YarnServerFederationProtos
operator|.
name|SubClusterIdProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|federation
operator|.
name|proto
operator|.
name|YarnServerFederationProtos
operator|.
name|SubClusterInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|federation
operator|.
name|proto
operator|.
name|YarnServerFederationProtos
operator|.
name|SubClusterPolicyConfigurationProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|FederationStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|AddApplicationHomeSubClusterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|AddApplicationHomeSubClusterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|ApplicationHomeSubCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|DeleteApplicationHomeSubClusterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|DeleteApplicationHomeSubClusterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetApplicationHomeSubClusterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetApplicationHomeSubClusterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetApplicationsHomeSubClusterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetApplicationsHomeSubClusterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterPoliciesConfigurationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterPoliciesConfigurationsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterPolicyConfigurationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterPolicyConfigurationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClustersInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClustersInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SetSubClusterPolicyConfigurationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SetSubClusterPolicyConfigurationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterDeregisterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterDeregisterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterHeartbeatRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterPolicyConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterRegisterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterRegisterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|UpdateApplicationHomeSubClusterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|UpdateApplicationHomeSubClusterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|SubClusterIdPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|SubClusterInfoPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|SubClusterPolicyConfigurationPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|utils
operator|.
name|FederationApplicationHomeSubClusterStoreInputValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|utils
operator|.
name|FederationMembershipStateStoreInputValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|utils
operator|.
name|FederationPolicyStoreInputValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|utils
operator|.
name|FederationStateStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|records
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_comment
comment|/**  * ZooKeeper implementation of {@link FederationStateStore}.  *  * The znode structure is as follows:  * ROOT_DIR_PATH  * |--- MEMBERSHIP  * |     |----- SC1  * |     |----- SC2  * |--- APPLICATION  * |     |----- APP1  * |     |----- APP2  * |--- POLICY  *       |----- QUEUE1  *       |----- QUEUE1  */
end_comment

begin_class
DECL|class|ZookeeperFederationStateStore
specifier|public
class|class
name|ZookeeperFederationStateStore
implements|implements
name|FederationStateStore
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ZookeeperFederationStateStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ROOT_ZNODE_NAME_MEMBERSHIP
specifier|private
specifier|final
specifier|static
name|String
name|ROOT_ZNODE_NAME_MEMBERSHIP
init|=
literal|"memberships"
decl_stmt|;
DECL|field|ROOT_ZNODE_NAME_APPLICATION
specifier|private
specifier|final
specifier|static
name|String
name|ROOT_ZNODE_NAME_APPLICATION
init|=
literal|"applications"
decl_stmt|;
DECL|field|ROOT_ZNODE_NAME_POLICY
specifier|private
specifier|final
specifier|static
name|String
name|ROOT_ZNODE_NAME_POLICY
init|=
literal|"policies"
decl_stmt|;
comment|/** Interface to Zookeeper. */
DECL|field|zkManager
specifier|private
name|ZKCuratorManager
name|zkManager
decl_stmt|;
comment|/** Directory to store the state store data. */
DECL|field|baseZNode
specifier|private
name|String
name|baseZNode
decl_stmt|;
DECL|field|appsZNode
specifier|private
name|String
name|appsZNode
decl_stmt|;
DECL|field|membershipZNode
specifier|private
name|String
name|membershipZNode
decl_stmt|;
DECL|field|policiesZNode
specifier|private
name|String
name|policiesZNode
decl_stmt|;
annotation|@
name|Override
DECL|method|init (Configuration conf)
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|YarnException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing ZooKeeper connection"
argument_list|)
expr_stmt|;
name|baseZNode
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|FEDERATION_STATESTORE_ZK_PARENT_PATH
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_FEDERATION_STATESTORE_ZK_PARENT_PATH
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|zkManager
operator|=
operator|new
name|ZKCuratorManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|zkManager
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot initialize the ZK connection"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Base znodes
name|membershipZNode
operator|=
name|getNodePath
argument_list|(
name|baseZNode
argument_list|,
name|ROOT_ZNODE_NAME_MEMBERSHIP
argument_list|)
expr_stmt|;
name|appsZNode
operator|=
name|getNodePath
argument_list|(
name|baseZNode
argument_list|,
name|ROOT_ZNODE_NAME_APPLICATION
argument_list|)
expr_stmt|;
name|policiesZNode
operator|=
name|getNodePath
argument_list|(
name|baseZNode
argument_list|,
name|ROOT_ZNODE_NAME_POLICY
argument_list|)
expr_stmt|;
comment|// Create base znode for each entity
try|try
block|{
name|List
argument_list|<
name|ACL
argument_list|>
name|zkAcl
init|=
name|ZKCuratorManager
operator|.
name|getZKAcls
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|zkManager
operator|.
name|createRootDirRecursively
argument_list|(
name|membershipZNode
argument_list|,
name|zkAcl
argument_list|)
expr_stmt|;
name|zkManager
operator|.
name|createRootDirRecursively
argument_list|(
name|appsZNode
argument_list|,
name|zkAcl
argument_list|)
expr_stmt|;
name|zkManager
operator|.
name|createRootDirRecursively
argument_list|(
name|policiesZNode
argument_list|,
name|zkAcl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"Cannot create base directories: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|zkManager
operator|!=
literal|null
condition|)
block|{
name|zkManager
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|addApplicationHomeSubCluster ( AddApplicationHomeSubClusterRequest request)
specifier|public
name|AddApplicationHomeSubClusterResponse
name|addApplicationHomeSubCluster
parameter_list|(
name|AddApplicationHomeSubClusterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|FederationApplicationHomeSubClusterStoreInputValidator
operator|.
name|validate
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|ApplicationHomeSubCluster
name|app
init|=
name|request
operator|.
name|getApplicationHomeSubCluster
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|app
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
comment|// Try to write the subcluster
name|SubClusterId
name|homeSubCluster
init|=
name|app
operator|.
name|getHomeSubCluster
argument_list|()
decl_stmt|;
try|try
block|{
name|putApp
argument_list|(
name|appId
argument_list|,
name|homeSubCluster
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"Cannot add application home subcluster for "
operator|+
name|appId
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
comment|// Check for the actual subcluster
try|try
block|{
name|homeSubCluster
operator|=
name|getApp
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"Cannot check app home subcluster for "
operator|+
name|appId
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
return|return
name|AddApplicationHomeSubClusterResponse
operator|.
name|newInstance
argument_list|(
name|homeSubCluster
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|UpdateApplicationHomeSubClusterResponse
DECL|method|updateApplicationHomeSubCluster ( UpdateApplicationHomeSubClusterRequest request)
name|updateApplicationHomeSubCluster
parameter_list|(
name|UpdateApplicationHomeSubClusterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|FederationApplicationHomeSubClusterStoreInputValidator
operator|.
name|validate
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|ApplicationHomeSubCluster
name|app
init|=
name|request
operator|.
name|getApplicationHomeSubCluster
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|app
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|SubClusterId
name|homeSubCluster
init|=
name|getApp
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|homeSubCluster
operator|==
literal|null
condition|)
block|{
name|String
name|errMsg
init|=
literal|"Application "
operator|+
name|appId
operator|+
literal|" does not exist"
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
name|SubClusterId
name|newSubClusterId
init|=
name|request
operator|.
name|getApplicationHomeSubCluster
argument_list|()
operator|.
name|getHomeSubCluster
argument_list|()
decl_stmt|;
name|putApp
argument_list|(
name|appId
argument_list|,
name|newSubClusterId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|UpdateApplicationHomeSubClusterResponse
operator|.
name|newInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationHomeSubCluster ( GetApplicationHomeSubClusterRequest request)
specifier|public
name|GetApplicationHomeSubClusterResponse
name|getApplicationHomeSubCluster
parameter_list|(
name|GetApplicationHomeSubClusterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|FederationApplicationHomeSubClusterStoreInputValidator
operator|.
name|validate
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|request
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|SubClusterId
name|homeSubCluster
init|=
name|getApp
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|homeSubCluster
operator|==
literal|null
condition|)
block|{
name|String
name|errMsg
init|=
literal|"Application "
operator|+
name|appId
operator|+
literal|" does not exist"
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
return|return
name|GetApplicationHomeSubClusterResponse
operator|.
name|newInstance
argument_list|(
name|ApplicationHomeSubCluster
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|homeSubCluster
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationsHomeSubCluster ( GetApplicationsHomeSubClusterRequest request)
specifier|public
name|GetApplicationsHomeSubClusterResponse
name|getApplicationsHomeSubCluster
parameter_list|(
name|GetApplicationsHomeSubClusterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|List
argument_list|<
name|ApplicationHomeSubCluster
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|child
range|:
name|zkManager
operator|.
name|getChildren
argument_list|(
name|appsZNode
argument_list|)
control|)
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|SubClusterId
name|homeSubCluster
init|=
name|getApp
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|ApplicationHomeSubCluster
name|app
init|=
name|ApplicationHomeSubCluster
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|homeSubCluster
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"Cannot get apps: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
return|return
name|GetApplicationsHomeSubClusterResponse
operator|.
name|newInstance
argument_list|(
name|result
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|DeleteApplicationHomeSubClusterResponse
DECL|method|deleteApplicationHomeSubCluster ( DeleteApplicationHomeSubClusterRequest request)
name|deleteApplicationHomeSubCluster
parameter_list|(
name|DeleteApplicationHomeSubClusterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|FederationApplicationHomeSubClusterStoreInputValidator
operator|.
name|validate
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|request
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|String
name|appZNode
init|=
name|getNodePath
argument_list|(
name|appsZNode
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|exists
init|=
literal|false
decl_stmt|;
try|try
block|{
name|exists
operator|=
name|zkManager
operator|.
name|exists
argument_list|(
name|appZNode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"Cannot check app: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|exists
condition|)
block|{
name|String
name|errMsg
init|=
literal|"Application "
operator|+
name|appId
operator|+
literal|" does not exist"
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|zkManager
operator|.
name|delete
argument_list|(
name|appZNode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"Cannot delete app: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
return|return
name|DeleteApplicationHomeSubClusterResponse
operator|.
name|newInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|registerSubCluster ( SubClusterRegisterRequest request)
specifier|public
name|SubClusterRegisterResponse
name|registerSubCluster
parameter_list|(
name|SubClusterRegisterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|FederationMembershipStateStoreInputValidator
operator|.
name|validate
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|SubClusterInfo
name|subClusterInfo
init|=
name|request
operator|.
name|getSubClusterInfo
argument_list|()
decl_stmt|;
name|SubClusterId
name|subclusterId
init|=
name|subClusterInfo
operator|.
name|getSubClusterId
argument_list|()
decl_stmt|;
comment|// Update the heartbeat time
name|long
name|currentTime
init|=
name|getCurrentTime
argument_list|()
decl_stmt|;
name|subClusterInfo
operator|.
name|setLastHeartBeat
argument_list|(
name|currentTime
argument_list|)
expr_stmt|;
try|try
block|{
name|putSubclusterInfo
argument_list|(
name|subclusterId
argument_list|,
name|subClusterInfo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"Cannot register subcluster: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
return|return
name|SubClusterRegisterResponse
operator|.
name|newInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|deregisterSubCluster ( SubClusterDeregisterRequest request)
specifier|public
name|SubClusterDeregisterResponse
name|deregisterSubCluster
parameter_list|(
name|SubClusterDeregisterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|FederationMembershipStateStoreInputValidator
operator|.
name|validate
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|SubClusterId
name|subClusterId
init|=
name|request
operator|.
name|getSubClusterId
argument_list|()
decl_stmt|;
name|SubClusterState
name|state
init|=
name|request
operator|.
name|getState
argument_list|()
decl_stmt|;
comment|// Get the current information and update it
name|SubClusterInfo
name|subClusterInfo
init|=
name|getSubclusterInfo
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
if|if
condition|(
name|subClusterInfo
operator|==
literal|null
condition|)
block|{
name|String
name|errMsg
init|=
literal|"SubCluster "
operator|+
name|subClusterId
operator|+
literal|" not found"
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|subClusterInfo
operator|.
name|setState
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|putSubclusterInfo
argument_list|(
name|subClusterId
argument_list|,
name|subClusterInfo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|SubClusterDeregisterResponse
operator|.
name|newInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|subClusterHeartbeat ( SubClusterHeartbeatRequest request)
specifier|public
name|SubClusterHeartbeatResponse
name|subClusterHeartbeat
parameter_list|(
name|SubClusterHeartbeatRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|FederationMembershipStateStoreInputValidator
operator|.
name|validate
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|SubClusterId
name|subClusterId
init|=
name|request
operator|.
name|getSubClusterId
argument_list|()
decl_stmt|;
name|SubClusterInfo
name|subClusterInfo
init|=
name|getSubclusterInfo
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
if|if
condition|(
name|subClusterInfo
operator|==
literal|null
condition|)
block|{
name|String
name|errMsg
init|=
literal|"SubCluster "
operator|+
name|subClusterId
operator|+
literal|" does not exist; cannot heartbeat"
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
name|long
name|currentTime
init|=
name|getCurrentTime
argument_list|()
decl_stmt|;
name|subClusterInfo
operator|.
name|setLastHeartBeat
argument_list|(
name|currentTime
argument_list|)
expr_stmt|;
name|subClusterInfo
operator|.
name|setState
argument_list|(
name|request
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|subClusterInfo
operator|.
name|setCapability
argument_list|(
name|request
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
name|putSubclusterInfo
argument_list|(
name|subClusterId
argument_list|,
name|subClusterInfo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|SubClusterHeartbeatResponse
operator|.
name|newInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getSubCluster ( GetSubClusterInfoRequest request)
specifier|public
name|GetSubClusterInfoResponse
name|getSubCluster
parameter_list|(
name|GetSubClusterInfoRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|FederationMembershipStateStoreInputValidator
operator|.
name|validate
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|SubClusterId
name|subClusterId
init|=
name|request
operator|.
name|getSubClusterId
argument_list|()
decl_stmt|;
name|SubClusterInfo
name|subClusterInfo
init|=
literal|null
decl_stmt|;
try|try
block|{
name|subClusterInfo
operator|=
name|getSubclusterInfo
argument_list|(
name|subClusterId
argument_list|)
expr_stmt|;
if|if
condition|(
name|subClusterInfo
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The queried SubCluster: {} does not exist."
argument_list|,
name|subClusterId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"Cannot get subcluster: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
return|return
name|GetSubClusterInfoResponse
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getSubClusters ( GetSubClustersInfoRequest request)
specifier|public
name|GetSubClustersInfoResponse
name|getSubClusters
parameter_list|(
name|GetSubClustersInfoRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|List
argument_list|<
name|SubClusterInfo
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|child
range|:
name|zkManager
operator|.
name|getChildren
argument_list|(
name|membershipZNode
argument_list|)
control|)
block|{
name|SubClusterId
name|subClusterId
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|SubClusterInfo
name|info
init|=
name|getSubclusterInfo
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|getFilterInactiveSubClusters
argument_list|()
operator|||
name|info
operator|.
name|getState
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"Cannot get subclusters: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
return|return
name|GetSubClustersInfoResponse
operator|.
name|newInstance
argument_list|(
name|result
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getPolicyConfiguration ( GetSubClusterPolicyConfigurationRequest request)
specifier|public
name|GetSubClusterPolicyConfigurationResponse
name|getPolicyConfiguration
parameter_list|(
name|GetSubClusterPolicyConfigurationRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|FederationPolicyStoreInputValidator
operator|.
name|validate
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|String
name|queue
init|=
name|request
operator|.
name|getQueue
argument_list|()
decl_stmt|;
name|SubClusterPolicyConfiguration
name|policy
init|=
literal|null
decl_stmt|;
try|try
block|{
name|policy
operator|=
name|getPolicy
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"Cannot get policy: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|policy
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Policy for queue: {} does not exist."
argument_list|,
name|queue
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|GetSubClusterPolicyConfigurationResponse
operator|.
name|newInstance
argument_list|(
name|policy
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setPolicyConfiguration ( SetSubClusterPolicyConfigurationRequest request)
specifier|public
name|SetSubClusterPolicyConfigurationResponse
name|setPolicyConfiguration
parameter_list|(
name|SetSubClusterPolicyConfigurationRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|FederationPolicyStoreInputValidator
operator|.
name|validate
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|SubClusterPolicyConfiguration
name|policy
init|=
name|request
operator|.
name|getPolicyConfiguration
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|queue
init|=
name|policy
operator|.
name|getQueue
argument_list|()
decl_stmt|;
name|putPolicy
argument_list|(
name|queue
argument_list|,
name|policy
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"Cannot set policy: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
return|return
name|SetSubClusterPolicyConfigurationResponse
operator|.
name|newInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPoliciesConfigurations ( GetSubClusterPoliciesConfigurationsRequest request)
specifier|public
name|GetSubClusterPoliciesConfigurationsResponse
name|getPoliciesConfigurations
parameter_list|(
name|GetSubClusterPoliciesConfigurationsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|List
argument_list|<
name|SubClusterPolicyConfiguration
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|child
range|:
name|zkManager
operator|.
name|getChildren
argument_list|(
name|policiesZNode
argument_list|)
control|)
block|{
name|SubClusterPolicyConfiguration
name|policy
init|=
name|getPolicy
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"Cannot get policies: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
return|return
name|GetSubClusterPoliciesConfigurationsResponse
operator|.
name|newInstance
argument_list|(
name|result
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCurrentVersion ()
specifier|public
name|Version
name|getCurrentVersion
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|loadVersion ()
specifier|public
name|Version
name|loadVersion
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**    * Get the subcluster for an application.    * @param appId Application identifier.    * @return Subcluster identifier.    * @throws Exception If it cannot contact ZooKeeper.    */
DECL|method|getApp (final ApplicationId appId)
specifier|private
name|SubClusterId
name|getApp
parameter_list|(
specifier|final
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|YarnException
block|{
name|String
name|appZNode
init|=
name|getNodePath
argument_list|(
name|appsZNode
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SubClusterId
name|subClusterId
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|get
argument_list|(
name|appZNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|subClusterId
operator|=
operator|new
name|SubClusterIdPBImpl
argument_list|(
name|SubClusterIdProto
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"Cannot parse application at "
operator|+
name|appZNode
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|subClusterId
return|;
block|}
comment|/**    * Put an application.    * @param appId Application identifier.    * @param subClusterId Subcluster identifier.    * @throws Exception If it cannot contact ZooKeeper.    */
DECL|method|putApp (final ApplicationId appId, final SubClusterId subClusterId, boolean update)
specifier|private
name|void
name|putApp
parameter_list|(
specifier|final
name|ApplicationId
name|appId
parameter_list|,
specifier|final
name|SubClusterId
name|subClusterId
parameter_list|,
name|boolean
name|update
parameter_list|)
throws|throws
name|YarnException
block|{
name|String
name|appZNode
init|=
name|getNodePath
argument_list|(
name|appsZNode
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SubClusterIdProto
name|proto
init|=
operator|(
operator|(
name|SubClusterIdPBImpl
operator|)
name|subClusterId
operator|)
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|proto
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|put
argument_list|(
name|appZNode
argument_list|,
name|data
argument_list|,
name|update
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the current information for a subcluster from Zookeeper.    * @param subclusterId Subcluster identifier.    * @return Subcluster information or null if it doesn't exist.    * @throws Exception If it cannot contact ZooKeeper.    */
DECL|method|getSubclusterInfo (final SubClusterId subclusterId)
specifier|private
name|SubClusterInfo
name|getSubclusterInfo
parameter_list|(
specifier|final
name|SubClusterId
name|subclusterId
parameter_list|)
throws|throws
name|YarnException
block|{
name|String
name|memberZNode
init|=
name|getNodePath
argument_list|(
name|membershipZNode
argument_list|,
name|subclusterId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SubClusterInfo
name|policy
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|get
argument_list|(
name|memberZNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|policy
operator|=
operator|new
name|SubClusterInfoPBImpl
argument_list|(
name|SubClusterInfoProto
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"Cannot parse subcluster info at "
operator|+
name|memberZNode
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|policy
return|;
block|}
comment|/**    * Put the subcluster information in Zookeeper.    * @param subclusterId Subcluster identifier.    * @param subClusterInfo Subcluster information.    * @throws Exception If it cannot contact ZooKeeper.    */
DECL|method|putSubclusterInfo (final SubClusterId subclusterId, final SubClusterInfo subClusterInfo, final boolean update)
specifier|private
name|void
name|putSubclusterInfo
parameter_list|(
specifier|final
name|SubClusterId
name|subclusterId
parameter_list|,
specifier|final
name|SubClusterInfo
name|subClusterInfo
parameter_list|,
specifier|final
name|boolean
name|update
parameter_list|)
throws|throws
name|YarnException
block|{
name|String
name|memberZNode
init|=
name|getNodePath
argument_list|(
name|membershipZNode
argument_list|,
name|subclusterId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SubClusterInfoProto
name|proto
init|=
operator|(
operator|(
name|SubClusterInfoPBImpl
operator|)
name|subClusterInfo
operator|)
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|proto
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|put
argument_list|(
name|memberZNode
argument_list|,
name|data
argument_list|,
name|update
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the queue policy from Zookeeper.    * @param queue Name of the queue.    * @return Subcluster policy configuration.    * @throws YarnException If it cannot contact ZooKeeper.    */
DECL|method|getPolicy (final String queue)
specifier|private
name|SubClusterPolicyConfiguration
name|getPolicy
parameter_list|(
specifier|final
name|String
name|queue
parameter_list|)
throws|throws
name|YarnException
block|{
name|String
name|policyZNode
init|=
name|getNodePath
argument_list|(
name|policiesZNode
argument_list|,
name|queue
argument_list|)
decl_stmt|;
name|SubClusterPolicyConfiguration
name|policy
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|get
argument_list|(
name|policyZNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|policy
operator|=
operator|new
name|SubClusterPolicyConfigurationPBImpl
argument_list|(
name|SubClusterPolicyConfigurationProto
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"Cannot parse policy at "
operator|+
name|policyZNode
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|policy
return|;
block|}
comment|/**    * Put the subcluster information in Zookeeper.    * @param queue Name of the queue.    * @param policy Subcluster policy configuration.    * @throws YarnException If it cannot contact ZooKeeper.    */
DECL|method|putPolicy (final String queue, final SubClusterPolicyConfiguration policy, boolean update)
specifier|private
name|void
name|putPolicy
parameter_list|(
specifier|final
name|String
name|queue
parameter_list|,
specifier|final
name|SubClusterPolicyConfiguration
name|policy
parameter_list|,
name|boolean
name|update
parameter_list|)
throws|throws
name|YarnException
block|{
name|String
name|policyZNode
init|=
name|getNodePath
argument_list|(
name|policiesZNode
argument_list|,
name|queue
argument_list|)
decl_stmt|;
name|SubClusterPolicyConfigurationProto
name|proto
init|=
operator|(
operator|(
name|SubClusterPolicyConfigurationPBImpl
operator|)
name|policy
operator|)
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|proto
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|put
argument_list|(
name|policyZNode
argument_list|,
name|data
argument_list|,
name|update
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get data from a znode in Zookeeper.    * @param znode Path of the znode.    * @return Data in the znode.    * @throws YarnException If it cannot contact ZooKeeper.    */
DECL|method|get (String znode)
specifier|private
name|byte
index|[]
name|get
parameter_list|(
name|String
name|znode
parameter_list|)
throws|throws
name|YarnException
block|{
name|boolean
name|exists
init|=
literal|false
decl_stmt|;
try|try
block|{
name|exists
operator|=
name|zkManager
operator|.
name|exists
argument_list|(
name|znode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"Cannot find znode "
operator|+
name|znode
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|exists
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"{} does not exist"
argument_list|,
name|znode
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|byte
index|[]
name|data
init|=
literal|null
decl_stmt|;
try|try
block|{
name|data
operator|=
name|zkManager
operator|.
name|getData
argument_list|(
name|znode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"Cannot get data from znode "
operator|+
name|znode
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
comment|/**    * Put data into a znode in Zookeeper.    * @param znode Path of the znode.    * @param data Data to write.    * @throws YarnException If it cannot contact ZooKeeper.    */
DECL|method|put (String znode, byte[] data, boolean update)
specifier|private
name|void
name|put
parameter_list|(
name|String
name|znode
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|boolean
name|update
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// Create the znode
name|boolean
name|created
init|=
literal|false
decl_stmt|;
try|try
block|{
name|created
operator|=
name|zkManager
operator|.
name|create
argument_list|(
name|znode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"Cannot create znode "
operator|+
name|znode
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|created
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} not created"
argument_list|,
name|znode
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|update
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"{} already existed and we are not updating"
argument_list|,
name|znode
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// Write the data into the znode
try|try
block|{
name|zkManager
operator|.
name|setData
argument_list|(
name|znode
argument_list|,
name|data
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"Cannot write data into znode "
operator|+
name|znode
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|FederationStateStoreUtils
operator|.
name|logAndThrowStoreException
argument_list|(
name|LOG
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the current time.    * @return Current time in milliseconds.    */
DECL|method|getCurrentTime ()
specifier|private
specifier|static
name|long
name|getCurrentTime
parameter_list|()
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|cal
operator|.
name|getTimeInMillis
argument_list|()
return|;
block|}
block|}
end_class

end_unit

