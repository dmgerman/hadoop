begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.store.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|// used in javadoc
end_comment

begin_comment
comment|/**  * {@link SubClusterPolicyConfiguration} is a class that represents a  * configuration of a policy. For a single queue, it contains a policy type  * (resolve to a class name) and its params as an opaque {@link ByteBuffer}.  *  * Note: by design the params are an opaque ByteBuffer, this allows for enough  * flexibility to evolve the policies without impacting the protocols to/from  * the federation state store.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|SubClusterPolicyConfiguration
specifier|public
specifier|abstract
class|class
name|SubClusterPolicyConfiguration
block|{
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|newInstance (String queue, String policyType, ByteBuffer policyParams)
specifier|public
specifier|static
name|SubClusterPolicyConfiguration
name|newInstance
parameter_list|(
name|String
name|queue
parameter_list|,
name|String
name|policyType
parameter_list|,
name|ByteBuffer
name|policyParams
parameter_list|)
block|{
name|SubClusterPolicyConfiguration
name|policy
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|SubClusterPolicyConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|policy
operator|.
name|setQueue
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setType
argument_list|(
name|policyType
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setParams
argument_list|(
name|policyParams
argument_list|)
expr_stmt|;
return|return
name|policy
return|;
block|}
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|newInstance ( SubClusterPolicyConfiguration conf)
specifier|public
specifier|static
name|SubClusterPolicyConfiguration
name|newInstance
parameter_list|(
name|SubClusterPolicyConfiguration
name|conf
parameter_list|)
block|{
name|SubClusterPolicyConfiguration
name|policy
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|SubClusterPolicyConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|policy
operator|.
name|setQueue
argument_list|(
name|conf
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setType
argument_list|(
name|conf
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setParams
argument_list|(
name|conf
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|policy
return|;
block|}
comment|/**    * Get the name of the queue for which we are configuring a policy.    *    * @return the name of the queue    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getQueue ()
specifier|public
specifier|abstract
name|String
name|getQueue
parameter_list|()
function_decl|;
comment|/**    * Sets the name of the queue for which we are configuring a policy.    *    * @param queueName the name of the queue    */
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setQueue (String queueName)
specifier|public
specifier|abstract
name|void
name|setQueue
parameter_list|(
name|String
name|queueName
parameter_list|)
function_decl|;
comment|/**    * Get the type of the policy. This could be random, round-robin, load-based,    * etc.    *    * @return the type of the policy    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getType ()
specifier|public
specifier|abstract
name|String
name|getType
parameter_list|()
function_decl|;
comment|/**    * Sets the type of the policy. This could be random, round-robin, load-based,    * etc.    *    * @param policyType the type of the policy    */
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setType (String policyType)
specifier|public
specifier|abstract
name|void
name|setType
parameter_list|(
name|String
name|policyType
parameter_list|)
function_decl|;
comment|/**    * Get the policy parameters. This affects how the policy behaves and an    * example could be weight distribution of queues across multiple    * sub-clusters.    *    * @return the byte array that contains the parameters    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getParams ()
specifier|public
specifier|abstract
name|ByteBuffer
name|getParams
parameter_list|()
function_decl|;
comment|/**    * Set the policy parameters. This affects how the policy behaves and an    * example could be weight distribution of queues across multiple    * sub-clusters.    *    * @param policyParams byte array that describes the policy    */
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setParams (ByteBuffer policyParams)
specifier|public
specifier|abstract
name|void
name|setParams
parameter_list|(
name|ByteBuffer
name|policyParams
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|31
operator|*
name|getParams
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|+
name|getType
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SubClusterPolicyConfiguration
name|other
init|=
operator|(
name|SubClusterPolicyConfiguration
operator|)
name|obj
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|getParams
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getParams
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getType
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" : "
argument_list|)
operator|.
name|append
argument_list|(
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

