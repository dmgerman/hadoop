begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.store
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterPoliciesConfigurationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterPoliciesConfigurationsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterPolicyConfigurationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterPolicyConfigurationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SetSubClusterPolicyConfigurationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SetSubClusterPolicyConfigurationResponse
import|;
end_import

begin_comment
comment|/**  * The FederationPolicyStore provides a key-value interface to access the  * policies configured for the system. The key is a "queue" name, i.e., the  * system allows to configure a different policy for each queue in the system  * (though each policy can make dynamic run-time decisions on a per-job/per-task  * basis). The value is a {@code SubClusterPolicyConfiguration}, a serialized  * representation of the policy type and its parameters.  */
end_comment

begin_interface
annotation|@
name|Private
annotation|@
name|Unstable
DECL|interface|FederationPolicyStore
specifier|public
interface|interface
name|FederationPolicyStore
block|{
comment|/**    * Get the policy configuration for a given queue.    *    * @param request the queue whose {@code SubClusterPolicyConfiguration} is    *          required    * @return the {@code SubClusterPolicyConfiguration} for the specified queue,    *         or {@code null} if there is no mapping for the queue    * @throws YarnException if the request is invalid/fails    */
DECL|method|getPolicyConfiguration ( GetSubClusterPolicyConfigurationRequest request)
name|GetSubClusterPolicyConfigurationResponse
name|getPolicyConfiguration
parameter_list|(
name|GetSubClusterPolicyConfigurationRequest
name|request
parameter_list|)
throws|throws
name|YarnException
function_decl|;
comment|/**    * Set the policy configuration for a given queue.    *    * @param request the {@code SubClusterPolicyConfiguration} with the    *          corresponding queue    * @return response empty on successfully updating the    *         {@code SubClusterPolicyConfiguration} for the specified queue    * @throws YarnException if the request is invalid/fails    */
DECL|method|setPolicyConfiguration ( SetSubClusterPolicyConfigurationRequest request)
name|SetSubClusterPolicyConfigurationResponse
name|setPolicyConfiguration
parameter_list|(
name|SetSubClusterPolicyConfigurationRequest
name|request
parameter_list|)
throws|throws
name|YarnException
function_decl|;
comment|/**    * Get a map of all queue-to-policy configurations.    *    * @param request empty to represent all configured queues in the system    * @return the policies for all currently active queues in the system    * @throws YarnException if the request is invalid/fails    */
DECL|method|getPoliciesConfigurations ( GetSubClusterPoliciesConfigurationsRequest request)
name|GetSubClusterPoliciesConfigurationsResponse
name|getPoliciesConfigurations
parameter_list|(
name|GetSubClusterPoliciesConfigurationsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
function_decl|;
block|}
end_interface

end_unit

