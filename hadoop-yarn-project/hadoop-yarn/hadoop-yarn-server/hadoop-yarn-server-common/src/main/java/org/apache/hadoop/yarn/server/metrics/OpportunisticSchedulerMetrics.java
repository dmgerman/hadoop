begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MetricsRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableCounterLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableGaugeInt
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|Interns
operator|.
name|info
import|;
end_import

begin_comment
comment|/**  * Metrics for Opportunistic Scheduler.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|Metrics
argument_list|(
name|context
operator|=
literal|"yarn"
argument_list|)
DECL|class|OpportunisticSchedulerMetrics
specifier|public
class|class
name|OpportunisticSchedulerMetrics
block|{
comment|// CHECKSTYLE:OFF:VisibilityModifier
DECL|field|isInitialized
specifier|private
specifier|static
name|AtomicBoolean
name|isInitialized
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|RECORD_INFO
specifier|private
specifier|static
specifier|final
name|MetricsInfo
name|RECORD_INFO
init|=
name|info
argument_list|(
literal|"OpportunisticSchedulerMetrics"
argument_list|,
literal|"Metrics for the Yarn Opportunistic Scheduler"
argument_list|)
decl_stmt|;
DECL|field|INSTANCE
specifier|private
specifier|static
specifier|volatile
name|OpportunisticSchedulerMetrics
name|INSTANCE
init|=
literal|null
decl_stmt|;
DECL|field|registry
specifier|private
specifier|static
name|MetricsRegistry
name|registry
decl_stmt|;
DECL|method|getMetrics ()
specifier|public
specifier|static
name|OpportunisticSchedulerMetrics
name|getMetrics
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isInitialized
operator|.
name|get
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|OpportunisticSchedulerMetrics
operator|.
name|class
init|)
block|{
if|if
condition|(
name|INSTANCE
operator|==
literal|null
condition|)
block|{
name|INSTANCE
operator|=
operator|new
name|OpportunisticSchedulerMetrics
argument_list|()
expr_stmt|;
name|registerMetrics
argument_list|()
expr_stmt|;
name|isInitialized
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|INSTANCE
return|;
block|}
DECL|method|registerMetrics ()
specifier|private
specifier|static
name|void
name|registerMetrics
parameter_list|()
block|{
name|registry
operator|=
operator|new
name|MetricsRegistry
argument_list|(
name|RECORD_INFO
argument_list|)
expr_stmt|;
name|registry
operator|.
name|tag
argument_list|(
name|RECORD_INFO
argument_list|,
literal|"ResourceManager"
argument_list|)
expr_stmt|;
name|MetricsSystem
name|ms
init|=
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
name|ms
operator|!=
literal|null
condition|)
block|{
name|ms
operator|.
name|register
argument_list|(
literal|"OpportunisticSchedulerMetrics"
argument_list|,
literal|"Metrics for the Yarn Opportunistic Scheduler"
argument_list|,
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Metric
argument_list|(
literal|"# of allocated opportunistic containers"
argument_list|)
DECL|field|allocatedOContainers
name|MutableGaugeInt
name|allocatedOContainers
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"Aggregate # of allocated opportunistic containers"
argument_list|)
DECL|field|aggregateOContainersAllocated
name|MutableCounterLong
name|aggregateOContainersAllocated
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"Aggregate # of released opportunistic containers"
argument_list|)
DECL|field|aggregateOContainersReleased
name|MutableCounterLong
name|aggregateOContainersReleased
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"Aggregate # of allocated node-local opportunistic containers"
argument_list|)
DECL|field|aggregateNodeLocalOContainersAllocated
name|MutableCounterLong
name|aggregateNodeLocalOContainersAllocated
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"Aggregate # of allocated rack-local opportunistic containers"
argument_list|)
DECL|field|aggregateRackLocalOContainersAllocated
name|MutableCounterLong
name|aggregateRackLocalOContainersAllocated
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"Aggregate # of allocated off-switch opportunistic containers"
argument_list|)
DECL|field|aggregateOffSwitchOContainersAllocated
name|MutableCounterLong
name|aggregateOffSwitchOContainersAllocated
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|method|getAllocatedContainers ()
specifier|public
name|int
name|getAllocatedContainers
parameter_list|()
block|{
return|return
name|allocatedOContainers
operator|.
name|value
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getAggregatedAllocatedContainers ()
specifier|public
name|long
name|getAggregatedAllocatedContainers
parameter_list|()
block|{
return|return
name|aggregateOContainersAllocated
operator|.
name|value
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getAggregatedReleasedContainers ()
specifier|public
name|long
name|getAggregatedReleasedContainers
parameter_list|()
block|{
return|return
name|aggregateOContainersReleased
operator|.
name|value
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getAggregatedNodeLocalContainers ()
specifier|public
name|long
name|getAggregatedNodeLocalContainers
parameter_list|()
block|{
return|return
name|aggregateNodeLocalOContainersAllocated
operator|.
name|value
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getAggregatedRackLocalContainers ()
specifier|public
name|long
name|getAggregatedRackLocalContainers
parameter_list|()
block|{
return|return
name|aggregateRackLocalOContainersAllocated
operator|.
name|value
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getAggregatedOffSwitchContainers ()
specifier|public
name|long
name|getAggregatedOffSwitchContainers
parameter_list|()
block|{
return|return
name|aggregateOffSwitchOContainersAllocated
operator|.
name|value
argument_list|()
return|;
block|}
comment|// Opportunistic Containers
DECL|method|incrAllocatedOppContainers (int numContainers)
specifier|public
name|void
name|incrAllocatedOppContainers
parameter_list|(
name|int
name|numContainers
parameter_list|)
block|{
name|allocatedOContainers
operator|.
name|incr
argument_list|(
name|numContainers
argument_list|)
expr_stmt|;
name|aggregateOContainersAllocated
operator|.
name|incr
argument_list|(
name|numContainers
argument_list|)
expr_stmt|;
block|}
DECL|method|incrReleasedOppContainers (int numContainers)
specifier|public
name|void
name|incrReleasedOppContainers
parameter_list|(
name|int
name|numContainers
parameter_list|)
block|{
name|aggregateOContainersReleased
operator|.
name|incr
argument_list|(
name|numContainers
argument_list|)
expr_stmt|;
name|allocatedOContainers
operator|.
name|decr
argument_list|(
name|numContainers
argument_list|)
expr_stmt|;
block|}
DECL|method|incrNodeLocalOppContainers ()
specifier|public
name|void
name|incrNodeLocalOppContainers
parameter_list|()
block|{
name|aggregateNodeLocalOContainersAllocated
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
DECL|method|incrRackLocalOppContainers ()
specifier|public
name|void
name|incrRackLocalOppContainers
parameter_list|()
block|{
name|aggregateRackLocalOContainersAllocated
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
DECL|method|incrOffSwitchOppContainers ()
specifier|public
name|void
name|incrOffSwitchOppContainers
parameter_list|()
block|{
name|aggregateOffSwitchOContainersAllocated
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

