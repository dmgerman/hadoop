begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Evolving
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DBIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|ReadOptions
import|;
end_import

begin_comment
comment|/**  * A wrapper for a DBIterator to translate the raw RuntimeExceptions that  * can be thrown into DBExceptions.  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Evolving
DECL|class|LeveldbIterator
specifier|public
class|class
name|LeveldbIterator
implements|implements
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
implements|,
name|Closeable
block|{
DECL|field|iter
specifier|private
name|DBIterator
name|iter
decl_stmt|;
comment|/**    * Create an iterator for the specified database    */
DECL|method|LeveldbIterator (DB db)
specifier|public
name|LeveldbIterator
parameter_list|(
name|DB
name|db
parameter_list|)
block|{
name|iter
operator|=
name|db
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
comment|/**    * Create an iterator for the specified database    */
DECL|method|LeveldbIterator (DB db, ReadOptions options)
specifier|public
name|LeveldbIterator
parameter_list|(
name|DB
name|db
parameter_list|,
name|ReadOptions
name|options
parameter_list|)
block|{
name|iter
operator|=
name|db
operator|.
name|iterator
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an iterator using the specified underlying DBIterator    */
DECL|method|LeveldbIterator (DBIterator iter)
specifier|public
name|LeveldbIterator
parameter_list|(
name|DBIterator
name|iter
parameter_list|)
block|{
name|this
operator|.
name|iter
operator|=
name|iter
expr_stmt|;
block|}
comment|/**    * Repositions the iterator so the key of the next BlockElement    * returned greater than or equal to the specified targetKey.    */
DECL|method|seek (byte[] key)
specifier|public
name|void
name|seek
parameter_list|(
name|byte
index|[]
name|key
parameter_list|)
throws|throws
name|DBException
block|{
try|try
block|{
name|iter
operator|.
name|seek
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DBException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Repositions the iterator so is is at the beginning of the Database.    */
DECL|method|seekToFirst ()
specifier|public
name|void
name|seekToFirst
parameter_list|()
throws|throws
name|DBException
block|{
try|try
block|{
name|iter
operator|.
name|seekToFirst
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DBException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Repositions the iterator so it is at the end of of the Database.    */
DECL|method|seekToLast ()
specifier|public
name|void
name|seekToLast
parameter_list|()
throws|throws
name|DBException
block|{
try|try
block|{
name|iter
operator|.
name|seekToLast
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DBException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Returns<tt>true</tt> if the iteration has more elements.    */
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
throws|throws
name|DBException
block|{
try|try
block|{
return|return
name|iter
operator|.
name|hasNext
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DBException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Returns the next element in the iteration.    */
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|next
parameter_list|()
throws|throws
name|DBException
block|{
try|try
block|{
return|return
name|iter
operator|.
name|next
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DBException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Returns the next element in the iteration, without advancing the    * iteration.    */
DECL|method|peekNext ()
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|peekNext
parameter_list|()
throws|throws
name|DBException
block|{
try|try
block|{
return|return
name|iter
operator|.
name|peekNext
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DBException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return true if there is a previous entry in the iteration.    */
DECL|method|hasPrev ()
specifier|public
name|boolean
name|hasPrev
parameter_list|()
throws|throws
name|DBException
block|{
try|try
block|{
return|return
name|iter
operator|.
name|hasPrev
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DBException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return the previous element in the iteration and rewinds the iteration.    */
DECL|method|prev ()
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|prev
parameter_list|()
throws|throws
name|DBException
block|{
try|try
block|{
return|return
name|iter
operator|.
name|prev
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DBException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return the previous element in the iteration, without rewinding the    * iteration.    */
DECL|method|peekPrev ()
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|peekPrev
parameter_list|()
throws|throws
name|DBException
block|{
try|try
block|{
return|return
name|iter
operator|.
name|peekPrev
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DBException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Removes from the database the last element returned by the iterator.    */
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
throws|throws
name|DBException
block|{
try|try
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DBException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Closes the iterator.    */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|iter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

