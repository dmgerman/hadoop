begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.store.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|exception
operator|.
name|FederationStateStoreInvalidInputException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterPolicyConfigurationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SetSubClusterPolicyConfigurationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterPolicyConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Utility class to validate the inputs to {@code FederationPolicyStore}, allows  * a fail fast mechanism for invalid user inputs.  *  */
end_comment

begin_class
DECL|class|FederationPolicyStoreInputValidator
specifier|public
specifier|final
class|class
name|FederationPolicyStoreInputValidator
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FederationPolicyStoreInputValidator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|FederationPolicyStoreInputValidator ()
specifier|private
name|FederationPolicyStoreInputValidator
parameter_list|()
block|{   }
comment|/**    * Quick validation on the input to check some obvious fail conditions (fail    * fast). Check if the provided    * {@link GetSubClusterPolicyConfigurationRequest} for querying policy's    * information is valid or not.    *    * @param request the {@link GetSubClusterPolicyConfigurationRequest} to    *          validate against    * @throws FederationStateStoreInvalidInputException if the request is invalid    */
DECL|method|validate (GetSubClusterPolicyConfigurationRequest request)
specifier|public
specifier|static
name|void
name|validate
parameter_list|(
name|GetSubClusterPolicyConfigurationRequest
name|request
parameter_list|)
throws|throws
name|FederationStateStoreInvalidInputException
block|{
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
name|String
name|message
init|=
literal|"Missing GetSubClusterPolicyConfiguration Request."
operator|+
literal|" Please try again by specifying a policy selection information."
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FederationStateStoreInvalidInputException
argument_list|(
name|message
argument_list|)
throw|;
block|}
comment|// validate queue id
name|checkQueue
argument_list|(
name|request
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Quick validation on the input to check some obvious fail conditions (fail    * fast). Check if the provided    * {@link SetSubClusterPolicyConfigurationRequest} for adding a new policy is    * valid or not.    *    * @param request the {@link SetSubClusterPolicyConfigurationRequest} to    *          validate against    * @throws FederationStateStoreInvalidInputException if the request is invalid    */
DECL|method|validate (SetSubClusterPolicyConfigurationRequest request)
specifier|public
specifier|static
name|void
name|validate
parameter_list|(
name|SetSubClusterPolicyConfigurationRequest
name|request
parameter_list|)
throws|throws
name|FederationStateStoreInvalidInputException
block|{
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
name|String
name|message
init|=
literal|"Missing SetSubClusterPolicyConfiguration Request."
operator|+
literal|" Please try again by specifying an policy insertion information."
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FederationStateStoreInvalidInputException
argument_list|(
name|message
argument_list|)
throw|;
block|}
comment|// validate subcluster policy configuration
name|checkSubClusterPolicyConfiguration
argument_list|(
name|request
operator|.
name|getPolicyConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validate if the SubClusterPolicyConfiguration is valid or not.    *    * @param policyConfiguration the policy information to be verified    * @throws FederationStateStoreInvalidInputException if the policy information    *           are invalid    */
DECL|method|checkSubClusterPolicyConfiguration ( SubClusterPolicyConfiguration policyConfiguration)
specifier|private
specifier|static
name|void
name|checkSubClusterPolicyConfiguration
parameter_list|(
name|SubClusterPolicyConfiguration
name|policyConfiguration
parameter_list|)
throws|throws
name|FederationStateStoreInvalidInputException
block|{
if|if
condition|(
name|policyConfiguration
operator|==
literal|null
condition|)
block|{
name|String
name|message
init|=
literal|"Missing SubClusterPolicyConfiguration."
operator|+
literal|" Please try again by specifying a SubClusterPolicyConfiguration."
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FederationStateStoreInvalidInputException
argument_list|(
name|message
argument_list|)
throw|;
block|}
comment|// validate queue id
name|checkQueue
argument_list|(
name|policyConfiguration
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
comment|// validate policy type
name|checkType
argument_list|(
name|policyConfiguration
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validate if the queue id is a valid or not.    *    * @param queue the queue id of the policy to be verified    * @throws FederationStateStoreInvalidInputException if the queue id is    *           invalid    */
DECL|method|checkQueue (String queue)
specifier|private
specifier|static
name|void
name|checkQueue
parameter_list|(
name|String
name|queue
parameter_list|)
throws|throws
name|FederationStateStoreInvalidInputException
block|{
if|if
condition|(
name|queue
operator|==
literal|null
operator|||
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|message
init|=
literal|"Missing Queue. Please try again by specifying a Queue."
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FederationStateStoreInvalidInputException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
comment|/**    * Validate if the policy type is a valid or not.    *    * @param type the type of the policy to be verified    * @throws FederationStateStoreInvalidInputException if the policy is invalid    */
DECL|method|checkType (String type)
specifier|private
specifier|static
name|void
name|checkType
parameter_list|(
name|String
name|type
parameter_list|)
throws|throws
name|FederationStateStoreInvalidInputException
block|{
if|if
condition|(
name|type
operator|==
literal|null
operator|||
name|type
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|message
init|=
literal|"Missing Policy Type."
operator|+
literal|" Please try again by specifying a Policy Type."
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FederationStateStoreInvalidInputException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

