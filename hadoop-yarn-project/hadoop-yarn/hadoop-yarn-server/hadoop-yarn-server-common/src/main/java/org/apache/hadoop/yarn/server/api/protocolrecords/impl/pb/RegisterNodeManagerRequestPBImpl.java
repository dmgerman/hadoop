begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.api.protocolrecords.impl.pb
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|NodeIdPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ResourcePBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|NodeIdProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|ResourceProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerCommonServiceProtos
operator|.
name|NMContainerStatusProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerCommonServiceProtos
operator|.
name|RegisterNodeManagerRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerCommonServiceProtos
operator|.
name|RegisterNodeManagerRequestProtoOrBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NMContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterNodeManagerRequest
import|;
end_import

begin_class
DECL|class|RegisterNodeManagerRequestPBImpl
specifier|public
class|class
name|RegisterNodeManagerRequestPBImpl
extends|extends
name|RegisterNodeManagerRequest
block|{
DECL|field|proto
name|RegisterNodeManagerRequestProto
name|proto
init|=
name|RegisterNodeManagerRequestProto
operator|.
name|getDefaultInstance
argument_list|()
decl_stmt|;
DECL|field|builder
name|RegisterNodeManagerRequestProto
operator|.
name|Builder
name|builder
init|=
literal|null
decl_stmt|;
DECL|field|viaProto
name|boolean
name|viaProto
init|=
literal|false
decl_stmt|;
DECL|field|resource
specifier|private
name|Resource
name|resource
init|=
literal|null
decl_stmt|;
DECL|field|nodeId
specifier|private
name|NodeId
name|nodeId
init|=
literal|null
decl_stmt|;
DECL|field|containerStatuses
specifier|private
name|List
argument_list|<
name|NMContainerStatus
argument_list|>
name|containerStatuses
init|=
literal|null
decl_stmt|;
DECL|method|RegisterNodeManagerRequestPBImpl ()
specifier|public
name|RegisterNodeManagerRequestPBImpl
parameter_list|()
block|{
name|builder
operator|=
name|RegisterNodeManagerRequestProto
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
block|}
DECL|method|RegisterNodeManagerRequestPBImpl (RegisterNodeManagerRequestProto proto)
specifier|public
name|RegisterNodeManagerRequestPBImpl
parameter_list|(
name|RegisterNodeManagerRequestProto
name|proto
parameter_list|)
block|{
name|this
operator|.
name|proto
operator|=
name|proto
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getProto ()
specifier|public
name|RegisterNodeManagerRequestProto
name|getProto
parameter_list|()
block|{
name|mergeLocalToProto
argument_list|()
expr_stmt|;
name|proto
operator|=
name|viaProto
condition|?
name|proto
else|:
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
return|return
name|proto
return|;
block|}
DECL|method|mergeLocalToBuilder ()
specifier|private
name|void
name|mergeLocalToBuilder
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|containerStatuses
operator|!=
literal|null
condition|)
block|{
name|addNMContainerStatusesToProto
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|resource
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setResource
argument_list|(
name|convertToProtoFormat
argument_list|(
name|this
operator|.
name|resource
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|nodeId
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setNodeId
argument_list|(
name|convertToProtoFormat
argument_list|(
name|this
operator|.
name|nodeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addNMContainerStatusesToProto ()
specifier|private
specifier|synchronized
name|void
name|addNMContainerStatusesToProto
parameter_list|()
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|clearContainerStatuses
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|NMContainerStatusProto
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|NMContainerStatusProto
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NMContainerStatus
name|status
range|:
name|this
operator|.
name|containerStatuses
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|convertToProtoFormat
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addAllContainerStatuses
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|mergeLocalToProto ()
specifier|private
name|void
name|mergeLocalToProto
parameter_list|()
block|{
if|if
condition|(
name|viaProto
condition|)
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|mergeLocalToBuilder
argument_list|()
expr_stmt|;
name|proto
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|maybeInitBuilder ()
specifier|private
name|void
name|maybeInitBuilder
parameter_list|()
block|{
if|if
condition|(
name|viaProto
operator|||
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
name|RegisterNodeManagerRequestProto
operator|.
name|newBuilder
argument_list|(
name|proto
argument_list|)
expr_stmt|;
block|}
name|viaProto
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getResource ()
specifier|public
name|Resource
name|getResource
parameter_list|()
block|{
name|RegisterNodeManagerRequestProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|resource
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|resource
return|;
block|}
if|if
condition|(
operator|!
name|p
operator|.
name|hasResource
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|this
operator|.
name|resource
operator|=
name|convertFromProtoFormat
argument_list|(
name|p
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|resource
return|;
block|}
annotation|@
name|Override
DECL|method|setResource (Resource resource)
specifier|public
name|void
name|setResource
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
name|builder
operator|.
name|clearResource
argument_list|()
expr_stmt|;
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNodeId ()
specifier|public
name|NodeId
name|getNodeId
parameter_list|()
block|{
name|RegisterNodeManagerRequestProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|nodeId
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|nodeId
return|;
block|}
if|if
condition|(
operator|!
name|p
operator|.
name|hasNodeId
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|this
operator|.
name|nodeId
operator|=
name|convertFromProtoFormat
argument_list|(
name|p
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|nodeId
return|;
block|}
annotation|@
name|Override
DECL|method|setNodeId (NodeId nodeId)
specifier|public
name|void
name|setNodeId
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|nodeId
operator|==
literal|null
condition|)
name|builder
operator|.
name|clearNodeId
argument_list|()
expr_stmt|;
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getHttpPort ()
specifier|public
name|int
name|getHttpPort
parameter_list|()
block|{
name|RegisterNodeManagerRequestProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|hasHttpPort
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
operator|(
name|p
operator|.
name|getHttpPort
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|setHttpPort (int httpPort)
specifier|public
name|void
name|setHttpPort
parameter_list|(
name|int
name|httpPort
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setHttpPort
argument_list|(
name|httpPort
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNMContainerStatuses ()
specifier|public
name|List
argument_list|<
name|NMContainerStatus
argument_list|>
name|getNMContainerStatuses
parameter_list|()
block|{
name|initContainerRecoveryReports
argument_list|()
expr_stmt|;
return|return
name|containerStatuses
return|;
block|}
DECL|method|initContainerRecoveryReports ()
specifier|private
name|void
name|initContainerRecoveryReports
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|containerStatuses
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|RegisterNodeManagerRequestProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
name|List
argument_list|<
name|NMContainerStatusProto
argument_list|>
name|list
init|=
name|p
operator|.
name|getContainerStatusesList
argument_list|()
decl_stmt|;
name|this
operator|.
name|containerStatuses
operator|=
operator|new
name|ArrayList
argument_list|<
name|NMContainerStatus
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|NMContainerStatusProto
name|c
range|:
name|list
control|)
block|{
name|this
operator|.
name|containerStatuses
operator|.
name|add
argument_list|(
name|convertFromProtoFormat
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setContainerStatuses ( List<NMContainerStatus> containerReports)
specifier|public
name|void
name|setContainerStatuses
parameter_list|(
name|List
argument_list|<
name|NMContainerStatus
argument_list|>
name|containerReports
parameter_list|)
block|{
if|if
condition|(
name|containerReports
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|initContainerRecoveryReports
argument_list|()
expr_stmt|;
name|this
operator|.
name|containerStatuses
operator|.
name|addAll
argument_list|(
name|containerReports
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getProto
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|getProto
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|cast
argument_list|(
name|other
argument_list|)
operator|.
name|getProto
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getNMVersion ()
specifier|public
name|String
name|getNMVersion
parameter_list|()
block|{
name|RegisterNodeManagerRequestProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|hasNmVersion
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
operator|(
name|p
operator|.
name|getNmVersion
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|setNMVersion (String version)
specifier|public
name|void
name|setNMVersion
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setNmVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
DECL|method|convertFromProtoFormat (NodeIdProto p)
specifier|private
name|NodeIdPBImpl
name|convertFromProtoFormat
parameter_list|(
name|NodeIdProto
name|p
parameter_list|)
block|{
return|return
operator|new
name|NodeIdPBImpl
argument_list|(
name|p
argument_list|)
return|;
block|}
DECL|method|convertToProtoFormat (NodeId t)
specifier|private
name|NodeIdProto
name|convertToProtoFormat
parameter_list|(
name|NodeId
name|t
parameter_list|)
block|{
return|return
operator|(
operator|(
name|NodeIdPBImpl
operator|)
name|t
operator|)
operator|.
name|getProto
argument_list|()
return|;
block|}
DECL|method|convertFromProtoFormat (ResourceProto p)
specifier|private
name|ResourcePBImpl
name|convertFromProtoFormat
parameter_list|(
name|ResourceProto
name|p
parameter_list|)
block|{
return|return
operator|new
name|ResourcePBImpl
argument_list|(
name|p
argument_list|)
return|;
block|}
DECL|method|convertToProtoFormat (Resource t)
specifier|private
name|ResourceProto
name|convertToProtoFormat
parameter_list|(
name|Resource
name|t
parameter_list|)
block|{
return|return
operator|(
operator|(
name|ResourcePBImpl
operator|)
name|t
operator|)
operator|.
name|getProto
argument_list|()
return|;
block|}
DECL|method|convertFromProtoFormat (NMContainerStatusProto c)
specifier|private
name|NMContainerStatusPBImpl
name|convertFromProtoFormat
parameter_list|(
name|NMContainerStatusProto
name|c
parameter_list|)
block|{
return|return
operator|new
name|NMContainerStatusPBImpl
argument_list|(
name|c
argument_list|)
return|;
block|}
DECL|method|convertToProtoFormat (NMContainerStatus c)
specifier|private
name|NMContainerStatusProto
name|convertToProtoFormat
parameter_list|(
name|NMContainerStatus
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|NMContainerStatusPBImpl
operator|)
name|c
operator|)
operator|.
name|getProto
argument_list|()
return|;
block|}
block|}
end_class

end_unit

