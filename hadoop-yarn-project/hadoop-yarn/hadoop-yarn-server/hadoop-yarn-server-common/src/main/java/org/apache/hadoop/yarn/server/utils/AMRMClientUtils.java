begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationMasterProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|ClientRMProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ApplicationMasterNotRegisteredException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidApplicationMasterRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Utility class for AMRMClient.  */
end_comment

begin_class
annotation|@
name|Private
DECL|class|AMRMClientUtils
specifier|public
specifier|final
class|class
name|AMRMClientUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AMRMClientUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|APP_ALREADY_REGISTERED_MESSAGE
specifier|public
specifier|static
specifier|final
name|String
name|APP_ALREADY_REGISTERED_MESSAGE
init|=
literal|"Application Master is already registered : "
decl_stmt|;
DECL|method|AMRMClientUtils ()
specifier|private
name|AMRMClientUtils
parameter_list|()
block|{   }
comment|/**    * Handle ApplicationNotRegistered exception and re-register.    *    * @param appId application Id    * @param rmProxy RM proxy instance    * @param registerRequest the AM re-register request    * @throws YarnException if re-register fails    */
DECL|method|handleNotRegisteredExceptionAndReRegister ( ApplicationId appId, ApplicationMasterProtocol rmProxy, RegisterApplicationMasterRequest registerRequest)
specifier|public
specifier|static
name|void
name|handleNotRegisteredExceptionAndReRegister
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|ApplicationMasterProtocol
name|rmProxy
parameter_list|,
name|RegisterApplicationMasterRequest
name|registerRequest
parameter_list|)
throws|throws
name|YarnException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"App attempt {} not registered, most likely due to RM failover. "
operator|+
literal|" Trying to re-register."
argument_list|,
name|appId
argument_list|)
expr_stmt|;
try|try
block|{
name|rmProxy
operator|.
name|registerApplicationMaster
argument_list|(
name|registerRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|InvalidApplicationMasterRequestException
operator|&&
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|APP_ALREADY_REGISTERED_MESSAGE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Concurrent thread successfully registered, moving on."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error trying to re-register AM"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Helper method for client calling ApplicationMasterProtocol.allocate that    * handles re-register if RM fails over.    *    * @param request allocate request    * @param rmProxy RM proxy    * @param registerRequest the register request for re-register    * @param appId application id    * @return allocate response    * @throws YarnException if RM call fails    * @throws IOException if RM call fails    */
DECL|method|allocateWithReRegister (AllocateRequest request, ApplicationMasterProtocol rmProxy, RegisterApplicationMasterRequest registerRequest, ApplicationId appId)
specifier|public
specifier|static
name|AllocateResponse
name|allocateWithReRegister
parameter_list|(
name|AllocateRequest
name|request
parameter_list|,
name|ApplicationMasterProtocol
name|rmProxy
parameter_list|,
name|RegisterApplicationMasterRequest
name|registerRequest
parameter_list|,
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
try|try
block|{
return|return
name|rmProxy
operator|.
name|allocate
argument_list|(
name|request
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ApplicationMasterNotRegisteredException
name|e
parameter_list|)
block|{
name|handleNotRegisteredExceptionAndReRegister
argument_list|(
name|appId
argument_list|,
name|rmProxy
argument_list|,
name|registerRequest
argument_list|)
expr_stmt|;
comment|// reset responseId after re-register
name|request
operator|.
name|setResponseId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// retry allocate
return|return
name|allocateWithReRegister
argument_list|(
name|request
argument_list|,
name|rmProxy
argument_list|,
name|registerRequest
argument_list|,
name|appId
argument_list|)
return|;
block|}
block|}
comment|/**    * Helper method for client calling    * ApplicationMasterProtocol.finishApplicationMaster that handles re-register    * if RM fails over.    *    * @param request finishApplicationMaster request    * @param rmProxy RM proxy    * @param registerRequest the register request for re-register    * @param appId application id    * @return finishApplicationMaster response    * @throws YarnException if RM call fails    * @throws IOException if RM call fails    */
DECL|method|finishAMWithReRegister ( FinishApplicationMasterRequest request, ApplicationMasterProtocol rmProxy, RegisterApplicationMasterRequest registerRequest, ApplicationId appId)
specifier|public
specifier|static
name|FinishApplicationMasterResponse
name|finishAMWithReRegister
parameter_list|(
name|FinishApplicationMasterRequest
name|request
parameter_list|,
name|ApplicationMasterProtocol
name|rmProxy
parameter_list|,
name|RegisterApplicationMasterRequest
name|registerRequest
parameter_list|,
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
try|try
block|{
return|return
name|rmProxy
operator|.
name|finishApplicationMaster
argument_list|(
name|request
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ApplicationMasterNotRegisteredException
name|ex
parameter_list|)
block|{
name|handleNotRegisteredExceptionAndReRegister
argument_list|(
name|appId
argument_list|,
name|rmProxy
argument_list|,
name|registerRequest
argument_list|)
expr_stmt|;
comment|// retry finishAM after re-register
return|return
name|finishAMWithReRegister
argument_list|(
name|request
argument_list|,
name|rmProxy
argument_list|,
name|registerRequest
argument_list|,
name|appId
argument_list|)
return|;
block|}
block|}
comment|/**    * Create a proxy for the specified protocol.    *    * @param configuration Configuration to generate {@link ClientRMProxy}    * @param protocol Protocol for the proxy    * @param user the user on whose behalf the proxy is being created    * @param token the auth token to use for connection    * @param<T> Type information of the proxy    * @return Proxy to the RM    * @throws IOException on failure    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|createRMProxy (final Configuration configuration, final Class<T> protocol, UserGroupInformation user, final Token<? extends TokenIdentifier> token)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|createRMProxy
parameter_list|(
specifier|final
name|Configuration
name|configuration
parameter_list|,
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|protocol
parameter_list|,
name|UserGroupInformation
name|user
parameter_list|,
specifier|final
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|String
name|rmClusterId
init|=
name|configuration
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CLUSTER_ID
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_CLUSTER_ID
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating RMProxy to RM {} for protocol {} for user {}"
argument_list|,
name|rmClusterId
argument_list|,
name|protocol
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|user
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
comment|// preserve the token service sent by the RM when adding the token
comment|// to ensure we replace the previous token setup by the RM.
comment|// Afterwards we can update the service address for the RPC layer.
comment|// Same as YarnServerSecurityUtils.updateAMRMToken()
name|user
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|token
operator|.
name|setService
argument_list|(
name|ClientRMProxy
operator|.
name|getAMRMTokenService
argument_list|(
name|configuration
argument_list|)
argument_list|)
expr_stmt|;
name|setAuthModeInConf
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
specifier|final
name|T
name|proxyConnection
init|=
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|T
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|ClientRMProxy
operator|.
name|createRMProxy
argument_list|(
name|configuration
argument_list|,
name|protocol
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|proxyConnection
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|setAuthModeInConf (Configuration conf)
specifier|private
specifier|static
name|void
name|setAuthModeInConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
name|SaslRpcServer
operator|.
name|AuthMethod
operator|.
name|TOKEN
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

