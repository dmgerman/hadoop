begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.security.http
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|FilterContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|FilterInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpServer2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|KerberosAuthenticationHandler
import|;
end_import

begin_class
annotation|@
name|Unstable
DECL|class|RMAuthenticationFilterInitializer
specifier|public
class|class
name|RMAuthenticationFilterInitializer
extends|extends
name|FilterInitializer
block|{
DECL|field|configPrefix
name|String
name|configPrefix
decl_stmt|;
DECL|field|signatureSecretFileProperty
name|String
name|signatureSecretFileProperty
decl_stmt|;
DECL|field|kerberosPrincipalProperty
name|String
name|kerberosPrincipalProperty
decl_stmt|;
DECL|field|cookiePath
name|String
name|cookiePath
decl_stmt|;
DECL|method|RMAuthenticationFilterInitializer ()
specifier|public
name|RMAuthenticationFilterInitializer
parameter_list|()
block|{
name|this
operator|.
name|configPrefix
operator|=
literal|"hadoop.http.authentication."
expr_stmt|;
name|this
operator|.
name|signatureSecretFileProperty
operator|=
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
operator|+
literal|".file"
expr_stmt|;
name|this
operator|.
name|kerberosPrincipalProperty
operator|=
name|KerberosAuthenticationHandler
operator|.
name|PRINCIPAL
expr_stmt|;
name|this
operator|.
name|cookiePath
operator|=
literal|"/"
expr_stmt|;
block|}
DECL|method|createFilterConfig (Configuration conf)
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|createFilterConfig
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filterConfig
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// setting the cookie path to root '/' so it is used for all resources.
name|filterConfig
operator|.
name|put
argument_list|(
name|AuthenticationFilter
operator|.
name|COOKIE_PATH
argument_list|,
name|cookiePath
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|conf
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|configPrefix
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|conf
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|configPrefix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|filterConfig
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|signatureSecretFile
init|=
name|filterConfig
operator|.
name|get
argument_list|(
name|signatureSecretFileProperty
argument_list|)
decl_stmt|;
if|if
condition|(
name|signatureSecretFile
operator|!=
literal|null
condition|)
block|{
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|StringBuilder
name|secret
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|reader
operator|=
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|signatureSecretFile
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|int
name|c
init|=
name|reader
operator|.
name|read
argument_list|()
decl_stmt|;
while|while
condition|(
name|c
operator|>
operator|-
literal|1
condition|)
block|{
name|secret
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|reader
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|filterConfig
operator|.
name|put
argument_list|(
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
argument_list|,
name|secret
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// if running in non-secure mode, this filter only gets added
comment|// because the user has not setup his own filter so just generate
comment|// a random secret. in secure mode, the user needs to setup security
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not read HTTP signature secret file: "
operator|+
name|signatureSecretFile
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Resolve _HOST into bind address
name|String
name|bindAddress
init|=
name|conf
operator|.
name|get
argument_list|(
name|HttpServer2
operator|.
name|BIND_ADDRESS
argument_list|)
decl_stmt|;
name|String
name|principal
init|=
name|filterConfig
operator|.
name|get
argument_list|(
name|kerberosPrincipalProperty
argument_list|)
decl_stmt|;
if|if
condition|(
name|principal
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|principal
operator|=
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|principal
argument_list|,
name|bindAddress
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not resolve Kerberos principal name: "
operator|+
name|ex
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|filterConfig
operator|.
name|put
argument_list|(
name|KerberosAuthenticationHandler
operator|.
name|PRINCIPAL
argument_list|,
name|principal
argument_list|)
expr_stmt|;
block|}
return|return
name|filterConfig
return|;
block|}
annotation|@
name|Override
DECL|method|initFilter (FilterContainer container, Configuration conf)
specifier|public
name|void
name|initFilter
parameter_list|(
name|FilterContainer
name|container
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filterConfig
init|=
name|createFilterConfig
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|container
operator|.
name|addFilter
argument_list|(
literal|"YARNAuthenticationFilter"
argument_list|,
name|RMAuthenticationFilter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|filterConfig
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

