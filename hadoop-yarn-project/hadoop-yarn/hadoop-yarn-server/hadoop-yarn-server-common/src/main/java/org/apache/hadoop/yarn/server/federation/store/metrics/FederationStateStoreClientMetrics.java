begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.store.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MetricsRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableCounterLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableQuantiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableRate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|FederationStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Performance metrics for FederationStateStore implementations.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
annotation|@
name|Metrics
argument_list|(
name|about
operator|=
literal|"Performance and usage metrics for Federation StateStore"
argument_list|,
name|context
operator|=
literal|"fedr"
argument_list|)
DECL|class|FederationStateStoreClientMetrics
specifier|public
specifier|final
class|class
name|FederationStateStoreClientMetrics
implements|implements
name|MetricsSource
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FederationStateStoreClientMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|REGISTRY
specifier|private
specifier|static
specifier|final
name|MetricsRegistry
name|REGISTRY
init|=
operator|new
name|MetricsRegistry
argument_list|(
literal|"FederationStateStoreClientMetrics"
argument_list|)
decl_stmt|;
DECL|field|STATESTORE_API_METHODS
specifier|private
specifier|final
specifier|static
name|Method
index|[]
name|STATESTORE_API_METHODS
init|=
name|FederationStateStore
operator|.
name|class
operator|.
name|getMethods
argument_list|()
decl_stmt|;
comment|// Map method names to counter objects
DECL|field|API_TO_FAILED_CALLS
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MutableCounterLong
argument_list|>
name|API_TO_FAILED_CALLS
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MutableCounterLong
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|API_TO_SUCCESSFUL_CALLS
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MutableRate
argument_list|>
name|API_TO_SUCCESSFUL_CALLS
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MutableRate
argument_list|>
argument_list|()
decl_stmt|;
comment|// Provide quantile latency for each api call.
DECL|field|API_TO_QUANTILE_METRICS
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MutableQuantiles
argument_list|>
name|API_TO_QUANTILE_METRICS
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MutableQuantiles
argument_list|>
argument_list|()
decl_stmt|;
comment|// Error string templates for logging calls from methods not in
comment|// FederationStateStore API
DECL|field|UNKOWN_FAIL_ERROR_MSG
specifier|private
specifier|static
specifier|final
name|String
name|UNKOWN_FAIL_ERROR_MSG
init|=
literal|"Not recording failed call for unknown FederationStateStore method {}"
decl_stmt|;
DECL|field|UNKNOWN_SUCCESS_ERROR_MSG
specifier|private
specifier|static
specifier|final
name|String
name|UNKNOWN_SUCCESS_ERROR_MSG
init|=
literal|"Not recording successful call for unknown "
operator|+
literal|"FederationStateStore method {}"
decl_stmt|;
comment|// Aggregate metrics are shared, and don't have to be looked up per call
annotation|@
name|Metric
argument_list|(
literal|"Total number of successful calls and latency(ms)"
argument_list|)
DECL|field|totalSucceededCalls
specifier|private
specifier|static
name|MutableRate
name|totalSucceededCalls
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"Total number of failed StateStore calls"
argument_list|)
DECL|field|totalFailedCalls
specifier|private
specifier|static
name|MutableCounterLong
name|totalFailedCalls
decl_stmt|;
comment|// This after the static members are initialized, or the constructor will
comment|// throw a NullPointerException
DECL|field|S_INSTANCE
specifier|private
specifier|static
specifier|final
name|FederationStateStoreClientMetrics
name|S_INSTANCE
init|=
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
operator|.
name|register
argument_list|(
operator|new
name|FederationStateStoreClientMetrics
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|getInstance ()
specifier|synchronized
specifier|public
specifier|static
name|FederationStateStoreClientMetrics
name|getInstance
parameter_list|()
block|{
return|return
name|S_INSTANCE
return|;
block|}
DECL|method|FederationStateStoreClientMetrics ()
specifier|private
name|FederationStateStoreClientMetrics
parameter_list|()
block|{
comment|// Create the metrics for each method and put them into the map
for|for
control|(
name|Method
name|m
range|:
name|STATESTORE_API_METHODS
control|)
block|{
name|String
name|methodName
init|=
name|m
operator|.
name|getName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Registering Federation StateStore Client metrics for {}"
argument_list|,
name|methodName
argument_list|)
expr_stmt|;
comment|// This metric only records the number of failed calls; it does not
comment|// capture latency information
name|API_TO_FAILED_CALLS
operator|.
name|put
argument_list|(
name|methodName
argument_list|,
name|REGISTRY
operator|.
name|newCounter
argument_list|(
name|methodName
operator|+
literal|"_numFailedCalls"
argument_list|,
literal|"# failed calls to "
operator|+
name|methodName
argument_list|,
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
comment|// This metric records both the number and average latency of successful
comment|// calls.
name|API_TO_SUCCESSFUL_CALLS
operator|.
name|put
argument_list|(
name|methodName
argument_list|,
name|REGISTRY
operator|.
name|newRate
argument_list|(
name|methodName
operator|+
literal|"_successfulCalls"
argument_list|,
literal|"# successful calls and latency(ms) for"
operator|+
name|methodName
argument_list|)
argument_list|)
expr_stmt|;
comment|// This metric records the quantile-based latency of each successful call,
comment|// re-sampled every 10 seconds.
name|API_TO_QUANTILE_METRICS
operator|.
name|put
argument_list|(
name|methodName
argument_list|,
name|REGISTRY
operator|.
name|newQuantiles
argument_list|(
name|methodName
operator|+
literal|"Latency"
argument_list|,
literal|"Quantile latency (ms) for "
operator|+
name|methodName
argument_list|,
literal|"ops"
argument_list|,
literal|"latency"
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|failedStateStoreCall ()
specifier|public
specifier|static
name|void
name|failedStateStoreCall
parameter_list|()
block|{
name|String
name|methodName
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getStackTrace
argument_list|()
index|[
literal|2
index|]
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|MutableCounterLong
name|methodMetric
init|=
name|API_TO_FAILED_CALLS
operator|.
name|get
argument_list|(
name|methodName
argument_list|)
decl_stmt|;
if|if
condition|(
name|methodMetric
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|UNKOWN_FAIL_ERROR_MSG
argument_list|,
name|methodName
argument_list|)
expr_stmt|;
return|return;
block|}
name|totalFailedCalls
operator|.
name|incr
argument_list|()
expr_stmt|;
name|methodMetric
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
DECL|method|succeededStateStoreCall (long duration)
specifier|public
specifier|static
name|void
name|succeededStateStoreCall
parameter_list|(
name|long
name|duration
parameter_list|)
block|{
name|String
name|methodName
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getStackTrace
argument_list|()
index|[
literal|2
index|]
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|MutableRate
name|methodMetric
init|=
name|API_TO_SUCCESSFUL_CALLS
operator|.
name|get
argument_list|(
name|methodName
argument_list|)
decl_stmt|;
name|MutableQuantiles
name|methodQuantileMetric
init|=
name|API_TO_QUANTILE_METRICS
operator|.
name|get
argument_list|(
name|methodName
argument_list|)
decl_stmt|;
if|if
condition|(
name|methodMetric
operator|==
literal|null
operator|||
name|methodQuantileMetric
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|UNKNOWN_SUCCESS_ERROR_MSG
argument_list|,
name|methodName
argument_list|)
expr_stmt|;
return|return;
block|}
name|totalSucceededCalls
operator|.
name|add
argument_list|(
name|duration
argument_list|)
expr_stmt|;
name|methodMetric
operator|.
name|add
argument_list|(
name|duration
argument_list|)
expr_stmt|;
name|methodQuantileMetric
operator|.
name|add
argument_list|(
name|duration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMetrics (MetricsCollector collector, boolean all)
specifier|public
name|void
name|getMetrics
parameter_list|(
name|MetricsCollector
name|collector
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|REGISTRY
operator|.
name|snapshot
argument_list|(
name|collector
operator|.
name|addRecord
argument_list|(
name|REGISTRY
operator|.
name|info
argument_list|()
argument_list|)
argument_list|,
name|all
argument_list|)
expr_stmt|;
block|}
comment|// Getters for unit testing
annotation|@
name|VisibleForTesting
DECL|method|getNumFailedCallsForMethod (String methodName)
specifier|static
name|long
name|getNumFailedCallsForMethod
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
return|return
name|API_TO_FAILED_CALLS
operator|.
name|get
argument_list|(
name|methodName
argument_list|)
operator|.
name|value
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getNumSucceessfulCallsForMethod (String methodName)
specifier|static
name|long
name|getNumSucceessfulCallsForMethod
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
return|return
name|API_TO_SUCCESSFUL_CALLS
operator|.
name|get
argument_list|(
name|methodName
argument_list|)
operator|.
name|lastStat
argument_list|()
operator|.
name|numSamples
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getLatencySucceessfulCallsForMethod (String methodName)
specifier|static
name|double
name|getLatencySucceessfulCallsForMethod
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
return|return
name|API_TO_SUCCESSFUL_CALLS
operator|.
name|get
argument_list|(
name|methodName
argument_list|)
operator|.
name|lastStat
argument_list|()
operator|.
name|mean
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getNumFailedCalls ()
specifier|static
name|long
name|getNumFailedCalls
parameter_list|()
block|{
return|return
name|totalFailedCalls
operator|.
name|value
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getNumSucceededCalls ()
specifier|static
name|long
name|getNumSucceededCalls
parameter_list|()
block|{
return|return
name|totalSucceededCalls
operator|.
name|lastStat
argument_list|()
operator|.
name|numSamples
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getLatencySucceededCalls ()
specifier|static
name|double
name|getLatencySucceededCalls
parameter_list|()
block|{
return|return
name|totalSucceededCalls
operator|.
name|lastStat
argument_list|()
operator|.
name|mean
argument_list|()
return|;
block|}
block|}
end_class

end_unit

