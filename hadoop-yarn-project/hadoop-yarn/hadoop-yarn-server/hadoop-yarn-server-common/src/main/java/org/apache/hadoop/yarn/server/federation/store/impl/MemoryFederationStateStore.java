begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.store.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|FederationMembershipStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterDeregisterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterDeregisterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClustersInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClustersInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterHeartbeatRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterRegisterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterRegisterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|MonotonicClock
import|;
end_import

begin_comment
comment|/**  * In-memory implementation of FederationMembershipStateStore.  */
end_comment

begin_class
DECL|class|MemoryFederationStateStore
specifier|public
class|class
name|MemoryFederationStateStore
implements|implements
name|FederationMembershipStateStore
block|{
DECL|field|membership
specifier|private
specifier|final
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|SubClusterInfo
argument_list|>
name|membership
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|SubClusterId
argument_list|,
name|SubClusterInfo
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|clock
specifier|private
specifier|final
name|MonotonicClock
name|clock
init|=
operator|new
name|MonotonicClock
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|registerSubCluster ( SubClusterRegisterRequest request)
specifier|public
name|SubClusterRegisterResponse
name|registerSubCluster
parameter_list|(
name|SubClusterRegisterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|SubClusterInfo
name|subClusterInfo
init|=
name|request
operator|.
name|getSubClusterInfo
argument_list|()
decl_stmt|;
name|subClusterInfo
operator|.
name|setLastStartTime
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|membership
operator|.
name|put
argument_list|(
name|subClusterInfo
operator|.
name|getSubClusterId
argument_list|()
argument_list|,
name|subClusterInfo
argument_list|)
expr_stmt|;
return|return
name|SubClusterRegisterResponse
operator|.
name|newInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|deregisterSubCluster ( SubClusterDeregisterRequest request)
specifier|public
name|SubClusterDeregisterResponse
name|deregisterSubCluster
parameter_list|(
name|SubClusterDeregisterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|SubClusterInfo
name|subClusterInfo
init|=
name|membership
operator|.
name|get
argument_list|(
name|request
operator|.
name|getSubClusterId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|subClusterInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"SubCluster "
operator|+
name|request
operator|.
name|getSubClusterId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
else|else
block|{
name|subClusterInfo
operator|.
name|setState
argument_list|(
name|request
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|SubClusterDeregisterResponse
operator|.
name|newInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|subClusterHeartbeat ( SubClusterHeartbeatRequest request)
specifier|public
name|SubClusterHeartbeatResponse
name|subClusterHeartbeat
parameter_list|(
name|SubClusterHeartbeatRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|SubClusterId
name|subClusterId
init|=
name|request
operator|.
name|getSubClusterId
argument_list|()
decl_stmt|;
name|SubClusterInfo
name|subClusterInfo
init|=
name|membership
operator|.
name|get
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
if|if
condition|(
name|subClusterInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Subcluster "
operator|+
name|subClusterId
operator|.
name|toString
argument_list|()
operator|+
literal|" does not exist; cannot heartbeat"
argument_list|)
throw|;
block|}
name|subClusterInfo
operator|.
name|setLastHeartBeat
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|subClusterInfo
operator|.
name|setState
argument_list|(
name|request
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|subClusterInfo
operator|.
name|setCapability
argument_list|(
name|request
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|SubClusterHeartbeatResponse
operator|.
name|newInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getSubCluster ( GetSubClusterInfoRequest request)
specifier|public
name|GetSubClusterInfoResponse
name|getSubCluster
parameter_list|(
name|GetSubClusterInfoRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|SubClusterId
name|subClusterId
init|=
name|request
operator|.
name|getSubClusterId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|membership
operator|.
name|containsKey
argument_list|(
name|subClusterId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Subcluster "
operator|+
name|subClusterId
operator|.
name|toString
argument_list|()
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
return|return
name|GetSubClusterInfoResponse
operator|.
name|newInstance
argument_list|(
name|membership
operator|.
name|get
argument_list|(
name|subClusterId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getSubClusters ( GetSubClustersInfoRequest request)
specifier|public
name|GetSubClustersInfoResponse
name|getSubClusters
parameter_list|(
name|GetSubClustersInfoRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|List
argument_list|<
name|SubClusterInfo
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|SubClusterInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SubClusterInfo
name|info
range|:
name|membership
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|getFilterInactiveSubClusters
argument_list|()
operator|||
name|info
operator|.
name|getState
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|GetSubClustersInfoResponse
operator|.
name|newInstance
argument_list|(
name|result
argument_list|)
return|;
block|}
block|}
end_class

end_unit

