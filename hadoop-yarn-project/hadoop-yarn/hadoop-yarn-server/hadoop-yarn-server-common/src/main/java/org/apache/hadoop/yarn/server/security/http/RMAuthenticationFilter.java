begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.security.http
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequestWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|AbstractDelegationTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
operator|.
name|DelegationTokenAuthenticationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
operator|.
name|DelegationTokenAuthenticator
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|RMAuthenticationFilter
specifier|public
class|class
name|RMAuthenticationFilter
extends|extends
name|DelegationTokenAuthenticationFilter
block|{
DECL|field|manager
specifier|static
specifier|private
name|AbstractDelegationTokenSecretManager
argument_list|<
name|?
argument_list|>
name|manager
decl_stmt|;
DECL|field|OLD_HEADER
specifier|private
specifier|static
specifier|final
name|String
name|OLD_HEADER
init|=
literal|"Hadoop-YARN-Auth-Delegation-Token"
decl_stmt|;
DECL|method|RMAuthenticationFilter ()
specifier|public
name|RMAuthenticationFilter
parameter_list|()
block|{   }
annotation|@
name|Override
DECL|method|init (FilterConfig filterConfig)
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{
name|filterConfig
operator|.
name|getServletContext
argument_list|()
operator|.
name|setAttribute
argument_list|(
name|DelegationTokenAuthenticationFilter
operator|.
name|DELEGATION_TOKEN_SECRET_MANAGER_ATTR
argument_list|,
name|manager
argument_list|)
expr_stmt|;
name|super
operator|.
name|init
argument_list|(
name|filterConfig
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|doFilter (ServletRequest request, ServletResponse response, FilterChain filterChain)
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|request
parameter_list|,
name|ServletResponse
name|response
parameter_list|,
name|FilterChain
name|filterChain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|HttpServletRequest
name|req
init|=
operator|(
name|HttpServletRequest
operator|)
name|request
decl_stmt|;
name|String
name|newHeader
init|=
name|req
operator|.
name|getHeader
argument_list|(
name|DelegationTokenAuthenticator
operator|.
name|DELEGATION_TOKEN_HEADER
argument_list|)
decl_stmt|;
if|if
condition|(
name|newHeader
operator|==
literal|null
operator|||
name|newHeader
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// For backward compatibility, allow use of the old header field
comment|// only when the new header doesn't exist
specifier|final
name|String
name|oldHeader
init|=
name|req
operator|.
name|getHeader
argument_list|(
name|OLD_HEADER
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldHeader
operator|!=
literal|null
operator|&&
operator|!
name|oldHeader
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|request
operator|=
operator|new
name|HttpServletRequestWrapper
argument_list|(
name|req
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|getHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|DelegationTokenAuthenticator
operator|.
name|DELEGATION_TOKEN_HEADER
argument_list|)
condition|)
block|{
return|return
name|oldHeader
return|;
block|}
return|return
name|super
operator|.
name|getHeader
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
block|}
name|super
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|filterChain
argument_list|)
expr_stmt|;
block|}
DECL|method|setDelegationTokenSecretManager ( AbstractDelegationTokenSecretManager<?> manager)
specifier|public
specifier|static
name|void
name|setDelegationTokenSecretManager
parameter_list|(
name|AbstractDelegationTokenSecretManager
argument_list|<
name|?
argument_list|>
name|manager
parameter_list|)
block|{
name|RMAuthenticationFilter
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
block|}
block|}
end_class

end_unit

